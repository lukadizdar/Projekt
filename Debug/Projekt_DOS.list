
Projekt_DOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bee8  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  0800c070  0800c070  0000d070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0a4  0800c0a4  0000e87c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c0a4  0800c0a4  0000d0a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c0ac  0800c0ac  0000e87c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0ac  0800c0ac  0000d0ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c0b0  0800c0b0  0000d0b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000087c  20000000  0800c0b4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e87c  2**0
                  CONTENTS
 10 .bss          00002688  2000087c  2000087c  0000e87c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002f04  20002f04  0000e87c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e87c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000222b1  00000000  00000000  0000e8ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000057d7  00000000  00000000  00030b5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c00  00000000  00000000  00036338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000155b  00000000  00000000  00037f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000288e7  00000000  00000000  00039493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026e09  00000000  00000000  00061d7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4773  00000000  00000000  00088b83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000b3  00000000  00000000  0016d2f6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000772c  00000000  00000000  0016d3ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00174ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00000ed7  00000000  00000000  00174b3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 000000c8  00000000  00000000  00175a12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000087c 	.word	0x2000087c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800c058 	.word	0x0800c058

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000880 	.word	0x20000880
 80001c4:	0800c058 	.word	0x0800c058

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004be:	463b      	mov	r3, r7
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	605a      	str	r2, [r3, #4]
 80004c6:	609a      	str	r2, [r3, #8]
 80004c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004ca:	4b22      	ldr	r3, [pc, #136]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004cc:	4a22      	ldr	r2, [pc, #136]	@ (8000558 <MX_ADC1_Init+0xa0>)
 80004ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004d0:	4b20      	ldr	r3, [pc, #128]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004d2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80004d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80004de:	4b1d      	ldr	r3, [pc, #116]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80004f2:	4b18      	ldr	r3, [pc, #96]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80004f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80004fa:	4b16      	ldr	r3, [pc, #88]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004fc:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000500:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000502:	4b14      	ldr	r3, [pc, #80]	@ (8000554 <MX_ADC1_Init+0x9c>)
 8000504:	2200      	movs	r2, #0
 8000506:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000508:	4b12      	ldr	r3, [pc, #72]	@ (8000554 <MX_ADC1_Init+0x9c>)
 800050a:	2201      	movs	r2, #1
 800050c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800050e:	4b11      	ldr	r3, [pc, #68]	@ (8000554 <MX_ADC1_Init+0x9c>)
 8000510:	2201      	movs	r2, #1
 8000512:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000516:	4b0f      	ldr	r3, [pc, #60]	@ (8000554 <MX_ADC1_Init+0x9c>)
 8000518:	2201      	movs	r2, #1
 800051a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800051c:	480d      	ldr	r0, [pc, #52]	@ (8000554 <MX_ADC1_Init+0x9c>)
 800051e:	f001 f94d 	bl	80017bc <HAL_ADC_Init>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000528:	f000 fde8 	bl	80010fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800052c:	2301      	movs	r3, #1
 800052e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000530:	2301      	movs	r3, #1
 8000532:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000534:	2300      	movs	r3, #0
 8000536:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000538:	463b      	mov	r3, r7
 800053a:	4619      	mov	r1, r3
 800053c:	4805      	ldr	r0, [pc, #20]	@ (8000554 <MX_ADC1_Init+0x9c>)
 800053e:	f001 faa5 	bl	8001a8c <HAL_ADC_ConfigChannel>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000548:	f000 fdd8 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800054c:	bf00      	nop
 800054e:	3710      	adds	r7, #16
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	20000898 	.word	0x20000898
 8000558:	40012000 	.word	0x40012000

0800055c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b08a      	sub	sp, #40	@ 0x28
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000564:	f107 0314 	add.w	r3, r7, #20
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a2f      	ldr	r2, [pc, #188]	@ (8000638 <HAL_ADC_MspInit+0xdc>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d157      	bne.n	800062e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	613b      	str	r3, [r7, #16]
 8000582:	4b2e      	ldr	r3, [pc, #184]	@ (800063c <HAL_ADC_MspInit+0xe0>)
 8000584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000586:	4a2d      	ldr	r2, [pc, #180]	@ (800063c <HAL_ADC_MspInit+0xe0>)
 8000588:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800058c:	6453      	str	r3, [r2, #68]	@ 0x44
 800058e:	4b2b      	ldr	r3, [pc, #172]	@ (800063c <HAL_ADC_MspInit+0xe0>)
 8000590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000596:	613b      	str	r3, [r7, #16]
 8000598:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	4b27      	ldr	r3, [pc, #156]	@ (800063c <HAL_ADC_MspInit+0xe0>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a2:	4a26      	ldr	r2, [pc, #152]	@ (800063c <HAL_ADC_MspInit+0xe0>)
 80005a4:	f043 0301 	orr.w	r3, r3, #1
 80005a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005aa:	4b24      	ldr	r3, [pc, #144]	@ (800063c <HAL_ADC_MspInit+0xe0>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80005b6:	2302      	movs	r3, #2
 80005b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ba:	2303      	movs	r3, #3
 80005bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	4619      	mov	r1, r3
 80005c8:	481d      	ldr	r0, [pc, #116]	@ (8000640 <HAL_ADC_MspInit+0xe4>)
 80005ca:	f002 f981 	bl	80028d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80005ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 80005d0:	4a1d      	ldr	r2, [pc, #116]	@ (8000648 <HAL_ADC_MspInit+0xec>)
 80005d2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80005d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005da:	4b1a      	ldr	r3, [pc, #104]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 80005dc:	2200      	movs	r2, #0
 80005de:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005e0:	4b18      	ldr	r3, [pc, #96]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80005e6:	4b17      	ldr	r3, [pc, #92]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 80005e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005ec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005ee:	4b15      	ldr	r3, [pc, #84]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 80005f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80005f4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80005f6:	4b13      	ldr	r3, [pc, #76]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 80005f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80005fc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80005fe:	4b11      	ldr	r3, [pc, #68]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 8000600:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000604:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000606:	4b0f      	ldr	r3, [pc, #60]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 8000608:	2200      	movs	r2, #0
 800060a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800060c:	4b0d      	ldr	r3, [pc, #52]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 800060e:	2200      	movs	r2, #0
 8000610:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000612:	480c      	ldr	r0, [pc, #48]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 8000614:	f001 fdec 	bl	80021f0 <HAL_DMA_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800061e:	f000 fd6d 	bl	80010fc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4a07      	ldr	r2, [pc, #28]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 8000626:	639a      	str	r2, [r3, #56]	@ 0x38
 8000628:	4a06      	ldr	r2, [pc, #24]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800062e:	bf00      	nop
 8000630:	3728      	adds	r7, #40	@ 0x28
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40012000 	.word	0x40012000
 800063c:	40023800 	.word	0x40023800
 8000640:	40020000 	.word	0x40020000
 8000644:	200008e0 	.word	0x200008e0
 8000648:	40026410 	.word	0x40026410

0800064c <init_AudioReset>:
#include "i2s.h"
#include "spi.h"
#include "usb_host.h"
#include "gpio.h"
#include "audio.h"
void init_AudioReset() {
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, AUDIO_RESET_PIN, GPIO_PIN_SET);
 8000650:	2201      	movs	r2, #1
 8000652:	2110      	movs	r1, #16
 8000654:	4802      	ldr	r0, [pc, #8]	@ (8000660 <init_AudioReset+0x14>)
 8000656:	f002 fad7 	bl	8002c08 <HAL_GPIO_WritePin>
}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40020c00 	.word	0x40020c00

08000664 <configAudio>:
void configAudio() {
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af02      	add	r7, sp, #8
    uint8_t bytes[2];
    init_AudioReset();
 800066a:	f7ff ffef 	bl	800064c <init_AudioReset>

    /* Power sequence */
    // Set Power Control Register to "on" state
    bytes[0] = 0x02;
 800066e:	2302      	movs	r3, #2
 8000670:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x01;
 8000672:	2301      	movs	r3, #1
 8000674:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000676:	1d3a      	adds	r2, r7, #4
 8000678:	2364      	movs	r3, #100	@ 0x64
 800067a:	9300      	str	r3, [sp, #0]
 800067c:	2302      	movs	r3, #2
 800067e:	2194      	movs	r1, #148	@ 0x94
 8000680:	486f      	ldr	r0, [pc, #444]	@ (8000840 <configAudio+0x1dc>)
 8000682:	f004 fd53 	bl	800512c <HAL_I2C_Master_Transmit>

    /* Initialization sequence */
    bytes[0] = 0x00;
 8000686:	2300      	movs	r3, #0
 8000688:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x99;
 800068a:	2399      	movs	r3, #153	@ 0x99
 800068c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800068e:	1d3a      	adds	r2, r7, #4
 8000690:	2364      	movs	r3, #100	@ 0x64
 8000692:	9300      	str	r3, [sp, #0]
 8000694:	2302      	movs	r3, #2
 8000696:	2194      	movs	r1, #148	@ 0x94
 8000698:	4869      	ldr	r0, [pc, #420]	@ (8000840 <configAudio+0x1dc>)
 800069a:	f004 fd47 	bl	800512c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x47;
 800069e:	2347      	movs	r3, #71	@ 0x47
 80006a0:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x80;
 80006a2:	2380      	movs	r3, #128	@ 0x80
 80006a4:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80006a6:	1d3a      	adds	r2, r7, #4
 80006a8:	2364      	movs	r3, #100	@ 0x64
 80006aa:	9300      	str	r3, [sp, #0]
 80006ac:	2302      	movs	r3, #2
 80006ae:	2194      	movs	r1, #148	@ 0x94
 80006b0:	4863      	ldr	r0, [pc, #396]	@ (8000840 <configAudio+0x1dc>)
 80006b2:	f004 fd3b 	bl	800512c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x32;
 80006b6:	2332      	movs	r3, #50	@ 0x32
 80006b8:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x80;
 80006ba:	2380      	movs	r3, #128	@ 0x80
 80006bc:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80006be:	1d3a      	adds	r2, r7, #4
 80006c0:	2364      	movs	r3, #100	@ 0x64
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	2302      	movs	r3, #2
 80006c6:	2194      	movs	r1, #148	@ 0x94
 80006c8:	485d      	ldr	r0, [pc, #372]	@ (8000840 <configAudio+0x1dc>)
 80006ca:	f004 fd2f 	bl	800512c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x32;
 80006ce:	2332      	movs	r3, #50	@ 0x32
 80006d0:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x00;
 80006d2:	2300      	movs	r3, #0
 80006d4:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80006d6:	1d3a      	adds	r2, r7, #4
 80006d8:	2364      	movs	r3, #100	@ 0x64
 80006da:	9300      	str	r3, [sp, #0]
 80006dc:	2302      	movs	r3, #2
 80006de:	2194      	movs	r1, #148	@ 0x94
 80006e0:	4857      	ldr	r0, [pc, #348]	@ (8000840 <configAudio+0x1dc>)
 80006e2:	f004 fd23 	bl	800512c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x00;
 80006e6:	2300      	movs	r3, #0
 80006e8:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x00;
 80006ea:	2300      	movs	r3, #0
 80006ec:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80006ee:	1d3a      	adds	r2, r7, #4
 80006f0:	2364      	movs	r3, #100	@ 0x64
 80006f2:	9300      	str	r3, [sp, #0]
 80006f4:	2302      	movs	r3, #2
 80006f6:	2194      	movs	r1, #148	@ 0x94
 80006f8:	4851      	ldr	r0, [pc, #324]	@ (8000840 <configAudio+0x1dc>)
 80006fa:	f004 fd17 	bl	800512c <HAL_I2C_Master_Transmit>

    /* Ctl registers configuration */
    bytes[0] = 0x04;
 80006fe:	2304      	movs	r3, #4
 8000700:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0xAF;
 8000702:	23af      	movs	r3, #175	@ 0xaf
 8000704:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000706:	1d3a      	adds	r2, r7, #4
 8000708:	2364      	movs	r3, #100	@ 0x64
 800070a:	9300      	str	r3, [sp, #0]
 800070c:	2302      	movs	r3, #2
 800070e:	2194      	movs	r1, #148	@ 0x94
 8000710:	484b      	ldr	r0, [pc, #300]	@ (8000840 <configAudio+0x1dc>)
 8000712:	f004 fd0b 	bl	800512c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x0D;
 8000716:	230d      	movs	r3, #13
 8000718:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x70;
 800071a:	2370      	movs	r3, #112	@ 0x70
 800071c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800071e:	1d3a      	adds	r2, r7, #4
 8000720:	2364      	movs	r3, #100	@ 0x64
 8000722:	9300      	str	r3, [sp, #0]
 8000724:	2302      	movs	r3, #2
 8000726:	2194      	movs	r1, #148	@ 0x94
 8000728:	4845      	ldr	r0, [pc, #276]	@ (8000840 <configAudio+0x1dc>)
 800072a:	f004 fcff 	bl	800512c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x05;
 800072e:	2305      	movs	r3, #5
 8000730:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x81;
 8000732:	2381      	movs	r3, #129	@ 0x81
 8000734:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000736:	1d3a      	adds	r2, r7, #4
 8000738:	2364      	movs	r3, #100	@ 0x64
 800073a:	9300      	str	r3, [sp, #0]
 800073c:	2302      	movs	r3, #2
 800073e:	2194      	movs	r1, #148	@ 0x94
 8000740:	483f      	ldr	r0, [pc, #252]	@ (8000840 <configAudio+0x1dc>)
 8000742:	f004 fcf3 	bl	800512c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x06;
 8000746:	2306      	movs	r3, #6
 8000748:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x07;
 800074a:	2307      	movs	r3, #7
 800074c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800074e:	1d3a      	adds	r2, r7, #4
 8000750:	2364      	movs	r3, #100	@ 0x64
 8000752:	9300      	str	r3, [sp, #0]
 8000754:	2302      	movs	r3, #2
 8000756:	2194      	movs	r1, #148	@ 0x94
 8000758:	4839      	ldr	r0, [pc, #228]	@ (8000840 <configAudio+0x1dc>)
 800075a:	f004 fce7 	bl	800512c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x0A;
 800075e:	230a      	movs	r3, #10
 8000760:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x00;
 8000762:	2300      	movs	r3, #0
 8000764:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000766:	1d3a      	adds	r2, r7, #4
 8000768:	2364      	movs	r3, #100	@ 0x64
 800076a:	9300      	str	r3, [sp, #0]
 800076c:	2302      	movs	r3, #2
 800076e:	2194      	movs	r1, #148	@ 0x94
 8000770:	4833      	ldr	r0, [pc, #204]	@ (8000840 <configAudio+0x1dc>)
 8000772:	f004 fcdb 	bl	800512c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x27;
 8000776:	2327      	movs	r3, #39	@ 0x27
 8000778:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x00;
 800077a:	2300      	movs	r3, #0
 800077c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800077e:	1d3a      	adds	r2, r7, #4
 8000780:	2364      	movs	r3, #100	@ 0x64
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	2302      	movs	r3, #2
 8000786:	2194      	movs	r1, #148	@ 0x94
 8000788:	482d      	ldr	r0, [pc, #180]	@ (8000840 <configAudio+0x1dc>)
 800078a:	f004 fccf 	bl	800512c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x1F;
 800078e:	231f      	movs	r3, #31
 8000790:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x0F;
 8000792:	230f      	movs	r3, #15
 8000794:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000796:	1d3a      	adds	r2, r7, #4
 8000798:	2364      	movs	r3, #100	@ 0x64
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	2302      	movs	r3, #2
 800079e:	2194      	movs	r1, #148	@ 0x94
 80007a0:	4827      	ldr	r0, [pc, #156]	@ (8000840 <configAudio+0x1dc>)
 80007a2:	f004 fcc3 	bl	800512c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x22;
 80007a6:	2322      	movs	r3, #34	@ 0x22
 80007a8:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0xC0;
 80007aa:	23c0      	movs	r3, #192	@ 0xc0
 80007ac:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80007ae:	1d3a      	adds	r2, r7, #4
 80007b0:	2364      	movs	r3, #100	@ 0x64
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	2302      	movs	r3, #2
 80007b6:	2194      	movs	r1, #148	@ 0x94
 80007b8:	4821      	ldr	r0, [pc, #132]	@ (8000840 <configAudio+0x1dc>)
 80007ba:	f004 fcb7 	bl	800512c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x14;
 80007be:	2314      	movs	r3, #20
 80007c0:	713b      	strb	r3, [r7, #4]
    bytes[1] = 2;
 80007c2:	2302      	movs	r3, #2
 80007c4:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80007c6:	1d3a      	adds	r2, r7, #4
 80007c8:	2364      	movs	r3, #100	@ 0x64
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	2302      	movs	r3, #2
 80007ce:	2194      	movs	r1, #148	@ 0x94
 80007d0:	481b      	ldr	r0, [pc, #108]	@ (8000840 <configAudio+0x1dc>)
 80007d2:	f004 fcab 	bl	800512c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x15;
 80007d6:	2315      	movs	r3, #21
 80007d8:	713b      	strb	r3, [r7, #4]
    bytes[1] = 2;
 80007da:	2302      	movs	r3, #2
 80007dc:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80007de:	1d3a      	adds	r2, r7, #4
 80007e0:	2364      	movs	r3, #100	@ 0x64
 80007e2:	9300      	str	r3, [sp, #0]
 80007e4:	2302      	movs	r3, #2
 80007e6:	2194      	movs	r1, #148	@ 0x94
 80007e8:	4815      	ldr	r0, [pc, #84]	@ (8000840 <configAudio+0x1dc>)
 80007ea:	f004 fc9f 	bl	800512c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x20;
 80007ee:	2320      	movs	r3, #32
 80007f0:	713b      	strb	r3, [r7, #4]
    bytes[1] = 24;
 80007f2:	2318      	movs	r3, #24
 80007f4:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80007f6:	1d3a      	adds	r2, r7, #4
 80007f8:	2364      	movs	r3, #100	@ 0x64
 80007fa:	9300      	str	r3, [sp, #0]
 80007fc:	2302      	movs	r3, #2
 80007fe:	2194      	movs	r1, #148	@ 0x94
 8000800:	480f      	ldr	r0, [pc, #60]	@ (8000840 <configAudio+0x1dc>)
 8000802:	f004 fc93 	bl	800512c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x21;
 8000806:	2321      	movs	r3, #33	@ 0x21
 8000808:	713b      	strb	r3, [r7, #4]
    bytes[1] = 24;
 800080a:	2318      	movs	r3, #24
 800080c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800080e:	1d3a      	adds	r2, r7, #4
 8000810:	2364      	movs	r3, #100	@ 0x64
 8000812:	9300      	str	r3, [sp, #0]
 8000814:	2302      	movs	r3, #2
 8000816:	2194      	movs	r1, #148	@ 0x94
 8000818:	4809      	ldr	r0, [pc, #36]	@ (8000840 <configAudio+0x1dc>)
 800081a:	f004 fc87 	bl	800512c <HAL_I2C_Master_Transmit>

    /* Power up */
    bytes[0] = 0x02;
 800081e:	2302      	movs	r3, #2
 8000820:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x9E;
 8000822:	239e      	movs	r3, #158	@ 0x9e
 8000824:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000826:	1d3a      	adds	r2, r7, #4
 8000828:	2364      	movs	r3, #100	@ 0x64
 800082a:	9300      	str	r3, [sp, #0]
 800082c:	2302      	movs	r3, #2
 800082e:	2194      	movs	r1, #148	@ 0x94
 8000830:	4803      	ldr	r0, [pc, #12]	@ (8000840 <configAudio+0x1dc>)
 8000832:	f004 fc7b 	bl	800512c <HAL_I2C_Master_Transmit>
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000940 	.word	0x20000940

08000844 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b1f      	ldr	r3, [pc, #124]	@ (80008cc <MX_DMA_Init+0x88>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a1e      	ldr	r2, [pc, #120]	@ (80008cc <MX_DMA_Init+0x88>)
 8000854:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b1c      	ldr	r3, [pc, #112]	@ (80008cc <MX_DMA_Init+0x88>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	4b18      	ldr	r3, [pc, #96]	@ (80008cc <MX_DMA_Init+0x88>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a17      	ldr	r2, [pc, #92]	@ (80008cc <MX_DMA_Init+0x88>)
 8000870:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b15      	ldr	r3, [pc, #84]	@ (80008cc <MX_DMA_Init+0x88>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	2100      	movs	r1, #0
 8000886:	2010      	movs	r0, #16
 8000888:	f001 fc7b 	bl	8002182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800088c:	2010      	movs	r0, #16
 800088e:	f001 fc94 	bl	80021ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	2100      	movs	r1, #0
 8000896:	2011      	movs	r0, #17
 8000898:	f001 fc73 	bl	8002182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800089c:	2011      	movs	r0, #17
 800089e:	f001 fc8c 	bl	80021ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2100      	movs	r1, #0
 80008a6:	202f      	movs	r0, #47	@ 0x2f
 80008a8:	f001 fc6b 	bl	8002182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80008ac:	202f      	movs	r0, #47	@ 0x2f
 80008ae:	f001 fc84 	bl	80021ba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2100      	movs	r1, #0
 80008b6:	2038      	movs	r0, #56	@ 0x38
 80008b8:	f001 fc63 	bl	8002182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008bc:	2038      	movs	r0, #56	@ 0x38
 80008be:	f001 fc7c 	bl	80021ba <HAL_NVIC_EnableIRQ>

}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800

080008d0 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08c      	sub	sp, #48	@ 0x30
 80008d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	61bb      	str	r3, [r7, #24]
 80008ea:	4b72      	ldr	r3, [pc, #456]	@ (8000ab4 <MX_GPIO_Init+0x1e4>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	4a71      	ldr	r2, [pc, #452]	@ (8000ab4 <MX_GPIO_Init+0x1e4>)
 80008f0:	f043 0310 	orr.w	r3, r3, #16
 80008f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f6:	4b6f      	ldr	r3, [pc, #444]	@ (8000ab4 <MX_GPIO_Init+0x1e4>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	f003 0310 	and.w	r3, r3, #16
 80008fe:	61bb      	str	r3, [r7, #24]
 8000900:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	617b      	str	r3, [r7, #20]
 8000906:	4b6b      	ldr	r3, [pc, #428]	@ (8000ab4 <MX_GPIO_Init+0x1e4>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	4a6a      	ldr	r2, [pc, #424]	@ (8000ab4 <MX_GPIO_Init+0x1e4>)
 800090c:	f043 0304 	orr.w	r3, r3, #4
 8000910:	6313      	str	r3, [r2, #48]	@ 0x30
 8000912:	4b68      	ldr	r3, [pc, #416]	@ (8000ab4 <MX_GPIO_Init+0x1e4>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	f003 0304 	and.w	r3, r3, #4
 800091a:	617b      	str	r3, [r7, #20]
 800091c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
 8000922:	4b64      	ldr	r3, [pc, #400]	@ (8000ab4 <MX_GPIO_Init+0x1e4>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	4a63      	ldr	r2, [pc, #396]	@ (8000ab4 <MX_GPIO_Init+0x1e4>)
 8000928:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800092c:	6313      	str	r3, [r2, #48]	@ 0x30
 800092e:	4b61      	ldr	r3, [pc, #388]	@ (8000ab4 <MX_GPIO_Init+0x1e4>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	4b5d      	ldr	r3, [pc, #372]	@ (8000ab4 <MX_GPIO_Init+0x1e4>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	4a5c      	ldr	r2, [pc, #368]	@ (8000ab4 <MX_GPIO_Init+0x1e4>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6313      	str	r3, [r2, #48]	@ 0x30
 800094a:	4b5a      	ldr	r3, [pc, #360]	@ (8000ab4 <MX_GPIO_Init+0x1e4>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	4b56      	ldr	r3, [pc, #344]	@ (8000ab4 <MX_GPIO_Init+0x1e4>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	4a55      	ldr	r2, [pc, #340]	@ (8000ab4 <MX_GPIO_Init+0x1e4>)
 8000960:	f043 0302 	orr.w	r3, r3, #2
 8000964:	6313      	str	r3, [r2, #48]	@ 0x30
 8000966:	4b53      	ldr	r3, [pc, #332]	@ (8000ab4 <MX_GPIO_Init+0x1e4>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	4b4f      	ldr	r3, [pc, #316]	@ (8000ab4 <MX_GPIO_Init+0x1e4>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	4a4e      	ldr	r2, [pc, #312]	@ (8000ab4 <MX_GPIO_Init+0x1e4>)
 800097c:	f043 0308 	orr.w	r3, r3, #8
 8000980:	6313      	str	r3, [r2, #48]	@ 0x30
 8000982:	4b4c      	ldr	r3, [pc, #304]	@ (8000ab4 <MX_GPIO_Init+0x1e4>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	f003 0308 	and.w	r3, r3, #8
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	2108      	movs	r1, #8
 8000992:	4849      	ldr	r0, [pc, #292]	@ (8000ab8 <MX_GPIO_Init+0x1e8>)
 8000994:	f002 f938 	bl	8002c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000998:	2201      	movs	r2, #1
 800099a:	2101      	movs	r1, #1
 800099c:	4847      	ldr	r0, [pc, #284]	@ (8000abc <MX_GPIO_Init+0x1ec>)
 800099e:	f002 f933 	bl	8002c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009a2:	2200      	movs	r2, #0
 80009a4:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80009a8:	4845      	ldr	r0, [pc, #276]	@ (8000ac0 <MX_GPIO_Init+0x1f0>)
 80009aa:	f002 f92d 	bl	8002c08 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009ae:	2308      	movs	r3, #8
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	483c      	ldr	r0, [pc, #240]	@ (8000ab8 <MX_GPIO_Init+0x1e8>)
 80009c6:	f001 ff83 	bl	80028d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009ca:	2301      	movs	r3, #1
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ce:	2301      	movs	r3, #1
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	4836      	ldr	r0, [pc, #216]	@ (8000abc <MX_GPIO_Init+0x1ec>)
 80009e2:	f001 ff75 	bl	80028d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009e6:	2308      	movs	r3, #8
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	2302      	movs	r3, #2
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009f6:	2305      	movs	r3, #5
 80009f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	482e      	ldr	r0, [pc, #184]	@ (8000abc <MX_GPIO_Init+0x1ec>)
 8000a02:	f001 ff65 	bl	80028d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a06:	2301      	movs	r3, #1
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a0a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	482a      	ldr	r0, [pc, #168]	@ (8000ac4 <MX_GPIO_Init+0x1f4>)
 8000a1c:	f001 ff58 	bl	80028d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a20:	2304      	movs	r3, #4
 8000a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a24:	2300      	movs	r3, #0
 8000a26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	4825      	ldr	r0, [pc, #148]	@ (8000ac8 <MX_GPIO_Init+0x1f8>)
 8000a34:	f001 ff4c 	bl	80028d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a4a:	2305      	movs	r3, #5
 8000a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4619      	mov	r1, r3
 8000a54:	481c      	ldr	r0, [pc, #112]	@ (8000ac8 <MX_GPIO_Init+0x1f8>)
 8000a56:	f001 ff3b 	bl	80028d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a5a:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000a5e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	4619      	mov	r1, r3
 8000a72:	4813      	ldr	r0, [pc, #76]	@ (8000ac0 <MX_GPIO_Init+0x1f0>)
 8000a74:	f001 ff2c 	bl	80028d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a78:	2320      	movs	r3, #32
 8000a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	480d      	ldr	r0, [pc, #52]	@ (8000ac0 <MX_GPIO_Init+0x1f0>)
 8000a8c:	f001 ff20 	bl	80028d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a90:	2302      	movs	r3, #2
 8000a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a94:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	f107 031c 	add.w	r3, r7, #28
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4804      	ldr	r0, [pc, #16]	@ (8000ab8 <MX_GPIO_Init+0x1e8>)
 8000aa6:	f001 ff13 	bl	80028d0 <HAL_GPIO_Init>

}
 8000aaa:	bf00      	nop
 8000aac:	3730      	adds	r7, #48	@ 0x30
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	40020800 	.word	0x40020800
 8000ac0:	40020c00 	.word	0x40020c00
 8000ac4:	40020000 	.word	0x40020000
 8000ac8:	40020400 	.word	0x40020400

08000acc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ad0:	4b12      	ldr	r3, [pc, #72]	@ (8000b1c <MX_I2C1_Init+0x50>)
 8000ad2:	4a13      	ldr	r2, [pc, #76]	@ (8000b20 <MX_I2C1_Init+0x54>)
 8000ad4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ad6:	4b11      	ldr	r3, [pc, #68]	@ (8000b1c <MX_I2C1_Init+0x50>)
 8000ad8:	4a12      	ldr	r2, [pc, #72]	@ (8000b24 <MX_I2C1_Init+0x58>)
 8000ada:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000adc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b1c <MX_I2C1_Init+0x50>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b1c <MX_I2C1_Init+0x50>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b1c <MX_I2C1_Init+0x50>)
 8000aea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000aee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000af0:	4b0a      	ldr	r3, [pc, #40]	@ (8000b1c <MX_I2C1_Init+0x50>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000af6:	4b09      	ldr	r3, [pc, #36]	@ (8000b1c <MX_I2C1_Init+0x50>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000afc:	4b07      	ldr	r3, [pc, #28]	@ (8000b1c <MX_I2C1_Init+0x50>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b02:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <MX_I2C1_Init+0x50>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b08:	4804      	ldr	r0, [pc, #16]	@ (8000b1c <MX_I2C1_Init+0x50>)
 8000b0a:	f004 f9cb 	bl	8004ea4 <HAL_I2C_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b14:	f000 faf2 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20000940 	.word	0x20000940
 8000b20:	40005400 	.word	0x40005400
 8000b24:	000186a0 	.word	0x000186a0

08000b28 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	@ 0x28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a19      	ldr	r2, [pc, #100]	@ (8000bac <HAL_I2C_MspInit+0x84>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d12c      	bne.n	8000ba4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	4b18      	ldr	r3, [pc, #96]	@ (8000bb0 <HAL_I2C_MspInit+0x88>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	4a17      	ldr	r2, [pc, #92]	@ (8000bb0 <HAL_I2C_MspInit+0x88>)
 8000b54:	f043 0302 	orr.w	r3, r3, #2
 8000b58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b5a:	4b15      	ldr	r3, [pc, #84]	@ (8000bb0 <HAL_I2C_MspInit+0x88>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5e:	f003 0302 	and.w	r3, r3, #2
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b66:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b6c:	2312      	movs	r3, #18
 8000b6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b70:	2301      	movs	r3, #1
 8000b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b78:	2304      	movs	r3, #4
 8000b7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	4619      	mov	r1, r3
 8000b82:	480c      	ldr	r0, [pc, #48]	@ (8000bb4 <HAL_I2C_MspInit+0x8c>)
 8000b84:	f001 fea4 	bl	80028d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	4b08      	ldr	r3, [pc, #32]	@ (8000bb0 <HAL_I2C_MspInit+0x88>)
 8000b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b90:	4a07      	ldr	r2, [pc, #28]	@ (8000bb0 <HAL_I2C_MspInit+0x88>)
 8000b92:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b96:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b98:	4b05      	ldr	r3, [pc, #20]	@ (8000bb0 <HAL_I2C_MspInit+0x88>)
 8000b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ba4:	bf00      	nop
 8000ba6:	3728      	adds	r7, #40	@ 0x28
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40005400 	.word	0x40005400
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40020400 	.word	0x40020400

08000bb8 <MX_I2S3_Init>:
I2S_HandleTypeDef hi2s3;
DMA_HandleTypeDef hdma_spi3_tx;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000bbc:	4b13      	ldr	r3, [pc, #76]	@ (8000c0c <MX_I2S3_Init+0x54>)
 8000bbe:	4a14      	ldr	r2, [pc, #80]	@ (8000c10 <MX_I2S3_Init+0x58>)
 8000bc0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000bc2:	4b12      	ldr	r3, [pc, #72]	@ (8000c0c <MX_I2S3_Init+0x54>)
 8000bc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bc8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000bca:	4b10      	ldr	r3, [pc, #64]	@ (8000c0c <MX_I2S3_Init+0x54>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000bd0:	4b0e      	ldr	r3, [pc, #56]	@ (8000c0c <MX_I2S3_Init+0x54>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8000c0c <MX_I2S3_Init+0x54>)
 8000bd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bdc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000bde:	4b0b      	ldr	r3, [pc, #44]	@ (8000c0c <MX_I2S3_Init+0x54>)
 8000be0:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8000be4:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000be6:	4b09      	ldr	r3, [pc, #36]	@ (8000c0c <MX_I2S3_Init+0x54>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000bec:	4b07      	ldr	r3, [pc, #28]	@ (8000c0c <MX_I2S3_Init+0x54>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000bf2:	4b06      	ldr	r3, [pc, #24]	@ (8000c0c <MX_I2S3_Init+0x54>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000bf8:	4804      	ldr	r0, [pc, #16]	@ (8000c0c <MX_I2S3_Init+0x54>)
 8000bfa:	f004 fdf1 	bl	80057e0 <HAL_I2S_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000c04:	f000 fa7a 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000994 	.word	0x20000994
 8000c10:	40003c00 	.word	0x40003c00

08000c14 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08e      	sub	sp, #56	@ 0x38
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a49      	ldr	r2, [pc, #292]	@ (8000d64 <HAL_I2S_MspInit+0x150>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	f040 808b 	bne.w	8000d5c <HAL_I2S_MspInit+0x148>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c46:	2301      	movs	r3, #1
 8000c48:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000c4a:	23c0      	movs	r3, #192	@ 0xc0
 8000c4c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4618      	mov	r0, r3
 8000c58:	f005 fff2 	bl	8006c40 <HAL_RCCEx_PeriphCLKConfig>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8000c62:	f000 fa4b 	bl	80010fc <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	4b3f      	ldr	r3, [pc, #252]	@ (8000d68 <HAL_I2S_MspInit+0x154>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6e:	4a3e      	ldr	r2, [pc, #248]	@ (8000d68 <HAL_I2S_MspInit+0x154>)
 8000c70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c76:	4b3c      	ldr	r3, [pc, #240]	@ (8000d68 <HAL_I2S_MspInit+0x154>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	4b38      	ldr	r3, [pc, #224]	@ (8000d68 <HAL_I2S_MspInit+0x154>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	4a37      	ldr	r2, [pc, #220]	@ (8000d68 <HAL_I2S_MspInit+0x154>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c92:	4b35      	ldr	r3, [pc, #212]	@ (8000d68 <HAL_I2S_MspInit+0x154>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	4b31      	ldr	r3, [pc, #196]	@ (8000d68 <HAL_I2S_MspInit+0x154>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca6:	4a30      	ldr	r2, [pc, #192]	@ (8000d68 <HAL_I2S_MspInit+0x154>)
 8000ca8:	f043 0304 	orr.w	r3, r3, #4
 8000cac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cae:	4b2e      	ldr	r3, [pc, #184]	@ (8000d68 <HAL_I2S_MspInit+0x154>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb2:	f003 0304 	and.w	r3, r3, #4
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000cba:	2310      	movs	r3, #16
 8000cbc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cca:	2306      	movs	r3, #6
 8000ccc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000cce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4825      	ldr	r0, [pc, #148]	@ (8000d6c <HAL_I2S_MspInit+0x158>)
 8000cd6:	f001 fdfb 	bl	80028d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000cda:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000cde:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cec:	2306      	movs	r3, #6
 8000cee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	481e      	ldr	r0, [pc, #120]	@ (8000d70 <HAL_I2S_MspInit+0x15c>)
 8000cf8:	f001 fdea 	bl	80028d0 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream7;
 8000cfc:	4b1d      	ldr	r3, [pc, #116]	@ (8000d74 <HAL_I2S_MspInit+0x160>)
 8000cfe:	4a1e      	ldr	r2, [pc, #120]	@ (8000d78 <HAL_I2S_MspInit+0x164>)
 8000d00:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8000d02:	4b1c      	ldr	r3, [pc, #112]	@ (8000d74 <HAL_I2S_MspInit+0x160>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d08:	4b1a      	ldr	r3, [pc, #104]	@ (8000d74 <HAL_I2S_MspInit+0x160>)
 8000d0a:	2240      	movs	r2, #64	@ 0x40
 8000d0c:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d0e:	4b19      	ldr	r3, [pc, #100]	@ (8000d74 <HAL_I2S_MspInit+0x160>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d14:	4b17      	ldr	r3, [pc, #92]	@ (8000d74 <HAL_I2S_MspInit+0x160>)
 8000d16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d1a:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d1c:	4b15      	ldr	r3, [pc, #84]	@ (8000d74 <HAL_I2S_MspInit+0x160>)
 8000d1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d22:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d24:	4b13      	ldr	r3, [pc, #76]	@ (8000d74 <HAL_I2S_MspInit+0x160>)
 8000d26:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d2a:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8000d2c:	4b11      	ldr	r3, [pc, #68]	@ (8000d74 <HAL_I2S_MspInit+0x160>)
 8000d2e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d32:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d34:	4b0f      	ldr	r3, [pc, #60]	@ (8000d74 <HAL_I2S_MspInit+0x160>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d74 <HAL_I2S_MspInit+0x160>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000d40:	480c      	ldr	r0, [pc, #48]	@ (8000d74 <HAL_I2S_MspInit+0x160>)
 8000d42:	f001 fa55 	bl	80021f0 <HAL_DMA_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <HAL_I2S_MspInit+0x13c>
    {
      Error_Handler();
 8000d4c:	f000 f9d6 	bl	80010fc <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi3_tx);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4a08      	ldr	r2, [pc, #32]	@ (8000d74 <HAL_I2S_MspInit+0x160>)
 8000d54:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d56:	4a07      	ldr	r2, [pc, #28]	@ (8000d74 <HAL_I2S_MspInit+0x160>)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000d5c:	bf00      	nop
 8000d5e:	3738      	adds	r7, #56	@ 0x38
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40003c00 	.word	0x40003c00
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40020000 	.word	0x40020000
 8000d70:	40020800 	.word	0x40020800
 8000d74:	200009dc 	.word	0x200009dc
 8000d78:	400260b8 	.word	0x400260b8
 8000d7c:	00000000 	.word	0x00000000

08000d80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d80:	b590      	push	{r4, r7, lr}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d86:	f000 fc83 	bl	8001690 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d8a:	f000 f883 	bl	8000e94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d8e:	f7ff fd9f 	bl	80008d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d92:	f7ff fd57 	bl	8000844 <MX_DMA_Init>
  MX_I2C1_Init();
 8000d96:	f7ff fe99 	bl	8000acc <MX_I2C1_Init>
  MX_I2S3_Init();
 8000d9a:	f7ff ff0d 	bl	8000bb8 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000d9e:	f000 f9b3 	bl	8001108 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000da2:	f00a fac9 	bl	800b338 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 8000da6:	f000 faff 	bl	80013a8 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000daa:	f7ff fb85 	bl	80004b8 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000dae:	f000 fb67 	bl	8001480 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  configAudio();
 8000db2:	f7ff fc57 	bl	8000664 <configAudio>
  init_fir_filter();
 8000db6:	f000 f8f9 	bl	8000fac <init_fir_filter>

  HAL_TIM_Base_Start(&htim2);
 8000dba:	482b      	ldr	r0, [pc, #172]	@ (8000e68 <main+0xe8>)
 8000dbc:	f006 f95a 	bl	8007074 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, adc_signal, BUFFER_SIZE);
 8000dc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dc4:	4929      	ldr	r1, [pc, #164]	@ (8000e6c <main+0xec>)
 8000dc6:	482a      	ldr	r0, [pc, #168]	@ (8000e70 <main+0xf0>)
 8000dc8:	f000 fd3c 	bl	8001844 <HAL_ADC_Start_DMA>

  HAL_I2S_Transmit_DMA(&hi2s3, filtered_signal, BUFFER_SIZE);
 8000dcc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dd0:	4928      	ldr	r1, [pc, #160]	@ (8000e74 <main+0xf4>)
 8000dd2:	4829      	ldr	r0, [pc, #164]	@ (8000e78 <main+0xf8>)
 8000dd4:	f004 fe44 	bl	8005a60 <HAL_I2S_Transmit_DMA>

  HAL_UART_Transmit_DMA(&huart2, (uint8_t *)filtered_signal, sizeof(filtered_signal));
 8000dd8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ddc:	4925      	ldr	r1, [pc, #148]	@ (8000e74 <main+0xf4>)
 8000dde:	4827      	ldr	r0, [pc, #156]	@ (8000e7c <main+0xfc>)
 8000de0:	f006 fc8a 	bl	80076f8 <HAL_UART_Transmit_DMA>
  char testMessage[] = "Hello, PuTTY!\n";
 8000de4:	4b26      	ldr	r3, [pc, #152]	@ (8000e80 <main+0x100>)
 8000de6:	463c      	mov	r4, r7
 8000de8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dea:	c407      	stmia	r4!, {r0, r1, r2}
 8000dec:	8023      	strh	r3, [r4, #0]
 8000dee:	3402      	adds	r4, #2
 8000df0:	0c1b      	lsrs	r3, r3, #16
 8000df2:	7023      	strb	r3, [r4, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000df4:	f00a fac6 	bl	800b384 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if (fx_ready == 1) {
 8000df8:	4b22      	ldr	r3, [pc, #136]	@ (8000e84 <main+0x104>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d1f8      	bne.n	8000df4 <main+0x74>
		fx_ready = 0;
 8000e02:	4b20      	ldr	r3, [pc, #128]	@ (8000e84 <main+0x104>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	701a      	strb	r2, [r3, #0]
		 convert_to_q15(adc_signal, conv_signal, BUFFER_SIZE);
 8000e08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e0c:	491e      	ldr	r1, [pc, #120]	@ (8000e88 <main+0x108>)
 8000e0e:	4817      	ldr	r0, [pc, #92]	@ (8000e6c <main+0xec>)
 8000e10:	f000 f8aa 	bl	8000f68 <convert_to_q15>

        last_systick = HAL_GetTick();
 8000e14:	f000 fca2 	bl	800175c <HAL_GetTick>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	4a1c      	ldr	r2, [pc, #112]	@ (8000e8c <main+0x10c>)
 8000e1c:	6013      	str	r3, [r2, #0]
//		echo_effect_q15(conv_signal, output_signal, BUFFER_SIZE);
//		tremolo_effect(conv_signal, output_signal, BUFFER_SIZE, 440);
//		smooth_signal_q15(conv_signal, output_signal, BUFFER_SIZE, 5);
//		last_systick = HAL_GetTick();

		last_systick = HAL_GetTick();
 8000e1e:	f000 fc9d 	bl	800175c <HAL_GetTick>
 8000e22:	4603      	mov	r3, r0
 8000e24:	4a19      	ldr	r2, [pc, #100]	@ (8000e8c <main+0x10c>)
 8000e26:	6013      	str	r3, [r2, #0]
		amplify_signal_q15(conv_signal, gained_signal, BUFFER_SIZE, 1.2f);
 8000e28:	ed9f 0b0d 	vldr	d0, [pc, #52]	@ 8000e60 <main+0xe0>
 8000e2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e30:	4917      	ldr	r1, [pc, #92]	@ (8000e90 <main+0x110>)
 8000e32:	4815      	ldr	r0, [pc, #84]	@ (8000e88 <main+0x108>)
 8000e34:	f000 f8fc 	bl	8001030 <amplify_signal_q15>
		last_systick = HAL_GetTick();
 8000e38:	f000 fc90 	bl	800175c <HAL_GetTick>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	4a13      	ldr	r2, [pc, #76]	@ (8000e8c <main+0x10c>)
 8000e40:	6013      	str	r3, [r2, #0]
		fir_filter(gained_signal, filtered_signal); //traje 3 milisekunde
 8000e42:	490c      	ldr	r1, [pc, #48]	@ (8000e74 <main+0xf4>)
 8000e44:	4812      	ldr	r0, [pc, #72]	@ (8000e90 <main+0x110>)
 8000e46:	f000 f8cf 	bl	8000fe8 <fir_filter>
		last_systick = HAL_GetTick();
 8000e4a:	f000 fc87 	bl	800175c <HAL_GetTick>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	4a0e      	ldr	r2, [pc, #56]	@ (8000e8c <main+0x10c>)
 8000e52:	6013      	str	r3, [r2, #0]




        last_systick = HAL_GetTick();
 8000e54:	f000 fc82 	bl	800175c <HAL_GetTick>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	4a0c      	ldr	r2, [pc, #48]	@ (8000e8c <main+0x10c>)
 8000e5c:	6013      	str	r3, [r2, #0]
    MX_USB_HOST_Process();
 8000e5e:	e7c9      	b.n	8000df4 <main+0x74>
 8000e60:	40000000 	.word	0x40000000
 8000e64:	3ff33333 	.word	0x3ff33333
 8000e68:	200024ac 	.word	0x200024ac
 8000e6c:	20000a3c 	.word	0x20000a3c
 8000e70:	20000898 	.word	0x20000898
 8000e74:	20001244 	.word	0x20001244
 8000e78:	20000994 	.word	0x20000994
 8000e7c:	200024f4 	.word	0x200024f4
 8000e80:	0800c070 	.word	0x0800c070
 8000e84:	20000e3c 	.word	0x20000e3c
 8000e88:	20000e44 	.word	0x20000e44
 8000e8c:	20000e40 	.word	0x20000e40
 8000e90:	20001644 	.word	0x20001644

08000e94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b094      	sub	sp, #80	@ 0x50
 8000e98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e9a:	f107 0320 	add.w	r3, r7, #32
 8000e9e:	2230      	movs	r2, #48	@ 0x30
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f00b f84a 	bl	800bf3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea8:	f107 030c 	add.w	r3, r7, #12
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	4b28      	ldr	r3, [pc, #160]	@ (8000f60 <SystemClock_Config+0xcc>)
 8000ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec0:	4a27      	ldr	r2, [pc, #156]	@ (8000f60 <SystemClock_Config+0xcc>)
 8000ec2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ec6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ec8:	4b25      	ldr	r3, [pc, #148]	@ (8000f60 <SystemClock_Config+0xcc>)
 8000eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ecc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	4b22      	ldr	r3, [pc, #136]	@ (8000f64 <SystemClock_Config+0xd0>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a21      	ldr	r2, [pc, #132]	@ (8000f64 <SystemClock_Config+0xd0>)
 8000ede:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ee2:	6013      	str	r3, [r2, #0]
 8000ee4:	4b1f      	ldr	r3, [pc, #124]	@ (8000f64 <SystemClock_Config+0xd0>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ef4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ef8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000efa:	2302      	movs	r3, #2
 8000efc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000efe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f04:	2304      	movs	r3, #4
 8000f06:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000f08:	23a8      	movs	r3, #168	@ 0xa8
 8000f0a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f10:	2307      	movs	r3, #7
 8000f12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f14:	f107 0320 	add.w	r3, r7, #32
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f005 f9f9 	bl	8006310 <HAL_RCC_OscConfig>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f24:	f000 f8ea 	bl	80010fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f28:	230f      	movs	r3, #15
 8000f2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f34:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f3e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f40:	f107 030c 	add.w	r3, r7, #12
 8000f44:	2105      	movs	r1, #5
 8000f46:	4618      	mov	r0, r3
 8000f48:	f005 fc5a 	bl	8006800 <HAL_RCC_ClockConfig>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f52:	f000 f8d3 	bl	80010fc <Error_Handler>
  }
}
 8000f56:	bf00      	nop
 8000f58:	3750      	adds	r7, #80	@ 0x50
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40007000 	.word	0x40007000

08000f68 <convert_to_q15>:
}



//FIR FILTER
void convert_to_q15(uint16_t *rawInput, q15_t *convertedSignal, int size) {
 8000f68:	b480      	push	{r7}
 8000f6a:	b087      	sub	sp, #28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++) {
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
 8000f78:	e00d      	b.n	8000f96 <convert_to_q15+0x2e>
        // Map uint16_t (0 to 65535) to q15_t (-32768 to 32767)
//        convertedSignal[i] = (q15_t)((int32_t)(rawInput[i] - 32768));
        convertedSignal[i] = (q15_t)((int32_t)(rawInput[i] - 0));
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	68fa      	ldr	r2, [r7, #12]
 8000f80:	4413      	add	r3, r2
 8000f82:	8819      	ldrh	r1, [r3, #0]
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	68ba      	ldr	r2, [r7, #8]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	b20a      	sxth	r2, r1
 8000f8e:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	3301      	adds	r3, #1
 8000f94:	617b      	str	r3, [r7, #20]
 8000f96:	697a      	ldr	r2, [r7, #20]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	dbed      	blt.n	8000f7a <convert_to_q15+0x12>
    }
}
 8000f9e:	bf00      	nop
 8000fa0:	bf00      	nop
 8000fa2:	371c      	adds	r7, #28
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <init_fir_filter>:

void init_fir_filter(void) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af02      	add	r7, sp, #8
    arm_float_to_q15(firCoeffs, firCoeffsQ15, NUM_TAPS);
 8000fb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fb6:	4908      	ldr	r1, [pc, #32]	@ (8000fd8 <init_fir_filter+0x2c>)
 8000fb8:	4808      	ldr	r0, [pc, #32]	@ (8000fdc <init_fir_filter+0x30>)
 8000fba:	f00a fcc7 	bl	800b94c <arm_float_to_q15>
    arm_fir_init_q15(&S, NUM_TAPS, firCoeffsQ15, firStateQ15, BLOCK_SIZE);
 8000fbe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <init_fir_filter+0x34>)
 8000fc6:	4a04      	ldr	r2, [pc, #16]	@ (8000fd8 <init_fir_filter+0x2c>)
 8000fc8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fcc:	4805      	ldr	r0, [pc, #20]	@ (8000fe4 <init_fir_filter+0x38>)
 8000fce:	f00a fee1 	bl	800bd94 <arm_fir_init_q15>
}
 8000fd2:	bf00      	nop
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20001a44 	.word	0x20001a44
 8000fdc:	20000000 	.word	0x20000000
 8000fe0:	20001e44 	.word	0x20001e44
 8000fe4:	20002444 	.word	0x20002444

08000fe8 <fir_filter>:
void fir_filter(q15_t *input, q15_t *output) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < BUFFER_SIZE; i += BLOCK_SIZE) {
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	e010      	b.n	800101a <fir_filter+0x32>
        arm_fir_q15(&S, &input[i], &output[i], BLOCK_SIZE);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	18d1      	adds	r1, r2, r3
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	683a      	ldr	r2, [r7, #0]
 8001006:	441a      	add	r2, r3
 8001008:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800100c:	4807      	ldr	r0, [pc, #28]	@ (800102c <fir_filter+0x44>)
 800100e:	f00a fd35 	bl	800ba7c <arm_fir_q15>
    for (int i = 0; i < BUFFER_SIZE; i += BLOCK_SIZE) {
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001020:	dbea      	blt.n	8000ff8 <fir_filter+0x10>
    }
}
 8001022:	bf00      	nop
 8001024:	bf00      	nop
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20002444 	.word	0x20002444

08001030 <amplify_signal_q15>:
    arm_cmplx_mag_q15(fftOutput, magnitudeSpectrum, FFT_SIZE / 2); //ovo je za magnitudes, mora biti /2 jer je simetrično, nyquistov dijagram iz automatskog samo poz frekv
}



void amplify_signal_q15(q15_t *input, q15_t *output, int len, float gain) {
 8001030:	b480      	push	{r7}
 8001032:	b087      	sub	sp, #28
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
 800103c:	ed87 0a00 	vstr	s0, [r7]
    for (int i = 0; i < len; i++) {
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
 8001044:	e034      	b.n	80010b0 <amplify_signal_q15+0x80>
    	int32_t amplified = (int32_t)((float)input[i] * gain);
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	68fa      	ldr	r2, [r7, #12]
 800104c:	4413      	add	r3, r2
 800104e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800105a:	edd7 7a00 	vldr	s15, [r7]
 800105e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001062:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001066:	ee17 3a90 	vmov	r3, s15
 800106a:	613b      	str	r3, [r7, #16]
        if (amplified > 32767) {
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001072:	db07      	blt.n	8001084 <amplify_signal_q15+0x54>
            output[i] = 32767;
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	68ba      	ldr	r2, [r7, #8]
 800107a:	4413      	add	r3, r2
 800107c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001080:	801a      	strh	r2, [r3, #0]
 8001082:	e012      	b.n	80010aa <amplify_signal_q15+0x7a>
        } else if (amplified < -32768) {
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800108a:	da07      	bge.n	800109c <amplify_signal_q15+0x6c>
            output[i] = -32768;
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	68ba      	ldr	r2, [r7, #8]
 8001092:	4413      	add	r3, r2
 8001094:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001098:	801a      	strh	r2, [r3, #0]
 800109a:	e006      	b.n	80010aa <amplify_signal_q15+0x7a>
        } else {
            output[i] = (q15_t)amplified;
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	68ba      	ldr	r2, [r7, #8]
 80010a2:	4413      	add	r3, r2
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	b212      	sxth	r2, r2
 80010a8:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < len; i++) {
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	3301      	adds	r3, #1
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	697a      	ldr	r2, [r7, #20]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	dbc6      	blt.n	8001046 <amplify_signal_q15+0x16>
        }
    }
}
 80010b8:	bf00      	nop
 80010ba:	bf00      	nop
 80010bc:	371c      	adds	r7, #28
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
	...

080010c8 <HAL_ADC_ConvCpltCallback>:



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc1) {
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	fx_ready = 1;
 80010d0:	4b04      	ldr	r3, [pc, #16]	@ (80010e4 <HAL_ADC_ConvCpltCallback+0x1c>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	701a      	strb	r2, [r3, #0]
//	last_dma_systick = __HAL_TIM_GET_COUNTER(&htim2);
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	20000e3c 	.word	0x20000e3c

080010e8 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
    if (hi2s->Instance == SPI3) {
    }
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001100:	b672      	cpsid	i
}
 8001102:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <Error_Handler+0x8>

08001108 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800110c:	4b17      	ldr	r3, [pc, #92]	@ (800116c <MX_SPI1_Init+0x64>)
 800110e:	4a18      	ldr	r2, [pc, #96]	@ (8001170 <MX_SPI1_Init+0x68>)
 8001110:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001112:	4b16      	ldr	r3, [pc, #88]	@ (800116c <MX_SPI1_Init+0x64>)
 8001114:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001118:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800111a:	4b14      	ldr	r3, [pc, #80]	@ (800116c <MX_SPI1_Init+0x64>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001120:	4b12      	ldr	r3, [pc, #72]	@ (800116c <MX_SPI1_Init+0x64>)
 8001122:	2200      	movs	r2, #0
 8001124:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001126:	4b11      	ldr	r3, [pc, #68]	@ (800116c <MX_SPI1_Init+0x64>)
 8001128:	2200      	movs	r2, #0
 800112a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800112c:	4b0f      	ldr	r3, [pc, #60]	@ (800116c <MX_SPI1_Init+0x64>)
 800112e:	2200      	movs	r2, #0
 8001130:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001132:	4b0e      	ldr	r3, [pc, #56]	@ (800116c <MX_SPI1_Init+0x64>)
 8001134:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001138:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800113a:	4b0c      	ldr	r3, [pc, #48]	@ (800116c <MX_SPI1_Init+0x64>)
 800113c:	2200      	movs	r2, #0
 800113e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001140:	4b0a      	ldr	r3, [pc, #40]	@ (800116c <MX_SPI1_Init+0x64>)
 8001142:	2200      	movs	r2, #0
 8001144:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001146:	4b09      	ldr	r3, [pc, #36]	@ (800116c <MX_SPI1_Init+0x64>)
 8001148:	2200      	movs	r2, #0
 800114a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800114c:	4b07      	ldr	r3, [pc, #28]	@ (800116c <MX_SPI1_Init+0x64>)
 800114e:	2200      	movs	r2, #0
 8001150:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001152:	4b06      	ldr	r3, [pc, #24]	@ (800116c <MX_SPI1_Init+0x64>)
 8001154:	220a      	movs	r2, #10
 8001156:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001158:	4804      	ldr	r0, [pc, #16]	@ (800116c <MX_SPI1_Init+0x64>)
 800115a:	f005 feb3 	bl	8006ec4 <HAL_SPI_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001164:	f7ff ffca 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20002450 	.word	0x20002450
 8001170:	40013000 	.word	0x40013000

08001174 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08a      	sub	sp, #40	@ 0x28
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a19      	ldr	r2, [pc, #100]	@ (80011f8 <HAL_SPI_MspInit+0x84>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d12b      	bne.n	80011ee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	4b18      	ldr	r3, [pc, #96]	@ (80011fc <HAL_SPI_MspInit+0x88>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800119e:	4a17      	ldr	r2, [pc, #92]	@ (80011fc <HAL_SPI_MspInit+0x88>)
 80011a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011a6:	4b15      	ldr	r3, [pc, #84]	@ (80011fc <HAL_SPI_MspInit+0x88>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	4b11      	ldr	r3, [pc, #68]	@ (80011fc <HAL_SPI_MspInit+0x88>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	4a10      	ldr	r2, [pc, #64]	@ (80011fc <HAL_SPI_MspInit+0x88>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c2:	4b0e      	ldr	r3, [pc, #56]	@ (80011fc <HAL_SPI_MspInit+0x88>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80011ce:	23e0      	movs	r3, #224	@ 0xe0
 80011d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d2:	2302      	movs	r3, #2
 80011d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011da:	2300      	movs	r3, #0
 80011dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011de:	2305      	movs	r3, #5
 80011e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	4619      	mov	r1, r3
 80011e8:	4805      	ldr	r0, [pc, #20]	@ (8001200 <HAL_SPI_MspInit+0x8c>)
 80011ea:	f001 fb71 	bl	80028d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80011ee:	bf00      	nop
 80011f0:	3728      	adds	r7, #40	@ 0x28
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40013000 	.word	0x40013000
 80011fc:	40023800 	.word	0x40023800
 8001200:	40020000 	.word	0x40020000

08001204 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	4b10      	ldr	r3, [pc, #64]	@ (8001250 <HAL_MspInit+0x4c>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001212:	4a0f      	ldr	r2, [pc, #60]	@ (8001250 <HAL_MspInit+0x4c>)
 8001214:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001218:	6453      	str	r3, [r2, #68]	@ 0x44
 800121a:	4b0d      	ldr	r3, [pc, #52]	@ (8001250 <HAL_MspInit+0x4c>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800121e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	603b      	str	r3, [r7, #0]
 800122a:	4b09      	ldr	r3, [pc, #36]	@ (8001250 <HAL_MspInit+0x4c>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122e:	4a08      	ldr	r2, [pc, #32]	@ (8001250 <HAL_MspInit+0x4c>)
 8001230:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001234:	6413      	str	r3, [r2, #64]	@ 0x40
 8001236:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <HAL_MspInit+0x4c>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800123e:	603b      	str	r3, [r7, #0]
 8001240:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001242:	2007      	movs	r0, #7
 8001244:	f000 ff92 	bl	800216c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40023800 	.word	0x40023800

08001254 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001258:	bf00      	nop
 800125a:	e7fd      	b.n	8001258 <NMI_Handler+0x4>

0800125c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <HardFault_Handler+0x4>

08001264 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001268:	bf00      	nop
 800126a:	e7fd      	b.n	8001268 <MemManage_Handler+0x4>

0800126c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <BusFault_Handler+0x4>

08001274 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <UsageFault_Handler+0x4>

0800127c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012aa:	f000 fa43 	bl	8001734 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80012b8:	4802      	ldr	r0, [pc, #8]	@ (80012c4 <DMA1_Stream5_IRQHandler+0x10>)
 80012ba:	f001 f89f 	bl	80023fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	2000253c 	.word	0x2000253c

080012c8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80012cc:	4802      	ldr	r0, [pc, #8]	@ (80012d8 <DMA1_Stream6_IRQHandler+0x10>)
 80012ce:	f001 f895 	bl	80023fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	2000259c 	.word	0x2000259c

080012dc <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80012e0:	4802      	ldr	r0, [pc, #8]	@ (80012ec <DMA1_Stream7_IRQHandler+0x10>)
 80012e2:	f001 f88b 	bl	80023fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200009dc 	.word	0x200009dc

080012f0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80012f4:	4802      	ldr	r0, [pc, #8]	@ (8001300 <DMA2_Stream0_IRQHandler+0x10>)
 80012f6:	f001 f881 	bl	80023fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	200008e0 	.word	0x200008e0

08001304 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001308:	4802      	ldr	r0, [pc, #8]	@ (8001314 <OTG_FS_IRQHandler+0x10>)
 800130a:	f001 ff77 	bl	80031fc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	200029dc 	.word	0x200029dc

08001318 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001320:	4a14      	ldr	r2, [pc, #80]	@ (8001374 <_sbrk+0x5c>)
 8001322:	4b15      	ldr	r3, [pc, #84]	@ (8001378 <_sbrk+0x60>)
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800132c:	4b13      	ldr	r3, [pc, #76]	@ (800137c <_sbrk+0x64>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d102      	bne.n	800133a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001334:	4b11      	ldr	r3, [pc, #68]	@ (800137c <_sbrk+0x64>)
 8001336:	4a12      	ldr	r2, [pc, #72]	@ (8001380 <_sbrk+0x68>)
 8001338:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800133a:	4b10      	ldr	r3, [pc, #64]	@ (800137c <_sbrk+0x64>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4413      	add	r3, r2
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	429a      	cmp	r2, r3
 8001346:	d207      	bcs.n	8001358 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001348:	f00a fe10 	bl	800bf6c <__errno>
 800134c:	4603      	mov	r3, r0
 800134e:	220c      	movs	r2, #12
 8001350:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001352:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001356:	e009      	b.n	800136c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001358:	4b08      	ldr	r3, [pc, #32]	@ (800137c <_sbrk+0x64>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800135e:	4b07      	ldr	r3, [pc, #28]	@ (800137c <_sbrk+0x64>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	4a05      	ldr	r2, [pc, #20]	@ (800137c <_sbrk+0x64>)
 8001368:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800136a:	68fb      	ldr	r3, [r7, #12]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20020000 	.word	0x20020000
 8001378:	00000400 	.word	0x00000400
 800137c:	200024a8 	.word	0x200024a8
 8001380:	20002f08 	.word	0x20002f08

08001384 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001388:	4b06      	ldr	r3, [pc, #24]	@ (80013a4 <SystemInit+0x20>)
 800138a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800138e:	4a05      	ldr	r2, [pc, #20]	@ (80013a4 <SystemInit+0x20>)
 8001390:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001394:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ae:	f107 0308 	add.w	r3, r7, #8
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013bc:	463b      	mov	r3, r7
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013c4:	4b1d      	ldr	r3, [pc, #116]	@ (800143c <MX_TIM2_Init+0x94>)
 80013c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80013cc:	4b1b      	ldr	r3, [pc, #108]	@ (800143c <MX_TIM2_Init+0x94>)
 80013ce:	2253      	movs	r2, #83	@ 0x53
 80013d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d2:	4b1a      	ldr	r3, [pc, #104]	@ (800143c <MX_TIM2_Init+0x94>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 23-1;
 80013d8:	4b18      	ldr	r3, [pc, #96]	@ (800143c <MX_TIM2_Init+0x94>)
 80013da:	2216      	movs	r2, #22
 80013dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013de:	4b17      	ldr	r3, [pc, #92]	@ (800143c <MX_TIM2_Init+0x94>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e4:	4b15      	ldr	r3, [pc, #84]	@ (800143c <MX_TIM2_Init+0x94>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013ea:	4814      	ldr	r0, [pc, #80]	@ (800143c <MX_TIM2_Init+0x94>)
 80013ec:	f005 fdf3 	bl	8006fd6 <HAL_TIM_Base_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80013f6:	f7ff fe81 	bl	80010fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001400:	f107 0308 	add.w	r3, r7, #8
 8001404:	4619      	mov	r1, r3
 8001406:	480d      	ldr	r0, [pc, #52]	@ (800143c <MX_TIM2_Init+0x94>)
 8001408:	f005 fe9c 	bl	8007144 <HAL_TIM_ConfigClockSource>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001412:	f7ff fe73 	bl	80010fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001416:	2320      	movs	r3, #32
 8001418:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800141a:	2300      	movs	r3, #0
 800141c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800141e:	463b      	mov	r3, r7
 8001420:	4619      	mov	r1, r3
 8001422:	4806      	ldr	r0, [pc, #24]	@ (800143c <MX_TIM2_Init+0x94>)
 8001424:	f006 f89c 	bl	8007560 <HAL_TIMEx_MasterConfigSynchronization>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800142e:	f7ff fe65 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001432:	bf00      	nop
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	200024ac 	.word	0x200024ac

08001440 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001450:	d10d      	bne.n	800146e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	4b09      	ldr	r3, [pc, #36]	@ (800147c <HAL_TIM_Base_MspInit+0x3c>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145a:	4a08      	ldr	r2, [pc, #32]	@ (800147c <HAL_TIM_Base_MspInit+0x3c>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	6413      	str	r3, [r2, #64]	@ 0x40
 8001462:	4b06      	ldr	r3, [pc, #24]	@ (800147c <HAL_TIM_Base_MspInit+0x3c>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800146e:	bf00      	nop
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	40023800 	.word	0x40023800

08001480 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001484:	4b11      	ldr	r3, [pc, #68]	@ (80014cc <MX_USART2_UART_Init+0x4c>)
 8001486:	4a12      	ldr	r2, [pc, #72]	@ (80014d0 <MX_USART2_UART_Init+0x50>)
 8001488:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 800148a:	4b10      	ldr	r3, [pc, #64]	@ (80014cc <MX_USART2_UART_Init+0x4c>)
 800148c:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8001490:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001492:	4b0e      	ldr	r3, [pc, #56]	@ (80014cc <MX_USART2_UART_Init+0x4c>)
 8001494:	2200      	movs	r2, #0
 8001496:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001498:	4b0c      	ldr	r3, [pc, #48]	@ (80014cc <MX_USART2_UART_Init+0x4c>)
 800149a:	2200      	movs	r2, #0
 800149c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800149e:	4b0b      	ldr	r3, [pc, #44]	@ (80014cc <MX_USART2_UART_Init+0x4c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014a4:	4b09      	ldr	r3, [pc, #36]	@ (80014cc <MX_USART2_UART_Init+0x4c>)
 80014a6:	220c      	movs	r2, #12
 80014a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014aa:	4b08      	ldr	r3, [pc, #32]	@ (80014cc <MX_USART2_UART_Init+0x4c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b0:	4b06      	ldr	r3, [pc, #24]	@ (80014cc <MX_USART2_UART_Init+0x4c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014b6:	4805      	ldr	r0, [pc, #20]	@ (80014cc <MX_USART2_UART_Init+0x4c>)
 80014b8:	f006 f8ce 	bl	8007658 <HAL_UART_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014c2:	f7ff fe1b 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	200024f4 	.word	0x200024f4
 80014d0:	40004400 	.word	0x40004400

080014d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	@ 0x28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a4b      	ldr	r2, [pc, #300]	@ (8001620 <HAL_UART_MspInit+0x14c>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	f040 8090 	bne.w	8001618 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014f8:	2300      	movs	r3, #0
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	4b49      	ldr	r3, [pc, #292]	@ (8001624 <HAL_UART_MspInit+0x150>)
 80014fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001500:	4a48      	ldr	r2, [pc, #288]	@ (8001624 <HAL_UART_MspInit+0x150>)
 8001502:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001506:	6413      	str	r3, [r2, #64]	@ 0x40
 8001508:	4b46      	ldr	r3, [pc, #280]	@ (8001624 <HAL_UART_MspInit+0x150>)
 800150a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001510:	613b      	str	r3, [r7, #16]
 8001512:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001514:	2300      	movs	r3, #0
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	4b42      	ldr	r3, [pc, #264]	@ (8001624 <HAL_UART_MspInit+0x150>)
 800151a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151c:	4a41      	ldr	r2, [pc, #260]	@ (8001624 <HAL_UART_MspInit+0x150>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	6313      	str	r3, [r2, #48]	@ 0x30
 8001524:	4b3f      	ldr	r3, [pc, #252]	@ (8001624 <HAL_UART_MspInit+0x150>)
 8001526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001530:	230c      	movs	r3, #12
 8001532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001534:	2302      	movs	r3, #2
 8001536:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153c:	2303      	movs	r3, #3
 800153e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001540:	2307      	movs	r3, #7
 8001542:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	4619      	mov	r1, r3
 800154a:	4837      	ldr	r0, [pc, #220]	@ (8001628 <HAL_UART_MspInit+0x154>)
 800154c:	f001 f9c0 	bl	80028d0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001550:	4b36      	ldr	r3, [pc, #216]	@ (800162c <HAL_UART_MspInit+0x158>)
 8001552:	4a37      	ldr	r2, [pc, #220]	@ (8001630 <HAL_UART_MspInit+0x15c>)
 8001554:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001556:	4b35      	ldr	r3, [pc, #212]	@ (800162c <HAL_UART_MspInit+0x158>)
 8001558:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800155c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800155e:	4b33      	ldr	r3, [pc, #204]	@ (800162c <HAL_UART_MspInit+0x158>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001564:	4b31      	ldr	r3, [pc, #196]	@ (800162c <HAL_UART_MspInit+0x158>)
 8001566:	2200      	movs	r2, #0
 8001568:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800156a:	4b30      	ldr	r3, [pc, #192]	@ (800162c <HAL_UART_MspInit+0x158>)
 800156c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001570:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001572:	4b2e      	ldr	r3, [pc, #184]	@ (800162c <HAL_UART_MspInit+0x158>)
 8001574:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001578:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800157a:	4b2c      	ldr	r3, [pc, #176]	@ (800162c <HAL_UART_MspInit+0x158>)
 800157c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001580:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001582:	4b2a      	ldr	r3, [pc, #168]	@ (800162c <HAL_UART_MspInit+0x158>)
 8001584:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001588:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800158a:	4b28      	ldr	r3, [pc, #160]	@ (800162c <HAL_UART_MspInit+0x158>)
 800158c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001590:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001592:	4b26      	ldr	r3, [pc, #152]	@ (800162c <HAL_UART_MspInit+0x158>)
 8001594:	2200      	movs	r2, #0
 8001596:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001598:	4824      	ldr	r0, [pc, #144]	@ (800162c <HAL_UART_MspInit+0x158>)
 800159a:	f000 fe29 	bl	80021f0 <HAL_DMA_Init>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <HAL_UART_MspInit+0xd4>
    {
      Error_Handler();
 80015a4:	f7ff fdaa 	bl	80010fc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a20      	ldr	r2, [pc, #128]	@ (800162c <HAL_UART_MspInit+0x158>)
 80015ac:	63da      	str	r2, [r3, #60]	@ 0x3c
 80015ae:	4a1f      	ldr	r2, [pc, #124]	@ (800162c <HAL_UART_MspInit+0x158>)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80015b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001634 <HAL_UART_MspInit+0x160>)
 80015b6:	4a20      	ldr	r2, [pc, #128]	@ (8001638 <HAL_UART_MspInit+0x164>)
 80015b8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80015ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001634 <HAL_UART_MspInit+0x160>)
 80015bc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80015c0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001634 <HAL_UART_MspInit+0x160>)
 80015c4:	2240      	movs	r2, #64	@ 0x40
 80015c6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001634 <HAL_UART_MspInit+0x160>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015ce:	4b19      	ldr	r3, [pc, #100]	@ (8001634 <HAL_UART_MspInit+0x160>)
 80015d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015d4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015d6:	4b17      	ldr	r3, [pc, #92]	@ (8001634 <HAL_UART_MspInit+0x160>)
 80015d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80015dc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015de:	4b15      	ldr	r3, [pc, #84]	@ (8001634 <HAL_UART_MspInit+0x160>)
 80015e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015e4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 80015e6:	4b13      	ldr	r3, [pc, #76]	@ (8001634 <HAL_UART_MspInit+0x160>)
 80015e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015ec:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80015ee:	4b11      	ldr	r3, [pc, #68]	@ (8001634 <HAL_UART_MspInit+0x160>)
 80015f0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80015f4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001634 <HAL_UART_MspInit+0x160>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80015fc:	480d      	ldr	r0, [pc, #52]	@ (8001634 <HAL_UART_MspInit+0x160>)
 80015fe:	f000 fdf7 	bl	80021f0 <HAL_DMA_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8001608:	f7ff fd78 	bl	80010fc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a09      	ldr	r2, [pc, #36]	@ (8001634 <HAL_UART_MspInit+0x160>)
 8001610:	639a      	str	r2, [r3, #56]	@ 0x38
 8001612:	4a08      	ldr	r2, [pc, #32]	@ (8001634 <HAL_UART_MspInit+0x160>)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001618:	bf00      	nop
 800161a:	3728      	adds	r7, #40	@ 0x28
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40004400 	.word	0x40004400
 8001624:	40023800 	.word	0x40023800
 8001628:	40020000 	.word	0x40020000
 800162c:	2000253c 	.word	0x2000253c
 8001630:	40026088 	.word	0x40026088
 8001634:	2000259c 	.word	0x2000259c
 8001638:	400260a0 	.word	0x400260a0

0800163c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800163c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001674 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001640:	f7ff fea0 	bl	8001384 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001644:	480c      	ldr	r0, [pc, #48]	@ (8001678 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001646:	490d      	ldr	r1, [pc, #52]	@ (800167c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001648:	4a0d      	ldr	r2, [pc, #52]	@ (8001680 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800164a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800164c:	e002      	b.n	8001654 <LoopCopyDataInit>

0800164e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800164e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001652:	3304      	adds	r3, #4

08001654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001658:	d3f9      	bcc.n	800164e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800165a:	4a0a      	ldr	r2, [pc, #40]	@ (8001684 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800165c:	4c0a      	ldr	r4, [pc, #40]	@ (8001688 <LoopFillZerobss+0x22>)
  movs r3, #0
 800165e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001660:	e001      	b.n	8001666 <LoopFillZerobss>

08001662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001664:	3204      	adds	r2, #4

08001666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001668:	d3fb      	bcc.n	8001662 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800166a:	f00a fc85 	bl	800bf78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800166e:	f7ff fb87 	bl	8000d80 <main>
  bx  lr    
 8001672:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001674:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800167c:	2000087c 	.word	0x2000087c
  ldr r2, =_sidata
 8001680:	0800c0b4 	.word	0x0800c0b4
  ldr r2, =_sbss
 8001684:	2000087c 	.word	0x2000087c
  ldr r4, =_ebss
 8001688:	20002f04 	.word	0x20002f04

0800168c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800168c:	e7fe      	b.n	800168c <ADC_IRQHandler>
	...

08001690 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001694:	4b0e      	ldr	r3, [pc, #56]	@ (80016d0 <HAL_Init+0x40>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a0d      	ldr	r2, [pc, #52]	@ (80016d0 <HAL_Init+0x40>)
 800169a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800169e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016a0:	4b0b      	ldr	r3, [pc, #44]	@ (80016d0 <HAL_Init+0x40>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0a      	ldr	r2, [pc, #40]	@ (80016d0 <HAL_Init+0x40>)
 80016a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016ac:	4b08      	ldr	r3, [pc, #32]	@ (80016d0 <HAL_Init+0x40>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a07      	ldr	r2, [pc, #28]	@ (80016d0 <HAL_Init+0x40>)
 80016b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b8:	2003      	movs	r0, #3
 80016ba:	f000 fd57 	bl	800216c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016be:	2000      	movs	r0, #0
 80016c0:	f000 f808 	bl	80016d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016c4:	f7ff fd9e 	bl	8001204 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40023c00 	.word	0x40023c00

080016d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016dc:	4b12      	ldr	r3, [pc, #72]	@ (8001728 <HAL_InitTick+0x54>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4b12      	ldr	r3, [pc, #72]	@ (800172c <HAL_InitTick+0x58>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	4619      	mov	r1, r3
 80016e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 fd6f 	bl	80021d6 <HAL_SYSTICK_Config>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e00e      	b.n	8001720 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b0f      	cmp	r3, #15
 8001706:	d80a      	bhi.n	800171e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001708:	2200      	movs	r2, #0
 800170a:	6879      	ldr	r1, [r7, #4]
 800170c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001710:	f000 fd37 	bl	8002182 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001714:	4a06      	ldr	r2, [pc, #24]	@ (8001730 <HAL_InitTick+0x5c>)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800171a:	2300      	movs	r3, #0
 800171c:	e000      	b.n	8001720 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
}
 8001720:	4618      	mov	r0, r3
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000800 	.word	0x20000800
 800172c:	20000808 	.word	0x20000808
 8001730:	20000804 	.word	0x20000804

08001734 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001738:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <HAL_IncTick+0x20>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	461a      	mov	r2, r3
 800173e:	4b06      	ldr	r3, [pc, #24]	@ (8001758 <HAL_IncTick+0x24>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4413      	add	r3, r2
 8001744:	4a04      	ldr	r2, [pc, #16]	@ (8001758 <HAL_IncTick+0x24>)
 8001746:	6013      	str	r3, [r2, #0]
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	20000808 	.word	0x20000808
 8001758:	200025fc 	.word	0x200025fc

0800175c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return uwTick;
 8001760:	4b03      	ldr	r3, [pc, #12]	@ (8001770 <HAL_GetTick+0x14>)
 8001762:	681b      	ldr	r3, [r3, #0]
}
 8001764:	4618      	mov	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	200025fc 	.word	0x200025fc

08001774 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800177c:	f7ff ffee 	bl	800175c <HAL_GetTick>
 8001780:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800178c:	d005      	beq.n	800179a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800178e:	4b0a      	ldr	r3, [pc, #40]	@ (80017b8 <HAL_Delay+0x44>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	461a      	mov	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	4413      	add	r3, r2
 8001798:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800179a:	bf00      	nop
 800179c:	f7ff ffde 	bl	800175c <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d8f7      	bhi.n	800179c <HAL_Delay+0x28>
  {
  }
}
 80017ac:	bf00      	nop
 80017ae:	bf00      	nop
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000808 	.word	0x20000808

080017bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017c4:	2300      	movs	r3, #0
 80017c6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e033      	b.n	800183a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d109      	bne.n	80017ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7fe febe 	bl	800055c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f2:	f003 0310 	and.w	r3, r3, #16
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d118      	bne.n	800182c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001802:	f023 0302 	bic.w	r3, r3, #2
 8001806:	f043 0202 	orr.w	r2, r3, #2
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 fa5e 	bl	8001cd0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181e:	f023 0303 	bic.w	r3, r3, #3
 8001822:	f043 0201 	orr.w	r2, r3, #1
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	641a      	str	r2, [r3, #64]	@ 0x40
 800182a:	e001      	b.n	8001830 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001838:	7bfb      	ldrb	r3, [r7, #15]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001850:	2300      	movs	r3, #0
 8001852:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800185a:	2b01      	cmp	r3, #1
 800185c:	d101      	bne.n	8001862 <HAL_ADC_Start_DMA+0x1e>
 800185e:	2302      	movs	r3, #2
 8001860:	e0e9      	b.n	8001a36 <HAL_ADC_Start_DMA+0x1f2>
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2201      	movs	r2, #1
 8001866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	2b01      	cmp	r3, #1
 8001876:	d018      	beq.n	80018aa <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	689a      	ldr	r2, [r3, #8]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f042 0201 	orr.w	r2, r2, #1
 8001886:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001888:	4b6d      	ldr	r3, [pc, #436]	@ (8001a40 <HAL_ADC_Start_DMA+0x1fc>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a6d      	ldr	r2, [pc, #436]	@ (8001a44 <HAL_ADC_Start_DMA+0x200>)
 800188e:	fba2 2303 	umull	r2, r3, r2, r3
 8001892:	0c9a      	lsrs	r2, r3, #18
 8001894:	4613      	mov	r3, r2
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	4413      	add	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800189c:	e002      	b.n	80018a4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	3b01      	subs	r3, #1
 80018a2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1f9      	bne.n	800189e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018b8:	d107      	bne.n	80018ca <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018c8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	f040 80a1 	bne.w	8001a1c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018de:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80018e2:	f023 0301 	bic.w	r3, r3, #1
 80018e6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d007      	beq.n	800190c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001900:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001904:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001910:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001914:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001918:	d106      	bne.n	8001928 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800191e:	f023 0206 	bic.w	r2, r3, #6
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	645a      	str	r2, [r3, #68]	@ 0x44
 8001926:	e002      	b.n	800192e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2200      	movs	r2, #0
 800192c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001936:	4b44      	ldr	r3, [pc, #272]	@ (8001a48 <HAL_ADC_Start_DMA+0x204>)
 8001938:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800193e:	4a43      	ldr	r2, [pc, #268]	@ (8001a4c <HAL_ADC_Start_DMA+0x208>)
 8001940:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001946:	4a42      	ldr	r2, [pc, #264]	@ (8001a50 <HAL_ADC_Start_DMA+0x20c>)
 8001948:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800194e:	4a41      	ldr	r2, [pc, #260]	@ (8001a54 <HAL_ADC_Start_DMA+0x210>)
 8001950:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800195a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800196a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	689a      	ldr	r2, [r3, #8]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800197a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	334c      	adds	r3, #76	@ 0x4c
 8001986:	4619      	mov	r1, r3
 8001988:	68ba      	ldr	r2, [r7, #8]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f000 fcde 	bl	800234c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 031f 	and.w	r3, r3, #31
 8001998:	2b00      	cmp	r3, #0
 800199a:	d12a      	bne.n	80019f2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a2d      	ldr	r2, [pc, #180]	@ (8001a58 <HAL_ADC_Start_DMA+0x214>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d015      	beq.n	80019d2 <HAL_ADC_Start_DMA+0x18e>
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a2c      	ldr	r2, [pc, #176]	@ (8001a5c <HAL_ADC_Start_DMA+0x218>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d105      	bne.n	80019bc <HAL_ADC_Start_DMA+0x178>
 80019b0:	4b25      	ldr	r3, [pc, #148]	@ (8001a48 <HAL_ADC_Start_DMA+0x204>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 031f 	and.w	r3, r3, #31
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d00a      	beq.n	80019d2 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a27      	ldr	r2, [pc, #156]	@ (8001a60 <HAL_ADC_Start_DMA+0x21c>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d136      	bne.n	8001a34 <HAL_ADC_Start_DMA+0x1f0>
 80019c6:	4b20      	ldr	r3, [pc, #128]	@ (8001a48 <HAL_ADC_Start_DMA+0x204>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 0310 	and.w	r3, r3, #16
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d130      	bne.n	8001a34 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d129      	bne.n	8001a34 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	689a      	ldr	r2, [r3, #8]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	e020      	b.n	8001a34 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a18      	ldr	r2, [pc, #96]	@ (8001a58 <HAL_ADC_Start_DMA+0x214>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d11b      	bne.n	8001a34 <HAL_ADC_Start_DMA+0x1f0>
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d114      	bne.n	8001a34 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a18:	609a      	str	r2, [r3, #8]
 8001a1a:	e00b      	b.n	8001a34 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a20:	f043 0210 	orr.w	r2, r3, #16
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a2c:	f043 0201 	orr.w	r2, r3, #1
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000800 	.word	0x20000800
 8001a44:	431bde83 	.word	0x431bde83
 8001a48:	40012300 	.word	0x40012300
 8001a4c:	08001ec9 	.word	0x08001ec9
 8001a50:	08001f83 	.word	0x08001f83
 8001a54:	08001f9f 	.word	0x08001f9f
 8001a58:	40012000 	.word	0x40012000
 8001a5c:	40012100 	.word	0x40012100
 8001a60:	40012200 	.word	0x40012200

08001a64 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d101      	bne.n	8001aa8 <HAL_ADC_ConfigChannel+0x1c>
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	e105      	b.n	8001cb4 <HAL_ADC_ConfigChannel+0x228>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2b09      	cmp	r3, #9
 8001ab6:	d925      	bls.n	8001b04 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68d9      	ldr	r1, [r3, #12]
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	4413      	add	r3, r2
 8001acc:	3b1e      	subs	r3, #30
 8001ace:	2207      	movs	r2, #7
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43da      	mvns	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	400a      	ands	r2, r1
 8001adc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	68d9      	ldr	r1, [r3, #12]
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	4618      	mov	r0, r3
 8001af0:	4603      	mov	r3, r0
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	4403      	add	r3, r0
 8001af6:	3b1e      	subs	r3, #30
 8001af8:	409a      	lsls	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	430a      	orrs	r2, r1
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	e022      	b.n	8001b4a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6919      	ldr	r1, [r3, #16]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	461a      	mov	r2, r3
 8001b12:	4613      	mov	r3, r2
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	4413      	add	r3, r2
 8001b18:	2207      	movs	r2, #7
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	43da      	mvns	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	400a      	ands	r2, r1
 8001b26:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6919      	ldr	r1, [r3, #16]
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	689a      	ldr	r2, [r3, #8]
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	4618      	mov	r0, r3
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	4403      	add	r3, r0
 8001b40:	409a      	lsls	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	430a      	orrs	r2, r1
 8001b48:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b06      	cmp	r3, #6
 8001b50:	d824      	bhi.n	8001b9c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4413      	add	r3, r2
 8001b62:	3b05      	subs	r3, #5
 8001b64:	221f      	movs	r2, #31
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43da      	mvns	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	400a      	ands	r2, r1
 8001b72:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	4618      	mov	r0, r3
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	4613      	mov	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	3b05      	subs	r3, #5
 8001b8e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	430a      	orrs	r2, r1
 8001b98:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b9a:	e04c      	b.n	8001c36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b0c      	cmp	r3, #12
 8001ba2:	d824      	bhi.n	8001bee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685a      	ldr	r2, [r3, #4]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4413      	add	r3, r2
 8001bb4:	3b23      	subs	r3, #35	@ 0x23
 8001bb6:	221f      	movs	r2, #31
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43da      	mvns	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	400a      	ands	r2, r1
 8001bc4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4413      	add	r3, r2
 8001bde:	3b23      	subs	r3, #35	@ 0x23
 8001be0:	fa00 f203 	lsl.w	r2, r0, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	430a      	orrs	r2, r1
 8001bea:	631a      	str	r2, [r3, #48]	@ 0x30
 8001bec:	e023      	b.n	8001c36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	3b41      	subs	r3, #65	@ 0x41
 8001c00:	221f      	movs	r2, #31
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43da      	mvns	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	400a      	ands	r2, r1
 8001c0e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	4613      	mov	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	3b41      	subs	r3, #65	@ 0x41
 8001c2a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	430a      	orrs	r2, r1
 8001c34:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c36:	4b22      	ldr	r3, [pc, #136]	@ (8001cc0 <HAL_ADC_ConfigChannel+0x234>)
 8001c38:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a21      	ldr	r2, [pc, #132]	@ (8001cc4 <HAL_ADC_ConfigChannel+0x238>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d109      	bne.n	8001c58 <HAL_ADC_ConfigChannel+0x1cc>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2b12      	cmp	r3, #18
 8001c4a:	d105      	bne.n	8001c58 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a19      	ldr	r2, [pc, #100]	@ (8001cc4 <HAL_ADC_ConfigChannel+0x238>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d123      	bne.n	8001caa <HAL_ADC_ConfigChannel+0x21e>
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2b10      	cmp	r3, #16
 8001c68:	d003      	beq.n	8001c72 <HAL_ADC_ConfigChannel+0x1e6>
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2b11      	cmp	r3, #17
 8001c70:	d11b      	bne.n	8001caa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2b10      	cmp	r3, #16
 8001c84:	d111      	bne.n	8001caa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c86:	4b10      	ldr	r3, [pc, #64]	@ (8001cc8 <HAL_ADC_ConfigChannel+0x23c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a10      	ldr	r2, [pc, #64]	@ (8001ccc <HAL_ADC_ConfigChannel+0x240>)
 8001c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c90:	0c9a      	lsrs	r2, r3, #18
 8001c92:	4613      	mov	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4413      	add	r3, r2
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001c9c:	e002      	b.n	8001ca4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1f9      	bne.n	8001c9e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	40012300 	.word	0x40012300
 8001cc4:	40012000 	.word	0x40012000
 8001cc8:	20000800 	.word	0x20000800
 8001ccc:	431bde83 	.word	0x431bde83

08001cd0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cd8:	4b79      	ldr	r3, [pc, #484]	@ (8001ec0 <ADC_Init+0x1f0>)
 8001cda:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6859      	ldr	r1, [r3, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	021a      	lsls	r2, r3, #8
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	430a      	orrs	r2, r1
 8001d18:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001d28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	6859      	ldr	r1, [r3, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6899      	ldr	r1, [r3, #8]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68da      	ldr	r2, [r3, #12]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d62:	4a58      	ldr	r2, [pc, #352]	@ (8001ec4 <ADC_Init+0x1f4>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d022      	beq.n	8001dae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689a      	ldr	r2, [r3, #8]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6899      	ldr	r1, [r3, #8]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	430a      	orrs	r2, r1
 8001d88:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001d98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	6899      	ldr	r1, [r3, #8]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	430a      	orrs	r2, r1
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	e00f      	b.n	8001dce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001dbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001dcc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f022 0202 	bic.w	r2, r2, #2
 8001ddc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6899      	ldr	r1, [r3, #8]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	7e1b      	ldrb	r3, [r3, #24]
 8001de8:	005a      	lsls	r2, r3, #1
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d01b      	beq.n	8001e34 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e0a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001e1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6859      	ldr	r1, [r3, #4]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e26:	3b01      	subs	r3, #1
 8001e28:	035a      	lsls	r2, r3, #13
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	e007      	b.n	8001e44 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e42:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001e52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	051a      	lsls	r2, r3, #20
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001e78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6899      	ldr	r1, [r3, #8]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001e86:	025a      	lsls	r2, r3, #9
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689a      	ldr	r2, [r3, #8]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6899      	ldr	r1, [r3, #8]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	029a      	lsls	r2, r3, #10
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	609a      	str	r2, [r3, #8]
}
 8001eb4:	bf00      	nop
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	40012300 	.word	0x40012300
 8001ec4:	0f000001 	.word	0x0f000001

08001ec8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ed4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eda:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d13c      	bne.n	8001f5c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d12b      	bne.n	8001f54 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d127      	bne.n	8001f54 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f0a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d006      	beq.n	8001f20 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d119      	bne.n	8001f54 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f022 0220 	bic.w	r2, r2, #32
 8001f2e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f34:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d105      	bne.n	8001f54 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4c:	f043 0201 	orr.w	r2, r3, #1
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f54:	68f8      	ldr	r0, [r7, #12]
 8001f56:	f7ff f8b7 	bl	80010c8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001f5a:	e00e      	b.n	8001f7a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f60:	f003 0310 	and.w	r3, r3, #16
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001f68:	68f8      	ldr	r0, [r7, #12]
 8001f6a:	f7ff fd85 	bl	8001a78 <HAL_ADC_ErrorCallback>
}
 8001f6e:	e004      	b.n	8001f7a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	4798      	blx	r3
}
 8001f7a:	bf00      	nop
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b084      	sub	sp, #16
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f8e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001f90:	68f8      	ldr	r0, [r7, #12]
 8001f92:	f7ff fd67 	bl	8001a64 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f96:	bf00      	nop
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b084      	sub	sp, #16
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001faa:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2240      	movs	r2, #64	@ 0x40
 8001fb0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb6:	f043 0204 	orr.w	r2, r3, #4
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f7ff fd5a 	bl	8001a78 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001fc4:	bf00      	nop
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8002010 <__NVIC_SetPriorityGrouping+0x44>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fe2:	68ba      	ldr	r2, [r7, #8]
 8001fe4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fe8:	4013      	ands	r3, r2
 8001fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ff4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ff8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ffe:	4a04      	ldr	r2, [pc, #16]	@ (8002010 <__NVIC_SetPriorityGrouping+0x44>)
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	60d3      	str	r3, [r2, #12]
}
 8002004:	bf00      	nop
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002018:	4b04      	ldr	r3, [pc, #16]	@ (800202c <__NVIC_GetPriorityGrouping+0x18>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	0a1b      	lsrs	r3, r3, #8
 800201e:	f003 0307 	and.w	r3, r3, #7
}
 8002022:	4618      	mov	r0, r3
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800203a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203e:	2b00      	cmp	r3, #0
 8002040:	db0b      	blt.n	800205a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	f003 021f 	and.w	r2, r3, #31
 8002048:	4907      	ldr	r1, [pc, #28]	@ (8002068 <__NVIC_EnableIRQ+0x38>)
 800204a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204e:	095b      	lsrs	r3, r3, #5
 8002050:	2001      	movs	r0, #1
 8002052:	fa00 f202 	lsl.w	r2, r0, r2
 8002056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	e000e100 	.word	0xe000e100

0800206c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	6039      	str	r1, [r7, #0]
 8002076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207c:	2b00      	cmp	r3, #0
 800207e:	db0a      	blt.n	8002096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	b2da      	uxtb	r2, r3
 8002084:	490c      	ldr	r1, [pc, #48]	@ (80020b8 <__NVIC_SetPriority+0x4c>)
 8002086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208a:	0112      	lsls	r2, r2, #4
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	440b      	add	r3, r1
 8002090:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002094:	e00a      	b.n	80020ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	b2da      	uxtb	r2, r3
 800209a:	4908      	ldr	r1, [pc, #32]	@ (80020bc <__NVIC_SetPriority+0x50>)
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	3b04      	subs	r3, #4
 80020a4:	0112      	lsls	r2, r2, #4
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	440b      	add	r3, r1
 80020aa:	761a      	strb	r2, [r3, #24]
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	e000e100 	.word	0xe000e100
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b089      	sub	sp, #36	@ 0x24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	f1c3 0307 	rsb	r3, r3, #7
 80020da:	2b04      	cmp	r3, #4
 80020dc:	bf28      	it	cs
 80020de:	2304      	movcs	r3, #4
 80020e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	3304      	adds	r3, #4
 80020e6:	2b06      	cmp	r3, #6
 80020e8:	d902      	bls.n	80020f0 <NVIC_EncodePriority+0x30>
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	3b03      	subs	r3, #3
 80020ee:	e000      	b.n	80020f2 <NVIC_EncodePriority+0x32>
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	43da      	mvns	r2, r3
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	401a      	ands	r2, r3
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002108:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	fa01 f303 	lsl.w	r3, r1, r3
 8002112:	43d9      	mvns	r1, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002118:	4313      	orrs	r3, r2
         );
}
 800211a:	4618      	mov	r0, r3
 800211c:	3724      	adds	r7, #36	@ 0x24
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
	...

08002128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3b01      	subs	r3, #1
 8002134:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002138:	d301      	bcc.n	800213e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800213a:	2301      	movs	r3, #1
 800213c:	e00f      	b.n	800215e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800213e:	4a0a      	ldr	r2, [pc, #40]	@ (8002168 <SysTick_Config+0x40>)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3b01      	subs	r3, #1
 8002144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002146:	210f      	movs	r1, #15
 8002148:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800214c:	f7ff ff8e 	bl	800206c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002150:	4b05      	ldr	r3, [pc, #20]	@ (8002168 <SysTick_Config+0x40>)
 8002152:	2200      	movs	r2, #0
 8002154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002156:	4b04      	ldr	r3, [pc, #16]	@ (8002168 <SysTick_Config+0x40>)
 8002158:	2207      	movs	r2, #7
 800215a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	e000e010 	.word	0xe000e010

0800216c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f7ff ff29 	bl	8001fcc <__NVIC_SetPriorityGrouping>
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002182:	b580      	push	{r7, lr}
 8002184:	b086      	sub	sp, #24
 8002186:	af00      	add	r7, sp, #0
 8002188:	4603      	mov	r3, r0
 800218a:	60b9      	str	r1, [r7, #8]
 800218c:	607a      	str	r2, [r7, #4]
 800218e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002194:	f7ff ff3e 	bl	8002014 <__NVIC_GetPriorityGrouping>
 8002198:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	68b9      	ldr	r1, [r7, #8]
 800219e:	6978      	ldr	r0, [r7, #20]
 80021a0:	f7ff ff8e 	bl	80020c0 <NVIC_EncodePriority>
 80021a4:	4602      	mov	r2, r0
 80021a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021aa:	4611      	mov	r1, r2
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff ff5d 	bl	800206c <__NVIC_SetPriority>
}
 80021b2:	bf00      	nop
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	4603      	mov	r3, r0
 80021c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff ff31 	bl	8002030 <__NVIC_EnableIRQ>
}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b082      	sub	sp, #8
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7ff ffa2 	bl	8002128 <SysTick_Config>
 80021e4:	4603      	mov	r3, r0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
	...

080021f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80021fc:	f7ff faae 	bl	800175c <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e099      	b.n	8002340 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2202      	movs	r2, #2
 8002210:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0201 	bic.w	r2, r2, #1
 800222a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800222c:	e00f      	b.n	800224e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800222e:	f7ff fa95 	bl	800175c <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b05      	cmp	r3, #5
 800223a:	d908      	bls.n	800224e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2220      	movs	r2, #32
 8002240:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2203      	movs	r2, #3
 8002246:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e078      	b.n	8002340 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1e8      	bne.n	800222e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	4b38      	ldr	r3, [pc, #224]	@ (8002348 <HAL_DMA_Init+0x158>)
 8002268:	4013      	ands	r3, r2
 800226a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800227a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002286:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002292:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	4313      	orrs	r3, r2
 800229e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a4:	2b04      	cmp	r3, #4
 80022a6:	d107      	bne.n	80022b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b0:	4313      	orrs	r3, r2
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	f023 0307 	bic.w	r3, r3, #7
 80022ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022de:	2b04      	cmp	r3, #4
 80022e0:	d117      	bne.n	8002312 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00e      	beq.n	8002312 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 fa6f 	bl	80027d8 <DMA_CheckFifoParam>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d008      	beq.n	8002312 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2240      	movs	r2, #64	@ 0x40
 8002304:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800230e:	2301      	movs	r3, #1
 8002310:	e016      	b.n	8002340 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 fa26 	bl	800276c <DMA_CalcBaseAndBitshift>
 8002320:	4603      	mov	r3, r0
 8002322:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002328:	223f      	movs	r2, #63	@ 0x3f
 800232a:	409a      	lsls	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	f010803f 	.word	0xf010803f

0800234c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
 8002358:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800235a:	2300      	movs	r3, #0
 800235c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002362:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800236a:	2b01      	cmp	r3, #1
 800236c:	d101      	bne.n	8002372 <HAL_DMA_Start_IT+0x26>
 800236e:	2302      	movs	r3, #2
 8002370:	e040      	b.n	80023f4 <HAL_DMA_Start_IT+0xa8>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b01      	cmp	r3, #1
 8002384:	d12f      	bne.n	80023e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2202      	movs	r2, #2
 800238a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	68b9      	ldr	r1, [r7, #8]
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f000 f9b8 	bl	8002710 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023a4:	223f      	movs	r2, #63	@ 0x3f
 80023a6:	409a      	lsls	r2, r3
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f042 0216 	orr.w	r2, r2, #22
 80023ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d007      	beq.n	80023d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f042 0208 	orr.w	r2, r2, #8
 80023d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 0201 	orr.w	r2, r2, #1
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	e005      	b.n	80023f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80023ee:	2302      	movs	r3, #2
 80023f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80023f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3718      	adds	r7, #24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002404:	2300      	movs	r3, #0
 8002406:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002408:	4b8e      	ldr	r3, [pc, #568]	@ (8002644 <HAL_DMA_IRQHandler+0x248>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a8e      	ldr	r2, [pc, #568]	@ (8002648 <HAL_DMA_IRQHandler+0x24c>)
 800240e:	fba2 2303 	umull	r2, r3, r2, r3
 8002412:	0a9b      	lsrs	r3, r3, #10
 8002414:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800241a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002426:	2208      	movs	r2, #8
 8002428:	409a      	lsls	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	4013      	ands	r3, r2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d01a      	beq.n	8002468 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	d013      	beq.n	8002468 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 0204 	bic.w	r2, r2, #4
 800244e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002454:	2208      	movs	r2, #8
 8002456:	409a      	lsls	r2, r3
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002460:	f043 0201 	orr.w	r2, r3, #1
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800246c:	2201      	movs	r2, #1
 800246e:	409a      	lsls	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	4013      	ands	r3, r2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d012      	beq.n	800249e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00b      	beq.n	800249e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800248a:	2201      	movs	r2, #1
 800248c:	409a      	lsls	r2, r3
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002496:	f043 0202 	orr.w	r2, r3, #2
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a2:	2204      	movs	r2, #4
 80024a4:	409a      	lsls	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	4013      	ands	r3, r2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d012      	beq.n	80024d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00b      	beq.n	80024d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024c0:	2204      	movs	r2, #4
 80024c2:	409a      	lsls	r2, r3
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024cc:	f043 0204 	orr.w	r2, r3, #4
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024d8:	2210      	movs	r2, #16
 80024da:	409a      	lsls	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4013      	ands	r3, r2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d043      	beq.n	800256c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0308 	and.w	r3, r3, #8
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d03c      	beq.n	800256c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f6:	2210      	movs	r2, #16
 80024f8:	409a      	lsls	r2, r3
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d018      	beq.n	800253e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d108      	bne.n	800252c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251e:	2b00      	cmp	r3, #0
 8002520:	d024      	beq.n	800256c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	4798      	blx	r3
 800252a:	e01f      	b.n	800256c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002530:	2b00      	cmp	r3, #0
 8002532:	d01b      	beq.n	800256c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	4798      	blx	r3
 800253c:	e016      	b.n	800256c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002548:	2b00      	cmp	r3, #0
 800254a:	d107      	bne.n	800255c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 0208 	bic.w	r2, r2, #8
 800255a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002560:	2b00      	cmp	r3, #0
 8002562:	d003      	beq.n	800256c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002570:	2220      	movs	r2, #32
 8002572:	409a      	lsls	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	4013      	ands	r3, r2
 8002578:	2b00      	cmp	r3, #0
 800257a:	f000 808f 	beq.w	800269c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0310 	and.w	r3, r3, #16
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 8087 	beq.w	800269c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002592:	2220      	movs	r2, #32
 8002594:	409a      	lsls	r2, r3
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b05      	cmp	r3, #5
 80025a4:	d136      	bne.n	8002614 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 0216 	bic.w	r2, r2, #22
 80025b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	695a      	ldr	r2, [r3, #20]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80025c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d103      	bne.n	80025d6 <HAL_DMA_IRQHandler+0x1da>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d007      	beq.n	80025e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 0208 	bic.w	r2, r2, #8
 80025e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ea:	223f      	movs	r2, #63	@ 0x3f
 80025ec:	409a      	lsls	r2, r3
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002606:	2b00      	cmp	r3, #0
 8002608:	d07e      	beq.n	8002708 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	4798      	blx	r3
        }
        return;
 8002612:	e079      	b.n	8002708 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d01d      	beq.n	800265e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d10d      	bne.n	800264c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002634:	2b00      	cmp	r3, #0
 8002636:	d031      	beq.n	800269c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	4798      	blx	r3
 8002640:	e02c      	b.n	800269c <HAL_DMA_IRQHandler+0x2a0>
 8002642:	bf00      	nop
 8002644:	20000800 	.word	0x20000800
 8002648:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002650:	2b00      	cmp	r3, #0
 8002652:	d023      	beq.n	800269c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	4798      	blx	r3
 800265c:	e01e      	b.n	800269c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10f      	bne.n	800268c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 0210 	bic.w	r2, r2, #16
 800267a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d032      	beq.n	800270a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d022      	beq.n	80026f6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2205      	movs	r2, #5
 80026b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 0201 	bic.w	r2, r2, #1
 80026c6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	3301      	adds	r3, #1
 80026cc:	60bb      	str	r3, [r7, #8]
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d307      	bcc.n	80026e4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f2      	bne.n	80026c8 <HAL_DMA_IRQHandler+0x2cc>
 80026e2:	e000      	b.n	80026e6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80026e4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d005      	beq.n	800270a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	4798      	blx	r3
 8002706:	e000      	b.n	800270a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002708:	bf00      	nop
    }
  }
}
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
 800271c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800272c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	2b40      	cmp	r3, #64	@ 0x40
 800273c:	d108      	bne.n	8002750 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68ba      	ldr	r2, [r7, #8]
 800274c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800274e:	e007      	b.n	8002760 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68ba      	ldr	r2, [r7, #8]
 8002756:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	60da      	str	r2, [r3, #12]
}
 8002760:	bf00      	nop
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	b2db      	uxtb	r3, r3
 800277a:	3b10      	subs	r3, #16
 800277c:	4a14      	ldr	r2, [pc, #80]	@ (80027d0 <DMA_CalcBaseAndBitshift+0x64>)
 800277e:	fba2 2303 	umull	r2, r3, r2, r3
 8002782:	091b      	lsrs	r3, r3, #4
 8002784:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002786:	4a13      	ldr	r2, [pc, #76]	@ (80027d4 <DMA_CalcBaseAndBitshift+0x68>)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	4413      	add	r3, r2
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	461a      	mov	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2b03      	cmp	r3, #3
 8002798:	d909      	bls.n	80027ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80027a2:	f023 0303 	bic.w	r3, r3, #3
 80027a6:	1d1a      	adds	r2, r3, #4
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	659a      	str	r2, [r3, #88]	@ 0x58
 80027ac:	e007      	b.n	80027be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80027b6:	f023 0303 	bic.w	r3, r3, #3
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3714      	adds	r7, #20
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	aaaaaaab 	.word	0xaaaaaaab
 80027d4:	0800c09c 	.word	0x0800c09c

080027d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027e0:	2300      	movs	r3, #0
 80027e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d11f      	bne.n	8002832 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2b03      	cmp	r3, #3
 80027f6:	d856      	bhi.n	80028a6 <DMA_CheckFifoParam+0xce>
 80027f8:	a201      	add	r2, pc, #4	@ (adr r2, 8002800 <DMA_CheckFifoParam+0x28>)
 80027fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027fe:	bf00      	nop
 8002800:	08002811 	.word	0x08002811
 8002804:	08002823 	.word	0x08002823
 8002808:	08002811 	.word	0x08002811
 800280c:	080028a7 	.word	0x080028a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002814:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d046      	beq.n	80028aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002820:	e043      	b.n	80028aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002826:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800282a:	d140      	bne.n	80028ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002830:	e03d      	b.n	80028ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800283a:	d121      	bne.n	8002880 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	2b03      	cmp	r3, #3
 8002840:	d837      	bhi.n	80028b2 <DMA_CheckFifoParam+0xda>
 8002842:	a201      	add	r2, pc, #4	@ (adr r2, 8002848 <DMA_CheckFifoParam+0x70>)
 8002844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002848:	08002859 	.word	0x08002859
 800284c:	0800285f 	.word	0x0800285f
 8002850:	08002859 	.word	0x08002859
 8002854:	08002871 	.word	0x08002871
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	73fb      	strb	r3, [r7, #15]
      break;
 800285c:	e030      	b.n	80028c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002862:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d025      	beq.n	80028b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800286e:	e022      	b.n	80028b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002874:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002878:	d11f      	bne.n	80028ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800287e:	e01c      	b.n	80028ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	2b02      	cmp	r3, #2
 8002884:	d903      	bls.n	800288e <DMA_CheckFifoParam+0xb6>
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	2b03      	cmp	r3, #3
 800288a:	d003      	beq.n	8002894 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800288c:	e018      	b.n	80028c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	73fb      	strb	r3, [r7, #15]
      break;
 8002892:	e015      	b.n	80028c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002898:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00e      	beq.n	80028be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	73fb      	strb	r3, [r7, #15]
      break;
 80028a4:	e00b      	b.n	80028be <DMA_CheckFifoParam+0xe6>
      break;
 80028a6:	bf00      	nop
 80028a8:	e00a      	b.n	80028c0 <DMA_CheckFifoParam+0xe8>
      break;
 80028aa:	bf00      	nop
 80028ac:	e008      	b.n	80028c0 <DMA_CheckFifoParam+0xe8>
      break;
 80028ae:	bf00      	nop
 80028b0:	e006      	b.n	80028c0 <DMA_CheckFifoParam+0xe8>
      break;
 80028b2:	bf00      	nop
 80028b4:	e004      	b.n	80028c0 <DMA_CheckFifoParam+0xe8>
      break;
 80028b6:	bf00      	nop
 80028b8:	e002      	b.n	80028c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80028ba:	bf00      	nop
 80028bc:	e000      	b.n	80028c0 <DMA_CheckFifoParam+0xe8>
      break;
 80028be:	bf00      	nop
    }
  } 
  
  return status; 
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop

080028d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b089      	sub	sp, #36	@ 0x24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028da:	2300      	movs	r3, #0
 80028dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028de:	2300      	movs	r3, #0
 80028e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028e6:	2300      	movs	r3, #0
 80028e8:	61fb      	str	r3, [r7, #28]
 80028ea:	e16b      	b.n	8002bc4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028ec:	2201      	movs	r2, #1
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	4013      	ands	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	429a      	cmp	r2, r3
 8002906:	f040 815a 	bne.w	8002bbe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f003 0303 	and.w	r3, r3, #3
 8002912:	2b01      	cmp	r3, #1
 8002914:	d005      	beq.n	8002922 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800291e:	2b02      	cmp	r3, #2
 8002920:	d130      	bne.n	8002984 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	2203      	movs	r2, #3
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	43db      	mvns	r3, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4013      	ands	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	68da      	ldr	r2, [r3, #12]
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4313      	orrs	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002958:	2201      	movs	r2, #1
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	43db      	mvns	r3, r3
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4013      	ands	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	091b      	lsrs	r3, r3, #4
 800296e:	f003 0201 	and.w	r2, r3, #1
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	4313      	orrs	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f003 0303 	and.w	r3, r3, #3
 800298c:	2b03      	cmp	r3, #3
 800298e:	d017      	beq.n	80029c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	2203      	movs	r2, #3
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	43db      	mvns	r3, r3
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	4013      	ands	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 0303 	and.w	r3, r3, #3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d123      	bne.n	8002a14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	08da      	lsrs	r2, r3, #3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3208      	adds	r2, #8
 80029d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	220f      	movs	r2, #15
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	43db      	mvns	r3, r3
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	4013      	ands	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	691a      	ldr	r2, [r3, #16]
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	f003 0307 	and.w	r3, r3, #7
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	08da      	lsrs	r2, r3, #3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	3208      	adds	r2, #8
 8002a0e:	69b9      	ldr	r1, [r7, #24]
 8002a10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	2203      	movs	r2, #3
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	43db      	mvns	r3, r3
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f003 0203 	and.w	r2, r3, #3
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f000 80b4 	beq.w	8002bbe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	4b60      	ldr	r3, [pc, #384]	@ (8002bdc <HAL_GPIO_Init+0x30c>)
 8002a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a5e:	4a5f      	ldr	r2, [pc, #380]	@ (8002bdc <HAL_GPIO_Init+0x30c>)
 8002a60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a64:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a66:	4b5d      	ldr	r3, [pc, #372]	@ (8002bdc <HAL_GPIO_Init+0x30c>)
 8002a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a72:	4a5b      	ldr	r2, [pc, #364]	@ (8002be0 <HAL_GPIO_Init+0x310>)
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	089b      	lsrs	r3, r3, #2
 8002a78:	3302      	adds	r3, #2
 8002a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	220f      	movs	r2, #15
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	4013      	ands	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a52      	ldr	r2, [pc, #328]	@ (8002be4 <HAL_GPIO_Init+0x314>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d02b      	beq.n	8002af6 <HAL_GPIO_Init+0x226>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a51      	ldr	r2, [pc, #324]	@ (8002be8 <HAL_GPIO_Init+0x318>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d025      	beq.n	8002af2 <HAL_GPIO_Init+0x222>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a50      	ldr	r2, [pc, #320]	@ (8002bec <HAL_GPIO_Init+0x31c>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d01f      	beq.n	8002aee <HAL_GPIO_Init+0x21e>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a4f      	ldr	r2, [pc, #316]	@ (8002bf0 <HAL_GPIO_Init+0x320>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d019      	beq.n	8002aea <HAL_GPIO_Init+0x21a>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a4e      	ldr	r2, [pc, #312]	@ (8002bf4 <HAL_GPIO_Init+0x324>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d013      	beq.n	8002ae6 <HAL_GPIO_Init+0x216>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a4d      	ldr	r2, [pc, #308]	@ (8002bf8 <HAL_GPIO_Init+0x328>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d00d      	beq.n	8002ae2 <HAL_GPIO_Init+0x212>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a4c      	ldr	r2, [pc, #304]	@ (8002bfc <HAL_GPIO_Init+0x32c>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d007      	beq.n	8002ade <HAL_GPIO_Init+0x20e>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a4b      	ldr	r2, [pc, #300]	@ (8002c00 <HAL_GPIO_Init+0x330>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d101      	bne.n	8002ada <HAL_GPIO_Init+0x20a>
 8002ad6:	2307      	movs	r3, #7
 8002ad8:	e00e      	b.n	8002af8 <HAL_GPIO_Init+0x228>
 8002ada:	2308      	movs	r3, #8
 8002adc:	e00c      	b.n	8002af8 <HAL_GPIO_Init+0x228>
 8002ade:	2306      	movs	r3, #6
 8002ae0:	e00a      	b.n	8002af8 <HAL_GPIO_Init+0x228>
 8002ae2:	2305      	movs	r3, #5
 8002ae4:	e008      	b.n	8002af8 <HAL_GPIO_Init+0x228>
 8002ae6:	2304      	movs	r3, #4
 8002ae8:	e006      	b.n	8002af8 <HAL_GPIO_Init+0x228>
 8002aea:	2303      	movs	r3, #3
 8002aec:	e004      	b.n	8002af8 <HAL_GPIO_Init+0x228>
 8002aee:	2302      	movs	r3, #2
 8002af0:	e002      	b.n	8002af8 <HAL_GPIO_Init+0x228>
 8002af2:	2301      	movs	r3, #1
 8002af4:	e000      	b.n	8002af8 <HAL_GPIO_Init+0x228>
 8002af6:	2300      	movs	r3, #0
 8002af8:	69fa      	ldr	r2, [r7, #28]
 8002afa:	f002 0203 	and.w	r2, r2, #3
 8002afe:	0092      	lsls	r2, r2, #2
 8002b00:	4093      	lsls	r3, r2
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b08:	4935      	ldr	r1, [pc, #212]	@ (8002be0 <HAL_GPIO_Init+0x310>)
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	089b      	lsrs	r3, r3, #2
 8002b0e:	3302      	adds	r3, #2
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b16:	4b3b      	ldr	r3, [pc, #236]	@ (8002c04 <HAL_GPIO_Init+0x334>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4013      	ands	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b3a:	4a32      	ldr	r2, [pc, #200]	@ (8002c04 <HAL_GPIO_Init+0x334>)
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b40:	4b30      	ldr	r3, [pc, #192]	@ (8002c04 <HAL_GPIO_Init+0x334>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b64:	4a27      	ldr	r2, [pc, #156]	@ (8002c04 <HAL_GPIO_Init+0x334>)
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b6a:	4b26      	ldr	r3, [pc, #152]	@ (8002c04 <HAL_GPIO_Init+0x334>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	43db      	mvns	r3, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4013      	ands	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b8e:	4a1d      	ldr	r2, [pc, #116]	@ (8002c04 <HAL_GPIO_Init+0x334>)
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b94:	4b1b      	ldr	r3, [pc, #108]	@ (8002c04 <HAL_GPIO_Init+0x334>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d003      	beq.n	8002bb8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bb8:	4a12      	ldr	r2, [pc, #72]	@ (8002c04 <HAL_GPIO_Init+0x334>)
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	61fb      	str	r3, [r7, #28]
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	2b0f      	cmp	r3, #15
 8002bc8:	f67f ae90 	bls.w	80028ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bcc:	bf00      	nop
 8002bce:	bf00      	nop
 8002bd0:	3724      	adds	r7, #36	@ 0x24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	40023800 	.word	0x40023800
 8002be0:	40013800 	.word	0x40013800
 8002be4:	40020000 	.word	0x40020000
 8002be8:	40020400 	.word	0x40020400
 8002bec:	40020800 	.word	0x40020800
 8002bf0:	40020c00 	.word	0x40020c00
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	40021400 	.word	0x40021400
 8002bfc:	40021800 	.word	0x40021800
 8002c00:	40021c00 	.word	0x40021c00
 8002c04:	40013c00 	.word	0x40013c00

08002c08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	460b      	mov	r3, r1
 8002c12:	807b      	strh	r3, [r7, #2]
 8002c14:	4613      	mov	r3, r2
 8002c16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c18:	787b      	ldrb	r3, [r7, #1]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c1e:	887a      	ldrh	r2, [r7, #2]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c24:	e003      	b.n	8002c2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c26:	887b      	ldrh	r3, [r7, #2]
 8002c28:	041a      	lsls	r2, r3, #16
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	619a      	str	r2, [r3, #24]
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b086      	sub	sp, #24
 8002c3e:	af02      	add	r7, sp, #8
 8002c40:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d101      	bne.n	8002c4c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e059      	b.n	8002d00 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d106      	bne.n	8002c6c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f008 fbc4 	bl	800b3f4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2203      	movs	r2, #3
 8002c70:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c7a:	d102      	bne.n	8002c82 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f005 f9dd 	bl	8008046 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6818      	ldr	r0, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	7c1a      	ldrb	r2, [r3, #16]
 8002c94:	f88d 2000 	strb.w	r2, [sp]
 8002c98:	3304      	adds	r3, #4
 8002c9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c9c:	f005 f95e 	bl	8007f5c <USB_CoreInit>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d005      	beq.n	8002cb2 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2202      	movs	r2, #2
 8002caa:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e026      	b.n	8002d00 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f005 f9d5 	bl	8008068 <USB_SetCurrentMode>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d005      	beq.n	8002cd0 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e017      	b.n	8002d00 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6818      	ldr	r0, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	7c1a      	ldrb	r2, [r3, #16]
 8002cd8:	f88d 2000 	strb.w	r2, [sp]
 8002cdc:	3304      	adds	r3, #4
 8002cde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ce0:	f005 fb78 	bl	80083d4 <USB_HostInit>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d005      	beq.n	8002cf6 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2202      	movs	r2, #2
 8002cee:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e004      	b.n	8002d00 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002d08:	b590      	push	{r4, r7, lr}
 8002d0a:	b08b      	sub	sp, #44	@ 0x2c
 8002d0c:	af04      	add	r7, sp, #16
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	4608      	mov	r0, r1
 8002d12:	4611      	mov	r1, r2
 8002d14:	461a      	mov	r2, r3
 8002d16:	4603      	mov	r3, r0
 8002d18:	70fb      	strb	r3, [r7, #3]
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	70bb      	strb	r3, [r7, #2]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002d22:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002d24:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d101      	bne.n	8002d34 <HAL_HCD_HC_Init+0x2c>
 8002d30:	2302      	movs	r3, #2
 8002d32:	e09d      	b.n	8002e70 <HAL_HCD_HC_Init+0x168>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002d3c:	78fa      	ldrb	r2, [r7, #3]
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	4613      	mov	r3, r2
 8002d42:	011b      	lsls	r3, r3, #4
 8002d44:	1a9b      	subs	r3, r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	440b      	add	r3, r1
 8002d4a:	3319      	adds	r3, #25
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002d50:	78fa      	ldrb	r2, [r7, #3]
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	4613      	mov	r3, r2
 8002d56:	011b      	lsls	r3, r3, #4
 8002d58:	1a9b      	subs	r3, r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	3314      	adds	r3, #20
 8002d60:	787a      	ldrb	r2, [r7, #1]
 8002d62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002d64:	78fa      	ldrb	r2, [r7, #3]
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	011b      	lsls	r3, r3, #4
 8002d6c:	1a9b      	subs	r3, r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	3315      	adds	r3, #21
 8002d74:	78fa      	ldrb	r2, [r7, #3]
 8002d76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002d78:	78fa      	ldrb	r2, [r7, #3]
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	011b      	lsls	r3, r3, #4
 8002d80:	1a9b      	subs	r3, r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	440b      	add	r3, r1
 8002d86:	3326      	adds	r3, #38	@ 0x26
 8002d88:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002d8c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002d8e:	78fa      	ldrb	r2, [r7, #3]
 8002d90:	78bb      	ldrb	r3, [r7, #2]
 8002d92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d96:	b2d8      	uxtb	r0, r3
 8002d98:	6879      	ldr	r1, [r7, #4]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	011b      	lsls	r3, r3, #4
 8002d9e:	1a9b      	subs	r3, r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	440b      	add	r3, r1
 8002da4:	3316      	adds	r3, #22
 8002da6:	4602      	mov	r2, r0
 8002da8:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002daa:	78fb      	ldrb	r3, [r7, #3]
 8002dac:	4619      	mov	r1, r3
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 fbc8 	bl	8003544 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002db4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	da0a      	bge.n	8002dd2 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002dbc:	78fa      	ldrb	r2, [r7, #3]
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	1a9b      	subs	r3, r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	3317      	adds	r3, #23
 8002dcc:	2201      	movs	r2, #1
 8002dce:	701a      	strb	r2, [r3, #0]
 8002dd0:	e009      	b.n	8002de6 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002dd2:	78fa      	ldrb	r2, [r7, #3]
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	011b      	lsls	r3, r3, #4
 8002dda:	1a9b      	subs	r3, r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	440b      	add	r3, r1
 8002de0:	3317      	adds	r3, #23
 8002de2:	2200      	movs	r2, #0
 8002de4:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f005 fc56 	bl	800869c <USB_GetHostSpeed>
 8002df0:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002df2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d10b      	bne.n	8002e12 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002dfa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d107      	bne.n	8002e12 <HAL_HCD_HC_Init+0x10a>
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d104      	bne.n	8002e12 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	2bbc      	cmp	r3, #188	@ 0xbc
 8002e0c:	d901      	bls.n	8002e12 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002e0e:	23bc      	movs	r3, #188	@ 0xbc
 8002e10:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002e12:	78fa      	ldrb	r2, [r7, #3]
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	4613      	mov	r3, r2
 8002e18:	011b      	lsls	r3, r3, #4
 8002e1a:	1a9b      	subs	r3, r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	440b      	add	r3, r1
 8002e20:	3318      	adds	r3, #24
 8002e22:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002e26:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002e28:	78fa      	ldrb	r2, [r7, #3]
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	b298      	uxth	r0, r3
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	4613      	mov	r3, r2
 8002e32:	011b      	lsls	r3, r3, #4
 8002e34:	1a9b      	subs	r3, r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	3328      	adds	r3, #40	@ 0x28
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6818      	ldr	r0, [r3, #0]
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	787c      	ldrb	r4, [r7, #1]
 8002e4a:	78ba      	ldrb	r2, [r7, #2]
 8002e4c:	78f9      	ldrb	r1, [r7, #3]
 8002e4e:	9302      	str	r3, [sp, #8]
 8002e50:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002e54:	9301      	str	r3, [sp, #4]
 8002e56:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	4623      	mov	r3, r4
 8002e5e:	f005 fc45 	bl	80086ec <USB_HC_Init>
 8002e62:	4603      	mov	r3, r0
 8002e64:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	371c      	adds	r7, #28
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd90      	pop	{r4, r7, pc}

08002e78 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002e84:	2300      	movs	r3, #0
 8002e86:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d101      	bne.n	8002e96 <HAL_HCD_HC_Halt+0x1e>
 8002e92:	2302      	movs	r3, #2
 8002e94:	e00f      	b.n	8002eb6 <HAL_HCD_HC_Halt+0x3e>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	78fa      	ldrb	r2, [r7, #3]
 8002ea4:	4611      	mov	r1, r2
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f005 ffd7 	bl	8008e5a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
	...

08002ec0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	4608      	mov	r0, r1
 8002eca:	4611      	mov	r1, r2
 8002ecc:	461a      	mov	r2, r3
 8002ece:	4603      	mov	r3, r0
 8002ed0:	70fb      	strb	r3, [r7, #3]
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	70bb      	strb	r3, [r7, #2]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002eda:	78fa      	ldrb	r2, [r7, #3]
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	011b      	lsls	r3, r3, #4
 8002ee2:	1a9b      	subs	r3, r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	440b      	add	r3, r1
 8002ee8:	3317      	adds	r3, #23
 8002eea:	78ba      	ldrb	r2, [r7, #2]
 8002eec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002eee:	78fa      	ldrb	r2, [r7, #3]
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	011b      	lsls	r3, r3, #4
 8002ef6:	1a9b      	subs	r3, r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	440b      	add	r3, r1
 8002efc:	3326      	adds	r3, #38	@ 0x26
 8002efe:	787a      	ldrb	r2, [r7, #1]
 8002f00:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002f02:	7c3b      	ldrb	r3, [r7, #16]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d114      	bne.n	8002f32 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002f08:	78fa      	ldrb	r2, [r7, #3]
 8002f0a:	6879      	ldr	r1, [r7, #4]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	011b      	lsls	r3, r3, #4
 8002f10:	1a9b      	subs	r3, r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	440b      	add	r3, r1
 8002f16:	332a      	adds	r3, #42	@ 0x2a
 8002f18:	2203      	movs	r2, #3
 8002f1a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002f1c:	78fa      	ldrb	r2, [r7, #3]
 8002f1e:	6879      	ldr	r1, [r7, #4]
 8002f20:	4613      	mov	r3, r2
 8002f22:	011b      	lsls	r3, r3, #4
 8002f24:	1a9b      	subs	r3, r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	3319      	adds	r3, #25
 8002f2c:	7f3a      	ldrb	r2, [r7, #28]
 8002f2e:	701a      	strb	r2, [r3, #0]
 8002f30:	e009      	b.n	8002f46 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f32:	78fa      	ldrb	r2, [r7, #3]
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	4613      	mov	r3, r2
 8002f38:	011b      	lsls	r3, r3, #4
 8002f3a:	1a9b      	subs	r3, r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	440b      	add	r3, r1
 8002f40:	332a      	adds	r3, #42	@ 0x2a
 8002f42:	2202      	movs	r2, #2
 8002f44:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002f46:	787b      	ldrb	r3, [r7, #1]
 8002f48:	2b03      	cmp	r3, #3
 8002f4a:	f200 8102 	bhi.w	8003152 <HAL_HCD_HC_SubmitRequest+0x292>
 8002f4e:	a201      	add	r2, pc, #4	@ (adr r2, 8002f54 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f54:	08002f65 	.word	0x08002f65
 8002f58:	0800313d 	.word	0x0800313d
 8002f5c:	08003029 	.word	0x08003029
 8002f60:	080030b3 	.word	0x080030b3
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002f64:	7c3b      	ldrb	r3, [r7, #16]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	f040 80f5 	bne.w	8003156 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002f6c:	78bb      	ldrb	r3, [r7, #2]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d12d      	bne.n	8002fce <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002f72:	8b3b      	ldrh	r3, [r7, #24]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d109      	bne.n	8002f8c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002f78:	78fa      	ldrb	r2, [r7, #3]
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	1a9b      	subs	r3, r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	333d      	adds	r3, #61	@ 0x3d
 8002f88:	2201      	movs	r2, #1
 8002f8a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002f8c:	78fa      	ldrb	r2, [r7, #3]
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	4613      	mov	r3, r2
 8002f92:	011b      	lsls	r3, r3, #4
 8002f94:	1a9b      	subs	r3, r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	333d      	adds	r3, #61	@ 0x3d
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10a      	bne.n	8002fb8 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002fa2:	78fa      	ldrb	r2, [r7, #3]
 8002fa4:	6879      	ldr	r1, [r7, #4]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	011b      	lsls	r3, r3, #4
 8002faa:	1a9b      	subs	r3, r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	440b      	add	r3, r1
 8002fb0:	332a      	adds	r3, #42	@ 0x2a
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002fb6:	e0ce      	b.n	8003156 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002fb8:	78fa      	ldrb	r2, [r7, #3]
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	011b      	lsls	r3, r3, #4
 8002fc0:	1a9b      	subs	r3, r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	332a      	adds	r3, #42	@ 0x2a
 8002fc8:	2202      	movs	r2, #2
 8002fca:	701a      	strb	r2, [r3, #0]
      break;
 8002fcc:	e0c3      	b.n	8003156 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002fce:	78fa      	ldrb	r2, [r7, #3]
 8002fd0:	6879      	ldr	r1, [r7, #4]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	011b      	lsls	r3, r3, #4
 8002fd6:	1a9b      	subs	r3, r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	440b      	add	r3, r1
 8002fdc:	331a      	adds	r3, #26
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	f040 80b8 	bne.w	8003156 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002fe6:	78fa      	ldrb	r2, [r7, #3]
 8002fe8:	6879      	ldr	r1, [r7, #4]
 8002fea:	4613      	mov	r3, r2
 8002fec:	011b      	lsls	r3, r3, #4
 8002fee:	1a9b      	subs	r3, r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	440b      	add	r3, r1
 8002ff4:	333c      	adds	r3, #60	@ 0x3c
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d10a      	bne.n	8003012 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ffc:	78fa      	ldrb	r2, [r7, #3]
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	4613      	mov	r3, r2
 8003002:	011b      	lsls	r3, r3, #4
 8003004:	1a9b      	subs	r3, r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	332a      	adds	r3, #42	@ 0x2a
 800300c:	2200      	movs	r2, #0
 800300e:	701a      	strb	r2, [r3, #0]
      break;
 8003010:	e0a1      	b.n	8003156 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003012:	78fa      	ldrb	r2, [r7, #3]
 8003014:	6879      	ldr	r1, [r7, #4]
 8003016:	4613      	mov	r3, r2
 8003018:	011b      	lsls	r3, r3, #4
 800301a:	1a9b      	subs	r3, r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	440b      	add	r3, r1
 8003020:	332a      	adds	r3, #42	@ 0x2a
 8003022:	2202      	movs	r2, #2
 8003024:	701a      	strb	r2, [r3, #0]
      break;
 8003026:	e096      	b.n	8003156 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003028:	78bb      	ldrb	r3, [r7, #2]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d120      	bne.n	8003070 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800302e:	78fa      	ldrb	r2, [r7, #3]
 8003030:	6879      	ldr	r1, [r7, #4]
 8003032:	4613      	mov	r3, r2
 8003034:	011b      	lsls	r3, r3, #4
 8003036:	1a9b      	subs	r3, r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	440b      	add	r3, r1
 800303c:	333d      	adds	r3, #61	@ 0x3d
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10a      	bne.n	800305a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003044:	78fa      	ldrb	r2, [r7, #3]
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	4613      	mov	r3, r2
 800304a:	011b      	lsls	r3, r3, #4
 800304c:	1a9b      	subs	r3, r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	332a      	adds	r3, #42	@ 0x2a
 8003054:	2200      	movs	r2, #0
 8003056:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003058:	e07e      	b.n	8003158 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800305a:	78fa      	ldrb	r2, [r7, #3]
 800305c:	6879      	ldr	r1, [r7, #4]
 800305e:	4613      	mov	r3, r2
 8003060:	011b      	lsls	r3, r3, #4
 8003062:	1a9b      	subs	r3, r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	440b      	add	r3, r1
 8003068:	332a      	adds	r3, #42	@ 0x2a
 800306a:	2202      	movs	r2, #2
 800306c:	701a      	strb	r2, [r3, #0]
      break;
 800306e:	e073      	b.n	8003158 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003070:	78fa      	ldrb	r2, [r7, #3]
 8003072:	6879      	ldr	r1, [r7, #4]
 8003074:	4613      	mov	r3, r2
 8003076:	011b      	lsls	r3, r3, #4
 8003078:	1a9b      	subs	r3, r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	333c      	adds	r3, #60	@ 0x3c
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10a      	bne.n	800309c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003086:	78fa      	ldrb	r2, [r7, #3]
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	4613      	mov	r3, r2
 800308c:	011b      	lsls	r3, r3, #4
 800308e:	1a9b      	subs	r3, r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	440b      	add	r3, r1
 8003094:	332a      	adds	r3, #42	@ 0x2a
 8003096:	2200      	movs	r2, #0
 8003098:	701a      	strb	r2, [r3, #0]
      break;
 800309a:	e05d      	b.n	8003158 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800309c:	78fa      	ldrb	r2, [r7, #3]
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	4613      	mov	r3, r2
 80030a2:	011b      	lsls	r3, r3, #4
 80030a4:	1a9b      	subs	r3, r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	440b      	add	r3, r1
 80030aa:	332a      	adds	r3, #42	@ 0x2a
 80030ac:	2202      	movs	r2, #2
 80030ae:	701a      	strb	r2, [r3, #0]
      break;
 80030b0:	e052      	b.n	8003158 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80030b2:	78bb      	ldrb	r3, [r7, #2]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d120      	bne.n	80030fa <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80030b8:	78fa      	ldrb	r2, [r7, #3]
 80030ba:	6879      	ldr	r1, [r7, #4]
 80030bc:	4613      	mov	r3, r2
 80030be:	011b      	lsls	r3, r3, #4
 80030c0:	1a9b      	subs	r3, r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	440b      	add	r3, r1
 80030c6:	333d      	adds	r3, #61	@ 0x3d
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10a      	bne.n	80030e4 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030ce:	78fa      	ldrb	r2, [r7, #3]
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	4613      	mov	r3, r2
 80030d4:	011b      	lsls	r3, r3, #4
 80030d6:	1a9b      	subs	r3, r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	440b      	add	r3, r1
 80030dc:	332a      	adds	r3, #42	@ 0x2a
 80030de:	2200      	movs	r2, #0
 80030e0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80030e2:	e039      	b.n	8003158 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030e4:	78fa      	ldrb	r2, [r7, #3]
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	011b      	lsls	r3, r3, #4
 80030ec:	1a9b      	subs	r3, r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	332a      	adds	r3, #42	@ 0x2a
 80030f4:	2202      	movs	r2, #2
 80030f6:	701a      	strb	r2, [r3, #0]
      break;
 80030f8:	e02e      	b.n	8003158 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80030fa:	78fa      	ldrb	r2, [r7, #3]
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	4613      	mov	r3, r2
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	1a9b      	subs	r3, r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	440b      	add	r3, r1
 8003108:	333c      	adds	r3, #60	@ 0x3c
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d10a      	bne.n	8003126 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003110:	78fa      	ldrb	r2, [r7, #3]
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	4613      	mov	r3, r2
 8003116:	011b      	lsls	r3, r3, #4
 8003118:	1a9b      	subs	r3, r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	440b      	add	r3, r1
 800311e:	332a      	adds	r3, #42	@ 0x2a
 8003120:	2200      	movs	r2, #0
 8003122:	701a      	strb	r2, [r3, #0]
      break;
 8003124:	e018      	b.n	8003158 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003126:	78fa      	ldrb	r2, [r7, #3]
 8003128:	6879      	ldr	r1, [r7, #4]
 800312a:	4613      	mov	r3, r2
 800312c:	011b      	lsls	r3, r3, #4
 800312e:	1a9b      	subs	r3, r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	440b      	add	r3, r1
 8003134:	332a      	adds	r3, #42	@ 0x2a
 8003136:	2202      	movs	r2, #2
 8003138:	701a      	strb	r2, [r3, #0]
      break;
 800313a:	e00d      	b.n	8003158 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800313c:	78fa      	ldrb	r2, [r7, #3]
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	4613      	mov	r3, r2
 8003142:	011b      	lsls	r3, r3, #4
 8003144:	1a9b      	subs	r3, r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	332a      	adds	r3, #42	@ 0x2a
 800314c:	2200      	movs	r2, #0
 800314e:	701a      	strb	r2, [r3, #0]
      break;
 8003150:	e002      	b.n	8003158 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8003152:	bf00      	nop
 8003154:	e000      	b.n	8003158 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8003156:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003158:	78fa      	ldrb	r2, [r7, #3]
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	4613      	mov	r3, r2
 800315e:	011b      	lsls	r3, r3, #4
 8003160:	1a9b      	subs	r3, r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	332c      	adds	r3, #44	@ 0x2c
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800316c:	78fa      	ldrb	r2, [r7, #3]
 800316e:	8b39      	ldrh	r1, [r7, #24]
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	4613      	mov	r3, r2
 8003174:	011b      	lsls	r3, r3, #4
 8003176:	1a9b      	subs	r3, r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4403      	add	r3, r0
 800317c:	3334      	adds	r3, #52	@ 0x34
 800317e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003180:	78fa      	ldrb	r2, [r7, #3]
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	4613      	mov	r3, r2
 8003186:	011b      	lsls	r3, r3, #4
 8003188:	1a9b      	subs	r3, r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	334c      	adds	r3, #76	@ 0x4c
 8003190:	2200      	movs	r2, #0
 8003192:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003194:	78fa      	ldrb	r2, [r7, #3]
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	4613      	mov	r3, r2
 800319a:	011b      	lsls	r3, r3, #4
 800319c:	1a9b      	subs	r3, r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	440b      	add	r3, r1
 80031a2:	3338      	adds	r3, #56	@ 0x38
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80031a8:	78fa      	ldrb	r2, [r7, #3]
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	4613      	mov	r3, r2
 80031ae:	011b      	lsls	r3, r3, #4
 80031b0:	1a9b      	subs	r3, r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	3315      	adds	r3, #21
 80031b8:	78fa      	ldrb	r2, [r7, #3]
 80031ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80031bc:	78fa      	ldrb	r2, [r7, #3]
 80031be:	6879      	ldr	r1, [r7, #4]
 80031c0:	4613      	mov	r3, r2
 80031c2:	011b      	lsls	r3, r3, #4
 80031c4:	1a9b      	subs	r3, r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	440b      	add	r3, r1
 80031ca:	334d      	adds	r3, #77	@ 0x4d
 80031cc:	2200      	movs	r2, #0
 80031ce:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6818      	ldr	r0, [r3, #0]
 80031d4:	78fa      	ldrb	r2, [r7, #3]
 80031d6:	4613      	mov	r3, r2
 80031d8:	011b      	lsls	r3, r3, #4
 80031da:	1a9b      	subs	r3, r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	3310      	adds	r3, #16
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	4413      	add	r3, r2
 80031e4:	1d19      	adds	r1, r3, #4
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	799b      	ldrb	r3, [r3, #6]
 80031ea:	461a      	mov	r2, r3
 80031ec:	f005 fbaa 	bl	8008944 <USB_HC_StartXfer>
 80031f0:	4603      	mov	r3, r0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop

080031fc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4618      	mov	r0, r3
 8003214:	f005 f89e 	bl	8008354 <USB_GetMode>
 8003218:	4603      	mov	r3, r0
 800321a:	2b01      	cmp	r3, #1
 800321c:	f040 80fb 	bne.w	8003416 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4618      	mov	r0, r3
 8003226:	f005 f861 	bl	80082ec <USB_ReadInterrupts>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 80f1 	beq.w	8003414 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f005 f858 	bl	80082ec <USB_ReadInterrupts>
 800323c:	4603      	mov	r3, r0
 800323e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003242:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003246:	d104      	bne.n	8003252 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003250:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f005 f848 	bl	80082ec <USB_ReadInterrupts>
 800325c:	4603      	mov	r3, r0
 800325e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003262:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003266:	d104      	bne.n	8003272 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003270:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f005 f838 	bl	80082ec <USB_ReadInterrupts>
 800327c:	4603      	mov	r3, r0
 800327e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003282:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003286:	d104      	bne.n	8003292 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003290:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f005 f828 	bl	80082ec <USB_ReadInterrupts>
 800329c:	4603      	mov	r3, r0
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d103      	bne.n	80032ae <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2202      	movs	r2, #2
 80032ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f005 f81a 	bl	80082ec <USB_ReadInterrupts>
 80032b8:	4603      	mov	r3, r0
 80032ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032c2:	d120      	bne.n	8003306 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80032cc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d113      	bne.n	8003306 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80032de:	2110      	movs	r1, #16
 80032e0:	6938      	ldr	r0, [r7, #16]
 80032e2:	f004 ff0d 	bl	8008100 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80032e6:	6938      	ldr	r0, [r7, #16]
 80032e8:	f004 ff3c 	bl	8008164 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	7a5b      	ldrb	r3, [r3, #9]
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d105      	bne.n	8003300 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2101      	movs	r1, #1
 80032fa:	4618      	mov	r0, r3
 80032fc:	f005 f92e 	bl	800855c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f008 f8f5 	bl	800b4f0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f004 ffee 	bl	80082ec <USB_ReadInterrupts>
 8003310:	4603      	mov	r3, r0
 8003312:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003316:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800331a:	d102      	bne.n	8003322 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f001 fd4d 	bl	8004dbc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4618      	mov	r0, r3
 8003328:	f004 ffe0 	bl	80082ec <USB_ReadInterrupts>
 800332c:	4603      	mov	r3, r0
 800332e:	f003 0308 	and.w	r3, r3, #8
 8003332:	2b08      	cmp	r3, #8
 8003334:	d106      	bne.n	8003344 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f008 f8be 	bl	800b4b8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2208      	movs	r2, #8
 8003342:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4618      	mov	r0, r3
 800334a:	f004 ffcf 	bl	80082ec <USB_ReadInterrupts>
 800334e:	4603      	mov	r3, r0
 8003350:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003354:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003358:	d139      	bne.n	80033ce <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f005 fd6a 	bl	8008e38 <USB_HC_ReadInterrupt>
 8003364:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003366:	2300      	movs	r3, #0
 8003368:	617b      	str	r3, [r7, #20]
 800336a:	e025      	b.n	80033b8 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	68ba      	ldr	r2, [r7, #8]
 8003374:	fa22 f303 	lsr.w	r3, r2, r3
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b00      	cmp	r3, #0
 800337e:	d018      	beq.n	80033b2 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	015a      	lsls	r2, r3, #5
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4413      	add	r3, r2
 8003388:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003392:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003396:	d106      	bne.n	80033a6 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	b2db      	uxtb	r3, r3
 800339c:	4619      	mov	r1, r3
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f905 	bl	80035ae <HCD_HC_IN_IRQHandler>
 80033a4:	e005      	b.n	80033b2 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	4619      	mov	r1, r3
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 ff67 	bl	8004280 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	3301      	adds	r3, #1
 80033b6:	617b      	str	r3, [r7, #20]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	795b      	ldrb	r3, [r3, #5]
 80033bc:	461a      	mov	r2, r3
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d3d3      	bcc.n	800336c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f004 ff8a 	bl	80082ec <USB_ReadInterrupts>
 80033d8:	4603      	mov	r3, r0
 80033da:	f003 0310 	and.w	r3, r3, #16
 80033de:	2b10      	cmp	r3, #16
 80033e0:	d101      	bne.n	80033e6 <HAL_HCD_IRQHandler+0x1ea>
 80033e2:	2301      	movs	r3, #1
 80033e4:	e000      	b.n	80033e8 <HAL_HCD_IRQHandler+0x1ec>
 80033e6:	2300      	movs	r3, #0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d014      	beq.n	8003416 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	699a      	ldr	r2, [r3, #24]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 0210 	bic.w	r2, r2, #16
 80033fa:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f001 fbfe 	bl	8004bfe <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	699a      	ldr	r2, [r3, #24]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f042 0210 	orr.w	r2, r2, #16
 8003410:	619a      	str	r2, [r3, #24]
 8003412:	e000      	b.n	8003416 <HAL_HCD_IRQHandler+0x21a>
      return;
 8003414:	bf00      	nop
    }
  }
}
 8003416:	3718      	adds	r7, #24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800342a:	2b01      	cmp	r3, #1
 800342c:	d101      	bne.n	8003432 <HAL_HCD_Start+0x16>
 800342e:	2302      	movs	r3, #2
 8003430:	e013      	b.n	800345a <HAL_HCD_Start+0x3e>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2101      	movs	r1, #1
 8003440:	4618      	mov	r0, r3
 8003442:	f005 f8f2 	bl	800862a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4618      	mov	r0, r3
 800344c:	f004 fdea 	bl	8008024 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b082      	sub	sp, #8
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003470:	2b01      	cmp	r3, #1
 8003472:	d101      	bne.n	8003478 <HAL_HCD_Stop+0x16>
 8003474:	2302      	movs	r3, #2
 8003476:	e00d      	b.n	8003494 <HAL_HCD_Stop+0x32>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4618      	mov	r0, r3
 8003486:	f005 fe45 	bl	8009114 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f005 f894 	bl	80085d6 <USB_ResetPort>
 80034ae:	4603      	mov	r3, r0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	460b      	mov	r3, r1
 80034c2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80034c4:	78fa      	ldrb	r2, [r7, #3]
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	4613      	mov	r3, r2
 80034ca:	011b      	lsls	r3, r3, #4
 80034cc:	1a9b      	subs	r3, r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	440b      	add	r3, r1
 80034d2:	334c      	adds	r3, #76	@ 0x4c
 80034d4:	781b      	ldrb	r3, [r3, #0]
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b083      	sub	sp, #12
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
 80034ea:	460b      	mov	r3, r1
 80034ec:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80034ee:	78fa      	ldrb	r2, [r7, #3]
 80034f0:	6879      	ldr	r1, [r7, #4]
 80034f2:	4613      	mov	r3, r2
 80034f4:	011b      	lsls	r3, r3, #4
 80034f6:	1a9b      	subs	r3, r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	440b      	add	r3, r1
 80034fc:	3338      	adds	r3, #56	@ 0x38
 80034fe:	681b      	ldr	r3, [r3, #0]
}
 8003500:	4618      	mov	r0, r3
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f005 f8d6 	bl	80086ca <USB_GetCurrentFrame>
 800351e:	4603      	mov	r3, r0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3708      	adds	r7, #8
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4618      	mov	r0, r3
 8003536:	f005 f8b1 	bl	800869c <USB_GetHostSpeed>
 800353a:	4603      	mov	r3, r0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3708      	adds	r7, #8
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	460b      	mov	r3, r1
 800354e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003550:	78fa      	ldrb	r2, [r7, #3]
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	4613      	mov	r3, r2
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	1a9b      	subs	r3, r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	440b      	add	r3, r1
 800355e:	331a      	adds	r3, #26
 8003560:	2200      	movs	r2, #0
 8003562:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003564:	78fa      	ldrb	r2, [r7, #3]
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	4613      	mov	r3, r2
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	1a9b      	subs	r3, r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	331b      	adds	r3, #27
 8003574:	2200      	movs	r2, #0
 8003576:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003578:	78fa      	ldrb	r2, [r7, #3]
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	4613      	mov	r3, r2
 800357e:	011b      	lsls	r3, r3, #4
 8003580:	1a9b      	subs	r3, r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	440b      	add	r3, r1
 8003586:	3325      	adds	r3, #37	@ 0x25
 8003588:	2200      	movs	r2, #0
 800358a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 800358c:	78fa      	ldrb	r2, [r7, #3]
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	4613      	mov	r3, r2
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	1a9b      	subs	r3, r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	3324      	adds	r3, #36	@ 0x24
 800359c:	2200      	movs	r2, #0
 800359e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b086      	sub	sp, #24
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
 80035b6:	460b      	mov	r3, r1
 80035b8:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	78fa      	ldrb	r2, [r7, #3]
 80035ca:	4611      	mov	r1, r2
 80035cc:	4618      	mov	r0, r3
 80035ce:	f004 fea0 	bl	8008312 <USB_ReadChInterrupts>
 80035d2:	4603      	mov	r3, r0
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b04      	cmp	r3, #4
 80035da:	d11a      	bne.n	8003612 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80035dc:	78fb      	ldrb	r3, [r7, #3]
 80035de:	015a      	lsls	r2, r3, #5
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	4413      	add	r3, r2
 80035e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035e8:	461a      	mov	r2, r3
 80035ea:	2304      	movs	r3, #4
 80035ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80035ee:	78fa      	ldrb	r2, [r7, #3]
 80035f0:	6879      	ldr	r1, [r7, #4]
 80035f2:	4613      	mov	r3, r2
 80035f4:	011b      	lsls	r3, r3, #4
 80035f6:	1a9b      	subs	r3, r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	440b      	add	r3, r1
 80035fc:	334d      	adds	r3, #77	@ 0x4d
 80035fe:	2207      	movs	r2, #7
 8003600:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	78fa      	ldrb	r2, [r7, #3]
 8003608:	4611      	mov	r1, r2
 800360a:	4618      	mov	r0, r3
 800360c:	f005 fc25 	bl	8008e5a <USB_HC_Halt>
 8003610:	e09e      	b.n	8003750 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	78fa      	ldrb	r2, [r7, #3]
 8003618:	4611      	mov	r1, r2
 800361a:	4618      	mov	r0, r3
 800361c:	f004 fe79 	bl	8008312 <USB_ReadChInterrupts>
 8003620:	4603      	mov	r3, r0
 8003622:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003626:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800362a:	d11b      	bne.n	8003664 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800362c:	78fb      	ldrb	r3, [r7, #3]
 800362e:	015a      	lsls	r2, r3, #5
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	4413      	add	r3, r2
 8003634:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003638:	461a      	mov	r2, r3
 800363a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800363e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003640:	78fa      	ldrb	r2, [r7, #3]
 8003642:	6879      	ldr	r1, [r7, #4]
 8003644:	4613      	mov	r3, r2
 8003646:	011b      	lsls	r3, r3, #4
 8003648:	1a9b      	subs	r3, r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	440b      	add	r3, r1
 800364e:	334d      	adds	r3, #77	@ 0x4d
 8003650:	2208      	movs	r2, #8
 8003652:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	78fa      	ldrb	r2, [r7, #3]
 800365a:	4611      	mov	r1, r2
 800365c:	4618      	mov	r0, r3
 800365e:	f005 fbfc 	bl	8008e5a <USB_HC_Halt>
 8003662:	e075      	b.n	8003750 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	78fa      	ldrb	r2, [r7, #3]
 800366a:	4611      	mov	r1, r2
 800366c:	4618      	mov	r0, r3
 800366e:	f004 fe50 	bl	8008312 <USB_ReadChInterrupts>
 8003672:	4603      	mov	r3, r0
 8003674:	f003 0308 	and.w	r3, r3, #8
 8003678:	2b08      	cmp	r3, #8
 800367a:	d11a      	bne.n	80036b2 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800367c:	78fb      	ldrb	r3, [r7, #3]
 800367e:	015a      	lsls	r2, r3, #5
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	4413      	add	r3, r2
 8003684:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003688:	461a      	mov	r2, r3
 800368a:	2308      	movs	r3, #8
 800368c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800368e:	78fa      	ldrb	r2, [r7, #3]
 8003690:	6879      	ldr	r1, [r7, #4]
 8003692:	4613      	mov	r3, r2
 8003694:	011b      	lsls	r3, r3, #4
 8003696:	1a9b      	subs	r3, r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	440b      	add	r3, r1
 800369c:	334d      	adds	r3, #77	@ 0x4d
 800369e:	2206      	movs	r2, #6
 80036a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	78fa      	ldrb	r2, [r7, #3]
 80036a8:	4611      	mov	r1, r2
 80036aa:	4618      	mov	r0, r3
 80036ac:	f005 fbd5 	bl	8008e5a <USB_HC_Halt>
 80036b0:	e04e      	b.n	8003750 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	78fa      	ldrb	r2, [r7, #3]
 80036b8:	4611      	mov	r1, r2
 80036ba:	4618      	mov	r0, r3
 80036bc:	f004 fe29 	bl	8008312 <USB_ReadChInterrupts>
 80036c0:	4603      	mov	r3, r0
 80036c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036ca:	d11b      	bne.n	8003704 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80036cc:	78fb      	ldrb	r3, [r7, #3]
 80036ce:	015a      	lsls	r2, r3, #5
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	4413      	add	r3, r2
 80036d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036d8:	461a      	mov	r2, r3
 80036da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80036de:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80036e0:	78fa      	ldrb	r2, [r7, #3]
 80036e2:	6879      	ldr	r1, [r7, #4]
 80036e4:	4613      	mov	r3, r2
 80036e6:	011b      	lsls	r3, r3, #4
 80036e8:	1a9b      	subs	r3, r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	440b      	add	r3, r1
 80036ee:	334d      	adds	r3, #77	@ 0x4d
 80036f0:	2209      	movs	r2, #9
 80036f2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	78fa      	ldrb	r2, [r7, #3]
 80036fa:	4611      	mov	r1, r2
 80036fc:	4618      	mov	r0, r3
 80036fe:	f005 fbac 	bl	8008e5a <USB_HC_Halt>
 8003702:	e025      	b.n	8003750 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	78fa      	ldrb	r2, [r7, #3]
 800370a:	4611      	mov	r1, r2
 800370c:	4618      	mov	r0, r3
 800370e:	f004 fe00 	bl	8008312 <USB_ReadChInterrupts>
 8003712:	4603      	mov	r3, r0
 8003714:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003718:	2b80      	cmp	r3, #128	@ 0x80
 800371a:	d119      	bne.n	8003750 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800371c:	78fb      	ldrb	r3, [r7, #3]
 800371e:	015a      	lsls	r2, r3, #5
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	4413      	add	r3, r2
 8003724:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003728:	461a      	mov	r2, r3
 800372a:	2380      	movs	r3, #128	@ 0x80
 800372c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800372e:	78fa      	ldrb	r2, [r7, #3]
 8003730:	6879      	ldr	r1, [r7, #4]
 8003732:	4613      	mov	r3, r2
 8003734:	011b      	lsls	r3, r3, #4
 8003736:	1a9b      	subs	r3, r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	440b      	add	r3, r1
 800373c:	334d      	adds	r3, #77	@ 0x4d
 800373e:	2207      	movs	r2, #7
 8003740:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	78fa      	ldrb	r2, [r7, #3]
 8003748:	4611      	mov	r1, r2
 800374a:	4618      	mov	r0, r3
 800374c:	f005 fb85 	bl	8008e5a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	78fa      	ldrb	r2, [r7, #3]
 8003756:	4611      	mov	r1, r2
 8003758:	4618      	mov	r0, r3
 800375a:	f004 fdda 	bl	8008312 <USB_ReadChInterrupts>
 800375e:	4603      	mov	r3, r0
 8003760:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003764:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003768:	d112      	bne.n	8003790 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	78fa      	ldrb	r2, [r7, #3]
 8003770:	4611      	mov	r1, r2
 8003772:	4618      	mov	r0, r3
 8003774:	f005 fb71 	bl	8008e5a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003778:	78fb      	ldrb	r3, [r7, #3]
 800377a:	015a      	lsls	r2, r3, #5
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	4413      	add	r3, r2
 8003780:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003784:	461a      	mov	r2, r3
 8003786:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800378a:	6093      	str	r3, [r2, #8]
 800378c:	f000 bd75 	b.w	800427a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	78fa      	ldrb	r2, [r7, #3]
 8003796:	4611      	mov	r1, r2
 8003798:	4618      	mov	r0, r3
 800379a:	f004 fdba 	bl	8008312 <USB_ReadChInterrupts>
 800379e:	4603      	mov	r3, r0
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	f040 8128 	bne.w	80039fa <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80037aa:	78fb      	ldrb	r3, [r7, #3]
 80037ac:	015a      	lsls	r2, r3, #5
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	4413      	add	r3, r2
 80037b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037b6:	461a      	mov	r2, r3
 80037b8:	2320      	movs	r3, #32
 80037ba:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80037bc:	78fa      	ldrb	r2, [r7, #3]
 80037be:	6879      	ldr	r1, [r7, #4]
 80037c0:	4613      	mov	r3, r2
 80037c2:	011b      	lsls	r3, r3, #4
 80037c4:	1a9b      	subs	r3, r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	440b      	add	r3, r1
 80037ca:	331b      	adds	r3, #27
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d119      	bne.n	8003806 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80037d2:	78fa      	ldrb	r2, [r7, #3]
 80037d4:	6879      	ldr	r1, [r7, #4]
 80037d6:	4613      	mov	r3, r2
 80037d8:	011b      	lsls	r3, r3, #4
 80037da:	1a9b      	subs	r3, r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	440b      	add	r3, r1
 80037e0:	331b      	adds	r3, #27
 80037e2:	2200      	movs	r2, #0
 80037e4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80037e6:	78fb      	ldrb	r3, [r7, #3]
 80037e8:	015a      	lsls	r2, r3, #5
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	4413      	add	r3, r2
 80037ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	78fa      	ldrb	r2, [r7, #3]
 80037f6:	0151      	lsls	r1, r2, #5
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	440a      	add	r2, r1
 80037fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003800:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003804:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	799b      	ldrb	r3, [r3, #6]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d01b      	beq.n	8003846 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800380e:	78fa      	ldrb	r2, [r7, #3]
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	4613      	mov	r3, r2
 8003814:	011b      	lsls	r3, r3, #4
 8003816:	1a9b      	subs	r3, r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	440b      	add	r3, r1
 800381c:	3330      	adds	r3, #48	@ 0x30
 800381e:	6819      	ldr	r1, [r3, #0]
 8003820:	78fb      	ldrb	r3, [r7, #3]
 8003822:	015a      	lsls	r2, r3, #5
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	4413      	add	r3, r2
 8003828:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003832:	78fa      	ldrb	r2, [r7, #3]
 8003834:	1ac9      	subs	r1, r1, r3
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	4613      	mov	r3, r2
 800383a:	011b      	lsls	r3, r3, #4
 800383c:	1a9b      	subs	r3, r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4403      	add	r3, r0
 8003842:	3338      	adds	r3, #56	@ 0x38
 8003844:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003846:	78fa      	ldrb	r2, [r7, #3]
 8003848:	6879      	ldr	r1, [r7, #4]
 800384a:	4613      	mov	r3, r2
 800384c:	011b      	lsls	r3, r3, #4
 800384e:	1a9b      	subs	r3, r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	440b      	add	r3, r1
 8003854:	334d      	adds	r3, #77	@ 0x4d
 8003856:	2201      	movs	r2, #1
 8003858:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800385a:	78fa      	ldrb	r2, [r7, #3]
 800385c:	6879      	ldr	r1, [r7, #4]
 800385e:	4613      	mov	r3, r2
 8003860:	011b      	lsls	r3, r3, #4
 8003862:	1a9b      	subs	r3, r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	440b      	add	r3, r1
 8003868:	3344      	adds	r3, #68	@ 0x44
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800386e:	78fb      	ldrb	r3, [r7, #3]
 8003870:	015a      	lsls	r2, r3, #5
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	4413      	add	r3, r2
 8003876:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800387a:	461a      	mov	r2, r3
 800387c:	2301      	movs	r3, #1
 800387e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003880:	78fa      	ldrb	r2, [r7, #3]
 8003882:	6879      	ldr	r1, [r7, #4]
 8003884:	4613      	mov	r3, r2
 8003886:	011b      	lsls	r3, r3, #4
 8003888:	1a9b      	subs	r3, r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	440b      	add	r3, r1
 800388e:	3326      	adds	r3, #38	@ 0x26
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00a      	beq.n	80038ac <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003896:	78fa      	ldrb	r2, [r7, #3]
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	4613      	mov	r3, r2
 800389c:	011b      	lsls	r3, r3, #4
 800389e:	1a9b      	subs	r3, r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	440b      	add	r3, r1
 80038a4:	3326      	adds	r3, #38	@ 0x26
 80038a6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d110      	bne.n	80038ce <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	78fa      	ldrb	r2, [r7, #3]
 80038b2:	4611      	mov	r1, r2
 80038b4:	4618      	mov	r0, r3
 80038b6:	f005 fad0 	bl	8008e5a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80038ba:	78fb      	ldrb	r3, [r7, #3]
 80038bc:	015a      	lsls	r2, r3, #5
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	4413      	add	r3, r2
 80038c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038c6:	461a      	mov	r2, r3
 80038c8:	2310      	movs	r3, #16
 80038ca:	6093      	str	r3, [r2, #8]
 80038cc:	e03d      	b.n	800394a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80038ce:	78fa      	ldrb	r2, [r7, #3]
 80038d0:	6879      	ldr	r1, [r7, #4]
 80038d2:	4613      	mov	r3, r2
 80038d4:	011b      	lsls	r3, r3, #4
 80038d6:	1a9b      	subs	r3, r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	440b      	add	r3, r1
 80038dc:	3326      	adds	r3, #38	@ 0x26
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	2b03      	cmp	r3, #3
 80038e2:	d00a      	beq.n	80038fa <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80038e4:	78fa      	ldrb	r2, [r7, #3]
 80038e6:	6879      	ldr	r1, [r7, #4]
 80038e8:	4613      	mov	r3, r2
 80038ea:	011b      	lsls	r3, r3, #4
 80038ec:	1a9b      	subs	r3, r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	440b      	add	r3, r1
 80038f2:	3326      	adds	r3, #38	@ 0x26
 80038f4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d127      	bne.n	800394a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80038fa:	78fb      	ldrb	r3, [r7, #3]
 80038fc:	015a      	lsls	r2, r3, #5
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	4413      	add	r3, r2
 8003902:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	78fa      	ldrb	r2, [r7, #3]
 800390a:	0151      	lsls	r1, r2, #5
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	440a      	add	r2, r1
 8003910:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003914:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003918:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800391a:	78fa      	ldrb	r2, [r7, #3]
 800391c:	6879      	ldr	r1, [r7, #4]
 800391e:	4613      	mov	r3, r2
 8003920:	011b      	lsls	r3, r3, #4
 8003922:	1a9b      	subs	r3, r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	440b      	add	r3, r1
 8003928:	334c      	adds	r3, #76	@ 0x4c
 800392a:	2201      	movs	r2, #1
 800392c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800392e:	78fa      	ldrb	r2, [r7, #3]
 8003930:	6879      	ldr	r1, [r7, #4]
 8003932:	4613      	mov	r3, r2
 8003934:	011b      	lsls	r3, r3, #4
 8003936:	1a9b      	subs	r3, r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	440b      	add	r3, r1
 800393c:	334c      	adds	r3, #76	@ 0x4c
 800393e:	781a      	ldrb	r2, [r3, #0]
 8003940:	78fb      	ldrb	r3, [r7, #3]
 8003942:	4619      	mov	r1, r3
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f007 fde1 	bl	800b50c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	799b      	ldrb	r3, [r3, #6]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d13b      	bne.n	80039ca <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003952:	78fa      	ldrb	r2, [r7, #3]
 8003954:	6879      	ldr	r1, [r7, #4]
 8003956:	4613      	mov	r3, r2
 8003958:	011b      	lsls	r3, r3, #4
 800395a:	1a9b      	subs	r3, r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	440b      	add	r3, r1
 8003960:	3338      	adds	r3, #56	@ 0x38
 8003962:	6819      	ldr	r1, [r3, #0]
 8003964:	78fa      	ldrb	r2, [r7, #3]
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	4613      	mov	r3, r2
 800396a:	011b      	lsls	r3, r3, #4
 800396c:	1a9b      	subs	r3, r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	4403      	add	r3, r0
 8003972:	3328      	adds	r3, #40	@ 0x28
 8003974:	881b      	ldrh	r3, [r3, #0]
 8003976:	440b      	add	r3, r1
 8003978:	1e59      	subs	r1, r3, #1
 800397a:	78fa      	ldrb	r2, [r7, #3]
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	4613      	mov	r3, r2
 8003980:	011b      	lsls	r3, r3, #4
 8003982:	1a9b      	subs	r3, r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	4403      	add	r3, r0
 8003988:	3328      	adds	r3, #40	@ 0x28
 800398a:	881b      	ldrh	r3, [r3, #0]
 800398c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 8470 	beq.w	800427a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800399a:	78fa      	ldrb	r2, [r7, #3]
 800399c:	6879      	ldr	r1, [r7, #4]
 800399e:	4613      	mov	r3, r2
 80039a0:	011b      	lsls	r3, r3, #4
 80039a2:	1a9b      	subs	r3, r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	440b      	add	r3, r1
 80039a8:	333c      	adds	r3, #60	@ 0x3c
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	78fa      	ldrb	r2, [r7, #3]
 80039ae:	f083 0301 	eor.w	r3, r3, #1
 80039b2:	b2d8      	uxtb	r0, r3
 80039b4:	6879      	ldr	r1, [r7, #4]
 80039b6:	4613      	mov	r3, r2
 80039b8:	011b      	lsls	r3, r3, #4
 80039ba:	1a9b      	subs	r3, r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	440b      	add	r3, r1
 80039c0:	333c      	adds	r3, #60	@ 0x3c
 80039c2:	4602      	mov	r2, r0
 80039c4:	701a      	strb	r2, [r3, #0]
 80039c6:	f000 bc58 	b.w	800427a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80039ca:	78fa      	ldrb	r2, [r7, #3]
 80039cc:	6879      	ldr	r1, [r7, #4]
 80039ce:	4613      	mov	r3, r2
 80039d0:	011b      	lsls	r3, r3, #4
 80039d2:	1a9b      	subs	r3, r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	440b      	add	r3, r1
 80039d8:	333c      	adds	r3, #60	@ 0x3c
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	78fa      	ldrb	r2, [r7, #3]
 80039de:	f083 0301 	eor.w	r3, r3, #1
 80039e2:	b2d8      	uxtb	r0, r3
 80039e4:	6879      	ldr	r1, [r7, #4]
 80039e6:	4613      	mov	r3, r2
 80039e8:	011b      	lsls	r3, r3, #4
 80039ea:	1a9b      	subs	r3, r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	440b      	add	r3, r1
 80039f0:	333c      	adds	r3, #60	@ 0x3c
 80039f2:	4602      	mov	r2, r0
 80039f4:	701a      	strb	r2, [r3, #0]
 80039f6:	f000 bc40 	b.w	800427a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	78fa      	ldrb	r2, [r7, #3]
 8003a00:	4611      	mov	r1, r2
 8003a02:	4618      	mov	r0, r3
 8003a04:	f004 fc85 	bl	8008312 <USB_ReadChInterrupts>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	f003 0320 	and.w	r3, r3, #32
 8003a0e:	2b20      	cmp	r3, #32
 8003a10:	d131      	bne.n	8003a76 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003a12:	78fb      	ldrb	r3, [r7, #3]
 8003a14:	015a      	lsls	r2, r3, #5
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	4413      	add	r3, r2
 8003a1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a1e:	461a      	mov	r2, r3
 8003a20:	2320      	movs	r3, #32
 8003a22:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003a24:	78fa      	ldrb	r2, [r7, #3]
 8003a26:	6879      	ldr	r1, [r7, #4]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	011b      	lsls	r3, r3, #4
 8003a2c:	1a9b      	subs	r3, r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	331a      	adds	r3, #26
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	f040 841f 	bne.w	800427a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003a3c:	78fa      	ldrb	r2, [r7, #3]
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	4613      	mov	r3, r2
 8003a42:	011b      	lsls	r3, r3, #4
 8003a44:	1a9b      	subs	r3, r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	440b      	add	r3, r1
 8003a4a:	331b      	adds	r3, #27
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003a50:	78fa      	ldrb	r2, [r7, #3]
 8003a52:	6879      	ldr	r1, [r7, #4]
 8003a54:	4613      	mov	r3, r2
 8003a56:	011b      	lsls	r3, r3, #4
 8003a58:	1a9b      	subs	r3, r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	440b      	add	r3, r1
 8003a5e:	334d      	adds	r3, #77	@ 0x4d
 8003a60:	2203      	movs	r2, #3
 8003a62:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	78fa      	ldrb	r2, [r7, #3]
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f005 f9f4 	bl	8008e5a <USB_HC_Halt>
 8003a72:	f000 bc02 	b.w	800427a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	78fa      	ldrb	r2, [r7, #3]
 8003a7c:	4611      	mov	r1, r2
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f004 fc47 	bl	8008312 <USB_ReadChInterrupts>
 8003a84:	4603      	mov	r3, r0
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	f040 8305 	bne.w	800409a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003a90:	78fb      	ldrb	r3, [r7, #3]
 8003a92:	015a      	lsls	r2, r3, #5
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	4413      	add	r3, r2
 8003a98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003aa2:	78fa      	ldrb	r2, [r7, #3]
 8003aa4:	6879      	ldr	r1, [r7, #4]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	011b      	lsls	r3, r3, #4
 8003aaa:	1a9b      	subs	r3, r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	440b      	add	r3, r1
 8003ab0:	334d      	adds	r3, #77	@ 0x4d
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d114      	bne.n	8003ae2 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ab8:	78fa      	ldrb	r2, [r7, #3]
 8003aba:	6879      	ldr	r1, [r7, #4]
 8003abc:	4613      	mov	r3, r2
 8003abe:	011b      	lsls	r3, r3, #4
 8003ac0:	1a9b      	subs	r3, r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	334d      	adds	r3, #77	@ 0x4d
 8003ac8:	2202      	movs	r2, #2
 8003aca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003acc:	78fa      	ldrb	r2, [r7, #3]
 8003ace:	6879      	ldr	r1, [r7, #4]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	011b      	lsls	r3, r3, #4
 8003ad4:	1a9b      	subs	r3, r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	440b      	add	r3, r1
 8003ada:	334c      	adds	r3, #76	@ 0x4c
 8003adc:	2201      	movs	r2, #1
 8003ade:	701a      	strb	r2, [r3, #0]
 8003ae0:	e2cc      	b.n	800407c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003ae2:	78fa      	ldrb	r2, [r7, #3]
 8003ae4:	6879      	ldr	r1, [r7, #4]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	011b      	lsls	r3, r3, #4
 8003aea:	1a9b      	subs	r3, r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	440b      	add	r3, r1
 8003af0:	334d      	adds	r3, #77	@ 0x4d
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2b06      	cmp	r3, #6
 8003af6:	d114      	bne.n	8003b22 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003af8:	78fa      	ldrb	r2, [r7, #3]
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	4613      	mov	r3, r2
 8003afe:	011b      	lsls	r3, r3, #4
 8003b00:	1a9b      	subs	r3, r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	440b      	add	r3, r1
 8003b06:	334d      	adds	r3, #77	@ 0x4d
 8003b08:	2202      	movs	r2, #2
 8003b0a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003b0c:	78fa      	ldrb	r2, [r7, #3]
 8003b0e:	6879      	ldr	r1, [r7, #4]
 8003b10:	4613      	mov	r3, r2
 8003b12:	011b      	lsls	r3, r3, #4
 8003b14:	1a9b      	subs	r3, r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	440b      	add	r3, r1
 8003b1a:	334c      	adds	r3, #76	@ 0x4c
 8003b1c:	2205      	movs	r2, #5
 8003b1e:	701a      	strb	r2, [r3, #0]
 8003b20:	e2ac      	b.n	800407c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003b22:	78fa      	ldrb	r2, [r7, #3]
 8003b24:	6879      	ldr	r1, [r7, #4]
 8003b26:	4613      	mov	r3, r2
 8003b28:	011b      	lsls	r3, r3, #4
 8003b2a:	1a9b      	subs	r3, r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	440b      	add	r3, r1
 8003b30:	334d      	adds	r3, #77	@ 0x4d
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	2b07      	cmp	r3, #7
 8003b36:	d00b      	beq.n	8003b50 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003b38:	78fa      	ldrb	r2, [r7, #3]
 8003b3a:	6879      	ldr	r1, [r7, #4]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	011b      	lsls	r3, r3, #4
 8003b40:	1a9b      	subs	r3, r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	440b      	add	r3, r1
 8003b46:	334d      	adds	r3, #77	@ 0x4d
 8003b48:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003b4a:	2b09      	cmp	r3, #9
 8003b4c:	f040 80a6 	bne.w	8003c9c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b50:	78fa      	ldrb	r2, [r7, #3]
 8003b52:	6879      	ldr	r1, [r7, #4]
 8003b54:	4613      	mov	r3, r2
 8003b56:	011b      	lsls	r3, r3, #4
 8003b58:	1a9b      	subs	r3, r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	440b      	add	r3, r1
 8003b5e:	334d      	adds	r3, #77	@ 0x4d
 8003b60:	2202      	movs	r2, #2
 8003b62:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003b64:	78fa      	ldrb	r2, [r7, #3]
 8003b66:	6879      	ldr	r1, [r7, #4]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	011b      	lsls	r3, r3, #4
 8003b6c:	1a9b      	subs	r3, r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	440b      	add	r3, r1
 8003b72:	3344      	adds	r3, #68	@ 0x44
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	1c59      	adds	r1, r3, #1
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	011b      	lsls	r3, r3, #4
 8003b7e:	1a9b      	subs	r3, r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	4403      	add	r3, r0
 8003b84:	3344      	adds	r3, #68	@ 0x44
 8003b86:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003b88:	78fa      	ldrb	r2, [r7, #3]
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	011b      	lsls	r3, r3, #4
 8003b90:	1a9b      	subs	r3, r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	440b      	add	r3, r1
 8003b96:	3344      	adds	r3, #68	@ 0x44
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d943      	bls.n	8003c26 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003b9e:	78fa      	ldrb	r2, [r7, #3]
 8003ba0:	6879      	ldr	r1, [r7, #4]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	011b      	lsls	r3, r3, #4
 8003ba6:	1a9b      	subs	r3, r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	440b      	add	r3, r1
 8003bac:	3344      	adds	r3, #68	@ 0x44
 8003bae:	2200      	movs	r2, #0
 8003bb0:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003bb2:	78fa      	ldrb	r2, [r7, #3]
 8003bb4:	6879      	ldr	r1, [r7, #4]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	011b      	lsls	r3, r3, #4
 8003bba:	1a9b      	subs	r3, r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	440b      	add	r3, r1
 8003bc0:	331a      	adds	r3, #26
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d123      	bne.n	8003c10 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003bc8:	78fa      	ldrb	r2, [r7, #3]
 8003bca:	6879      	ldr	r1, [r7, #4]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	011b      	lsls	r3, r3, #4
 8003bd0:	1a9b      	subs	r3, r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	440b      	add	r3, r1
 8003bd6:	331b      	adds	r3, #27
 8003bd8:	2200      	movs	r2, #0
 8003bda:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003bdc:	78fa      	ldrb	r2, [r7, #3]
 8003bde:	6879      	ldr	r1, [r7, #4]
 8003be0:	4613      	mov	r3, r2
 8003be2:	011b      	lsls	r3, r3, #4
 8003be4:	1a9b      	subs	r3, r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	440b      	add	r3, r1
 8003bea:	331c      	adds	r3, #28
 8003bec:	2200      	movs	r2, #0
 8003bee:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003bf0:	78fb      	ldrb	r3, [r7, #3]
 8003bf2:	015a      	lsls	r2, r3, #5
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	78fa      	ldrb	r2, [r7, #3]
 8003c00:	0151      	lsls	r1, r2, #5
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	440a      	add	r2, r1
 8003c06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003c0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c0e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003c10:	78fa      	ldrb	r2, [r7, #3]
 8003c12:	6879      	ldr	r1, [r7, #4]
 8003c14:	4613      	mov	r3, r2
 8003c16:	011b      	lsls	r3, r3, #4
 8003c18:	1a9b      	subs	r3, r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	440b      	add	r3, r1
 8003c1e:	334c      	adds	r3, #76	@ 0x4c
 8003c20:	2204      	movs	r2, #4
 8003c22:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003c24:	e229      	b.n	800407a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c26:	78fa      	ldrb	r2, [r7, #3]
 8003c28:	6879      	ldr	r1, [r7, #4]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	1a9b      	subs	r3, r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	440b      	add	r3, r1
 8003c34:	334c      	adds	r3, #76	@ 0x4c
 8003c36:	2202      	movs	r2, #2
 8003c38:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c3a:	78fa      	ldrb	r2, [r7, #3]
 8003c3c:	6879      	ldr	r1, [r7, #4]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	011b      	lsls	r3, r3, #4
 8003c42:	1a9b      	subs	r3, r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	440b      	add	r3, r1
 8003c48:	3326      	adds	r3, #38	@ 0x26
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00b      	beq.n	8003c68 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003c50:	78fa      	ldrb	r2, [r7, #3]
 8003c52:	6879      	ldr	r1, [r7, #4]
 8003c54:	4613      	mov	r3, r2
 8003c56:	011b      	lsls	r3, r3, #4
 8003c58:	1a9b      	subs	r3, r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	3326      	adds	r3, #38	@ 0x26
 8003c60:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	f040 8209 	bne.w	800407a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003c68:	78fb      	ldrb	r3, [r7, #3]
 8003c6a:	015a      	lsls	r2, r3, #5
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	4413      	add	r3, r2
 8003c70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003c7e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003c86:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003c88:	78fb      	ldrb	r3, [r7, #3]
 8003c8a:	015a      	lsls	r2, r3, #5
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	4413      	add	r3, r2
 8003c90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c94:	461a      	mov	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003c9a:	e1ee      	b.n	800407a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003c9c:	78fa      	ldrb	r2, [r7, #3]
 8003c9e:	6879      	ldr	r1, [r7, #4]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	011b      	lsls	r3, r3, #4
 8003ca4:	1a9b      	subs	r3, r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	440b      	add	r3, r1
 8003caa:	334d      	adds	r3, #77	@ 0x4d
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	2b05      	cmp	r3, #5
 8003cb0:	f040 80c8 	bne.w	8003e44 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003cb4:	78fa      	ldrb	r2, [r7, #3]
 8003cb6:	6879      	ldr	r1, [r7, #4]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	1a9b      	subs	r3, r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	334d      	adds	r3, #77	@ 0x4d
 8003cc4:	2202      	movs	r2, #2
 8003cc6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003cc8:	78fa      	ldrb	r2, [r7, #3]
 8003cca:	6879      	ldr	r1, [r7, #4]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	011b      	lsls	r3, r3, #4
 8003cd0:	1a9b      	subs	r3, r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	440b      	add	r3, r1
 8003cd6:	331b      	adds	r3, #27
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	f040 81ce 	bne.w	800407c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003ce0:	78fa      	ldrb	r2, [r7, #3]
 8003ce2:	6879      	ldr	r1, [r7, #4]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	011b      	lsls	r3, r3, #4
 8003ce8:	1a9b      	subs	r3, r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	440b      	add	r3, r1
 8003cee:	3326      	adds	r3, #38	@ 0x26
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	2b03      	cmp	r3, #3
 8003cf4:	d16b      	bne.n	8003dce <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003cf6:	78fa      	ldrb	r2, [r7, #3]
 8003cf8:	6879      	ldr	r1, [r7, #4]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	011b      	lsls	r3, r3, #4
 8003cfe:	1a9b      	subs	r3, r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	440b      	add	r3, r1
 8003d04:	3348      	adds	r3, #72	@ 0x48
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	1c59      	adds	r1, r3, #1
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	011b      	lsls	r3, r3, #4
 8003d10:	1a9b      	subs	r3, r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4403      	add	r3, r0
 8003d16:	3348      	adds	r3, #72	@ 0x48
 8003d18:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003d1a:	78fa      	ldrb	r2, [r7, #3]
 8003d1c:	6879      	ldr	r1, [r7, #4]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	011b      	lsls	r3, r3, #4
 8003d22:	1a9b      	subs	r3, r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	440b      	add	r3, r1
 8003d28:	3348      	adds	r3, #72	@ 0x48
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d943      	bls.n	8003db8 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003d30:	78fa      	ldrb	r2, [r7, #3]
 8003d32:	6879      	ldr	r1, [r7, #4]
 8003d34:	4613      	mov	r3, r2
 8003d36:	011b      	lsls	r3, r3, #4
 8003d38:	1a9b      	subs	r3, r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	440b      	add	r3, r1
 8003d3e:	3348      	adds	r3, #72	@ 0x48
 8003d40:	2200      	movs	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003d44:	78fa      	ldrb	r2, [r7, #3]
 8003d46:	6879      	ldr	r1, [r7, #4]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	011b      	lsls	r3, r3, #4
 8003d4c:	1a9b      	subs	r3, r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	440b      	add	r3, r1
 8003d52:	331b      	adds	r3, #27
 8003d54:	2200      	movs	r2, #0
 8003d56:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003d58:	78fa      	ldrb	r2, [r7, #3]
 8003d5a:	6879      	ldr	r1, [r7, #4]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	011b      	lsls	r3, r3, #4
 8003d60:	1a9b      	subs	r3, r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	440b      	add	r3, r1
 8003d66:	3344      	adds	r3, #68	@ 0x44
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d809      	bhi.n	8003d82 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003d6e:	78fa      	ldrb	r2, [r7, #3]
 8003d70:	6879      	ldr	r1, [r7, #4]
 8003d72:	4613      	mov	r3, r2
 8003d74:	011b      	lsls	r3, r3, #4
 8003d76:	1a9b      	subs	r3, r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	440b      	add	r3, r1
 8003d7c:	331c      	adds	r3, #28
 8003d7e:	2201      	movs	r2, #1
 8003d80:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003d82:	78fb      	ldrb	r3, [r7, #3]
 8003d84:	015a      	lsls	r2, r3, #5
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	4413      	add	r3, r2
 8003d8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	78fa      	ldrb	r2, [r7, #3]
 8003d92:	0151      	lsls	r1, r2, #5
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	440a      	add	r2, r1
 8003d98:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003d9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003da0:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003da2:	78fa      	ldrb	r2, [r7, #3]
 8003da4:	6879      	ldr	r1, [r7, #4]
 8003da6:	4613      	mov	r3, r2
 8003da8:	011b      	lsls	r3, r3, #4
 8003daa:	1a9b      	subs	r3, r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	440b      	add	r3, r1
 8003db0:	334c      	adds	r3, #76	@ 0x4c
 8003db2:	2204      	movs	r2, #4
 8003db4:	701a      	strb	r2, [r3, #0]
 8003db6:	e014      	b.n	8003de2 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003db8:	78fa      	ldrb	r2, [r7, #3]
 8003dba:	6879      	ldr	r1, [r7, #4]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	011b      	lsls	r3, r3, #4
 8003dc0:	1a9b      	subs	r3, r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	440b      	add	r3, r1
 8003dc6:	334c      	adds	r3, #76	@ 0x4c
 8003dc8:	2202      	movs	r2, #2
 8003dca:	701a      	strb	r2, [r3, #0]
 8003dcc:	e009      	b.n	8003de2 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003dce:	78fa      	ldrb	r2, [r7, #3]
 8003dd0:	6879      	ldr	r1, [r7, #4]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	011b      	lsls	r3, r3, #4
 8003dd6:	1a9b      	subs	r3, r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	440b      	add	r3, r1
 8003ddc:	334c      	adds	r3, #76	@ 0x4c
 8003dde:	2202      	movs	r2, #2
 8003de0:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003de2:	78fa      	ldrb	r2, [r7, #3]
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	4613      	mov	r3, r2
 8003de8:	011b      	lsls	r3, r3, #4
 8003dea:	1a9b      	subs	r3, r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	440b      	add	r3, r1
 8003df0:	3326      	adds	r3, #38	@ 0x26
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00b      	beq.n	8003e10 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003df8:	78fa      	ldrb	r2, [r7, #3]
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	011b      	lsls	r3, r3, #4
 8003e00:	1a9b      	subs	r3, r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	440b      	add	r3, r1
 8003e06:	3326      	adds	r3, #38	@ 0x26
 8003e08:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	f040 8136 	bne.w	800407c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003e10:	78fb      	ldrb	r3, [r7, #3]
 8003e12:	015a      	lsls	r2, r3, #5
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	4413      	add	r3, r2
 8003e18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003e26:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003e2e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003e30:	78fb      	ldrb	r3, [r7, #3]
 8003e32:	015a      	lsls	r2, r3, #5
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	4413      	add	r3, r2
 8003e38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	e11b      	b.n	800407c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003e44:	78fa      	ldrb	r2, [r7, #3]
 8003e46:	6879      	ldr	r1, [r7, #4]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	011b      	lsls	r3, r3, #4
 8003e4c:	1a9b      	subs	r3, r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	440b      	add	r3, r1
 8003e52:	334d      	adds	r3, #77	@ 0x4d
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	2b03      	cmp	r3, #3
 8003e58:	f040 8081 	bne.w	8003f5e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e5c:	78fa      	ldrb	r2, [r7, #3]
 8003e5e:	6879      	ldr	r1, [r7, #4]
 8003e60:	4613      	mov	r3, r2
 8003e62:	011b      	lsls	r3, r3, #4
 8003e64:	1a9b      	subs	r3, r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	440b      	add	r3, r1
 8003e6a:	334d      	adds	r3, #77	@ 0x4d
 8003e6c:	2202      	movs	r2, #2
 8003e6e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003e70:	78fa      	ldrb	r2, [r7, #3]
 8003e72:	6879      	ldr	r1, [r7, #4]
 8003e74:	4613      	mov	r3, r2
 8003e76:	011b      	lsls	r3, r3, #4
 8003e78:	1a9b      	subs	r3, r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	440b      	add	r3, r1
 8003e7e:	331b      	adds	r3, #27
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	f040 80fa 	bne.w	800407c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e88:	78fa      	ldrb	r2, [r7, #3]
 8003e8a:	6879      	ldr	r1, [r7, #4]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	011b      	lsls	r3, r3, #4
 8003e90:	1a9b      	subs	r3, r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	440b      	add	r3, r1
 8003e96:	334c      	adds	r3, #76	@ 0x4c
 8003e98:	2202      	movs	r2, #2
 8003e9a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003e9c:	78fb      	ldrb	r3, [r7, #3]
 8003e9e:	015a      	lsls	r2, r3, #5
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	78fa      	ldrb	r2, [r7, #3]
 8003eac:	0151      	lsls	r1, r2, #5
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	440a      	add	r2, r1
 8003eb2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003eb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003eba:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003ebc:	78fb      	ldrb	r3, [r7, #3]
 8003ebe:	015a      	lsls	r2, r3, #5
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	78fa      	ldrb	r2, [r7, #3]
 8003ecc:	0151      	lsls	r1, r2, #5
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	440a      	add	r2, r1
 8003ed2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003ed6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003eda:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003edc:	78fb      	ldrb	r3, [r7, #3]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	78fa      	ldrb	r2, [r7, #3]
 8003eec:	0151      	lsls	r1, r2, #5
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	440a      	add	r2, r1
 8003ef2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003ef6:	f023 0320 	bic.w	r3, r3, #32
 8003efa:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003efc:	78fa      	ldrb	r2, [r7, #3]
 8003efe:	6879      	ldr	r1, [r7, #4]
 8003f00:	4613      	mov	r3, r2
 8003f02:	011b      	lsls	r3, r3, #4
 8003f04:	1a9b      	subs	r3, r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	440b      	add	r3, r1
 8003f0a:	3326      	adds	r3, #38	@ 0x26
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00b      	beq.n	8003f2a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003f12:	78fa      	ldrb	r2, [r7, #3]
 8003f14:	6879      	ldr	r1, [r7, #4]
 8003f16:	4613      	mov	r3, r2
 8003f18:	011b      	lsls	r3, r3, #4
 8003f1a:	1a9b      	subs	r3, r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	440b      	add	r3, r1
 8003f20:	3326      	adds	r3, #38	@ 0x26
 8003f22:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	f040 80a9 	bne.w	800407c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003f2a:	78fb      	ldrb	r3, [r7, #3]
 8003f2c:	015a      	lsls	r2, r3, #5
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	4413      	add	r3, r2
 8003f32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003f40:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003f48:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003f4a:	78fb      	ldrb	r3, [r7, #3]
 8003f4c:	015a      	lsls	r2, r3, #5
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	4413      	add	r3, r2
 8003f52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f56:	461a      	mov	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6013      	str	r3, [r2, #0]
 8003f5c:	e08e      	b.n	800407c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003f5e:	78fa      	ldrb	r2, [r7, #3]
 8003f60:	6879      	ldr	r1, [r7, #4]
 8003f62:	4613      	mov	r3, r2
 8003f64:	011b      	lsls	r3, r3, #4
 8003f66:	1a9b      	subs	r3, r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	440b      	add	r3, r1
 8003f6c:	334d      	adds	r3, #77	@ 0x4d
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	2b04      	cmp	r3, #4
 8003f72:	d143      	bne.n	8003ffc <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f74:	78fa      	ldrb	r2, [r7, #3]
 8003f76:	6879      	ldr	r1, [r7, #4]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	011b      	lsls	r3, r3, #4
 8003f7c:	1a9b      	subs	r3, r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	440b      	add	r3, r1
 8003f82:	334d      	adds	r3, #77	@ 0x4d
 8003f84:	2202      	movs	r2, #2
 8003f86:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003f88:	78fa      	ldrb	r2, [r7, #3]
 8003f8a:	6879      	ldr	r1, [r7, #4]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	011b      	lsls	r3, r3, #4
 8003f90:	1a9b      	subs	r3, r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	440b      	add	r3, r1
 8003f96:	334c      	adds	r3, #76	@ 0x4c
 8003f98:	2202      	movs	r2, #2
 8003f9a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003f9c:	78fa      	ldrb	r2, [r7, #3]
 8003f9e:	6879      	ldr	r1, [r7, #4]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	011b      	lsls	r3, r3, #4
 8003fa4:	1a9b      	subs	r3, r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	440b      	add	r3, r1
 8003faa:	3326      	adds	r3, #38	@ 0x26
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00a      	beq.n	8003fc8 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003fb2:	78fa      	ldrb	r2, [r7, #3]
 8003fb4:	6879      	ldr	r1, [r7, #4]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	011b      	lsls	r3, r3, #4
 8003fba:	1a9b      	subs	r3, r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	440b      	add	r3, r1
 8003fc0:	3326      	adds	r3, #38	@ 0x26
 8003fc2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d159      	bne.n	800407c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003fc8:	78fb      	ldrb	r3, [r7, #3]
 8003fca:	015a      	lsls	r2, r3, #5
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	4413      	add	r3, r2
 8003fd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003fde:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003fe6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003fe8:	78fb      	ldrb	r3, [r7, #3]
 8003fea:	015a      	lsls	r2, r3, #5
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	4413      	add	r3, r2
 8003ff0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6013      	str	r3, [r2, #0]
 8003ffa:	e03f      	b.n	800407c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003ffc:	78fa      	ldrb	r2, [r7, #3]
 8003ffe:	6879      	ldr	r1, [r7, #4]
 8004000:	4613      	mov	r3, r2
 8004002:	011b      	lsls	r3, r3, #4
 8004004:	1a9b      	subs	r3, r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	440b      	add	r3, r1
 800400a:	334d      	adds	r3, #77	@ 0x4d
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	2b08      	cmp	r3, #8
 8004010:	d126      	bne.n	8004060 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004012:	78fa      	ldrb	r2, [r7, #3]
 8004014:	6879      	ldr	r1, [r7, #4]
 8004016:	4613      	mov	r3, r2
 8004018:	011b      	lsls	r3, r3, #4
 800401a:	1a9b      	subs	r3, r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	440b      	add	r3, r1
 8004020:	334d      	adds	r3, #77	@ 0x4d
 8004022:	2202      	movs	r2, #2
 8004024:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004026:	78fa      	ldrb	r2, [r7, #3]
 8004028:	6879      	ldr	r1, [r7, #4]
 800402a:	4613      	mov	r3, r2
 800402c:	011b      	lsls	r3, r3, #4
 800402e:	1a9b      	subs	r3, r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	440b      	add	r3, r1
 8004034:	3344      	adds	r3, #68	@ 0x44
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	1c59      	adds	r1, r3, #1
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	4613      	mov	r3, r2
 800403e:	011b      	lsls	r3, r3, #4
 8004040:	1a9b      	subs	r3, r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	4403      	add	r3, r0
 8004046:	3344      	adds	r3, #68	@ 0x44
 8004048:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800404a:	78fa      	ldrb	r2, [r7, #3]
 800404c:	6879      	ldr	r1, [r7, #4]
 800404e:	4613      	mov	r3, r2
 8004050:	011b      	lsls	r3, r3, #4
 8004052:	1a9b      	subs	r3, r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	440b      	add	r3, r1
 8004058:	334c      	adds	r3, #76	@ 0x4c
 800405a:	2204      	movs	r2, #4
 800405c:	701a      	strb	r2, [r3, #0]
 800405e:	e00d      	b.n	800407c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004060:	78fa      	ldrb	r2, [r7, #3]
 8004062:	6879      	ldr	r1, [r7, #4]
 8004064:	4613      	mov	r3, r2
 8004066:	011b      	lsls	r3, r3, #4
 8004068:	1a9b      	subs	r3, r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	440b      	add	r3, r1
 800406e:	334d      	adds	r3, #77	@ 0x4d
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	2b02      	cmp	r3, #2
 8004074:	f000 8100 	beq.w	8004278 <HCD_HC_IN_IRQHandler+0xcca>
 8004078:	e000      	b.n	800407c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800407a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800407c:	78fa      	ldrb	r2, [r7, #3]
 800407e:	6879      	ldr	r1, [r7, #4]
 8004080:	4613      	mov	r3, r2
 8004082:	011b      	lsls	r3, r3, #4
 8004084:	1a9b      	subs	r3, r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	440b      	add	r3, r1
 800408a:	334c      	adds	r3, #76	@ 0x4c
 800408c:	781a      	ldrb	r2, [r3, #0]
 800408e:	78fb      	ldrb	r3, [r7, #3]
 8004090:	4619      	mov	r1, r3
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f007 fa3a 	bl	800b50c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004098:	e0ef      	b.n	800427a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	78fa      	ldrb	r2, [r7, #3]
 80040a0:	4611      	mov	r1, r2
 80040a2:	4618      	mov	r0, r3
 80040a4:	f004 f935 	bl	8008312 <USB_ReadChInterrupts>
 80040a8:	4603      	mov	r3, r0
 80040aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ae:	2b40      	cmp	r3, #64	@ 0x40
 80040b0:	d12f      	bne.n	8004112 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80040b2:	78fb      	ldrb	r3, [r7, #3]
 80040b4:	015a      	lsls	r2, r3, #5
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	4413      	add	r3, r2
 80040ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040be:	461a      	mov	r2, r3
 80040c0:	2340      	movs	r3, #64	@ 0x40
 80040c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80040c4:	78fa      	ldrb	r2, [r7, #3]
 80040c6:	6879      	ldr	r1, [r7, #4]
 80040c8:	4613      	mov	r3, r2
 80040ca:	011b      	lsls	r3, r3, #4
 80040cc:	1a9b      	subs	r3, r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	440b      	add	r3, r1
 80040d2:	334d      	adds	r3, #77	@ 0x4d
 80040d4:	2205      	movs	r2, #5
 80040d6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80040d8:	78fa      	ldrb	r2, [r7, #3]
 80040da:	6879      	ldr	r1, [r7, #4]
 80040dc:	4613      	mov	r3, r2
 80040de:	011b      	lsls	r3, r3, #4
 80040e0:	1a9b      	subs	r3, r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	440b      	add	r3, r1
 80040e6:	331a      	adds	r3, #26
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d109      	bne.n	8004102 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80040ee:	78fa      	ldrb	r2, [r7, #3]
 80040f0:	6879      	ldr	r1, [r7, #4]
 80040f2:	4613      	mov	r3, r2
 80040f4:	011b      	lsls	r3, r3, #4
 80040f6:	1a9b      	subs	r3, r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	440b      	add	r3, r1
 80040fc:	3344      	adds	r3, #68	@ 0x44
 80040fe:	2200      	movs	r2, #0
 8004100:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	78fa      	ldrb	r2, [r7, #3]
 8004108:	4611      	mov	r1, r2
 800410a:	4618      	mov	r0, r3
 800410c:	f004 fea5 	bl	8008e5a <USB_HC_Halt>
 8004110:	e0b3      	b.n	800427a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	78fa      	ldrb	r2, [r7, #3]
 8004118:	4611      	mov	r1, r2
 800411a:	4618      	mov	r0, r3
 800411c:	f004 f8f9 	bl	8008312 <USB_ReadChInterrupts>
 8004120:	4603      	mov	r3, r0
 8004122:	f003 0310 	and.w	r3, r3, #16
 8004126:	2b10      	cmp	r3, #16
 8004128:	f040 80a7 	bne.w	800427a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800412c:	78fa      	ldrb	r2, [r7, #3]
 800412e:	6879      	ldr	r1, [r7, #4]
 8004130:	4613      	mov	r3, r2
 8004132:	011b      	lsls	r3, r3, #4
 8004134:	1a9b      	subs	r3, r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	440b      	add	r3, r1
 800413a:	3326      	adds	r3, #38	@ 0x26
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	2b03      	cmp	r3, #3
 8004140:	d11b      	bne.n	800417a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004142:	78fa      	ldrb	r2, [r7, #3]
 8004144:	6879      	ldr	r1, [r7, #4]
 8004146:	4613      	mov	r3, r2
 8004148:	011b      	lsls	r3, r3, #4
 800414a:	1a9b      	subs	r3, r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	440b      	add	r3, r1
 8004150:	3344      	adds	r3, #68	@ 0x44
 8004152:	2200      	movs	r2, #0
 8004154:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004156:	78fa      	ldrb	r2, [r7, #3]
 8004158:	6879      	ldr	r1, [r7, #4]
 800415a:	4613      	mov	r3, r2
 800415c:	011b      	lsls	r3, r3, #4
 800415e:	1a9b      	subs	r3, r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	440b      	add	r3, r1
 8004164:	334d      	adds	r3, #77	@ 0x4d
 8004166:	2204      	movs	r2, #4
 8004168:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	78fa      	ldrb	r2, [r7, #3]
 8004170:	4611      	mov	r1, r2
 8004172:	4618      	mov	r0, r3
 8004174:	f004 fe71 	bl	8008e5a <USB_HC_Halt>
 8004178:	e03f      	b.n	80041fa <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800417a:	78fa      	ldrb	r2, [r7, #3]
 800417c:	6879      	ldr	r1, [r7, #4]
 800417e:	4613      	mov	r3, r2
 8004180:	011b      	lsls	r3, r3, #4
 8004182:	1a9b      	subs	r3, r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	440b      	add	r3, r1
 8004188:	3326      	adds	r3, #38	@ 0x26
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00a      	beq.n	80041a6 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004190:	78fa      	ldrb	r2, [r7, #3]
 8004192:	6879      	ldr	r1, [r7, #4]
 8004194:	4613      	mov	r3, r2
 8004196:	011b      	lsls	r3, r3, #4
 8004198:	1a9b      	subs	r3, r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	440b      	add	r3, r1
 800419e:	3326      	adds	r3, #38	@ 0x26
 80041a0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d129      	bne.n	80041fa <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80041a6:	78fa      	ldrb	r2, [r7, #3]
 80041a8:	6879      	ldr	r1, [r7, #4]
 80041aa:	4613      	mov	r3, r2
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	1a9b      	subs	r3, r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	440b      	add	r3, r1
 80041b4:	3344      	adds	r3, #68	@ 0x44
 80041b6:	2200      	movs	r2, #0
 80041b8:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	799b      	ldrb	r3, [r3, #6]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00a      	beq.n	80041d8 <HCD_HC_IN_IRQHandler+0xc2a>
 80041c2:	78fa      	ldrb	r2, [r7, #3]
 80041c4:	6879      	ldr	r1, [r7, #4]
 80041c6:	4613      	mov	r3, r2
 80041c8:	011b      	lsls	r3, r3, #4
 80041ca:	1a9b      	subs	r3, r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	440b      	add	r3, r1
 80041d0:	331b      	adds	r3, #27
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d110      	bne.n	80041fa <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80041d8:	78fa      	ldrb	r2, [r7, #3]
 80041da:	6879      	ldr	r1, [r7, #4]
 80041dc:	4613      	mov	r3, r2
 80041de:	011b      	lsls	r3, r3, #4
 80041e0:	1a9b      	subs	r3, r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	440b      	add	r3, r1
 80041e6:	334d      	adds	r3, #77	@ 0x4d
 80041e8:	2204      	movs	r2, #4
 80041ea:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	78fa      	ldrb	r2, [r7, #3]
 80041f2:	4611      	mov	r1, r2
 80041f4:	4618      	mov	r0, r3
 80041f6:	f004 fe30 	bl	8008e5a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80041fa:	78fa      	ldrb	r2, [r7, #3]
 80041fc:	6879      	ldr	r1, [r7, #4]
 80041fe:	4613      	mov	r3, r2
 8004200:	011b      	lsls	r3, r3, #4
 8004202:	1a9b      	subs	r3, r3, r2
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	440b      	add	r3, r1
 8004208:	331b      	adds	r3, #27
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d129      	bne.n	8004264 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004210:	78fa      	ldrb	r2, [r7, #3]
 8004212:	6879      	ldr	r1, [r7, #4]
 8004214:	4613      	mov	r3, r2
 8004216:	011b      	lsls	r3, r3, #4
 8004218:	1a9b      	subs	r3, r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	440b      	add	r3, r1
 800421e:	331b      	adds	r3, #27
 8004220:	2200      	movs	r2, #0
 8004222:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004224:	78fb      	ldrb	r3, [r7, #3]
 8004226:	015a      	lsls	r2, r3, #5
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	4413      	add	r3, r2
 800422c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	78fa      	ldrb	r2, [r7, #3]
 8004234:	0151      	lsls	r1, r2, #5
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	440a      	add	r2, r1
 800423a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800423e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004242:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004244:	78fb      	ldrb	r3, [r7, #3]
 8004246:	015a      	lsls	r2, r3, #5
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	4413      	add	r3, r2
 800424c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	78fa      	ldrb	r2, [r7, #3]
 8004254:	0151      	lsls	r1, r2, #5
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	440a      	add	r2, r1
 800425a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800425e:	f043 0320 	orr.w	r3, r3, #32
 8004262:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004264:	78fb      	ldrb	r3, [r7, #3]
 8004266:	015a      	lsls	r2, r3, #5
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	4413      	add	r3, r2
 800426c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004270:	461a      	mov	r2, r3
 8004272:	2310      	movs	r3, #16
 8004274:	6093      	str	r3, [r2, #8]
 8004276:	e000      	b.n	800427a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004278:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800427a:	3718      	adds	r7, #24
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	460b      	mov	r3, r1
 800428a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	78fa      	ldrb	r2, [r7, #3]
 800429c:	4611      	mov	r1, r2
 800429e:	4618      	mov	r0, r3
 80042a0:	f004 f837 	bl	8008312 <USB_ReadChInterrupts>
 80042a4:	4603      	mov	r3, r0
 80042a6:	f003 0304 	and.w	r3, r3, #4
 80042aa:	2b04      	cmp	r3, #4
 80042ac:	d11b      	bne.n	80042e6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80042ae:	78fb      	ldrb	r3, [r7, #3]
 80042b0:	015a      	lsls	r2, r3, #5
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	4413      	add	r3, r2
 80042b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042ba:	461a      	mov	r2, r3
 80042bc:	2304      	movs	r3, #4
 80042be:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80042c0:	78fa      	ldrb	r2, [r7, #3]
 80042c2:	6879      	ldr	r1, [r7, #4]
 80042c4:	4613      	mov	r3, r2
 80042c6:	011b      	lsls	r3, r3, #4
 80042c8:	1a9b      	subs	r3, r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	440b      	add	r3, r1
 80042ce:	334d      	adds	r3, #77	@ 0x4d
 80042d0:	2207      	movs	r2, #7
 80042d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	78fa      	ldrb	r2, [r7, #3]
 80042da:	4611      	mov	r1, r2
 80042dc:	4618      	mov	r0, r3
 80042de:	f004 fdbc 	bl	8008e5a <USB_HC_Halt>
 80042e2:	f000 bc89 	b.w	8004bf8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	78fa      	ldrb	r2, [r7, #3]
 80042ec:	4611      	mov	r1, r2
 80042ee:	4618      	mov	r0, r3
 80042f0:	f004 f80f 	bl	8008312 <USB_ReadChInterrupts>
 80042f4:	4603      	mov	r3, r0
 80042f6:	f003 0320 	and.w	r3, r3, #32
 80042fa:	2b20      	cmp	r3, #32
 80042fc:	f040 8082 	bne.w	8004404 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004300:	78fb      	ldrb	r3, [r7, #3]
 8004302:	015a      	lsls	r2, r3, #5
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	4413      	add	r3, r2
 8004308:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800430c:	461a      	mov	r2, r3
 800430e:	2320      	movs	r3, #32
 8004310:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004312:	78fa      	ldrb	r2, [r7, #3]
 8004314:	6879      	ldr	r1, [r7, #4]
 8004316:	4613      	mov	r3, r2
 8004318:	011b      	lsls	r3, r3, #4
 800431a:	1a9b      	subs	r3, r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	440b      	add	r3, r1
 8004320:	3319      	adds	r3, #25
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d124      	bne.n	8004372 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004328:	78fa      	ldrb	r2, [r7, #3]
 800432a:	6879      	ldr	r1, [r7, #4]
 800432c:	4613      	mov	r3, r2
 800432e:	011b      	lsls	r3, r3, #4
 8004330:	1a9b      	subs	r3, r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	440b      	add	r3, r1
 8004336:	3319      	adds	r3, #25
 8004338:	2200      	movs	r2, #0
 800433a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800433c:	78fa      	ldrb	r2, [r7, #3]
 800433e:	6879      	ldr	r1, [r7, #4]
 8004340:	4613      	mov	r3, r2
 8004342:	011b      	lsls	r3, r3, #4
 8004344:	1a9b      	subs	r3, r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	440b      	add	r3, r1
 800434a:	334c      	adds	r3, #76	@ 0x4c
 800434c:	2202      	movs	r2, #2
 800434e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004350:	78fa      	ldrb	r2, [r7, #3]
 8004352:	6879      	ldr	r1, [r7, #4]
 8004354:	4613      	mov	r3, r2
 8004356:	011b      	lsls	r3, r3, #4
 8004358:	1a9b      	subs	r3, r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	440b      	add	r3, r1
 800435e:	334d      	adds	r3, #77	@ 0x4d
 8004360:	2203      	movs	r2, #3
 8004362:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	78fa      	ldrb	r2, [r7, #3]
 800436a:	4611      	mov	r1, r2
 800436c:	4618      	mov	r0, r3
 800436e:	f004 fd74 	bl	8008e5a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004372:	78fa      	ldrb	r2, [r7, #3]
 8004374:	6879      	ldr	r1, [r7, #4]
 8004376:	4613      	mov	r3, r2
 8004378:	011b      	lsls	r3, r3, #4
 800437a:	1a9b      	subs	r3, r3, r2
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	440b      	add	r3, r1
 8004380:	331a      	adds	r3, #26
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	2b01      	cmp	r3, #1
 8004386:	f040 8437 	bne.w	8004bf8 <HCD_HC_OUT_IRQHandler+0x978>
 800438a:	78fa      	ldrb	r2, [r7, #3]
 800438c:	6879      	ldr	r1, [r7, #4]
 800438e:	4613      	mov	r3, r2
 8004390:	011b      	lsls	r3, r3, #4
 8004392:	1a9b      	subs	r3, r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	440b      	add	r3, r1
 8004398:	331b      	adds	r3, #27
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	f040 842b 	bne.w	8004bf8 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80043a2:	78fa      	ldrb	r2, [r7, #3]
 80043a4:	6879      	ldr	r1, [r7, #4]
 80043a6:	4613      	mov	r3, r2
 80043a8:	011b      	lsls	r3, r3, #4
 80043aa:	1a9b      	subs	r3, r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	440b      	add	r3, r1
 80043b0:	3326      	adds	r3, #38	@ 0x26
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d009      	beq.n	80043cc <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80043b8:	78fa      	ldrb	r2, [r7, #3]
 80043ba:	6879      	ldr	r1, [r7, #4]
 80043bc:	4613      	mov	r3, r2
 80043be:	011b      	lsls	r3, r3, #4
 80043c0:	1a9b      	subs	r3, r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	440b      	add	r3, r1
 80043c6:	331b      	adds	r3, #27
 80043c8:	2201      	movs	r2, #1
 80043ca:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80043cc:	78fa      	ldrb	r2, [r7, #3]
 80043ce:	6879      	ldr	r1, [r7, #4]
 80043d0:	4613      	mov	r3, r2
 80043d2:	011b      	lsls	r3, r3, #4
 80043d4:	1a9b      	subs	r3, r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	440b      	add	r3, r1
 80043da:	334d      	adds	r3, #77	@ 0x4d
 80043dc:	2203      	movs	r2, #3
 80043de:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	78fa      	ldrb	r2, [r7, #3]
 80043e6:	4611      	mov	r1, r2
 80043e8:	4618      	mov	r0, r3
 80043ea:	f004 fd36 	bl	8008e5a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80043ee:	78fa      	ldrb	r2, [r7, #3]
 80043f0:	6879      	ldr	r1, [r7, #4]
 80043f2:	4613      	mov	r3, r2
 80043f4:	011b      	lsls	r3, r3, #4
 80043f6:	1a9b      	subs	r3, r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	440b      	add	r3, r1
 80043fc:	3344      	adds	r3, #68	@ 0x44
 80043fe:	2200      	movs	r2, #0
 8004400:	601a      	str	r2, [r3, #0]
 8004402:	e3f9      	b.n	8004bf8 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	78fa      	ldrb	r2, [r7, #3]
 800440a:	4611      	mov	r1, r2
 800440c:	4618      	mov	r0, r3
 800440e:	f003 ff80 	bl	8008312 <USB_ReadChInterrupts>
 8004412:	4603      	mov	r3, r0
 8004414:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004418:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800441c:	d111      	bne.n	8004442 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800441e:	78fb      	ldrb	r3, [r7, #3]
 8004420:	015a      	lsls	r2, r3, #5
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	4413      	add	r3, r2
 8004426:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800442a:	461a      	mov	r2, r3
 800442c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004430:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	78fa      	ldrb	r2, [r7, #3]
 8004438:	4611      	mov	r1, r2
 800443a:	4618      	mov	r0, r3
 800443c:	f004 fd0d 	bl	8008e5a <USB_HC_Halt>
 8004440:	e3da      	b.n	8004bf8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	78fa      	ldrb	r2, [r7, #3]
 8004448:	4611      	mov	r1, r2
 800444a:	4618      	mov	r0, r3
 800444c:	f003 ff61 	bl	8008312 <USB_ReadChInterrupts>
 8004450:	4603      	mov	r3, r0
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b01      	cmp	r3, #1
 8004458:	d168      	bne.n	800452c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800445a:	78fa      	ldrb	r2, [r7, #3]
 800445c:	6879      	ldr	r1, [r7, #4]
 800445e:	4613      	mov	r3, r2
 8004460:	011b      	lsls	r3, r3, #4
 8004462:	1a9b      	subs	r3, r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	440b      	add	r3, r1
 8004468:	3344      	adds	r3, #68	@ 0x44
 800446a:	2200      	movs	r2, #0
 800446c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	78fa      	ldrb	r2, [r7, #3]
 8004474:	4611      	mov	r1, r2
 8004476:	4618      	mov	r0, r3
 8004478:	f003 ff4b 	bl	8008312 <USB_ReadChInterrupts>
 800447c:	4603      	mov	r3, r0
 800447e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004482:	2b40      	cmp	r3, #64	@ 0x40
 8004484:	d112      	bne.n	80044ac <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004486:	78fa      	ldrb	r2, [r7, #3]
 8004488:	6879      	ldr	r1, [r7, #4]
 800448a:	4613      	mov	r3, r2
 800448c:	011b      	lsls	r3, r3, #4
 800448e:	1a9b      	subs	r3, r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	440b      	add	r3, r1
 8004494:	3319      	adds	r3, #25
 8004496:	2201      	movs	r2, #1
 8004498:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800449a:	78fb      	ldrb	r3, [r7, #3]
 800449c:	015a      	lsls	r2, r3, #5
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	4413      	add	r3, r2
 80044a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044a6:	461a      	mov	r2, r3
 80044a8:	2340      	movs	r3, #64	@ 0x40
 80044aa:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80044ac:	78fa      	ldrb	r2, [r7, #3]
 80044ae:	6879      	ldr	r1, [r7, #4]
 80044b0:	4613      	mov	r3, r2
 80044b2:	011b      	lsls	r3, r3, #4
 80044b4:	1a9b      	subs	r3, r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	440b      	add	r3, r1
 80044ba:	331b      	adds	r3, #27
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d019      	beq.n	80044f6 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80044c2:	78fa      	ldrb	r2, [r7, #3]
 80044c4:	6879      	ldr	r1, [r7, #4]
 80044c6:	4613      	mov	r3, r2
 80044c8:	011b      	lsls	r3, r3, #4
 80044ca:	1a9b      	subs	r3, r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	440b      	add	r3, r1
 80044d0:	331b      	adds	r3, #27
 80044d2:	2200      	movs	r2, #0
 80044d4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80044d6:	78fb      	ldrb	r3, [r7, #3]
 80044d8:	015a      	lsls	r2, r3, #5
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	4413      	add	r3, r2
 80044de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	78fa      	ldrb	r2, [r7, #3]
 80044e6:	0151      	lsls	r1, r2, #5
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	440a      	add	r2, r1
 80044ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80044f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044f4:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80044f6:	78fb      	ldrb	r3, [r7, #3]
 80044f8:	015a      	lsls	r2, r3, #5
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	4413      	add	r3, r2
 80044fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004502:	461a      	mov	r2, r3
 8004504:	2301      	movs	r3, #1
 8004506:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004508:	78fa      	ldrb	r2, [r7, #3]
 800450a:	6879      	ldr	r1, [r7, #4]
 800450c:	4613      	mov	r3, r2
 800450e:	011b      	lsls	r3, r3, #4
 8004510:	1a9b      	subs	r3, r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	440b      	add	r3, r1
 8004516:	334d      	adds	r3, #77	@ 0x4d
 8004518:	2201      	movs	r2, #1
 800451a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	78fa      	ldrb	r2, [r7, #3]
 8004522:	4611      	mov	r1, r2
 8004524:	4618      	mov	r0, r3
 8004526:	f004 fc98 	bl	8008e5a <USB_HC_Halt>
 800452a:	e365      	b.n	8004bf8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	78fa      	ldrb	r2, [r7, #3]
 8004532:	4611      	mov	r1, r2
 8004534:	4618      	mov	r0, r3
 8004536:	f003 feec 	bl	8008312 <USB_ReadChInterrupts>
 800453a:	4603      	mov	r3, r0
 800453c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004540:	2b40      	cmp	r3, #64	@ 0x40
 8004542:	d139      	bne.n	80045b8 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004544:	78fa      	ldrb	r2, [r7, #3]
 8004546:	6879      	ldr	r1, [r7, #4]
 8004548:	4613      	mov	r3, r2
 800454a:	011b      	lsls	r3, r3, #4
 800454c:	1a9b      	subs	r3, r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	440b      	add	r3, r1
 8004552:	334d      	adds	r3, #77	@ 0x4d
 8004554:	2205      	movs	r2, #5
 8004556:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004558:	78fa      	ldrb	r2, [r7, #3]
 800455a:	6879      	ldr	r1, [r7, #4]
 800455c:	4613      	mov	r3, r2
 800455e:	011b      	lsls	r3, r3, #4
 8004560:	1a9b      	subs	r3, r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	440b      	add	r3, r1
 8004566:	331a      	adds	r3, #26
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d109      	bne.n	8004582 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800456e:	78fa      	ldrb	r2, [r7, #3]
 8004570:	6879      	ldr	r1, [r7, #4]
 8004572:	4613      	mov	r3, r2
 8004574:	011b      	lsls	r3, r3, #4
 8004576:	1a9b      	subs	r3, r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	440b      	add	r3, r1
 800457c:	3319      	adds	r3, #25
 800457e:	2201      	movs	r2, #1
 8004580:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004582:	78fa      	ldrb	r2, [r7, #3]
 8004584:	6879      	ldr	r1, [r7, #4]
 8004586:	4613      	mov	r3, r2
 8004588:	011b      	lsls	r3, r3, #4
 800458a:	1a9b      	subs	r3, r3, r2
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	440b      	add	r3, r1
 8004590:	3344      	adds	r3, #68	@ 0x44
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	78fa      	ldrb	r2, [r7, #3]
 800459c:	4611      	mov	r1, r2
 800459e:	4618      	mov	r0, r3
 80045a0:	f004 fc5b 	bl	8008e5a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80045a4:	78fb      	ldrb	r3, [r7, #3]
 80045a6:	015a      	lsls	r2, r3, #5
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045b0:	461a      	mov	r2, r3
 80045b2:	2340      	movs	r3, #64	@ 0x40
 80045b4:	6093      	str	r3, [r2, #8]
 80045b6:	e31f      	b.n	8004bf8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	78fa      	ldrb	r2, [r7, #3]
 80045be:	4611      	mov	r1, r2
 80045c0:	4618      	mov	r0, r3
 80045c2:	f003 fea6 	bl	8008312 <USB_ReadChInterrupts>
 80045c6:	4603      	mov	r3, r0
 80045c8:	f003 0308 	and.w	r3, r3, #8
 80045cc:	2b08      	cmp	r3, #8
 80045ce:	d11a      	bne.n	8004606 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80045d0:	78fb      	ldrb	r3, [r7, #3]
 80045d2:	015a      	lsls	r2, r3, #5
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	4413      	add	r3, r2
 80045d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045dc:	461a      	mov	r2, r3
 80045de:	2308      	movs	r3, #8
 80045e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80045e2:	78fa      	ldrb	r2, [r7, #3]
 80045e4:	6879      	ldr	r1, [r7, #4]
 80045e6:	4613      	mov	r3, r2
 80045e8:	011b      	lsls	r3, r3, #4
 80045ea:	1a9b      	subs	r3, r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	440b      	add	r3, r1
 80045f0:	334d      	adds	r3, #77	@ 0x4d
 80045f2:	2206      	movs	r2, #6
 80045f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	78fa      	ldrb	r2, [r7, #3]
 80045fc:	4611      	mov	r1, r2
 80045fe:	4618      	mov	r0, r3
 8004600:	f004 fc2b 	bl	8008e5a <USB_HC_Halt>
 8004604:	e2f8      	b.n	8004bf8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	78fa      	ldrb	r2, [r7, #3]
 800460c:	4611      	mov	r1, r2
 800460e:	4618      	mov	r0, r3
 8004610:	f003 fe7f 	bl	8008312 <USB_ReadChInterrupts>
 8004614:	4603      	mov	r3, r0
 8004616:	f003 0310 	and.w	r3, r3, #16
 800461a:	2b10      	cmp	r3, #16
 800461c:	d144      	bne.n	80046a8 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800461e:	78fa      	ldrb	r2, [r7, #3]
 8004620:	6879      	ldr	r1, [r7, #4]
 8004622:	4613      	mov	r3, r2
 8004624:	011b      	lsls	r3, r3, #4
 8004626:	1a9b      	subs	r3, r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	440b      	add	r3, r1
 800462c:	3344      	adds	r3, #68	@ 0x44
 800462e:	2200      	movs	r2, #0
 8004630:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004632:	78fa      	ldrb	r2, [r7, #3]
 8004634:	6879      	ldr	r1, [r7, #4]
 8004636:	4613      	mov	r3, r2
 8004638:	011b      	lsls	r3, r3, #4
 800463a:	1a9b      	subs	r3, r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	440b      	add	r3, r1
 8004640:	334d      	adds	r3, #77	@ 0x4d
 8004642:	2204      	movs	r2, #4
 8004644:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004646:	78fa      	ldrb	r2, [r7, #3]
 8004648:	6879      	ldr	r1, [r7, #4]
 800464a:	4613      	mov	r3, r2
 800464c:	011b      	lsls	r3, r3, #4
 800464e:	1a9b      	subs	r3, r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	440b      	add	r3, r1
 8004654:	3319      	adds	r3, #25
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d114      	bne.n	8004686 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800465c:	78fa      	ldrb	r2, [r7, #3]
 800465e:	6879      	ldr	r1, [r7, #4]
 8004660:	4613      	mov	r3, r2
 8004662:	011b      	lsls	r3, r3, #4
 8004664:	1a9b      	subs	r3, r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	440b      	add	r3, r1
 800466a:	3318      	adds	r3, #24
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d109      	bne.n	8004686 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004672:	78fa      	ldrb	r2, [r7, #3]
 8004674:	6879      	ldr	r1, [r7, #4]
 8004676:	4613      	mov	r3, r2
 8004678:	011b      	lsls	r3, r3, #4
 800467a:	1a9b      	subs	r3, r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	440b      	add	r3, r1
 8004680:	3319      	adds	r3, #25
 8004682:	2201      	movs	r2, #1
 8004684:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	78fa      	ldrb	r2, [r7, #3]
 800468c:	4611      	mov	r1, r2
 800468e:	4618      	mov	r0, r3
 8004690:	f004 fbe3 	bl	8008e5a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004694:	78fb      	ldrb	r3, [r7, #3]
 8004696:	015a      	lsls	r2, r3, #5
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	4413      	add	r3, r2
 800469c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046a0:	461a      	mov	r2, r3
 80046a2:	2310      	movs	r3, #16
 80046a4:	6093      	str	r3, [r2, #8]
 80046a6:	e2a7      	b.n	8004bf8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	78fa      	ldrb	r2, [r7, #3]
 80046ae:	4611      	mov	r1, r2
 80046b0:	4618      	mov	r0, r3
 80046b2:	f003 fe2e 	bl	8008312 <USB_ReadChInterrupts>
 80046b6:	4603      	mov	r3, r0
 80046b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046bc:	2b80      	cmp	r3, #128	@ 0x80
 80046be:	f040 8083 	bne.w	80047c8 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	799b      	ldrb	r3, [r3, #6]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d111      	bne.n	80046ee <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80046ca:	78fa      	ldrb	r2, [r7, #3]
 80046cc:	6879      	ldr	r1, [r7, #4]
 80046ce:	4613      	mov	r3, r2
 80046d0:	011b      	lsls	r3, r3, #4
 80046d2:	1a9b      	subs	r3, r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	440b      	add	r3, r1
 80046d8:	334d      	adds	r3, #77	@ 0x4d
 80046da:	2207      	movs	r2, #7
 80046dc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	78fa      	ldrb	r2, [r7, #3]
 80046e4:	4611      	mov	r1, r2
 80046e6:	4618      	mov	r0, r3
 80046e8:	f004 fbb7 	bl	8008e5a <USB_HC_Halt>
 80046ec:	e062      	b.n	80047b4 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80046ee:	78fa      	ldrb	r2, [r7, #3]
 80046f0:	6879      	ldr	r1, [r7, #4]
 80046f2:	4613      	mov	r3, r2
 80046f4:	011b      	lsls	r3, r3, #4
 80046f6:	1a9b      	subs	r3, r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	440b      	add	r3, r1
 80046fc:	3344      	adds	r3, #68	@ 0x44
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	1c59      	adds	r1, r3, #1
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	4613      	mov	r3, r2
 8004706:	011b      	lsls	r3, r3, #4
 8004708:	1a9b      	subs	r3, r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4403      	add	r3, r0
 800470e:	3344      	adds	r3, #68	@ 0x44
 8004710:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004712:	78fa      	ldrb	r2, [r7, #3]
 8004714:	6879      	ldr	r1, [r7, #4]
 8004716:	4613      	mov	r3, r2
 8004718:	011b      	lsls	r3, r3, #4
 800471a:	1a9b      	subs	r3, r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	440b      	add	r3, r1
 8004720:	3344      	adds	r3, #68	@ 0x44
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2b02      	cmp	r3, #2
 8004726:	d922      	bls.n	800476e <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004728:	78fa      	ldrb	r2, [r7, #3]
 800472a:	6879      	ldr	r1, [r7, #4]
 800472c:	4613      	mov	r3, r2
 800472e:	011b      	lsls	r3, r3, #4
 8004730:	1a9b      	subs	r3, r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	440b      	add	r3, r1
 8004736:	3344      	adds	r3, #68	@ 0x44
 8004738:	2200      	movs	r2, #0
 800473a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800473c:	78fa      	ldrb	r2, [r7, #3]
 800473e:	6879      	ldr	r1, [r7, #4]
 8004740:	4613      	mov	r3, r2
 8004742:	011b      	lsls	r3, r3, #4
 8004744:	1a9b      	subs	r3, r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	440b      	add	r3, r1
 800474a:	334c      	adds	r3, #76	@ 0x4c
 800474c:	2204      	movs	r2, #4
 800474e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004750:	78fa      	ldrb	r2, [r7, #3]
 8004752:	6879      	ldr	r1, [r7, #4]
 8004754:	4613      	mov	r3, r2
 8004756:	011b      	lsls	r3, r3, #4
 8004758:	1a9b      	subs	r3, r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	440b      	add	r3, r1
 800475e:	334c      	adds	r3, #76	@ 0x4c
 8004760:	781a      	ldrb	r2, [r3, #0]
 8004762:	78fb      	ldrb	r3, [r7, #3]
 8004764:	4619      	mov	r1, r3
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f006 fed0 	bl	800b50c <HAL_HCD_HC_NotifyURBChange_Callback>
 800476c:	e022      	b.n	80047b4 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800476e:	78fa      	ldrb	r2, [r7, #3]
 8004770:	6879      	ldr	r1, [r7, #4]
 8004772:	4613      	mov	r3, r2
 8004774:	011b      	lsls	r3, r3, #4
 8004776:	1a9b      	subs	r3, r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	440b      	add	r3, r1
 800477c:	334c      	adds	r3, #76	@ 0x4c
 800477e:	2202      	movs	r2, #2
 8004780:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004782:	78fb      	ldrb	r3, [r7, #3]
 8004784:	015a      	lsls	r2, r3, #5
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	4413      	add	r3, r2
 800478a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004798:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80047a0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80047a2:	78fb      	ldrb	r3, [r7, #3]
 80047a4:	015a      	lsls	r2, r3, #5
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	4413      	add	r3, r2
 80047aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047ae:	461a      	mov	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80047b4:	78fb      	ldrb	r3, [r7, #3]
 80047b6:	015a      	lsls	r2, r3, #5
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	4413      	add	r3, r2
 80047bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047c0:	461a      	mov	r2, r3
 80047c2:	2380      	movs	r3, #128	@ 0x80
 80047c4:	6093      	str	r3, [r2, #8]
 80047c6:	e217      	b.n	8004bf8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	78fa      	ldrb	r2, [r7, #3]
 80047ce:	4611      	mov	r1, r2
 80047d0:	4618      	mov	r0, r3
 80047d2:	f003 fd9e 	bl	8008312 <USB_ReadChInterrupts>
 80047d6:	4603      	mov	r3, r0
 80047d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047e0:	d11b      	bne.n	800481a <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80047e2:	78fa      	ldrb	r2, [r7, #3]
 80047e4:	6879      	ldr	r1, [r7, #4]
 80047e6:	4613      	mov	r3, r2
 80047e8:	011b      	lsls	r3, r3, #4
 80047ea:	1a9b      	subs	r3, r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	440b      	add	r3, r1
 80047f0:	334d      	adds	r3, #77	@ 0x4d
 80047f2:	2209      	movs	r2, #9
 80047f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	78fa      	ldrb	r2, [r7, #3]
 80047fc:	4611      	mov	r1, r2
 80047fe:	4618      	mov	r0, r3
 8004800:	f004 fb2b 	bl	8008e5a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004804:	78fb      	ldrb	r3, [r7, #3]
 8004806:	015a      	lsls	r2, r3, #5
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	4413      	add	r3, r2
 800480c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004810:	461a      	mov	r2, r3
 8004812:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004816:	6093      	str	r3, [r2, #8]
 8004818:	e1ee      	b.n	8004bf8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	78fa      	ldrb	r2, [r7, #3]
 8004820:	4611      	mov	r1, r2
 8004822:	4618      	mov	r0, r3
 8004824:	f003 fd75 	bl	8008312 <USB_ReadChInterrupts>
 8004828:	4603      	mov	r3, r0
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b02      	cmp	r3, #2
 8004830:	f040 81df 	bne.w	8004bf2 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004834:	78fb      	ldrb	r3, [r7, #3]
 8004836:	015a      	lsls	r2, r3, #5
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	4413      	add	r3, r2
 800483c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004840:	461a      	mov	r2, r3
 8004842:	2302      	movs	r3, #2
 8004844:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004846:	78fa      	ldrb	r2, [r7, #3]
 8004848:	6879      	ldr	r1, [r7, #4]
 800484a:	4613      	mov	r3, r2
 800484c:	011b      	lsls	r3, r3, #4
 800484e:	1a9b      	subs	r3, r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	440b      	add	r3, r1
 8004854:	334d      	adds	r3, #77	@ 0x4d
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	2b01      	cmp	r3, #1
 800485a:	f040 8093 	bne.w	8004984 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800485e:	78fa      	ldrb	r2, [r7, #3]
 8004860:	6879      	ldr	r1, [r7, #4]
 8004862:	4613      	mov	r3, r2
 8004864:	011b      	lsls	r3, r3, #4
 8004866:	1a9b      	subs	r3, r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	440b      	add	r3, r1
 800486c:	334d      	adds	r3, #77	@ 0x4d
 800486e:	2202      	movs	r2, #2
 8004870:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004872:	78fa      	ldrb	r2, [r7, #3]
 8004874:	6879      	ldr	r1, [r7, #4]
 8004876:	4613      	mov	r3, r2
 8004878:	011b      	lsls	r3, r3, #4
 800487a:	1a9b      	subs	r3, r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	440b      	add	r3, r1
 8004880:	334c      	adds	r3, #76	@ 0x4c
 8004882:	2201      	movs	r2, #1
 8004884:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004886:	78fa      	ldrb	r2, [r7, #3]
 8004888:	6879      	ldr	r1, [r7, #4]
 800488a:	4613      	mov	r3, r2
 800488c:	011b      	lsls	r3, r3, #4
 800488e:	1a9b      	subs	r3, r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	440b      	add	r3, r1
 8004894:	3326      	adds	r3, #38	@ 0x26
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	2b02      	cmp	r3, #2
 800489a:	d00b      	beq.n	80048b4 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800489c:	78fa      	ldrb	r2, [r7, #3]
 800489e:	6879      	ldr	r1, [r7, #4]
 80048a0:	4613      	mov	r3, r2
 80048a2:	011b      	lsls	r3, r3, #4
 80048a4:	1a9b      	subs	r3, r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	440b      	add	r3, r1
 80048aa:	3326      	adds	r3, #38	@ 0x26
 80048ac:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80048ae:	2b03      	cmp	r3, #3
 80048b0:	f040 8190 	bne.w	8004bd4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	799b      	ldrb	r3, [r3, #6]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d115      	bne.n	80048e8 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80048bc:	78fa      	ldrb	r2, [r7, #3]
 80048be:	6879      	ldr	r1, [r7, #4]
 80048c0:	4613      	mov	r3, r2
 80048c2:	011b      	lsls	r3, r3, #4
 80048c4:	1a9b      	subs	r3, r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	440b      	add	r3, r1
 80048ca:	333d      	adds	r3, #61	@ 0x3d
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	78fa      	ldrb	r2, [r7, #3]
 80048d0:	f083 0301 	eor.w	r3, r3, #1
 80048d4:	b2d8      	uxtb	r0, r3
 80048d6:	6879      	ldr	r1, [r7, #4]
 80048d8:	4613      	mov	r3, r2
 80048da:	011b      	lsls	r3, r3, #4
 80048dc:	1a9b      	subs	r3, r3, r2
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	440b      	add	r3, r1
 80048e2:	333d      	adds	r3, #61	@ 0x3d
 80048e4:	4602      	mov	r2, r0
 80048e6:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	799b      	ldrb	r3, [r3, #6]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	f040 8171 	bne.w	8004bd4 <HCD_HC_OUT_IRQHandler+0x954>
 80048f2:	78fa      	ldrb	r2, [r7, #3]
 80048f4:	6879      	ldr	r1, [r7, #4]
 80048f6:	4613      	mov	r3, r2
 80048f8:	011b      	lsls	r3, r3, #4
 80048fa:	1a9b      	subs	r3, r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	440b      	add	r3, r1
 8004900:	3334      	adds	r3, #52	@ 0x34
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 8165 	beq.w	8004bd4 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800490a:	78fa      	ldrb	r2, [r7, #3]
 800490c:	6879      	ldr	r1, [r7, #4]
 800490e:	4613      	mov	r3, r2
 8004910:	011b      	lsls	r3, r3, #4
 8004912:	1a9b      	subs	r3, r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	440b      	add	r3, r1
 8004918:	3334      	adds	r3, #52	@ 0x34
 800491a:	6819      	ldr	r1, [r3, #0]
 800491c:	78fa      	ldrb	r2, [r7, #3]
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	4613      	mov	r3, r2
 8004922:	011b      	lsls	r3, r3, #4
 8004924:	1a9b      	subs	r3, r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4403      	add	r3, r0
 800492a:	3328      	adds	r3, #40	@ 0x28
 800492c:	881b      	ldrh	r3, [r3, #0]
 800492e:	440b      	add	r3, r1
 8004930:	1e59      	subs	r1, r3, #1
 8004932:	78fa      	ldrb	r2, [r7, #3]
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	4613      	mov	r3, r2
 8004938:	011b      	lsls	r3, r3, #4
 800493a:	1a9b      	subs	r3, r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	4403      	add	r3, r0
 8004940:	3328      	adds	r3, #40	@ 0x28
 8004942:	881b      	ldrh	r3, [r3, #0]
 8004944:	fbb1 f3f3 	udiv	r3, r1, r3
 8004948:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b00      	cmp	r3, #0
 8004952:	f000 813f 	beq.w	8004bd4 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004956:	78fa      	ldrb	r2, [r7, #3]
 8004958:	6879      	ldr	r1, [r7, #4]
 800495a:	4613      	mov	r3, r2
 800495c:	011b      	lsls	r3, r3, #4
 800495e:	1a9b      	subs	r3, r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	440b      	add	r3, r1
 8004964:	333d      	adds	r3, #61	@ 0x3d
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	78fa      	ldrb	r2, [r7, #3]
 800496a:	f083 0301 	eor.w	r3, r3, #1
 800496e:	b2d8      	uxtb	r0, r3
 8004970:	6879      	ldr	r1, [r7, #4]
 8004972:	4613      	mov	r3, r2
 8004974:	011b      	lsls	r3, r3, #4
 8004976:	1a9b      	subs	r3, r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	440b      	add	r3, r1
 800497c:	333d      	adds	r3, #61	@ 0x3d
 800497e:	4602      	mov	r2, r0
 8004980:	701a      	strb	r2, [r3, #0]
 8004982:	e127      	b.n	8004bd4 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004984:	78fa      	ldrb	r2, [r7, #3]
 8004986:	6879      	ldr	r1, [r7, #4]
 8004988:	4613      	mov	r3, r2
 800498a:	011b      	lsls	r3, r3, #4
 800498c:	1a9b      	subs	r3, r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	440b      	add	r3, r1
 8004992:	334d      	adds	r3, #77	@ 0x4d
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	2b03      	cmp	r3, #3
 8004998:	d120      	bne.n	80049dc <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800499a:	78fa      	ldrb	r2, [r7, #3]
 800499c:	6879      	ldr	r1, [r7, #4]
 800499e:	4613      	mov	r3, r2
 80049a0:	011b      	lsls	r3, r3, #4
 80049a2:	1a9b      	subs	r3, r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	440b      	add	r3, r1
 80049a8:	334d      	adds	r3, #77	@ 0x4d
 80049aa:	2202      	movs	r2, #2
 80049ac:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80049ae:	78fa      	ldrb	r2, [r7, #3]
 80049b0:	6879      	ldr	r1, [r7, #4]
 80049b2:	4613      	mov	r3, r2
 80049b4:	011b      	lsls	r3, r3, #4
 80049b6:	1a9b      	subs	r3, r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	440b      	add	r3, r1
 80049bc:	331b      	adds	r3, #27
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	f040 8107 	bne.w	8004bd4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80049c6:	78fa      	ldrb	r2, [r7, #3]
 80049c8:	6879      	ldr	r1, [r7, #4]
 80049ca:	4613      	mov	r3, r2
 80049cc:	011b      	lsls	r3, r3, #4
 80049ce:	1a9b      	subs	r3, r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	440b      	add	r3, r1
 80049d4:	334c      	adds	r3, #76	@ 0x4c
 80049d6:	2202      	movs	r2, #2
 80049d8:	701a      	strb	r2, [r3, #0]
 80049da:	e0fb      	b.n	8004bd4 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80049dc:	78fa      	ldrb	r2, [r7, #3]
 80049de:	6879      	ldr	r1, [r7, #4]
 80049e0:	4613      	mov	r3, r2
 80049e2:	011b      	lsls	r3, r3, #4
 80049e4:	1a9b      	subs	r3, r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	440b      	add	r3, r1
 80049ea:	334d      	adds	r3, #77	@ 0x4d
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	2b04      	cmp	r3, #4
 80049f0:	d13a      	bne.n	8004a68 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80049f2:	78fa      	ldrb	r2, [r7, #3]
 80049f4:	6879      	ldr	r1, [r7, #4]
 80049f6:	4613      	mov	r3, r2
 80049f8:	011b      	lsls	r3, r3, #4
 80049fa:	1a9b      	subs	r3, r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	440b      	add	r3, r1
 8004a00:	334d      	adds	r3, #77	@ 0x4d
 8004a02:	2202      	movs	r2, #2
 8004a04:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004a06:	78fa      	ldrb	r2, [r7, #3]
 8004a08:	6879      	ldr	r1, [r7, #4]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	011b      	lsls	r3, r3, #4
 8004a0e:	1a9b      	subs	r3, r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	440b      	add	r3, r1
 8004a14:	334c      	adds	r3, #76	@ 0x4c
 8004a16:	2202      	movs	r2, #2
 8004a18:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004a1a:	78fa      	ldrb	r2, [r7, #3]
 8004a1c:	6879      	ldr	r1, [r7, #4]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	011b      	lsls	r3, r3, #4
 8004a22:	1a9b      	subs	r3, r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	440b      	add	r3, r1
 8004a28:	331b      	adds	r3, #27
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	f040 80d1 	bne.w	8004bd4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004a32:	78fa      	ldrb	r2, [r7, #3]
 8004a34:	6879      	ldr	r1, [r7, #4]
 8004a36:	4613      	mov	r3, r2
 8004a38:	011b      	lsls	r3, r3, #4
 8004a3a:	1a9b      	subs	r3, r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	440b      	add	r3, r1
 8004a40:	331b      	adds	r3, #27
 8004a42:	2200      	movs	r2, #0
 8004a44:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004a46:	78fb      	ldrb	r3, [r7, #3]
 8004a48:	015a      	lsls	r2, r3, #5
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	78fa      	ldrb	r2, [r7, #3]
 8004a56:	0151      	lsls	r1, r2, #5
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	440a      	add	r2, r1
 8004a5c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004a60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a64:	6053      	str	r3, [r2, #4]
 8004a66:	e0b5      	b.n	8004bd4 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004a68:	78fa      	ldrb	r2, [r7, #3]
 8004a6a:	6879      	ldr	r1, [r7, #4]
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	011b      	lsls	r3, r3, #4
 8004a70:	1a9b      	subs	r3, r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	440b      	add	r3, r1
 8004a76:	334d      	adds	r3, #77	@ 0x4d
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	2b05      	cmp	r3, #5
 8004a7c:	d114      	bne.n	8004aa8 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a7e:	78fa      	ldrb	r2, [r7, #3]
 8004a80:	6879      	ldr	r1, [r7, #4]
 8004a82:	4613      	mov	r3, r2
 8004a84:	011b      	lsls	r3, r3, #4
 8004a86:	1a9b      	subs	r3, r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	440b      	add	r3, r1
 8004a8c:	334d      	adds	r3, #77	@ 0x4d
 8004a8e:	2202      	movs	r2, #2
 8004a90:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004a92:	78fa      	ldrb	r2, [r7, #3]
 8004a94:	6879      	ldr	r1, [r7, #4]
 8004a96:	4613      	mov	r3, r2
 8004a98:	011b      	lsls	r3, r3, #4
 8004a9a:	1a9b      	subs	r3, r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	440b      	add	r3, r1
 8004aa0:	334c      	adds	r3, #76	@ 0x4c
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	701a      	strb	r2, [r3, #0]
 8004aa6:	e095      	b.n	8004bd4 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004aa8:	78fa      	ldrb	r2, [r7, #3]
 8004aaa:	6879      	ldr	r1, [r7, #4]
 8004aac:	4613      	mov	r3, r2
 8004aae:	011b      	lsls	r3, r3, #4
 8004ab0:	1a9b      	subs	r3, r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	440b      	add	r3, r1
 8004ab6:	334d      	adds	r3, #77	@ 0x4d
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	2b06      	cmp	r3, #6
 8004abc:	d114      	bne.n	8004ae8 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004abe:	78fa      	ldrb	r2, [r7, #3]
 8004ac0:	6879      	ldr	r1, [r7, #4]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	011b      	lsls	r3, r3, #4
 8004ac6:	1a9b      	subs	r3, r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	440b      	add	r3, r1
 8004acc:	334d      	adds	r3, #77	@ 0x4d
 8004ace:	2202      	movs	r2, #2
 8004ad0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004ad2:	78fa      	ldrb	r2, [r7, #3]
 8004ad4:	6879      	ldr	r1, [r7, #4]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	011b      	lsls	r3, r3, #4
 8004ada:	1a9b      	subs	r3, r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	440b      	add	r3, r1
 8004ae0:	334c      	adds	r3, #76	@ 0x4c
 8004ae2:	2205      	movs	r2, #5
 8004ae4:	701a      	strb	r2, [r3, #0]
 8004ae6:	e075      	b.n	8004bd4 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004ae8:	78fa      	ldrb	r2, [r7, #3]
 8004aea:	6879      	ldr	r1, [r7, #4]
 8004aec:	4613      	mov	r3, r2
 8004aee:	011b      	lsls	r3, r3, #4
 8004af0:	1a9b      	subs	r3, r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	440b      	add	r3, r1
 8004af6:	334d      	adds	r3, #77	@ 0x4d
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	2b07      	cmp	r3, #7
 8004afc:	d00a      	beq.n	8004b14 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004afe:	78fa      	ldrb	r2, [r7, #3]
 8004b00:	6879      	ldr	r1, [r7, #4]
 8004b02:	4613      	mov	r3, r2
 8004b04:	011b      	lsls	r3, r3, #4
 8004b06:	1a9b      	subs	r3, r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	440b      	add	r3, r1
 8004b0c:	334d      	adds	r3, #77	@ 0x4d
 8004b0e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004b10:	2b09      	cmp	r3, #9
 8004b12:	d170      	bne.n	8004bf6 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004b14:	78fa      	ldrb	r2, [r7, #3]
 8004b16:	6879      	ldr	r1, [r7, #4]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	011b      	lsls	r3, r3, #4
 8004b1c:	1a9b      	subs	r3, r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	440b      	add	r3, r1
 8004b22:	334d      	adds	r3, #77	@ 0x4d
 8004b24:	2202      	movs	r2, #2
 8004b26:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004b28:	78fa      	ldrb	r2, [r7, #3]
 8004b2a:	6879      	ldr	r1, [r7, #4]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	011b      	lsls	r3, r3, #4
 8004b30:	1a9b      	subs	r3, r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	440b      	add	r3, r1
 8004b36:	3344      	adds	r3, #68	@ 0x44
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	1c59      	adds	r1, r3, #1
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	4613      	mov	r3, r2
 8004b40:	011b      	lsls	r3, r3, #4
 8004b42:	1a9b      	subs	r3, r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	4403      	add	r3, r0
 8004b48:	3344      	adds	r3, #68	@ 0x44
 8004b4a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004b4c:	78fa      	ldrb	r2, [r7, #3]
 8004b4e:	6879      	ldr	r1, [r7, #4]
 8004b50:	4613      	mov	r3, r2
 8004b52:	011b      	lsls	r3, r3, #4
 8004b54:	1a9b      	subs	r3, r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	440b      	add	r3, r1
 8004b5a:	3344      	adds	r3, #68	@ 0x44
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d914      	bls.n	8004b8c <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004b62:	78fa      	ldrb	r2, [r7, #3]
 8004b64:	6879      	ldr	r1, [r7, #4]
 8004b66:	4613      	mov	r3, r2
 8004b68:	011b      	lsls	r3, r3, #4
 8004b6a:	1a9b      	subs	r3, r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	440b      	add	r3, r1
 8004b70:	3344      	adds	r3, #68	@ 0x44
 8004b72:	2200      	movs	r2, #0
 8004b74:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004b76:	78fa      	ldrb	r2, [r7, #3]
 8004b78:	6879      	ldr	r1, [r7, #4]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	011b      	lsls	r3, r3, #4
 8004b7e:	1a9b      	subs	r3, r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	440b      	add	r3, r1
 8004b84:	334c      	adds	r3, #76	@ 0x4c
 8004b86:	2204      	movs	r2, #4
 8004b88:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004b8a:	e022      	b.n	8004bd2 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004b8c:	78fa      	ldrb	r2, [r7, #3]
 8004b8e:	6879      	ldr	r1, [r7, #4]
 8004b90:	4613      	mov	r3, r2
 8004b92:	011b      	lsls	r3, r3, #4
 8004b94:	1a9b      	subs	r3, r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	440b      	add	r3, r1
 8004b9a:	334c      	adds	r3, #76	@ 0x4c
 8004b9c:	2202      	movs	r2, #2
 8004b9e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004ba0:	78fb      	ldrb	r3, [r7, #3]
 8004ba2:	015a      	lsls	r2, r3, #5
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004bb6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004bbe:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004bc0:	78fb      	ldrb	r3, [r7, #3]
 8004bc2:	015a      	lsls	r2, r3, #5
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bcc:	461a      	mov	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004bd2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004bd4:	78fa      	ldrb	r2, [r7, #3]
 8004bd6:	6879      	ldr	r1, [r7, #4]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	011b      	lsls	r3, r3, #4
 8004bdc:	1a9b      	subs	r3, r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	440b      	add	r3, r1
 8004be2:	334c      	adds	r3, #76	@ 0x4c
 8004be4:	781a      	ldrb	r2, [r3, #0]
 8004be6:	78fb      	ldrb	r3, [r7, #3]
 8004be8:	4619      	mov	r1, r3
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f006 fc8e 	bl	800b50c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004bf0:	e002      	b.n	8004bf8 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004bf2:	bf00      	nop
 8004bf4:	e000      	b.n	8004bf8 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8004bf6:	bf00      	nop
  }
}
 8004bf8:	3718      	adds	r7, #24
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b08a      	sub	sp, #40	@ 0x28
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	f003 030f 	and.w	r3, r3, #15
 8004c1e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	0c5b      	lsrs	r3, r3, #17
 8004c24:	f003 030f 	and.w	r3, r3, #15
 8004c28:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	091b      	lsrs	r3, r3, #4
 8004c2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c32:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d004      	beq.n	8004c44 <HCD_RXQLVL_IRQHandler+0x46>
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	2b05      	cmp	r3, #5
 8004c3e:	f000 80b6 	beq.w	8004dae <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004c42:	e0b7      	b.n	8004db4 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	f000 80b3 	beq.w	8004db2 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004c4c:	6879      	ldr	r1, [r7, #4]
 8004c4e:	69ba      	ldr	r2, [r7, #24]
 8004c50:	4613      	mov	r3, r2
 8004c52:	011b      	lsls	r3, r3, #4
 8004c54:	1a9b      	subs	r3, r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	440b      	add	r3, r1
 8004c5a:	332c      	adds	r3, #44	@ 0x2c
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f000 80a7 	beq.w	8004db2 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004c64:	6879      	ldr	r1, [r7, #4]
 8004c66:	69ba      	ldr	r2, [r7, #24]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	011b      	lsls	r3, r3, #4
 8004c6c:	1a9b      	subs	r3, r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	440b      	add	r3, r1
 8004c72:	3338      	adds	r3, #56	@ 0x38
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	18d1      	adds	r1, r2, r3
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	69ba      	ldr	r2, [r7, #24]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	011b      	lsls	r3, r3, #4
 8004c82:	1a9b      	subs	r3, r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	4403      	add	r3, r0
 8004c88:	3334      	adds	r3, #52	@ 0x34
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4299      	cmp	r1, r3
 8004c8e:	f200 8083 	bhi.w	8004d98 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6818      	ldr	r0, [r3, #0]
 8004c96:	6879      	ldr	r1, [r7, #4]
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	011b      	lsls	r3, r3, #4
 8004c9e:	1a9b      	subs	r3, r3, r2
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	440b      	add	r3, r1
 8004ca4:	332c      	adds	r3, #44	@ 0x2c
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	b292      	uxth	r2, r2
 8004cac:	4619      	mov	r1, r3
 8004cae:	f003 fac5 	bl	800823c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004cb2:	6879      	ldr	r1, [r7, #4]
 8004cb4:	69ba      	ldr	r2, [r7, #24]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	011b      	lsls	r3, r3, #4
 8004cba:	1a9b      	subs	r3, r3, r2
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	440b      	add	r3, r1
 8004cc0:	332c      	adds	r3, #44	@ 0x2c
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	18d1      	adds	r1, r2, r3
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	69ba      	ldr	r2, [r7, #24]
 8004ccc:	4613      	mov	r3, r2
 8004cce:	011b      	lsls	r3, r3, #4
 8004cd0:	1a9b      	subs	r3, r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4403      	add	r3, r0
 8004cd6:	332c      	adds	r3, #44	@ 0x2c
 8004cd8:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004cda:	6879      	ldr	r1, [r7, #4]
 8004cdc:	69ba      	ldr	r2, [r7, #24]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	011b      	lsls	r3, r3, #4
 8004ce2:	1a9b      	subs	r3, r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	440b      	add	r3, r1
 8004ce8:	3338      	adds	r3, #56	@ 0x38
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	18d1      	adds	r1, r2, r3
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	69ba      	ldr	r2, [r7, #24]
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	011b      	lsls	r3, r3, #4
 8004cf8:	1a9b      	subs	r3, r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4403      	add	r3, r0
 8004cfe:	3338      	adds	r3, #56	@ 0x38
 8004d00:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	015a      	lsls	r2, r3, #5
 8004d06:	6a3b      	ldr	r3, [r7, #32]
 8004d08:	4413      	add	r3, r2
 8004d0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	0cdb      	lsrs	r3, r3, #19
 8004d12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d16:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004d18:	6879      	ldr	r1, [r7, #4]
 8004d1a:	69ba      	ldr	r2, [r7, #24]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	011b      	lsls	r3, r3, #4
 8004d20:	1a9b      	subs	r3, r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	440b      	add	r3, r1
 8004d26:	3328      	adds	r3, #40	@ 0x28
 8004d28:	881b      	ldrh	r3, [r3, #0]
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d13f      	bne.n	8004db2 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d03c      	beq.n	8004db2 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	6a3b      	ldr	r3, [r7, #32]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004d4e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004d56:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	6a3b      	ldr	r3, [r7, #32]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d64:	461a      	mov	r2, r3
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004d6a:	6879      	ldr	r1, [r7, #4]
 8004d6c:	69ba      	ldr	r2, [r7, #24]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	011b      	lsls	r3, r3, #4
 8004d72:	1a9b      	subs	r3, r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	440b      	add	r3, r1
 8004d78:	333c      	adds	r3, #60	@ 0x3c
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	f083 0301 	eor.w	r3, r3, #1
 8004d80:	b2d8      	uxtb	r0, r3
 8004d82:	6879      	ldr	r1, [r7, #4]
 8004d84:	69ba      	ldr	r2, [r7, #24]
 8004d86:	4613      	mov	r3, r2
 8004d88:	011b      	lsls	r3, r3, #4
 8004d8a:	1a9b      	subs	r3, r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	440b      	add	r3, r1
 8004d90:	333c      	adds	r3, #60	@ 0x3c
 8004d92:	4602      	mov	r2, r0
 8004d94:	701a      	strb	r2, [r3, #0]
      break;
 8004d96:	e00c      	b.n	8004db2 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004d98:	6879      	ldr	r1, [r7, #4]
 8004d9a:	69ba      	ldr	r2, [r7, #24]
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	011b      	lsls	r3, r3, #4
 8004da0:	1a9b      	subs	r3, r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	440b      	add	r3, r1
 8004da6:	334c      	adds	r3, #76	@ 0x4c
 8004da8:	2204      	movs	r2, #4
 8004daa:	701a      	strb	r2, [r3, #0]
      break;
 8004dac:	e001      	b.n	8004db2 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004dae:	bf00      	nop
 8004db0:	e000      	b.n	8004db4 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004db2:	bf00      	nop
  }
}
 8004db4:	bf00      	nop
 8004db6:	3728      	adds	r7, #40	@ 0x28
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004de8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d10b      	bne.n	8004e0c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d102      	bne.n	8004e04 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f006 fb68 	bl	800b4d4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	f043 0302 	orr.w	r3, r3, #2
 8004e0a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f003 0308 	and.w	r3, r3, #8
 8004e12:	2b08      	cmp	r3, #8
 8004e14:	d132      	bne.n	8004e7c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	f043 0308 	orr.w	r3, r3, #8
 8004e1c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f003 0304 	and.w	r3, r3, #4
 8004e24:	2b04      	cmp	r3, #4
 8004e26:	d126      	bne.n	8004e76 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	7a5b      	ldrb	r3, [r3, #9]
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d113      	bne.n	8004e58 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004e36:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e3a:	d106      	bne.n	8004e4a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2102      	movs	r1, #2
 8004e42:	4618      	mov	r0, r3
 8004e44:	f003 fb8a 	bl	800855c <USB_InitFSLSPClkSel>
 8004e48:	e011      	b.n	8004e6e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2101      	movs	r1, #1
 8004e50:	4618      	mov	r0, r3
 8004e52:	f003 fb83 	bl	800855c <USB_InitFSLSPClkSel>
 8004e56:	e00a      	b.n	8004e6e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	79db      	ldrb	r3, [r3, #7]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d106      	bne.n	8004e6e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004e66:	461a      	mov	r2, r3
 8004e68:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004e6c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f006 fb5a 	bl	800b528 <HAL_HCD_PortEnabled_Callback>
 8004e74:	e002      	b.n	8004e7c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f006 fb64 	bl	800b544 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f003 0320 	and.w	r3, r3, #32
 8004e82:	2b20      	cmp	r3, #32
 8004e84:	d103      	bne.n	8004e8e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	f043 0320 	orr.w	r3, r3, #32
 8004e8c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004e94:	461a      	mov	r2, r3
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	6013      	str	r3, [r2, #0]
}
 8004e9a:	bf00      	nop
 8004e9c:	3718      	adds	r7, #24
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
	...

08004ea4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e12b      	b.n	800510e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d106      	bne.n	8004ed0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f7fb fe2c 	bl	8000b28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2224      	movs	r2, #36	@ 0x24
 8004ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f022 0201 	bic.w	r2, r2, #1
 8004ee6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ef6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004f08:	f001 fe72 	bl	8006bf0 <HAL_RCC_GetPCLK1Freq>
 8004f0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	4a81      	ldr	r2, [pc, #516]	@ (8005118 <HAL_I2C_Init+0x274>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d807      	bhi.n	8004f28 <HAL_I2C_Init+0x84>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	4a80      	ldr	r2, [pc, #512]	@ (800511c <HAL_I2C_Init+0x278>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	bf94      	ite	ls
 8004f20:	2301      	movls	r3, #1
 8004f22:	2300      	movhi	r3, #0
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	e006      	b.n	8004f36 <HAL_I2C_Init+0x92>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	4a7d      	ldr	r2, [pc, #500]	@ (8005120 <HAL_I2C_Init+0x27c>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	bf94      	ite	ls
 8004f30:	2301      	movls	r3, #1
 8004f32:	2300      	movhi	r3, #0
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d001      	beq.n	8004f3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e0e7      	b.n	800510e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	4a78      	ldr	r2, [pc, #480]	@ (8005124 <HAL_I2C_Init+0x280>)
 8004f42:	fba2 2303 	umull	r2, r3, r2, r3
 8004f46:	0c9b      	lsrs	r3, r3, #18
 8004f48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68ba      	ldr	r2, [r7, #8]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	6a1b      	ldr	r3, [r3, #32]
 8004f64:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	4a6a      	ldr	r2, [pc, #424]	@ (8005118 <HAL_I2C_Init+0x274>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d802      	bhi.n	8004f78 <HAL_I2C_Init+0xd4>
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	3301      	adds	r3, #1
 8004f76:	e009      	b.n	8004f8c <HAL_I2C_Init+0xe8>
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004f7e:	fb02 f303 	mul.w	r3, r2, r3
 8004f82:	4a69      	ldr	r2, [pc, #420]	@ (8005128 <HAL_I2C_Init+0x284>)
 8004f84:	fba2 2303 	umull	r2, r3, r2, r3
 8004f88:	099b      	lsrs	r3, r3, #6
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	6812      	ldr	r2, [r2, #0]
 8004f90:	430b      	orrs	r3, r1
 8004f92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004f9e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	495c      	ldr	r1, [pc, #368]	@ (8005118 <HAL_I2C_Init+0x274>)
 8004fa8:	428b      	cmp	r3, r1
 8004faa:	d819      	bhi.n	8004fe0 <HAL_I2C_Init+0x13c>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	1e59      	subs	r1, r3, #1
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fba:	1c59      	adds	r1, r3, #1
 8004fbc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004fc0:	400b      	ands	r3, r1
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00a      	beq.n	8004fdc <HAL_I2C_Init+0x138>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	1e59      	subs	r1, r3, #1
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	005b      	lsls	r3, r3, #1
 8004fd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fda:	e051      	b.n	8005080 <HAL_I2C_Init+0x1dc>
 8004fdc:	2304      	movs	r3, #4
 8004fde:	e04f      	b.n	8005080 <HAL_I2C_Init+0x1dc>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d111      	bne.n	800500c <HAL_I2C_Init+0x168>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	1e58      	subs	r0, r3, #1
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6859      	ldr	r1, [r3, #4]
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	005b      	lsls	r3, r3, #1
 8004ff4:	440b      	add	r3, r1
 8004ff6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005000:	2b00      	cmp	r3, #0
 8005002:	bf0c      	ite	eq
 8005004:	2301      	moveq	r3, #1
 8005006:	2300      	movne	r3, #0
 8005008:	b2db      	uxtb	r3, r3
 800500a:	e012      	b.n	8005032 <HAL_I2C_Init+0x18e>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	1e58      	subs	r0, r3, #1
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6859      	ldr	r1, [r3, #4]
 8005014:	460b      	mov	r3, r1
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	440b      	add	r3, r1
 800501a:	0099      	lsls	r1, r3, #2
 800501c:	440b      	add	r3, r1
 800501e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005022:	3301      	adds	r3, #1
 8005024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005028:	2b00      	cmp	r3, #0
 800502a:	bf0c      	ite	eq
 800502c:	2301      	moveq	r3, #1
 800502e:	2300      	movne	r3, #0
 8005030:	b2db      	uxtb	r3, r3
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <HAL_I2C_Init+0x196>
 8005036:	2301      	movs	r3, #1
 8005038:	e022      	b.n	8005080 <HAL_I2C_Init+0x1dc>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10e      	bne.n	8005060 <HAL_I2C_Init+0x1bc>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	1e58      	subs	r0, r3, #1
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6859      	ldr	r1, [r3, #4]
 800504a:	460b      	mov	r3, r1
 800504c:	005b      	lsls	r3, r3, #1
 800504e:	440b      	add	r3, r1
 8005050:	fbb0 f3f3 	udiv	r3, r0, r3
 8005054:	3301      	adds	r3, #1
 8005056:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800505a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800505e:	e00f      	b.n	8005080 <HAL_I2C_Init+0x1dc>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	1e58      	subs	r0, r3, #1
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6859      	ldr	r1, [r3, #4]
 8005068:	460b      	mov	r3, r1
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	440b      	add	r3, r1
 800506e:	0099      	lsls	r1, r3, #2
 8005070:	440b      	add	r3, r1
 8005072:	fbb0 f3f3 	udiv	r3, r0, r3
 8005076:	3301      	adds	r3, #1
 8005078:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800507c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005080:	6879      	ldr	r1, [r7, #4]
 8005082:	6809      	ldr	r1, [r1, #0]
 8005084:	4313      	orrs	r3, r2
 8005086:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	69da      	ldr	r2, [r3, #28]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a1b      	ldr	r3, [r3, #32]
 800509a:	431a      	orrs	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	430a      	orrs	r2, r1
 80050a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80050ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	6911      	ldr	r1, [r2, #16]
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	68d2      	ldr	r2, [r2, #12]
 80050ba:	4311      	orrs	r1, r2
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	6812      	ldr	r2, [r2, #0]
 80050c0:	430b      	orrs	r3, r1
 80050c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	695a      	ldr	r2, [r3, #20]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	431a      	orrs	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	430a      	orrs	r2, r1
 80050de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f042 0201 	orr.w	r2, r2, #1
 80050ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2220      	movs	r2, #32
 80050fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	000186a0 	.word	0x000186a0
 800511c:	001e847f 	.word	0x001e847f
 8005120:	003d08ff 	.word	0x003d08ff
 8005124:	431bde83 	.word	0x431bde83
 8005128:	10624dd3 	.word	0x10624dd3

0800512c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b088      	sub	sp, #32
 8005130:	af02      	add	r7, sp, #8
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	607a      	str	r2, [r7, #4]
 8005136:	461a      	mov	r2, r3
 8005138:	460b      	mov	r3, r1
 800513a:	817b      	strh	r3, [r7, #10]
 800513c:	4613      	mov	r3, r2
 800513e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005140:	f7fc fb0c 	bl	800175c <HAL_GetTick>
 8005144:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b20      	cmp	r3, #32
 8005150:	f040 80e0 	bne.w	8005314 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	9300      	str	r3, [sp, #0]
 8005158:	2319      	movs	r3, #25
 800515a:	2201      	movs	r2, #1
 800515c:	4970      	ldr	r1, [pc, #448]	@ (8005320 <HAL_I2C_Master_Transmit+0x1f4>)
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f000 f964 	bl	800542c <I2C_WaitOnFlagUntilTimeout>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d001      	beq.n	800516e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800516a:	2302      	movs	r3, #2
 800516c:	e0d3      	b.n	8005316 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005174:	2b01      	cmp	r3, #1
 8005176:	d101      	bne.n	800517c <HAL_I2C_Master_Transmit+0x50>
 8005178:	2302      	movs	r3, #2
 800517a:	e0cc      	b.n	8005316 <HAL_I2C_Master_Transmit+0x1ea>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	2b01      	cmp	r3, #1
 8005190:	d007      	beq.n	80051a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f042 0201 	orr.w	r2, r2, #1
 80051a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2221      	movs	r2, #33	@ 0x21
 80051b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2210      	movs	r2, #16
 80051be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	893a      	ldrh	r2, [r7, #8]
 80051d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051d8:	b29a      	uxth	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	4a50      	ldr	r2, [pc, #320]	@ (8005324 <HAL_I2C_Master_Transmit+0x1f8>)
 80051e2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80051e4:	8979      	ldrh	r1, [r7, #10]
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	6a3a      	ldr	r2, [r7, #32]
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f000 f89c 	bl	8005328 <I2C_MasterRequestWrite>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d001      	beq.n	80051fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e08d      	b.n	8005316 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051fa:	2300      	movs	r3, #0
 80051fc:	613b      	str	r3, [r7, #16]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	613b      	str	r3, [r7, #16]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	613b      	str	r3, [r7, #16]
 800520e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005210:	e066      	b.n	80052e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	6a39      	ldr	r1, [r7, #32]
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f000 fa22 	bl	8005660 <I2C_WaitOnTXEFlagUntilTimeout>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00d      	beq.n	800523e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005226:	2b04      	cmp	r3, #4
 8005228:	d107      	bne.n	800523a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005238:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e06b      	b.n	8005316 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005242:	781a      	ldrb	r2, [r3, #0]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800524e:	1c5a      	adds	r2, r3, #1
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005258:	b29b      	uxth	r3, r3
 800525a:	3b01      	subs	r3, #1
 800525c:	b29a      	uxth	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005266:	3b01      	subs	r3, #1
 8005268:	b29a      	uxth	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	695b      	ldr	r3, [r3, #20]
 8005274:	f003 0304 	and.w	r3, r3, #4
 8005278:	2b04      	cmp	r3, #4
 800527a:	d11b      	bne.n	80052b4 <HAL_I2C_Master_Transmit+0x188>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005280:	2b00      	cmp	r3, #0
 8005282:	d017      	beq.n	80052b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005288:	781a      	ldrb	r2, [r3, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005294:	1c5a      	adds	r2, r3, #1
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800529e:	b29b      	uxth	r3, r3
 80052a0:	3b01      	subs	r3, #1
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052ac:	3b01      	subs	r3, #1
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	6a39      	ldr	r1, [r7, #32]
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f000 fa19 	bl	80056f0 <I2C_WaitOnBTFFlagUntilTimeout>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00d      	beq.n	80052e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c8:	2b04      	cmp	r3, #4
 80052ca:	d107      	bne.n	80052dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e01a      	b.n	8005316 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d194      	bne.n	8005212 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2220      	movs	r2, #32
 80052fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005310:	2300      	movs	r3, #0
 8005312:	e000      	b.n	8005316 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005314:	2302      	movs	r3, #2
  }
}
 8005316:	4618      	mov	r0, r3
 8005318:	3718      	adds	r7, #24
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	00100002 	.word	0x00100002
 8005324:	ffff0000 	.word	0xffff0000

08005328 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b088      	sub	sp, #32
 800532c:	af02      	add	r7, sp, #8
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	607a      	str	r2, [r7, #4]
 8005332:	603b      	str	r3, [r7, #0]
 8005334:	460b      	mov	r3, r1
 8005336:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800533c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	2b08      	cmp	r3, #8
 8005342:	d006      	beq.n	8005352 <I2C_MasterRequestWrite+0x2a>
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d003      	beq.n	8005352 <I2C_MasterRequestWrite+0x2a>
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005350:	d108      	bne.n	8005364 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005360:	601a      	str	r2, [r3, #0]
 8005362:	e00b      	b.n	800537c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005368:	2b12      	cmp	r3, #18
 800536a:	d107      	bne.n	800537c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800537a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	9300      	str	r3, [sp, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f000 f84f 	bl	800542c <I2C_WaitOnFlagUntilTimeout>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00d      	beq.n	80053b0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800539e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053a2:	d103      	bne.n	80053ac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80053aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e035      	b.n	800541c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053b8:	d108      	bne.n	80053cc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053ba:	897b      	ldrh	r3, [r7, #10]
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	461a      	mov	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80053c8:	611a      	str	r2, [r3, #16]
 80053ca:	e01b      	b.n	8005404 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80053cc:	897b      	ldrh	r3, [r7, #10]
 80053ce:	11db      	asrs	r3, r3, #7
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	f003 0306 	and.w	r3, r3, #6
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	f063 030f 	orn	r3, r3, #15
 80053dc:	b2da      	uxtb	r2, r3
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	490e      	ldr	r1, [pc, #56]	@ (8005424 <I2C_MasterRequestWrite+0xfc>)
 80053ea:	68f8      	ldr	r0, [r7, #12]
 80053ec:	f000 f898 	bl	8005520 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d001      	beq.n	80053fa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e010      	b.n	800541c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80053fa:	897b      	ldrh	r3, [r7, #10]
 80053fc:	b2da      	uxtb	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	4907      	ldr	r1, [pc, #28]	@ (8005428 <I2C_MasterRequestWrite+0x100>)
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f000 f888 	bl	8005520 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d001      	beq.n	800541a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e000      	b.n	800541c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3718      	adds	r7, #24
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	00010008 	.word	0x00010008
 8005428:	00010002 	.word	0x00010002

0800542c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	603b      	str	r3, [r7, #0]
 8005438:	4613      	mov	r3, r2
 800543a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800543c:	e048      	b.n	80054d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005444:	d044      	beq.n	80054d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005446:	f7fc f989 	bl	800175c <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	683a      	ldr	r2, [r7, #0]
 8005452:	429a      	cmp	r2, r3
 8005454:	d302      	bcc.n	800545c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d139      	bne.n	80054d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	0c1b      	lsrs	r3, r3, #16
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b01      	cmp	r3, #1
 8005464:	d10d      	bne.n	8005482 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	695b      	ldr	r3, [r3, #20]
 800546c:	43da      	mvns	r2, r3
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	4013      	ands	r3, r2
 8005472:	b29b      	uxth	r3, r3
 8005474:	2b00      	cmp	r3, #0
 8005476:	bf0c      	ite	eq
 8005478:	2301      	moveq	r3, #1
 800547a:	2300      	movne	r3, #0
 800547c:	b2db      	uxtb	r3, r3
 800547e:	461a      	mov	r2, r3
 8005480:	e00c      	b.n	800549c <I2C_WaitOnFlagUntilTimeout+0x70>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	43da      	mvns	r2, r3
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	4013      	ands	r3, r2
 800548e:	b29b      	uxth	r3, r3
 8005490:	2b00      	cmp	r3, #0
 8005492:	bf0c      	ite	eq
 8005494:	2301      	moveq	r3, #1
 8005496:	2300      	movne	r3, #0
 8005498:	b2db      	uxtb	r3, r3
 800549a:	461a      	mov	r2, r3
 800549c:	79fb      	ldrb	r3, [r7, #7]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d116      	bne.n	80054d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2220      	movs	r2, #32
 80054ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054bc:	f043 0220 	orr.w	r2, r3, #32
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e023      	b.n	8005518 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	0c1b      	lsrs	r3, r3, #16
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d10d      	bne.n	80054f6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	43da      	mvns	r2, r3
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	4013      	ands	r3, r2
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	bf0c      	ite	eq
 80054ec:	2301      	moveq	r3, #1
 80054ee:	2300      	movne	r3, #0
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	461a      	mov	r2, r3
 80054f4:	e00c      	b.n	8005510 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	43da      	mvns	r2, r3
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	4013      	ands	r3, r2
 8005502:	b29b      	uxth	r3, r3
 8005504:	2b00      	cmp	r3, #0
 8005506:	bf0c      	ite	eq
 8005508:	2301      	moveq	r3, #1
 800550a:	2300      	movne	r3, #0
 800550c:	b2db      	uxtb	r3, r3
 800550e:	461a      	mov	r2, r3
 8005510:	79fb      	ldrb	r3, [r7, #7]
 8005512:	429a      	cmp	r2, r3
 8005514:	d093      	beq.n	800543e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3710      	adds	r7, #16
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
 800552c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800552e:	e071      	b.n	8005614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800553a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800553e:	d123      	bne.n	8005588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800554e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005558:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2220      	movs	r2, #32
 8005564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005574:	f043 0204 	orr.w	r2, r3, #4
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e067      	b.n	8005658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800558e:	d041      	beq.n	8005614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005590:	f7fc f8e4 	bl	800175c <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	429a      	cmp	r2, r3
 800559e:	d302      	bcc.n	80055a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d136      	bne.n	8005614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	0c1b      	lsrs	r3, r3, #16
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d10c      	bne.n	80055ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	43da      	mvns	r2, r3
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	4013      	ands	r3, r2
 80055bc:	b29b      	uxth	r3, r3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	bf14      	ite	ne
 80055c2:	2301      	movne	r3, #1
 80055c4:	2300      	moveq	r3, #0
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	e00b      	b.n	80055e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	43da      	mvns	r2, r3
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	4013      	ands	r3, r2
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	2b00      	cmp	r3, #0
 80055da:	bf14      	ite	ne
 80055dc:	2301      	movne	r3, #1
 80055de:	2300      	moveq	r3, #0
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d016      	beq.n	8005614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2220      	movs	r2, #32
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005600:	f043 0220 	orr.w	r2, r3, #32
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e021      	b.n	8005658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	0c1b      	lsrs	r3, r3, #16
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b01      	cmp	r3, #1
 800561c:	d10c      	bne.n	8005638 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	695b      	ldr	r3, [r3, #20]
 8005624:	43da      	mvns	r2, r3
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	4013      	ands	r3, r2
 800562a:	b29b      	uxth	r3, r3
 800562c:	2b00      	cmp	r3, #0
 800562e:	bf14      	ite	ne
 8005630:	2301      	movne	r3, #1
 8005632:	2300      	moveq	r3, #0
 8005634:	b2db      	uxtb	r3, r3
 8005636:	e00b      	b.n	8005650 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	43da      	mvns	r2, r3
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	4013      	ands	r3, r2
 8005644:	b29b      	uxth	r3, r3
 8005646:	2b00      	cmp	r3, #0
 8005648:	bf14      	ite	ne
 800564a:	2301      	movne	r3, #1
 800564c:	2300      	moveq	r3, #0
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b00      	cmp	r3, #0
 8005652:	f47f af6d 	bne.w	8005530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800566c:	e034      	b.n	80056d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800566e:	68f8      	ldr	r0, [r7, #12]
 8005670:	f000 f886 	bl	8005780 <I2C_IsAcknowledgeFailed>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d001      	beq.n	800567e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e034      	b.n	80056e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005684:	d028      	beq.n	80056d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005686:	f7fc f869 	bl	800175c <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	429a      	cmp	r2, r3
 8005694:	d302      	bcc.n	800569c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d11d      	bne.n	80056d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056a6:	2b80      	cmp	r3, #128	@ 0x80
 80056a8:	d016      	beq.n	80056d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2220      	movs	r2, #32
 80056b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c4:	f043 0220 	orr.w	r2, r3, #32
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e007      	b.n	80056e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056e2:	2b80      	cmp	r3, #128	@ 0x80
 80056e4:	d1c3      	bne.n	800566e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3710      	adds	r7, #16
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056fc:	e034      	b.n	8005768 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	f000 f83e 	bl	8005780 <I2C_IsAcknowledgeFailed>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d001      	beq.n	800570e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e034      	b.n	8005778 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005714:	d028      	beq.n	8005768 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005716:	f7fc f821 	bl	800175c <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	429a      	cmp	r2, r3
 8005724:	d302      	bcc.n	800572c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d11d      	bne.n	8005768 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	f003 0304 	and.w	r3, r3, #4
 8005736:	2b04      	cmp	r3, #4
 8005738:	d016      	beq.n	8005768 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2220      	movs	r2, #32
 8005744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005754:	f043 0220 	orr.w	r2, r3, #32
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e007      	b.n	8005778 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	f003 0304 	and.w	r3, r3, #4
 8005772:	2b04      	cmp	r3, #4
 8005774:	d1c3      	bne.n	80056fe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	4618      	mov	r0, r3
 800577a:	3710      	adds	r7, #16
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005792:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005796:	d11b      	bne.n	80057d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80057a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2220      	movs	r2, #32
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057bc:	f043 0204 	orr.w	r2, r3, #4
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e000      	b.n	80057d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	370c      	adds	r7, #12
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
	...

080057e0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b088      	sub	sp, #32
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d101      	bne.n	80057f2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e128      	b.n	8005a44 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d109      	bne.n	8005812 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a90      	ldr	r2, [pc, #576]	@ (8005a4c <HAL_I2S_Init+0x26c>)
 800580a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f7fb fa01 	bl	8000c14 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2202      	movs	r2, #2
 8005816:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	69db      	ldr	r3, [r3, #28]
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	6812      	ldr	r2, [r2, #0]
 8005824:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005828:	f023 030f 	bic.w	r3, r3, #15
 800582c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2202      	movs	r2, #2
 8005834:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	2b02      	cmp	r3, #2
 800583c:	d060      	beq.n	8005900 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d102      	bne.n	800584c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005846:	2310      	movs	r3, #16
 8005848:	617b      	str	r3, [r7, #20]
 800584a:	e001      	b.n	8005850 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800584c:	2320      	movs	r3, #32
 800584e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	2b20      	cmp	r3, #32
 8005856:	d802      	bhi.n	800585e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	005b      	lsls	r3, r3, #1
 800585c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800585e:	2001      	movs	r0, #1
 8005860:	f001 fad0 	bl	8006e04 <HAL_RCCEx_GetPeriphCLKFreq>
 8005864:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800586e:	d125      	bne.n	80058bc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d010      	beq.n	800589a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005882:	4613      	mov	r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	4413      	add	r3, r2
 8005888:	005b      	lsls	r3, r3, #1
 800588a:	461a      	mov	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	fbb2 f3f3 	udiv	r3, r2, r3
 8005894:	3305      	adds	r3, #5
 8005896:	613b      	str	r3, [r7, #16]
 8005898:	e01f      	b.n	80058da <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	00db      	lsls	r3, r3, #3
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80058a4:	4613      	mov	r3, r2
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4413      	add	r3, r2
 80058aa:	005b      	lsls	r3, r3, #1
 80058ac:	461a      	mov	r2, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b6:	3305      	adds	r3, #5
 80058b8:	613b      	str	r3, [r7, #16]
 80058ba:	e00e      	b.n	80058da <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80058c4:	4613      	mov	r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	4413      	add	r3, r2
 80058ca:	005b      	lsls	r3, r3, #1
 80058cc:	461a      	mov	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d6:	3305      	adds	r3, #5
 80058d8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	4a5c      	ldr	r2, [pc, #368]	@ (8005a50 <HAL_I2S_Init+0x270>)
 80058de:	fba2 2303 	umull	r2, r3, r2, r3
 80058e2:	08db      	lsrs	r3, r3, #3
 80058e4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80058ee:	693a      	ldr	r2, [r7, #16]
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	085b      	lsrs	r3, r3, #1
 80058f6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	021b      	lsls	r3, r3, #8
 80058fc:	61bb      	str	r3, [r7, #24]
 80058fe:	e003      	b.n	8005908 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005900:	2302      	movs	r3, #2
 8005902:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005904:	2300      	movs	r3, #0
 8005906:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d902      	bls.n	8005914 <HAL_I2S_Init+0x134>
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	2bff      	cmp	r3, #255	@ 0xff
 8005912:	d907      	bls.n	8005924 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005918:	f043 0210 	orr.w	r2, r3, #16
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e08f      	b.n	8005a44 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	691a      	ldr	r2, [r3, #16]
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	ea42 0103 	orr.w	r1, r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	69fa      	ldr	r2, [r7, #28]
 8005934:	430a      	orrs	r2, r1
 8005936:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	69db      	ldr	r3, [r3, #28]
 800593e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005942:	f023 030f 	bic.w	r3, r3, #15
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	6851      	ldr	r1, [r2, #4]
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	6892      	ldr	r2, [r2, #8]
 800594e:	4311      	orrs	r1, r2
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	68d2      	ldr	r2, [r2, #12]
 8005954:	4311      	orrs	r1, r2
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	6992      	ldr	r2, [r2, #24]
 800595a:	430a      	orrs	r2, r1
 800595c:	431a      	orrs	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005966:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a1b      	ldr	r3, [r3, #32]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d161      	bne.n	8005a34 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a38      	ldr	r2, [pc, #224]	@ (8005a54 <HAL_I2S_Init+0x274>)
 8005974:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a37      	ldr	r2, [pc, #220]	@ (8005a58 <HAL_I2S_Init+0x278>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d101      	bne.n	8005984 <HAL_I2S_Init+0x1a4>
 8005980:	4b36      	ldr	r3, [pc, #216]	@ (8005a5c <HAL_I2S_Init+0x27c>)
 8005982:	e001      	b.n	8005988 <HAL_I2S_Init+0x1a8>
 8005984:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	6812      	ldr	r2, [r2, #0]
 800598e:	4932      	ldr	r1, [pc, #200]	@ (8005a58 <HAL_I2S_Init+0x278>)
 8005990:	428a      	cmp	r2, r1
 8005992:	d101      	bne.n	8005998 <HAL_I2S_Init+0x1b8>
 8005994:	4a31      	ldr	r2, [pc, #196]	@ (8005a5c <HAL_I2S_Init+0x27c>)
 8005996:	e001      	b.n	800599c <HAL_I2S_Init+0x1bc>
 8005998:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800599c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80059a0:	f023 030f 	bic.w	r3, r3, #15
 80059a4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a2b      	ldr	r2, [pc, #172]	@ (8005a58 <HAL_I2S_Init+0x278>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d101      	bne.n	80059b4 <HAL_I2S_Init+0x1d4>
 80059b0:	4b2a      	ldr	r3, [pc, #168]	@ (8005a5c <HAL_I2S_Init+0x27c>)
 80059b2:	e001      	b.n	80059b8 <HAL_I2S_Init+0x1d8>
 80059b4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80059b8:	2202      	movs	r2, #2
 80059ba:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a25      	ldr	r2, [pc, #148]	@ (8005a58 <HAL_I2S_Init+0x278>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d101      	bne.n	80059ca <HAL_I2S_Init+0x1ea>
 80059c6:	4b25      	ldr	r3, [pc, #148]	@ (8005a5c <HAL_I2S_Init+0x27c>)
 80059c8:	e001      	b.n	80059ce <HAL_I2S_Init+0x1ee>
 80059ca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80059ce:	69db      	ldr	r3, [r3, #28]
 80059d0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059da:	d003      	beq.n	80059e4 <HAL_I2S_Init+0x204>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d103      	bne.n	80059ec <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80059e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80059e8:	613b      	str	r3, [r7, #16]
 80059ea:	e001      	b.n	80059f0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80059ec:	2300      	movs	r3, #0
 80059ee:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80059fa:	4313      	orrs	r3, r2
 80059fc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005a04:	4313      	orrs	r3, r2
 8005a06:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	b29a      	uxth	r2, r3
 8005a12:	897b      	ldrh	r3, [r7, #10]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005a1c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a0d      	ldr	r2, [pc, #52]	@ (8005a58 <HAL_I2S_Init+0x278>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d101      	bne.n	8005a2c <HAL_I2S_Init+0x24c>
 8005a28:	4b0c      	ldr	r3, [pc, #48]	@ (8005a5c <HAL_I2S_Init+0x27c>)
 8005a2a:	e001      	b.n	8005a30 <HAL_I2S_Init+0x250>
 8005a2c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a30:	897a      	ldrh	r2, [r7, #10]
 8005a32:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3720      	adds	r7, #32
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	08005d49 	.word	0x08005d49
 8005a50:	cccccccd 	.word	0xcccccccd
 8005a54:	08005e5d 	.word	0x08005e5d
 8005a58:	40003800 	.word	0x40003800
 8005a5c:	40003400 	.word	0x40003400

08005a60 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d002      	beq.n	8005a7a <HAL_I2S_Transmit_DMA+0x1a>
 8005a74:	88fb      	ldrh	r3, [r7, #6]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d101      	bne.n	8005a7e <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e08a      	b.n	8005b94 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d001      	beq.n	8005a8e <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8005a8a:	2302      	movs	r3, #2
 8005a8c:	e082      	b.n	8005b94 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d101      	bne.n	8005a9e <HAL_I2S_Transmit_DMA+0x3e>
 8005a9a:	2302      	movs	r3, #2
 8005a9c:	e07a      	b.n	8005b94 <HAL_I2S_Transmit_DMA+0x134>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2203      	movs	r2, #3
 8005aaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	69db      	ldr	r3, [r3, #28]
 8005ac0:	f003 0307 	and.w	r3, r3, #7
 8005ac4:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	2b03      	cmp	r3, #3
 8005aca:	d002      	beq.n	8005ad2 <HAL_I2S_Transmit_DMA+0x72>
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	2b05      	cmp	r3, #5
 8005ad0:	d10a      	bne.n	8005ae8 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 8005ad2:	88fb      	ldrh	r3, [r7, #6]
 8005ad4:	005b      	lsls	r3, r3, #1
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8005adc:	88fb      	ldrh	r3, [r7, #6]
 8005ade:	005b      	lsls	r3, r3, #1
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005ae6:	e005      	b.n	8005af4 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	88fa      	ldrh	r2, [r7, #6]
 8005aec:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	88fa      	ldrh	r2, [r7, #6]
 8005af2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005af8:	4a28      	ldr	r2, [pc, #160]	@ (8005b9c <HAL_I2S_Transmit_DMA+0x13c>)
 8005afa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b00:	4a27      	ldr	r2, [pc, #156]	@ (8005ba0 <HAL_I2S_Transmit_DMA+0x140>)
 8005b02:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b08:	4a26      	ldr	r2, [pc, #152]	@ (8005ba4 <HAL_I2S_Transmit_DMA+0x144>)
 8005b0a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005b14:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005b1c:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b22:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005b24:	f7fc fc12 	bl	800234c <HAL_DMA_Start_IT>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00f      	beq.n	8005b4e <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b32:	f043 0208 	orr.w	r2, r3, #8
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e022      	b.n	8005b94 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	f003 0302 	and.w	r3, r3, #2
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d107      	bne.n	8005b74 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	685a      	ldr	r2, [r3, #4]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f042 0202 	orr.w	r2, r2, #2
 8005b72:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	69db      	ldr	r3, [r3, #28]
 8005b7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d107      	bne.n	8005b92 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	69da      	ldr	r2, [r3, #28]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005b90:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3718      	adds	r7, #24
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	08005c27 	.word	0x08005c27
 8005ba0:	08005be5 	.word	0x08005be5
 8005ba4:	08005c43 	.word	0x08005c43

08005ba8 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d10e      	bne.n	8005c18 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f022 0202 	bic.w	r2, r2, #2
 8005c08:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f7fb fa65 	bl	80010e8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005c1e:	bf00      	nop
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b084      	sub	sp, #16
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c32:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8005c34:	68f8      	ldr	r0, [r7, #12]
 8005c36:	f7ff ffb7 	bl	8005ba8 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005c3a:	bf00      	nop
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b084      	sub	sp, #16
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c4e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	685a      	ldr	r2, [r3, #4]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f022 0203 	bic.w	r2, r2, #3
 8005c5e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2200      	movs	r2, #0
 8005c64:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c78:	f043 0208 	orr.w	r2, r3, #8
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8005c80:	68f8      	ldr	r0, [r7, #12]
 8005c82:	f7ff ffa5 	bl	8005bd0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005c86:	bf00      	nop
 8005c88:	3710      	adds	r7, #16
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b082      	sub	sp, #8
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c9a:	881a      	ldrh	r2, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca6:	1c9a      	adds	r2, r3, #2
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d10e      	bne.n	8005ce2 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	685a      	ldr	r2, [r3, #4]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005cd2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f7fb fa03 	bl	80010e8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005ce2:	bf00      	nop
 8005ce4:	3708      	adds	r7, #8
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b082      	sub	sp, #8
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68da      	ldr	r2, [r3, #12]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cfc:	b292      	uxth	r2, r2
 8005cfe:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d04:	1c9a      	adds	r2, r3, #2
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	3b01      	subs	r3, #1
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10e      	bne.n	8005d40 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	685a      	ldr	r2, [r3, #4]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005d30:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f7ff ff3e 	bl	8005bbc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005d40:	bf00      	nop
 8005d42:	3708      	adds	r7, #8
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b086      	sub	sp, #24
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	2b04      	cmp	r3, #4
 8005d62:	d13a      	bne.n	8005dda <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	f003 0301 	and.w	r3, r3, #1
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d109      	bne.n	8005d82 <I2S_IRQHandler+0x3a>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d78:	2b40      	cmp	r3, #64	@ 0x40
 8005d7a:	d102      	bne.n	8005d82 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f7ff ffb4 	bl	8005cea <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d88:	2b40      	cmp	r3, #64	@ 0x40
 8005d8a:	d126      	bne.n	8005dda <I2S_IRQHandler+0x92>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	f003 0320 	and.w	r3, r3, #32
 8005d96:	2b20      	cmp	r3, #32
 8005d98:	d11f      	bne.n	8005dda <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	685a      	ldr	r2, [r3, #4]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005da8:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005daa:	2300      	movs	r3, #0
 8005dac:	613b      	str	r3, [r7, #16]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	613b      	str	r3, [r7, #16]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	613b      	str	r3, [r7, #16]
 8005dbe:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dcc:	f043 0202 	orr.w	r2, r3, #2
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f7ff fefb 	bl	8005bd0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	2b03      	cmp	r3, #3
 8005de4:	d136      	bne.n	8005e54 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	f003 0302 	and.w	r3, r3, #2
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d109      	bne.n	8005e04 <I2S_IRQHandler+0xbc>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dfa:	2b80      	cmp	r3, #128	@ 0x80
 8005dfc:	d102      	bne.n	8005e04 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7ff ff45 	bl	8005c8e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	f003 0308 	and.w	r3, r3, #8
 8005e0a:	2b08      	cmp	r3, #8
 8005e0c:	d122      	bne.n	8005e54 <I2S_IRQHandler+0x10c>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	f003 0320 	and.w	r3, r3, #32
 8005e18:	2b20      	cmp	r3, #32
 8005e1a:	d11b      	bne.n	8005e54 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	685a      	ldr	r2, [r3, #4]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005e2a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	60fb      	str	r3, [r7, #12]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	60fb      	str	r3, [r7, #12]
 8005e38:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e46:	f043 0204 	orr.w	r2, r3, #4
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f7ff febe 	bl	8005bd0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005e54:	bf00      	nop
 8005e56:	3718      	adds	r7, #24
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b088      	sub	sp, #32
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a92      	ldr	r2, [pc, #584]	@ (80060bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d101      	bne.n	8005e7a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005e76:	4b92      	ldr	r3, [pc, #584]	@ (80060c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e78:	e001      	b.n	8005e7e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005e7a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a8b      	ldr	r2, [pc, #556]	@ (80060bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d101      	bne.n	8005e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005e94:	4b8a      	ldr	r3, [pc, #552]	@ (80060c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e96:	e001      	b.n	8005e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005e98:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ea8:	d004      	beq.n	8005eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	f040 8099 	bne.w	8005fe6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	f003 0302 	and.w	r3, r3, #2
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d107      	bne.n	8005ece <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d002      	beq.n	8005ece <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 f925 	bl	8006118 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	f003 0301 	and.w	r3, r3, #1
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d107      	bne.n	8005ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d002      	beq.n	8005ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f9c8 	bl	8006278 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eee:	2b40      	cmp	r3, #64	@ 0x40
 8005ef0:	d13a      	bne.n	8005f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	f003 0320 	and.w	r3, r3, #32
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d035      	beq.n	8005f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a6e      	ldr	r2, [pc, #440]	@ (80060bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d101      	bne.n	8005f0a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005f06:	4b6e      	ldr	r3, [pc, #440]	@ (80060c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f08:	e001      	b.n	8005f0e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005f0a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f0e:	685a      	ldr	r2, [r3, #4]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4969      	ldr	r1, [pc, #420]	@ (80060bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f16:	428b      	cmp	r3, r1
 8005f18:	d101      	bne.n	8005f1e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005f1a:	4b69      	ldr	r3, [pc, #420]	@ (80060c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f1c:	e001      	b.n	8005f22 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005f1e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f22:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005f26:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	685a      	ldr	r2, [r3, #4]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005f36:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005f38:	2300      	movs	r3, #0
 8005f3a:	60fb      	str	r3, [r7, #12]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	60fb      	str	r3, [r7, #12]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	60fb      	str	r3, [r7, #12]
 8005f4c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f5a:	f043 0202 	orr.w	r2, r3, #2
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f7ff fe34 	bl	8005bd0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	f003 0308 	and.w	r3, r3, #8
 8005f6e:	2b08      	cmp	r3, #8
 8005f70:	f040 80c3 	bne.w	80060fa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	f003 0320 	and.w	r3, r3, #32
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f000 80bd 	beq.w	80060fa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	685a      	ldr	r2, [r3, #4]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005f8e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a49      	ldr	r2, [pc, #292]	@ (80060bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d101      	bne.n	8005f9e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005f9a:	4b49      	ldr	r3, [pc, #292]	@ (80060c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f9c:	e001      	b.n	8005fa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005f9e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005fa2:	685a      	ldr	r2, [r3, #4]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4944      	ldr	r1, [pc, #272]	@ (80060bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005faa:	428b      	cmp	r3, r1
 8005fac:	d101      	bne.n	8005fb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005fae:	4b44      	ldr	r3, [pc, #272]	@ (80060c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005fb0:	e001      	b.n	8005fb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005fb2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005fb6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005fba:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	60bb      	str	r3, [r7, #8]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	60bb      	str	r3, [r7, #8]
 8005fc8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fd6:	f043 0204 	orr.w	r2, r3, #4
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f7ff fdf6 	bl	8005bd0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005fe4:	e089      	b.n	80060fa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	f003 0302 	and.w	r3, r3, #2
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	d107      	bne.n	8006000 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d002      	beq.n	8006000 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f8be 	bl	800617c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	f003 0301 	and.w	r3, r3, #1
 8006006:	2b01      	cmp	r3, #1
 8006008:	d107      	bne.n	800601a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006010:	2b00      	cmp	r3, #0
 8006012:	d002      	beq.n	800601a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 f8fd 	bl	8006214 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006020:	2b40      	cmp	r3, #64	@ 0x40
 8006022:	d12f      	bne.n	8006084 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	f003 0320 	and.w	r3, r3, #32
 800602a:	2b00      	cmp	r3, #0
 800602c:	d02a      	beq.n	8006084 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	685a      	ldr	r2, [r3, #4]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800603c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a1e      	ldr	r2, [pc, #120]	@ (80060bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d101      	bne.n	800604c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006048:	4b1d      	ldr	r3, [pc, #116]	@ (80060c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800604a:	e001      	b.n	8006050 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800604c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006050:	685a      	ldr	r2, [r3, #4]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4919      	ldr	r1, [pc, #100]	@ (80060bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006058:	428b      	cmp	r3, r1
 800605a:	d101      	bne.n	8006060 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800605c:	4b18      	ldr	r3, [pc, #96]	@ (80060c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800605e:	e001      	b.n	8006064 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006060:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006064:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006068:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006076:	f043 0202 	orr.w	r2, r3, #2
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f7ff fda6 	bl	8005bd0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	f003 0308 	and.w	r3, r3, #8
 800608a:	2b08      	cmp	r3, #8
 800608c:	d136      	bne.n	80060fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	f003 0320 	and.w	r3, r3, #32
 8006094:	2b00      	cmp	r3, #0
 8006096:	d031      	beq.n	80060fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a07      	ldr	r2, [pc, #28]	@ (80060bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d101      	bne.n	80060a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80060a2:	4b07      	ldr	r3, [pc, #28]	@ (80060c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80060a4:	e001      	b.n	80060aa <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80060a6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80060aa:	685a      	ldr	r2, [r3, #4]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4902      	ldr	r1, [pc, #8]	@ (80060bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80060b2:	428b      	cmp	r3, r1
 80060b4:	d106      	bne.n	80060c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80060b6:	4b02      	ldr	r3, [pc, #8]	@ (80060c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80060b8:	e006      	b.n	80060c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80060ba:	bf00      	nop
 80060bc:	40003800 	.word	0x40003800
 80060c0:	40003400 	.word	0x40003400
 80060c4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80060c8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80060cc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	685a      	ldr	r2, [r3, #4]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80060dc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ea:	f043 0204 	orr.w	r2, r3, #4
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f7ff fd6c 	bl	8005bd0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80060f8:	e000      	b.n	80060fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80060fa:	bf00      	nop
}
 80060fc:	bf00      	nop
 80060fe:	3720      	adds	r7, #32
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800610c:	bf00      	nop
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006124:	1c99      	adds	r1, r3, #2
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	6251      	str	r1, [r2, #36]	@ 0x24
 800612a:	881a      	ldrh	r2, [r3, #0]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006136:	b29b      	uxth	r3, r3
 8006138:	3b01      	subs	r3, #1
 800613a:	b29a      	uxth	r2, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006144:	b29b      	uxth	r3, r3
 8006146:	2b00      	cmp	r3, #0
 8006148:	d113      	bne.n	8006172 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	685a      	ldr	r2, [r3, #4]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006158:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800615e:	b29b      	uxth	r3, r3
 8006160:	2b00      	cmp	r3, #0
 8006162:	d106      	bne.n	8006172 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f7ff ffc9 	bl	8006104 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006172:	bf00      	nop
 8006174:	3708      	adds	r7, #8
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
	...

0800617c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b082      	sub	sp, #8
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006188:	1c99      	adds	r1, r3, #2
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	6251      	str	r1, [r2, #36]	@ 0x24
 800618e:	8819      	ldrh	r1, [r3, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a1d      	ldr	r2, [pc, #116]	@ (800620c <I2SEx_TxISR_I2SExt+0x90>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d101      	bne.n	800619e <I2SEx_TxISR_I2SExt+0x22>
 800619a:	4b1d      	ldr	r3, [pc, #116]	@ (8006210 <I2SEx_TxISR_I2SExt+0x94>)
 800619c:	e001      	b.n	80061a2 <I2SEx_TxISR_I2SExt+0x26>
 800619e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80061a2:	460a      	mov	r2, r1
 80061a4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	3b01      	subs	r3, #1
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d121      	bne.n	8006202 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a12      	ldr	r2, [pc, #72]	@ (800620c <I2SEx_TxISR_I2SExt+0x90>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d101      	bne.n	80061cc <I2SEx_TxISR_I2SExt+0x50>
 80061c8:	4b11      	ldr	r3, [pc, #68]	@ (8006210 <I2SEx_TxISR_I2SExt+0x94>)
 80061ca:	e001      	b.n	80061d0 <I2SEx_TxISR_I2SExt+0x54>
 80061cc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80061d0:	685a      	ldr	r2, [r3, #4]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	490d      	ldr	r1, [pc, #52]	@ (800620c <I2SEx_TxISR_I2SExt+0x90>)
 80061d8:	428b      	cmp	r3, r1
 80061da:	d101      	bne.n	80061e0 <I2SEx_TxISR_I2SExt+0x64>
 80061dc:	4b0c      	ldr	r3, [pc, #48]	@ (8006210 <I2SEx_TxISR_I2SExt+0x94>)
 80061de:	e001      	b.n	80061e4 <I2SEx_TxISR_I2SExt+0x68>
 80061e0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80061e4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80061e8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d106      	bne.n	8006202 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f7ff ff81 	bl	8006104 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006202:	bf00      	nop
 8006204:	3708      	adds	r7, #8
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	40003800 	.word	0x40003800
 8006210:	40003400 	.word	0x40003400

08006214 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68d8      	ldr	r0, [r3, #12]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006226:	1c99      	adds	r1, r3, #2
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800622c:	b282      	uxth	r2, r0
 800622e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006234:	b29b      	uxth	r3, r3
 8006236:	3b01      	subs	r3, #1
 8006238:	b29a      	uxth	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006242:	b29b      	uxth	r3, r3
 8006244:	2b00      	cmp	r3, #0
 8006246:	d113      	bne.n	8006270 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	685a      	ldr	r2, [r3, #4]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006256:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800625c:	b29b      	uxth	r3, r3
 800625e:	2b00      	cmp	r3, #0
 8006260:	d106      	bne.n	8006270 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f7ff ff4a 	bl	8006104 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006270:	bf00      	nop
 8006272:	3708      	adds	r7, #8
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a20      	ldr	r2, [pc, #128]	@ (8006308 <I2SEx_RxISR_I2SExt+0x90>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d101      	bne.n	800628e <I2SEx_RxISR_I2SExt+0x16>
 800628a:	4b20      	ldr	r3, [pc, #128]	@ (800630c <I2SEx_RxISR_I2SExt+0x94>)
 800628c:	e001      	b.n	8006292 <I2SEx_RxISR_I2SExt+0x1a>
 800628e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006292:	68d8      	ldr	r0, [r3, #12]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006298:	1c99      	adds	r1, r3, #2
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800629e:	b282      	uxth	r2, r0
 80062a0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	3b01      	subs	r3, #1
 80062aa:	b29a      	uxth	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d121      	bne.n	80062fe <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a12      	ldr	r2, [pc, #72]	@ (8006308 <I2SEx_RxISR_I2SExt+0x90>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d101      	bne.n	80062c8 <I2SEx_RxISR_I2SExt+0x50>
 80062c4:	4b11      	ldr	r3, [pc, #68]	@ (800630c <I2SEx_RxISR_I2SExt+0x94>)
 80062c6:	e001      	b.n	80062cc <I2SEx_RxISR_I2SExt+0x54>
 80062c8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80062cc:	685a      	ldr	r2, [r3, #4]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	490d      	ldr	r1, [pc, #52]	@ (8006308 <I2SEx_RxISR_I2SExt+0x90>)
 80062d4:	428b      	cmp	r3, r1
 80062d6:	d101      	bne.n	80062dc <I2SEx_RxISR_I2SExt+0x64>
 80062d8:	4b0c      	ldr	r3, [pc, #48]	@ (800630c <I2SEx_RxISR_I2SExt+0x94>)
 80062da:	e001      	b.n	80062e0 <I2SEx_RxISR_I2SExt+0x68>
 80062dc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80062e0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80062e4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d106      	bne.n	80062fe <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f7ff ff03 	bl	8006104 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80062fe:	bf00      	nop
 8006300:	3708      	adds	r7, #8
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	40003800 	.word	0x40003800
 800630c:	40003400 	.word	0x40003400

08006310 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b086      	sub	sp, #24
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d101      	bne.n	8006322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e267      	b.n	80067f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 0301 	and.w	r3, r3, #1
 800632a:	2b00      	cmp	r3, #0
 800632c:	d075      	beq.n	800641a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800632e:	4b88      	ldr	r3, [pc, #544]	@ (8006550 <HAL_RCC_OscConfig+0x240>)
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f003 030c 	and.w	r3, r3, #12
 8006336:	2b04      	cmp	r3, #4
 8006338:	d00c      	beq.n	8006354 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800633a:	4b85      	ldr	r3, [pc, #532]	@ (8006550 <HAL_RCC_OscConfig+0x240>)
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006342:	2b08      	cmp	r3, #8
 8006344:	d112      	bne.n	800636c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006346:	4b82      	ldr	r3, [pc, #520]	@ (8006550 <HAL_RCC_OscConfig+0x240>)
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800634e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006352:	d10b      	bne.n	800636c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006354:	4b7e      	ldr	r3, [pc, #504]	@ (8006550 <HAL_RCC_OscConfig+0x240>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d05b      	beq.n	8006418 <HAL_RCC_OscConfig+0x108>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d157      	bne.n	8006418 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e242      	b.n	80067f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006374:	d106      	bne.n	8006384 <HAL_RCC_OscConfig+0x74>
 8006376:	4b76      	ldr	r3, [pc, #472]	@ (8006550 <HAL_RCC_OscConfig+0x240>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a75      	ldr	r2, [pc, #468]	@ (8006550 <HAL_RCC_OscConfig+0x240>)
 800637c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006380:	6013      	str	r3, [r2, #0]
 8006382:	e01d      	b.n	80063c0 <HAL_RCC_OscConfig+0xb0>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800638c:	d10c      	bne.n	80063a8 <HAL_RCC_OscConfig+0x98>
 800638e:	4b70      	ldr	r3, [pc, #448]	@ (8006550 <HAL_RCC_OscConfig+0x240>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a6f      	ldr	r2, [pc, #444]	@ (8006550 <HAL_RCC_OscConfig+0x240>)
 8006394:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006398:	6013      	str	r3, [r2, #0]
 800639a:	4b6d      	ldr	r3, [pc, #436]	@ (8006550 <HAL_RCC_OscConfig+0x240>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a6c      	ldr	r2, [pc, #432]	@ (8006550 <HAL_RCC_OscConfig+0x240>)
 80063a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063a4:	6013      	str	r3, [r2, #0]
 80063a6:	e00b      	b.n	80063c0 <HAL_RCC_OscConfig+0xb0>
 80063a8:	4b69      	ldr	r3, [pc, #420]	@ (8006550 <HAL_RCC_OscConfig+0x240>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a68      	ldr	r2, [pc, #416]	@ (8006550 <HAL_RCC_OscConfig+0x240>)
 80063ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063b2:	6013      	str	r3, [r2, #0]
 80063b4:	4b66      	ldr	r3, [pc, #408]	@ (8006550 <HAL_RCC_OscConfig+0x240>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a65      	ldr	r2, [pc, #404]	@ (8006550 <HAL_RCC_OscConfig+0x240>)
 80063ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80063be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d013      	beq.n	80063f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063c8:	f7fb f9c8 	bl	800175c <HAL_GetTick>
 80063cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063ce:	e008      	b.n	80063e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063d0:	f7fb f9c4 	bl	800175c <HAL_GetTick>
 80063d4:	4602      	mov	r2, r0
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	2b64      	cmp	r3, #100	@ 0x64
 80063dc:	d901      	bls.n	80063e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	e207      	b.n	80067f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063e2:	4b5b      	ldr	r3, [pc, #364]	@ (8006550 <HAL_RCC_OscConfig+0x240>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d0f0      	beq.n	80063d0 <HAL_RCC_OscConfig+0xc0>
 80063ee:	e014      	b.n	800641a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063f0:	f7fb f9b4 	bl	800175c <HAL_GetTick>
 80063f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063f6:	e008      	b.n	800640a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063f8:	f7fb f9b0 	bl	800175c <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	2b64      	cmp	r3, #100	@ 0x64
 8006404:	d901      	bls.n	800640a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	e1f3      	b.n	80067f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800640a:	4b51      	ldr	r3, [pc, #324]	@ (8006550 <HAL_RCC_OscConfig+0x240>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d1f0      	bne.n	80063f8 <HAL_RCC_OscConfig+0xe8>
 8006416:	e000      	b.n	800641a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006418:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0302 	and.w	r3, r3, #2
 8006422:	2b00      	cmp	r3, #0
 8006424:	d063      	beq.n	80064ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006426:	4b4a      	ldr	r3, [pc, #296]	@ (8006550 <HAL_RCC_OscConfig+0x240>)
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f003 030c 	and.w	r3, r3, #12
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00b      	beq.n	800644a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006432:	4b47      	ldr	r3, [pc, #284]	@ (8006550 <HAL_RCC_OscConfig+0x240>)
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800643a:	2b08      	cmp	r3, #8
 800643c:	d11c      	bne.n	8006478 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800643e:	4b44      	ldr	r3, [pc, #272]	@ (8006550 <HAL_RCC_OscConfig+0x240>)
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006446:	2b00      	cmp	r3, #0
 8006448:	d116      	bne.n	8006478 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800644a:	4b41      	ldr	r3, [pc, #260]	@ (8006550 <HAL_RCC_OscConfig+0x240>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 0302 	and.w	r3, r3, #2
 8006452:	2b00      	cmp	r3, #0
 8006454:	d005      	beq.n	8006462 <HAL_RCC_OscConfig+0x152>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	2b01      	cmp	r3, #1
 800645c:	d001      	beq.n	8006462 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e1c7      	b.n	80067f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006462:	4b3b      	ldr	r3, [pc, #236]	@ (8006550 <HAL_RCC_OscConfig+0x240>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	00db      	lsls	r3, r3, #3
 8006470:	4937      	ldr	r1, [pc, #220]	@ (8006550 <HAL_RCC_OscConfig+0x240>)
 8006472:	4313      	orrs	r3, r2
 8006474:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006476:	e03a      	b.n	80064ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d020      	beq.n	80064c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006480:	4b34      	ldr	r3, [pc, #208]	@ (8006554 <HAL_RCC_OscConfig+0x244>)
 8006482:	2201      	movs	r2, #1
 8006484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006486:	f7fb f969 	bl	800175c <HAL_GetTick>
 800648a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800648c:	e008      	b.n	80064a0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800648e:	f7fb f965 	bl	800175c <HAL_GetTick>
 8006492:	4602      	mov	r2, r0
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	1ad3      	subs	r3, r2, r3
 8006498:	2b02      	cmp	r3, #2
 800649a:	d901      	bls.n	80064a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800649c:	2303      	movs	r3, #3
 800649e:	e1a8      	b.n	80067f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064a0:	4b2b      	ldr	r3, [pc, #172]	@ (8006550 <HAL_RCC_OscConfig+0x240>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0302 	and.w	r3, r3, #2
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d0f0      	beq.n	800648e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064ac:	4b28      	ldr	r3, [pc, #160]	@ (8006550 <HAL_RCC_OscConfig+0x240>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	00db      	lsls	r3, r3, #3
 80064ba:	4925      	ldr	r1, [pc, #148]	@ (8006550 <HAL_RCC_OscConfig+0x240>)
 80064bc:	4313      	orrs	r3, r2
 80064be:	600b      	str	r3, [r1, #0]
 80064c0:	e015      	b.n	80064ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064c2:	4b24      	ldr	r3, [pc, #144]	@ (8006554 <HAL_RCC_OscConfig+0x244>)
 80064c4:	2200      	movs	r2, #0
 80064c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064c8:	f7fb f948 	bl	800175c <HAL_GetTick>
 80064cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064ce:	e008      	b.n	80064e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064d0:	f7fb f944 	bl	800175c <HAL_GetTick>
 80064d4:	4602      	mov	r2, r0
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d901      	bls.n	80064e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e187      	b.n	80067f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064e2:	4b1b      	ldr	r3, [pc, #108]	@ (8006550 <HAL_RCC_OscConfig+0x240>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0302 	and.w	r3, r3, #2
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1f0      	bne.n	80064d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 0308 	and.w	r3, r3, #8
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d036      	beq.n	8006568 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d016      	beq.n	8006530 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006502:	4b15      	ldr	r3, [pc, #84]	@ (8006558 <HAL_RCC_OscConfig+0x248>)
 8006504:	2201      	movs	r2, #1
 8006506:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006508:	f7fb f928 	bl	800175c <HAL_GetTick>
 800650c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800650e:	e008      	b.n	8006522 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006510:	f7fb f924 	bl	800175c <HAL_GetTick>
 8006514:	4602      	mov	r2, r0
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	2b02      	cmp	r3, #2
 800651c:	d901      	bls.n	8006522 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800651e:	2303      	movs	r3, #3
 8006520:	e167      	b.n	80067f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006522:	4b0b      	ldr	r3, [pc, #44]	@ (8006550 <HAL_RCC_OscConfig+0x240>)
 8006524:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006526:	f003 0302 	and.w	r3, r3, #2
 800652a:	2b00      	cmp	r3, #0
 800652c:	d0f0      	beq.n	8006510 <HAL_RCC_OscConfig+0x200>
 800652e:	e01b      	b.n	8006568 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006530:	4b09      	ldr	r3, [pc, #36]	@ (8006558 <HAL_RCC_OscConfig+0x248>)
 8006532:	2200      	movs	r2, #0
 8006534:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006536:	f7fb f911 	bl	800175c <HAL_GetTick>
 800653a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800653c:	e00e      	b.n	800655c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800653e:	f7fb f90d 	bl	800175c <HAL_GetTick>
 8006542:	4602      	mov	r2, r0
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	1ad3      	subs	r3, r2, r3
 8006548:	2b02      	cmp	r3, #2
 800654a:	d907      	bls.n	800655c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800654c:	2303      	movs	r3, #3
 800654e:	e150      	b.n	80067f2 <HAL_RCC_OscConfig+0x4e2>
 8006550:	40023800 	.word	0x40023800
 8006554:	42470000 	.word	0x42470000
 8006558:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800655c:	4b88      	ldr	r3, [pc, #544]	@ (8006780 <HAL_RCC_OscConfig+0x470>)
 800655e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006560:	f003 0302 	and.w	r3, r3, #2
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1ea      	bne.n	800653e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0304 	and.w	r3, r3, #4
 8006570:	2b00      	cmp	r3, #0
 8006572:	f000 8097 	beq.w	80066a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006576:	2300      	movs	r3, #0
 8006578:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800657a:	4b81      	ldr	r3, [pc, #516]	@ (8006780 <HAL_RCC_OscConfig+0x470>)
 800657c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800657e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006582:	2b00      	cmp	r3, #0
 8006584:	d10f      	bne.n	80065a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006586:	2300      	movs	r3, #0
 8006588:	60bb      	str	r3, [r7, #8]
 800658a:	4b7d      	ldr	r3, [pc, #500]	@ (8006780 <HAL_RCC_OscConfig+0x470>)
 800658c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800658e:	4a7c      	ldr	r2, [pc, #496]	@ (8006780 <HAL_RCC_OscConfig+0x470>)
 8006590:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006594:	6413      	str	r3, [r2, #64]	@ 0x40
 8006596:	4b7a      	ldr	r3, [pc, #488]	@ (8006780 <HAL_RCC_OscConfig+0x470>)
 8006598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800659a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800659e:	60bb      	str	r3, [r7, #8]
 80065a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065a2:	2301      	movs	r3, #1
 80065a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065a6:	4b77      	ldr	r3, [pc, #476]	@ (8006784 <HAL_RCC_OscConfig+0x474>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d118      	bne.n	80065e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065b2:	4b74      	ldr	r3, [pc, #464]	@ (8006784 <HAL_RCC_OscConfig+0x474>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a73      	ldr	r2, [pc, #460]	@ (8006784 <HAL_RCC_OscConfig+0x474>)
 80065b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065be:	f7fb f8cd 	bl	800175c <HAL_GetTick>
 80065c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065c4:	e008      	b.n	80065d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065c6:	f7fb f8c9 	bl	800175c <HAL_GetTick>
 80065ca:	4602      	mov	r2, r0
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	d901      	bls.n	80065d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e10c      	b.n	80067f2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065d8:	4b6a      	ldr	r3, [pc, #424]	@ (8006784 <HAL_RCC_OscConfig+0x474>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d0f0      	beq.n	80065c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d106      	bne.n	80065fa <HAL_RCC_OscConfig+0x2ea>
 80065ec:	4b64      	ldr	r3, [pc, #400]	@ (8006780 <HAL_RCC_OscConfig+0x470>)
 80065ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065f0:	4a63      	ldr	r2, [pc, #396]	@ (8006780 <HAL_RCC_OscConfig+0x470>)
 80065f2:	f043 0301 	orr.w	r3, r3, #1
 80065f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80065f8:	e01c      	b.n	8006634 <HAL_RCC_OscConfig+0x324>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	2b05      	cmp	r3, #5
 8006600:	d10c      	bne.n	800661c <HAL_RCC_OscConfig+0x30c>
 8006602:	4b5f      	ldr	r3, [pc, #380]	@ (8006780 <HAL_RCC_OscConfig+0x470>)
 8006604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006606:	4a5e      	ldr	r2, [pc, #376]	@ (8006780 <HAL_RCC_OscConfig+0x470>)
 8006608:	f043 0304 	orr.w	r3, r3, #4
 800660c:	6713      	str	r3, [r2, #112]	@ 0x70
 800660e:	4b5c      	ldr	r3, [pc, #368]	@ (8006780 <HAL_RCC_OscConfig+0x470>)
 8006610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006612:	4a5b      	ldr	r2, [pc, #364]	@ (8006780 <HAL_RCC_OscConfig+0x470>)
 8006614:	f043 0301 	orr.w	r3, r3, #1
 8006618:	6713      	str	r3, [r2, #112]	@ 0x70
 800661a:	e00b      	b.n	8006634 <HAL_RCC_OscConfig+0x324>
 800661c:	4b58      	ldr	r3, [pc, #352]	@ (8006780 <HAL_RCC_OscConfig+0x470>)
 800661e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006620:	4a57      	ldr	r2, [pc, #348]	@ (8006780 <HAL_RCC_OscConfig+0x470>)
 8006622:	f023 0301 	bic.w	r3, r3, #1
 8006626:	6713      	str	r3, [r2, #112]	@ 0x70
 8006628:	4b55      	ldr	r3, [pc, #340]	@ (8006780 <HAL_RCC_OscConfig+0x470>)
 800662a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800662c:	4a54      	ldr	r2, [pc, #336]	@ (8006780 <HAL_RCC_OscConfig+0x470>)
 800662e:	f023 0304 	bic.w	r3, r3, #4
 8006632:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d015      	beq.n	8006668 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800663c:	f7fb f88e 	bl	800175c <HAL_GetTick>
 8006640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006642:	e00a      	b.n	800665a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006644:	f7fb f88a 	bl	800175c <HAL_GetTick>
 8006648:	4602      	mov	r2, r0
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006652:	4293      	cmp	r3, r2
 8006654:	d901      	bls.n	800665a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006656:	2303      	movs	r3, #3
 8006658:	e0cb      	b.n	80067f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800665a:	4b49      	ldr	r3, [pc, #292]	@ (8006780 <HAL_RCC_OscConfig+0x470>)
 800665c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800665e:	f003 0302 	and.w	r3, r3, #2
 8006662:	2b00      	cmp	r3, #0
 8006664:	d0ee      	beq.n	8006644 <HAL_RCC_OscConfig+0x334>
 8006666:	e014      	b.n	8006692 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006668:	f7fb f878 	bl	800175c <HAL_GetTick>
 800666c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800666e:	e00a      	b.n	8006686 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006670:	f7fb f874 	bl	800175c <HAL_GetTick>
 8006674:	4602      	mov	r2, r0
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800667e:	4293      	cmp	r3, r2
 8006680:	d901      	bls.n	8006686 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e0b5      	b.n	80067f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006686:	4b3e      	ldr	r3, [pc, #248]	@ (8006780 <HAL_RCC_OscConfig+0x470>)
 8006688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800668a:	f003 0302 	and.w	r3, r3, #2
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1ee      	bne.n	8006670 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006692:	7dfb      	ldrb	r3, [r7, #23]
 8006694:	2b01      	cmp	r3, #1
 8006696:	d105      	bne.n	80066a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006698:	4b39      	ldr	r3, [pc, #228]	@ (8006780 <HAL_RCC_OscConfig+0x470>)
 800669a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800669c:	4a38      	ldr	r2, [pc, #224]	@ (8006780 <HAL_RCC_OscConfig+0x470>)
 800669e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	699b      	ldr	r3, [r3, #24]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f000 80a1 	beq.w	80067f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80066ae:	4b34      	ldr	r3, [pc, #208]	@ (8006780 <HAL_RCC_OscConfig+0x470>)
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	f003 030c 	and.w	r3, r3, #12
 80066b6:	2b08      	cmp	r3, #8
 80066b8:	d05c      	beq.n	8006774 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	2b02      	cmp	r3, #2
 80066c0:	d141      	bne.n	8006746 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066c2:	4b31      	ldr	r3, [pc, #196]	@ (8006788 <HAL_RCC_OscConfig+0x478>)
 80066c4:	2200      	movs	r2, #0
 80066c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066c8:	f7fb f848 	bl	800175c <HAL_GetTick>
 80066cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066ce:	e008      	b.n	80066e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066d0:	f7fb f844 	bl	800175c <HAL_GetTick>
 80066d4:	4602      	mov	r2, r0
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d901      	bls.n	80066e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e087      	b.n	80067f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066e2:	4b27      	ldr	r3, [pc, #156]	@ (8006780 <HAL_RCC_OscConfig+0x470>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d1f0      	bne.n	80066d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	69da      	ldr	r2, [r3, #28]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a1b      	ldr	r3, [r3, #32]
 80066f6:	431a      	orrs	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066fc:	019b      	lsls	r3, r3, #6
 80066fe:	431a      	orrs	r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006704:	085b      	lsrs	r3, r3, #1
 8006706:	3b01      	subs	r3, #1
 8006708:	041b      	lsls	r3, r3, #16
 800670a:	431a      	orrs	r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006710:	061b      	lsls	r3, r3, #24
 8006712:	491b      	ldr	r1, [pc, #108]	@ (8006780 <HAL_RCC_OscConfig+0x470>)
 8006714:	4313      	orrs	r3, r2
 8006716:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006718:	4b1b      	ldr	r3, [pc, #108]	@ (8006788 <HAL_RCC_OscConfig+0x478>)
 800671a:	2201      	movs	r2, #1
 800671c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800671e:	f7fb f81d 	bl	800175c <HAL_GetTick>
 8006722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006724:	e008      	b.n	8006738 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006726:	f7fb f819 	bl	800175c <HAL_GetTick>
 800672a:	4602      	mov	r2, r0
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	2b02      	cmp	r3, #2
 8006732:	d901      	bls.n	8006738 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006734:	2303      	movs	r3, #3
 8006736:	e05c      	b.n	80067f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006738:	4b11      	ldr	r3, [pc, #68]	@ (8006780 <HAL_RCC_OscConfig+0x470>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006740:	2b00      	cmp	r3, #0
 8006742:	d0f0      	beq.n	8006726 <HAL_RCC_OscConfig+0x416>
 8006744:	e054      	b.n	80067f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006746:	4b10      	ldr	r3, [pc, #64]	@ (8006788 <HAL_RCC_OscConfig+0x478>)
 8006748:	2200      	movs	r2, #0
 800674a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800674c:	f7fb f806 	bl	800175c <HAL_GetTick>
 8006750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006752:	e008      	b.n	8006766 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006754:	f7fb f802 	bl	800175c <HAL_GetTick>
 8006758:	4602      	mov	r2, r0
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	2b02      	cmp	r3, #2
 8006760:	d901      	bls.n	8006766 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	e045      	b.n	80067f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006766:	4b06      	ldr	r3, [pc, #24]	@ (8006780 <HAL_RCC_OscConfig+0x470>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d1f0      	bne.n	8006754 <HAL_RCC_OscConfig+0x444>
 8006772:	e03d      	b.n	80067f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d107      	bne.n	800678c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e038      	b.n	80067f2 <HAL_RCC_OscConfig+0x4e2>
 8006780:	40023800 	.word	0x40023800
 8006784:	40007000 	.word	0x40007000
 8006788:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800678c:	4b1b      	ldr	r3, [pc, #108]	@ (80067fc <HAL_RCC_OscConfig+0x4ec>)
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	699b      	ldr	r3, [r3, #24]
 8006796:	2b01      	cmp	r3, #1
 8006798:	d028      	beq.n	80067ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d121      	bne.n	80067ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d11a      	bne.n	80067ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80067bc:	4013      	ands	r3, r2
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80067c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d111      	bne.n	80067ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067d2:	085b      	lsrs	r3, r3, #1
 80067d4:	3b01      	subs	r3, #1
 80067d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067d8:	429a      	cmp	r2, r3
 80067da:	d107      	bne.n	80067ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d001      	beq.n	80067f0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	e000      	b.n	80067f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3718      	adds	r7, #24
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	40023800 	.word	0x40023800

08006800 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d101      	bne.n	8006814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e0cc      	b.n	80069ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006814:	4b68      	ldr	r3, [pc, #416]	@ (80069b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0307 	and.w	r3, r3, #7
 800681c:	683a      	ldr	r2, [r7, #0]
 800681e:	429a      	cmp	r2, r3
 8006820:	d90c      	bls.n	800683c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006822:	4b65      	ldr	r3, [pc, #404]	@ (80069b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006824:	683a      	ldr	r2, [r7, #0]
 8006826:	b2d2      	uxtb	r2, r2
 8006828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800682a:	4b63      	ldr	r3, [pc, #396]	@ (80069b8 <HAL_RCC_ClockConfig+0x1b8>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0307 	and.w	r3, r3, #7
 8006832:	683a      	ldr	r2, [r7, #0]
 8006834:	429a      	cmp	r2, r3
 8006836:	d001      	beq.n	800683c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	e0b8      	b.n	80069ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 0302 	and.w	r3, r3, #2
 8006844:	2b00      	cmp	r3, #0
 8006846:	d020      	beq.n	800688a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 0304 	and.w	r3, r3, #4
 8006850:	2b00      	cmp	r3, #0
 8006852:	d005      	beq.n	8006860 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006854:	4b59      	ldr	r3, [pc, #356]	@ (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	4a58      	ldr	r2, [pc, #352]	@ (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 800685a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800685e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 0308 	and.w	r3, r3, #8
 8006868:	2b00      	cmp	r3, #0
 800686a:	d005      	beq.n	8006878 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800686c:	4b53      	ldr	r3, [pc, #332]	@ (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	4a52      	ldr	r2, [pc, #328]	@ (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 8006872:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006876:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006878:	4b50      	ldr	r3, [pc, #320]	@ (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	494d      	ldr	r1, [pc, #308]	@ (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 8006886:	4313      	orrs	r3, r2
 8006888:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 0301 	and.w	r3, r3, #1
 8006892:	2b00      	cmp	r3, #0
 8006894:	d044      	beq.n	8006920 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	2b01      	cmp	r3, #1
 800689c:	d107      	bne.n	80068ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800689e:	4b47      	ldr	r3, [pc, #284]	@ (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d119      	bne.n	80068de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e07f      	b.n	80069ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d003      	beq.n	80068be <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068ba:	2b03      	cmp	r3, #3
 80068bc:	d107      	bne.n	80068ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068be:	4b3f      	ldr	r3, [pc, #252]	@ (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d109      	bne.n	80068de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e06f      	b.n	80069ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068ce:	4b3b      	ldr	r3, [pc, #236]	@ (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 0302 	and.w	r3, r3, #2
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d101      	bne.n	80068de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e067      	b.n	80069ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80068de:	4b37      	ldr	r3, [pc, #220]	@ (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	f023 0203 	bic.w	r2, r3, #3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	4934      	ldr	r1, [pc, #208]	@ (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 80068ec:	4313      	orrs	r3, r2
 80068ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80068f0:	f7fa ff34 	bl	800175c <HAL_GetTick>
 80068f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068f6:	e00a      	b.n	800690e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068f8:	f7fa ff30 	bl	800175c <HAL_GetTick>
 80068fc:	4602      	mov	r2, r0
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006906:	4293      	cmp	r3, r2
 8006908:	d901      	bls.n	800690e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e04f      	b.n	80069ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800690e:	4b2b      	ldr	r3, [pc, #172]	@ (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	f003 020c 	and.w	r2, r3, #12
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	429a      	cmp	r2, r3
 800691e:	d1eb      	bne.n	80068f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006920:	4b25      	ldr	r3, [pc, #148]	@ (80069b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0307 	and.w	r3, r3, #7
 8006928:	683a      	ldr	r2, [r7, #0]
 800692a:	429a      	cmp	r2, r3
 800692c:	d20c      	bcs.n	8006948 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800692e:	4b22      	ldr	r3, [pc, #136]	@ (80069b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006930:	683a      	ldr	r2, [r7, #0]
 8006932:	b2d2      	uxtb	r2, r2
 8006934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006936:	4b20      	ldr	r3, [pc, #128]	@ (80069b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 0307 	and.w	r3, r3, #7
 800693e:	683a      	ldr	r2, [r7, #0]
 8006940:	429a      	cmp	r2, r3
 8006942:	d001      	beq.n	8006948 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	e032      	b.n	80069ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 0304 	and.w	r3, r3, #4
 8006950:	2b00      	cmp	r3, #0
 8006952:	d008      	beq.n	8006966 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006954:	4b19      	ldr	r3, [pc, #100]	@ (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	4916      	ldr	r1, [pc, #88]	@ (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 8006962:	4313      	orrs	r3, r2
 8006964:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0308 	and.w	r3, r3, #8
 800696e:	2b00      	cmp	r3, #0
 8006970:	d009      	beq.n	8006986 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006972:	4b12      	ldr	r3, [pc, #72]	@ (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	00db      	lsls	r3, r3, #3
 8006980:	490e      	ldr	r1, [pc, #56]	@ (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 8006982:	4313      	orrs	r3, r2
 8006984:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006986:	f000 f821 	bl	80069cc <HAL_RCC_GetSysClockFreq>
 800698a:	4602      	mov	r2, r0
 800698c:	4b0b      	ldr	r3, [pc, #44]	@ (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	091b      	lsrs	r3, r3, #4
 8006992:	f003 030f 	and.w	r3, r3, #15
 8006996:	490a      	ldr	r1, [pc, #40]	@ (80069c0 <HAL_RCC_ClockConfig+0x1c0>)
 8006998:	5ccb      	ldrb	r3, [r1, r3]
 800699a:	fa22 f303 	lsr.w	r3, r2, r3
 800699e:	4a09      	ldr	r2, [pc, #36]	@ (80069c4 <HAL_RCC_ClockConfig+0x1c4>)
 80069a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80069a2:	4b09      	ldr	r3, [pc, #36]	@ (80069c8 <HAL_RCC_ClockConfig+0x1c8>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4618      	mov	r0, r3
 80069a8:	f7fa fe94 	bl	80016d4 <HAL_InitTick>

  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3710      	adds	r7, #16
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	40023c00 	.word	0x40023c00
 80069bc:	40023800 	.word	0x40023800
 80069c0:	0800c084 	.word	0x0800c084
 80069c4:	20000800 	.word	0x20000800
 80069c8:	20000804 	.word	0x20000804

080069cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069d0:	b094      	sub	sp, #80	@ 0x50
 80069d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80069d4:	2300      	movs	r3, #0
 80069d6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80069d8:	2300      	movs	r3, #0
 80069da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80069dc:	2300      	movs	r3, #0
 80069de:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80069e0:	2300      	movs	r3, #0
 80069e2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069e4:	4b79      	ldr	r3, [pc, #484]	@ (8006bcc <HAL_RCC_GetSysClockFreq+0x200>)
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	f003 030c 	and.w	r3, r3, #12
 80069ec:	2b08      	cmp	r3, #8
 80069ee:	d00d      	beq.n	8006a0c <HAL_RCC_GetSysClockFreq+0x40>
 80069f0:	2b08      	cmp	r3, #8
 80069f2:	f200 80e1 	bhi.w	8006bb8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d002      	beq.n	8006a00 <HAL_RCC_GetSysClockFreq+0x34>
 80069fa:	2b04      	cmp	r3, #4
 80069fc:	d003      	beq.n	8006a06 <HAL_RCC_GetSysClockFreq+0x3a>
 80069fe:	e0db      	b.n	8006bb8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a00:	4b73      	ldr	r3, [pc, #460]	@ (8006bd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006a02:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006a04:	e0db      	b.n	8006bbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a06:	4b73      	ldr	r3, [pc, #460]	@ (8006bd4 <HAL_RCC_GetSysClockFreq+0x208>)
 8006a08:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006a0a:	e0d8      	b.n	8006bbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a0c:	4b6f      	ldr	r3, [pc, #444]	@ (8006bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a14:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a16:	4b6d      	ldr	r3, [pc, #436]	@ (8006bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d063      	beq.n	8006aea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a22:	4b6a      	ldr	r3, [pc, #424]	@ (8006bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	099b      	lsrs	r3, r3, #6
 8006a28:	2200      	movs	r2, #0
 8006a2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a2c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a34:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a36:	2300      	movs	r3, #0
 8006a38:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006a3e:	4622      	mov	r2, r4
 8006a40:	462b      	mov	r3, r5
 8006a42:	f04f 0000 	mov.w	r0, #0
 8006a46:	f04f 0100 	mov.w	r1, #0
 8006a4a:	0159      	lsls	r1, r3, #5
 8006a4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a50:	0150      	lsls	r0, r2, #5
 8006a52:	4602      	mov	r2, r0
 8006a54:	460b      	mov	r3, r1
 8006a56:	4621      	mov	r1, r4
 8006a58:	1a51      	subs	r1, r2, r1
 8006a5a:	6139      	str	r1, [r7, #16]
 8006a5c:	4629      	mov	r1, r5
 8006a5e:	eb63 0301 	sbc.w	r3, r3, r1
 8006a62:	617b      	str	r3, [r7, #20]
 8006a64:	f04f 0200 	mov.w	r2, #0
 8006a68:	f04f 0300 	mov.w	r3, #0
 8006a6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a70:	4659      	mov	r1, fp
 8006a72:	018b      	lsls	r3, r1, #6
 8006a74:	4651      	mov	r1, sl
 8006a76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006a7a:	4651      	mov	r1, sl
 8006a7c:	018a      	lsls	r2, r1, #6
 8006a7e:	4651      	mov	r1, sl
 8006a80:	ebb2 0801 	subs.w	r8, r2, r1
 8006a84:	4659      	mov	r1, fp
 8006a86:	eb63 0901 	sbc.w	r9, r3, r1
 8006a8a:	f04f 0200 	mov.w	r2, #0
 8006a8e:	f04f 0300 	mov.w	r3, #0
 8006a92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a9e:	4690      	mov	r8, r2
 8006aa0:	4699      	mov	r9, r3
 8006aa2:	4623      	mov	r3, r4
 8006aa4:	eb18 0303 	adds.w	r3, r8, r3
 8006aa8:	60bb      	str	r3, [r7, #8]
 8006aaa:	462b      	mov	r3, r5
 8006aac:	eb49 0303 	adc.w	r3, r9, r3
 8006ab0:	60fb      	str	r3, [r7, #12]
 8006ab2:	f04f 0200 	mov.w	r2, #0
 8006ab6:	f04f 0300 	mov.w	r3, #0
 8006aba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006abe:	4629      	mov	r1, r5
 8006ac0:	024b      	lsls	r3, r1, #9
 8006ac2:	4621      	mov	r1, r4
 8006ac4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006ac8:	4621      	mov	r1, r4
 8006aca:	024a      	lsls	r2, r1, #9
 8006acc:	4610      	mov	r0, r2
 8006ace:	4619      	mov	r1, r3
 8006ad0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ad6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ad8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006adc:	f7f9 fb74 	bl	80001c8 <__aeabi_uldivmod>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ae8:	e058      	b.n	8006b9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006aea:	4b38      	ldr	r3, [pc, #224]	@ (8006bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	099b      	lsrs	r3, r3, #6
 8006af0:	2200      	movs	r2, #0
 8006af2:	4618      	mov	r0, r3
 8006af4:	4611      	mov	r1, r2
 8006af6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006afa:	623b      	str	r3, [r7, #32]
 8006afc:	2300      	movs	r3, #0
 8006afe:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006b04:	4642      	mov	r2, r8
 8006b06:	464b      	mov	r3, r9
 8006b08:	f04f 0000 	mov.w	r0, #0
 8006b0c:	f04f 0100 	mov.w	r1, #0
 8006b10:	0159      	lsls	r1, r3, #5
 8006b12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b16:	0150      	lsls	r0, r2, #5
 8006b18:	4602      	mov	r2, r0
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	4641      	mov	r1, r8
 8006b1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006b22:	4649      	mov	r1, r9
 8006b24:	eb63 0b01 	sbc.w	fp, r3, r1
 8006b28:	f04f 0200 	mov.w	r2, #0
 8006b2c:	f04f 0300 	mov.w	r3, #0
 8006b30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006b34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006b38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006b3c:	ebb2 040a 	subs.w	r4, r2, sl
 8006b40:	eb63 050b 	sbc.w	r5, r3, fp
 8006b44:	f04f 0200 	mov.w	r2, #0
 8006b48:	f04f 0300 	mov.w	r3, #0
 8006b4c:	00eb      	lsls	r3, r5, #3
 8006b4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b52:	00e2      	lsls	r2, r4, #3
 8006b54:	4614      	mov	r4, r2
 8006b56:	461d      	mov	r5, r3
 8006b58:	4643      	mov	r3, r8
 8006b5a:	18e3      	adds	r3, r4, r3
 8006b5c:	603b      	str	r3, [r7, #0]
 8006b5e:	464b      	mov	r3, r9
 8006b60:	eb45 0303 	adc.w	r3, r5, r3
 8006b64:	607b      	str	r3, [r7, #4]
 8006b66:	f04f 0200 	mov.w	r2, #0
 8006b6a:	f04f 0300 	mov.w	r3, #0
 8006b6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006b72:	4629      	mov	r1, r5
 8006b74:	028b      	lsls	r3, r1, #10
 8006b76:	4621      	mov	r1, r4
 8006b78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006b7c:	4621      	mov	r1, r4
 8006b7e:	028a      	lsls	r2, r1, #10
 8006b80:	4610      	mov	r0, r2
 8006b82:	4619      	mov	r1, r3
 8006b84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b86:	2200      	movs	r2, #0
 8006b88:	61bb      	str	r3, [r7, #24]
 8006b8a:	61fa      	str	r2, [r7, #28]
 8006b8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b90:	f7f9 fb1a 	bl	80001c8 <__aeabi_uldivmod>
 8006b94:	4602      	mov	r2, r0
 8006b96:	460b      	mov	r3, r1
 8006b98:	4613      	mov	r3, r2
 8006b9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8006bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	0c1b      	lsrs	r3, r3, #16
 8006ba2:	f003 0303 	and.w	r3, r3, #3
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	005b      	lsls	r3, r3, #1
 8006baa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006bac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006bae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006bb6:	e002      	b.n	8006bbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006bb8:	4b05      	ldr	r3, [pc, #20]	@ (8006bd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006bba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006bbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006bbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3750      	adds	r7, #80	@ 0x50
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bca:	bf00      	nop
 8006bcc:	40023800 	.word	0x40023800
 8006bd0:	00f42400 	.word	0x00f42400
 8006bd4:	007a1200 	.word	0x007a1200

08006bd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006bdc:	4b03      	ldr	r3, [pc, #12]	@ (8006bec <HAL_RCC_GetHCLKFreq+0x14>)
 8006bde:	681b      	ldr	r3, [r3, #0]
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	20000800 	.word	0x20000800

08006bf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006bf4:	f7ff fff0 	bl	8006bd8 <HAL_RCC_GetHCLKFreq>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	4b05      	ldr	r3, [pc, #20]	@ (8006c10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	0a9b      	lsrs	r3, r3, #10
 8006c00:	f003 0307 	and.w	r3, r3, #7
 8006c04:	4903      	ldr	r1, [pc, #12]	@ (8006c14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c06:	5ccb      	ldrb	r3, [r1, r3]
 8006c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	40023800 	.word	0x40023800
 8006c14:	0800c094 	.word	0x0800c094

08006c18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006c1c:	f7ff ffdc 	bl	8006bd8 <HAL_RCC_GetHCLKFreq>
 8006c20:	4602      	mov	r2, r0
 8006c22:	4b05      	ldr	r3, [pc, #20]	@ (8006c38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	0b5b      	lsrs	r3, r3, #13
 8006c28:	f003 0307 	and.w	r3, r3, #7
 8006c2c:	4903      	ldr	r1, [pc, #12]	@ (8006c3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c2e:	5ccb      	ldrb	r3, [r1, r3]
 8006c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	40023800 	.word	0x40023800
 8006c3c:	0800c094 	.word	0x0800c094

08006c40 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b086      	sub	sp, #24
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 0301 	and.w	r3, r3, #1
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d105      	bne.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d035      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006c68:	4b62      	ldr	r3, [pc, #392]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c6e:	f7fa fd75 	bl	800175c <HAL_GetTick>
 8006c72:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006c74:	e008      	b.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006c76:	f7fa fd71 	bl	800175c <HAL_GetTick>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	1ad3      	subs	r3, r2, r3
 8006c80:	2b02      	cmp	r3, #2
 8006c82:	d901      	bls.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c84:	2303      	movs	r3, #3
 8006c86:	e0b0      	b.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006c88:	4b5b      	ldr	r3, [pc, #364]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d1f0      	bne.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	019a      	lsls	r2, r3, #6
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	071b      	lsls	r3, r3, #28
 8006ca0:	4955      	ldr	r1, [pc, #340]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006ca8:	4b52      	ldr	r3, [pc, #328]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006caa:	2201      	movs	r2, #1
 8006cac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006cae:	f7fa fd55 	bl	800175c <HAL_GetTick>
 8006cb2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006cb4:	e008      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006cb6:	f7fa fd51 	bl	800175c <HAL_GetTick>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d901      	bls.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e090      	b.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006cc8:	4b4b      	ldr	r3, [pc, #300]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d0f0      	beq.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 0302 	and.w	r3, r3, #2
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f000 8083 	beq.w	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	60fb      	str	r3, [r7, #12]
 8006ce6:	4b44      	ldr	r3, [pc, #272]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cea:	4a43      	ldr	r2, [pc, #268]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006cf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8006cf2:	4b41      	ldr	r3, [pc, #260]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cfa:	60fb      	str	r3, [r7, #12]
 8006cfc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006cfe:	4b3f      	ldr	r3, [pc, #252]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a3e      	ldr	r2, [pc, #248]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006d04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d08:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006d0a:	f7fa fd27 	bl	800175c <HAL_GetTick>
 8006d0e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006d10:	e008      	b.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d12:	f7fa fd23 	bl	800175c <HAL_GetTick>
 8006d16:	4602      	mov	r2, r0
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d901      	bls.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006d20:	2303      	movs	r3, #3
 8006d22:	e062      	b.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006d24:	4b35      	ldr	r3, [pc, #212]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d0f0      	beq.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006d30:	4b31      	ldr	r3, [pc, #196]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d38:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d02f      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d48:	693a      	ldr	r2, [r7, #16]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d028      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d4e:	4b2a      	ldr	r3, [pc, #168]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d56:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006d58:	4b29      	ldr	r3, [pc, #164]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006d5e:	4b28      	ldr	r3, [pc, #160]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006d60:	2200      	movs	r2, #0
 8006d62:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006d64:	4a24      	ldr	r2, [pc, #144]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006d6a:	4b23      	ldr	r3, [pc, #140]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d6e:	f003 0301 	and.w	r3, r3, #1
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d114      	bne.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006d76:	f7fa fcf1 	bl	800175c <HAL_GetTick>
 8006d7a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d7c:	e00a      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d7e:	f7fa fced 	bl	800175c <HAL_GetTick>
 8006d82:	4602      	mov	r2, r0
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	1ad3      	subs	r3, r2, r3
 8006d88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d901      	bls.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006d90:	2303      	movs	r3, #3
 8006d92:	e02a      	b.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d94:	4b18      	ldr	r3, [pc, #96]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d98:	f003 0302 	and.w	r3, r3, #2
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d0ee      	beq.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006da8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006dac:	d10d      	bne.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006dae:	4b12      	ldr	r3, [pc, #72]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006dbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dc2:	490d      	ldr	r1, [pc, #52]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	608b      	str	r3, [r1, #8]
 8006dc8:	e005      	b.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006dca:	4b0b      	ldr	r3, [pc, #44]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	4a0a      	ldr	r2, [pc, #40]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006dd0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006dd4:	6093      	str	r3, [r2, #8]
 8006dd6:	4b08      	ldr	r3, [pc, #32]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006dd8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006de2:	4905      	ldr	r1, [pc, #20]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006de4:	4313      	orrs	r3, r2
 8006de6:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3718      	adds	r7, #24
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	42470068 	.word	0x42470068
 8006df8:	40023800 	.word	0x40023800
 8006dfc:	40007000 	.word	0x40007000
 8006e00:	42470e40 	.word	0x42470e40

08006e04 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b087      	sub	sp, #28
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006e10:	2300      	movs	r3, #0
 8006e12:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006e14:	2300      	movs	r3, #0
 8006e16:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d13f      	bne.n	8006ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006e22:	4b24      	ldr	r3, [pc, #144]	@ (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e2a:	60fb      	str	r3, [r7, #12]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d006      	beq.n	8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006e38:	d12f      	bne.n	8006e9a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006e3a:	4b1f      	ldr	r3, [pc, #124]	@ (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006e3c:	617b      	str	r3, [r7, #20]
          break;
 8006e3e:	e02f      	b.n	8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006e40:	4b1c      	ldr	r3, [pc, #112]	@ (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e4c:	d108      	bne.n	8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006e4e:	4b19      	ldr	r3, [pc, #100]	@ (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e56:	4a19      	ldr	r2, [pc, #100]	@ (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e5c:	613b      	str	r3, [r7, #16]
 8006e5e:	e007      	b.n	8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006e60:	4b14      	ldr	r3, [pc, #80]	@ (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e68:	4a15      	ldr	r2, [pc, #84]	@ (8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e6e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006e70:	4b10      	ldr	r3, [pc, #64]	@ (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e76:	099b      	lsrs	r3, r3, #6
 8006e78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	fb02 f303 	mul.w	r3, r2, r3
 8006e82:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006e84:	4b0b      	ldr	r3, [pc, #44]	@ (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006e86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e8a:	0f1b      	lsrs	r3, r3, #28
 8006e8c:	f003 0307 	and.w	r3, r3, #7
 8006e90:	68ba      	ldr	r2, [r7, #8]
 8006e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e96:	617b      	str	r3, [r7, #20]
          break;
 8006e98:	e002      	b.n	8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	617b      	str	r3, [r7, #20]
          break;
 8006e9e:	bf00      	nop
        }
      }
      break;
 8006ea0:	e000      	b.n	8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8006ea2:	bf00      	nop
    }
  }
  return frequency;
 8006ea4:	697b      	ldr	r3, [r7, #20]
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	371c      	adds	r7, #28
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr
 8006eb2:	bf00      	nop
 8006eb4:	40023800 	.word	0x40023800
 8006eb8:	00bb8000 	.word	0x00bb8000
 8006ebc:	007a1200 	.word	0x007a1200
 8006ec0:	00f42400 	.word	0x00f42400

08006ec4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d101      	bne.n	8006ed6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e07b      	b.n	8006fce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d108      	bne.n	8006ef0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ee6:	d009      	beq.n	8006efc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	61da      	str	r2, [r3, #28]
 8006eee:	e005      	b.n	8006efc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d106      	bne.n	8006f1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f7fa f92c 	bl	8001174 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2202      	movs	r2, #2
 8006f20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006f44:	431a      	orrs	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f4e:	431a      	orrs	r2, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	691b      	ldr	r3, [r3, #16]
 8006f54:	f003 0302 	and.w	r3, r3, #2
 8006f58:	431a      	orrs	r2, r3
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	695b      	ldr	r3, [r3, #20]
 8006f5e:	f003 0301 	and.w	r3, r3, #1
 8006f62:	431a      	orrs	r2, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	699b      	ldr	r3, [r3, #24]
 8006f68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f6c:	431a      	orrs	r2, r3
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	69db      	ldr	r3, [r3, #28]
 8006f72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f76:	431a      	orrs	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6a1b      	ldr	r3, [r3, #32]
 8006f7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f80:	ea42 0103 	orr.w	r1, r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f88:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	430a      	orrs	r2, r1
 8006f92:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	699b      	ldr	r3, [r3, #24]
 8006f98:	0c1b      	lsrs	r3, r3, #16
 8006f9a:	f003 0104 	and.w	r1, r3, #4
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fa2:	f003 0210 	and.w	r2, r3, #16
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	430a      	orrs	r2, r1
 8006fac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	69da      	ldr	r2, [r3, #28]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006fbc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3708      	adds	r7, #8
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b082      	sub	sp, #8
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d101      	bne.n	8006fe8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e041      	b.n	800706c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d106      	bne.n	8007002 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f7fa fa1f 	bl	8001440 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2202      	movs	r2, #2
 8007006:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	3304      	adds	r3, #4
 8007012:	4619      	mov	r1, r3
 8007014:	4610      	mov	r0, r2
 8007016:	f000 f95d 	bl	80072d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2201      	movs	r2, #1
 800701e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2201      	movs	r2, #1
 8007026:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2201      	movs	r2, #1
 800702e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2201      	movs	r2, #1
 8007036:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2201      	movs	r2, #1
 800703e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2201      	movs	r2, #1
 8007046:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2201      	movs	r2, #1
 800704e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2201      	movs	r2, #1
 8007056:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2201      	movs	r2, #1
 800705e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2201      	movs	r2, #1
 8007066:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3708      	adds	r7, #8
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007074:	b480      	push	{r7}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007082:	b2db      	uxtb	r3, r3
 8007084:	2b01      	cmp	r3, #1
 8007086:	d001      	beq.n	800708c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	e046      	b.n	800711a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2202      	movs	r2, #2
 8007090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a23      	ldr	r2, [pc, #140]	@ (8007128 <HAL_TIM_Base_Start+0xb4>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d022      	beq.n	80070e4 <HAL_TIM_Base_Start+0x70>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070a6:	d01d      	beq.n	80070e4 <HAL_TIM_Base_Start+0x70>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a1f      	ldr	r2, [pc, #124]	@ (800712c <HAL_TIM_Base_Start+0xb8>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d018      	beq.n	80070e4 <HAL_TIM_Base_Start+0x70>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a1e      	ldr	r2, [pc, #120]	@ (8007130 <HAL_TIM_Base_Start+0xbc>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d013      	beq.n	80070e4 <HAL_TIM_Base_Start+0x70>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a1c      	ldr	r2, [pc, #112]	@ (8007134 <HAL_TIM_Base_Start+0xc0>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d00e      	beq.n	80070e4 <HAL_TIM_Base_Start+0x70>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a1b      	ldr	r2, [pc, #108]	@ (8007138 <HAL_TIM_Base_Start+0xc4>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d009      	beq.n	80070e4 <HAL_TIM_Base_Start+0x70>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a19      	ldr	r2, [pc, #100]	@ (800713c <HAL_TIM_Base_Start+0xc8>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d004      	beq.n	80070e4 <HAL_TIM_Base_Start+0x70>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a18      	ldr	r2, [pc, #96]	@ (8007140 <HAL_TIM_Base_Start+0xcc>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d111      	bne.n	8007108 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	f003 0307 	and.w	r3, r3, #7
 80070ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2b06      	cmp	r3, #6
 80070f4:	d010      	beq.n	8007118 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f042 0201 	orr.w	r2, r2, #1
 8007104:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007106:	e007      	b.n	8007118 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f042 0201 	orr.w	r2, r2, #1
 8007116:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3714      	adds	r7, #20
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop
 8007128:	40010000 	.word	0x40010000
 800712c:	40000400 	.word	0x40000400
 8007130:	40000800 	.word	0x40000800
 8007134:	40000c00 	.word	0x40000c00
 8007138:	40010400 	.word	0x40010400
 800713c:	40014000 	.word	0x40014000
 8007140:	40001800 	.word	0x40001800

08007144 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800714e:	2300      	movs	r3, #0
 8007150:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007158:	2b01      	cmp	r3, #1
 800715a:	d101      	bne.n	8007160 <HAL_TIM_ConfigClockSource+0x1c>
 800715c:	2302      	movs	r3, #2
 800715e:	e0b4      	b.n	80072ca <HAL_TIM_ConfigClockSource+0x186>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2202      	movs	r2, #2
 800716c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800717e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007186:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	68ba      	ldr	r2, [r7, #8]
 800718e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007198:	d03e      	beq.n	8007218 <HAL_TIM_ConfigClockSource+0xd4>
 800719a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800719e:	f200 8087 	bhi.w	80072b0 <HAL_TIM_ConfigClockSource+0x16c>
 80071a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071a6:	f000 8086 	beq.w	80072b6 <HAL_TIM_ConfigClockSource+0x172>
 80071aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071ae:	d87f      	bhi.n	80072b0 <HAL_TIM_ConfigClockSource+0x16c>
 80071b0:	2b70      	cmp	r3, #112	@ 0x70
 80071b2:	d01a      	beq.n	80071ea <HAL_TIM_ConfigClockSource+0xa6>
 80071b4:	2b70      	cmp	r3, #112	@ 0x70
 80071b6:	d87b      	bhi.n	80072b0 <HAL_TIM_ConfigClockSource+0x16c>
 80071b8:	2b60      	cmp	r3, #96	@ 0x60
 80071ba:	d050      	beq.n	800725e <HAL_TIM_ConfigClockSource+0x11a>
 80071bc:	2b60      	cmp	r3, #96	@ 0x60
 80071be:	d877      	bhi.n	80072b0 <HAL_TIM_ConfigClockSource+0x16c>
 80071c0:	2b50      	cmp	r3, #80	@ 0x50
 80071c2:	d03c      	beq.n	800723e <HAL_TIM_ConfigClockSource+0xfa>
 80071c4:	2b50      	cmp	r3, #80	@ 0x50
 80071c6:	d873      	bhi.n	80072b0 <HAL_TIM_ConfigClockSource+0x16c>
 80071c8:	2b40      	cmp	r3, #64	@ 0x40
 80071ca:	d058      	beq.n	800727e <HAL_TIM_ConfigClockSource+0x13a>
 80071cc:	2b40      	cmp	r3, #64	@ 0x40
 80071ce:	d86f      	bhi.n	80072b0 <HAL_TIM_ConfigClockSource+0x16c>
 80071d0:	2b30      	cmp	r3, #48	@ 0x30
 80071d2:	d064      	beq.n	800729e <HAL_TIM_ConfigClockSource+0x15a>
 80071d4:	2b30      	cmp	r3, #48	@ 0x30
 80071d6:	d86b      	bhi.n	80072b0 <HAL_TIM_ConfigClockSource+0x16c>
 80071d8:	2b20      	cmp	r3, #32
 80071da:	d060      	beq.n	800729e <HAL_TIM_ConfigClockSource+0x15a>
 80071dc:	2b20      	cmp	r3, #32
 80071de:	d867      	bhi.n	80072b0 <HAL_TIM_ConfigClockSource+0x16c>
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d05c      	beq.n	800729e <HAL_TIM_ConfigClockSource+0x15a>
 80071e4:	2b10      	cmp	r3, #16
 80071e6:	d05a      	beq.n	800729e <HAL_TIM_ConfigClockSource+0x15a>
 80071e8:	e062      	b.n	80072b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80071fa:	f000 f991 	bl	8007520 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800720c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	68ba      	ldr	r2, [r7, #8]
 8007214:	609a      	str	r2, [r3, #8]
      break;
 8007216:	e04f      	b.n	80072b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007228:	f000 f97a 	bl	8007520 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	689a      	ldr	r2, [r3, #8]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800723a:	609a      	str	r2, [r3, #8]
      break;
 800723c:	e03c      	b.n	80072b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800724a:	461a      	mov	r2, r3
 800724c:	f000 f8ee 	bl	800742c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2150      	movs	r1, #80	@ 0x50
 8007256:	4618      	mov	r0, r3
 8007258:	f000 f947 	bl	80074ea <TIM_ITRx_SetConfig>
      break;
 800725c:	e02c      	b.n	80072b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800726a:	461a      	mov	r2, r3
 800726c:	f000 f90d 	bl	800748a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2160      	movs	r1, #96	@ 0x60
 8007276:	4618      	mov	r0, r3
 8007278:	f000 f937 	bl	80074ea <TIM_ITRx_SetConfig>
      break;
 800727c:	e01c      	b.n	80072b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800728a:	461a      	mov	r2, r3
 800728c:	f000 f8ce 	bl	800742c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2140      	movs	r1, #64	@ 0x40
 8007296:	4618      	mov	r0, r3
 8007298:	f000 f927 	bl	80074ea <TIM_ITRx_SetConfig>
      break;
 800729c:	e00c      	b.n	80072b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4619      	mov	r1, r3
 80072a8:	4610      	mov	r0, r2
 80072aa:	f000 f91e 	bl	80074ea <TIM_ITRx_SetConfig>
      break;
 80072ae:	e003      	b.n	80072b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	73fb      	strb	r3, [r7, #15]
      break;
 80072b4:	e000      	b.n	80072b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80072b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80072c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3710      	adds	r7, #16
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
	...

080072d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b085      	sub	sp, #20
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4a46      	ldr	r2, [pc, #280]	@ (8007400 <TIM_Base_SetConfig+0x12c>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d013      	beq.n	8007314 <TIM_Base_SetConfig+0x40>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072f2:	d00f      	beq.n	8007314 <TIM_Base_SetConfig+0x40>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	4a43      	ldr	r2, [pc, #268]	@ (8007404 <TIM_Base_SetConfig+0x130>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d00b      	beq.n	8007314 <TIM_Base_SetConfig+0x40>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4a42      	ldr	r2, [pc, #264]	@ (8007408 <TIM_Base_SetConfig+0x134>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d007      	beq.n	8007314 <TIM_Base_SetConfig+0x40>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a41      	ldr	r2, [pc, #260]	@ (800740c <TIM_Base_SetConfig+0x138>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d003      	beq.n	8007314 <TIM_Base_SetConfig+0x40>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4a40      	ldr	r2, [pc, #256]	@ (8007410 <TIM_Base_SetConfig+0x13c>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d108      	bne.n	8007326 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800731a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	68fa      	ldr	r2, [r7, #12]
 8007322:	4313      	orrs	r3, r2
 8007324:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4a35      	ldr	r2, [pc, #212]	@ (8007400 <TIM_Base_SetConfig+0x12c>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d02b      	beq.n	8007386 <TIM_Base_SetConfig+0xb2>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007334:	d027      	beq.n	8007386 <TIM_Base_SetConfig+0xb2>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4a32      	ldr	r2, [pc, #200]	@ (8007404 <TIM_Base_SetConfig+0x130>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d023      	beq.n	8007386 <TIM_Base_SetConfig+0xb2>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4a31      	ldr	r2, [pc, #196]	@ (8007408 <TIM_Base_SetConfig+0x134>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d01f      	beq.n	8007386 <TIM_Base_SetConfig+0xb2>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4a30      	ldr	r2, [pc, #192]	@ (800740c <TIM_Base_SetConfig+0x138>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d01b      	beq.n	8007386 <TIM_Base_SetConfig+0xb2>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	4a2f      	ldr	r2, [pc, #188]	@ (8007410 <TIM_Base_SetConfig+0x13c>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d017      	beq.n	8007386 <TIM_Base_SetConfig+0xb2>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	4a2e      	ldr	r2, [pc, #184]	@ (8007414 <TIM_Base_SetConfig+0x140>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d013      	beq.n	8007386 <TIM_Base_SetConfig+0xb2>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4a2d      	ldr	r2, [pc, #180]	@ (8007418 <TIM_Base_SetConfig+0x144>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d00f      	beq.n	8007386 <TIM_Base_SetConfig+0xb2>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a2c      	ldr	r2, [pc, #176]	@ (800741c <TIM_Base_SetConfig+0x148>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d00b      	beq.n	8007386 <TIM_Base_SetConfig+0xb2>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4a2b      	ldr	r2, [pc, #172]	@ (8007420 <TIM_Base_SetConfig+0x14c>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d007      	beq.n	8007386 <TIM_Base_SetConfig+0xb2>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a2a      	ldr	r2, [pc, #168]	@ (8007424 <TIM_Base_SetConfig+0x150>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d003      	beq.n	8007386 <TIM_Base_SetConfig+0xb2>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4a29      	ldr	r2, [pc, #164]	@ (8007428 <TIM_Base_SetConfig+0x154>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d108      	bne.n	8007398 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800738c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	68fa      	ldr	r2, [r7, #12]
 8007394:	4313      	orrs	r3, r2
 8007396:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	695b      	ldr	r3, [r3, #20]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	689a      	ldr	r2, [r3, #8]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	4a10      	ldr	r2, [pc, #64]	@ (8007400 <TIM_Base_SetConfig+0x12c>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d003      	beq.n	80073cc <TIM_Base_SetConfig+0xf8>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4a12      	ldr	r2, [pc, #72]	@ (8007410 <TIM_Base_SetConfig+0x13c>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d103      	bne.n	80073d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	691a      	ldr	r2, [r3, #16]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	f003 0301 	and.w	r3, r3, #1
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d105      	bne.n	80073f2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	f023 0201 	bic.w	r2, r3, #1
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	611a      	str	r2, [r3, #16]
  }
}
 80073f2:	bf00      	nop
 80073f4:	3714      	adds	r7, #20
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	40010000 	.word	0x40010000
 8007404:	40000400 	.word	0x40000400
 8007408:	40000800 	.word	0x40000800
 800740c:	40000c00 	.word	0x40000c00
 8007410:	40010400 	.word	0x40010400
 8007414:	40014000 	.word	0x40014000
 8007418:	40014400 	.word	0x40014400
 800741c:	40014800 	.word	0x40014800
 8007420:	40001800 	.word	0x40001800
 8007424:	40001c00 	.word	0x40001c00
 8007428:	40002000 	.word	0x40002000

0800742c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800742c:	b480      	push	{r7}
 800742e:	b087      	sub	sp, #28
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6a1b      	ldr	r3, [r3, #32]
 800743c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6a1b      	ldr	r3, [r3, #32]
 8007442:	f023 0201 	bic.w	r2, r3, #1
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	699b      	ldr	r3, [r3, #24]
 800744e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007456:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	011b      	lsls	r3, r3, #4
 800745c:	693a      	ldr	r2, [r7, #16]
 800745e:	4313      	orrs	r3, r2
 8007460:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	f023 030a 	bic.w	r3, r3, #10
 8007468:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800746a:	697a      	ldr	r2, [r7, #20]
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	4313      	orrs	r3, r2
 8007470:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	693a      	ldr	r2, [r7, #16]
 8007476:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	697a      	ldr	r2, [r7, #20]
 800747c:	621a      	str	r2, [r3, #32]
}
 800747e:	bf00      	nop
 8007480:	371c      	adds	r7, #28
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr

0800748a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800748a:	b480      	push	{r7}
 800748c:	b087      	sub	sp, #28
 800748e:	af00      	add	r7, sp, #0
 8007490:	60f8      	str	r0, [r7, #12]
 8007492:	60b9      	str	r1, [r7, #8]
 8007494:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	6a1b      	ldr	r3, [r3, #32]
 800749a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	6a1b      	ldr	r3, [r3, #32]
 80074a0:	f023 0210 	bic.w	r2, r3, #16
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	699b      	ldr	r3, [r3, #24]
 80074ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80074b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	031b      	lsls	r3, r3, #12
 80074ba:	693a      	ldr	r2, [r7, #16]
 80074bc:	4313      	orrs	r3, r2
 80074be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80074c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	011b      	lsls	r3, r3, #4
 80074cc:	697a      	ldr	r2, [r7, #20]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	693a      	ldr	r2, [r7, #16]
 80074d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	697a      	ldr	r2, [r7, #20]
 80074dc:	621a      	str	r2, [r3, #32]
}
 80074de:	bf00      	nop
 80074e0:	371c      	adds	r7, #28
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr

080074ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80074ea:	b480      	push	{r7}
 80074ec:	b085      	sub	sp, #20
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
 80074f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007500:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007502:	683a      	ldr	r2, [r7, #0]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	4313      	orrs	r3, r2
 8007508:	f043 0307 	orr.w	r3, r3, #7
 800750c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	68fa      	ldr	r2, [r7, #12]
 8007512:	609a      	str	r2, [r3, #8]
}
 8007514:	bf00      	nop
 8007516:	3714      	adds	r7, #20
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007520:	b480      	push	{r7}
 8007522:	b087      	sub	sp, #28
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]
 800752c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800753a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	021a      	lsls	r2, r3, #8
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	431a      	orrs	r2, r3
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	4313      	orrs	r3, r2
 8007548:	697a      	ldr	r2, [r7, #20]
 800754a:	4313      	orrs	r3, r2
 800754c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	697a      	ldr	r2, [r7, #20]
 8007552:	609a      	str	r2, [r3, #8]
}
 8007554:	bf00      	nop
 8007556:	371c      	adds	r7, #28
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007560:	b480      	push	{r7}
 8007562:	b085      	sub	sp, #20
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007570:	2b01      	cmp	r3, #1
 8007572:	d101      	bne.n	8007578 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007574:	2302      	movs	r3, #2
 8007576:	e05a      	b.n	800762e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2202      	movs	r2, #2
 8007584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800759e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	68fa      	ldr	r2, [r7, #12]
 80075b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a21      	ldr	r2, [pc, #132]	@ (800763c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d022      	beq.n	8007602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075c4:	d01d      	beq.n	8007602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a1d      	ldr	r2, [pc, #116]	@ (8007640 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d018      	beq.n	8007602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a1b      	ldr	r2, [pc, #108]	@ (8007644 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d013      	beq.n	8007602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a1a      	ldr	r2, [pc, #104]	@ (8007648 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d00e      	beq.n	8007602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a18      	ldr	r2, [pc, #96]	@ (800764c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d009      	beq.n	8007602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a17      	ldr	r2, [pc, #92]	@ (8007650 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d004      	beq.n	8007602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a15      	ldr	r2, [pc, #84]	@ (8007654 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d10c      	bne.n	800761c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007608:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	68ba      	ldr	r2, [r7, #8]
 8007610:	4313      	orrs	r3, r2
 8007612:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	68ba      	ldr	r2, [r7, #8]
 800761a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3714      	adds	r7, #20
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop
 800763c:	40010000 	.word	0x40010000
 8007640:	40000400 	.word	0x40000400
 8007644:	40000800 	.word	0x40000800
 8007648:	40000c00 	.word	0x40000c00
 800764c:	40010400 	.word	0x40010400
 8007650:	40014000 	.word	0x40014000
 8007654:	40001800 	.word	0x40001800

08007658 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d101      	bne.n	800766a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e042      	b.n	80076f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007670:	b2db      	uxtb	r3, r3
 8007672:	2b00      	cmp	r3, #0
 8007674:	d106      	bne.n	8007684 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f7f9 ff28 	bl	80014d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2224      	movs	r2, #36	@ 0x24
 8007688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	68da      	ldr	r2, [r3, #12]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800769a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 f9e9 	bl	8007a74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	691a      	ldr	r2, [r3, #16]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80076b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	695a      	ldr	r2, [r3, #20]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80076c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	68da      	ldr	r2, [r3, #12]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80076d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2220      	movs	r2, #32
 80076dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2220      	movs	r2, #32
 80076e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3708      	adds	r7, #8
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b08c      	sub	sp, #48	@ 0x30
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	60f8      	str	r0, [r7, #12]
 8007700:	60b9      	str	r1, [r7, #8]
 8007702:	4613      	mov	r3, r2
 8007704:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800770c:	b2db      	uxtb	r3, r3
 800770e:	2b20      	cmp	r3, #32
 8007710:	d156      	bne.n	80077c0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d002      	beq.n	800771e <HAL_UART_Transmit_DMA+0x26>
 8007718:	88fb      	ldrh	r3, [r7, #6]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d101      	bne.n	8007722 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	e04f      	b.n	80077c2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8007722:	68ba      	ldr	r2, [r7, #8]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	88fa      	ldrh	r2, [r7, #6]
 800772c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	88fa      	ldrh	r2, [r7, #6]
 8007732:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2200      	movs	r2, #0
 8007738:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2221      	movs	r2, #33	@ 0x21
 800773e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007746:	4a21      	ldr	r2, [pc, #132]	@ (80077cc <HAL_UART_Transmit_DMA+0xd4>)
 8007748:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800774e:	4a20      	ldr	r2, [pc, #128]	@ (80077d0 <HAL_UART_Transmit_DMA+0xd8>)
 8007750:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007756:	4a1f      	ldr	r2, [pc, #124]	@ (80077d4 <HAL_UART_Transmit_DMA+0xdc>)
 8007758:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800775e:	2200      	movs	r2, #0
 8007760:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007762:	f107 0308 	add.w	r3, r7, #8
 8007766:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800776c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800776e:	6819      	ldr	r1, [r3, #0]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	3304      	adds	r3, #4
 8007776:	461a      	mov	r2, r3
 8007778:	88fb      	ldrh	r3, [r7, #6]
 800777a:	f7fa fde7 	bl	800234c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007786:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	3314      	adds	r3, #20
 800778e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	e853 3f00 	ldrex	r3, [r3]
 8007796:	617b      	str	r3, [r7, #20]
   return(result);
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800779e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	3314      	adds	r3, #20
 80077a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80077a8:	627a      	str	r2, [r7, #36]	@ 0x24
 80077aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ac:	6a39      	ldr	r1, [r7, #32]
 80077ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077b0:	e841 2300 	strex	r3, r2, [r1]
 80077b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80077b6:	69fb      	ldr	r3, [r7, #28]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1e5      	bne.n	8007788 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80077bc:	2300      	movs	r3, #0
 80077be:	e000      	b.n	80077c2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80077c0:	2302      	movs	r3, #2
  }
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3730      	adds	r7, #48	@ 0x30
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	08007815 	.word	0x08007815
 80077d0:	080078af 	.word	0x080078af
 80077d4:	080078cb 	.word	0x080078cb

080077d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80077e0:	bf00      	nop
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80077f4:	bf00      	nop
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007808:	bf00      	nop
 800780a:	370c      	adds	r7, #12
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b090      	sub	sp, #64	@ 0x40
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007820:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800782c:	2b00      	cmp	r3, #0
 800782e:	d137      	bne.n	80078a0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007830:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007832:	2200      	movs	r2, #0
 8007834:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007836:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	3314      	adds	r3, #20
 800783c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007840:	e853 3f00 	ldrex	r3, [r3]
 8007844:	623b      	str	r3, [r7, #32]
   return(result);
 8007846:	6a3b      	ldr	r3, [r7, #32]
 8007848:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800784c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800784e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	3314      	adds	r3, #20
 8007854:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007856:	633a      	str	r2, [r7, #48]	@ 0x30
 8007858:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800785c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800785e:	e841 2300 	strex	r3, r2, [r1]
 8007862:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007866:	2b00      	cmp	r3, #0
 8007868:	d1e5      	bne.n	8007836 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800786a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	330c      	adds	r3, #12
 8007870:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	e853 3f00 	ldrex	r3, [r3]
 8007878:	60fb      	str	r3, [r7, #12]
   return(result);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007880:	637b      	str	r3, [r7, #52]	@ 0x34
 8007882:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	330c      	adds	r3, #12
 8007888:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800788a:	61fa      	str	r2, [r7, #28]
 800788c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788e:	69b9      	ldr	r1, [r7, #24]
 8007890:	69fa      	ldr	r2, [r7, #28]
 8007892:	e841 2300 	strex	r3, r2, [r1]
 8007896:	617b      	str	r3, [r7, #20]
   return(result);
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1e5      	bne.n	800786a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800789e:	e002      	b.n	80078a6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80078a0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80078a2:	f7ff ff99 	bl	80077d8 <HAL_UART_TxCpltCallback>
}
 80078a6:	bf00      	nop
 80078a8:	3740      	adds	r7, #64	@ 0x40
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b084      	sub	sp, #16
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ba:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80078bc:	68f8      	ldr	r0, [r7, #12]
 80078be:	f7ff ff95 	bl	80077ec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078c2:	bf00      	nop
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}

080078ca <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b084      	sub	sp, #16
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80078d2:	2300      	movs	r3, #0
 80078d4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078da:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	695b      	ldr	r3, [r3, #20]
 80078e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078e6:	2b80      	cmp	r3, #128	@ 0x80
 80078e8:	bf0c      	ite	eq
 80078ea:	2301      	moveq	r3, #1
 80078ec:	2300      	movne	r3, #0
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	2b21      	cmp	r3, #33	@ 0x21
 80078fc:	d108      	bne.n	8007910 <UART_DMAError+0x46>
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d005      	beq.n	8007910 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	2200      	movs	r2, #0
 8007908:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800790a:	68b8      	ldr	r0, [r7, #8]
 800790c:	f000 f827 	bl	800795e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	695b      	ldr	r3, [r3, #20]
 8007916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800791a:	2b40      	cmp	r3, #64	@ 0x40
 800791c:	bf0c      	ite	eq
 800791e:	2301      	moveq	r3, #1
 8007920:	2300      	movne	r3, #0
 8007922:	b2db      	uxtb	r3, r3
 8007924:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800792c:	b2db      	uxtb	r3, r3
 800792e:	2b22      	cmp	r3, #34	@ 0x22
 8007930:	d108      	bne.n	8007944 <UART_DMAError+0x7a>
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d005      	beq.n	8007944 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	2200      	movs	r2, #0
 800793c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800793e:	68b8      	ldr	r0, [r7, #8]
 8007940:	f000 f835 	bl	80079ae <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007948:	f043 0210 	orr.w	r2, r3, #16
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007950:	68b8      	ldr	r0, [r7, #8]
 8007952:	f7ff ff55 	bl	8007800 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007956:	bf00      	nop
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800795e:	b480      	push	{r7}
 8007960:	b089      	sub	sp, #36	@ 0x24
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	330c      	adds	r3, #12
 800796c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	e853 3f00 	ldrex	r3, [r3]
 8007974:	60bb      	str	r3, [r7, #8]
   return(result);
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800797c:	61fb      	str	r3, [r7, #28]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	330c      	adds	r3, #12
 8007984:	69fa      	ldr	r2, [r7, #28]
 8007986:	61ba      	str	r2, [r7, #24]
 8007988:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798a:	6979      	ldr	r1, [r7, #20]
 800798c:	69ba      	ldr	r2, [r7, #24]
 800798e:	e841 2300 	strex	r3, r2, [r1]
 8007992:	613b      	str	r3, [r7, #16]
   return(result);
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d1e5      	bne.n	8007966 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2220      	movs	r2, #32
 800799e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80079a2:	bf00      	nop
 80079a4:	3724      	adds	r7, #36	@ 0x24
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr

080079ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80079ae:	b480      	push	{r7}
 80079b0:	b095      	sub	sp, #84	@ 0x54
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	330c      	adds	r3, #12
 80079bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079c0:	e853 3f00 	ldrex	r3, [r3]
 80079c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80079c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	330c      	adds	r3, #12
 80079d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80079d6:	643a      	str	r2, [r7, #64]	@ 0x40
 80079d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80079dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80079de:	e841 2300 	strex	r3, r2, [r1]
 80079e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80079e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1e5      	bne.n	80079b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	3314      	adds	r3, #20
 80079f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f2:	6a3b      	ldr	r3, [r7, #32]
 80079f4:	e853 3f00 	ldrex	r3, [r3]
 80079f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	f023 0301 	bic.w	r3, r3, #1
 8007a00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	3314      	adds	r3, #20
 8007a08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a12:	e841 2300 	strex	r3, r2, [r1]
 8007a16:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1e5      	bne.n	80079ea <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d119      	bne.n	8007a5a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	330c      	adds	r3, #12
 8007a2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	e853 3f00 	ldrex	r3, [r3]
 8007a34:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	f023 0310 	bic.w	r3, r3, #16
 8007a3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	330c      	adds	r3, #12
 8007a44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a46:	61ba      	str	r2, [r7, #24]
 8007a48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4a:	6979      	ldr	r1, [r7, #20]
 8007a4c:	69ba      	ldr	r2, [r7, #24]
 8007a4e:	e841 2300 	strex	r3, r2, [r1]
 8007a52:	613b      	str	r3, [r7, #16]
   return(result);
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d1e5      	bne.n	8007a26 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2220      	movs	r2, #32
 8007a5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007a68:	bf00      	nop
 8007a6a:	3754      	adds	r7, #84	@ 0x54
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a78:	b0c0      	sub	sp, #256	@ 0x100
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	691b      	ldr	r3, [r3, #16]
 8007a88:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a90:	68d9      	ldr	r1, [r3, #12]
 8007a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	ea40 0301 	orr.w	r3, r0, r1
 8007a9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007aa2:	689a      	ldr	r2, [r3, #8]
 8007aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007aa8:	691b      	ldr	r3, [r3, #16]
 8007aaa:	431a      	orrs	r2, r3
 8007aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ab0:	695b      	ldr	r3, [r3, #20]
 8007ab2:	431a      	orrs	r2, r3
 8007ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ab8:	69db      	ldr	r3, [r3, #28]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007acc:	f021 010c 	bic.w	r1, r1, #12
 8007ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007ada:	430b      	orrs	r3, r1
 8007adc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	695b      	ldr	r3, [r3, #20]
 8007ae6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007aee:	6999      	ldr	r1, [r3, #24]
 8007af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	ea40 0301 	orr.w	r3, r0, r1
 8007afa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	4b8f      	ldr	r3, [pc, #572]	@ (8007d40 <UART_SetConfig+0x2cc>)
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d005      	beq.n	8007b14 <UART_SetConfig+0xa0>
 8007b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	4b8d      	ldr	r3, [pc, #564]	@ (8007d44 <UART_SetConfig+0x2d0>)
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d104      	bne.n	8007b1e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b14:	f7ff f880 	bl	8006c18 <HAL_RCC_GetPCLK2Freq>
 8007b18:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007b1c:	e003      	b.n	8007b26 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007b1e:	f7ff f867 	bl	8006bf0 <HAL_RCC_GetPCLK1Freq>
 8007b22:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b2a:	69db      	ldr	r3, [r3, #28]
 8007b2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b30:	f040 810c 	bne.w	8007d4c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007b34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007b3e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007b42:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007b46:	4622      	mov	r2, r4
 8007b48:	462b      	mov	r3, r5
 8007b4a:	1891      	adds	r1, r2, r2
 8007b4c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007b4e:	415b      	adcs	r3, r3
 8007b50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b52:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007b56:	4621      	mov	r1, r4
 8007b58:	eb12 0801 	adds.w	r8, r2, r1
 8007b5c:	4629      	mov	r1, r5
 8007b5e:	eb43 0901 	adc.w	r9, r3, r1
 8007b62:	f04f 0200 	mov.w	r2, #0
 8007b66:	f04f 0300 	mov.w	r3, #0
 8007b6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007b72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b76:	4690      	mov	r8, r2
 8007b78:	4699      	mov	r9, r3
 8007b7a:	4623      	mov	r3, r4
 8007b7c:	eb18 0303 	adds.w	r3, r8, r3
 8007b80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007b84:	462b      	mov	r3, r5
 8007b86:	eb49 0303 	adc.w	r3, r9, r3
 8007b8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007b9a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007b9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007ba2:	460b      	mov	r3, r1
 8007ba4:	18db      	adds	r3, r3, r3
 8007ba6:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ba8:	4613      	mov	r3, r2
 8007baa:	eb42 0303 	adc.w	r3, r2, r3
 8007bae:	657b      	str	r3, [r7, #84]	@ 0x54
 8007bb0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007bb4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007bb8:	f7f8 fb06 	bl	80001c8 <__aeabi_uldivmod>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	460b      	mov	r3, r1
 8007bc0:	4b61      	ldr	r3, [pc, #388]	@ (8007d48 <UART_SetConfig+0x2d4>)
 8007bc2:	fba3 2302 	umull	r2, r3, r3, r2
 8007bc6:	095b      	lsrs	r3, r3, #5
 8007bc8:	011c      	lsls	r4, r3, #4
 8007bca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007bd4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007bd8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007bdc:	4642      	mov	r2, r8
 8007bde:	464b      	mov	r3, r9
 8007be0:	1891      	adds	r1, r2, r2
 8007be2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007be4:	415b      	adcs	r3, r3
 8007be6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007be8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007bec:	4641      	mov	r1, r8
 8007bee:	eb12 0a01 	adds.w	sl, r2, r1
 8007bf2:	4649      	mov	r1, r9
 8007bf4:	eb43 0b01 	adc.w	fp, r3, r1
 8007bf8:	f04f 0200 	mov.w	r2, #0
 8007bfc:	f04f 0300 	mov.w	r3, #0
 8007c00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007c04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007c08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c0c:	4692      	mov	sl, r2
 8007c0e:	469b      	mov	fp, r3
 8007c10:	4643      	mov	r3, r8
 8007c12:	eb1a 0303 	adds.w	r3, sl, r3
 8007c16:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007c1a:	464b      	mov	r3, r9
 8007c1c:	eb4b 0303 	adc.w	r3, fp, r3
 8007c20:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007c30:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007c34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007c38:	460b      	mov	r3, r1
 8007c3a:	18db      	adds	r3, r3, r3
 8007c3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c3e:	4613      	mov	r3, r2
 8007c40:	eb42 0303 	adc.w	r3, r2, r3
 8007c44:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007c4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007c4e:	f7f8 fabb 	bl	80001c8 <__aeabi_uldivmod>
 8007c52:	4602      	mov	r2, r0
 8007c54:	460b      	mov	r3, r1
 8007c56:	4611      	mov	r1, r2
 8007c58:	4b3b      	ldr	r3, [pc, #236]	@ (8007d48 <UART_SetConfig+0x2d4>)
 8007c5a:	fba3 2301 	umull	r2, r3, r3, r1
 8007c5e:	095b      	lsrs	r3, r3, #5
 8007c60:	2264      	movs	r2, #100	@ 0x64
 8007c62:	fb02 f303 	mul.w	r3, r2, r3
 8007c66:	1acb      	subs	r3, r1, r3
 8007c68:	00db      	lsls	r3, r3, #3
 8007c6a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007c6e:	4b36      	ldr	r3, [pc, #216]	@ (8007d48 <UART_SetConfig+0x2d4>)
 8007c70:	fba3 2302 	umull	r2, r3, r3, r2
 8007c74:	095b      	lsrs	r3, r3, #5
 8007c76:	005b      	lsls	r3, r3, #1
 8007c78:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007c7c:	441c      	add	r4, r3
 8007c7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c82:	2200      	movs	r2, #0
 8007c84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007c88:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007c8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007c90:	4642      	mov	r2, r8
 8007c92:	464b      	mov	r3, r9
 8007c94:	1891      	adds	r1, r2, r2
 8007c96:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007c98:	415b      	adcs	r3, r3
 8007c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007ca0:	4641      	mov	r1, r8
 8007ca2:	1851      	adds	r1, r2, r1
 8007ca4:	6339      	str	r1, [r7, #48]	@ 0x30
 8007ca6:	4649      	mov	r1, r9
 8007ca8:	414b      	adcs	r3, r1
 8007caa:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cac:	f04f 0200 	mov.w	r2, #0
 8007cb0:	f04f 0300 	mov.w	r3, #0
 8007cb4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007cb8:	4659      	mov	r1, fp
 8007cba:	00cb      	lsls	r3, r1, #3
 8007cbc:	4651      	mov	r1, sl
 8007cbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007cc2:	4651      	mov	r1, sl
 8007cc4:	00ca      	lsls	r2, r1, #3
 8007cc6:	4610      	mov	r0, r2
 8007cc8:	4619      	mov	r1, r3
 8007cca:	4603      	mov	r3, r0
 8007ccc:	4642      	mov	r2, r8
 8007cce:	189b      	adds	r3, r3, r2
 8007cd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007cd4:	464b      	mov	r3, r9
 8007cd6:	460a      	mov	r2, r1
 8007cd8:	eb42 0303 	adc.w	r3, r2, r3
 8007cdc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007cec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007cf0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	18db      	adds	r3, r3, r3
 8007cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007cfa:	4613      	mov	r3, r2
 8007cfc:	eb42 0303 	adc.w	r3, r2, r3
 8007d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007d06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007d0a:	f7f8 fa5d 	bl	80001c8 <__aeabi_uldivmod>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	460b      	mov	r3, r1
 8007d12:	4b0d      	ldr	r3, [pc, #52]	@ (8007d48 <UART_SetConfig+0x2d4>)
 8007d14:	fba3 1302 	umull	r1, r3, r3, r2
 8007d18:	095b      	lsrs	r3, r3, #5
 8007d1a:	2164      	movs	r1, #100	@ 0x64
 8007d1c:	fb01 f303 	mul.w	r3, r1, r3
 8007d20:	1ad3      	subs	r3, r2, r3
 8007d22:	00db      	lsls	r3, r3, #3
 8007d24:	3332      	adds	r3, #50	@ 0x32
 8007d26:	4a08      	ldr	r2, [pc, #32]	@ (8007d48 <UART_SetConfig+0x2d4>)
 8007d28:	fba2 2303 	umull	r2, r3, r2, r3
 8007d2c:	095b      	lsrs	r3, r3, #5
 8007d2e:	f003 0207 	and.w	r2, r3, #7
 8007d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4422      	add	r2, r4
 8007d3a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007d3c:	e106      	b.n	8007f4c <UART_SetConfig+0x4d8>
 8007d3e:	bf00      	nop
 8007d40:	40011000 	.word	0x40011000
 8007d44:	40011400 	.word	0x40011400
 8007d48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d50:	2200      	movs	r2, #0
 8007d52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007d56:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007d5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007d5e:	4642      	mov	r2, r8
 8007d60:	464b      	mov	r3, r9
 8007d62:	1891      	adds	r1, r2, r2
 8007d64:	6239      	str	r1, [r7, #32]
 8007d66:	415b      	adcs	r3, r3
 8007d68:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007d6e:	4641      	mov	r1, r8
 8007d70:	1854      	adds	r4, r2, r1
 8007d72:	4649      	mov	r1, r9
 8007d74:	eb43 0501 	adc.w	r5, r3, r1
 8007d78:	f04f 0200 	mov.w	r2, #0
 8007d7c:	f04f 0300 	mov.w	r3, #0
 8007d80:	00eb      	lsls	r3, r5, #3
 8007d82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d86:	00e2      	lsls	r2, r4, #3
 8007d88:	4614      	mov	r4, r2
 8007d8a:	461d      	mov	r5, r3
 8007d8c:	4643      	mov	r3, r8
 8007d8e:	18e3      	adds	r3, r4, r3
 8007d90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007d94:	464b      	mov	r3, r9
 8007d96:	eb45 0303 	adc.w	r3, r5, r3
 8007d9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007daa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007dae:	f04f 0200 	mov.w	r2, #0
 8007db2:	f04f 0300 	mov.w	r3, #0
 8007db6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007dba:	4629      	mov	r1, r5
 8007dbc:	008b      	lsls	r3, r1, #2
 8007dbe:	4621      	mov	r1, r4
 8007dc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007dc4:	4621      	mov	r1, r4
 8007dc6:	008a      	lsls	r2, r1, #2
 8007dc8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007dcc:	f7f8 f9fc 	bl	80001c8 <__aeabi_uldivmod>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	4b60      	ldr	r3, [pc, #384]	@ (8007f58 <UART_SetConfig+0x4e4>)
 8007dd6:	fba3 2302 	umull	r2, r3, r3, r2
 8007dda:	095b      	lsrs	r3, r3, #5
 8007ddc:	011c      	lsls	r4, r3, #4
 8007dde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007de2:	2200      	movs	r2, #0
 8007de4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007de8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007dec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007df0:	4642      	mov	r2, r8
 8007df2:	464b      	mov	r3, r9
 8007df4:	1891      	adds	r1, r2, r2
 8007df6:	61b9      	str	r1, [r7, #24]
 8007df8:	415b      	adcs	r3, r3
 8007dfa:	61fb      	str	r3, [r7, #28]
 8007dfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e00:	4641      	mov	r1, r8
 8007e02:	1851      	adds	r1, r2, r1
 8007e04:	6139      	str	r1, [r7, #16]
 8007e06:	4649      	mov	r1, r9
 8007e08:	414b      	adcs	r3, r1
 8007e0a:	617b      	str	r3, [r7, #20]
 8007e0c:	f04f 0200 	mov.w	r2, #0
 8007e10:	f04f 0300 	mov.w	r3, #0
 8007e14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007e18:	4659      	mov	r1, fp
 8007e1a:	00cb      	lsls	r3, r1, #3
 8007e1c:	4651      	mov	r1, sl
 8007e1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e22:	4651      	mov	r1, sl
 8007e24:	00ca      	lsls	r2, r1, #3
 8007e26:	4610      	mov	r0, r2
 8007e28:	4619      	mov	r1, r3
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	4642      	mov	r2, r8
 8007e2e:	189b      	adds	r3, r3, r2
 8007e30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007e34:	464b      	mov	r3, r9
 8007e36:	460a      	mov	r2, r1
 8007e38:	eb42 0303 	adc.w	r3, r2, r3
 8007e3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007e4a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007e4c:	f04f 0200 	mov.w	r2, #0
 8007e50:	f04f 0300 	mov.w	r3, #0
 8007e54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007e58:	4649      	mov	r1, r9
 8007e5a:	008b      	lsls	r3, r1, #2
 8007e5c:	4641      	mov	r1, r8
 8007e5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e62:	4641      	mov	r1, r8
 8007e64:	008a      	lsls	r2, r1, #2
 8007e66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007e6a:	f7f8 f9ad 	bl	80001c8 <__aeabi_uldivmod>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	460b      	mov	r3, r1
 8007e72:	4611      	mov	r1, r2
 8007e74:	4b38      	ldr	r3, [pc, #224]	@ (8007f58 <UART_SetConfig+0x4e4>)
 8007e76:	fba3 2301 	umull	r2, r3, r3, r1
 8007e7a:	095b      	lsrs	r3, r3, #5
 8007e7c:	2264      	movs	r2, #100	@ 0x64
 8007e7e:	fb02 f303 	mul.w	r3, r2, r3
 8007e82:	1acb      	subs	r3, r1, r3
 8007e84:	011b      	lsls	r3, r3, #4
 8007e86:	3332      	adds	r3, #50	@ 0x32
 8007e88:	4a33      	ldr	r2, [pc, #204]	@ (8007f58 <UART_SetConfig+0x4e4>)
 8007e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e8e:	095b      	lsrs	r3, r3, #5
 8007e90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007e94:	441c      	add	r4, r3
 8007e96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	673b      	str	r3, [r7, #112]	@ 0x70
 8007e9e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007ea0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007ea4:	4642      	mov	r2, r8
 8007ea6:	464b      	mov	r3, r9
 8007ea8:	1891      	adds	r1, r2, r2
 8007eaa:	60b9      	str	r1, [r7, #8]
 8007eac:	415b      	adcs	r3, r3
 8007eae:	60fb      	str	r3, [r7, #12]
 8007eb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007eb4:	4641      	mov	r1, r8
 8007eb6:	1851      	adds	r1, r2, r1
 8007eb8:	6039      	str	r1, [r7, #0]
 8007eba:	4649      	mov	r1, r9
 8007ebc:	414b      	adcs	r3, r1
 8007ebe:	607b      	str	r3, [r7, #4]
 8007ec0:	f04f 0200 	mov.w	r2, #0
 8007ec4:	f04f 0300 	mov.w	r3, #0
 8007ec8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007ecc:	4659      	mov	r1, fp
 8007ece:	00cb      	lsls	r3, r1, #3
 8007ed0:	4651      	mov	r1, sl
 8007ed2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ed6:	4651      	mov	r1, sl
 8007ed8:	00ca      	lsls	r2, r1, #3
 8007eda:	4610      	mov	r0, r2
 8007edc:	4619      	mov	r1, r3
 8007ede:	4603      	mov	r3, r0
 8007ee0:	4642      	mov	r2, r8
 8007ee2:	189b      	adds	r3, r3, r2
 8007ee4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007ee6:	464b      	mov	r3, r9
 8007ee8:	460a      	mov	r2, r1
 8007eea:	eb42 0303 	adc.w	r3, r2, r3
 8007eee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	663b      	str	r3, [r7, #96]	@ 0x60
 8007efa:	667a      	str	r2, [r7, #100]	@ 0x64
 8007efc:	f04f 0200 	mov.w	r2, #0
 8007f00:	f04f 0300 	mov.w	r3, #0
 8007f04:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007f08:	4649      	mov	r1, r9
 8007f0a:	008b      	lsls	r3, r1, #2
 8007f0c:	4641      	mov	r1, r8
 8007f0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f12:	4641      	mov	r1, r8
 8007f14:	008a      	lsls	r2, r1, #2
 8007f16:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007f1a:	f7f8 f955 	bl	80001c8 <__aeabi_uldivmod>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	460b      	mov	r3, r1
 8007f22:	4b0d      	ldr	r3, [pc, #52]	@ (8007f58 <UART_SetConfig+0x4e4>)
 8007f24:	fba3 1302 	umull	r1, r3, r3, r2
 8007f28:	095b      	lsrs	r3, r3, #5
 8007f2a:	2164      	movs	r1, #100	@ 0x64
 8007f2c:	fb01 f303 	mul.w	r3, r1, r3
 8007f30:	1ad3      	subs	r3, r2, r3
 8007f32:	011b      	lsls	r3, r3, #4
 8007f34:	3332      	adds	r3, #50	@ 0x32
 8007f36:	4a08      	ldr	r2, [pc, #32]	@ (8007f58 <UART_SetConfig+0x4e4>)
 8007f38:	fba2 2303 	umull	r2, r3, r2, r3
 8007f3c:	095b      	lsrs	r3, r3, #5
 8007f3e:	f003 020f 	and.w	r2, r3, #15
 8007f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4422      	add	r2, r4
 8007f4a:	609a      	str	r2, [r3, #8]
}
 8007f4c:	bf00      	nop
 8007f4e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007f52:	46bd      	mov	sp, r7
 8007f54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f58:	51eb851f 	.word	0x51eb851f

08007f5c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007f5c:	b084      	sub	sp, #16
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b084      	sub	sp, #16
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
 8007f66:	f107 001c 	add.w	r0, r7, #28
 8007f6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007f6e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d123      	bne.n	8007fbe <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f7a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007f8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007f9e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d105      	bne.n	8007fb2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 f9dc 	bl	8008370 <USB_CoreReset>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	73fb      	strb	r3, [r7, #15]
 8007fbc:	e01b      	b.n	8007ff6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	68db      	ldr	r3, [r3, #12]
 8007fc2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 f9d0 	bl	8008370 <USB_CoreReset>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007fd4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d106      	bne.n	8007fea <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fe0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	639a      	str	r2, [r3, #56]	@ 0x38
 8007fe8:	e005      	b.n	8007ff6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fee:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007ff6:	7fbb      	ldrb	r3, [r7, #30]
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d10b      	bne.n	8008014 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	f043 0206 	orr.w	r2, r3, #6
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	f043 0220 	orr.w	r2, r3, #32
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008014:	7bfb      	ldrb	r3, [r7, #15]
}
 8008016:	4618      	mov	r0, r3
 8008018:	3710      	adds	r7, #16
 800801a:	46bd      	mov	sp, r7
 800801c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008020:	b004      	add	sp, #16
 8008022:	4770      	bx	lr

08008024 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	f043 0201 	orr.w	r2, r3, #1
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008038:	2300      	movs	r3, #0
}
 800803a:	4618      	mov	r0, r3
 800803c:	370c      	adds	r7, #12
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr

08008046 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008046:	b480      	push	{r7}
 8008048:	b083      	sub	sp, #12
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	f023 0201 	bic.w	r2, r3, #1
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800805a:	2300      	movs	r3, #0
}
 800805c:	4618      	mov	r0, r3
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr

08008068 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	460b      	mov	r3, r1
 8008072:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008074:	2300      	movs	r3, #0
 8008076:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	68db      	ldr	r3, [r3, #12]
 800807c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008084:	78fb      	ldrb	r3, [r7, #3]
 8008086:	2b01      	cmp	r3, #1
 8008088:	d115      	bne.n	80080b6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008096:	200a      	movs	r0, #10
 8008098:	f7f9 fb6c 	bl	8001774 <HAL_Delay>
      ms += 10U;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	330a      	adds	r3, #10
 80080a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 f956 	bl	8008354 <USB_GetMode>
 80080a8:	4603      	mov	r3, r0
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d01e      	beq.n	80080ec <USB_SetCurrentMode+0x84>
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2bc7      	cmp	r3, #199	@ 0xc7
 80080b2:	d9f0      	bls.n	8008096 <USB_SetCurrentMode+0x2e>
 80080b4:	e01a      	b.n	80080ec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80080b6:	78fb      	ldrb	r3, [r7, #3]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d115      	bne.n	80080e8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80080c8:	200a      	movs	r0, #10
 80080ca:	f7f9 fb53 	bl	8001774 <HAL_Delay>
      ms += 10U;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	330a      	adds	r3, #10
 80080d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 f93d 	bl	8008354 <USB_GetMode>
 80080da:	4603      	mov	r3, r0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d005      	beq.n	80080ec <USB_SetCurrentMode+0x84>
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2bc7      	cmp	r3, #199	@ 0xc7
 80080e4:	d9f0      	bls.n	80080c8 <USB_SetCurrentMode+0x60>
 80080e6:	e001      	b.n	80080ec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80080e8:	2301      	movs	r3, #1
 80080ea:	e005      	b.n	80080f8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2bc8      	cmp	r3, #200	@ 0xc8
 80080f0:	d101      	bne.n	80080f6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	e000      	b.n	80080f8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80080f6:	2300      	movs	r3, #0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3710      	adds	r7, #16
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008100:	b480      	push	{r7}
 8008102:	b085      	sub	sp, #20
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800810a:	2300      	movs	r3, #0
 800810c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	3301      	adds	r3, #1
 8008112:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800811a:	d901      	bls.n	8008120 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800811c:	2303      	movs	r3, #3
 800811e:	e01b      	b.n	8008158 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	691b      	ldr	r3, [r3, #16]
 8008124:	2b00      	cmp	r3, #0
 8008126:	daf2      	bge.n	800810e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008128:	2300      	movs	r3, #0
 800812a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	019b      	lsls	r3, r3, #6
 8008130:	f043 0220 	orr.w	r2, r3, #32
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	3301      	adds	r3, #1
 800813c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008144:	d901      	bls.n	800814a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008146:	2303      	movs	r3, #3
 8008148:	e006      	b.n	8008158 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	691b      	ldr	r3, [r3, #16]
 800814e:	f003 0320 	and.w	r3, r3, #32
 8008152:	2b20      	cmp	r3, #32
 8008154:	d0f0      	beq.n	8008138 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3714      	adds	r7, #20
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr

08008164 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008164:	b480      	push	{r7}
 8008166:	b085      	sub	sp, #20
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800816c:	2300      	movs	r3, #0
 800816e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	3301      	adds	r3, #1
 8008174:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800817c:	d901      	bls.n	8008182 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800817e:	2303      	movs	r3, #3
 8008180:	e018      	b.n	80081b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	691b      	ldr	r3, [r3, #16]
 8008186:	2b00      	cmp	r3, #0
 8008188:	daf2      	bge.n	8008170 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800818a:	2300      	movs	r3, #0
 800818c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2210      	movs	r2, #16
 8008192:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	3301      	adds	r3, #1
 8008198:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80081a0:	d901      	bls.n	80081a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80081a2:	2303      	movs	r3, #3
 80081a4:	e006      	b.n	80081b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	691b      	ldr	r3, [r3, #16]
 80081aa:	f003 0310 	and.w	r3, r3, #16
 80081ae:	2b10      	cmp	r3, #16
 80081b0:	d0f0      	beq.n	8008194 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80081b2:	2300      	movs	r3, #0
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3714      	adds	r7, #20
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b089      	sub	sp, #36	@ 0x24
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	60b9      	str	r1, [r7, #8]
 80081ca:	4611      	mov	r1, r2
 80081cc:	461a      	mov	r2, r3
 80081ce:	460b      	mov	r3, r1
 80081d0:	71fb      	strb	r3, [r7, #7]
 80081d2:	4613      	mov	r3, r2
 80081d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80081de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d123      	bne.n	800822e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80081e6:	88bb      	ldrh	r3, [r7, #4]
 80081e8:	3303      	adds	r3, #3
 80081ea:	089b      	lsrs	r3, r3, #2
 80081ec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80081ee:	2300      	movs	r3, #0
 80081f0:	61bb      	str	r3, [r7, #24]
 80081f2:	e018      	b.n	8008226 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80081f4:	79fb      	ldrb	r3, [r7, #7]
 80081f6:	031a      	lsls	r2, r3, #12
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	4413      	add	r3, r2
 80081fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008200:	461a      	mov	r2, r3
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008208:	69fb      	ldr	r3, [r7, #28]
 800820a:	3301      	adds	r3, #1
 800820c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	3301      	adds	r3, #1
 8008212:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	3301      	adds	r3, #1
 8008218:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800821a:	69fb      	ldr	r3, [r7, #28]
 800821c:	3301      	adds	r3, #1
 800821e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008220:	69bb      	ldr	r3, [r7, #24]
 8008222:	3301      	adds	r3, #1
 8008224:	61bb      	str	r3, [r7, #24]
 8008226:	69ba      	ldr	r2, [r7, #24]
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	429a      	cmp	r2, r3
 800822c:	d3e2      	bcc.n	80081f4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800822e:	2300      	movs	r3, #0
}
 8008230:	4618      	mov	r0, r3
 8008232:	3724      	adds	r7, #36	@ 0x24
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800823c:	b480      	push	{r7}
 800823e:	b08b      	sub	sp, #44	@ 0x2c
 8008240:	af00      	add	r7, sp, #0
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	4613      	mov	r3, r2
 8008248:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008252:	88fb      	ldrh	r3, [r7, #6]
 8008254:	089b      	lsrs	r3, r3, #2
 8008256:	b29b      	uxth	r3, r3
 8008258:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800825a:	88fb      	ldrh	r3, [r7, #6]
 800825c:	f003 0303 	and.w	r3, r3, #3
 8008260:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008262:	2300      	movs	r3, #0
 8008264:	623b      	str	r3, [r7, #32]
 8008266:	e014      	b.n	8008292 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008268:	69bb      	ldr	r3, [r7, #24]
 800826a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008272:	601a      	str	r2, [r3, #0]
    pDest++;
 8008274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008276:	3301      	adds	r3, #1
 8008278:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800827a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800827c:	3301      	adds	r3, #1
 800827e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008282:	3301      	adds	r3, #1
 8008284:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008288:	3301      	adds	r3, #1
 800828a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800828c:	6a3b      	ldr	r3, [r7, #32]
 800828e:	3301      	adds	r3, #1
 8008290:	623b      	str	r3, [r7, #32]
 8008292:	6a3a      	ldr	r2, [r7, #32]
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	429a      	cmp	r2, r3
 8008298:	d3e6      	bcc.n	8008268 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800829a:	8bfb      	ldrh	r3, [r7, #30]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d01e      	beq.n	80082de <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80082a0:	2300      	movs	r3, #0
 80082a2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80082a4:	69bb      	ldr	r3, [r7, #24]
 80082a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082aa:	461a      	mov	r2, r3
 80082ac:	f107 0310 	add.w	r3, r7, #16
 80082b0:	6812      	ldr	r2, [r2, #0]
 80082b2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80082b4:	693a      	ldr	r2, [r7, #16]
 80082b6:	6a3b      	ldr	r3, [r7, #32]
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	00db      	lsls	r3, r3, #3
 80082bc:	fa22 f303 	lsr.w	r3, r2, r3
 80082c0:	b2da      	uxtb	r2, r3
 80082c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c4:	701a      	strb	r2, [r3, #0]
      i++;
 80082c6:	6a3b      	ldr	r3, [r7, #32]
 80082c8:	3301      	adds	r3, #1
 80082ca:	623b      	str	r3, [r7, #32]
      pDest++;
 80082cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ce:	3301      	adds	r3, #1
 80082d0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80082d2:	8bfb      	ldrh	r3, [r7, #30]
 80082d4:	3b01      	subs	r3, #1
 80082d6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80082d8:	8bfb      	ldrh	r3, [r7, #30]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d1ea      	bne.n	80082b4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80082de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	372c      	adds	r7, #44	@ 0x2c
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b085      	sub	sp, #20
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	695b      	ldr	r3, [r3, #20]
 80082f8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	699b      	ldr	r3, [r3, #24]
 80082fe:	68fa      	ldr	r2, [r7, #12]
 8008300:	4013      	ands	r3, r2
 8008302:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008304:	68fb      	ldr	r3, [r7, #12]
}
 8008306:	4618      	mov	r0, r3
 8008308:	3714      	adds	r7, #20
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr

08008312 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8008312:	b480      	push	{r7}
 8008314:	b085      	sub	sp, #20
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
 800831a:	460b      	mov	r3, r1
 800831c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8008322:	78fb      	ldrb	r3, [r7, #3]
 8008324:	015a      	lsls	r2, r3, #5
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	4413      	add	r3, r2
 800832a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8008332:	78fb      	ldrb	r3, [r7, #3]
 8008334:	015a      	lsls	r2, r3, #5
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	4413      	add	r3, r2
 800833a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800833e:	68db      	ldr	r3, [r3, #12]
 8008340:	68ba      	ldr	r2, [r7, #8]
 8008342:	4013      	ands	r3, r2
 8008344:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008346:	68bb      	ldr	r3, [r7, #8]
}
 8008348:	4618      	mov	r0, r3
 800834a:	3714      	adds	r7, #20
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr

08008354 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	695b      	ldr	r3, [r3, #20]
 8008360:	f003 0301 	and.w	r3, r3, #1
}
 8008364:	4618      	mov	r0, r3
 8008366:	370c      	adds	r7, #12
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr

08008370 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008370:	b480      	push	{r7}
 8008372:	b085      	sub	sp, #20
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008378:	2300      	movs	r3, #0
 800837a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	3301      	adds	r3, #1
 8008380:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008388:	d901      	bls.n	800838e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800838a:	2303      	movs	r3, #3
 800838c:	e01b      	b.n	80083c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	691b      	ldr	r3, [r3, #16]
 8008392:	2b00      	cmp	r3, #0
 8008394:	daf2      	bge.n	800837c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008396:	2300      	movs	r3, #0
 8008398:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	691b      	ldr	r3, [r3, #16]
 800839e:	f043 0201 	orr.w	r2, r3, #1
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	3301      	adds	r3, #1
 80083aa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80083b2:	d901      	bls.n	80083b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80083b4:	2303      	movs	r3, #3
 80083b6:	e006      	b.n	80083c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	691b      	ldr	r3, [r3, #16]
 80083bc:	f003 0301 	and.w	r3, r3, #1
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d0f0      	beq.n	80083a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3714      	adds	r7, #20
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr
	...

080083d4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80083d4:	b084      	sub	sp, #16
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b086      	sub	sp, #24
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
 80083de:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80083e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80083e6:	2300      	movs	r3, #0
 80083e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80083f4:	461a      	mov	r2, r3
 80083f6:	2300      	movs	r3, #0
 80083f8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083fe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800840a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008416:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	68db      	ldr	r3, [r3, #12]
 8008422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008426:	2b00      	cmp	r3, #0
 8008428:	d119      	bne.n	800845e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800842a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800842e:	2b01      	cmp	r3, #1
 8008430:	d10a      	bne.n	8008448 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008440:	f043 0304 	orr.w	r3, r3, #4
 8008444:	6013      	str	r3, [r2, #0]
 8008446:	e014      	b.n	8008472 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008456:	f023 0304 	bic.w	r3, r3, #4
 800845a:	6013      	str	r3, [r2, #0]
 800845c:	e009      	b.n	8008472 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800846c:	f023 0304 	bic.w	r3, r3, #4
 8008470:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008472:	2110      	movs	r1, #16
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f7ff fe43 	bl	8008100 <USB_FlushTxFifo>
 800847a:	4603      	mov	r3, r0
 800847c:	2b00      	cmp	r3, #0
 800847e:	d001      	beq.n	8008484 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8008480:	2301      	movs	r3, #1
 8008482:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f7ff fe6d 	bl	8008164 <USB_FlushRxFifo>
 800848a:	4603      	mov	r3, r0
 800848c:	2b00      	cmp	r3, #0
 800848e:	d001      	beq.n	8008494 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008494:	2300      	movs	r3, #0
 8008496:	613b      	str	r3, [r7, #16]
 8008498:	e015      	b.n	80084c6 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	015a      	lsls	r2, r3, #5
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	4413      	add	r3, r2
 80084a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084a6:	461a      	mov	r2, r3
 80084a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80084ac:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	015a      	lsls	r2, r3, #5
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	4413      	add	r3, r2
 80084b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084ba:	461a      	mov	r2, r3
 80084bc:	2300      	movs	r3, #0
 80084be:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	3301      	adds	r3, #1
 80084c4:	613b      	str	r3, [r7, #16]
 80084c6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80084ca:	461a      	mov	r2, r3
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d3e3      	bcc.n	800849a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2200      	movs	r2, #0
 80084d6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80084de:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	4a18      	ldr	r2, [pc, #96]	@ (8008544 <USB_HostInit+0x170>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d10b      	bne.n	8008500 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80084ee:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	4a15      	ldr	r2, [pc, #84]	@ (8008548 <USB_HostInit+0x174>)
 80084f4:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4a14      	ldr	r2, [pc, #80]	@ (800854c <USB_HostInit+0x178>)
 80084fa:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80084fe:	e009      	b.n	8008514 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2280      	movs	r2, #128	@ 0x80
 8008504:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	4a11      	ldr	r2, [pc, #68]	@ (8008550 <USB_HostInit+0x17c>)
 800850a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	4a11      	ldr	r2, [pc, #68]	@ (8008554 <USB_HostInit+0x180>)
 8008510:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008514:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008518:	2b00      	cmp	r3, #0
 800851a:	d105      	bne.n	8008528 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	699b      	ldr	r3, [r3, #24]
 8008520:	f043 0210 	orr.w	r2, r3, #16
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	699a      	ldr	r2, [r3, #24]
 800852c:	4b0a      	ldr	r3, [pc, #40]	@ (8008558 <USB_HostInit+0x184>)
 800852e:	4313      	orrs	r3, r2
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008534:	7dfb      	ldrb	r3, [r7, #23]
}
 8008536:	4618      	mov	r0, r3
 8008538:	3718      	adds	r7, #24
 800853a:	46bd      	mov	sp, r7
 800853c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008540:	b004      	add	sp, #16
 8008542:	4770      	bx	lr
 8008544:	40040000 	.word	0x40040000
 8008548:	01000200 	.word	0x01000200
 800854c:	00e00300 	.word	0x00e00300
 8008550:	00600080 	.word	0x00600080
 8008554:	004000e0 	.word	0x004000e0
 8008558:	a3200008 	.word	0xa3200008

0800855c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800855c:	b480      	push	{r7}
 800855e:	b085      	sub	sp, #20
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	460b      	mov	r3, r1
 8008566:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800857a:	f023 0303 	bic.w	r3, r3, #3
 800857e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	78fb      	ldrb	r3, [r7, #3]
 800858a:	f003 0303 	and.w	r3, r3, #3
 800858e:	68f9      	ldr	r1, [r7, #12]
 8008590:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008594:	4313      	orrs	r3, r2
 8008596:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008598:	78fb      	ldrb	r3, [r7, #3]
 800859a:	2b01      	cmp	r3, #1
 800859c:	d107      	bne.n	80085ae <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80085a4:	461a      	mov	r2, r3
 80085a6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80085aa:	6053      	str	r3, [r2, #4]
 80085ac:	e00c      	b.n	80085c8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80085ae:	78fb      	ldrb	r3, [r7, #3]
 80085b0:	2b02      	cmp	r3, #2
 80085b2:	d107      	bne.n	80085c4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80085ba:	461a      	mov	r2, r3
 80085bc:	f241 7370 	movw	r3, #6000	@ 0x1770
 80085c0:	6053      	str	r3, [r2, #4]
 80085c2:	e001      	b.n	80085c8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
 80085c6:	e000      	b.n	80085ca <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3714      	adds	r7, #20
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr

080085d6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80085d6:	b580      	push	{r7, lr}
 80085d8:	b084      	sub	sp, #16
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80085e2:	2300      	movs	r3, #0
 80085e4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80085f6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	68fa      	ldr	r2, [r7, #12]
 80085fc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008600:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008604:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008606:	2064      	movs	r0, #100	@ 0x64
 8008608:	f7f9 f8b4 	bl	8001774 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	68fa      	ldr	r2, [r7, #12]
 8008610:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008614:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008618:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800861a:	200a      	movs	r0, #10
 800861c:	f7f9 f8aa 	bl	8001774 <HAL_Delay>

  return HAL_OK;
 8008620:	2300      	movs	r3, #0
}
 8008622:	4618      	mov	r0, r3
 8008624:	3710      	adds	r7, #16
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}

0800862a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800862a:	b480      	push	{r7}
 800862c:	b085      	sub	sp, #20
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
 8008632:	460b      	mov	r3, r1
 8008634:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800863a:	2300      	movs	r3, #0
 800863c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800864e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008656:	2b00      	cmp	r3, #0
 8008658:	d109      	bne.n	800866e <USB_DriveVbus+0x44>
 800865a:	78fb      	ldrb	r3, [r7, #3]
 800865c:	2b01      	cmp	r3, #1
 800865e:	d106      	bne.n	800866e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	68fa      	ldr	r2, [r7, #12]
 8008664:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008668:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800866c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008674:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008678:	d109      	bne.n	800868e <USB_DriveVbus+0x64>
 800867a:	78fb      	ldrb	r3, [r7, #3]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d106      	bne.n	800868e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	68fa      	ldr	r2, [r7, #12]
 8008684:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008688:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800868c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800868e:	2300      	movs	r3, #0
}
 8008690:	4618      	mov	r0, r3
 8008692:	3714      	adds	r7, #20
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800869c:	b480      	push	{r7}
 800869e:	b085      	sub	sp, #20
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80086a8:	2300      	movs	r3, #0
 80086aa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	0c5b      	lsrs	r3, r3, #17
 80086ba:	f003 0303 	and.w	r3, r3, #3
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3714      	adds	r7, #20
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr

080086ca <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80086ca:	b480      	push	{r7}
 80086cc:	b085      	sub	sp, #20
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	b29b      	uxth	r3, r3
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3714      	adds	r7, #20
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b088      	sub	sp, #32
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	4608      	mov	r0, r1
 80086f6:	4611      	mov	r1, r2
 80086f8:	461a      	mov	r2, r3
 80086fa:	4603      	mov	r3, r0
 80086fc:	70fb      	strb	r3, [r7, #3]
 80086fe:	460b      	mov	r3, r1
 8008700:	70bb      	strb	r3, [r7, #2]
 8008702:	4613      	mov	r3, r2
 8008704:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008706:	2300      	movs	r3, #0
 8008708:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800870e:	78fb      	ldrb	r3, [r7, #3]
 8008710:	015a      	lsls	r2, r3, #5
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	4413      	add	r3, r2
 8008716:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800871a:	461a      	mov	r2, r3
 800871c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008720:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008722:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008726:	2b03      	cmp	r3, #3
 8008728:	d87c      	bhi.n	8008824 <USB_HC_Init+0x138>
 800872a:	a201      	add	r2, pc, #4	@ (adr r2, 8008730 <USB_HC_Init+0x44>)
 800872c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008730:	08008741 	.word	0x08008741
 8008734:	080087e7 	.word	0x080087e7
 8008738:	08008741 	.word	0x08008741
 800873c:	080087a9 	.word	0x080087a9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008740:	78fb      	ldrb	r3, [r7, #3]
 8008742:	015a      	lsls	r2, r3, #5
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	4413      	add	r3, r2
 8008748:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800874c:	461a      	mov	r2, r3
 800874e:	f240 439d 	movw	r3, #1181	@ 0x49d
 8008752:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008754:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008758:	2b00      	cmp	r3, #0
 800875a:	da10      	bge.n	800877e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800875c:	78fb      	ldrb	r3, [r7, #3]
 800875e:	015a      	lsls	r2, r3, #5
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	4413      	add	r3, r2
 8008764:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	78fa      	ldrb	r2, [r7, #3]
 800876c:	0151      	lsls	r1, r2, #5
 800876e:	693a      	ldr	r2, [r7, #16]
 8008770:	440a      	add	r2, r1
 8008772:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008776:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800877a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800877c:	e055      	b.n	800882a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4a6f      	ldr	r2, [pc, #444]	@ (8008940 <USB_HC_Init+0x254>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d151      	bne.n	800882a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008786:	78fb      	ldrb	r3, [r7, #3]
 8008788:	015a      	lsls	r2, r3, #5
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	4413      	add	r3, r2
 800878e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	78fa      	ldrb	r2, [r7, #3]
 8008796:	0151      	lsls	r1, r2, #5
 8008798:	693a      	ldr	r2, [r7, #16]
 800879a:	440a      	add	r2, r1
 800879c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80087a0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80087a4:	60d3      	str	r3, [r2, #12]
      break;
 80087a6:	e040      	b.n	800882a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80087a8:	78fb      	ldrb	r3, [r7, #3]
 80087aa:	015a      	lsls	r2, r3, #5
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	4413      	add	r3, r2
 80087b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087b4:	461a      	mov	r2, r3
 80087b6:	f240 639d 	movw	r3, #1693	@ 0x69d
 80087ba:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80087bc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	da34      	bge.n	800882e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80087c4:	78fb      	ldrb	r3, [r7, #3]
 80087c6:	015a      	lsls	r2, r3, #5
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	4413      	add	r3, r2
 80087cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087d0:	68db      	ldr	r3, [r3, #12]
 80087d2:	78fa      	ldrb	r2, [r7, #3]
 80087d4:	0151      	lsls	r1, r2, #5
 80087d6:	693a      	ldr	r2, [r7, #16]
 80087d8:	440a      	add	r2, r1
 80087da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80087de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087e2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80087e4:	e023      	b.n	800882e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80087e6:	78fb      	ldrb	r3, [r7, #3]
 80087e8:	015a      	lsls	r2, r3, #5
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	4413      	add	r3, r2
 80087ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087f2:	461a      	mov	r2, r3
 80087f4:	f240 2325 	movw	r3, #549	@ 0x225
 80087f8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80087fa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	da17      	bge.n	8008832 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008802:	78fb      	ldrb	r3, [r7, #3]
 8008804:	015a      	lsls	r2, r3, #5
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	4413      	add	r3, r2
 800880a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	78fa      	ldrb	r2, [r7, #3]
 8008812:	0151      	lsls	r1, r2, #5
 8008814:	693a      	ldr	r2, [r7, #16]
 8008816:	440a      	add	r2, r1
 8008818:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800881c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8008820:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008822:	e006      	b.n	8008832 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8008824:	2301      	movs	r3, #1
 8008826:	77fb      	strb	r3, [r7, #31]
      break;
 8008828:	e004      	b.n	8008834 <USB_HC_Init+0x148>
      break;
 800882a:	bf00      	nop
 800882c:	e002      	b.n	8008834 <USB_HC_Init+0x148>
      break;
 800882e:	bf00      	nop
 8008830:	e000      	b.n	8008834 <USB_HC_Init+0x148>
      break;
 8008832:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008834:	78fb      	ldrb	r3, [r7, #3]
 8008836:	015a      	lsls	r2, r3, #5
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	4413      	add	r3, r2
 800883c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008840:	461a      	mov	r2, r3
 8008842:	2300      	movs	r3, #0
 8008844:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008846:	78fb      	ldrb	r3, [r7, #3]
 8008848:	015a      	lsls	r2, r3, #5
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	4413      	add	r3, r2
 800884e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008852:	68db      	ldr	r3, [r3, #12]
 8008854:	78fa      	ldrb	r2, [r7, #3]
 8008856:	0151      	lsls	r1, r2, #5
 8008858:	693a      	ldr	r2, [r7, #16]
 800885a:	440a      	add	r2, r1
 800885c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008860:	f043 0302 	orr.w	r3, r3, #2
 8008864:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800886c:	699a      	ldr	r2, [r3, #24]
 800886e:	78fb      	ldrb	r3, [r7, #3]
 8008870:	f003 030f 	and.w	r3, r3, #15
 8008874:	2101      	movs	r1, #1
 8008876:	fa01 f303 	lsl.w	r3, r1, r3
 800887a:	6939      	ldr	r1, [r7, #16]
 800887c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008880:	4313      	orrs	r3, r2
 8008882:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	699b      	ldr	r3, [r3, #24]
 8008888:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008890:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008894:	2b00      	cmp	r3, #0
 8008896:	da03      	bge.n	80088a0 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008898:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800889c:	61bb      	str	r3, [r7, #24]
 800889e:	e001      	b.n	80088a4 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80088a0:	2300      	movs	r3, #0
 80088a2:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f7ff fef9 	bl	800869c <USB_GetHostSpeed>
 80088aa:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80088ac:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80088b0:	2b02      	cmp	r3, #2
 80088b2:	d106      	bne.n	80088c2 <USB_HC_Init+0x1d6>
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2b02      	cmp	r3, #2
 80088b8:	d003      	beq.n	80088c2 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80088ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80088be:	617b      	str	r3, [r7, #20]
 80088c0:	e001      	b.n	80088c6 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80088c2:	2300      	movs	r3, #0
 80088c4:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80088c6:	787b      	ldrb	r3, [r7, #1]
 80088c8:	059b      	lsls	r3, r3, #22
 80088ca:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80088ce:	78bb      	ldrb	r3, [r7, #2]
 80088d0:	02db      	lsls	r3, r3, #11
 80088d2:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80088d6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80088d8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80088dc:	049b      	lsls	r3, r3, #18
 80088de:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80088e2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80088e4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80088e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80088ea:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80088ec:	69bb      	ldr	r3, [r7, #24]
 80088ee:	431a      	orrs	r2, r3
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80088f4:	78fa      	ldrb	r2, [r7, #3]
 80088f6:	0151      	lsls	r1, r2, #5
 80088f8:	693a      	ldr	r2, [r7, #16]
 80088fa:	440a      	add	r2, r1
 80088fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008900:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008904:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8008906:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800890a:	2b03      	cmp	r3, #3
 800890c:	d003      	beq.n	8008916 <USB_HC_Init+0x22a>
 800890e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008912:	2b01      	cmp	r3, #1
 8008914:	d10f      	bne.n	8008936 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008916:	78fb      	ldrb	r3, [r7, #3]
 8008918:	015a      	lsls	r2, r3, #5
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	4413      	add	r3, r2
 800891e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	78fa      	ldrb	r2, [r7, #3]
 8008926:	0151      	lsls	r1, r2, #5
 8008928:	693a      	ldr	r2, [r7, #16]
 800892a:	440a      	add	r2, r1
 800892c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008930:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008934:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008936:	7ffb      	ldrb	r3, [r7, #31]
}
 8008938:	4618      	mov	r0, r3
 800893a:	3720      	adds	r7, #32
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}
 8008940:	40040000 	.word	0x40040000

08008944 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b08c      	sub	sp, #48	@ 0x30
 8008948:	af02      	add	r7, sp, #8
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	4613      	mov	r3, r2
 8008950:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	785b      	ldrb	r3, [r3, #1]
 800895a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800895c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008960:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	4a5d      	ldr	r2, [pc, #372]	@ (8008adc <USB_HC_StartXfer+0x198>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d12f      	bne.n	80089ca <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800896a:	79fb      	ldrb	r3, [r7, #7]
 800896c:	2b01      	cmp	r3, #1
 800896e:	d11c      	bne.n	80089aa <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	7c9b      	ldrb	r3, [r3, #18]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d003      	beq.n	8008980 <USB_HC_StartXfer+0x3c>
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	7c9b      	ldrb	r3, [r3, #18]
 800897c:	2b02      	cmp	r3, #2
 800897e:	d124      	bne.n	80089ca <USB_HC_StartXfer+0x86>
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	799b      	ldrb	r3, [r3, #6]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d120      	bne.n	80089ca <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008988:	69fb      	ldr	r3, [r7, #28]
 800898a:	015a      	lsls	r2, r3, #5
 800898c:	6a3b      	ldr	r3, [r7, #32]
 800898e:	4413      	add	r3, r2
 8008990:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008994:	68db      	ldr	r3, [r3, #12]
 8008996:	69fa      	ldr	r2, [r7, #28]
 8008998:	0151      	lsls	r1, r2, #5
 800899a:	6a3a      	ldr	r2, [r7, #32]
 800899c:	440a      	add	r2, r1
 800899e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089a6:	60d3      	str	r3, [r2, #12]
 80089a8:	e00f      	b.n	80089ca <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	791b      	ldrb	r3, [r3, #4]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d10b      	bne.n	80089ca <USB_HC_StartXfer+0x86>
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	795b      	ldrb	r3, [r3, #5]
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	d107      	bne.n	80089ca <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	785b      	ldrb	r3, [r3, #1]
 80089be:	4619      	mov	r1, r3
 80089c0:	68f8      	ldr	r0, [r7, #12]
 80089c2:	f000 fb6b 	bl	800909c <USB_DoPing>
        return HAL_OK;
 80089c6:	2300      	movs	r3, #0
 80089c8:	e232      	b.n	8008e30 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	799b      	ldrb	r3, [r3, #6]
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d158      	bne.n	8008a84 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80089d2:	2301      	movs	r3, #1
 80089d4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	78db      	ldrb	r3, [r3, #3]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d007      	beq.n	80089ee <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80089de:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80089e0:	68ba      	ldr	r2, [r7, #8]
 80089e2:	8a92      	ldrh	r2, [r2, #20]
 80089e4:	fb03 f202 	mul.w	r2, r3, r2
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	61da      	str	r2, [r3, #28]
 80089ec:	e07c      	b.n	8008ae8 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	7c9b      	ldrb	r3, [r3, #18]
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d130      	bne.n	8008a58 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	6a1b      	ldr	r3, [r3, #32]
 80089fa:	2bbc      	cmp	r3, #188	@ 0xbc
 80089fc:	d918      	bls.n	8008a30 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	8a9b      	ldrh	r3, [r3, #20]
 8008a02:	461a      	mov	r2, r3
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	69da      	ldr	r2, [r3, #28]
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	68db      	ldr	r3, [r3, #12]
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d003      	beq.n	8008a20 <USB_HC_StartXfer+0xdc>
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	2b02      	cmp	r3, #2
 8008a1e:	d103      	bne.n	8008a28 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	2202      	movs	r2, #2
 8008a24:	60da      	str	r2, [r3, #12]
 8008a26:	e05f      	b.n	8008ae8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	60da      	str	r2, [r3, #12]
 8008a2e:	e05b      	b.n	8008ae8 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	6a1a      	ldr	r2, [r3, #32]
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	68db      	ldr	r3, [r3, #12]
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d007      	beq.n	8008a50 <USB_HC_StartXfer+0x10c>
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	2b02      	cmp	r3, #2
 8008a46:	d003      	beq.n	8008a50 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	2204      	movs	r2, #4
 8008a4c:	60da      	str	r2, [r3, #12]
 8008a4e:	e04b      	b.n	8008ae8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	2203      	movs	r2, #3
 8008a54:	60da      	str	r2, [r3, #12]
 8008a56:	e047      	b.n	8008ae8 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8008a58:	79fb      	ldrb	r3, [r7, #7]
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d10d      	bne.n	8008a7a <USB_HC_StartXfer+0x136>
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	6a1b      	ldr	r3, [r3, #32]
 8008a62:	68ba      	ldr	r2, [r7, #8]
 8008a64:	8a92      	ldrh	r2, [r2, #20]
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d907      	bls.n	8008a7a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008a6a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008a6c:	68ba      	ldr	r2, [r7, #8]
 8008a6e:	8a92      	ldrh	r2, [r2, #20]
 8008a70:	fb03 f202 	mul.w	r2, r3, r2
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	61da      	str	r2, [r3, #28]
 8008a78:	e036      	b.n	8008ae8 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	6a1a      	ldr	r2, [r3, #32]
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	61da      	str	r2, [r3, #28]
 8008a82:	e031      	b.n	8008ae8 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	6a1b      	ldr	r3, [r3, #32]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d018      	beq.n	8008abe <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	6a1b      	ldr	r3, [r3, #32]
 8008a90:	68ba      	ldr	r2, [r7, #8]
 8008a92:	8a92      	ldrh	r2, [r2, #20]
 8008a94:	4413      	add	r3, r2
 8008a96:	3b01      	subs	r3, #1
 8008a98:	68ba      	ldr	r2, [r7, #8]
 8008a9a:	8a92      	ldrh	r2, [r2, #20]
 8008a9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008aa0:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8008aa2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008aa4:	8b7b      	ldrh	r3, [r7, #26]
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d90b      	bls.n	8008ac2 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8008aaa:	8b7b      	ldrh	r3, [r7, #26]
 8008aac:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008aae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008ab0:	68ba      	ldr	r2, [r7, #8]
 8008ab2:	8a92      	ldrh	r2, [r2, #20]
 8008ab4:	fb03 f202 	mul.w	r2, r3, r2
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	61da      	str	r2, [r3, #28]
 8008abc:	e001      	b.n	8008ac2 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	78db      	ldrb	r3, [r3, #3]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d00a      	beq.n	8008ae0 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008aca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008acc:	68ba      	ldr	r2, [r7, #8]
 8008ace:	8a92      	ldrh	r2, [r2, #20]
 8008ad0:	fb03 f202 	mul.w	r2, r3, r2
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	61da      	str	r2, [r3, #28]
 8008ad8:	e006      	b.n	8008ae8 <USB_HC_StartXfer+0x1a4>
 8008ada:	bf00      	nop
 8008adc:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	6a1a      	ldr	r2, [r3, #32]
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	69db      	ldr	r3, [r3, #28]
 8008aec:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008af0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008af2:	04d9      	lsls	r1, r3, #19
 8008af4:	4ba3      	ldr	r3, [pc, #652]	@ (8008d84 <USB_HC_StartXfer+0x440>)
 8008af6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008af8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	7d9b      	ldrb	r3, [r3, #22]
 8008afe:	075b      	lsls	r3, r3, #29
 8008b00:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008b04:	69f9      	ldr	r1, [r7, #28]
 8008b06:	0148      	lsls	r0, r1, #5
 8008b08:	6a39      	ldr	r1, [r7, #32]
 8008b0a:	4401      	add	r1, r0
 8008b0c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008b10:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008b12:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008b14:	79fb      	ldrb	r3, [r7, #7]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d009      	beq.n	8008b2e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	6999      	ldr	r1, [r3, #24]
 8008b1e:	69fb      	ldr	r3, [r7, #28]
 8008b20:	015a      	lsls	r2, r3, #5
 8008b22:	6a3b      	ldr	r3, [r7, #32]
 8008b24:	4413      	add	r3, r2
 8008b26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b2a:	460a      	mov	r2, r1
 8008b2c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008b2e:	6a3b      	ldr	r3, [r7, #32]
 8008b30:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	f003 0301 	and.w	r3, r3, #1
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	bf0c      	ite	eq
 8008b3e:	2301      	moveq	r3, #1
 8008b40:	2300      	movne	r3, #0
 8008b42:	b2db      	uxtb	r3, r3
 8008b44:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008b46:	69fb      	ldr	r3, [r7, #28]
 8008b48:	015a      	lsls	r2, r3, #5
 8008b4a:	6a3b      	ldr	r3, [r7, #32]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	69fa      	ldr	r2, [r7, #28]
 8008b56:	0151      	lsls	r1, r2, #5
 8008b58:	6a3a      	ldr	r2, [r7, #32]
 8008b5a:	440a      	add	r2, r1
 8008b5c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b60:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008b64:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	015a      	lsls	r2, r3, #5
 8008b6a:	6a3b      	ldr	r3, [r7, #32]
 8008b6c:	4413      	add	r3, r2
 8008b6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	7e7b      	ldrb	r3, [r7, #25]
 8008b76:	075b      	lsls	r3, r3, #29
 8008b78:	69f9      	ldr	r1, [r7, #28]
 8008b7a:	0148      	lsls	r0, r1, #5
 8008b7c:	6a39      	ldr	r1, [r7, #32]
 8008b7e:	4401      	add	r1, r0
 8008b80:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8008b84:	4313      	orrs	r3, r2
 8008b86:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	799b      	ldrb	r3, [r3, #6]
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	f040 80c3 	bne.w	8008d18 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	7c5b      	ldrb	r3, [r3, #17]
 8008b96:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008b98:	68ba      	ldr	r2, [r7, #8]
 8008b9a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	69fa      	ldr	r2, [r7, #28]
 8008ba0:	0151      	lsls	r1, r2, #5
 8008ba2:	6a3a      	ldr	r2, [r7, #32]
 8008ba4:	440a      	add	r2, r1
 8008ba6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008baa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008bae:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8008bb0:	69fb      	ldr	r3, [r7, #28]
 8008bb2:	015a      	lsls	r2, r3, #5
 8008bb4:	6a3b      	ldr	r3, [r7, #32]
 8008bb6:	4413      	add	r3, r2
 8008bb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bbc:	68db      	ldr	r3, [r3, #12]
 8008bbe:	69fa      	ldr	r2, [r7, #28]
 8008bc0:	0151      	lsls	r1, r2, #5
 8008bc2:	6a3a      	ldr	r2, [r7, #32]
 8008bc4:	440a      	add	r2, r1
 8008bc6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008bca:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008bce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	79db      	ldrb	r3, [r3, #7]
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d123      	bne.n	8008c20 <USB_HC_StartXfer+0x2dc>
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	78db      	ldrb	r3, [r3, #3]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d11f      	bne.n	8008c20 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008be0:	69fb      	ldr	r3, [r7, #28]
 8008be2:	015a      	lsls	r2, r3, #5
 8008be4:	6a3b      	ldr	r3, [r7, #32]
 8008be6:	4413      	add	r3, r2
 8008be8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	69fa      	ldr	r2, [r7, #28]
 8008bf0:	0151      	lsls	r1, r2, #5
 8008bf2:	6a3a      	ldr	r2, [r7, #32]
 8008bf4:	440a      	add	r2, r1
 8008bf6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008bfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008bfe:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8008c00:	69fb      	ldr	r3, [r7, #28]
 8008c02:	015a      	lsls	r2, r3, #5
 8008c04:	6a3b      	ldr	r3, [r7, #32]
 8008c06:	4413      	add	r3, r2
 8008c08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c0c:	68db      	ldr	r3, [r3, #12]
 8008c0e:	69fa      	ldr	r2, [r7, #28]
 8008c10:	0151      	lsls	r1, r2, #5
 8008c12:	6a3a      	ldr	r2, [r7, #32]
 8008c14:	440a      	add	r2, r1
 8008c16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c1e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	7c9b      	ldrb	r3, [r3, #18]
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d003      	beq.n	8008c30 <USB_HC_StartXfer+0x2ec>
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	7c9b      	ldrb	r3, [r3, #18]
 8008c2c:	2b03      	cmp	r3, #3
 8008c2e:	d117      	bne.n	8008c60 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d113      	bne.n	8008c60 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	78db      	ldrb	r3, [r3, #3]
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d10f      	bne.n	8008c60 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008c40:	69fb      	ldr	r3, [r7, #28]
 8008c42:	015a      	lsls	r2, r3, #5
 8008c44:	6a3b      	ldr	r3, [r7, #32]
 8008c46:	4413      	add	r3, r2
 8008c48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	69fa      	ldr	r2, [r7, #28]
 8008c50:	0151      	lsls	r1, r2, #5
 8008c52:	6a3a      	ldr	r2, [r7, #32]
 8008c54:	440a      	add	r2, r1
 8008c56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c5e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	7c9b      	ldrb	r3, [r3, #18]
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	d162      	bne.n	8008d2e <USB_HC_StartXfer+0x3ea>
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	78db      	ldrb	r3, [r3, #3]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d15e      	bne.n	8008d2e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	3b01      	subs	r3, #1
 8008c76:	2b03      	cmp	r3, #3
 8008c78:	d858      	bhi.n	8008d2c <USB_HC_StartXfer+0x3e8>
 8008c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8008c80 <USB_HC_StartXfer+0x33c>)
 8008c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c80:	08008c91 	.word	0x08008c91
 8008c84:	08008cb3 	.word	0x08008cb3
 8008c88:	08008cd5 	.word	0x08008cd5
 8008c8c:	08008cf7 	.word	0x08008cf7
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8008c90:	69fb      	ldr	r3, [r7, #28]
 8008c92:	015a      	lsls	r2, r3, #5
 8008c94:	6a3b      	ldr	r3, [r7, #32]
 8008c96:	4413      	add	r3, r2
 8008c98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	69fa      	ldr	r2, [r7, #28]
 8008ca0:	0151      	lsls	r1, r2, #5
 8008ca2:	6a3a      	ldr	r2, [r7, #32]
 8008ca4:	440a      	add	r2, r1
 8008ca6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008caa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008cae:	6053      	str	r3, [r2, #4]
          break;
 8008cb0:	e03d      	b.n	8008d2e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8008cb2:	69fb      	ldr	r3, [r7, #28]
 8008cb4:	015a      	lsls	r2, r3, #5
 8008cb6:	6a3b      	ldr	r3, [r7, #32]
 8008cb8:	4413      	add	r3, r2
 8008cba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	69fa      	ldr	r2, [r7, #28]
 8008cc2:	0151      	lsls	r1, r2, #5
 8008cc4:	6a3a      	ldr	r2, [r7, #32]
 8008cc6:	440a      	add	r2, r1
 8008cc8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ccc:	f043 030e 	orr.w	r3, r3, #14
 8008cd0:	6053      	str	r3, [r2, #4]
          break;
 8008cd2:	e02c      	b.n	8008d2e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8008cd4:	69fb      	ldr	r3, [r7, #28]
 8008cd6:	015a      	lsls	r2, r3, #5
 8008cd8:	6a3b      	ldr	r3, [r7, #32]
 8008cda:	4413      	add	r3, r2
 8008cdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	69fa      	ldr	r2, [r7, #28]
 8008ce4:	0151      	lsls	r1, r2, #5
 8008ce6:	6a3a      	ldr	r2, [r7, #32]
 8008ce8:	440a      	add	r2, r1
 8008cea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008cee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008cf2:	6053      	str	r3, [r2, #4]
          break;
 8008cf4:	e01b      	b.n	8008d2e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8008cf6:	69fb      	ldr	r3, [r7, #28]
 8008cf8:	015a      	lsls	r2, r3, #5
 8008cfa:	6a3b      	ldr	r3, [r7, #32]
 8008cfc:	4413      	add	r3, r2
 8008cfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	69fa      	ldr	r2, [r7, #28]
 8008d06:	0151      	lsls	r1, r2, #5
 8008d08:	6a3a      	ldr	r2, [r7, #32]
 8008d0a:	440a      	add	r2, r1
 8008d0c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008d14:	6053      	str	r3, [r2, #4]
          break;
 8008d16:	e00a      	b.n	8008d2e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	015a      	lsls	r2, r3, #5
 8008d1c:	6a3b      	ldr	r3, [r7, #32]
 8008d1e:	4413      	add	r3, r2
 8008d20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d24:	461a      	mov	r2, r3
 8008d26:	2300      	movs	r3, #0
 8008d28:	6053      	str	r3, [r2, #4]
 8008d2a:	e000      	b.n	8008d2e <USB_HC_StartXfer+0x3ea>
          break;
 8008d2c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008d2e:	69fb      	ldr	r3, [r7, #28]
 8008d30:	015a      	lsls	r2, r3, #5
 8008d32:	6a3b      	ldr	r3, [r7, #32]
 8008d34:	4413      	add	r3, r2
 8008d36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008d44:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	78db      	ldrb	r3, [r3, #3]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d004      	beq.n	8008d58 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d54:	613b      	str	r3, [r7, #16]
 8008d56:	e003      	b.n	8008d60 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008d5e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008d66:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008d68:	69fb      	ldr	r3, [r7, #28]
 8008d6a:	015a      	lsls	r2, r3, #5
 8008d6c:	6a3b      	ldr	r3, [r7, #32]
 8008d6e:	4413      	add	r3, r2
 8008d70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d74:	461a      	mov	r2, r3
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008d7a:	79fb      	ldrb	r3, [r7, #7]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d003      	beq.n	8008d88 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8008d80:	2300      	movs	r3, #0
 8008d82:	e055      	b.n	8008e30 <USB_HC_StartXfer+0x4ec>
 8008d84:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	78db      	ldrb	r3, [r3, #3]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d14e      	bne.n	8008e2e <USB_HC_StartXfer+0x4ea>
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	6a1b      	ldr	r3, [r3, #32]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d04a      	beq.n	8008e2e <USB_HC_StartXfer+0x4ea>
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	79db      	ldrb	r3, [r3, #7]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d146      	bne.n	8008e2e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	7c9b      	ldrb	r3, [r3, #18]
 8008da4:	2b03      	cmp	r3, #3
 8008da6:	d831      	bhi.n	8008e0c <USB_HC_StartXfer+0x4c8>
 8008da8:	a201      	add	r2, pc, #4	@ (adr r2, 8008db0 <USB_HC_StartXfer+0x46c>)
 8008daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dae:	bf00      	nop
 8008db0:	08008dc1 	.word	0x08008dc1
 8008db4:	08008de5 	.word	0x08008de5
 8008db8:	08008dc1 	.word	0x08008dc1
 8008dbc:	08008de5 	.word	0x08008de5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	6a1b      	ldr	r3, [r3, #32]
 8008dc4:	3303      	adds	r3, #3
 8008dc6:	089b      	lsrs	r3, r3, #2
 8008dc8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008dca:	8afa      	ldrh	r2, [r7, #22]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d91c      	bls.n	8008e10 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	699b      	ldr	r3, [r3, #24]
 8008dda:	f043 0220 	orr.w	r2, r3, #32
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	619a      	str	r2, [r3, #24]
        }
        break;
 8008de2:	e015      	b.n	8008e10 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	6a1b      	ldr	r3, [r3, #32]
 8008de8:	3303      	adds	r3, #3
 8008dea:	089b      	lsrs	r3, r3, #2
 8008dec:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008dee:	8afa      	ldrh	r2, [r7, #22]
 8008df0:	6a3b      	ldr	r3, [r7, #32]
 8008df2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008df6:	691b      	ldr	r3, [r3, #16]
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d90a      	bls.n	8008e14 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	699b      	ldr	r3, [r3, #24]
 8008e02:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	619a      	str	r2, [r3, #24]
        }
        break;
 8008e0a:	e003      	b.n	8008e14 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8008e0c:	bf00      	nop
 8008e0e:	e002      	b.n	8008e16 <USB_HC_StartXfer+0x4d2>
        break;
 8008e10:	bf00      	nop
 8008e12:	e000      	b.n	8008e16 <USB_HC_StartXfer+0x4d2>
        break;
 8008e14:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	6999      	ldr	r1, [r3, #24]
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	785a      	ldrb	r2, [r3, #1]
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	6a1b      	ldr	r3, [r3, #32]
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	2000      	movs	r0, #0
 8008e26:	9000      	str	r0, [sp, #0]
 8008e28:	68f8      	ldr	r0, [r7, #12]
 8008e2a:	f7ff f9c9 	bl	80081c0 <USB_WritePacket>
  }

  return HAL_OK;
 8008e2e:	2300      	movs	r3, #0
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3728      	adds	r7, #40	@ 0x28
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b085      	sub	sp, #20
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008e4a:	695b      	ldr	r3, [r3, #20]
 8008e4c:	b29b      	uxth	r3, r3
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3714      	adds	r7, #20
 8008e52:	46bd      	mov	sp, r7
 8008e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e58:	4770      	bx	lr

08008e5a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008e5a:	b480      	push	{r7}
 8008e5c:	b089      	sub	sp, #36	@ 0x24
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
 8008e62:	460b      	mov	r3, r1
 8008e64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008e6a:	78fb      	ldrb	r3, [r7, #3]
 8008e6c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	015a      	lsls	r2, r3, #5
 8008e76:	69fb      	ldr	r3, [r7, #28]
 8008e78:	4413      	add	r3, r2
 8008e7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	0c9b      	lsrs	r3, r3, #18
 8008e82:	f003 0303 	and.w	r3, r3, #3
 8008e86:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008e88:	69bb      	ldr	r3, [r7, #24]
 8008e8a:	015a      	lsls	r2, r3, #5
 8008e8c:	69fb      	ldr	r3, [r7, #28]
 8008e8e:	4413      	add	r3, r2
 8008e90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	0fdb      	lsrs	r3, r3, #31
 8008e98:	f003 0301 	and.w	r3, r3, #1
 8008e9c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8008e9e:	69bb      	ldr	r3, [r7, #24]
 8008ea0:	015a      	lsls	r2, r3, #5
 8008ea2:	69fb      	ldr	r3, [r7, #28]
 8008ea4:	4413      	add	r3, r2
 8008ea6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	0fdb      	lsrs	r3, r3, #31
 8008eae:	f003 0301 	and.w	r3, r3, #1
 8008eb2:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	f003 0320 	and.w	r3, r3, #32
 8008ebc:	2b20      	cmp	r3, #32
 8008ebe:	d10d      	bne.n	8008edc <USB_HC_Halt+0x82>
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d10a      	bne.n	8008edc <USB_HC_Halt+0x82>
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d005      	beq.n	8008ed8 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	d002      	beq.n	8008ed8 <USB_HC_Halt+0x7e>
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	2b03      	cmp	r3, #3
 8008ed6:	d101      	bne.n	8008edc <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	e0d8      	b.n	800908e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d002      	beq.n	8008ee8 <USB_HC_Halt+0x8e>
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	2b02      	cmp	r3, #2
 8008ee6:	d173      	bne.n	8008fd0 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008ee8:	69bb      	ldr	r3, [r7, #24]
 8008eea:	015a      	lsls	r2, r3, #5
 8008eec:	69fb      	ldr	r3, [r7, #28]
 8008eee:	4413      	add	r3, r2
 8008ef0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	69ba      	ldr	r2, [r7, #24]
 8008ef8:	0151      	lsls	r1, r2, #5
 8008efa:	69fa      	ldr	r2, [r7, #28]
 8008efc:	440a      	add	r2, r1
 8008efe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f02:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008f06:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	f003 0320 	and.w	r3, r3, #32
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d14a      	bne.n	8008faa <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f18:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d133      	bne.n	8008f88 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008f20:	69bb      	ldr	r3, [r7, #24]
 8008f22:	015a      	lsls	r2, r3, #5
 8008f24:	69fb      	ldr	r3, [r7, #28]
 8008f26:	4413      	add	r3, r2
 8008f28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	69ba      	ldr	r2, [r7, #24]
 8008f30:	0151      	lsls	r1, r2, #5
 8008f32:	69fa      	ldr	r2, [r7, #28]
 8008f34:	440a      	add	r2, r1
 8008f36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f3a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008f3e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008f40:	69bb      	ldr	r3, [r7, #24]
 8008f42:	015a      	lsls	r2, r3, #5
 8008f44:	69fb      	ldr	r3, [r7, #28]
 8008f46:	4413      	add	r3, r2
 8008f48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	69ba      	ldr	r2, [r7, #24]
 8008f50:	0151      	lsls	r1, r2, #5
 8008f52:	69fa      	ldr	r2, [r7, #28]
 8008f54:	440a      	add	r2, r1
 8008f56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f5a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008f5e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	3301      	adds	r3, #1
 8008f64:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008f6c:	d82e      	bhi.n	8008fcc <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008f6e:	69bb      	ldr	r3, [r7, #24]
 8008f70:	015a      	lsls	r2, r3, #5
 8008f72:	69fb      	ldr	r3, [r7, #28]
 8008f74:	4413      	add	r3, r2
 8008f76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f84:	d0ec      	beq.n	8008f60 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008f86:	e081      	b.n	800908c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008f88:	69bb      	ldr	r3, [r7, #24]
 8008f8a:	015a      	lsls	r2, r3, #5
 8008f8c:	69fb      	ldr	r3, [r7, #28]
 8008f8e:	4413      	add	r3, r2
 8008f90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	69ba      	ldr	r2, [r7, #24]
 8008f98:	0151      	lsls	r1, r2, #5
 8008f9a:	69fa      	ldr	r2, [r7, #28]
 8008f9c:	440a      	add	r2, r1
 8008f9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008fa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008fa6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008fa8:	e070      	b.n	800908c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008faa:	69bb      	ldr	r3, [r7, #24]
 8008fac:	015a      	lsls	r2, r3, #5
 8008fae:	69fb      	ldr	r3, [r7, #28]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	69ba      	ldr	r2, [r7, #24]
 8008fba:	0151      	lsls	r1, r2, #5
 8008fbc:	69fa      	ldr	r2, [r7, #28]
 8008fbe:	440a      	add	r2, r1
 8008fc0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008fc4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008fc8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008fca:	e05f      	b.n	800908c <USB_HC_Halt+0x232>
            break;
 8008fcc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008fce:	e05d      	b.n	800908c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008fd0:	69bb      	ldr	r3, [r7, #24]
 8008fd2:	015a      	lsls	r2, r3, #5
 8008fd4:	69fb      	ldr	r3, [r7, #28]
 8008fd6:	4413      	add	r3, r2
 8008fd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	69ba      	ldr	r2, [r7, #24]
 8008fe0:	0151      	lsls	r1, r2, #5
 8008fe2:	69fa      	ldr	r2, [r7, #28]
 8008fe4:	440a      	add	r2, r1
 8008fe6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008fea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008fee:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008ff0:	69fb      	ldr	r3, [r7, #28]
 8008ff2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ff6:	691b      	ldr	r3, [r3, #16]
 8008ff8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d133      	bne.n	8009068 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009000:	69bb      	ldr	r3, [r7, #24]
 8009002:	015a      	lsls	r2, r3, #5
 8009004:	69fb      	ldr	r3, [r7, #28]
 8009006:	4413      	add	r3, r2
 8009008:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	69ba      	ldr	r2, [r7, #24]
 8009010:	0151      	lsls	r1, r2, #5
 8009012:	69fa      	ldr	r2, [r7, #28]
 8009014:	440a      	add	r2, r1
 8009016:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800901a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800901e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009020:	69bb      	ldr	r3, [r7, #24]
 8009022:	015a      	lsls	r2, r3, #5
 8009024:	69fb      	ldr	r3, [r7, #28]
 8009026:	4413      	add	r3, r2
 8009028:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	69ba      	ldr	r2, [r7, #24]
 8009030:	0151      	lsls	r1, r2, #5
 8009032:	69fa      	ldr	r2, [r7, #28]
 8009034:	440a      	add	r2, r1
 8009036:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800903a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800903e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	3301      	adds	r3, #1
 8009044:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800904c:	d81d      	bhi.n	800908a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800904e:	69bb      	ldr	r3, [r7, #24]
 8009050:	015a      	lsls	r2, r3, #5
 8009052:	69fb      	ldr	r3, [r7, #28]
 8009054:	4413      	add	r3, r2
 8009056:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009060:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009064:	d0ec      	beq.n	8009040 <USB_HC_Halt+0x1e6>
 8009066:	e011      	b.n	800908c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009068:	69bb      	ldr	r3, [r7, #24]
 800906a:	015a      	lsls	r2, r3, #5
 800906c:	69fb      	ldr	r3, [r7, #28]
 800906e:	4413      	add	r3, r2
 8009070:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	69ba      	ldr	r2, [r7, #24]
 8009078:	0151      	lsls	r1, r2, #5
 800907a:	69fa      	ldr	r2, [r7, #28]
 800907c:	440a      	add	r2, r1
 800907e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009082:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009086:	6013      	str	r3, [r2, #0]
 8009088:	e000      	b.n	800908c <USB_HC_Halt+0x232>
          break;
 800908a:	bf00      	nop
    }
  }

  return HAL_OK;
 800908c:	2300      	movs	r3, #0
}
 800908e:	4618      	mov	r0, r3
 8009090:	3724      	adds	r7, #36	@ 0x24
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr
	...

0800909c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800909c:	b480      	push	{r7}
 800909e:	b087      	sub	sp, #28
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	460b      	mov	r3, r1
 80090a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80090ac:	78fb      	ldrb	r3, [r7, #3]
 80090ae:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80090b0:	2301      	movs	r3, #1
 80090b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	04da      	lsls	r2, r3, #19
 80090b8:	4b15      	ldr	r3, [pc, #84]	@ (8009110 <USB_DoPing+0x74>)
 80090ba:	4013      	ands	r3, r2
 80090bc:	693a      	ldr	r2, [r7, #16]
 80090be:	0151      	lsls	r1, r2, #5
 80090c0:	697a      	ldr	r2, [r7, #20]
 80090c2:	440a      	add	r2, r1
 80090c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80090c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80090cc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	015a      	lsls	r2, r3, #5
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	4413      	add	r3, r2
 80090d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80090e4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80090ec:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	015a      	lsls	r2, r3, #5
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	4413      	add	r3, r2
 80090f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090fa:	461a      	mov	r2, r3
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009100:	2300      	movs	r3, #0
}
 8009102:	4618      	mov	r0, r3
 8009104:	371c      	adds	r7, #28
 8009106:	46bd      	mov	sp, r7
 8009108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910c:	4770      	bx	lr
 800910e:	bf00      	nop
 8009110:	1ff80000 	.word	0x1ff80000

08009114 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b088      	sub	sp, #32
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800911c:	2300      	movs	r3, #0
 800911e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8009124:	2300      	movs	r3, #0
 8009126:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f7fe ff8c 	bl	8008046 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800912e:	2110      	movs	r1, #16
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f7fe ffe5 	bl	8008100 <USB_FlushTxFifo>
 8009136:	4603      	mov	r3, r0
 8009138:	2b00      	cmp	r3, #0
 800913a:	d001      	beq.n	8009140 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800913c:	2301      	movs	r3, #1
 800913e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f7ff f80f 	bl	8008164 <USB_FlushRxFifo>
 8009146:	4603      	mov	r3, r0
 8009148:	2b00      	cmp	r3, #0
 800914a:	d001      	beq.n	8009150 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800914c:	2301      	movs	r3, #1
 800914e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009150:	2300      	movs	r3, #0
 8009152:	61bb      	str	r3, [r7, #24]
 8009154:	e01f      	b.n	8009196 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8009156:	69bb      	ldr	r3, [r7, #24]
 8009158:	015a      	lsls	r2, r3, #5
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	4413      	add	r3, r2
 800915e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800916c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009174:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800917c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800917e:	69bb      	ldr	r3, [r7, #24]
 8009180:	015a      	lsls	r2, r3, #5
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	4413      	add	r3, r2
 8009186:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800918a:	461a      	mov	r2, r3
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009190:	69bb      	ldr	r3, [r7, #24]
 8009192:	3301      	adds	r3, #1
 8009194:	61bb      	str	r3, [r7, #24]
 8009196:	69bb      	ldr	r3, [r7, #24]
 8009198:	2b0f      	cmp	r3, #15
 800919a:	d9dc      	bls.n	8009156 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800919c:	2300      	movs	r3, #0
 800919e:	61bb      	str	r3, [r7, #24]
 80091a0:	e034      	b.n	800920c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80091a2:	69bb      	ldr	r3, [r7, #24]
 80091a4:	015a      	lsls	r2, r3, #5
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	4413      	add	r3, r2
 80091aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80091b8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80091c0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80091c8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80091ca:	69bb      	ldr	r3, [r7, #24]
 80091cc:	015a      	lsls	r2, r3, #5
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	4413      	add	r3, r2
 80091d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091d6:	461a      	mov	r2, r3
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	3301      	adds	r3, #1
 80091e0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80091e8:	d80c      	bhi.n	8009204 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80091ea:	69bb      	ldr	r3, [r7, #24]
 80091ec:	015a      	lsls	r2, r3, #5
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	4413      	add	r3, r2
 80091f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80091fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009200:	d0ec      	beq.n	80091dc <USB_StopHost+0xc8>
 8009202:	e000      	b.n	8009206 <USB_StopHost+0xf2>
        break;
 8009204:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	3301      	adds	r3, #1
 800920a:	61bb      	str	r3, [r7, #24]
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	2b0f      	cmp	r3, #15
 8009210:	d9c7      	bls.n	80091a2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009218:	461a      	mov	r2, r3
 800921a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800921e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009226:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f7fe fefb 	bl	8008024 <USB_EnableGlobalInt>

  return ret;
 800922e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009230:	4618      	mov	r0, r3
 8009232:	3720      	adds	r7, #32
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009238:	b590      	push	{r4, r7, lr}
 800923a:	b089      	sub	sp, #36	@ 0x24
 800923c:	af04      	add	r7, sp, #16
 800923e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009240:	2301      	movs	r3, #1
 8009242:	2202      	movs	r2, #2
 8009244:	2102      	movs	r1, #2
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 fc85 	bl	8009b56 <USBH_FindInterface>
 800924c:	4603      	mov	r3, r0
 800924e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009250:	7bfb      	ldrb	r3, [r7, #15]
 8009252:	2bff      	cmp	r3, #255	@ 0xff
 8009254:	d002      	beq.n	800925c <USBH_CDC_InterfaceInit+0x24>
 8009256:	7bfb      	ldrb	r3, [r7, #15]
 8009258:	2b01      	cmp	r3, #1
 800925a:	d901      	bls.n	8009260 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800925c:	2302      	movs	r3, #2
 800925e:	e13d      	b.n	80094dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009260:	7bfb      	ldrb	r3, [r7, #15]
 8009262:	4619      	mov	r1, r3
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f000 fc5a 	bl	8009b1e <USBH_SelectInterface>
 800926a:	4603      	mov	r3, r0
 800926c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800926e:	7bbb      	ldrb	r3, [r7, #14]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d001      	beq.n	8009278 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009274:	2302      	movs	r3, #2
 8009276:	e131      	b.n	80094dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800927e:	2050      	movs	r0, #80	@ 0x50
 8009280:	f002 fd9e 	bl	800bdc0 <malloc>
 8009284:	4603      	mov	r3, r0
 8009286:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800928e:	69db      	ldr	r3, [r3, #28]
 8009290:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d101      	bne.n	800929c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009298:	2302      	movs	r3, #2
 800929a:	e11f      	b.n	80094dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800929c:	2250      	movs	r2, #80	@ 0x50
 800929e:	2100      	movs	r1, #0
 80092a0:	68b8      	ldr	r0, [r7, #8]
 80092a2:	f002 fe4b 	bl	800bf3c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80092a6:	7bfb      	ldrb	r3, [r7, #15]
 80092a8:	687a      	ldr	r2, [r7, #4]
 80092aa:	211a      	movs	r1, #26
 80092ac:	fb01 f303 	mul.w	r3, r1, r3
 80092b0:	4413      	add	r3, r2
 80092b2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	b25b      	sxtb	r3, r3
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	da15      	bge.n	80092ea <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80092be:	7bfb      	ldrb	r3, [r7, #15]
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	211a      	movs	r1, #26
 80092c4:	fb01 f303 	mul.w	r3, r1, r3
 80092c8:	4413      	add	r3, r2
 80092ca:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80092ce:	781a      	ldrb	r2, [r3, #0]
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80092d4:	7bfb      	ldrb	r3, [r7, #15]
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	211a      	movs	r1, #26
 80092da:	fb01 f303 	mul.w	r3, r1, r3
 80092de:	4413      	add	r3, r2
 80092e0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80092e4:	881a      	ldrh	r2, [r3, #0]
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	785b      	ldrb	r3, [r3, #1]
 80092ee:	4619      	mov	r1, r3
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f001 ffbe 	bl	800b272 <USBH_AllocPipe>
 80092f6:	4603      	mov	r3, r0
 80092f8:	461a      	mov	r2, r3
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	7819      	ldrb	r1, [r3, #0]
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	7858      	ldrb	r0, [r3, #1]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009312:	68ba      	ldr	r2, [r7, #8]
 8009314:	8952      	ldrh	r2, [r2, #10]
 8009316:	9202      	str	r2, [sp, #8]
 8009318:	2203      	movs	r2, #3
 800931a:	9201      	str	r2, [sp, #4]
 800931c:	9300      	str	r3, [sp, #0]
 800931e:	4623      	mov	r3, r4
 8009320:	4602      	mov	r2, r0
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f001 ff76 	bl	800b214 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	2200      	movs	r2, #0
 800932e:	4619      	mov	r1, r3
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f002 fa85 	bl	800b840 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009336:	2300      	movs	r3, #0
 8009338:	2200      	movs	r2, #0
 800933a:	210a      	movs	r1, #10
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 fc0a 	bl	8009b56 <USBH_FindInterface>
 8009342:	4603      	mov	r3, r0
 8009344:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009346:	7bfb      	ldrb	r3, [r7, #15]
 8009348:	2bff      	cmp	r3, #255	@ 0xff
 800934a:	d002      	beq.n	8009352 <USBH_CDC_InterfaceInit+0x11a>
 800934c:	7bfb      	ldrb	r3, [r7, #15]
 800934e:	2b01      	cmp	r3, #1
 8009350:	d901      	bls.n	8009356 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009352:	2302      	movs	r3, #2
 8009354:	e0c2      	b.n	80094dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009356:	7bfb      	ldrb	r3, [r7, #15]
 8009358:	687a      	ldr	r2, [r7, #4]
 800935a:	211a      	movs	r1, #26
 800935c:	fb01 f303 	mul.w	r3, r1, r3
 8009360:	4413      	add	r3, r2
 8009362:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	b25b      	sxtb	r3, r3
 800936a:	2b00      	cmp	r3, #0
 800936c:	da16      	bge.n	800939c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800936e:	7bfb      	ldrb	r3, [r7, #15]
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	211a      	movs	r1, #26
 8009374:	fb01 f303 	mul.w	r3, r1, r3
 8009378:	4413      	add	r3, r2
 800937a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800937e:	781a      	ldrb	r2, [r3, #0]
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009384:	7bfb      	ldrb	r3, [r7, #15]
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	211a      	movs	r1, #26
 800938a:	fb01 f303 	mul.w	r3, r1, r3
 800938e:	4413      	add	r3, r2
 8009390:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009394:	881a      	ldrh	r2, [r3, #0]
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	835a      	strh	r2, [r3, #26]
 800939a:	e015      	b.n	80093c8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800939c:	7bfb      	ldrb	r3, [r7, #15]
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	211a      	movs	r1, #26
 80093a2:	fb01 f303 	mul.w	r3, r1, r3
 80093a6:	4413      	add	r3, r2
 80093a8:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80093ac:	781a      	ldrb	r2, [r3, #0]
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80093b2:	7bfb      	ldrb	r3, [r7, #15]
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	211a      	movs	r1, #26
 80093b8:	fb01 f303 	mul.w	r3, r1, r3
 80093bc:	4413      	add	r3, r2
 80093be:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80093c2:	881a      	ldrh	r2, [r3, #0]
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80093c8:	7bfb      	ldrb	r3, [r7, #15]
 80093ca:	687a      	ldr	r2, [r7, #4]
 80093cc:	211a      	movs	r1, #26
 80093ce:	fb01 f303 	mul.w	r3, r1, r3
 80093d2:	4413      	add	r3, r2
 80093d4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	b25b      	sxtb	r3, r3
 80093dc:	2b00      	cmp	r3, #0
 80093de:	da16      	bge.n	800940e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80093e0:	7bfb      	ldrb	r3, [r7, #15]
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	211a      	movs	r1, #26
 80093e6:	fb01 f303 	mul.w	r3, r1, r3
 80093ea:	4413      	add	r3, r2
 80093ec:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80093f0:	781a      	ldrb	r2, [r3, #0]
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80093f6:	7bfb      	ldrb	r3, [r7, #15]
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	211a      	movs	r1, #26
 80093fc:	fb01 f303 	mul.w	r3, r1, r3
 8009400:	4413      	add	r3, r2
 8009402:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009406:	881a      	ldrh	r2, [r3, #0]
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	835a      	strh	r2, [r3, #26]
 800940c:	e015      	b.n	800943a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800940e:	7bfb      	ldrb	r3, [r7, #15]
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	211a      	movs	r1, #26
 8009414:	fb01 f303 	mul.w	r3, r1, r3
 8009418:	4413      	add	r3, r2
 800941a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800941e:	781a      	ldrb	r2, [r3, #0]
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009424:	7bfb      	ldrb	r3, [r7, #15]
 8009426:	687a      	ldr	r2, [r7, #4]
 8009428:	211a      	movs	r1, #26
 800942a:	fb01 f303 	mul.w	r3, r1, r3
 800942e:	4413      	add	r3, r2
 8009430:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009434:	881a      	ldrh	r2, [r3, #0]
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	7b9b      	ldrb	r3, [r3, #14]
 800943e:	4619      	mov	r1, r3
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f001 ff16 	bl	800b272 <USBH_AllocPipe>
 8009446:	4603      	mov	r3, r0
 8009448:	461a      	mov	r2, r3
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	7bdb      	ldrb	r3, [r3, #15]
 8009452:	4619      	mov	r1, r3
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f001 ff0c 	bl	800b272 <USBH_AllocPipe>
 800945a:	4603      	mov	r3, r0
 800945c:	461a      	mov	r2, r3
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	7b59      	ldrb	r1, [r3, #13]
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	7b98      	ldrb	r0, [r3, #14]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009476:	68ba      	ldr	r2, [r7, #8]
 8009478:	8b12      	ldrh	r2, [r2, #24]
 800947a:	9202      	str	r2, [sp, #8]
 800947c:	2202      	movs	r2, #2
 800947e:	9201      	str	r2, [sp, #4]
 8009480:	9300      	str	r3, [sp, #0]
 8009482:	4623      	mov	r3, r4
 8009484:	4602      	mov	r2, r0
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f001 fec4 	bl	800b214 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	7b19      	ldrb	r1, [r3, #12]
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	7bd8      	ldrb	r0, [r3, #15]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80094a0:	68ba      	ldr	r2, [r7, #8]
 80094a2:	8b52      	ldrh	r2, [r2, #26]
 80094a4:	9202      	str	r2, [sp, #8]
 80094a6:	2202      	movs	r2, #2
 80094a8:	9201      	str	r2, [sp, #4]
 80094aa:	9300      	str	r3, [sp, #0]
 80094ac:	4623      	mov	r3, r4
 80094ae:	4602      	mov	r2, r0
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f001 feaf 	bl	800b214 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	2200      	movs	r2, #0
 80094ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	7b5b      	ldrb	r3, [r3, #13]
 80094c2:	2200      	movs	r2, #0
 80094c4:	4619      	mov	r1, r3
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f002 f9ba 	bl	800b840 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	7b1b      	ldrb	r3, [r3, #12]
 80094d0:	2200      	movs	r2, #0
 80094d2:	4619      	mov	r1, r3
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f002 f9b3 	bl	800b840 <USBH_LL_SetToggle>

  return USBH_OK;
 80094da:	2300      	movs	r3, #0
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3714      	adds	r7, #20
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd90      	pop	{r4, r7, pc}

080094e4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b084      	sub	sp, #16
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80094f2:	69db      	ldr	r3, [r3, #28]
 80094f4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d00e      	beq.n	800951c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	4619      	mov	r1, r3
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f001 fea4 	bl	800b252 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	781b      	ldrb	r3, [r3, #0]
 800950e:	4619      	mov	r1, r3
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f001 fecf 	bl	800b2b4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2200      	movs	r2, #0
 800951a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	7b1b      	ldrb	r3, [r3, #12]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d00e      	beq.n	8009542 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	7b1b      	ldrb	r3, [r3, #12]
 8009528:	4619      	mov	r1, r3
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f001 fe91 	bl	800b252 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	7b1b      	ldrb	r3, [r3, #12]
 8009534:	4619      	mov	r1, r3
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f001 febc 	bl	800b2b4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2200      	movs	r2, #0
 8009540:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	7b5b      	ldrb	r3, [r3, #13]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d00e      	beq.n	8009568 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	7b5b      	ldrb	r3, [r3, #13]
 800954e:	4619      	mov	r1, r3
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f001 fe7e 	bl	800b252 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	7b5b      	ldrb	r3, [r3, #13]
 800955a:	4619      	mov	r1, r3
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f001 fea9 	bl	800b2b4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2200      	movs	r2, #0
 8009566:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800956e:	69db      	ldr	r3, [r3, #28]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d00b      	beq.n	800958c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800957a:	69db      	ldr	r3, [r3, #28]
 800957c:	4618      	mov	r0, r3
 800957e:	f002 fc27 	bl	800bdd0 <free>
    phost->pActiveClass->pData = 0U;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009588:	2200      	movs	r2, #0
 800958a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800958c:	2300      	movs	r3, #0
}
 800958e:	4618      	mov	r0, r3
 8009590:	3710      	adds	r7, #16
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}

08009596 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009596:	b580      	push	{r7, lr}
 8009598:	b084      	sub	sp, #16
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80095a4:	69db      	ldr	r3, [r3, #28]
 80095a6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	3340      	adds	r3, #64	@ 0x40
 80095ac:	4619      	mov	r1, r3
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 f8b1 	bl	8009716 <GetLineCoding>
 80095b4:	4603      	mov	r3, r0
 80095b6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80095b8:	7afb      	ldrb	r3, [r7, #11]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d105      	bne.n	80095ca <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80095c4:	2102      	movs	r1, #2
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80095ca:	7afb      	ldrb	r3, [r7, #11]
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3710      	adds	r7, #16
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80095dc:	2301      	movs	r3, #1
 80095de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80095e0:	2300      	movs	r3, #0
 80095e2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80095ea:	69db      	ldr	r3, [r3, #28]
 80095ec:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80095f4:	2b04      	cmp	r3, #4
 80095f6:	d877      	bhi.n	80096e8 <USBH_CDC_Process+0x114>
 80095f8:	a201      	add	r2, pc, #4	@ (adr r2, 8009600 <USBH_CDC_Process+0x2c>)
 80095fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095fe:	bf00      	nop
 8009600:	08009615 	.word	0x08009615
 8009604:	0800961b 	.word	0x0800961b
 8009608:	0800964b 	.word	0x0800964b
 800960c:	080096bf 	.word	0x080096bf
 8009610:	080096cd 	.word	0x080096cd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009614:	2300      	movs	r3, #0
 8009616:	73fb      	strb	r3, [r7, #15]
      break;
 8009618:	e06d      	b.n	80096f6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800961e:	4619      	mov	r1, r3
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 f897 	bl	8009754 <SetLineCoding>
 8009626:	4603      	mov	r3, r0
 8009628:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800962a:	7bbb      	ldrb	r3, [r7, #14]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d104      	bne.n	800963a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	2202      	movs	r2, #2
 8009634:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009638:	e058      	b.n	80096ec <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800963a:	7bbb      	ldrb	r3, [r7, #14]
 800963c:	2b01      	cmp	r3, #1
 800963e:	d055      	beq.n	80096ec <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	2204      	movs	r2, #4
 8009644:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009648:	e050      	b.n	80096ec <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	3340      	adds	r3, #64	@ 0x40
 800964e:	4619      	mov	r1, r3
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f000 f860 	bl	8009716 <GetLineCoding>
 8009656:	4603      	mov	r3, r0
 8009658:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800965a:	7bbb      	ldrb	r3, [r7, #14]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d126      	bne.n	80096ae <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	2200      	movs	r2, #0
 8009664:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009672:	791b      	ldrb	r3, [r3, #4]
 8009674:	429a      	cmp	r2, r3
 8009676:	d13b      	bne.n	80096f0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009682:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009684:	429a      	cmp	r2, r3
 8009686:	d133      	bne.n	80096f0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009692:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009694:	429a      	cmp	r2, r3
 8009696:	d12b      	bne.n	80096f0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80096a0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d124      	bne.n	80096f0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f000 f958 	bl	800995c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80096ac:	e020      	b.n	80096f0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80096ae:	7bbb      	ldrb	r3, [r7, #14]
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d01d      	beq.n	80096f0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	2204      	movs	r2, #4
 80096b8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80096bc:	e018      	b.n	80096f0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 f867 	bl	8009792 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f000 f8da 	bl	800987e <CDC_ProcessReception>
      break;
 80096ca:	e014      	b.n	80096f6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80096cc:	2100      	movs	r1, #0
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f001 f81a 	bl	800a708 <USBH_ClrFeature>
 80096d4:	4603      	mov	r3, r0
 80096d6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80096d8:	7bbb      	ldrb	r3, [r7, #14]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d10a      	bne.n	80096f4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	2200      	movs	r2, #0
 80096e2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80096e6:	e005      	b.n	80096f4 <USBH_CDC_Process+0x120>

    default:
      break;
 80096e8:	bf00      	nop
 80096ea:	e004      	b.n	80096f6 <USBH_CDC_Process+0x122>
      break;
 80096ec:	bf00      	nop
 80096ee:	e002      	b.n	80096f6 <USBH_CDC_Process+0x122>
      break;
 80096f0:	bf00      	nop
 80096f2:	e000      	b.n	80096f6 <USBH_CDC_Process+0x122>
      break;
 80096f4:	bf00      	nop

  }

  return status;
 80096f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3710      	adds	r7, #16
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009700:	b480      	push	{r7}
 8009702:	b083      	sub	sp, #12
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009708:	2300      	movs	r3, #0
}
 800970a:	4618      	mov	r0, r3
 800970c:	370c      	adds	r7, #12
 800970e:	46bd      	mov	sp, r7
 8009710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009714:	4770      	bx	lr

08009716 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009716:	b580      	push	{r7, lr}
 8009718:	b082      	sub	sp, #8
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
 800971e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	22a1      	movs	r2, #161	@ 0xa1
 8009724:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2221      	movs	r2, #33	@ 0x21
 800972a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2200      	movs	r2, #0
 8009730:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2200      	movs	r2, #0
 8009736:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2207      	movs	r2, #7
 800973c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	2207      	movs	r2, #7
 8009742:	4619      	mov	r1, r3
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f001 fb14 	bl	800ad72 <USBH_CtlReq>
 800974a:	4603      	mov	r3, r0
}
 800974c:	4618      	mov	r0, r3
 800974e:	3708      	adds	r7, #8
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2221      	movs	r2, #33	@ 0x21
 8009762:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2220      	movs	r2, #32
 8009768:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2200      	movs	r2, #0
 8009774:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2207      	movs	r2, #7
 800977a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	2207      	movs	r2, #7
 8009780:	4619      	mov	r1, r3
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f001 faf5 	bl	800ad72 <USBH_CtlReq>
 8009788:	4603      	mov	r3, r0
}
 800978a:	4618      	mov	r0, r3
 800978c:	3708      	adds	r7, #8
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}

08009792 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009792:	b580      	push	{r7, lr}
 8009794:	b086      	sub	sp, #24
 8009796:	af02      	add	r7, sp, #8
 8009798:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80097a0:	69db      	ldr	r3, [r3, #28]
 80097a2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80097a4:	2300      	movs	r3, #0
 80097a6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	d002      	beq.n	80097b8 <CDC_ProcessTransmission+0x26>
 80097b2:	2b02      	cmp	r3, #2
 80097b4:	d023      	beq.n	80097fe <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80097b6:	e05e      	b.n	8009876 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097bc:	68fa      	ldr	r2, [r7, #12]
 80097be:	8b12      	ldrh	r2, [r2, #24]
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d90b      	bls.n	80097dc <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	69d9      	ldr	r1, [r3, #28]
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	8b1a      	ldrh	r2, [r3, #24]
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	7b5b      	ldrb	r3, [r3, #13]
 80097d0:	2001      	movs	r0, #1
 80097d2:	9000      	str	r0, [sp, #0]
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f001 fcda 	bl	800b18e <USBH_BulkSendData>
 80097da:	e00b      	b.n	80097f4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80097e4:	b29a      	uxth	r2, r3
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	7b5b      	ldrb	r3, [r3, #13]
 80097ea:	2001      	movs	r0, #1
 80097ec:	9000      	str	r0, [sp, #0]
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f001 fccd 	bl	800b18e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2202      	movs	r2, #2
 80097f8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80097fc:	e03b      	b.n	8009876 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	7b5b      	ldrb	r3, [r3, #13]
 8009802:	4619      	mov	r1, r3
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f001 fff1 	bl	800b7ec <USBH_LL_GetURBState>
 800980a:	4603      	mov	r3, r0
 800980c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800980e:	7afb      	ldrb	r3, [r7, #11]
 8009810:	2b01      	cmp	r3, #1
 8009812:	d128      	bne.n	8009866 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009818:	68fa      	ldr	r2, [r7, #12]
 800981a:	8b12      	ldrh	r2, [r2, #24]
 800981c:	4293      	cmp	r3, r2
 800981e:	d90e      	bls.n	800983e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009824:	68fa      	ldr	r2, [r7, #12]
 8009826:	8b12      	ldrh	r2, [r2, #24]
 8009828:	1a9a      	subs	r2, r3, r2
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	69db      	ldr	r3, [r3, #28]
 8009832:	68fa      	ldr	r2, [r7, #12]
 8009834:	8b12      	ldrh	r2, [r2, #24]
 8009836:	441a      	add	r2, r3
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	61da      	str	r2, [r3, #28]
 800983c:	e002      	b.n	8009844 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2200      	movs	r2, #0
 8009842:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009848:	2b00      	cmp	r3, #0
 800984a:	d004      	beq.n	8009856 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2201      	movs	r2, #1
 8009850:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009854:	e00e      	b.n	8009874 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2200      	movs	r2, #0
 800985a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 f868 	bl	8009934 <USBH_CDC_TransmitCallback>
      break;
 8009864:	e006      	b.n	8009874 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8009866:	7afb      	ldrb	r3, [r7, #11]
 8009868:	2b02      	cmp	r3, #2
 800986a:	d103      	bne.n	8009874 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2201      	movs	r2, #1
 8009870:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009874:	bf00      	nop
  }
}
 8009876:	bf00      	nop
 8009878:	3710      	adds	r7, #16
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}

0800987e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800987e:	b580      	push	{r7, lr}
 8009880:	b086      	sub	sp, #24
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800988c:	69db      	ldr	r3, [r3, #28]
 800988e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009890:	2300      	movs	r3, #0
 8009892:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800989a:	2b03      	cmp	r3, #3
 800989c:	d002      	beq.n	80098a4 <CDC_ProcessReception+0x26>
 800989e:	2b04      	cmp	r3, #4
 80098a0:	d00e      	beq.n	80098c0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80098a2:	e043      	b.n	800992c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	6a19      	ldr	r1, [r3, #32]
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	8b5a      	ldrh	r2, [r3, #26]
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	7b1b      	ldrb	r3, [r3, #12]
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f001 fc91 	bl	800b1d8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	2204      	movs	r2, #4
 80098ba:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80098be:	e035      	b.n	800992c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	7b1b      	ldrb	r3, [r3, #12]
 80098c4:	4619      	mov	r1, r3
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f001 ff90 	bl	800b7ec <USBH_LL_GetURBState>
 80098cc:	4603      	mov	r3, r0
 80098ce:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80098d0:	7cfb      	ldrb	r3, [r7, #19]
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d129      	bne.n	800992a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	7b1b      	ldrb	r3, [r3, #12]
 80098da:	4619      	mov	r1, r3
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f001 fef3 	bl	800b6c8 <USBH_LL_GetLastXferSize>
 80098e2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098e8:	68fa      	ldr	r2, [r7, #12]
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d016      	beq.n	800991c <CDC_ProcessReception+0x9e>
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	8b5b      	ldrh	r3, [r3, #26]
 80098f2:	461a      	mov	r2, r3
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d110      	bne.n	800991c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	1ad2      	subs	r2, r2, r3
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	6a1a      	ldr	r2, [r3, #32]
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	441a      	add	r2, r3
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	2203      	movs	r2, #3
 8009916:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800991a:	e006      	b.n	800992a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	2200      	movs	r2, #0
 8009920:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 f80f 	bl	8009948 <USBH_CDC_ReceiveCallback>
      break;
 800992a:	bf00      	nop
  }
}
 800992c:	bf00      	nop
 800992e:	3718      	adds	r7, #24
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}

08009934 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009934:	b480      	push	{r7}
 8009936:	b083      	sub	sp, #12
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800993c:	bf00      	nop
 800993e:	370c      	adds	r7, #12
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr

08009948 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009948:	b480      	push	{r7}
 800994a:	b083      	sub	sp, #12
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009950:	bf00      	nop
 8009952:	370c      	adds	r7, #12
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr

0800995c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800995c:	b480      	push	{r7}
 800995e:	b083      	sub	sp, #12
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009964:	bf00      	nop
 8009966:	370c      	adds	r7, #12
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr

08009970 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b084      	sub	sp, #16
 8009974:	af00      	add	r7, sp, #0
 8009976:	60f8      	str	r0, [r7, #12]
 8009978:	60b9      	str	r1, [r7, #8]
 800997a:	4613      	mov	r3, r2
 800997c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d101      	bne.n	8009988 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009984:	2302      	movs	r3, #2
 8009986:	e029      	b.n	80099dc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	79fa      	ldrb	r2, [r7, #7]
 800998c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	2200      	movs	r2, #0
 8009994:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	2200      	movs	r2, #0
 800999c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80099a0:	68f8      	ldr	r0, [r7, #12]
 80099a2:	f000 f81f 	bl	80099e4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2200      	movs	r2, #0
 80099aa:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2200      	movs	r2, #0
 80099b2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2200      	movs	r2, #0
 80099ba:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2200      	movs	r2, #0
 80099c2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d003      	beq.n	80099d4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	68ba      	ldr	r2, [r7, #8]
 80099d0:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80099d4:	68f8      	ldr	r0, [r7, #12]
 80099d6:	f001 fdc3 	bl	800b560 <USBH_LL_Init>

  return USBH_OK;
 80099da:	2300      	movs	r3, #0
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3710      	adds	r7, #16
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80099ec:	2300      	movs	r3, #0
 80099ee:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80099f0:	2300      	movs	r3, #0
 80099f2:	60fb      	str	r3, [r7, #12]
 80099f4:	e009      	b.n	8009a0a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	33e0      	adds	r3, #224	@ 0xe0
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	4413      	add	r3, r2
 8009a00:	2200      	movs	r2, #0
 8009a02:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	3301      	adds	r3, #1
 8009a08:	60fb      	str	r3, [r7, #12]
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	2b0f      	cmp	r3, #15
 8009a0e:	d9f2      	bls.n	80099f6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009a10:	2300      	movs	r3, #0
 8009a12:	60fb      	str	r3, [r7, #12]
 8009a14:	e009      	b.n	8009a2a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	4413      	add	r3, r2
 8009a1c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009a20:	2200      	movs	r2, #0
 8009a22:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	3301      	adds	r3, #1
 8009a28:	60fb      	str	r3, [r7, #12]
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a30:	d3f1      	bcc.n	8009a16 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2200      	movs	r2, #0
 8009a36:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2201      	movs	r2, #1
 8009a42:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2201      	movs	r2, #1
 8009a50:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2240      	movs	r2, #64	@ 0x40
 8009a56:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2200      	movs	r2, #0
 8009a62:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2201      	movs	r2, #1
 8009a6a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2200      	movs	r2, #0
 8009a72:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	331c      	adds	r3, #28
 8009a82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009a86:	2100      	movs	r1, #0
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f002 fa57 	bl	800bf3c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009a94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009a98:	2100      	movs	r1, #0
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f002 fa4e 	bl	800bf3c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009aa6:	2212      	movs	r2, #18
 8009aa8:	2100      	movs	r1, #0
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f002 fa46 	bl	800bf3c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009ab6:	223e      	movs	r2, #62	@ 0x3e
 8009ab8:	2100      	movs	r1, #0
 8009aba:	4618      	mov	r0, r3
 8009abc:	f002 fa3e 	bl	800bf3c <memset>

  return USBH_OK;
 8009ac0:	2300      	movs	r3, #0
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3710      	adds	r7, #16
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}

08009aca <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009aca:	b480      	push	{r7}
 8009acc:	b085      	sub	sp, #20
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	6078      	str	r0, [r7, #4]
 8009ad2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d016      	beq.n	8009b0c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d10e      	bne.n	8009b06 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009aee:	1c59      	adds	r1, r3, #1
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8009af6:	687a      	ldr	r2, [r7, #4]
 8009af8:	33de      	adds	r3, #222	@ 0xde
 8009afa:	6839      	ldr	r1, [r7, #0]
 8009afc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009b00:	2300      	movs	r3, #0
 8009b02:	73fb      	strb	r3, [r7, #15]
 8009b04:	e004      	b.n	8009b10 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009b06:	2302      	movs	r3, #2
 8009b08:	73fb      	strb	r3, [r7, #15]
 8009b0a:	e001      	b.n	8009b10 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009b0c:	2302      	movs	r3, #2
 8009b0e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3714      	adds	r7, #20
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr

08009b1e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009b1e:	b480      	push	{r7}
 8009b20:	b085      	sub	sp, #20
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	6078      	str	r0, [r7, #4]
 8009b26:	460b      	mov	r3, r1
 8009b28:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8009b34:	78fa      	ldrb	r2, [r7, #3]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d204      	bcs.n	8009b44 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	78fa      	ldrb	r2, [r7, #3]
 8009b3e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8009b42:	e001      	b.n	8009b48 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009b44:	2302      	movs	r3, #2
 8009b46:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3714      	adds	r7, #20
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b54:	4770      	bx	lr

08009b56 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009b56:	b480      	push	{r7}
 8009b58:	b087      	sub	sp, #28
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	6078      	str	r0, [r7, #4]
 8009b5e:	4608      	mov	r0, r1
 8009b60:	4611      	mov	r1, r2
 8009b62:	461a      	mov	r2, r3
 8009b64:	4603      	mov	r3, r0
 8009b66:	70fb      	strb	r3, [r7, #3]
 8009b68:	460b      	mov	r3, r1
 8009b6a:	70bb      	strb	r3, [r7, #2]
 8009b6c:	4613      	mov	r3, r2
 8009b6e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009b70:	2300      	movs	r3, #0
 8009b72:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009b74:	2300      	movs	r3, #0
 8009b76:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009b7e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009b80:	e025      	b.n	8009bce <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009b82:	7dfb      	ldrb	r3, [r7, #23]
 8009b84:	221a      	movs	r2, #26
 8009b86:	fb02 f303 	mul.w	r3, r2, r3
 8009b8a:	3308      	adds	r3, #8
 8009b8c:	68fa      	ldr	r2, [r7, #12]
 8009b8e:	4413      	add	r3, r2
 8009b90:	3302      	adds	r3, #2
 8009b92:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	795b      	ldrb	r3, [r3, #5]
 8009b98:	78fa      	ldrb	r2, [r7, #3]
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d002      	beq.n	8009ba4 <USBH_FindInterface+0x4e>
 8009b9e:	78fb      	ldrb	r3, [r7, #3]
 8009ba0:	2bff      	cmp	r3, #255	@ 0xff
 8009ba2:	d111      	bne.n	8009bc8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009ba8:	78ba      	ldrb	r2, [r7, #2]
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d002      	beq.n	8009bb4 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009bae:	78bb      	ldrb	r3, [r7, #2]
 8009bb0:	2bff      	cmp	r3, #255	@ 0xff
 8009bb2:	d109      	bne.n	8009bc8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009bb8:	787a      	ldrb	r2, [r7, #1]
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d002      	beq.n	8009bc4 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009bbe:	787b      	ldrb	r3, [r7, #1]
 8009bc0:	2bff      	cmp	r3, #255	@ 0xff
 8009bc2:	d101      	bne.n	8009bc8 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009bc4:	7dfb      	ldrb	r3, [r7, #23]
 8009bc6:	e006      	b.n	8009bd6 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009bc8:	7dfb      	ldrb	r3, [r7, #23]
 8009bca:	3301      	adds	r3, #1
 8009bcc:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009bce:	7dfb      	ldrb	r3, [r7, #23]
 8009bd0:	2b01      	cmp	r3, #1
 8009bd2:	d9d6      	bls.n	8009b82 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009bd4:	23ff      	movs	r3, #255	@ 0xff
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	371c      	adds	r7, #28
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be0:	4770      	bx	lr

08009be2 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8009be2:	b580      	push	{r7, lr}
 8009be4:	b082      	sub	sp, #8
 8009be6:	af00      	add	r7, sp, #0
 8009be8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f001 fcf4 	bl	800b5d8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8009bf0:	2101      	movs	r1, #1
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f001 fe0d 	bl	800b812 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009bf8:	2300      	movs	r3, #0
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3708      	adds	r7, #8
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
	...

08009c04 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b088      	sub	sp, #32
 8009c08:	af04      	add	r7, sp, #16
 8009c0a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009c0c:	2302      	movs	r3, #2
 8009c0e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009c10:	2300      	movs	r3, #0
 8009c12:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8009c1a:	b2db      	uxtb	r3, r3
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d102      	bne.n	8009c26 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2203      	movs	r2, #3
 8009c24:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	781b      	ldrb	r3, [r3, #0]
 8009c2a:	b2db      	uxtb	r3, r3
 8009c2c:	2b0b      	cmp	r3, #11
 8009c2e:	f200 81bb 	bhi.w	8009fa8 <USBH_Process+0x3a4>
 8009c32:	a201      	add	r2, pc, #4	@ (adr r2, 8009c38 <USBH_Process+0x34>)
 8009c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c38:	08009c69 	.word	0x08009c69
 8009c3c:	08009c9b 	.word	0x08009c9b
 8009c40:	08009d03 	.word	0x08009d03
 8009c44:	08009f43 	.word	0x08009f43
 8009c48:	08009fa9 	.word	0x08009fa9
 8009c4c:	08009da3 	.word	0x08009da3
 8009c50:	08009ee9 	.word	0x08009ee9
 8009c54:	08009dd9 	.word	0x08009dd9
 8009c58:	08009df9 	.word	0x08009df9
 8009c5c:	08009e17 	.word	0x08009e17
 8009c60:	08009e5b 	.word	0x08009e5b
 8009c64:	08009f2b 	.word	0x08009f2b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8009c6e:	b2db      	uxtb	r3, r3
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	f000 819b 	beq.w	8009fac <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2201      	movs	r2, #1
 8009c7a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009c7c:	20c8      	movs	r0, #200	@ 0xc8
 8009c7e:	f001 fe12 	bl	800b8a6 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f001 fd05 	bl	800b692 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2200      	movs	r2, #0
 8009c94:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009c98:	e188      	b.n	8009fac <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d107      	bne.n	8009cb4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2202      	movs	r2, #2
 8009cb0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009cb2:	e18a      	b.n	8009fca <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009cba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009cbe:	d914      	bls.n	8009cea <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	b2da      	uxtb	r2, r3
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009cd6:	2b03      	cmp	r3, #3
 8009cd8:	d903      	bls.n	8009ce2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	220d      	movs	r2, #13
 8009cde:	701a      	strb	r2, [r3, #0]
      break;
 8009ce0:	e173      	b.n	8009fca <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	701a      	strb	r2, [r3, #0]
      break;
 8009ce8:	e16f      	b.n	8009fca <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009cf0:	f103 020a 	add.w	r2, r3, #10
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8009cfa:	200a      	movs	r0, #10
 8009cfc:	f001 fdd3 	bl	800b8a6 <USBH_Delay>
      break;
 8009d00:	e163      	b.n	8009fca <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d005      	beq.n	8009d18 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009d12:	2104      	movs	r1, #4
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009d18:	2064      	movs	r0, #100	@ 0x64
 8009d1a:	f001 fdc4 	bl	800b8a6 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f001 fc90 	bl	800b644 <USBH_LL_GetSpeed>
 8009d24:	4603      	mov	r3, r0
 8009d26:	461a      	mov	r2, r3
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2205      	movs	r2, #5
 8009d32:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009d34:	2100      	movs	r1, #0
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f001 fa9b 	bl	800b272 <USBH_AllocPipe>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	461a      	mov	r2, r3
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009d44:	2180      	movs	r1, #128	@ 0x80
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f001 fa93 	bl	800b272 <USBH_AllocPipe>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	461a      	mov	r2, r3
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	7919      	ldrb	r1, [r3, #4]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009d64:	687a      	ldr	r2, [r7, #4]
 8009d66:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009d68:	9202      	str	r2, [sp, #8]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	9201      	str	r2, [sp, #4]
 8009d6e:	9300      	str	r3, [sp, #0]
 8009d70:	4603      	mov	r3, r0
 8009d72:	2280      	movs	r2, #128	@ 0x80
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f001 fa4d 	bl	800b214 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	7959      	ldrb	r1, [r3, #5]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009d8a:	687a      	ldr	r2, [r7, #4]
 8009d8c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009d8e:	9202      	str	r2, [sp, #8]
 8009d90:	2200      	movs	r2, #0
 8009d92:	9201      	str	r2, [sp, #4]
 8009d94:	9300      	str	r3, [sp, #0]
 8009d96:	4603      	mov	r3, r0
 8009d98:	2200      	movs	r2, #0
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f001 fa3a 	bl	800b214 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009da0:	e113      	b.n	8009fca <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f000 f916 	bl	8009fd4 <USBH_HandleEnum>
 8009da8:	4603      	mov	r3, r0
 8009daa:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009dac:	7bbb      	ldrb	r3, [r7, #14]
 8009dae:	b2db      	uxtb	r3, r3
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	f040 80fd 	bne.w	8009fb0 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2200      	movs	r2, #0
 8009dba:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	d103      	bne.n	8009dd0 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2208      	movs	r2, #8
 8009dcc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009dce:	e0ef      	b.n	8009fb0 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2207      	movs	r2, #7
 8009dd4:	701a      	strb	r2, [r3, #0]
      break;
 8009dd6:	e0eb      	b.n	8009fb0 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	f000 80e8 	beq.w	8009fb4 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009dea:	2101      	movs	r1, #1
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2208      	movs	r2, #8
 8009df4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8009df6:	e0dd      	b.n	8009fb4 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8009dfe:	4619      	mov	r1, r3
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f000 fc3a 	bl	800a67a <USBH_SetCfg>
 8009e06:	4603      	mov	r3, r0
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	f040 80d5 	bne.w	8009fb8 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2209      	movs	r2, #9
 8009e12:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009e14:	e0d0      	b.n	8009fb8 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8009e1c:	f003 0320 	and.w	r3, r3, #32
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d016      	beq.n	8009e52 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009e24:	2101      	movs	r1, #1
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f000 fc4a 	bl	800a6c0 <USBH_SetFeature>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009e30:	7bbb      	ldrb	r3, [r7, #14]
 8009e32:	b2db      	uxtb	r3, r3
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d103      	bne.n	8009e40 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	220a      	movs	r2, #10
 8009e3c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009e3e:	e0bd      	b.n	8009fbc <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8009e40:	7bbb      	ldrb	r3, [r7, #14]
 8009e42:	b2db      	uxtb	r3, r3
 8009e44:	2b03      	cmp	r3, #3
 8009e46:	f040 80b9 	bne.w	8009fbc <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	220a      	movs	r2, #10
 8009e4e:	701a      	strb	r2, [r3, #0]
      break;
 8009e50:	e0b4      	b.n	8009fbc <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	220a      	movs	r2, #10
 8009e56:	701a      	strb	r2, [r3, #0]
      break;
 8009e58:	e0b0      	b.n	8009fbc <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	f000 80ad 	beq.w	8009fc0 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009e6e:	2300      	movs	r3, #0
 8009e70:	73fb      	strb	r3, [r7, #15]
 8009e72:	e016      	b.n	8009ea2 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009e74:	7bfa      	ldrb	r2, [r7, #15]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	32de      	adds	r2, #222	@ 0xde
 8009e7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e7e:	791a      	ldrb	r2, [r3, #4]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d108      	bne.n	8009e9c <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009e8a:	7bfa      	ldrb	r2, [r7, #15]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	32de      	adds	r2, #222	@ 0xde
 8009e90:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8009e9a:	e005      	b.n	8009ea8 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009e9c:	7bfb      	ldrb	r3, [r7, #15]
 8009e9e:	3301      	adds	r3, #1
 8009ea0:	73fb      	strb	r3, [r7, #15]
 8009ea2:	7bfb      	ldrb	r3, [r7, #15]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d0e5      	beq.n	8009e74 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d016      	beq.n	8009ee0 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009eb8:	689b      	ldr	r3, [r3, #8]
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	4798      	blx	r3
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d109      	bne.n	8009ed8 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2206      	movs	r2, #6
 8009ec8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009ed0:	2103      	movs	r1, #3
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009ed6:	e073      	b.n	8009fc0 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	220d      	movs	r2, #13
 8009edc:	701a      	strb	r2, [r3, #0]
      break;
 8009ede:	e06f      	b.n	8009fc0 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	220d      	movs	r2, #13
 8009ee4:	701a      	strb	r2, [r3, #0]
      break;
 8009ee6:	e06b      	b.n	8009fc0 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d017      	beq.n	8009f22 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009ef8:	691b      	ldr	r3, [r3, #16]
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	4798      	blx	r3
 8009efe:	4603      	mov	r3, r0
 8009f00:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009f02:	7bbb      	ldrb	r3, [r7, #14]
 8009f04:	b2db      	uxtb	r3, r3
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d103      	bne.n	8009f12 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	220b      	movs	r2, #11
 8009f0e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009f10:	e058      	b.n	8009fc4 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8009f12:	7bbb      	ldrb	r3, [r7, #14]
 8009f14:	b2db      	uxtb	r3, r3
 8009f16:	2b02      	cmp	r3, #2
 8009f18:	d154      	bne.n	8009fc4 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	220d      	movs	r2, #13
 8009f1e:	701a      	strb	r2, [r3, #0]
      break;
 8009f20:	e050      	b.n	8009fc4 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	220d      	movs	r2, #13
 8009f26:	701a      	strb	r2, [r3, #0]
      break;
 8009f28:	e04c      	b.n	8009fc4 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d049      	beq.n	8009fc8 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009f3a:	695b      	ldr	r3, [r3, #20]
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	4798      	blx	r3
      }
      break;
 8009f40:	e042      	b.n	8009fc8 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2200      	movs	r2, #0
 8009f46:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f7ff fd4a 	bl	80099e4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d009      	beq.n	8009f6e <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009f60:	68db      	ldr	r3, [r3, #12]
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d005      	beq.n	8009f84 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009f7e:	2105      	movs	r1, #5
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8009f8a:	b2db      	uxtb	r3, r3
 8009f8c:	2b01      	cmp	r3, #1
 8009f8e:	d107      	bne.n	8009fa0 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2200      	movs	r2, #0
 8009f94:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f7ff fe22 	bl	8009be2 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009f9e:	e014      	b.n	8009fca <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f001 fb19 	bl	800b5d8 <USBH_LL_Start>
      break;
 8009fa6:	e010      	b.n	8009fca <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009fa8:	bf00      	nop
 8009faa:	e00e      	b.n	8009fca <USBH_Process+0x3c6>
      break;
 8009fac:	bf00      	nop
 8009fae:	e00c      	b.n	8009fca <USBH_Process+0x3c6>
      break;
 8009fb0:	bf00      	nop
 8009fb2:	e00a      	b.n	8009fca <USBH_Process+0x3c6>
    break;
 8009fb4:	bf00      	nop
 8009fb6:	e008      	b.n	8009fca <USBH_Process+0x3c6>
      break;
 8009fb8:	bf00      	nop
 8009fba:	e006      	b.n	8009fca <USBH_Process+0x3c6>
      break;
 8009fbc:	bf00      	nop
 8009fbe:	e004      	b.n	8009fca <USBH_Process+0x3c6>
      break;
 8009fc0:	bf00      	nop
 8009fc2:	e002      	b.n	8009fca <USBH_Process+0x3c6>
      break;
 8009fc4:	bf00      	nop
 8009fc6:	e000      	b.n	8009fca <USBH_Process+0x3c6>
      break;
 8009fc8:	bf00      	nop
  }
  return USBH_OK;
 8009fca:	2300      	movs	r3, #0
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3710      	adds	r7, #16
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b088      	sub	sp, #32
 8009fd8:	af04      	add	r7, sp, #16
 8009fda:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009fdc:	2301      	movs	r3, #1
 8009fde:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	785b      	ldrb	r3, [r3, #1]
 8009fe8:	2b07      	cmp	r3, #7
 8009fea:	f200 81bd 	bhi.w	800a368 <USBH_HandleEnum+0x394>
 8009fee:	a201      	add	r2, pc, #4	@ (adr r2, 8009ff4 <USBH_HandleEnum+0x20>)
 8009ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ff4:	0800a015 	.word	0x0800a015
 8009ff8:	0800a0cf 	.word	0x0800a0cf
 8009ffc:	0800a139 	.word	0x0800a139
 800a000:	0800a1c3 	.word	0x0800a1c3
 800a004:	0800a22d 	.word	0x0800a22d
 800a008:	0800a29d 	.word	0x0800a29d
 800a00c:	0800a2e3 	.word	0x0800a2e3
 800a010:	0800a329 	.word	0x0800a329
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a014:	2108      	movs	r1, #8
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f000 fa4c 	bl	800a4b4 <USBH_Get_DevDesc>
 800a01c:	4603      	mov	r3, r0
 800a01e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a020:	7bbb      	ldrb	r3, [r7, #14]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d12e      	bne.n	800a084 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2201      	movs	r2, #1
 800a034:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	7919      	ldrb	r1, [r3, #4]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a046:	687a      	ldr	r2, [r7, #4]
 800a048:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a04a:	9202      	str	r2, [sp, #8]
 800a04c:	2200      	movs	r2, #0
 800a04e:	9201      	str	r2, [sp, #4]
 800a050:	9300      	str	r3, [sp, #0]
 800a052:	4603      	mov	r3, r0
 800a054:	2280      	movs	r2, #128	@ 0x80
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f001 f8dc 	bl	800b214 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	7959      	ldrb	r1, [r3, #5]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a06c:	687a      	ldr	r2, [r7, #4]
 800a06e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a070:	9202      	str	r2, [sp, #8]
 800a072:	2200      	movs	r2, #0
 800a074:	9201      	str	r2, [sp, #4]
 800a076:	9300      	str	r3, [sp, #0]
 800a078:	4603      	mov	r3, r0
 800a07a:	2200      	movs	r2, #0
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f001 f8c9 	bl	800b214 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a082:	e173      	b.n	800a36c <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a084:	7bbb      	ldrb	r3, [r7, #14]
 800a086:	2b03      	cmp	r3, #3
 800a088:	f040 8170 	bne.w	800a36c <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a092:	3301      	adds	r3, #1
 800a094:	b2da      	uxtb	r2, r3
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a0a2:	2b03      	cmp	r3, #3
 800a0a4:	d903      	bls.n	800a0ae <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	220d      	movs	r2, #13
 800a0aa:	701a      	strb	r2, [r3, #0]
      break;
 800a0ac:	e15e      	b.n	800a36c <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	795b      	ldrb	r3, [r3, #5]
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f001 f8fd 	bl	800b2b4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	791b      	ldrb	r3, [r3, #4]
 800a0be:	4619      	mov	r1, r3
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f001 f8f7 	bl	800b2b4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	701a      	strb	r2, [r3, #0]
      break;
 800a0cc:	e14e      	b.n	800a36c <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a0ce:	2112      	movs	r1, #18
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f000 f9ef 	bl	800a4b4 <USBH_Get_DevDesc>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a0da:	7bbb      	ldrb	r3, [r7, #14]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d103      	bne.n	800a0e8 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2202      	movs	r2, #2
 800a0e4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a0e6:	e143      	b.n	800a370 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a0e8:	7bbb      	ldrb	r3, [r7, #14]
 800a0ea:	2b03      	cmp	r3, #3
 800a0ec:	f040 8140 	bne.w	800a370 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	b2da      	uxtb	r2, r3
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a106:	2b03      	cmp	r3, #3
 800a108:	d903      	bls.n	800a112 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	220d      	movs	r2, #13
 800a10e:	701a      	strb	r2, [r3, #0]
      break;
 800a110:	e12e      	b.n	800a370 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	795b      	ldrb	r3, [r3, #5]
 800a116:	4619      	mov	r1, r3
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f001 f8cb 	bl	800b2b4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	791b      	ldrb	r3, [r3, #4]
 800a122:	4619      	mov	r1, r3
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f001 f8c5 	bl	800b2b4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2200      	movs	r2, #0
 800a12e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2200      	movs	r2, #0
 800a134:	701a      	strb	r2, [r3, #0]
      break;
 800a136:	e11b      	b.n	800a370 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a138:	2101      	movs	r1, #1
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f000 fa79 	bl	800a632 <USBH_SetAddress>
 800a140:	4603      	mov	r3, r0
 800a142:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a144:	7bbb      	ldrb	r3, [r7, #14]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d130      	bne.n	800a1ac <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800a14a:	2002      	movs	r0, #2
 800a14c:	f001 fbab 	bl	800b8a6 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2201      	movs	r2, #1
 800a154:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2203      	movs	r2, #3
 800a15c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	7919      	ldrb	r1, [r3, #4]
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a16e:	687a      	ldr	r2, [r7, #4]
 800a170:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a172:	9202      	str	r2, [sp, #8]
 800a174:	2200      	movs	r2, #0
 800a176:	9201      	str	r2, [sp, #4]
 800a178:	9300      	str	r3, [sp, #0]
 800a17a:	4603      	mov	r3, r0
 800a17c:	2280      	movs	r2, #128	@ 0x80
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f001 f848 	bl	800b214 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	7959      	ldrb	r1, [r3, #5]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a194:	687a      	ldr	r2, [r7, #4]
 800a196:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a198:	9202      	str	r2, [sp, #8]
 800a19a:	2200      	movs	r2, #0
 800a19c:	9201      	str	r2, [sp, #4]
 800a19e:	9300      	str	r3, [sp, #0]
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f001 f835 	bl	800b214 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a1aa:	e0e3      	b.n	800a374 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a1ac:	7bbb      	ldrb	r3, [r7, #14]
 800a1ae:	2b03      	cmp	r3, #3
 800a1b0:	f040 80e0 	bne.w	800a374 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	220d      	movs	r2, #13
 800a1b8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	705a      	strb	r2, [r3, #1]
      break;
 800a1c0:	e0d8      	b.n	800a374 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a1c2:	2109      	movs	r1, #9
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f000 f9a1 	bl	800a50c <USBH_Get_CfgDesc>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a1ce:	7bbb      	ldrb	r3, [r7, #14]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d103      	bne.n	800a1dc <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2204      	movs	r2, #4
 800a1d8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a1da:	e0cd      	b.n	800a378 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a1dc:	7bbb      	ldrb	r3, [r7, #14]
 800a1de:	2b03      	cmp	r3, #3
 800a1e0:	f040 80ca 	bne.w	800a378 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	b2da      	uxtb	r2, r3
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a1fa:	2b03      	cmp	r3, #3
 800a1fc:	d903      	bls.n	800a206 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	220d      	movs	r2, #13
 800a202:	701a      	strb	r2, [r3, #0]
      break;
 800a204:	e0b8      	b.n	800a378 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	795b      	ldrb	r3, [r3, #5]
 800a20a:	4619      	mov	r1, r3
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f001 f851 	bl	800b2b4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	791b      	ldrb	r3, [r3, #4]
 800a216:	4619      	mov	r1, r3
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f001 f84b 	bl	800b2b4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2200      	movs	r2, #0
 800a222:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2200      	movs	r2, #0
 800a228:	701a      	strb	r2, [r3, #0]
      break;
 800a22a:	e0a5      	b.n	800a378 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800a232:	4619      	mov	r1, r3
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f000 f969 	bl	800a50c <USBH_Get_CfgDesc>
 800a23a:	4603      	mov	r3, r0
 800a23c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a23e:	7bbb      	ldrb	r3, [r7, #14]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d103      	bne.n	800a24c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2205      	movs	r2, #5
 800a248:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a24a:	e097      	b.n	800a37c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a24c:	7bbb      	ldrb	r3, [r7, #14]
 800a24e:	2b03      	cmp	r3, #3
 800a250:	f040 8094 	bne.w	800a37c <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a25a:	3301      	adds	r3, #1
 800a25c:	b2da      	uxtb	r2, r3
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a26a:	2b03      	cmp	r3, #3
 800a26c:	d903      	bls.n	800a276 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	220d      	movs	r2, #13
 800a272:	701a      	strb	r2, [r3, #0]
      break;
 800a274:	e082      	b.n	800a37c <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	795b      	ldrb	r3, [r3, #5]
 800a27a:	4619      	mov	r1, r3
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f001 f819 	bl	800b2b4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	791b      	ldrb	r3, [r3, #4]
 800a286:	4619      	mov	r1, r3
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f001 f813 	bl	800b2b4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2200      	movs	r2, #0
 800a292:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2200      	movs	r2, #0
 800a298:	701a      	strb	r2, [r3, #0]
      break;
 800a29a:	e06f      	b.n	800a37c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d019      	beq.n	800a2da <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a2b2:	23ff      	movs	r3, #255	@ 0xff
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f000 f953 	bl	800a560 <USBH_Get_StringDesc>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a2be:	7bbb      	ldrb	r3, [r7, #14]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d103      	bne.n	800a2cc <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2206      	movs	r2, #6
 800a2c8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a2ca:	e059      	b.n	800a380 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a2cc:	7bbb      	ldrb	r3, [r7, #14]
 800a2ce:	2b03      	cmp	r3, #3
 800a2d0:	d156      	bne.n	800a380 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2206      	movs	r2, #6
 800a2d6:	705a      	strb	r2, [r3, #1]
      break;
 800a2d8:	e052      	b.n	800a380 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2206      	movs	r2, #6
 800a2de:	705a      	strb	r2, [r3, #1]
      break;
 800a2e0:	e04e      	b.n	800a380 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d019      	beq.n	800a320 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a2f8:	23ff      	movs	r3, #255	@ 0xff
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f000 f930 	bl	800a560 <USBH_Get_StringDesc>
 800a300:	4603      	mov	r3, r0
 800a302:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a304:	7bbb      	ldrb	r3, [r7, #14]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d103      	bne.n	800a312 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2207      	movs	r2, #7
 800a30e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a310:	e038      	b.n	800a384 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a312:	7bbb      	ldrb	r3, [r7, #14]
 800a314:	2b03      	cmp	r3, #3
 800a316:	d135      	bne.n	800a384 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2207      	movs	r2, #7
 800a31c:	705a      	strb	r2, [r3, #1]
      break;
 800a31e:	e031      	b.n	800a384 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2207      	movs	r2, #7
 800a324:	705a      	strb	r2, [r3, #1]
      break;
 800a326:	e02d      	b.n	800a384 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d017      	beq.n	800a362 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a33e:	23ff      	movs	r3, #255	@ 0xff
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f000 f90d 	bl	800a560 <USBH_Get_StringDesc>
 800a346:	4603      	mov	r3, r0
 800a348:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a34a:	7bbb      	ldrb	r3, [r7, #14]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d102      	bne.n	800a356 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a350:	2300      	movs	r3, #0
 800a352:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a354:	e018      	b.n	800a388 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a356:	7bbb      	ldrb	r3, [r7, #14]
 800a358:	2b03      	cmp	r3, #3
 800a35a:	d115      	bne.n	800a388 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800a35c:	2300      	movs	r3, #0
 800a35e:	73fb      	strb	r3, [r7, #15]
      break;
 800a360:	e012      	b.n	800a388 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800a362:	2300      	movs	r3, #0
 800a364:	73fb      	strb	r3, [r7, #15]
      break;
 800a366:	e00f      	b.n	800a388 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800a368:	bf00      	nop
 800a36a:	e00e      	b.n	800a38a <USBH_HandleEnum+0x3b6>
      break;
 800a36c:	bf00      	nop
 800a36e:	e00c      	b.n	800a38a <USBH_HandleEnum+0x3b6>
      break;
 800a370:	bf00      	nop
 800a372:	e00a      	b.n	800a38a <USBH_HandleEnum+0x3b6>
      break;
 800a374:	bf00      	nop
 800a376:	e008      	b.n	800a38a <USBH_HandleEnum+0x3b6>
      break;
 800a378:	bf00      	nop
 800a37a:	e006      	b.n	800a38a <USBH_HandleEnum+0x3b6>
      break;
 800a37c:	bf00      	nop
 800a37e:	e004      	b.n	800a38a <USBH_HandleEnum+0x3b6>
      break;
 800a380:	bf00      	nop
 800a382:	e002      	b.n	800a38a <USBH_HandleEnum+0x3b6>
      break;
 800a384:	bf00      	nop
 800a386:	e000      	b.n	800a38a <USBH_HandleEnum+0x3b6>
      break;
 800a388:	bf00      	nop
  }
  return Status;
 800a38a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3710      	adds	r7, #16
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a394:	b480      	push	{r7}
 800a396:	b083      	sub	sp, #12
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	683a      	ldr	r2, [r7, #0]
 800a3a2:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800a3a6:	bf00      	nop
 800a3a8:	370c      	adds	r7, #12
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b0:	4770      	bx	lr

0800a3b2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a3b2:	b580      	push	{r7, lr}
 800a3b4:	b082      	sub	sp, #8
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a3c0:	1c5a      	adds	r2, r3, #1
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f000 f804 	bl	800a3d6 <USBH_HandleSof>
}
 800a3ce:	bf00      	nop
 800a3d0:	3708      	adds	r7, #8
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}

0800a3d6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a3d6:	b580      	push	{r7, lr}
 800a3d8:	b082      	sub	sp, #8
 800a3da:	af00      	add	r7, sp, #0
 800a3dc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	b2db      	uxtb	r3, r3
 800a3e4:	2b0b      	cmp	r3, #11
 800a3e6:	d10a      	bne.n	800a3fe <USBH_HandleSof+0x28>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d005      	beq.n	800a3fe <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a3f8:	699b      	ldr	r3, [r3, #24]
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	4798      	blx	r3
  }
}
 800a3fe:	bf00      	nop
 800a400:	3708      	adds	r7, #8
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}

0800a406 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a406:	b480      	push	{r7}
 800a408:	b083      	sub	sp, #12
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2201      	movs	r2, #1
 800a412:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800a416:	bf00      	nop
}
 800a418:	370c      	adds	r7, #12
 800a41a:	46bd      	mov	sp, r7
 800a41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a420:	4770      	bx	lr

0800a422 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a422:	b480      	push	{r7}
 800a424:	b083      	sub	sp, #12
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2200      	movs	r2, #0
 800a42e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800a432:	bf00      	nop
}
 800a434:	370c      	adds	r7, #12
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr

0800a43e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a43e:	b480      	push	{r7}
 800a440:	b083      	sub	sp, #12
 800a442:	af00      	add	r7, sp, #0
 800a444:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2201      	movs	r2, #1
 800a44a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2200      	movs	r2, #0
 800a452:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2200      	movs	r2, #0
 800a45a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a45e:	2300      	movs	r3, #0
}
 800a460:	4618      	mov	r0, r3
 800a462:	370c      	adds	r7, #12
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr

0800a46c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b082      	sub	sp, #8
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2201      	movs	r2, #1
 800a478:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2200      	movs	r2, #0
 800a480:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2200      	movs	r2, #0
 800a488:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f001 f8be 	bl	800b60e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	791b      	ldrb	r3, [r3, #4]
 800a496:	4619      	mov	r1, r3
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f000 ff0b 	bl	800b2b4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	795b      	ldrb	r3, [r3, #5]
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 ff05 	bl	800b2b4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a4aa:	2300      	movs	r3, #0
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3708      	adds	r7, #8
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b086      	sub	sp, #24
 800a4b8:	af02      	add	r7, sp, #8
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	460b      	mov	r3, r1
 800a4be:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800a4c0:	887b      	ldrh	r3, [r7, #2]
 800a4c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4c6:	d901      	bls.n	800a4cc <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a4c8:	2303      	movs	r3, #3
 800a4ca:	e01b      	b.n	800a504 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a4d2:	887b      	ldrh	r3, [r7, #2]
 800a4d4:	9300      	str	r3, [sp, #0]
 800a4d6:	4613      	mov	r3, r2
 800a4d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a4dc:	2100      	movs	r1, #0
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f000 f872 	bl	800a5c8 <USBH_GetDescriptor>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800a4e8:	7bfb      	ldrb	r3, [r7, #15]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d109      	bne.n	800a502 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a4f4:	887a      	ldrh	r2, [r7, #2]
 800a4f6:	4619      	mov	r1, r3
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f000 f929 	bl	800a750 <USBH_ParseDevDesc>
 800a4fe:	4603      	mov	r3, r0
 800a500:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a502:	7bfb      	ldrb	r3, [r7, #15]
}
 800a504:	4618      	mov	r0, r3
 800a506:	3710      	adds	r7, #16
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b086      	sub	sp, #24
 800a510:	af02      	add	r7, sp, #8
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	460b      	mov	r3, r1
 800a516:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	331c      	adds	r3, #28
 800a51c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800a51e:	887b      	ldrh	r3, [r7, #2]
 800a520:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a524:	d901      	bls.n	800a52a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a526:	2303      	movs	r3, #3
 800a528:	e016      	b.n	800a558 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a52a:	887b      	ldrh	r3, [r7, #2]
 800a52c:	9300      	str	r3, [sp, #0]
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a534:	2100      	movs	r1, #0
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f000 f846 	bl	800a5c8 <USBH_GetDescriptor>
 800a53c:	4603      	mov	r3, r0
 800a53e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a540:	7bfb      	ldrb	r3, [r7, #15]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d107      	bne.n	800a556 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a546:	887b      	ldrh	r3, [r7, #2]
 800a548:	461a      	mov	r2, r3
 800a54a:	68b9      	ldr	r1, [r7, #8]
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f000 f9af 	bl	800a8b0 <USBH_ParseCfgDesc>
 800a552:	4603      	mov	r3, r0
 800a554:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a556:	7bfb      	ldrb	r3, [r7, #15]
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3710      	adds	r7, #16
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b088      	sub	sp, #32
 800a564:	af02      	add	r7, sp, #8
 800a566:	60f8      	str	r0, [r7, #12]
 800a568:	607a      	str	r2, [r7, #4]
 800a56a:	461a      	mov	r2, r3
 800a56c:	460b      	mov	r3, r1
 800a56e:	72fb      	strb	r3, [r7, #11]
 800a570:	4613      	mov	r3, r2
 800a572:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800a574:	893b      	ldrh	r3, [r7, #8]
 800a576:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a57a:	d802      	bhi.n	800a582 <USBH_Get_StringDesc+0x22>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d101      	bne.n	800a586 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a582:	2303      	movs	r3, #3
 800a584:	e01c      	b.n	800a5c0 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800a586:	7afb      	ldrb	r3, [r7, #11]
 800a588:	b29b      	uxth	r3, r3
 800a58a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800a58e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a596:	893b      	ldrh	r3, [r7, #8]
 800a598:	9300      	str	r3, [sp, #0]
 800a59a:	460b      	mov	r3, r1
 800a59c:	2100      	movs	r1, #0
 800a59e:	68f8      	ldr	r0, [r7, #12]
 800a5a0:	f000 f812 	bl	800a5c8 <USBH_GetDescriptor>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a5a8:	7dfb      	ldrb	r3, [r7, #23]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d107      	bne.n	800a5be <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a5b4:	893a      	ldrh	r2, [r7, #8]
 800a5b6:	6879      	ldr	r1, [r7, #4]
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f000 fb8d 	bl	800acd8 <USBH_ParseStringDesc>
  }

  return status;
 800a5be:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3718      	adds	r7, #24
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b084      	sub	sp, #16
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	60f8      	str	r0, [r7, #12]
 800a5d0:	607b      	str	r3, [r7, #4]
 800a5d2:	460b      	mov	r3, r1
 800a5d4:	72fb      	strb	r3, [r7, #11]
 800a5d6:	4613      	mov	r3, r2
 800a5d8:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	789b      	ldrb	r3, [r3, #2]
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d11c      	bne.n	800a61c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a5e2:	7afb      	ldrb	r3, [r7, #11]
 800a5e4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a5e8:	b2da      	uxtb	r2, r3
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2206      	movs	r2, #6
 800a5f2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	893a      	ldrh	r2, [r7, #8]
 800a5f8:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a5fa:	893b      	ldrh	r3, [r7, #8]
 800a5fc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a600:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a604:	d104      	bne.n	800a610 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	f240 4209 	movw	r2, #1033	@ 0x409
 800a60c:	829a      	strh	r2, [r3, #20]
 800a60e:	e002      	b.n	800a616 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2200      	movs	r2, #0
 800a614:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	8b3a      	ldrh	r2, [r7, #24]
 800a61a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a61c:	8b3b      	ldrh	r3, [r7, #24]
 800a61e:	461a      	mov	r2, r3
 800a620:	6879      	ldr	r1, [r7, #4]
 800a622:	68f8      	ldr	r0, [r7, #12]
 800a624:	f000 fba5 	bl	800ad72 <USBH_CtlReq>
 800a628:	4603      	mov	r3, r0
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3710      	adds	r7, #16
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}

0800a632 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a632:	b580      	push	{r7, lr}
 800a634:	b082      	sub	sp, #8
 800a636:	af00      	add	r7, sp, #0
 800a638:	6078      	str	r0, [r7, #4]
 800a63a:	460b      	mov	r3, r1
 800a63c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	789b      	ldrb	r3, [r3, #2]
 800a642:	2b01      	cmp	r3, #1
 800a644:	d10f      	bne.n	800a666 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2200      	movs	r2, #0
 800a64a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2205      	movs	r2, #5
 800a650:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a652:	78fb      	ldrb	r3, [r7, #3]
 800a654:	b29a      	uxth	r2, r3
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2200      	movs	r2, #0
 800a65e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2200      	movs	r2, #0
 800a664:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a666:	2200      	movs	r2, #0
 800a668:	2100      	movs	r1, #0
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f000 fb81 	bl	800ad72 <USBH_CtlReq>
 800a670:	4603      	mov	r3, r0
}
 800a672:	4618      	mov	r0, r3
 800a674:	3708      	adds	r7, #8
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}

0800a67a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a67a:	b580      	push	{r7, lr}
 800a67c:	b082      	sub	sp, #8
 800a67e:	af00      	add	r7, sp, #0
 800a680:	6078      	str	r0, [r7, #4]
 800a682:	460b      	mov	r3, r1
 800a684:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	789b      	ldrb	r3, [r3, #2]
 800a68a:	2b01      	cmp	r3, #1
 800a68c:	d10e      	bne.n	800a6ac <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2200      	movs	r2, #0
 800a692:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2209      	movs	r2, #9
 800a698:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	887a      	ldrh	r2, [r7, #2]
 800a69e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	2100      	movs	r1, #0
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f000 fb5e 	bl	800ad72 <USBH_CtlReq>
 800a6b6:	4603      	mov	r3, r0
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3708      	adds	r7, #8
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b082      	sub	sp, #8
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	460b      	mov	r3, r1
 800a6ca:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	789b      	ldrb	r3, [r3, #2]
 800a6d0:	2b01      	cmp	r3, #1
 800a6d2:	d10f      	bne.n	800a6f4 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2203      	movs	r2, #3
 800a6de:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a6e0:	78fb      	ldrb	r3, [r7, #3]
 800a6e2:	b29a      	uxth	r2, r3
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	2100      	movs	r1, #0
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f000 fb3a 	bl	800ad72 <USBH_CtlReq>
 800a6fe:	4603      	mov	r3, r0
}
 800a700:	4618      	mov	r0, r3
 800a702:	3708      	adds	r7, #8
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b082      	sub	sp, #8
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	460b      	mov	r3, r1
 800a712:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	789b      	ldrb	r3, [r3, #2]
 800a718:	2b01      	cmp	r3, #1
 800a71a:	d10f      	bne.n	800a73c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2202      	movs	r2, #2
 800a720:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2201      	movs	r2, #1
 800a726:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2200      	movs	r2, #0
 800a72c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a72e:	78fb      	ldrb	r3, [r7, #3]
 800a730:	b29a      	uxth	r2, r3
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2200      	movs	r2, #0
 800a73a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a73c:	2200      	movs	r2, #0
 800a73e:	2100      	movs	r1, #0
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f000 fb16 	bl	800ad72 <USBH_CtlReq>
 800a746:	4603      	mov	r3, r0
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3708      	adds	r7, #8
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a750:	b480      	push	{r7}
 800a752:	b087      	sub	sp, #28
 800a754:	af00      	add	r7, sp, #0
 800a756:	60f8      	str	r0, [r7, #12]
 800a758:	60b9      	str	r1, [r7, #8]
 800a75a:	4613      	mov	r3, r2
 800a75c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a764:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800a766:	2300      	movs	r3, #0
 800a768:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d101      	bne.n	800a774 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800a770:	2302      	movs	r3, #2
 800a772:	e094      	b.n	800a89e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	781a      	ldrb	r2, [r3, #0]
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	785a      	ldrb	r2, [r3, #1]
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	3302      	adds	r3, #2
 800a788:	781b      	ldrb	r3, [r3, #0]
 800a78a:	461a      	mov	r2, r3
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	3303      	adds	r3, #3
 800a790:	781b      	ldrb	r3, [r3, #0]
 800a792:	021b      	lsls	r3, r3, #8
 800a794:	b29b      	uxth	r3, r3
 800a796:	4313      	orrs	r3, r2
 800a798:	b29a      	uxth	r2, r3
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	791a      	ldrb	r2, [r3, #4]
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	795a      	ldrb	r2, [r3, #5]
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	799a      	ldrb	r2, [r3, #6]
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	79da      	ldrb	r2, [r3, #7]
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d004      	beq.n	800a7d2 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a7ce:	2b01      	cmp	r3, #1
 800a7d0:	d11b      	bne.n	800a80a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	79db      	ldrb	r3, [r3, #7]
 800a7d6:	2b20      	cmp	r3, #32
 800a7d8:	dc0f      	bgt.n	800a7fa <USBH_ParseDevDesc+0xaa>
 800a7da:	2b08      	cmp	r3, #8
 800a7dc:	db0f      	blt.n	800a7fe <USBH_ParseDevDesc+0xae>
 800a7de:	3b08      	subs	r3, #8
 800a7e0:	4a32      	ldr	r2, [pc, #200]	@ (800a8ac <USBH_ParseDevDesc+0x15c>)
 800a7e2:	fa22 f303 	lsr.w	r3, r2, r3
 800a7e6:	f003 0301 	and.w	r3, r3, #1
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	bf14      	ite	ne
 800a7ee:	2301      	movne	r3, #1
 800a7f0:	2300      	moveq	r3, #0
 800a7f2:	b2db      	uxtb	r3, r3
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d106      	bne.n	800a806 <USBH_ParseDevDesc+0xb6>
 800a7f8:	e001      	b.n	800a7fe <USBH_ParseDevDesc+0xae>
 800a7fa:	2b40      	cmp	r3, #64	@ 0x40
 800a7fc:	d003      	beq.n	800a806 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	2208      	movs	r2, #8
 800a802:	71da      	strb	r2, [r3, #7]
        break;
 800a804:	e000      	b.n	800a808 <USBH_ParseDevDesc+0xb8>
        break;
 800a806:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800a808:	e00e      	b.n	800a828 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a810:	2b02      	cmp	r3, #2
 800a812:	d107      	bne.n	800a824 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	79db      	ldrb	r3, [r3, #7]
 800a818:	2b08      	cmp	r3, #8
 800a81a:	d005      	beq.n	800a828 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	2208      	movs	r2, #8
 800a820:	71da      	strb	r2, [r3, #7]
 800a822:	e001      	b.n	800a828 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a824:	2303      	movs	r3, #3
 800a826:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800a828:	88fb      	ldrh	r3, [r7, #6]
 800a82a:	2b08      	cmp	r3, #8
 800a82c:	d936      	bls.n	800a89c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	3308      	adds	r3, #8
 800a832:	781b      	ldrb	r3, [r3, #0]
 800a834:	461a      	mov	r2, r3
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	3309      	adds	r3, #9
 800a83a:	781b      	ldrb	r3, [r3, #0]
 800a83c:	021b      	lsls	r3, r3, #8
 800a83e:	b29b      	uxth	r3, r3
 800a840:	4313      	orrs	r3, r2
 800a842:	b29a      	uxth	r2, r3
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	330a      	adds	r3, #10
 800a84c:	781b      	ldrb	r3, [r3, #0]
 800a84e:	461a      	mov	r2, r3
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	330b      	adds	r3, #11
 800a854:	781b      	ldrb	r3, [r3, #0]
 800a856:	021b      	lsls	r3, r3, #8
 800a858:	b29b      	uxth	r3, r3
 800a85a:	4313      	orrs	r3, r2
 800a85c:	b29a      	uxth	r2, r3
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	330c      	adds	r3, #12
 800a866:	781b      	ldrb	r3, [r3, #0]
 800a868:	461a      	mov	r2, r3
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	330d      	adds	r3, #13
 800a86e:	781b      	ldrb	r3, [r3, #0]
 800a870:	021b      	lsls	r3, r3, #8
 800a872:	b29b      	uxth	r3, r3
 800a874:	4313      	orrs	r3, r2
 800a876:	b29a      	uxth	r2, r3
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	7b9a      	ldrb	r2, [r3, #14]
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	7bda      	ldrb	r2, [r3, #15]
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	7c1a      	ldrb	r2, [r3, #16]
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	7c5a      	ldrb	r2, [r3, #17]
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800a89c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	371c      	adds	r7, #28
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a8:	4770      	bx	lr
 800a8aa:	bf00      	nop
 800a8ac:	01000101 	.word	0x01000101

0800a8b0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b08c      	sub	sp, #48	@ 0x30
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	60f8      	str	r0, [r7, #12]
 800a8b8:	60b9      	str	r1, [r7, #8]
 800a8ba:	4613      	mov	r3, r2
 800a8bc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a8c4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d101      	bne.n	800a8e2 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800a8de:	2302      	movs	r3, #2
 800a8e0:	e0da      	b.n	800aa98 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a8e2:	68bb      	ldr	r3, [r7, #8]
 800a8e4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800a8e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8e8:	781b      	ldrb	r3, [r3, #0]
 800a8ea:	2b09      	cmp	r3, #9
 800a8ec:	d002      	beq.n	800a8f4 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a8ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8f0:	2209      	movs	r2, #9
 800a8f2:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	781a      	ldrb	r2, [r3, #0]
 800a8f8:	6a3b      	ldr	r3, [r7, #32]
 800a8fa:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	785a      	ldrb	r2, [r3, #1]
 800a900:	6a3b      	ldr	r3, [r7, #32]
 800a902:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	3302      	adds	r3, #2
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	461a      	mov	r2, r3
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	3303      	adds	r3, #3
 800a910:	781b      	ldrb	r3, [r3, #0]
 800a912:	021b      	lsls	r3, r3, #8
 800a914:	b29b      	uxth	r3, r3
 800a916:	4313      	orrs	r3, r2
 800a918:	b29b      	uxth	r3, r3
 800a91a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a91e:	bf28      	it	cs
 800a920:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800a924:	b29a      	uxth	r2, r3
 800a926:	6a3b      	ldr	r3, [r7, #32]
 800a928:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	791a      	ldrb	r2, [r3, #4]
 800a92e:	6a3b      	ldr	r3, [r7, #32]
 800a930:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	795a      	ldrb	r2, [r3, #5]
 800a936:	6a3b      	ldr	r3, [r7, #32]
 800a938:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	799a      	ldrb	r2, [r3, #6]
 800a93e:	6a3b      	ldr	r3, [r7, #32]
 800a940:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	79da      	ldrb	r2, [r3, #7]
 800a946:	6a3b      	ldr	r3, [r7, #32]
 800a948:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	7a1a      	ldrb	r2, [r3, #8]
 800a94e:	6a3b      	ldr	r3, [r7, #32]
 800a950:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a952:	88fb      	ldrh	r3, [r7, #6]
 800a954:	2b09      	cmp	r3, #9
 800a956:	f240 809d 	bls.w	800aa94 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800a95a:	2309      	movs	r3, #9
 800a95c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a95e:	2300      	movs	r3, #0
 800a960:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a962:	e081      	b.n	800aa68 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a964:	f107 0316 	add.w	r3, r7, #22
 800a968:	4619      	mov	r1, r3
 800a96a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a96c:	f000 f9e7 	bl	800ad3e <USBH_GetNextDesc>
 800a970:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a974:	785b      	ldrb	r3, [r3, #1]
 800a976:	2b04      	cmp	r3, #4
 800a978:	d176      	bne.n	800aa68 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a97a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a97c:	781b      	ldrb	r3, [r3, #0]
 800a97e:	2b09      	cmp	r3, #9
 800a980:	d002      	beq.n	800a988 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a984:	2209      	movs	r2, #9
 800a986:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a988:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a98c:	221a      	movs	r2, #26
 800a98e:	fb02 f303 	mul.w	r3, r2, r3
 800a992:	3308      	adds	r3, #8
 800a994:	6a3a      	ldr	r2, [r7, #32]
 800a996:	4413      	add	r3, r2
 800a998:	3302      	adds	r3, #2
 800a99a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a99c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a99e:	69f8      	ldr	r0, [r7, #28]
 800a9a0:	f000 f87e 	bl	800aaa0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a9ae:	e043      	b.n	800aa38 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a9b0:	f107 0316 	add.w	r3, r7, #22
 800a9b4:	4619      	mov	r1, r3
 800a9b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a9b8:	f000 f9c1 	bl	800ad3e <USBH_GetNextDesc>
 800a9bc:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a9be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9c0:	785b      	ldrb	r3, [r3, #1]
 800a9c2:	2b05      	cmp	r3, #5
 800a9c4:	d138      	bne.n	800aa38 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800a9c6:	69fb      	ldr	r3, [r7, #28]
 800a9c8:	795b      	ldrb	r3, [r3, #5]
 800a9ca:	2b01      	cmp	r3, #1
 800a9cc:	d113      	bne.n	800a9f6 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a9ce:	69fb      	ldr	r3, [r7, #28]
 800a9d0:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800a9d2:	2b02      	cmp	r3, #2
 800a9d4:	d003      	beq.n	800a9de <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a9d6:	69fb      	ldr	r3, [r7, #28]
 800a9d8:	799b      	ldrb	r3, [r3, #6]
 800a9da:	2b03      	cmp	r3, #3
 800a9dc:	d10b      	bne.n	800a9f6 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a9de:	69fb      	ldr	r3, [r7, #28]
 800a9e0:	79db      	ldrb	r3, [r3, #7]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d10b      	bne.n	800a9fe <USBH_ParseCfgDesc+0x14e>
 800a9e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9e8:	781b      	ldrb	r3, [r3, #0]
 800a9ea:	2b09      	cmp	r3, #9
 800a9ec:	d007      	beq.n	800a9fe <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800a9ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9f0:	2209      	movs	r2, #9
 800a9f2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a9f4:	e003      	b.n	800a9fe <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a9f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9f8:	2207      	movs	r2, #7
 800a9fa:	701a      	strb	r2, [r3, #0]
 800a9fc:	e000      	b.n	800aa00 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a9fe:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800aa00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aa04:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800aa08:	3201      	adds	r2, #1
 800aa0a:	00d2      	lsls	r2, r2, #3
 800aa0c:	211a      	movs	r1, #26
 800aa0e:	fb01 f303 	mul.w	r3, r1, r3
 800aa12:	4413      	add	r3, r2
 800aa14:	3308      	adds	r3, #8
 800aa16:	6a3a      	ldr	r2, [r7, #32]
 800aa18:	4413      	add	r3, r2
 800aa1a:	3304      	adds	r3, #4
 800aa1c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800aa1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aa20:	69b9      	ldr	r1, [r7, #24]
 800aa22:	68f8      	ldr	r0, [r7, #12]
 800aa24:	f000 f870 	bl	800ab08 <USBH_ParseEPDesc>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800aa2e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800aa32:	3301      	adds	r3, #1
 800aa34:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800aa38:	69fb      	ldr	r3, [r7, #28]
 800aa3a:	791b      	ldrb	r3, [r3, #4]
 800aa3c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800aa40:	429a      	cmp	r2, r3
 800aa42:	d204      	bcs.n	800aa4e <USBH_ParseCfgDesc+0x19e>
 800aa44:	6a3b      	ldr	r3, [r7, #32]
 800aa46:	885a      	ldrh	r2, [r3, #2]
 800aa48:	8afb      	ldrh	r3, [r7, #22]
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	d8b0      	bhi.n	800a9b0 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800aa4e:	69fb      	ldr	r3, [r7, #28]
 800aa50:	791b      	ldrb	r3, [r3, #4]
 800aa52:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800aa56:	429a      	cmp	r2, r3
 800aa58:	d201      	bcs.n	800aa5e <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800aa5a:	2303      	movs	r3, #3
 800aa5c:	e01c      	b.n	800aa98 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800aa5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aa62:	3301      	adds	r3, #1
 800aa64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800aa68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aa6c:	2b01      	cmp	r3, #1
 800aa6e:	d805      	bhi.n	800aa7c <USBH_ParseCfgDesc+0x1cc>
 800aa70:	6a3b      	ldr	r3, [r7, #32]
 800aa72:	885a      	ldrh	r2, [r3, #2]
 800aa74:	8afb      	ldrh	r3, [r7, #22]
 800aa76:	429a      	cmp	r2, r3
 800aa78:	f63f af74 	bhi.w	800a964 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800aa7c:	6a3b      	ldr	r3, [r7, #32]
 800aa7e:	791b      	ldrb	r3, [r3, #4]
 800aa80:	2b02      	cmp	r3, #2
 800aa82:	bf28      	it	cs
 800aa84:	2302      	movcs	r3, #2
 800aa86:	b2db      	uxtb	r3, r3
 800aa88:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800aa8c:	429a      	cmp	r2, r3
 800aa8e:	d201      	bcs.n	800aa94 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800aa90:	2303      	movs	r3, #3
 800aa92:	e001      	b.n	800aa98 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800aa94:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	3730      	adds	r7, #48	@ 0x30
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}

0800aaa0 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b083      	sub	sp, #12
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
 800aaa8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	781a      	ldrb	r2, [r3, #0]
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	785a      	ldrb	r2, [r3, #1]
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	789a      	ldrb	r2, [r3, #2]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	78da      	ldrb	r2, [r3, #3]
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	3304      	adds	r3, #4
 800aace:	781b      	ldrb	r3, [r3, #0]
 800aad0:	2b02      	cmp	r3, #2
 800aad2:	bf28      	it	cs
 800aad4:	2302      	movcs	r3, #2
 800aad6:	b2da      	uxtb	r2, r3
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	795a      	ldrb	r2, [r3, #5]
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	799a      	ldrb	r2, [r3, #6]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	79da      	ldrb	r2, [r3, #7]
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	7a1a      	ldrb	r2, [r3, #8]
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	721a      	strb	r2, [r3, #8]
}
 800aafc:	bf00      	nop
 800aafe:	370c      	adds	r7, #12
 800ab00:	46bd      	mov	sp, r7
 800ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab06:	4770      	bx	lr

0800ab08 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b087      	sub	sp, #28
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	60f8      	str	r0, [r7, #12]
 800ab10:	60b9      	str	r1, [r7, #8]
 800ab12:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800ab14:	2300      	movs	r3, #0
 800ab16:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	781a      	ldrb	r2, [r3, #0]
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	785a      	ldrb	r2, [r3, #1]
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	789a      	ldrb	r2, [r3, #2]
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	78da      	ldrb	r2, [r3, #3]
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	3304      	adds	r3, #4
 800ab3c:	781b      	ldrb	r3, [r3, #0]
 800ab3e:	461a      	mov	r2, r3
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	3305      	adds	r3, #5
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	021b      	lsls	r3, r3, #8
 800ab48:	b29b      	uxth	r3, r3
 800ab4a:	4313      	orrs	r3, r2
 800ab4c:	b29a      	uxth	r2, r3
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	799a      	ldrb	r2, [r3, #6]
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	889b      	ldrh	r3, [r3, #4]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d009      	beq.n	800ab76 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800ab66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab6a:	d804      	bhi.n	800ab76 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800ab70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab74:	d901      	bls.n	800ab7a <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800ab76:	2303      	movs	r3, #3
 800ab78:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d136      	bne.n	800abf2 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	78db      	ldrb	r3, [r3, #3]
 800ab88:	f003 0303 	and.w	r3, r3, #3
 800ab8c:	2b02      	cmp	r3, #2
 800ab8e:	d108      	bne.n	800aba2 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	889b      	ldrh	r3, [r3, #4]
 800ab94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab98:	f240 8097 	bls.w	800acca <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ab9c:	2303      	movs	r3, #3
 800ab9e:	75fb      	strb	r3, [r7, #23]
 800aba0:	e093      	b.n	800acca <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	78db      	ldrb	r3, [r3, #3]
 800aba6:	f003 0303 	and.w	r3, r3, #3
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d107      	bne.n	800abbe <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	889b      	ldrh	r3, [r3, #4]
 800abb2:	2b40      	cmp	r3, #64	@ 0x40
 800abb4:	f240 8089 	bls.w	800acca <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800abb8:	2303      	movs	r3, #3
 800abba:	75fb      	strb	r3, [r7, #23]
 800abbc:	e085      	b.n	800acca <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	78db      	ldrb	r3, [r3, #3]
 800abc2:	f003 0303 	and.w	r3, r3, #3
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	d005      	beq.n	800abd6 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	78db      	ldrb	r3, [r3, #3]
 800abce:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800abd2:	2b03      	cmp	r3, #3
 800abd4:	d10a      	bne.n	800abec <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	799b      	ldrb	r3, [r3, #6]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d003      	beq.n	800abe6 <USBH_ParseEPDesc+0xde>
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	799b      	ldrb	r3, [r3, #6]
 800abe2:	2b10      	cmp	r3, #16
 800abe4:	d970      	bls.n	800acc8 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800abe6:	2303      	movs	r3, #3
 800abe8:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800abea:	e06d      	b.n	800acc8 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800abec:	2303      	movs	r3, #3
 800abee:	75fb      	strb	r3, [r7, #23]
 800abf0:	e06b      	b.n	800acca <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800abf8:	2b01      	cmp	r3, #1
 800abfa:	d13c      	bne.n	800ac76 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	78db      	ldrb	r3, [r3, #3]
 800ac00:	f003 0303 	and.w	r3, r3, #3
 800ac04:	2b02      	cmp	r3, #2
 800ac06:	d005      	beq.n	800ac14 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	78db      	ldrb	r3, [r3, #3]
 800ac0c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d106      	bne.n	800ac22 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	889b      	ldrh	r3, [r3, #4]
 800ac18:	2b40      	cmp	r3, #64	@ 0x40
 800ac1a:	d956      	bls.n	800acca <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ac1c:	2303      	movs	r3, #3
 800ac1e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800ac20:	e053      	b.n	800acca <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	78db      	ldrb	r3, [r3, #3]
 800ac26:	f003 0303 	and.w	r3, r3, #3
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	d10e      	bne.n	800ac4c <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	799b      	ldrb	r3, [r3, #6]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d007      	beq.n	800ac46 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800ac3a:	2b10      	cmp	r3, #16
 800ac3c:	d803      	bhi.n	800ac46 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800ac42:	2b40      	cmp	r3, #64	@ 0x40
 800ac44:	d941      	bls.n	800acca <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ac46:	2303      	movs	r3, #3
 800ac48:	75fb      	strb	r3, [r7, #23]
 800ac4a:	e03e      	b.n	800acca <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	78db      	ldrb	r3, [r3, #3]
 800ac50:	f003 0303 	and.w	r3, r3, #3
 800ac54:	2b03      	cmp	r3, #3
 800ac56:	d10b      	bne.n	800ac70 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	799b      	ldrb	r3, [r3, #6]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d004      	beq.n	800ac6a <USBH_ParseEPDesc+0x162>
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	889b      	ldrh	r3, [r3, #4]
 800ac64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ac68:	d32f      	bcc.n	800acca <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ac6a:	2303      	movs	r3, #3
 800ac6c:	75fb      	strb	r3, [r7, #23]
 800ac6e:	e02c      	b.n	800acca <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800ac70:	2303      	movs	r3, #3
 800ac72:	75fb      	strb	r3, [r7, #23]
 800ac74:	e029      	b.n	800acca <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ac7c:	2b02      	cmp	r3, #2
 800ac7e:	d120      	bne.n	800acc2 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	78db      	ldrb	r3, [r3, #3]
 800ac84:	f003 0303 	and.w	r3, r3, #3
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d106      	bne.n	800ac9a <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	889b      	ldrh	r3, [r3, #4]
 800ac90:	2b08      	cmp	r3, #8
 800ac92:	d01a      	beq.n	800acca <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ac94:	2303      	movs	r3, #3
 800ac96:	75fb      	strb	r3, [r7, #23]
 800ac98:	e017      	b.n	800acca <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	78db      	ldrb	r3, [r3, #3]
 800ac9e:	f003 0303 	and.w	r3, r3, #3
 800aca2:	2b03      	cmp	r3, #3
 800aca4:	d10a      	bne.n	800acbc <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	799b      	ldrb	r3, [r3, #6]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d003      	beq.n	800acb6 <USBH_ParseEPDesc+0x1ae>
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	889b      	ldrh	r3, [r3, #4]
 800acb2:	2b08      	cmp	r3, #8
 800acb4:	d909      	bls.n	800acca <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800acb6:	2303      	movs	r3, #3
 800acb8:	75fb      	strb	r3, [r7, #23]
 800acba:	e006      	b.n	800acca <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800acbc:	2303      	movs	r3, #3
 800acbe:	75fb      	strb	r3, [r7, #23]
 800acc0:	e003      	b.n	800acca <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800acc2:	2303      	movs	r3, #3
 800acc4:	75fb      	strb	r3, [r7, #23]
 800acc6:	e000      	b.n	800acca <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800acc8:	bf00      	nop
  }

  return status;
 800acca:	7dfb      	ldrb	r3, [r7, #23]
}
 800accc:	4618      	mov	r0, r3
 800acce:	371c      	adds	r7, #28
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr

0800acd8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800acd8:	b480      	push	{r7}
 800acda:	b087      	sub	sp, #28
 800acdc:	af00      	add	r7, sp, #0
 800acde:	60f8      	str	r0, [r7, #12]
 800ace0:	60b9      	str	r1, [r7, #8]
 800ace2:	4613      	mov	r3, r2
 800ace4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	3301      	adds	r3, #1
 800acea:	781b      	ldrb	r3, [r3, #0]
 800acec:	2b03      	cmp	r3, #3
 800acee:	d120      	bne.n	800ad32 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	781b      	ldrb	r3, [r3, #0]
 800acf4:	1e9a      	subs	r2, r3, #2
 800acf6:	88fb      	ldrh	r3, [r7, #6]
 800acf8:	4293      	cmp	r3, r2
 800acfa:	bf28      	it	cs
 800acfc:	4613      	movcs	r3, r2
 800acfe:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	3302      	adds	r3, #2
 800ad04:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800ad06:	2300      	movs	r3, #0
 800ad08:	82fb      	strh	r3, [r7, #22]
 800ad0a:	e00b      	b.n	800ad24 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800ad0c:	8afb      	ldrh	r3, [r7, #22]
 800ad0e:	68fa      	ldr	r2, [r7, #12]
 800ad10:	4413      	add	r3, r2
 800ad12:	781a      	ldrb	r2, [r3, #0]
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	701a      	strb	r2, [r3, #0]
      pdest++;
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	3301      	adds	r3, #1
 800ad1c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800ad1e:	8afb      	ldrh	r3, [r7, #22]
 800ad20:	3302      	adds	r3, #2
 800ad22:	82fb      	strh	r3, [r7, #22]
 800ad24:	8afa      	ldrh	r2, [r7, #22]
 800ad26:	8abb      	ldrh	r3, [r7, #20]
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	d3ef      	bcc.n	800ad0c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	701a      	strb	r2, [r3, #0]
  }
}
 800ad32:	bf00      	nop
 800ad34:	371c      	adds	r7, #28
 800ad36:	46bd      	mov	sp, r7
 800ad38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3c:	4770      	bx	lr

0800ad3e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ad3e:	b480      	push	{r7}
 800ad40:	b085      	sub	sp, #20
 800ad42:	af00      	add	r7, sp, #0
 800ad44:	6078      	str	r0, [r7, #4]
 800ad46:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	881b      	ldrh	r3, [r3, #0]
 800ad4c:	687a      	ldr	r2, [r7, #4]
 800ad4e:	7812      	ldrb	r2, [r2, #0]
 800ad50:	4413      	add	r3, r2
 800ad52:	b29a      	uxth	r2, r3
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	4413      	add	r3, r2
 800ad62:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ad64:	68fb      	ldr	r3, [r7, #12]
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3714      	adds	r7, #20
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad70:	4770      	bx	lr

0800ad72 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ad72:	b580      	push	{r7, lr}
 800ad74:	b086      	sub	sp, #24
 800ad76:	af00      	add	r7, sp, #0
 800ad78:	60f8      	str	r0, [r7, #12]
 800ad7a:	60b9      	str	r1, [r7, #8]
 800ad7c:	4613      	mov	r3, r2
 800ad7e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ad80:	2301      	movs	r3, #1
 800ad82:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	789b      	ldrb	r3, [r3, #2]
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	d002      	beq.n	800ad92 <USBH_CtlReq+0x20>
 800ad8c:	2b02      	cmp	r3, #2
 800ad8e:	d00f      	beq.n	800adb0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800ad90:	e027      	b.n	800ade2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	68ba      	ldr	r2, [r7, #8]
 800ad96:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	88fa      	ldrh	r2, [r7, #6]
 800ad9c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	2201      	movs	r2, #1
 800ada2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	2202      	movs	r2, #2
 800ada8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800adaa:	2301      	movs	r3, #1
 800adac:	75fb      	strb	r3, [r7, #23]
      break;
 800adae:	e018      	b.n	800ade2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800adb0:	68f8      	ldr	r0, [r7, #12]
 800adb2:	f000 f81b 	bl	800adec <USBH_HandleControl>
 800adb6:	4603      	mov	r3, r0
 800adb8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800adba:	7dfb      	ldrb	r3, [r7, #23]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d002      	beq.n	800adc6 <USBH_CtlReq+0x54>
 800adc0:	7dfb      	ldrb	r3, [r7, #23]
 800adc2:	2b03      	cmp	r3, #3
 800adc4:	d106      	bne.n	800add4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	2201      	movs	r2, #1
 800adca:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2200      	movs	r2, #0
 800add0:	761a      	strb	r2, [r3, #24]
      break;
 800add2:	e005      	b.n	800ade0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800add4:	7dfb      	ldrb	r3, [r7, #23]
 800add6:	2b02      	cmp	r3, #2
 800add8:	d102      	bne.n	800ade0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	2201      	movs	r2, #1
 800adde:	709a      	strb	r2, [r3, #2]
      break;
 800ade0:	bf00      	nop
  }
  return status;
 800ade2:	7dfb      	ldrb	r3, [r7, #23]
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3718      	adds	r7, #24
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b086      	sub	sp, #24
 800adf0:	af02      	add	r7, sp, #8
 800adf2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800adf4:	2301      	movs	r3, #1
 800adf6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800adf8:	2300      	movs	r3, #0
 800adfa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	7e1b      	ldrb	r3, [r3, #24]
 800ae00:	3b01      	subs	r3, #1
 800ae02:	2b0a      	cmp	r3, #10
 800ae04:	f200 8156 	bhi.w	800b0b4 <USBH_HandleControl+0x2c8>
 800ae08:	a201      	add	r2, pc, #4	@ (adr r2, 800ae10 <USBH_HandleControl+0x24>)
 800ae0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae0e:	bf00      	nop
 800ae10:	0800ae3d 	.word	0x0800ae3d
 800ae14:	0800ae57 	.word	0x0800ae57
 800ae18:	0800aec1 	.word	0x0800aec1
 800ae1c:	0800aee7 	.word	0x0800aee7
 800ae20:	0800af1f 	.word	0x0800af1f
 800ae24:	0800af49 	.word	0x0800af49
 800ae28:	0800af9b 	.word	0x0800af9b
 800ae2c:	0800afbd 	.word	0x0800afbd
 800ae30:	0800aff9 	.word	0x0800aff9
 800ae34:	0800b01f 	.word	0x0800b01f
 800ae38:	0800b05d 	.word	0x0800b05d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f103 0110 	add.w	r1, r3, #16
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	795b      	ldrb	r3, [r3, #5]
 800ae46:	461a      	mov	r2, r3
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f000 f943 	bl	800b0d4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2202      	movs	r2, #2
 800ae52:	761a      	strb	r2, [r3, #24]
      break;
 800ae54:	e139      	b.n	800b0ca <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	795b      	ldrb	r3, [r3, #5]
 800ae5a:	4619      	mov	r1, r3
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f000 fcc5 	bl	800b7ec <USBH_LL_GetURBState>
 800ae62:	4603      	mov	r3, r0
 800ae64:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800ae66:	7bbb      	ldrb	r3, [r7, #14]
 800ae68:	2b01      	cmp	r3, #1
 800ae6a:	d11e      	bne.n	800aeaa <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	7c1b      	ldrb	r3, [r3, #16]
 800ae70:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ae74:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	8adb      	ldrh	r3, [r3, #22]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d00a      	beq.n	800ae94 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800ae7e:	7b7b      	ldrb	r3, [r7, #13]
 800ae80:	2b80      	cmp	r3, #128	@ 0x80
 800ae82:	d103      	bne.n	800ae8c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2203      	movs	r2, #3
 800ae88:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ae8a:	e115      	b.n	800b0b8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2205      	movs	r2, #5
 800ae90:	761a      	strb	r2, [r3, #24]
      break;
 800ae92:	e111      	b.n	800b0b8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800ae94:	7b7b      	ldrb	r3, [r7, #13]
 800ae96:	2b80      	cmp	r3, #128	@ 0x80
 800ae98:	d103      	bne.n	800aea2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2209      	movs	r2, #9
 800ae9e:	761a      	strb	r2, [r3, #24]
      break;
 800aea0:	e10a      	b.n	800b0b8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2207      	movs	r2, #7
 800aea6:	761a      	strb	r2, [r3, #24]
      break;
 800aea8:	e106      	b.n	800b0b8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800aeaa:	7bbb      	ldrb	r3, [r7, #14]
 800aeac:	2b04      	cmp	r3, #4
 800aeae:	d003      	beq.n	800aeb8 <USBH_HandleControl+0xcc>
 800aeb0:	7bbb      	ldrb	r3, [r7, #14]
 800aeb2:	2b02      	cmp	r3, #2
 800aeb4:	f040 8100 	bne.w	800b0b8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	220b      	movs	r2, #11
 800aebc:	761a      	strb	r2, [r3, #24]
      break;
 800aebe:	e0fb      	b.n	800b0b8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800aec6:	b29a      	uxth	r2, r3
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6899      	ldr	r1, [r3, #8]
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	899a      	ldrh	r2, [r3, #12]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	791b      	ldrb	r3, [r3, #4]
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f000 f93a 	bl	800b152 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2204      	movs	r2, #4
 800aee2:	761a      	strb	r2, [r3, #24]
      break;
 800aee4:	e0f1      	b.n	800b0ca <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	791b      	ldrb	r3, [r3, #4]
 800aeea:	4619      	mov	r1, r3
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f000 fc7d 	bl	800b7ec <USBH_LL_GetURBState>
 800aef2:	4603      	mov	r3, r0
 800aef4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800aef6:	7bbb      	ldrb	r3, [r7, #14]
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d102      	bne.n	800af02 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2209      	movs	r2, #9
 800af00:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800af02:	7bbb      	ldrb	r3, [r7, #14]
 800af04:	2b05      	cmp	r3, #5
 800af06:	d102      	bne.n	800af0e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800af08:	2303      	movs	r3, #3
 800af0a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800af0c:	e0d6      	b.n	800b0bc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800af0e:	7bbb      	ldrb	r3, [r7, #14]
 800af10:	2b04      	cmp	r3, #4
 800af12:	f040 80d3 	bne.w	800b0bc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	220b      	movs	r2, #11
 800af1a:	761a      	strb	r2, [r3, #24]
      break;
 800af1c:	e0ce      	b.n	800b0bc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6899      	ldr	r1, [r3, #8]
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	899a      	ldrh	r2, [r3, #12]
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	795b      	ldrb	r3, [r3, #5]
 800af2a:	2001      	movs	r0, #1
 800af2c:	9000      	str	r0, [sp, #0]
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f000 f8ea 	bl	800b108 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800af3a:	b29a      	uxth	r2, r3
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2206      	movs	r2, #6
 800af44:	761a      	strb	r2, [r3, #24]
      break;
 800af46:	e0c0      	b.n	800b0ca <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	795b      	ldrb	r3, [r3, #5]
 800af4c:	4619      	mov	r1, r3
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 fc4c 	bl	800b7ec <USBH_LL_GetURBState>
 800af54:	4603      	mov	r3, r0
 800af56:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800af58:	7bbb      	ldrb	r3, [r7, #14]
 800af5a:	2b01      	cmp	r3, #1
 800af5c:	d103      	bne.n	800af66 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2207      	movs	r2, #7
 800af62:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800af64:	e0ac      	b.n	800b0c0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800af66:	7bbb      	ldrb	r3, [r7, #14]
 800af68:	2b05      	cmp	r3, #5
 800af6a:	d105      	bne.n	800af78 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	220c      	movs	r2, #12
 800af70:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800af72:	2303      	movs	r3, #3
 800af74:	73fb      	strb	r3, [r7, #15]
      break;
 800af76:	e0a3      	b.n	800b0c0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800af78:	7bbb      	ldrb	r3, [r7, #14]
 800af7a:	2b02      	cmp	r3, #2
 800af7c:	d103      	bne.n	800af86 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2205      	movs	r2, #5
 800af82:	761a      	strb	r2, [r3, #24]
      break;
 800af84:	e09c      	b.n	800b0c0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800af86:	7bbb      	ldrb	r3, [r7, #14]
 800af88:	2b04      	cmp	r3, #4
 800af8a:	f040 8099 	bne.w	800b0c0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	220b      	movs	r2, #11
 800af92:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800af94:	2302      	movs	r3, #2
 800af96:	73fb      	strb	r3, [r7, #15]
      break;
 800af98:	e092      	b.n	800b0c0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	791b      	ldrb	r3, [r3, #4]
 800af9e:	2200      	movs	r2, #0
 800afa0:	2100      	movs	r1, #0
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f000 f8d5 	bl	800b152 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800afae:	b29a      	uxth	r2, r3
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2208      	movs	r2, #8
 800afb8:	761a      	strb	r2, [r3, #24]

      break;
 800afba:	e086      	b.n	800b0ca <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	791b      	ldrb	r3, [r3, #4]
 800afc0:	4619      	mov	r1, r3
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f000 fc12 	bl	800b7ec <USBH_LL_GetURBState>
 800afc8:	4603      	mov	r3, r0
 800afca:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800afcc:	7bbb      	ldrb	r3, [r7, #14]
 800afce:	2b01      	cmp	r3, #1
 800afd0:	d105      	bne.n	800afde <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	220d      	movs	r2, #13
 800afd6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800afd8:	2300      	movs	r3, #0
 800afda:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800afdc:	e072      	b.n	800b0c4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800afde:	7bbb      	ldrb	r3, [r7, #14]
 800afe0:	2b04      	cmp	r3, #4
 800afe2:	d103      	bne.n	800afec <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	220b      	movs	r2, #11
 800afe8:	761a      	strb	r2, [r3, #24]
      break;
 800afea:	e06b      	b.n	800b0c4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800afec:	7bbb      	ldrb	r3, [r7, #14]
 800afee:	2b05      	cmp	r3, #5
 800aff0:	d168      	bne.n	800b0c4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800aff2:	2303      	movs	r3, #3
 800aff4:	73fb      	strb	r3, [r7, #15]
      break;
 800aff6:	e065      	b.n	800b0c4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	795b      	ldrb	r3, [r3, #5]
 800affc:	2201      	movs	r2, #1
 800affe:	9200      	str	r2, [sp, #0]
 800b000:	2200      	movs	r2, #0
 800b002:	2100      	movs	r1, #0
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f000 f87f 	bl	800b108 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b010:	b29a      	uxth	r2, r3
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	220a      	movs	r2, #10
 800b01a:	761a      	strb	r2, [r3, #24]
      break;
 800b01c:	e055      	b.n	800b0ca <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	795b      	ldrb	r3, [r3, #5]
 800b022:	4619      	mov	r1, r3
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f000 fbe1 	bl	800b7ec <USBH_LL_GetURBState>
 800b02a:	4603      	mov	r3, r0
 800b02c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b02e:	7bbb      	ldrb	r3, [r7, #14]
 800b030:	2b01      	cmp	r3, #1
 800b032:	d105      	bne.n	800b040 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800b034:	2300      	movs	r3, #0
 800b036:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	220d      	movs	r2, #13
 800b03c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b03e:	e043      	b.n	800b0c8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b040:	7bbb      	ldrb	r3, [r7, #14]
 800b042:	2b02      	cmp	r3, #2
 800b044:	d103      	bne.n	800b04e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2209      	movs	r2, #9
 800b04a:	761a      	strb	r2, [r3, #24]
      break;
 800b04c:	e03c      	b.n	800b0c8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800b04e:	7bbb      	ldrb	r3, [r7, #14]
 800b050:	2b04      	cmp	r3, #4
 800b052:	d139      	bne.n	800b0c8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	220b      	movs	r2, #11
 800b058:	761a      	strb	r2, [r3, #24]
      break;
 800b05a:	e035      	b.n	800b0c8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	7e5b      	ldrb	r3, [r3, #25]
 800b060:	3301      	adds	r3, #1
 800b062:	b2da      	uxtb	r2, r3
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	765a      	strb	r2, [r3, #25]
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	7e5b      	ldrb	r3, [r3, #25]
 800b06c:	2b02      	cmp	r3, #2
 800b06e:	d806      	bhi.n	800b07e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2201      	movs	r2, #1
 800b074:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2201      	movs	r2, #1
 800b07a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b07c:	e025      	b.n	800b0ca <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b084:	2106      	movs	r1, #6
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2200      	movs	r2, #0
 800b08e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	795b      	ldrb	r3, [r3, #5]
 800b094:	4619      	mov	r1, r3
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f000 f90c 	bl	800b2b4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	791b      	ldrb	r3, [r3, #4]
 800b0a0:	4619      	mov	r1, r3
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f000 f906 	bl	800b2b4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b0ae:	2302      	movs	r3, #2
 800b0b0:	73fb      	strb	r3, [r7, #15]
      break;
 800b0b2:	e00a      	b.n	800b0ca <USBH_HandleControl+0x2de>

    default:
      break;
 800b0b4:	bf00      	nop
 800b0b6:	e008      	b.n	800b0ca <USBH_HandleControl+0x2de>
      break;
 800b0b8:	bf00      	nop
 800b0ba:	e006      	b.n	800b0ca <USBH_HandleControl+0x2de>
      break;
 800b0bc:	bf00      	nop
 800b0be:	e004      	b.n	800b0ca <USBH_HandleControl+0x2de>
      break;
 800b0c0:	bf00      	nop
 800b0c2:	e002      	b.n	800b0ca <USBH_HandleControl+0x2de>
      break;
 800b0c4:	bf00      	nop
 800b0c6:	e000      	b.n	800b0ca <USBH_HandleControl+0x2de>
      break;
 800b0c8:	bf00      	nop
  }

  return status;
 800b0ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3710      	adds	r7, #16
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b088      	sub	sp, #32
 800b0d8:	af04      	add	r7, sp, #16
 800b0da:	60f8      	str	r0, [r7, #12]
 800b0dc:	60b9      	str	r1, [r7, #8]
 800b0de:	4613      	mov	r3, r2
 800b0e0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b0e2:	79f9      	ldrb	r1, [r7, #7]
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	9303      	str	r3, [sp, #12]
 800b0e8:	2308      	movs	r3, #8
 800b0ea:	9302      	str	r3, [sp, #8]
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	9301      	str	r3, [sp, #4]
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	9300      	str	r3, [sp, #0]
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	68f8      	ldr	r0, [r7, #12]
 800b0fa:	f000 fb46 	bl	800b78a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800b0fe:	2300      	movs	r3, #0
}
 800b100:	4618      	mov	r0, r3
 800b102:	3710      	adds	r7, #16
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}

0800b108 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b088      	sub	sp, #32
 800b10c:	af04      	add	r7, sp, #16
 800b10e:	60f8      	str	r0, [r7, #12]
 800b110:	60b9      	str	r1, [r7, #8]
 800b112:	4611      	mov	r1, r2
 800b114:	461a      	mov	r2, r3
 800b116:	460b      	mov	r3, r1
 800b118:	80fb      	strh	r3, [r7, #6]
 800b11a:	4613      	mov	r3, r2
 800b11c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b124:	2b00      	cmp	r3, #0
 800b126:	d001      	beq.n	800b12c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b128:	2300      	movs	r3, #0
 800b12a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b12c:	7979      	ldrb	r1, [r7, #5]
 800b12e:	7e3b      	ldrb	r3, [r7, #24]
 800b130:	9303      	str	r3, [sp, #12]
 800b132:	88fb      	ldrh	r3, [r7, #6]
 800b134:	9302      	str	r3, [sp, #8]
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	9301      	str	r3, [sp, #4]
 800b13a:	2301      	movs	r3, #1
 800b13c:	9300      	str	r3, [sp, #0]
 800b13e:	2300      	movs	r3, #0
 800b140:	2200      	movs	r2, #0
 800b142:	68f8      	ldr	r0, [r7, #12]
 800b144:	f000 fb21 	bl	800b78a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b148:	2300      	movs	r3, #0
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	3710      	adds	r7, #16
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}

0800b152 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b152:	b580      	push	{r7, lr}
 800b154:	b088      	sub	sp, #32
 800b156:	af04      	add	r7, sp, #16
 800b158:	60f8      	str	r0, [r7, #12]
 800b15a:	60b9      	str	r1, [r7, #8]
 800b15c:	4611      	mov	r1, r2
 800b15e:	461a      	mov	r2, r3
 800b160:	460b      	mov	r3, r1
 800b162:	80fb      	strh	r3, [r7, #6]
 800b164:	4613      	mov	r3, r2
 800b166:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b168:	7979      	ldrb	r1, [r7, #5]
 800b16a:	2300      	movs	r3, #0
 800b16c:	9303      	str	r3, [sp, #12]
 800b16e:	88fb      	ldrh	r3, [r7, #6]
 800b170:	9302      	str	r3, [sp, #8]
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	9301      	str	r3, [sp, #4]
 800b176:	2301      	movs	r3, #1
 800b178:	9300      	str	r3, [sp, #0]
 800b17a:	2300      	movs	r3, #0
 800b17c:	2201      	movs	r2, #1
 800b17e:	68f8      	ldr	r0, [r7, #12]
 800b180:	f000 fb03 	bl	800b78a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b184:	2300      	movs	r3, #0

}
 800b186:	4618      	mov	r0, r3
 800b188:	3710      	adds	r7, #16
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}

0800b18e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b18e:	b580      	push	{r7, lr}
 800b190:	b088      	sub	sp, #32
 800b192:	af04      	add	r7, sp, #16
 800b194:	60f8      	str	r0, [r7, #12]
 800b196:	60b9      	str	r1, [r7, #8]
 800b198:	4611      	mov	r1, r2
 800b19a:	461a      	mov	r2, r3
 800b19c:	460b      	mov	r3, r1
 800b19e:	80fb      	strh	r3, [r7, #6]
 800b1a0:	4613      	mov	r3, r2
 800b1a2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d001      	beq.n	800b1b2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b1b2:	7979      	ldrb	r1, [r7, #5]
 800b1b4:	7e3b      	ldrb	r3, [r7, #24]
 800b1b6:	9303      	str	r3, [sp, #12]
 800b1b8:	88fb      	ldrh	r3, [r7, #6]
 800b1ba:	9302      	str	r3, [sp, #8]
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	9301      	str	r3, [sp, #4]
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	9300      	str	r3, [sp, #0]
 800b1c4:	2302      	movs	r3, #2
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	68f8      	ldr	r0, [r7, #12]
 800b1ca:	f000 fade 	bl	800b78a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b1ce:	2300      	movs	r3, #0
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3710      	adds	r7, #16
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}

0800b1d8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b088      	sub	sp, #32
 800b1dc:	af04      	add	r7, sp, #16
 800b1de:	60f8      	str	r0, [r7, #12]
 800b1e0:	60b9      	str	r1, [r7, #8]
 800b1e2:	4611      	mov	r1, r2
 800b1e4:	461a      	mov	r2, r3
 800b1e6:	460b      	mov	r3, r1
 800b1e8:	80fb      	strh	r3, [r7, #6]
 800b1ea:	4613      	mov	r3, r2
 800b1ec:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b1ee:	7979      	ldrb	r1, [r7, #5]
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	9303      	str	r3, [sp, #12]
 800b1f4:	88fb      	ldrh	r3, [r7, #6]
 800b1f6:	9302      	str	r3, [sp, #8]
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	9301      	str	r3, [sp, #4]
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	9300      	str	r3, [sp, #0]
 800b200:	2302      	movs	r3, #2
 800b202:	2201      	movs	r2, #1
 800b204:	68f8      	ldr	r0, [r7, #12]
 800b206:	f000 fac0 	bl	800b78a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b20a:	2300      	movs	r3, #0
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3710      	adds	r7, #16
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}

0800b214 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b086      	sub	sp, #24
 800b218:	af04      	add	r7, sp, #16
 800b21a:	6078      	str	r0, [r7, #4]
 800b21c:	4608      	mov	r0, r1
 800b21e:	4611      	mov	r1, r2
 800b220:	461a      	mov	r2, r3
 800b222:	4603      	mov	r3, r0
 800b224:	70fb      	strb	r3, [r7, #3]
 800b226:	460b      	mov	r3, r1
 800b228:	70bb      	strb	r3, [r7, #2]
 800b22a:	4613      	mov	r3, r2
 800b22c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b22e:	7878      	ldrb	r0, [r7, #1]
 800b230:	78ba      	ldrb	r2, [r7, #2]
 800b232:	78f9      	ldrb	r1, [r7, #3]
 800b234:	8b3b      	ldrh	r3, [r7, #24]
 800b236:	9302      	str	r3, [sp, #8]
 800b238:	7d3b      	ldrb	r3, [r7, #20]
 800b23a:	9301      	str	r3, [sp, #4]
 800b23c:	7c3b      	ldrb	r3, [r7, #16]
 800b23e:	9300      	str	r3, [sp, #0]
 800b240:	4603      	mov	r3, r0
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f000 fa53 	bl	800b6ee <USBH_LL_OpenPipe>

  return USBH_OK;
 800b248:	2300      	movs	r3, #0
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3708      	adds	r7, #8
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}

0800b252 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b252:	b580      	push	{r7, lr}
 800b254:	b082      	sub	sp, #8
 800b256:	af00      	add	r7, sp, #0
 800b258:	6078      	str	r0, [r7, #4]
 800b25a:	460b      	mov	r3, r1
 800b25c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800b25e:	78fb      	ldrb	r3, [r7, #3]
 800b260:	4619      	mov	r1, r3
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f000 fa72 	bl	800b74c <USBH_LL_ClosePipe>

  return USBH_OK;
 800b268:	2300      	movs	r3, #0
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3708      	adds	r7, #8
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}

0800b272 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b272:	b580      	push	{r7, lr}
 800b274:	b084      	sub	sp, #16
 800b276:	af00      	add	r7, sp, #0
 800b278:	6078      	str	r0, [r7, #4]
 800b27a:	460b      	mov	r3, r1
 800b27c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 f836 	bl	800b2f0 <USBH_GetFreePipe>
 800b284:	4603      	mov	r3, r0
 800b286:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b288:	89fb      	ldrh	r3, [r7, #14]
 800b28a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b28e:	4293      	cmp	r3, r2
 800b290:	d00a      	beq.n	800b2a8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800b292:	78fa      	ldrb	r2, [r7, #3]
 800b294:	89fb      	ldrh	r3, [r7, #14]
 800b296:	f003 030f 	and.w	r3, r3, #15
 800b29a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b29e:	6879      	ldr	r1, [r7, #4]
 800b2a0:	33e0      	adds	r3, #224	@ 0xe0
 800b2a2:	009b      	lsls	r3, r3, #2
 800b2a4:	440b      	add	r3, r1
 800b2a6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b2a8:	89fb      	ldrh	r3, [r7, #14]
 800b2aa:	b2db      	uxtb	r3, r3
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3710      	adds	r7, #16
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b083      	sub	sp, #12
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	460b      	mov	r3, r1
 800b2be:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800b2c0:	78fb      	ldrb	r3, [r7, #3]
 800b2c2:	2b0f      	cmp	r3, #15
 800b2c4:	d80d      	bhi.n	800b2e2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b2c6:	78fb      	ldrb	r3, [r7, #3]
 800b2c8:	687a      	ldr	r2, [r7, #4]
 800b2ca:	33e0      	adds	r3, #224	@ 0xe0
 800b2cc:	009b      	lsls	r3, r3, #2
 800b2ce:	4413      	add	r3, r2
 800b2d0:	685a      	ldr	r2, [r3, #4]
 800b2d2:	78fb      	ldrb	r3, [r7, #3]
 800b2d4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b2d8:	6879      	ldr	r1, [r7, #4]
 800b2da:	33e0      	adds	r3, #224	@ 0xe0
 800b2dc:	009b      	lsls	r3, r3, #2
 800b2de:	440b      	add	r3, r1
 800b2e0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b2e2:	2300      	movs	r3, #0
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	370c      	adds	r7, #12
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ee:	4770      	bx	lr

0800b2f0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b085      	sub	sp, #20
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	73fb      	strb	r3, [r7, #15]
 800b300:	e00f      	b.n	800b322 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b302:	7bfb      	ldrb	r3, [r7, #15]
 800b304:	687a      	ldr	r2, [r7, #4]
 800b306:	33e0      	adds	r3, #224	@ 0xe0
 800b308:	009b      	lsls	r3, r3, #2
 800b30a:	4413      	add	r3, r2
 800b30c:	685b      	ldr	r3, [r3, #4]
 800b30e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b312:	2b00      	cmp	r3, #0
 800b314:	d102      	bne.n	800b31c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b316:	7bfb      	ldrb	r3, [r7, #15]
 800b318:	b29b      	uxth	r3, r3
 800b31a:	e007      	b.n	800b32c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b31c:	7bfb      	ldrb	r3, [r7, #15]
 800b31e:	3301      	adds	r3, #1
 800b320:	73fb      	strb	r3, [r7, #15]
 800b322:	7bfb      	ldrb	r3, [r7, #15]
 800b324:	2b0f      	cmp	r3, #15
 800b326:	d9ec      	bls.n	800b302 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b328:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3714      	adds	r7, #20
 800b330:	46bd      	mov	sp, r7
 800b332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b336:	4770      	bx	lr

0800b338 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b33c:	2201      	movs	r2, #1
 800b33e:	490e      	ldr	r1, [pc, #56]	@ (800b378 <MX_USB_HOST_Init+0x40>)
 800b340:	480e      	ldr	r0, [pc, #56]	@ (800b37c <MX_USB_HOST_Init+0x44>)
 800b342:	f7fe fb15 	bl	8009970 <USBH_Init>
 800b346:	4603      	mov	r3, r0
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d001      	beq.n	800b350 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b34c:	f7f5 fed6 	bl	80010fc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b350:	490b      	ldr	r1, [pc, #44]	@ (800b380 <MX_USB_HOST_Init+0x48>)
 800b352:	480a      	ldr	r0, [pc, #40]	@ (800b37c <MX_USB_HOST_Init+0x44>)
 800b354:	f7fe fbb9 	bl	8009aca <USBH_RegisterClass>
 800b358:	4603      	mov	r3, r0
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d001      	beq.n	800b362 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b35e:	f7f5 fecd 	bl	80010fc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b362:	4806      	ldr	r0, [pc, #24]	@ (800b37c <MX_USB_HOST_Init+0x44>)
 800b364:	f7fe fc3d 	bl	8009be2 <USBH_Start>
 800b368:	4603      	mov	r3, r0
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d001      	beq.n	800b372 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b36e:	f7f5 fec5 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b372:	bf00      	nop
 800b374:	bd80      	pop	{r7, pc}
 800b376:	bf00      	nop
 800b378:	0800b399 	.word	0x0800b399
 800b37c:	20002600 	.word	0x20002600
 800b380:	2000080c 	.word	0x2000080c

0800b384 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b388:	4802      	ldr	r0, [pc, #8]	@ (800b394 <MX_USB_HOST_Process+0x10>)
 800b38a:	f7fe fc3b 	bl	8009c04 <USBH_Process>
}
 800b38e:	bf00      	nop
 800b390:	bd80      	pop	{r7, pc}
 800b392:	bf00      	nop
 800b394:	20002600 	.word	0x20002600

0800b398 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b398:	b480      	push	{r7}
 800b39a:	b083      	sub	sp, #12
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
 800b3a0:	460b      	mov	r3, r1
 800b3a2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b3a4:	78fb      	ldrb	r3, [r7, #3]
 800b3a6:	3b01      	subs	r3, #1
 800b3a8:	2b04      	cmp	r3, #4
 800b3aa:	d819      	bhi.n	800b3e0 <USBH_UserProcess+0x48>
 800b3ac:	a201      	add	r2, pc, #4	@ (adr r2, 800b3b4 <USBH_UserProcess+0x1c>)
 800b3ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3b2:	bf00      	nop
 800b3b4:	0800b3e1 	.word	0x0800b3e1
 800b3b8:	0800b3d1 	.word	0x0800b3d1
 800b3bc:	0800b3e1 	.word	0x0800b3e1
 800b3c0:	0800b3d9 	.word	0x0800b3d9
 800b3c4:	0800b3c9 	.word	0x0800b3c9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b3c8:	4b09      	ldr	r3, [pc, #36]	@ (800b3f0 <USBH_UserProcess+0x58>)
 800b3ca:	2203      	movs	r2, #3
 800b3cc:	701a      	strb	r2, [r3, #0]
  break;
 800b3ce:	e008      	b.n	800b3e2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b3d0:	4b07      	ldr	r3, [pc, #28]	@ (800b3f0 <USBH_UserProcess+0x58>)
 800b3d2:	2202      	movs	r2, #2
 800b3d4:	701a      	strb	r2, [r3, #0]
  break;
 800b3d6:	e004      	b.n	800b3e2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b3d8:	4b05      	ldr	r3, [pc, #20]	@ (800b3f0 <USBH_UserProcess+0x58>)
 800b3da:	2201      	movs	r2, #1
 800b3dc:	701a      	strb	r2, [r3, #0]
  break;
 800b3de:	e000      	b.n	800b3e2 <USBH_UserProcess+0x4a>

  default:
  break;
 800b3e0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b3e2:	bf00      	nop
 800b3e4:	370c      	adds	r7, #12
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ec:	4770      	bx	lr
 800b3ee:	bf00      	nop
 800b3f0:	200029d8 	.word	0x200029d8

0800b3f4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b08a      	sub	sp, #40	@ 0x28
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b3fc:	f107 0314 	add.w	r3, r7, #20
 800b400:	2200      	movs	r2, #0
 800b402:	601a      	str	r2, [r3, #0]
 800b404:	605a      	str	r2, [r3, #4]
 800b406:	609a      	str	r2, [r3, #8]
 800b408:	60da      	str	r2, [r3, #12]
 800b40a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b414:	d147      	bne.n	800b4a6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b416:	2300      	movs	r3, #0
 800b418:	613b      	str	r3, [r7, #16]
 800b41a:	4b25      	ldr	r3, [pc, #148]	@ (800b4b0 <HAL_HCD_MspInit+0xbc>)
 800b41c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b41e:	4a24      	ldr	r2, [pc, #144]	@ (800b4b0 <HAL_HCD_MspInit+0xbc>)
 800b420:	f043 0301 	orr.w	r3, r3, #1
 800b424:	6313      	str	r3, [r2, #48]	@ 0x30
 800b426:	4b22      	ldr	r3, [pc, #136]	@ (800b4b0 <HAL_HCD_MspInit+0xbc>)
 800b428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b42a:	f003 0301 	and.w	r3, r3, #1
 800b42e:	613b      	str	r3, [r7, #16]
 800b430:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b432:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b436:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b438:	2300      	movs	r3, #0
 800b43a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b43c:	2300      	movs	r3, #0
 800b43e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b440:	f107 0314 	add.w	r3, r7, #20
 800b444:	4619      	mov	r1, r3
 800b446:	481b      	ldr	r0, [pc, #108]	@ (800b4b4 <HAL_HCD_MspInit+0xc0>)
 800b448:	f7f7 fa42 	bl	80028d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b44c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800b450:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b452:	2302      	movs	r3, #2
 800b454:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b456:	2300      	movs	r3, #0
 800b458:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b45a:	2300      	movs	r3, #0
 800b45c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b45e:	230a      	movs	r3, #10
 800b460:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b462:	f107 0314 	add.w	r3, r7, #20
 800b466:	4619      	mov	r1, r3
 800b468:	4812      	ldr	r0, [pc, #72]	@ (800b4b4 <HAL_HCD_MspInit+0xc0>)
 800b46a:	f7f7 fa31 	bl	80028d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b46e:	4b10      	ldr	r3, [pc, #64]	@ (800b4b0 <HAL_HCD_MspInit+0xbc>)
 800b470:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b472:	4a0f      	ldr	r2, [pc, #60]	@ (800b4b0 <HAL_HCD_MspInit+0xbc>)
 800b474:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b478:	6353      	str	r3, [r2, #52]	@ 0x34
 800b47a:	2300      	movs	r3, #0
 800b47c:	60fb      	str	r3, [r7, #12]
 800b47e:	4b0c      	ldr	r3, [pc, #48]	@ (800b4b0 <HAL_HCD_MspInit+0xbc>)
 800b480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b482:	4a0b      	ldr	r2, [pc, #44]	@ (800b4b0 <HAL_HCD_MspInit+0xbc>)
 800b484:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b488:	6453      	str	r3, [r2, #68]	@ 0x44
 800b48a:	4b09      	ldr	r3, [pc, #36]	@ (800b4b0 <HAL_HCD_MspInit+0xbc>)
 800b48c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b48e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b492:	60fb      	str	r3, [r7, #12]
 800b494:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b496:	2200      	movs	r2, #0
 800b498:	2100      	movs	r1, #0
 800b49a:	2043      	movs	r0, #67	@ 0x43
 800b49c:	f7f6 fe71 	bl	8002182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b4a0:	2043      	movs	r0, #67	@ 0x43
 800b4a2:	f7f6 fe8a 	bl	80021ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b4a6:	bf00      	nop
 800b4a8:	3728      	adds	r7, #40	@ 0x28
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}
 800b4ae:	bf00      	nop
 800b4b0:	40023800 	.word	0x40023800
 800b4b4:	40020000 	.word	0x40020000

0800b4b8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b082      	sub	sp, #8
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f7fe ff73 	bl	800a3b2 <USBH_LL_IncTimer>
}
 800b4cc:	bf00      	nop
 800b4ce:	3708      	adds	r7, #8
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}

0800b4d4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b082      	sub	sp, #8
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f7fe ffab 	bl	800a43e <USBH_LL_Connect>
}
 800b4e8:	bf00      	nop
 800b4ea:	3708      	adds	r7, #8
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}

0800b4f0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b082      	sub	sp, #8
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b4fe:	4618      	mov	r0, r3
 800b500:	f7fe ffb4 	bl	800a46c <USBH_LL_Disconnect>
}
 800b504:	bf00      	nop
 800b506:	3708      	adds	r7, #8
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}

0800b50c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b083      	sub	sp, #12
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	460b      	mov	r3, r1
 800b516:	70fb      	strb	r3, [r7, #3]
 800b518:	4613      	mov	r3, r2
 800b51a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b51c:	bf00      	nop
 800b51e:	370c      	adds	r7, #12
 800b520:	46bd      	mov	sp, r7
 800b522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b526:	4770      	bx	lr

0800b528 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b082      	sub	sp, #8
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b536:	4618      	mov	r0, r3
 800b538:	f7fe ff65 	bl	800a406 <USBH_LL_PortEnabled>
}
 800b53c:	bf00      	nop
 800b53e:	3708      	adds	r7, #8
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}

0800b544 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b082      	sub	sp, #8
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b552:	4618      	mov	r0, r3
 800b554:	f7fe ff65 	bl	800a422 <USBH_LL_PortDisabled>
}
 800b558:	bf00      	nop
 800b55a:	3708      	adds	r7, #8
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b082      	sub	sp, #8
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b56e:	2b01      	cmp	r3, #1
 800b570:	d12a      	bne.n	800b5c8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b572:	4a18      	ldr	r2, [pc, #96]	@ (800b5d4 <USBH_LL_Init+0x74>)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	4a15      	ldr	r2, [pc, #84]	@ (800b5d4 <USBH_LL_Init+0x74>)
 800b57e:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b582:	4b14      	ldr	r3, [pc, #80]	@ (800b5d4 <USBH_LL_Init+0x74>)
 800b584:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b588:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b58a:	4b12      	ldr	r3, [pc, #72]	@ (800b5d4 <USBH_LL_Init+0x74>)
 800b58c:	2208      	movs	r2, #8
 800b58e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b590:	4b10      	ldr	r3, [pc, #64]	@ (800b5d4 <USBH_LL_Init+0x74>)
 800b592:	2201      	movs	r2, #1
 800b594:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b596:	4b0f      	ldr	r3, [pc, #60]	@ (800b5d4 <USBH_LL_Init+0x74>)
 800b598:	2200      	movs	r2, #0
 800b59a:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b59c:	4b0d      	ldr	r3, [pc, #52]	@ (800b5d4 <USBH_LL_Init+0x74>)
 800b59e:	2202      	movs	r2, #2
 800b5a0:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b5a2:	4b0c      	ldr	r3, [pc, #48]	@ (800b5d4 <USBH_LL_Init+0x74>)
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b5a8:	480a      	ldr	r0, [pc, #40]	@ (800b5d4 <USBH_LL_Init+0x74>)
 800b5aa:	f7f7 fb46 	bl	8002c3a <HAL_HCD_Init>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d001      	beq.n	800b5b8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b5b4:	f7f5 fda2 	bl	80010fc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b5b8:	4806      	ldr	r0, [pc, #24]	@ (800b5d4 <USBH_LL_Init+0x74>)
 800b5ba:	f7f7 ffa7 	bl	800350c <HAL_HCD_GetCurrentFrame>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	4619      	mov	r1, r3
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f7fe fee6 	bl	800a394 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b5c8:	2300      	movs	r3, #0
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3708      	adds	r7, #8
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}
 800b5d2:	bf00      	nop
 800b5d4:	200029dc 	.word	0x200029dc

0800b5d8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b084      	sub	sp, #16
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f7f7 ff14 	bl	800341c <HAL_HCD_Start>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b5f8:	7bfb      	ldrb	r3, [r7, #15]
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f000 f95e 	bl	800b8bc <USBH_Get_USB_Status>
 800b600:	4603      	mov	r3, r0
 800b602:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b604:	7bbb      	ldrb	r3, [r7, #14]
}
 800b606:	4618      	mov	r0, r3
 800b608:	3710      	adds	r7, #16
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}

0800b60e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b60e:	b580      	push	{r7, lr}
 800b610:	b084      	sub	sp, #16
 800b612:	af00      	add	r7, sp, #0
 800b614:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b616:	2300      	movs	r3, #0
 800b618:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b61a:	2300      	movs	r3, #0
 800b61c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b624:	4618      	mov	r0, r3
 800b626:	f7f7 ff1c 	bl	8003462 <HAL_HCD_Stop>
 800b62a:	4603      	mov	r3, r0
 800b62c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b62e:	7bfb      	ldrb	r3, [r7, #15]
 800b630:	4618      	mov	r0, r3
 800b632:	f000 f943 	bl	800b8bc <USBH_Get_USB_Status>
 800b636:	4603      	mov	r3, r0
 800b638:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b63a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3710      	adds	r7, #16
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}

0800b644 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b084      	sub	sp, #16
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b64c:	2301      	movs	r3, #1
 800b64e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b656:	4618      	mov	r0, r3
 800b658:	f7f7 ff66 	bl	8003528 <HAL_HCD_GetCurrentSpeed>
 800b65c:	4603      	mov	r3, r0
 800b65e:	2b02      	cmp	r3, #2
 800b660:	d00c      	beq.n	800b67c <USBH_LL_GetSpeed+0x38>
 800b662:	2b02      	cmp	r3, #2
 800b664:	d80d      	bhi.n	800b682 <USBH_LL_GetSpeed+0x3e>
 800b666:	2b00      	cmp	r3, #0
 800b668:	d002      	beq.n	800b670 <USBH_LL_GetSpeed+0x2c>
 800b66a:	2b01      	cmp	r3, #1
 800b66c:	d003      	beq.n	800b676 <USBH_LL_GetSpeed+0x32>
 800b66e:	e008      	b.n	800b682 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b670:	2300      	movs	r3, #0
 800b672:	73fb      	strb	r3, [r7, #15]
    break;
 800b674:	e008      	b.n	800b688 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b676:	2301      	movs	r3, #1
 800b678:	73fb      	strb	r3, [r7, #15]
    break;
 800b67a:	e005      	b.n	800b688 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b67c:	2302      	movs	r3, #2
 800b67e:	73fb      	strb	r3, [r7, #15]
    break;
 800b680:	e002      	b.n	800b688 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b682:	2301      	movs	r3, #1
 800b684:	73fb      	strb	r3, [r7, #15]
    break;
 800b686:	bf00      	nop
  }
  return  speed;
 800b688:	7bfb      	ldrb	r3, [r7, #15]
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3710      	adds	r7, #16
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}

0800b692 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b692:	b580      	push	{r7, lr}
 800b694:	b084      	sub	sp, #16
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b69a:	2300      	movs	r3, #0
 800b69c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	f7f7 fef7 	bl	800349c <HAL_HCD_ResetPort>
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b6b2:	7bfb      	ldrb	r3, [r7, #15]
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f000 f901 	bl	800b8bc <USBH_Get_USB_Status>
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6be:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3710      	adds	r7, #16
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}

0800b6c8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b082      	sub	sp, #8
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
 800b6d0:	460b      	mov	r3, r1
 800b6d2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b6da:	78fa      	ldrb	r2, [r7, #3]
 800b6dc:	4611      	mov	r1, r2
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f7f7 feff 	bl	80034e2 <HAL_HCD_HC_GetXferCount>
 800b6e4:	4603      	mov	r3, r0
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3708      	adds	r7, #8
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}

0800b6ee <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b6ee:	b590      	push	{r4, r7, lr}
 800b6f0:	b089      	sub	sp, #36	@ 0x24
 800b6f2:	af04      	add	r7, sp, #16
 800b6f4:	6078      	str	r0, [r7, #4]
 800b6f6:	4608      	mov	r0, r1
 800b6f8:	4611      	mov	r1, r2
 800b6fa:	461a      	mov	r2, r3
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	70fb      	strb	r3, [r7, #3]
 800b700:	460b      	mov	r3, r1
 800b702:	70bb      	strb	r3, [r7, #2]
 800b704:	4613      	mov	r3, r2
 800b706:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b708:	2300      	movs	r3, #0
 800b70a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b70c:	2300      	movs	r3, #0
 800b70e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b716:	787c      	ldrb	r4, [r7, #1]
 800b718:	78ba      	ldrb	r2, [r7, #2]
 800b71a:	78f9      	ldrb	r1, [r7, #3]
 800b71c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b71e:	9302      	str	r3, [sp, #8]
 800b720:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b724:	9301      	str	r3, [sp, #4]
 800b726:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b72a:	9300      	str	r3, [sp, #0]
 800b72c:	4623      	mov	r3, r4
 800b72e:	f7f7 faeb 	bl	8002d08 <HAL_HCD_HC_Init>
 800b732:	4603      	mov	r3, r0
 800b734:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b736:	7bfb      	ldrb	r3, [r7, #15]
 800b738:	4618      	mov	r0, r3
 800b73a:	f000 f8bf 	bl	800b8bc <USBH_Get_USB_Status>
 800b73e:	4603      	mov	r3, r0
 800b740:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b742:	7bbb      	ldrb	r3, [r7, #14]
}
 800b744:	4618      	mov	r0, r3
 800b746:	3714      	adds	r7, #20
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd90      	pop	{r4, r7, pc}

0800b74c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b084      	sub	sp, #16
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
 800b754:	460b      	mov	r3, r1
 800b756:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b758:	2300      	movs	r3, #0
 800b75a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b75c:	2300      	movs	r3, #0
 800b75e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b766:	78fa      	ldrb	r2, [r7, #3]
 800b768:	4611      	mov	r1, r2
 800b76a:	4618      	mov	r0, r3
 800b76c:	f7f7 fb84 	bl	8002e78 <HAL_HCD_HC_Halt>
 800b770:	4603      	mov	r3, r0
 800b772:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b774:	7bfb      	ldrb	r3, [r7, #15]
 800b776:	4618      	mov	r0, r3
 800b778:	f000 f8a0 	bl	800b8bc <USBH_Get_USB_Status>
 800b77c:	4603      	mov	r3, r0
 800b77e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b780:	7bbb      	ldrb	r3, [r7, #14]
}
 800b782:	4618      	mov	r0, r3
 800b784:	3710      	adds	r7, #16
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}

0800b78a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b78a:	b590      	push	{r4, r7, lr}
 800b78c:	b089      	sub	sp, #36	@ 0x24
 800b78e:	af04      	add	r7, sp, #16
 800b790:	6078      	str	r0, [r7, #4]
 800b792:	4608      	mov	r0, r1
 800b794:	4611      	mov	r1, r2
 800b796:	461a      	mov	r2, r3
 800b798:	4603      	mov	r3, r0
 800b79a:	70fb      	strb	r3, [r7, #3]
 800b79c:	460b      	mov	r3, r1
 800b79e:	70bb      	strb	r3, [r7, #2]
 800b7a0:	4613      	mov	r3, r2
 800b7a2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b7b2:	787c      	ldrb	r4, [r7, #1]
 800b7b4:	78ba      	ldrb	r2, [r7, #2]
 800b7b6:	78f9      	ldrb	r1, [r7, #3]
 800b7b8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b7bc:	9303      	str	r3, [sp, #12]
 800b7be:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b7c0:	9302      	str	r3, [sp, #8]
 800b7c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7c4:	9301      	str	r3, [sp, #4]
 800b7c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b7ca:	9300      	str	r3, [sp, #0]
 800b7cc:	4623      	mov	r3, r4
 800b7ce:	f7f7 fb77 	bl	8002ec0 <HAL_HCD_HC_SubmitRequest>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b7d6:	7bfb      	ldrb	r3, [r7, #15]
 800b7d8:	4618      	mov	r0, r3
 800b7da:	f000 f86f 	bl	800b8bc <USBH_Get_USB_Status>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3714      	adds	r7, #20
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd90      	pop	{r4, r7, pc}

0800b7ec <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b082      	sub	sp, #8
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
 800b7f4:	460b      	mov	r3, r1
 800b7f6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b7fe:	78fa      	ldrb	r2, [r7, #3]
 800b800:	4611      	mov	r1, r2
 800b802:	4618      	mov	r0, r3
 800b804:	f7f7 fe58 	bl	80034b8 <HAL_HCD_HC_GetURBState>
 800b808:	4603      	mov	r3, r0
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3708      	adds	r7, #8
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}

0800b812 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b812:	b580      	push	{r7, lr}
 800b814:	b082      	sub	sp, #8
 800b816:	af00      	add	r7, sp, #0
 800b818:	6078      	str	r0, [r7, #4]
 800b81a:	460b      	mov	r3, r1
 800b81c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b824:	2b01      	cmp	r3, #1
 800b826:	d103      	bne.n	800b830 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b828:	78fb      	ldrb	r3, [r7, #3]
 800b82a:	4618      	mov	r0, r3
 800b82c:	f000 f872 	bl	800b914 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b830:	20c8      	movs	r0, #200	@ 0xc8
 800b832:	f7f5 ff9f 	bl	8001774 <HAL_Delay>
  return USBH_OK;
 800b836:	2300      	movs	r3, #0
}
 800b838:	4618      	mov	r0, r3
 800b83a:	3708      	adds	r7, #8
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}

0800b840 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b840:	b480      	push	{r7}
 800b842:	b085      	sub	sp, #20
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
 800b848:	460b      	mov	r3, r1
 800b84a:	70fb      	strb	r3, [r7, #3]
 800b84c:	4613      	mov	r3, r2
 800b84e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b856:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b858:	78fa      	ldrb	r2, [r7, #3]
 800b85a:	68f9      	ldr	r1, [r7, #12]
 800b85c:	4613      	mov	r3, r2
 800b85e:	011b      	lsls	r3, r3, #4
 800b860:	1a9b      	subs	r3, r3, r2
 800b862:	009b      	lsls	r3, r3, #2
 800b864:	440b      	add	r3, r1
 800b866:	3317      	adds	r3, #23
 800b868:	781b      	ldrb	r3, [r3, #0]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d00a      	beq.n	800b884 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b86e:	78fa      	ldrb	r2, [r7, #3]
 800b870:	68f9      	ldr	r1, [r7, #12]
 800b872:	4613      	mov	r3, r2
 800b874:	011b      	lsls	r3, r3, #4
 800b876:	1a9b      	subs	r3, r3, r2
 800b878:	009b      	lsls	r3, r3, #2
 800b87a:	440b      	add	r3, r1
 800b87c:	333c      	adds	r3, #60	@ 0x3c
 800b87e:	78ba      	ldrb	r2, [r7, #2]
 800b880:	701a      	strb	r2, [r3, #0]
 800b882:	e009      	b.n	800b898 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b884:	78fa      	ldrb	r2, [r7, #3]
 800b886:	68f9      	ldr	r1, [r7, #12]
 800b888:	4613      	mov	r3, r2
 800b88a:	011b      	lsls	r3, r3, #4
 800b88c:	1a9b      	subs	r3, r3, r2
 800b88e:	009b      	lsls	r3, r3, #2
 800b890:	440b      	add	r3, r1
 800b892:	333d      	adds	r3, #61	@ 0x3d
 800b894:	78ba      	ldrb	r2, [r7, #2]
 800b896:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b898:	2300      	movs	r3, #0
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3714      	adds	r7, #20
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a4:	4770      	bx	lr

0800b8a6 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b8a6:	b580      	push	{r7, lr}
 800b8a8:	b082      	sub	sp, #8
 800b8aa:	af00      	add	r7, sp, #0
 800b8ac:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f7f5 ff60 	bl	8001774 <HAL_Delay>
}
 800b8b4:	bf00      	nop
 800b8b6:	3708      	adds	r7, #8
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}

0800b8bc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b8bc:	b480      	push	{r7}
 800b8be:	b085      	sub	sp, #20
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b8ca:	79fb      	ldrb	r3, [r7, #7]
 800b8cc:	2b03      	cmp	r3, #3
 800b8ce:	d817      	bhi.n	800b900 <USBH_Get_USB_Status+0x44>
 800b8d0:	a201      	add	r2, pc, #4	@ (adr r2, 800b8d8 <USBH_Get_USB_Status+0x1c>)
 800b8d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8d6:	bf00      	nop
 800b8d8:	0800b8e9 	.word	0x0800b8e9
 800b8dc:	0800b8ef 	.word	0x0800b8ef
 800b8e0:	0800b8f5 	.word	0x0800b8f5
 800b8e4:	0800b8fb 	.word	0x0800b8fb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	73fb      	strb	r3, [r7, #15]
    break;
 800b8ec:	e00b      	b.n	800b906 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b8ee:	2302      	movs	r3, #2
 800b8f0:	73fb      	strb	r3, [r7, #15]
    break;
 800b8f2:	e008      	b.n	800b906 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	73fb      	strb	r3, [r7, #15]
    break;
 800b8f8:	e005      	b.n	800b906 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b8fa:	2302      	movs	r3, #2
 800b8fc:	73fb      	strb	r3, [r7, #15]
    break;
 800b8fe:	e002      	b.n	800b906 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b900:	2302      	movs	r3, #2
 800b902:	73fb      	strb	r3, [r7, #15]
    break;
 800b904:	bf00      	nop
  }
  return usb_status;
 800b906:	7bfb      	ldrb	r3, [r7, #15]
}
 800b908:	4618      	mov	r0, r3
 800b90a:	3714      	adds	r7, #20
 800b90c:	46bd      	mov	sp, r7
 800b90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b912:	4770      	bx	lr

0800b914 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b084      	sub	sp, #16
 800b918:	af00      	add	r7, sp, #0
 800b91a:	4603      	mov	r3, r0
 800b91c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b91e:	79fb      	ldrb	r3, [r7, #7]
 800b920:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b922:	79fb      	ldrb	r3, [r7, #7]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d102      	bne.n	800b92e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b928:	2300      	movs	r3, #0
 800b92a:	73fb      	strb	r3, [r7, #15]
 800b92c:	e001      	b.n	800b932 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b92e:	2301      	movs	r3, #1
 800b930:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b932:	7bfb      	ldrb	r3, [r7, #15]
 800b934:	461a      	mov	r2, r3
 800b936:	2101      	movs	r1, #1
 800b938:	4803      	ldr	r0, [pc, #12]	@ (800b948 <MX_DriverVbusFS+0x34>)
 800b93a:	f7f7 f965 	bl	8002c08 <HAL_GPIO_WritePin>
}
 800b93e:	bf00      	nop
 800b940:	3710      	adds	r7, #16
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}
 800b946:	bf00      	nop
 800b948:	40020800 	.word	0x40020800

0800b94c <arm_float_to_q15>:
 800b94c:	b4f0      	push	{r4, r5, r6, r7}
 800b94e:	0897      	lsrs	r7, r2, #2
 800b950:	d06e      	beq.n	800ba30 <arm_float_to_q15+0xe4>
 800b952:	eddf 5a49 	vldr	s11, [pc, #292]	@ 800ba78 <arm_float_to_q15+0x12c>
 800b956:	f100 0510 	add.w	r5, r0, #16
 800b95a:	f101 0408 	add.w	r4, r1, #8
 800b95e:	463e      	mov	r6, r7
 800b960:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800b964:	eefe 6a00 	vmov.f32	s13, #224	@ 0xbf000000 -0.5
 800b968:	ed55 7a04 	vldr	s15, [r5, #-16]
 800b96c:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800b970:	3510      	adds	r5, #16
 800b972:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800b976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b97a:	bfd4      	ite	le
 800b97c:	eef0 7a66 	vmovle.f32	s15, s13
 800b980:	eef0 7a46 	vmovgt.f32	s15, s12
 800b984:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b988:	3408      	adds	r4, #8
 800b98a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b98e:	ee17 3a90 	vmov	r3, s15
 800b992:	f303 030f 	ssat	r3, #16, r3
 800b996:	f824 3c10 	strh.w	r3, [r4, #-16]
 800b99a:	ed55 7a07 	vldr	s15, [r5, #-28]	@ 0xffffffe4
 800b99e:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800b9a2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800b9a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9aa:	bfd4      	ite	le
 800b9ac:	eef0 7a66 	vmovle.f32	s15, s13
 800b9b0:	eef0 7a46 	vmovgt.f32	s15, s12
 800b9b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b9b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b9bc:	ee17 3a90 	vmov	r3, s15
 800b9c0:	f303 030f 	ssat	r3, #16, r3
 800b9c4:	f824 3c0e 	strh.w	r3, [r4, #-14]
 800b9c8:	ed55 7a06 	vldr	s15, [r5, #-24]	@ 0xffffffe8
 800b9cc:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800b9d0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800b9d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9d8:	bfd4      	ite	le
 800b9da:	eef0 7a66 	vmovle.f32	s15, s13
 800b9de:	eef0 7a46 	vmovgt.f32	s15, s12
 800b9e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b9e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b9ea:	ee17 3a90 	vmov	r3, s15
 800b9ee:	f303 030f 	ssat	r3, #16, r3
 800b9f2:	f824 3c0c 	strh.w	r3, [r4, #-12]
 800b9f6:	ed55 7a05 	vldr	s15, [r5, #-20]	@ 0xffffffec
 800b9fa:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800b9fe:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800ba02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba06:	bfd4      	ite	le
 800ba08:	eef0 7a66 	vmovle.f32	s15, s13
 800ba0c:	eef0 7a46 	vmovgt.f32	s15, s12
 800ba10:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ba14:	3e01      	subs	r6, #1
 800ba16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba1a:	ee17 3a90 	vmov	r3, s15
 800ba1e:	f303 030f 	ssat	r3, #16, r3
 800ba22:	f824 3c0a 	strh.w	r3, [r4, #-10]
 800ba26:	d19f      	bne.n	800b968 <arm_float_to_q15+0x1c>
 800ba28:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 800ba2c:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800ba30:	f012 0203 	ands.w	r2, r2, #3
 800ba34:	d01e      	beq.n	800ba74 <arm_float_to_q15+0x128>
 800ba36:	eddf 5a10 	vldr	s11, [pc, #64]	@ 800ba78 <arm_float_to_q15+0x12c>
 800ba3a:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800ba3e:	eefe 6a00 	vmov.f32	s13, #224	@ 0xbf000000 -0.5
 800ba42:	ecf0 7a01 	vldmia	r0!, {s15}
 800ba46:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800ba4a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800ba4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba52:	bfd4      	ite	le
 800ba54:	eef0 7a66 	vmovle.f32	s15, s13
 800ba58:	eef0 7a46 	vmovgt.f32	s15, s12
 800ba5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ba60:	3a01      	subs	r2, #1
 800ba62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba66:	ee17 3a90 	vmov	r3, s15
 800ba6a:	f303 030f 	ssat	r3, #16, r3
 800ba6e:	f821 3b02 	strh.w	r3, [r1], #2
 800ba72:	d1e6      	bne.n	800ba42 <arm_float_to_q15+0xf6>
 800ba74:	bcf0      	pop	{r4, r5, r6, r7}
 800ba76:	4770      	bx	lr
 800ba78:	47000000 	.word	0x47000000

0800ba7c <arm_fir_q15>:
 800ba7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba80:	4605      	mov	r5, r0
 800ba82:	b095      	sub	sp, #84	@ 0x54
 800ba84:	686c      	ldr	r4, [r5, #4]
 800ba86:	9012      	str	r0, [sp, #72]	@ 0x48
 800ba88:	8800      	ldrh	r0, [r0, #0]
 800ba8a:	940c      	str	r4, [sp, #48]	@ 0x30
 800ba8c:	4626      	mov	r6, r4
 800ba8e:	f100 4c00 	add.w	ip, r0, #2147483648	@ 0x80000000
 800ba92:	68ac      	ldr	r4, [r5, #8]
 800ba94:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ba96:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800ba9a:	461f      	mov	r7, r3
 800ba9c:	9408      	str	r4, [sp, #32]
 800ba9e:	4623      	mov	r3, r4
 800baa0:	eb06 044c 	add.w	r4, r6, ip, lsl #1
 800baa4:	4625      	mov	r5, r4
 800baa6:	940d      	str	r4, [sp, #52]	@ 0x34
 800baa8:	08bc      	lsrs	r4, r7, #2
 800baaa:	9010      	str	r0, [sp, #64]	@ 0x40
 800baac:	910e      	str	r1, [sp, #56]	@ 0x38
 800baae:	920f      	str	r2, [sp, #60]	@ 0x3c
 800bab0:	4627      	mov	r7, r4
 800bab2:	9411      	str	r4, [sp, #68]	@ 0x44
 800bab4:	f000 80c0 	beq.w	800bc38 <arm_fir_q15+0x1bc>
 800bab8:	4604      	mov	r4, r0
 800baba:	0880      	lsrs	r0, r0, #2
 800babc:	9007      	str	r0, [sp, #28]
 800babe:	00c0      	lsls	r0, r0, #3
 800bac0:	4403      	add	r3, r0
 800bac2:	930a      	str	r3, [sp, #40]	@ 0x28
 800bac4:	f004 0303 	and.w	r3, r4, #3
 800bac8:	9309      	str	r3, [sp, #36]	@ 0x24
 800baca:	f105 0308 	add.w	r3, r5, #8
 800bace:	9301      	str	r3, [sp, #4]
 800bad0:	460b      	mov	r3, r1
 800bad2:	3308      	adds	r3, #8
 800bad4:	9302      	str	r3, [sp, #8]
 800bad6:	4613      	mov	r3, r2
 800bad8:	3308      	adds	r3, #8
 800bada:	9305      	str	r3, [sp, #20]
 800badc:	f106 0308 	add.w	r3, r6, #8
 800bae0:	900b      	str	r0, [sp, #44]	@ 0x2c
 800bae2:	9303      	str	r3, [sp, #12]
 800bae4:	9704      	str	r7, [sp, #16]
 800bae6:	9a02      	ldr	r2, [sp, #8]
 800bae8:	9c01      	ldr	r4, [sp, #4]
 800baea:	f832 3c08 	ldrh.w	r3, [r2, #-8]
 800baee:	f824 3c08 	strh.w	r3, [r4, #-8]
 800baf2:	f832 3c06 	ldrh.w	r3, [r2, #-6]
 800baf6:	f824 3c06 	strh.w	r3, [r4, #-6]
 800bafa:	4611      	mov	r1, r2
 800bafc:	9d07      	ldr	r5, [sp, #28]
 800bafe:	f831 3c04 	ldrh.w	r3, [r1, #-4]
 800bb02:	f824 3c04 	strh.w	r3, [r4, #-4]
 800bb06:	9a03      	ldr	r2, [sp, #12]
 800bb08:	f831 3c02 	ldrh.w	r3, [r1, #-2]
 800bb0c:	f824 3c02 	strh.w	r3, [r4, #-2]
 800bb10:	f852 0c08 	ldr.w	r0, [r2, #-8]
 800bb14:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800bb18:	4613      	mov	r3, r2
 800bb1a:	4611      	mov	r1, r2
 800bb1c:	2d00      	cmp	r5, #0
 800bb1e:	f000 810e 	beq.w	800bd3e <arm_fir_q15+0x2c2>
 800bb22:	3308      	adds	r3, #8
 800bb24:	461a      	mov	r2, r3
 800bb26:	9306      	str	r3, [sp, #24]
 800bb28:	9908      	ldr	r1, [sp, #32]
 800bb2a:	9500      	str	r5, [sp, #0]
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	469c      	mov	ip, r3
 800bb30:	4693      	mov	fp, r2
 800bb32:	461e      	mov	r6, r3
 800bb34:	469e      	mov	lr, r3
 800bb36:	461a      	mov	r2, r3
 800bb38:	461f      	mov	r7, r3
 800bb3a:	4698      	mov	r8, r3
 800bb3c:	f101 0a08 	add.w	sl, r1, #8
 800bb40:	4665      	mov	r5, ip
 800bb42:	f85a 1c08 	ldr.w	r1, [sl, #-8]
 800bb46:	fbc0 85c1 	smlald	r8, r5, r0, r1
 800bb4a:	fbc4 cec1 	smlald	ip, lr, r4, r1
 800bb4e:	eac4 0900 	pkhbt	r9, r4, r0
 800bb52:	f85b 0c08 	ldr.w	r0, [fp, #-8]
 800bb56:	fbc9 27d1 	smlaldx	r2, r7, r9, r1
 800bb5a:	eac0 0904 	pkhbt	r9, r0, r4
 800bb5e:	fbc9 36d1 	smlaldx	r3, r6, r9, r1
 800bb62:	f85a 1c04 	ldr.w	r1, [sl, #-4]
 800bb66:	fbc4 85c1 	smlald	r8, r5, r4, r1
 800bb6a:	f85b 4c04 	ldr.w	r4, [fp, #-4]
 800bb6e:	fbc0 cec1 	smlald	ip, lr, r0, r1
 800bb72:	fbc9 27d1 	smlaldx	r2, r7, r9, r1
 800bb76:	eac4 0900 	pkhbt	r9, r4, r0
 800bb7a:	fbc9 36d1 	smlaldx	r3, r6, r9, r1
 800bb7e:	9900      	ldr	r1, [sp, #0]
 800bb80:	3901      	subs	r1, #1
 800bb82:	f10a 0a08 	add.w	sl, sl, #8
 800bb86:	f10b 0b08 	add.w	fp, fp, #8
 800bb8a:	9100      	str	r1, [sp, #0]
 800bb8c:	d1d9      	bne.n	800bb42 <arm_fir_q15+0xc6>
 800bb8e:	46c1      	mov	r9, r8
 800bb90:	9903      	ldr	r1, [sp, #12]
 800bb92:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bb96:	46a8      	mov	r8, r5
 800bb98:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bb9a:	4429      	add	r1, r5
 800bb9c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800bb9e:	b175      	cbz	r5, 800bbbe <arm_fir_q15+0x142>
 800bba0:	f8da 5000 	ldr.w	r5, [sl]
 800bba4:	fbc0 98c5 	smlald	r9, r8, r0, r5
 800bba8:	fbc4 cec5 	smlald	ip, lr, r4, r5
 800bbac:	eac4 0000 	pkhbt	r0, r4, r0
 800bbb0:	6809      	ldr	r1, [r1, #0]
 800bbb2:	fbc0 27d5 	smlaldx	r2, r7, r0, r5
 800bbb6:	eac1 0404 	pkhbt	r4, r1, r4
 800bbba:	fbc4 36d5 	smlaldx	r3, r6, r4, r5
 800bbbe:	9805      	ldr	r0, [sp, #20]
 800bbc0:	ea4f 39d9 	mov.w	r9, r9, lsr #15
 800bbc4:	0bd2      	lsrs	r2, r2, #15
 800bbc6:	ea49 4948 	orr.w	r9, r9, r8, lsl #17
 800bbca:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
 800bbce:	f309 090f 	ssat	r9, #16, r9
 800bbd2:	f302 020f 	ssat	r2, #16, r2
 800bbd6:	eac9 4202 	pkhbt	r2, r9, r2, lsl #16
 800bbda:	f840 2c08 	str.w	r2, [r0, #-8]
 800bbde:	9a01      	ldr	r2, [sp, #4]
 800bbe0:	ea4f 3cdc 	mov.w	ip, ip, lsr #15
 800bbe4:	3208      	adds	r2, #8
 800bbe6:	0bdb      	lsrs	r3, r3, #15
 800bbe8:	ea4c 4c4e 	orr.w	ip, ip, lr, lsl #17
 800bbec:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 800bbf0:	f30c 0c0f 	ssat	ip, #16, ip
 800bbf4:	9201      	str	r2, [sp, #4]
 800bbf6:	f303 030f 	ssat	r3, #16, r3
 800bbfa:	9a02      	ldr	r2, [sp, #8]
 800bbfc:	eacc 4303 	pkhbt	r3, ip, r3, lsl #16
 800bc00:	f840 3c04 	str.w	r3, [r0, #-4]
 800bc04:	f100 0308 	add.w	r3, r0, #8
 800bc08:	9305      	str	r3, [sp, #20]
 800bc0a:	9b04      	ldr	r3, [sp, #16]
 800bc0c:	3208      	adds	r2, #8
 800bc0e:	9202      	str	r2, [sp, #8]
 800bc10:	3b01      	subs	r3, #1
 800bc12:	9a06      	ldr	r2, [sp, #24]
 800bc14:	9203      	str	r2, [sp, #12]
 800bc16:	9304      	str	r3, [sp, #16]
 800bc18:	f47f af65 	bne.w	800bae6 <arm_fir_q15+0x6a>
 800bc1c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bc1e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bc20:	00db      	lsls	r3, r3, #3
 800bc22:	441a      	add	r2, r3
 800bc24:	920d      	str	r2, [sp, #52]	@ 0x34
 800bc26:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bc28:	441a      	add	r2, r3
 800bc2a:	920e      	str	r2, [sp, #56]	@ 0x38
 800bc2c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bc2e:	441a      	add	r2, r3
 800bc30:	920f      	str	r2, [sp, #60]	@ 0x3c
 800bc32:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bc34:	441a      	add	r2, r3
 800bc36:	920c      	str	r2, [sp, #48]	@ 0x30
 800bc38:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bc3a:	f013 0303 	ands.w	r3, r3, #3
 800bc3e:	9302      	str	r3, [sp, #8]
 800bc40:	d03f      	beq.n	800bcc2 <arm_fir_q15+0x246>
 800bc42:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bc44:	f1a2 0c02 	sub.w	ip, r2, #2
 800bc48:	9a08      	ldr	r2, [sp, #32]
 800bc4a:	f102 0904 	add.w	r9, r2, #4
 800bc4e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800bc50:	f8cd 9004 	str.w	r9, [sp, #4]
 800bc54:	ea4f 0852 	mov.w	r8, r2, lsr #1
 800bc58:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bc5a:	f8cd 8000 	str.w	r8, [sp]
 800bc5e:	f8dd 903c 	ldr.w	r9, [sp, #60]	@ 0x3c
 800bc62:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
 800bc66:	f102 0e04 	add.w	lr, r2, #4
 800bc6a:	461f      	mov	r7, r3
 800bc6c:	f838 3b02 	ldrh.w	r3, [r8], #2
 800bc70:	9a01      	ldr	r2, [sp, #4]
 800bc72:	9900      	ldr	r1, [sp, #0]
 800bc74:	f82c 3f02 	strh.w	r3, [ip, #2]!
 800bc78:	2400      	movs	r4, #0
 800bc7a:	4673      	mov	r3, lr
 800bc7c:	2500      	movs	r5, #0
 800bc7e:	f833 bc04 	ldrh.w	fp, [r3, #-4]
 800bc82:	f832 ac04 	ldrh.w	sl, [r2, #-4]
 800bc86:	f833 6c02 	ldrh.w	r6, [r3, #-2]
 800bc8a:	f832 0c02 	ldrh.w	r0, [r2, #-2]
 800bc8e:	fbcb 458a 	smlalbb	r4, r5, fp, sl
 800bc92:	3901      	subs	r1, #1
 800bc94:	f103 0304 	add.w	r3, r3, #4
 800bc98:	fbc6 4580 	smlalbb	r4, r5, r6, r0
 800bc9c:	f102 0204 	add.w	r2, r2, #4
 800bca0:	d1ed      	bne.n	800bc7e <arm_fir_q15+0x202>
 800bca2:	0be3      	lsrs	r3, r4, #15
 800bca4:	3f01      	subs	r7, #1
 800bca6:	ea43 4345 	orr.w	r3, r3, r5, lsl #17
 800bcaa:	f10e 0e02 	add.w	lr, lr, #2
 800bcae:	f303 030f 	ssat	r3, #16, r3
 800bcb2:	f829 3b02 	strh.w	r3, [r9], #2
 800bcb6:	d1d9      	bne.n	800bc6c <arm_fir_q15+0x1f0>
 800bcb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bcba:	9a02      	ldr	r2, [sp, #8]
 800bcbc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800bcc0:	930c      	str	r3, [sp, #48]	@ 0x30
 800bcc2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bcc4:	1e5f      	subs	r7, r3, #1
 800bcc6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bcc8:	08bd      	lsrs	r5, r7, #2
 800bcca:	685e      	ldr	r6, [r3, #4]
 800bccc:	d029      	beq.n	800bd22 <arm_fir_q15+0x2a6>
 800bcce:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	3310      	adds	r3, #16
 800bcd4:	f106 0210 	add.w	r2, r6, #16
 800bcd8:	4290      	cmp	r0, r2
 800bcda:	bf38      	it	cc
 800bcdc:	429e      	cmpcc	r6, r3
 800bcde:	bf2c      	ite	cs
 800bce0:	2301      	movcs	r3, #1
 800bce2:	2300      	movcc	r3, #0
 800bce4:	2d06      	cmp	r5, #6
 800bce6:	bf94      	ite	ls
 800bce8:	2300      	movls	r3, #0
 800bcea:	f003 0301 	andhi.w	r3, r3, #1
 800bcee:	b3a3      	cbz	r3, 800bd5a <arm_fir_q15+0x2de>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	4333      	orrs	r3, r6
 800bcf4:	079b      	lsls	r3, r3, #30
 800bcf6:	d130      	bne.n	800bd5a <arm_fir_q15+0x2de>
 800bcf8:	f100 0208 	add.w	r2, r0, #8
 800bcfc:	f106 0308 	add.w	r3, r6, #8
 800bd00:	2100      	movs	r1, #0
 800bd02:	e912 0011 	ldmdb	r2, {r0, r4}
 800bd06:	3101      	adds	r1, #1
 800bd08:	42a9      	cmp	r1, r5
 800bd0a:	e903 0011 	stmdb	r3, {r0, r4}
 800bd0e:	f102 0208 	add.w	r2, r2, #8
 800bd12:	f103 0308 	add.w	r3, r3, #8
 800bd16:	d1f4      	bne.n	800bd02 <arm_fir_q15+0x286>
 800bd18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bd1a:	00ed      	lsls	r5, r5, #3
 800bd1c:	442b      	add	r3, r5
 800bd1e:	442e      	add	r6, r5
 800bd20:	930c      	str	r3, [sp, #48]	@ 0x30
 800bd22:	f017 0303 	ands.w	r3, r7, #3
 800bd26:	d007      	beq.n	800bd38 <arm_fir_q15+0x2bc>
 800bd28:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bd2a:	3e02      	subs	r6, #2
 800bd2c:	f832 1b02 	ldrh.w	r1, [r2], #2
 800bd30:	f826 1f02 	strh.w	r1, [r6, #2]!
 800bd34:	3b01      	subs	r3, #1
 800bd36:	d1f9      	bne.n	800bd2c <arm_fir_q15+0x2b0>
 800bd38:	b015      	add	sp, #84	@ 0x54
 800bd3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd3e:	46a8      	mov	r8, r5
 800bd40:	462b      	mov	r3, r5
 800bd42:	462e      	mov	r6, r5
 800bd44:	46ac      	mov	ip, r5
 800bd46:	46ae      	mov	lr, r5
 800bd48:	462a      	mov	r2, r5
 800bd4a:	462f      	mov	r7, r5
 800bd4c:	46a9      	mov	r9, r5
 800bd4e:	f101 0508 	add.w	r5, r1, #8
 800bd52:	f8dd a020 	ldr.w	sl, [sp, #32]
 800bd56:	9506      	str	r5, [sp, #24]
 800bd58:	e720      	b.n	800bb9c <arm_fir_q15+0x120>
 800bd5a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bd5c:	f106 0208 	add.w	r2, r6, #8
 800bd60:	3308      	adds	r3, #8
 800bd62:	4629      	mov	r1, r5
 800bd64:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 800bd68:	f822 0c08 	strh.w	r0, [r2, #-8]
 800bd6c:	f833 0c06 	ldrh.w	r0, [r3, #-6]
 800bd70:	f822 0c06 	strh.w	r0, [r2, #-6]
 800bd74:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 800bd78:	f822 0c04 	strh.w	r0, [r2, #-4]
 800bd7c:	f833 0c02 	ldrh.w	r0, [r3, #-2]
 800bd80:	f822 0c02 	strh.w	r0, [r2, #-2]
 800bd84:	3901      	subs	r1, #1
 800bd86:	f103 0308 	add.w	r3, r3, #8
 800bd8a:	f102 0208 	add.w	r2, r2, #8
 800bd8e:	d1e9      	bne.n	800bd64 <arm_fir_q15+0x2e8>
 800bd90:	e7c2      	b.n	800bd18 <arm_fir_q15+0x29c>
 800bd92:	bf00      	nop

0800bd94 <arm_fir_init_q15>:
 800bd94:	b570      	push	{r4, r5, r6, lr}
 800bd96:	f011 0401 	ands.w	r4, r1, #1
 800bd9a:	d10f      	bne.n	800bdbc <arm_fir_init_q15+0x28>
 800bd9c:	461e      	mov	r6, r3
 800bd9e:	9b04      	ldr	r3, [sp, #16]
 800bda0:	4605      	mov	r5, r0
 800bda2:	4610      	mov	r0, r2
 800bda4:	18ca      	adds	r2, r1, r3
 800bda6:	8029      	strh	r1, [r5, #0]
 800bda8:	60a8      	str	r0, [r5, #8]
 800bdaa:	0052      	lsls	r2, r2, #1
 800bdac:	4630      	mov	r0, r6
 800bdae:	4621      	mov	r1, r4
 800bdb0:	f000 f8c4 	bl	800bf3c <memset>
 800bdb4:	606e      	str	r6, [r5, #4]
 800bdb6:	4620      	mov	r0, r4
 800bdb8:	b240      	sxtb	r0, r0
 800bdba:	bd70      	pop	{r4, r5, r6, pc}
 800bdbc:	20ff      	movs	r0, #255	@ 0xff
 800bdbe:	e7fb      	b.n	800bdb8 <arm_fir_init_q15+0x24>

0800bdc0 <malloc>:
 800bdc0:	4b02      	ldr	r3, [pc, #8]	@ (800bdcc <malloc+0xc>)
 800bdc2:	4601      	mov	r1, r0
 800bdc4:	6818      	ldr	r0, [r3, #0]
 800bdc6:	f000 b82d 	b.w	800be24 <_malloc_r>
 800bdca:	bf00      	nop
 800bdcc:	2000082c 	.word	0x2000082c

0800bdd0 <free>:
 800bdd0:	4b02      	ldr	r3, [pc, #8]	@ (800bddc <free+0xc>)
 800bdd2:	4601      	mov	r1, r0
 800bdd4:	6818      	ldr	r0, [r3, #0]
 800bdd6:	f000 b8f5 	b.w	800bfc4 <_free_r>
 800bdda:	bf00      	nop
 800bddc:	2000082c 	.word	0x2000082c

0800bde0 <sbrk_aligned>:
 800bde0:	b570      	push	{r4, r5, r6, lr}
 800bde2:	4e0f      	ldr	r6, [pc, #60]	@ (800be20 <sbrk_aligned+0x40>)
 800bde4:	460c      	mov	r4, r1
 800bde6:	6831      	ldr	r1, [r6, #0]
 800bde8:	4605      	mov	r5, r0
 800bdea:	b911      	cbnz	r1, 800bdf2 <sbrk_aligned+0x12>
 800bdec:	f000 f8ae 	bl	800bf4c <_sbrk_r>
 800bdf0:	6030      	str	r0, [r6, #0]
 800bdf2:	4621      	mov	r1, r4
 800bdf4:	4628      	mov	r0, r5
 800bdf6:	f000 f8a9 	bl	800bf4c <_sbrk_r>
 800bdfa:	1c43      	adds	r3, r0, #1
 800bdfc:	d103      	bne.n	800be06 <sbrk_aligned+0x26>
 800bdfe:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800be02:	4620      	mov	r0, r4
 800be04:	bd70      	pop	{r4, r5, r6, pc}
 800be06:	1cc4      	adds	r4, r0, #3
 800be08:	f024 0403 	bic.w	r4, r4, #3
 800be0c:	42a0      	cmp	r0, r4
 800be0e:	d0f8      	beq.n	800be02 <sbrk_aligned+0x22>
 800be10:	1a21      	subs	r1, r4, r0
 800be12:	4628      	mov	r0, r5
 800be14:	f000 f89a 	bl	800bf4c <_sbrk_r>
 800be18:	3001      	adds	r0, #1
 800be1a:	d1f2      	bne.n	800be02 <sbrk_aligned+0x22>
 800be1c:	e7ef      	b.n	800bdfe <sbrk_aligned+0x1e>
 800be1e:	bf00      	nop
 800be20:	20002dbc 	.word	0x20002dbc

0800be24 <_malloc_r>:
 800be24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be28:	1ccd      	adds	r5, r1, #3
 800be2a:	f025 0503 	bic.w	r5, r5, #3
 800be2e:	3508      	adds	r5, #8
 800be30:	2d0c      	cmp	r5, #12
 800be32:	bf38      	it	cc
 800be34:	250c      	movcc	r5, #12
 800be36:	2d00      	cmp	r5, #0
 800be38:	4606      	mov	r6, r0
 800be3a:	db01      	blt.n	800be40 <_malloc_r+0x1c>
 800be3c:	42a9      	cmp	r1, r5
 800be3e:	d904      	bls.n	800be4a <_malloc_r+0x26>
 800be40:	230c      	movs	r3, #12
 800be42:	6033      	str	r3, [r6, #0]
 800be44:	2000      	movs	r0, #0
 800be46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bf20 <_malloc_r+0xfc>
 800be4e:	f000 f869 	bl	800bf24 <__malloc_lock>
 800be52:	f8d8 3000 	ldr.w	r3, [r8]
 800be56:	461c      	mov	r4, r3
 800be58:	bb44      	cbnz	r4, 800beac <_malloc_r+0x88>
 800be5a:	4629      	mov	r1, r5
 800be5c:	4630      	mov	r0, r6
 800be5e:	f7ff ffbf 	bl	800bde0 <sbrk_aligned>
 800be62:	1c43      	adds	r3, r0, #1
 800be64:	4604      	mov	r4, r0
 800be66:	d158      	bne.n	800bf1a <_malloc_r+0xf6>
 800be68:	f8d8 4000 	ldr.w	r4, [r8]
 800be6c:	4627      	mov	r7, r4
 800be6e:	2f00      	cmp	r7, #0
 800be70:	d143      	bne.n	800befa <_malloc_r+0xd6>
 800be72:	2c00      	cmp	r4, #0
 800be74:	d04b      	beq.n	800bf0e <_malloc_r+0xea>
 800be76:	6823      	ldr	r3, [r4, #0]
 800be78:	4639      	mov	r1, r7
 800be7a:	4630      	mov	r0, r6
 800be7c:	eb04 0903 	add.w	r9, r4, r3
 800be80:	f000 f864 	bl	800bf4c <_sbrk_r>
 800be84:	4581      	cmp	r9, r0
 800be86:	d142      	bne.n	800bf0e <_malloc_r+0xea>
 800be88:	6821      	ldr	r1, [r4, #0]
 800be8a:	1a6d      	subs	r5, r5, r1
 800be8c:	4629      	mov	r1, r5
 800be8e:	4630      	mov	r0, r6
 800be90:	f7ff ffa6 	bl	800bde0 <sbrk_aligned>
 800be94:	3001      	adds	r0, #1
 800be96:	d03a      	beq.n	800bf0e <_malloc_r+0xea>
 800be98:	6823      	ldr	r3, [r4, #0]
 800be9a:	442b      	add	r3, r5
 800be9c:	6023      	str	r3, [r4, #0]
 800be9e:	f8d8 3000 	ldr.w	r3, [r8]
 800bea2:	685a      	ldr	r2, [r3, #4]
 800bea4:	bb62      	cbnz	r2, 800bf00 <_malloc_r+0xdc>
 800bea6:	f8c8 7000 	str.w	r7, [r8]
 800beaa:	e00f      	b.n	800becc <_malloc_r+0xa8>
 800beac:	6822      	ldr	r2, [r4, #0]
 800beae:	1b52      	subs	r2, r2, r5
 800beb0:	d420      	bmi.n	800bef4 <_malloc_r+0xd0>
 800beb2:	2a0b      	cmp	r2, #11
 800beb4:	d917      	bls.n	800bee6 <_malloc_r+0xc2>
 800beb6:	1961      	adds	r1, r4, r5
 800beb8:	42a3      	cmp	r3, r4
 800beba:	6025      	str	r5, [r4, #0]
 800bebc:	bf18      	it	ne
 800bebe:	6059      	strne	r1, [r3, #4]
 800bec0:	6863      	ldr	r3, [r4, #4]
 800bec2:	bf08      	it	eq
 800bec4:	f8c8 1000 	streq.w	r1, [r8]
 800bec8:	5162      	str	r2, [r4, r5]
 800beca:	604b      	str	r3, [r1, #4]
 800becc:	4630      	mov	r0, r6
 800bece:	f000 f82f 	bl	800bf30 <__malloc_unlock>
 800bed2:	f104 000b 	add.w	r0, r4, #11
 800bed6:	1d23      	adds	r3, r4, #4
 800bed8:	f020 0007 	bic.w	r0, r0, #7
 800bedc:	1ac2      	subs	r2, r0, r3
 800bede:	bf1c      	itt	ne
 800bee0:	1a1b      	subne	r3, r3, r0
 800bee2:	50a3      	strne	r3, [r4, r2]
 800bee4:	e7af      	b.n	800be46 <_malloc_r+0x22>
 800bee6:	6862      	ldr	r2, [r4, #4]
 800bee8:	42a3      	cmp	r3, r4
 800beea:	bf0c      	ite	eq
 800beec:	f8c8 2000 	streq.w	r2, [r8]
 800bef0:	605a      	strne	r2, [r3, #4]
 800bef2:	e7eb      	b.n	800becc <_malloc_r+0xa8>
 800bef4:	4623      	mov	r3, r4
 800bef6:	6864      	ldr	r4, [r4, #4]
 800bef8:	e7ae      	b.n	800be58 <_malloc_r+0x34>
 800befa:	463c      	mov	r4, r7
 800befc:	687f      	ldr	r7, [r7, #4]
 800befe:	e7b6      	b.n	800be6e <_malloc_r+0x4a>
 800bf00:	461a      	mov	r2, r3
 800bf02:	685b      	ldr	r3, [r3, #4]
 800bf04:	42a3      	cmp	r3, r4
 800bf06:	d1fb      	bne.n	800bf00 <_malloc_r+0xdc>
 800bf08:	2300      	movs	r3, #0
 800bf0a:	6053      	str	r3, [r2, #4]
 800bf0c:	e7de      	b.n	800becc <_malloc_r+0xa8>
 800bf0e:	230c      	movs	r3, #12
 800bf10:	6033      	str	r3, [r6, #0]
 800bf12:	4630      	mov	r0, r6
 800bf14:	f000 f80c 	bl	800bf30 <__malloc_unlock>
 800bf18:	e794      	b.n	800be44 <_malloc_r+0x20>
 800bf1a:	6005      	str	r5, [r0, #0]
 800bf1c:	e7d6      	b.n	800becc <_malloc_r+0xa8>
 800bf1e:	bf00      	nop
 800bf20:	20002dc0 	.word	0x20002dc0

0800bf24 <__malloc_lock>:
 800bf24:	4801      	ldr	r0, [pc, #4]	@ (800bf2c <__malloc_lock+0x8>)
 800bf26:	f000 b84b 	b.w	800bfc0 <__retarget_lock_acquire_recursive>
 800bf2a:	bf00      	nop
 800bf2c:	20002f00 	.word	0x20002f00

0800bf30 <__malloc_unlock>:
 800bf30:	4801      	ldr	r0, [pc, #4]	@ (800bf38 <__malloc_unlock+0x8>)
 800bf32:	f000 b846 	b.w	800bfc2 <__retarget_lock_release_recursive>
 800bf36:	bf00      	nop
 800bf38:	20002f00 	.word	0x20002f00

0800bf3c <memset>:
 800bf3c:	4402      	add	r2, r0
 800bf3e:	4603      	mov	r3, r0
 800bf40:	4293      	cmp	r3, r2
 800bf42:	d100      	bne.n	800bf46 <memset+0xa>
 800bf44:	4770      	bx	lr
 800bf46:	f803 1b01 	strb.w	r1, [r3], #1
 800bf4a:	e7f9      	b.n	800bf40 <memset+0x4>

0800bf4c <_sbrk_r>:
 800bf4c:	b538      	push	{r3, r4, r5, lr}
 800bf4e:	4d06      	ldr	r5, [pc, #24]	@ (800bf68 <_sbrk_r+0x1c>)
 800bf50:	2300      	movs	r3, #0
 800bf52:	4604      	mov	r4, r0
 800bf54:	4608      	mov	r0, r1
 800bf56:	602b      	str	r3, [r5, #0]
 800bf58:	f7f5 f9de 	bl	8001318 <_sbrk>
 800bf5c:	1c43      	adds	r3, r0, #1
 800bf5e:	d102      	bne.n	800bf66 <_sbrk_r+0x1a>
 800bf60:	682b      	ldr	r3, [r5, #0]
 800bf62:	b103      	cbz	r3, 800bf66 <_sbrk_r+0x1a>
 800bf64:	6023      	str	r3, [r4, #0]
 800bf66:	bd38      	pop	{r3, r4, r5, pc}
 800bf68:	20002efc 	.word	0x20002efc

0800bf6c <__errno>:
 800bf6c:	4b01      	ldr	r3, [pc, #4]	@ (800bf74 <__errno+0x8>)
 800bf6e:	6818      	ldr	r0, [r3, #0]
 800bf70:	4770      	bx	lr
 800bf72:	bf00      	nop
 800bf74:	2000082c 	.word	0x2000082c

0800bf78 <__libc_init_array>:
 800bf78:	b570      	push	{r4, r5, r6, lr}
 800bf7a:	4d0d      	ldr	r5, [pc, #52]	@ (800bfb0 <__libc_init_array+0x38>)
 800bf7c:	4c0d      	ldr	r4, [pc, #52]	@ (800bfb4 <__libc_init_array+0x3c>)
 800bf7e:	1b64      	subs	r4, r4, r5
 800bf80:	10a4      	asrs	r4, r4, #2
 800bf82:	2600      	movs	r6, #0
 800bf84:	42a6      	cmp	r6, r4
 800bf86:	d109      	bne.n	800bf9c <__libc_init_array+0x24>
 800bf88:	4d0b      	ldr	r5, [pc, #44]	@ (800bfb8 <__libc_init_array+0x40>)
 800bf8a:	4c0c      	ldr	r4, [pc, #48]	@ (800bfbc <__libc_init_array+0x44>)
 800bf8c:	f000 f864 	bl	800c058 <_init>
 800bf90:	1b64      	subs	r4, r4, r5
 800bf92:	10a4      	asrs	r4, r4, #2
 800bf94:	2600      	movs	r6, #0
 800bf96:	42a6      	cmp	r6, r4
 800bf98:	d105      	bne.n	800bfa6 <__libc_init_array+0x2e>
 800bf9a:	bd70      	pop	{r4, r5, r6, pc}
 800bf9c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfa0:	4798      	blx	r3
 800bfa2:	3601      	adds	r6, #1
 800bfa4:	e7ee      	b.n	800bf84 <__libc_init_array+0xc>
 800bfa6:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfaa:	4798      	blx	r3
 800bfac:	3601      	adds	r6, #1
 800bfae:	e7f2      	b.n	800bf96 <__libc_init_array+0x1e>
 800bfb0:	0800c0ac 	.word	0x0800c0ac
 800bfb4:	0800c0ac 	.word	0x0800c0ac
 800bfb8:	0800c0ac 	.word	0x0800c0ac
 800bfbc:	0800c0b0 	.word	0x0800c0b0

0800bfc0 <__retarget_lock_acquire_recursive>:
 800bfc0:	4770      	bx	lr

0800bfc2 <__retarget_lock_release_recursive>:
 800bfc2:	4770      	bx	lr

0800bfc4 <_free_r>:
 800bfc4:	b538      	push	{r3, r4, r5, lr}
 800bfc6:	4605      	mov	r5, r0
 800bfc8:	2900      	cmp	r1, #0
 800bfca:	d041      	beq.n	800c050 <_free_r+0x8c>
 800bfcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfd0:	1f0c      	subs	r4, r1, #4
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	bfb8      	it	lt
 800bfd6:	18e4      	addlt	r4, r4, r3
 800bfd8:	f7ff ffa4 	bl	800bf24 <__malloc_lock>
 800bfdc:	4a1d      	ldr	r2, [pc, #116]	@ (800c054 <_free_r+0x90>)
 800bfde:	6813      	ldr	r3, [r2, #0]
 800bfe0:	b933      	cbnz	r3, 800bff0 <_free_r+0x2c>
 800bfe2:	6063      	str	r3, [r4, #4]
 800bfe4:	6014      	str	r4, [r2, #0]
 800bfe6:	4628      	mov	r0, r5
 800bfe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bfec:	f7ff bfa0 	b.w	800bf30 <__malloc_unlock>
 800bff0:	42a3      	cmp	r3, r4
 800bff2:	d908      	bls.n	800c006 <_free_r+0x42>
 800bff4:	6820      	ldr	r0, [r4, #0]
 800bff6:	1821      	adds	r1, r4, r0
 800bff8:	428b      	cmp	r3, r1
 800bffa:	bf01      	itttt	eq
 800bffc:	6819      	ldreq	r1, [r3, #0]
 800bffe:	685b      	ldreq	r3, [r3, #4]
 800c000:	1809      	addeq	r1, r1, r0
 800c002:	6021      	streq	r1, [r4, #0]
 800c004:	e7ed      	b.n	800bfe2 <_free_r+0x1e>
 800c006:	461a      	mov	r2, r3
 800c008:	685b      	ldr	r3, [r3, #4]
 800c00a:	b10b      	cbz	r3, 800c010 <_free_r+0x4c>
 800c00c:	42a3      	cmp	r3, r4
 800c00e:	d9fa      	bls.n	800c006 <_free_r+0x42>
 800c010:	6811      	ldr	r1, [r2, #0]
 800c012:	1850      	adds	r0, r2, r1
 800c014:	42a0      	cmp	r0, r4
 800c016:	d10b      	bne.n	800c030 <_free_r+0x6c>
 800c018:	6820      	ldr	r0, [r4, #0]
 800c01a:	4401      	add	r1, r0
 800c01c:	1850      	adds	r0, r2, r1
 800c01e:	4283      	cmp	r3, r0
 800c020:	6011      	str	r1, [r2, #0]
 800c022:	d1e0      	bne.n	800bfe6 <_free_r+0x22>
 800c024:	6818      	ldr	r0, [r3, #0]
 800c026:	685b      	ldr	r3, [r3, #4]
 800c028:	6053      	str	r3, [r2, #4]
 800c02a:	4408      	add	r0, r1
 800c02c:	6010      	str	r0, [r2, #0]
 800c02e:	e7da      	b.n	800bfe6 <_free_r+0x22>
 800c030:	d902      	bls.n	800c038 <_free_r+0x74>
 800c032:	230c      	movs	r3, #12
 800c034:	602b      	str	r3, [r5, #0]
 800c036:	e7d6      	b.n	800bfe6 <_free_r+0x22>
 800c038:	6820      	ldr	r0, [r4, #0]
 800c03a:	1821      	adds	r1, r4, r0
 800c03c:	428b      	cmp	r3, r1
 800c03e:	bf04      	itt	eq
 800c040:	6819      	ldreq	r1, [r3, #0]
 800c042:	685b      	ldreq	r3, [r3, #4]
 800c044:	6063      	str	r3, [r4, #4]
 800c046:	bf04      	itt	eq
 800c048:	1809      	addeq	r1, r1, r0
 800c04a:	6021      	streq	r1, [r4, #0]
 800c04c:	6054      	str	r4, [r2, #4]
 800c04e:	e7ca      	b.n	800bfe6 <_free_r+0x22>
 800c050:	bd38      	pop	{r3, r4, r5, pc}
 800c052:	bf00      	nop
 800c054:	20002dc0 	.word	0x20002dc0

0800c058 <_init>:
 800c058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c05a:	bf00      	nop
 800c05c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c05e:	bc08      	pop	{r3}
 800c060:	469e      	mov	lr, r3
 800c062:	4770      	bx	lr

0800c064 <_fini>:
 800c064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c066:	bf00      	nop
 800c068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c06a:	bc08      	pop	{r3}
 800c06c:	469e      	mov	lr, r3
 800c06e:	4770      	bx	lr
