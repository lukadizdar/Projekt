
Projekt_DOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a19c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800a324  0800a324  0000b324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a348  0800a348  0000c17c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a348  0800a348  0000b348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a350  0800a350  0000c17c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a350  0800a350  0000b350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a354  0800a354  0000b354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000017c  20000000  0800a358  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c17c  2**0
                  CONTENTS
 10 .bss          00001980  2000017c  2000017c  0000c17c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001afc  20001afc  0000c17c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c17c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e673  00000000  00000000  0000c1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000052d3  00000000  00000000  0002a81f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019b0  00000000  00000000  0002faf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000136b  00000000  00000000  000314a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002801d  00000000  00000000  00032813  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000238cb  00000000  00000000  0005a830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e20ef  00000000  00000000  0007e0fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000b3  00000000  00000000  001601ea  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006d00  00000000  00000000  001602a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00166fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00000ed7  00000000  00000000  00167003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 000000c8  00000000  00000000  00167eda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000017c 	.word	0x2000017c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a30c 	.word	0x0800a30c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000180 	.word	0x20000180
 80001c4:	0800a30c 	.word	0x0800a30c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004be:	463b      	mov	r3, r7
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	605a      	str	r2, [r3, #4]
 80004c6:	609a      	str	r2, [r3, #8]
 80004c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004ca:	4b22      	ldr	r3, [pc, #136]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004cc:	4a22      	ldr	r2, [pc, #136]	@ (8000558 <MX_ADC1_Init+0xa0>)
 80004ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004d0:	4b20      	ldr	r3, [pc, #128]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004d2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80004d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80004de:	4b1d      	ldr	r3, [pc, #116]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80004f2:	4b18      	ldr	r3, [pc, #96]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80004f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80004fa:	4b16      	ldr	r3, [pc, #88]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004fc:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000500:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000502:	4b14      	ldr	r3, [pc, #80]	@ (8000554 <MX_ADC1_Init+0x9c>)
 8000504:	2200      	movs	r2, #0
 8000506:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000508:	4b12      	ldr	r3, [pc, #72]	@ (8000554 <MX_ADC1_Init+0x9c>)
 800050a:	2201      	movs	r2, #1
 800050c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800050e:	4b11      	ldr	r3, [pc, #68]	@ (8000554 <MX_ADC1_Init+0x9c>)
 8000510:	2201      	movs	r2, #1
 8000512:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000516:	4b0f      	ldr	r3, [pc, #60]	@ (8000554 <MX_ADC1_Init+0x9c>)
 8000518:	2201      	movs	r2, #1
 800051a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800051c:	480d      	ldr	r0, [pc, #52]	@ (8000554 <MX_ADC1_Init+0x9c>)
 800051e:	f000 ffdd 	bl	80014dc <HAL_ADC_Init>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000528:	f000 fd6a 	bl	8001000 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800052c:	2301      	movs	r3, #1
 800052e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000530:	2301      	movs	r3, #1
 8000532:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000534:	2300      	movs	r3, #0
 8000536:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000538:	463b      	mov	r3, r7
 800053a:	4619      	mov	r1, r3
 800053c:	4805      	ldr	r0, [pc, #20]	@ (8000554 <MX_ADC1_Init+0x9c>)
 800053e:	f001 f935 	bl	80017ac <HAL_ADC_ConfigChannel>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000548:	f000 fd5a 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800054c:	bf00      	nop
 800054e:	3710      	adds	r7, #16
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	20000198 	.word	0x20000198
 8000558:	40012000 	.word	0x40012000

0800055c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b08a      	sub	sp, #40	@ 0x28
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000564:	f107 0314 	add.w	r3, r7, #20
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a2f      	ldr	r2, [pc, #188]	@ (8000638 <HAL_ADC_MspInit+0xdc>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d157      	bne.n	800062e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	613b      	str	r3, [r7, #16]
 8000582:	4b2e      	ldr	r3, [pc, #184]	@ (800063c <HAL_ADC_MspInit+0xe0>)
 8000584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000586:	4a2d      	ldr	r2, [pc, #180]	@ (800063c <HAL_ADC_MspInit+0xe0>)
 8000588:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800058c:	6453      	str	r3, [r2, #68]	@ 0x44
 800058e:	4b2b      	ldr	r3, [pc, #172]	@ (800063c <HAL_ADC_MspInit+0xe0>)
 8000590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000596:	613b      	str	r3, [r7, #16]
 8000598:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	4b27      	ldr	r3, [pc, #156]	@ (800063c <HAL_ADC_MspInit+0xe0>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a2:	4a26      	ldr	r2, [pc, #152]	@ (800063c <HAL_ADC_MspInit+0xe0>)
 80005a4:	f043 0301 	orr.w	r3, r3, #1
 80005a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005aa:	4b24      	ldr	r3, [pc, #144]	@ (800063c <HAL_ADC_MspInit+0xe0>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80005b6:	2302      	movs	r3, #2
 80005b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ba:	2303      	movs	r3, #3
 80005bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	4619      	mov	r1, r3
 80005c8:	481d      	ldr	r0, [pc, #116]	@ (8000640 <HAL_ADC_MspInit+0xe4>)
 80005ca:	f002 f811 	bl	80025f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80005ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 80005d0:	4a1d      	ldr	r2, [pc, #116]	@ (8000648 <HAL_ADC_MspInit+0xec>)
 80005d2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80005d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005da:	4b1a      	ldr	r3, [pc, #104]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 80005dc:	2200      	movs	r2, #0
 80005de:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005e0:	4b18      	ldr	r3, [pc, #96]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80005e6:	4b17      	ldr	r3, [pc, #92]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 80005e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005ec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005ee:	4b15      	ldr	r3, [pc, #84]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 80005f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80005f4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80005f6:	4b13      	ldr	r3, [pc, #76]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 80005f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80005fc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80005fe:	4b11      	ldr	r3, [pc, #68]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 8000600:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000604:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000606:	4b0f      	ldr	r3, [pc, #60]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 8000608:	2200      	movs	r2, #0
 800060a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800060c:	4b0d      	ldr	r3, [pc, #52]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 800060e:	2200      	movs	r2, #0
 8000610:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000612:	480c      	ldr	r0, [pc, #48]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 8000614:	f001 fc7c 	bl	8001f10 <HAL_DMA_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800061e:	f000 fcef 	bl	8001000 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4a07      	ldr	r2, [pc, #28]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 8000626:	639a      	str	r2, [r3, #56]	@ 0x38
 8000628:	4a06      	ldr	r2, [pc, #24]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800062e:	bf00      	nop
 8000630:	3728      	adds	r7, #40	@ 0x28
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40012000 	.word	0x40012000
 800063c:	40023800 	.word	0x40023800
 8000640:	40020000 	.word	0x40020000
 8000644:	200001e0 	.word	0x200001e0
 8000648:	40026410 	.word	0x40026410

0800064c <init_AudioReset>:
#include "i2s.h"
#include "spi.h"
#include "usb_host.h"
#include "gpio.h"
#include "audio.h"
void init_AudioReset() {
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, AUDIO_RESET_PIN, GPIO_PIN_SET);
 8000650:	2201      	movs	r2, #1
 8000652:	2110      	movs	r1, #16
 8000654:	4802      	ldr	r0, [pc, #8]	@ (8000660 <init_AudioReset+0x14>)
 8000656:	f002 f967 	bl	8002928 <HAL_GPIO_WritePin>
}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40020c00 	.word	0x40020c00

08000664 <configAudio>:
void configAudio() {
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af02      	add	r7, sp, #8
    uint8_t bytes[2];
    init_AudioReset();
 800066a:	f7ff ffef 	bl	800064c <init_AudioReset>

    /* Power sequence */
    // Set Power Control Register to "on" state
    bytes[0] = 0x02;
 800066e:	2302      	movs	r3, #2
 8000670:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x01;
 8000672:	2301      	movs	r3, #1
 8000674:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000676:	1d3a      	adds	r2, r7, #4
 8000678:	2364      	movs	r3, #100	@ 0x64
 800067a:	9300      	str	r3, [sp, #0]
 800067c:	2302      	movs	r3, #2
 800067e:	2194      	movs	r1, #148	@ 0x94
 8000680:	486f      	ldr	r0, [pc, #444]	@ (8000840 <configAudio+0x1dc>)
 8000682:	f004 fbc7 	bl	8004e14 <HAL_I2C_Master_Transmit>

    /* Initialization sequence */
    bytes[0] = 0x00;
 8000686:	2300      	movs	r3, #0
 8000688:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x99;
 800068a:	2399      	movs	r3, #153	@ 0x99
 800068c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800068e:	1d3a      	adds	r2, r7, #4
 8000690:	2364      	movs	r3, #100	@ 0x64
 8000692:	9300      	str	r3, [sp, #0]
 8000694:	2302      	movs	r3, #2
 8000696:	2194      	movs	r1, #148	@ 0x94
 8000698:	4869      	ldr	r0, [pc, #420]	@ (8000840 <configAudio+0x1dc>)
 800069a:	f004 fbbb 	bl	8004e14 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x47;
 800069e:	2347      	movs	r3, #71	@ 0x47
 80006a0:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x80;
 80006a2:	2380      	movs	r3, #128	@ 0x80
 80006a4:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80006a6:	1d3a      	adds	r2, r7, #4
 80006a8:	2364      	movs	r3, #100	@ 0x64
 80006aa:	9300      	str	r3, [sp, #0]
 80006ac:	2302      	movs	r3, #2
 80006ae:	2194      	movs	r1, #148	@ 0x94
 80006b0:	4863      	ldr	r0, [pc, #396]	@ (8000840 <configAudio+0x1dc>)
 80006b2:	f004 fbaf 	bl	8004e14 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x32;
 80006b6:	2332      	movs	r3, #50	@ 0x32
 80006b8:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x80;
 80006ba:	2380      	movs	r3, #128	@ 0x80
 80006bc:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80006be:	1d3a      	adds	r2, r7, #4
 80006c0:	2364      	movs	r3, #100	@ 0x64
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	2302      	movs	r3, #2
 80006c6:	2194      	movs	r1, #148	@ 0x94
 80006c8:	485d      	ldr	r0, [pc, #372]	@ (8000840 <configAudio+0x1dc>)
 80006ca:	f004 fba3 	bl	8004e14 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x32;
 80006ce:	2332      	movs	r3, #50	@ 0x32
 80006d0:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x00;
 80006d2:	2300      	movs	r3, #0
 80006d4:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80006d6:	1d3a      	adds	r2, r7, #4
 80006d8:	2364      	movs	r3, #100	@ 0x64
 80006da:	9300      	str	r3, [sp, #0]
 80006dc:	2302      	movs	r3, #2
 80006de:	2194      	movs	r1, #148	@ 0x94
 80006e0:	4857      	ldr	r0, [pc, #348]	@ (8000840 <configAudio+0x1dc>)
 80006e2:	f004 fb97 	bl	8004e14 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x00;
 80006e6:	2300      	movs	r3, #0
 80006e8:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x00;
 80006ea:	2300      	movs	r3, #0
 80006ec:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80006ee:	1d3a      	adds	r2, r7, #4
 80006f0:	2364      	movs	r3, #100	@ 0x64
 80006f2:	9300      	str	r3, [sp, #0]
 80006f4:	2302      	movs	r3, #2
 80006f6:	2194      	movs	r1, #148	@ 0x94
 80006f8:	4851      	ldr	r0, [pc, #324]	@ (8000840 <configAudio+0x1dc>)
 80006fa:	f004 fb8b 	bl	8004e14 <HAL_I2C_Master_Transmit>

    /* Ctl registers configuration */
    bytes[0] = 0x04;
 80006fe:	2304      	movs	r3, #4
 8000700:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0xAF;
 8000702:	23af      	movs	r3, #175	@ 0xaf
 8000704:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000706:	1d3a      	adds	r2, r7, #4
 8000708:	2364      	movs	r3, #100	@ 0x64
 800070a:	9300      	str	r3, [sp, #0]
 800070c:	2302      	movs	r3, #2
 800070e:	2194      	movs	r1, #148	@ 0x94
 8000710:	484b      	ldr	r0, [pc, #300]	@ (8000840 <configAudio+0x1dc>)
 8000712:	f004 fb7f 	bl	8004e14 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x0D;
 8000716:	230d      	movs	r3, #13
 8000718:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x70;
 800071a:	2370      	movs	r3, #112	@ 0x70
 800071c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800071e:	1d3a      	adds	r2, r7, #4
 8000720:	2364      	movs	r3, #100	@ 0x64
 8000722:	9300      	str	r3, [sp, #0]
 8000724:	2302      	movs	r3, #2
 8000726:	2194      	movs	r1, #148	@ 0x94
 8000728:	4845      	ldr	r0, [pc, #276]	@ (8000840 <configAudio+0x1dc>)
 800072a:	f004 fb73 	bl	8004e14 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x05;
 800072e:	2305      	movs	r3, #5
 8000730:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x81;
 8000732:	2381      	movs	r3, #129	@ 0x81
 8000734:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000736:	1d3a      	adds	r2, r7, #4
 8000738:	2364      	movs	r3, #100	@ 0x64
 800073a:	9300      	str	r3, [sp, #0]
 800073c:	2302      	movs	r3, #2
 800073e:	2194      	movs	r1, #148	@ 0x94
 8000740:	483f      	ldr	r0, [pc, #252]	@ (8000840 <configAudio+0x1dc>)
 8000742:	f004 fb67 	bl	8004e14 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x06;
 8000746:	2306      	movs	r3, #6
 8000748:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x07;
 800074a:	2307      	movs	r3, #7
 800074c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800074e:	1d3a      	adds	r2, r7, #4
 8000750:	2364      	movs	r3, #100	@ 0x64
 8000752:	9300      	str	r3, [sp, #0]
 8000754:	2302      	movs	r3, #2
 8000756:	2194      	movs	r1, #148	@ 0x94
 8000758:	4839      	ldr	r0, [pc, #228]	@ (8000840 <configAudio+0x1dc>)
 800075a:	f004 fb5b 	bl	8004e14 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x0A;
 800075e:	230a      	movs	r3, #10
 8000760:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x00;
 8000762:	2300      	movs	r3, #0
 8000764:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000766:	1d3a      	adds	r2, r7, #4
 8000768:	2364      	movs	r3, #100	@ 0x64
 800076a:	9300      	str	r3, [sp, #0]
 800076c:	2302      	movs	r3, #2
 800076e:	2194      	movs	r1, #148	@ 0x94
 8000770:	4833      	ldr	r0, [pc, #204]	@ (8000840 <configAudio+0x1dc>)
 8000772:	f004 fb4f 	bl	8004e14 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x27;
 8000776:	2327      	movs	r3, #39	@ 0x27
 8000778:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x00;
 800077a:	2300      	movs	r3, #0
 800077c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800077e:	1d3a      	adds	r2, r7, #4
 8000780:	2364      	movs	r3, #100	@ 0x64
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	2302      	movs	r3, #2
 8000786:	2194      	movs	r1, #148	@ 0x94
 8000788:	482d      	ldr	r0, [pc, #180]	@ (8000840 <configAudio+0x1dc>)
 800078a:	f004 fb43 	bl	8004e14 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x1F;
 800078e:	231f      	movs	r3, #31
 8000790:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x0F;
 8000792:	230f      	movs	r3, #15
 8000794:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000796:	1d3a      	adds	r2, r7, #4
 8000798:	2364      	movs	r3, #100	@ 0x64
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	2302      	movs	r3, #2
 800079e:	2194      	movs	r1, #148	@ 0x94
 80007a0:	4827      	ldr	r0, [pc, #156]	@ (8000840 <configAudio+0x1dc>)
 80007a2:	f004 fb37 	bl	8004e14 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x22;
 80007a6:	2322      	movs	r3, #34	@ 0x22
 80007a8:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0xC0;
 80007aa:	23c0      	movs	r3, #192	@ 0xc0
 80007ac:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80007ae:	1d3a      	adds	r2, r7, #4
 80007b0:	2364      	movs	r3, #100	@ 0x64
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	2302      	movs	r3, #2
 80007b6:	2194      	movs	r1, #148	@ 0x94
 80007b8:	4821      	ldr	r0, [pc, #132]	@ (8000840 <configAudio+0x1dc>)
 80007ba:	f004 fb2b 	bl	8004e14 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x14;
 80007be:	2314      	movs	r3, #20
 80007c0:	713b      	strb	r3, [r7, #4]
    bytes[1] = 2;
 80007c2:	2302      	movs	r3, #2
 80007c4:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80007c6:	1d3a      	adds	r2, r7, #4
 80007c8:	2364      	movs	r3, #100	@ 0x64
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	2302      	movs	r3, #2
 80007ce:	2194      	movs	r1, #148	@ 0x94
 80007d0:	481b      	ldr	r0, [pc, #108]	@ (8000840 <configAudio+0x1dc>)
 80007d2:	f004 fb1f 	bl	8004e14 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x15;
 80007d6:	2315      	movs	r3, #21
 80007d8:	713b      	strb	r3, [r7, #4]
    bytes[1] = 2;
 80007da:	2302      	movs	r3, #2
 80007dc:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80007de:	1d3a      	adds	r2, r7, #4
 80007e0:	2364      	movs	r3, #100	@ 0x64
 80007e2:	9300      	str	r3, [sp, #0]
 80007e4:	2302      	movs	r3, #2
 80007e6:	2194      	movs	r1, #148	@ 0x94
 80007e8:	4815      	ldr	r0, [pc, #84]	@ (8000840 <configAudio+0x1dc>)
 80007ea:	f004 fb13 	bl	8004e14 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x20;
 80007ee:	2320      	movs	r3, #32
 80007f0:	713b      	strb	r3, [r7, #4]
    bytes[1] = 24;
 80007f2:	2318      	movs	r3, #24
 80007f4:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80007f6:	1d3a      	adds	r2, r7, #4
 80007f8:	2364      	movs	r3, #100	@ 0x64
 80007fa:	9300      	str	r3, [sp, #0]
 80007fc:	2302      	movs	r3, #2
 80007fe:	2194      	movs	r1, #148	@ 0x94
 8000800:	480f      	ldr	r0, [pc, #60]	@ (8000840 <configAudio+0x1dc>)
 8000802:	f004 fb07 	bl	8004e14 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x21;
 8000806:	2321      	movs	r3, #33	@ 0x21
 8000808:	713b      	strb	r3, [r7, #4]
    bytes[1] = 24;
 800080a:	2318      	movs	r3, #24
 800080c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800080e:	1d3a      	adds	r2, r7, #4
 8000810:	2364      	movs	r3, #100	@ 0x64
 8000812:	9300      	str	r3, [sp, #0]
 8000814:	2302      	movs	r3, #2
 8000816:	2194      	movs	r1, #148	@ 0x94
 8000818:	4809      	ldr	r0, [pc, #36]	@ (8000840 <configAudio+0x1dc>)
 800081a:	f004 fafb 	bl	8004e14 <HAL_I2C_Master_Transmit>

    /* Power up */
    bytes[0] = 0x02;
 800081e:	2302      	movs	r3, #2
 8000820:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x9E;
 8000822:	239e      	movs	r3, #158	@ 0x9e
 8000824:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000826:	1d3a      	adds	r2, r7, #4
 8000828:	2364      	movs	r3, #100	@ 0x64
 800082a:	9300      	str	r3, [sp, #0]
 800082c:	2302      	movs	r3, #2
 800082e:	2194      	movs	r1, #148	@ 0x94
 8000830:	4803      	ldr	r0, [pc, #12]	@ (8000840 <configAudio+0x1dc>)
 8000832:	f004 faef 	bl	8004e14 <HAL_I2C_Master_Transmit>
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000240 	.word	0x20000240

08000844 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b17      	ldr	r3, [pc, #92]	@ (80008ac <MX_DMA_Init+0x68>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a16      	ldr	r2, [pc, #88]	@ (80008ac <MX_DMA_Init+0x68>)
 8000854:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b14      	ldr	r3, [pc, #80]	@ (80008ac <MX_DMA_Init+0x68>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	4b10      	ldr	r3, [pc, #64]	@ (80008ac <MX_DMA_Init+0x68>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a0f      	ldr	r2, [pc, #60]	@ (80008ac <MX_DMA_Init+0x68>)
 8000870:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b0d      	ldr	r3, [pc, #52]	@ (80008ac <MX_DMA_Init+0x68>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	2100      	movs	r1, #0
 8000886:	2010      	movs	r0, #16
 8000888:	f001 fb0b 	bl	8001ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800088c:	2010      	movs	r0, #16
 800088e:	f001 fb24 	bl	8001eda <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	2100      	movs	r1, #0
 8000896:	2038      	movs	r0, #56	@ 0x38
 8000898:	f001 fb03 	bl	8001ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800089c:	2038      	movs	r0, #56	@ 0x38
 800089e:	f001 fb1c 	bl	8001eda <HAL_NVIC_EnableIRQ>

}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40023800 	.word	0x40023800

080008b0 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08c      	sub	sp, #48	@ 0x30
 80008b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	61bb      	str	r3, [r7, #24]
 80008ca:	4b72      	ldr	r3, [pc, #456]	@ (8000a94 <MX_GPIO_Init+0x1e4>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a71      	ldr	r2, [pc, #452]	@ (8000a94 <MX_GPIO_Init+0x1e4>)
 80008d0:	f043 0310 	orr.w	r3, r3, #16
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b6f      	ldr	r3, [pc, #444]	@ (8000a94 <MX_GPIO_Init+0x1e4>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f003 0310 	and.w	r3, r3, #16
 80008de:	61bb      	str	r3, [r7, #24]
 80008e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	617b      	str	r3, [r7, #20]
 80008e6:	4b6b      	ldr	r3, [pc, #428]	@ (8000a94 <MX_GPIO_Init+0x1e4>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	4a6a      	ldr	r2, [pc, #424]	@ (8000a94 <MX_GPIO_Init+0x1e4>)
 80008ec:	f043 0304 	orr.w	r3, r3, #4
 80008f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f2:	4b68      	ldr	r3, [pc, #416]	@ (8000a94 <MX_GPIO_Init+0x1e4>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	f003 0304 	and.w	r3, r3, #4
 80008fa:	617b      	str	r3, [r7, #20]
 80008fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	613b      	str	r3, [r7, #16]
 8000902:	4b64      	ldr	r3, [pc, #400]	@ (8000a94 <MX_GPIO_Init+0x1e4>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	4a63      	ldr	r2, [pc, #396]	@ (8000a94 <MX_GPIO_Init+0x1e4>)
 8000908:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800090c:	6313      	str	r3, [r2, #48]	@ 0x30
 800090e:	4b61      	ldr	r3, [pc, #388]	@ (8000a94 <MX_GPIO_Init+0x1e4>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	4b5d      	ldr	r3, [pc, #372]	@ (8000a94 <MX_GPIO_Init+0x1e4>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	4a5c      	ldr	r2, [pc, #368]	@ (8000a94 <MX_GPIO_Init+0x1e4>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6313      	str	r3, [r2, #48]	@ 0x30
 800092a:	4b5a      	ldr	r3, [pc, #360]	@ (8000a94 <MX_GPIO_Init+0x1e4>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	4b56      	ldr	r3, [pc, #344]	@ (8000a94 <MX_GPIO_Init+0x1e4>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	4a55      	ldr	r2, [pc, #340]	@ (8000a94 <MX_GPIO_Init+0x1e4>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	6313      	str	r3, [r2, #48]	@ 0x30
 8000946:	4b53      	ldr	r3, [pc, #332]	@ (8000a94 <MX_GPIO_Init+0x1e4>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b4f      	ldr	r3, [pc, #316]	@ (8000a94 <MX_GPIO_Init+0x1e4>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a4e      	ldr	r2, [pc, #312]	@ (8000a94 <MX_GPIO_Init+0x1e4>)
 800095c:	f043 0308 	orr.w	r3, r3, #8
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
 8000962:	4b4c      	ldr	r3, [pc, #304]	@ (8000a94 <MX_GPIO_Init+0x1e4>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	f003 0308 	and.w	r3, r3, #8
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	2108      	movs	r1, #8
 8000972:	4849      	ldr	r0, [pc, #292]	@ (8000a98 <MX_GPIO_Init+0x1e8>)
 8000974:	f001 ffd8 	bl	8002928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000978:	2201      	movs	r2, #1
 800097a:	2101      	movs	r1, #1
 800097c:	4847      	ldr	r0, [pc, #284]	@ (8000a9c <MX_GPIO_Init+0x1ec>)
 800097e:	f001 ffd3 	bl	8002928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000982:	2200      	movs	r2, #0
 8000984:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000988:	4845      	ldr	r0, [pc, #276]	@ (8000aa0 <MX_GPIO_Init+0x1f0>)
 800098a:	f001 ffcd 	bl	8002928 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800098e:	2308      	movs	r3, #8
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	483c      	ldr	r0, [pc, #240]	@ (8000a98 <MX_GPIO_Init+0x1e8>)
 80009a6:	f001 fe23 	bl	80025f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009aa:	2301      	movs	r3, #1
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	4836      	ldr	r0, [pc, #216]	@ (8000a9c <MX_GPIO_Init+0x1ec>)
 80009c2:	f001 fe15 	bl	80025f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009c6:	2308      	movs	r3, #8
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	2302      	movs	r3, #2
 80009cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009d6:	2305      	movs	r3, #5
 80009d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	482e      	ldr	r0, [pc, #184]	@ (8000a9c <MX_GPIO_Init+0x1ec>)
 80009e2:	f001 fe05 	bl	80025f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009e6:	2301      	movs	r3, #1
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ea:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	4619      	mov	r1, r3
 80009fa:	482a      	ldr	r0, [pc, #168]	@ (8000aa4 <MX_GPIO_Init+0x1f4>)
 80009fc:	f001 fdf8 	bl	80025f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a00:	2304      	movs	r3, #4
 8000a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a04:	2300      	movs	r3, #0
 8000a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	4825      	ldr	r0, [pc, #148]	@ (8000aa8 <MX_GPIO_Init+0x1f8>)
 8000a14:	f001 fdec 	bl	80025f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	2300      	movs	r3, #0
 8000a28:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a2a:	2305      	movs	r3, #5
 8000a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	4619      	mov	r1, r3
 8000a34:	481c      	ldr	r0, [pc, #112]	@ (8000aa8 <MX_GPIO_Init+0x1f8>)
 8000a36:	f001 fddb 	bl	80025f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a3a:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000a3e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a40:	2301      	movs	r3, #1
 8000a42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	4619      	mov	r1, r3
 8000a52:	4813      	ldr	r0, [pc, #76]	@ (8000aa0 <MX_GPIO_Init+0x1f0>)
 8000a54:	f001 fdcc 	bl	80025f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a58:	2320      	movs	r3, #32
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 031c 	add.w	r3, r7, #28
 8000a68:	4619      	mov	r1, r3
 8000a6a:	480d      	ldr	r0, [pc, #52]	@ (8000aa0 <MX_GPIO_Init+0x1f0>)
 8000a6c:	f001 fdc0 	bl	80025f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a70:	2302      	movs	r3, #2
 8000a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a74:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	4619      	mov	r1, r3
 8000a84:	4804      	ldr	r0, [pc, #16]	@ (8000a98 <MX_GPIO_Init+0x1e8>)
 8000a86:	f001 fdb3 	bl	80025f0 <HAL_GPIO_Init>

}
 8000a8a:	bf00      	nop
 8000a8c:	3730      	adds	r7, #48	@ 0x30
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	40020800 	.word	0x40020800
 8000aa0:	40020c00 	.word	0x40020c00
 8000aa4:	40020000 	.word	0x40020000
 8000aa8:	40020400 	.word	0x40020400

08000aac <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ab0:	4b12      	ldr	r3, [pc, #72]	@ (8000afc <MX_I2C1_Init+0x50>)
 8000ab2:	4a13      	ldr	r2, [pc, #76]	@ (8000b00 <MX_I2C1_Init+0x54>)
 8000ab4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ab6:	4b11      	ldr	r3, [pc, #68]	@ (8000afc <MX_I2C1_Init+0x50>)
 8000ab8:	4a12      	ldr	r2, [pc, #72]	@ (8000b04 <MX_I2C1_Init+0x58>)
 8000aba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	@ (8000afc <MX_I2C1_Init+0x50>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8000afc <MX_I2C1_Init+0x50>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8000afc <MX_I2C1_Init+0x50>)
 8000aca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ace:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8000afc <MX_I2C1_Init+0x50>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ad6:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <MX_I2C1_Init+0x50>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000adc:	4b07      	ldr	r3, [pc, #28]	@ (8000afc <MX_I2C1_Init+0x50>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ae2:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <MX_I2C1_Init+0x50>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ae8:	4804      	ldr	r0, [pc, #16]	@ (8000afc <MX_I2C1_Init+0x50>)
 8000aea:	f004 f84f 	bl	8004b8c <HAL_I2C_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000af4:	f000 fa84 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000240 	.word	0x20000240
 8000b00:	40005400 	.word	0x40005400
 8000b04:	000186a0 	.word	0x000186a0

08000b08 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08a      	sub	sp, #40	@ 0x28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a19      	ldr	r2, [pc, #100]	@ (8000b8c <HAL_I2C_MspInit+0x84>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d12c      	bne.n	8000b84 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	4b18      	ldr	r3, [pc, #96]	@ (8000b90 <HAL_I2C_MspInit+0x88>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	4a17      	ldr	r2, [pc, #92]	@ (8000b90 <HAL_I2C_MspInit+0x88>)
 8000b34:	f043 0302 	orr.w	r3, r3, #2
 8000b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b3a:	4b15      	ldr	r3, [pc, #84]	@ (8000b90 <HAL_I2C_MspInit+0x88>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	613b      	str	r3, [r7, #16]
 8000b44:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b46:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b4c:	2312      	movs	r3, #18
 8000b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b50:	2301      	movs	r3, #1
 8000b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	2300      	movs	r3, #0
 8000b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b58:	2304      	movs	r3, #4
 8000b5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4619      	mov	r1, r3
 8000b62:	480c      	ldr	r0, [pc, #48]	@ (8000b94 <HAL_I2C_MspInit+0x8c>)
 8000b64:	f001 fd44 	bl	80025f0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	4b08      	ldr	r3, [pc, #32]	@ (8000b90 <HAL_I2C_MspInit+0x88>)
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b70:	4a07      	ldr	r2, [pc, #28]	@ (8000b90 <HAL_I2C_MspInit+0x88>)
 8000b72:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b76:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b78:	4b05      	ldr	r3, [pc, #20]	@ (8000b90 <HAL_I2C_MspInit+0x88>)
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b84:	bf00      	nop
 8000b86:	3728      	adds	r7, #40	@ 0x28
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40005400 	.word	0x40005400
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40020400 	.word	0x40020400

08000b98 <MX_I2S3_Init>:
I2S_HandleTypeDef hi2s3;
DMA_HandleTypeDef hdma_spi3_tx;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000b9c:	4b13      	ldr	r3, [pc, #76]	@ (8000bec <MX_I2S3_Init+0x54>)
 8000b9e:	4a14      	ldr	r2, [pc, #80]	@ (8000bf0 <MX_I2S3_Init+0x58>)
 8000ba0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000ba2:	4b12      	ldr	r3, [pc, #72]	@ (8000bec <MX_I2S3_Init+0x54>)
 8000ba4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ba8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000baa:	4b10      	ldr	r3, [pc, #64]	@ (8000bec <MX_I2S3_Init+0x54>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000bec <MX_I2S3_Init+0x54>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000bec <MX_I2S3_Init+0x54>)
 8000bb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bbc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000bec <MX_I2S3_Init+0x54>)
 8000bc0:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8000bc4:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000bc6:	4b09      	ldr	r3, [pc, #36]	@ (8000bec <MX_I2S3_Init+0x54>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000bcc:	4b07      	ldr	r3, [pc, #28]	@ (8000bec <MX_I2S3_Init+0x54>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000bd2:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <MX_I2S3_Init+0x54>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000bd8:	4804      	ldr	r0, [pc, #16]	@ (8000bec <MX_I2S3_Init+0x54>)
 8000bda:	f004 fc75 	bl	80054c8 <HAL_I2S_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000be4:	f000 fa0c 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000294 	.word	0x20000294
 8000bf0:	40003c00 	.word	0x40003c00

08000bf4 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08e      	sub	sp, #56	@ 0x38
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a49      	ldr	r2, [pc, #292]	@ (8000d44 <HAL_I2S_MspInit+0x150>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	f040 808b 	bne.w	8000d3c <HAL_I2S_MspInit+0x148>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c26:	2301      	movs	r3, #1
 8000c28:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000c2a:	23c0      	movs	r3, #192	@ 0xc0
 8000c2c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4618      	mov	r0, r3
 8000c38:	f005 fe62 	bl	8006900 <HAL_RCCEx_PeriphCLKConfig>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8000c42:	f000 f9dd 	bl	8001000 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	4b3f      	ldr	r3, [pc, #252]	@ (8000d48 <HAL_I2S_MspInit+0x154>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4e:	4a3e      	ldr	r2, [pc, #248]	@ (8000d48 <HAL_I2S_MspInit+0x154>)
 8000c50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c56:	4b3c      	ldr	r3, [pc, #240]	@ (8000d48 <HAL_I2S_MspInit+0x154>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	4b38      	ldr	r3, [pc, #224]	@ (8000d48 <HAL_I2S_MspInit+0x154>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	4a37      	ldr	r2, [pc, #220]	@ (8000d48 <HAL_I2S_MspInit+0x154>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c72:	4b35      	ldr	r3, [pc, #212]	@ (8000d48 <HAL_I2S_MspInit+0x154>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60bb      	str	r3, [r7, #8]
 8000c82:	4b31      	ldr	r3, [pc, #196]	@ (8000d48 <HAL_I2S_MspInit+0x154>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	4a30      	ldr	r2, [pc, #192]	@ (8000d48 <HAL_I2S_MspInit+0x154>)
 8000c88:	f043 0304 	orr.w	r3, r3, #4
 8000c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8e:	4b2e      	ldr	r3, [pc, #184]	@ (8000d48 <HAL_I2S_MspInit+0x154>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	f003 0304 	and.w	r3, r3, #4
 8000c96:	60bb      	str	r3, [r7, #8]
 8000c98:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c9a:	2310      	movs	r3, #16
 8000c9c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000caa:	2306      	movs	r3, #6
 8000cac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000cae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4825      	ldr	r0, [pc, #148]	@ (8000d4c <HAL_I2S_MspInit+0x158>)
 8000cb6:	f001 fc9b 	bl	80025f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000cba:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000cbe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ccc:	2306      	movs	r3, #6
 8000cce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	481e      	ldr	r0, [pc, #120]	@ (8000d50 <HAL_I2S_MspInit+0x15c>)
 8000cd8:	f001 fc8a 	bl	80025f0 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8000cdc:	4b1d      	ldr	r3, [pc, #116]	@ (8000d54 <HAL_I2S_MspInit+0x160>)
 8000cde:	4a1e      	ldr	r2, [pc, #120]	@ (8000d58 <HAL_I2S_MspInit+0x164>)
 8000ce0:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8000ce2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d54 <HAL_I2S_MspInit+0x160>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ce8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d54 <HAL_I2S_MspInit+0x160>)
 8000cea:	2240      	movs	r2, #64	@ 0x40
 8000cec:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cee:	4b19      	ldr	r3, [pc, #100]	@ (8000d54 <HAL_I2S_MspInit+0x160>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cf4:	4b17      	ldr	r3, [pc, #92]	@ (8000d54 <HAL_I2S_MspInit+0x160>)
 8000cf6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cfa:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cfc:	4b15      	ldr	r3, [pc, #84]	@ (8000d54 <HAL_I2S_MspInit+0x160>)
 8000cfe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d02:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d04:	4b13      	ldr	r3, [pc, #76]	@ (8000d54 <HAL_I2S_MspInit+0x160>)
 8000d06:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d0a:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8000d0c:	4b11      	ldr	r3, [pc, #68]	@ (8000d54 <HAL_I2S_MspInit+0x160>)
 8000d0e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d12:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d14:	4b0f      	ldr	r3, [pc, #60]	@ (8000d54 <HAL_I2S_MspInit+0x160>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d54 <HAL_I2S_MspInit+0x160>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000d20:	480c      	ldr	r0, [pc, #48]	@ (8000d54 <HAL_I2S_MspInit+0x160>)
 8000d22:	f001 f8f5 	bl	8001f10 <HAL_DMA_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <HAL_I2S_MspInit+0x13c>
    {
      Error_Handler();
 8000d2c:	f000 f968 	bl	8001000 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi3_tx);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a08      	ldr	r2, [pc, #32]	@ (8000d54 <HAL_I2S_MspInit+0x160>)
 8000d34:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d36:	4a07      	ldr	r2, [pc, #28]	@ (8000d54 <HAL_I2S_MspInit+0x160>)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000d3c:	bf00      	nop
 8000d3e:	3738      	adds	r7, #56	@ 0x38
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40003c00 	.word	0x40003c00
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40020000 	.word	0x40020000
 8000d50:	40020800 	.word	0x40020800
 8000d54:	200002dc 	.word	0x200002dc
 8000d58:	40026088 	.word	0x40026088

08000d5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d60:	f000 fb26 	bl	80013b0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d64:	f000 f864 	bl	8000e30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d68:	f7ff fda2 	bl	80008b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d6c:	f7ff fd6a 	bl	8000844 <MX_DMA_Init>
  MX_I2C1_Init();
 8000d70:	f7ff fe9c 	bl	8000aac <MX_I2C1_Init>
  MX_I2S3_Init();
 8000d74:	f7ff ff10 	bl	8000b98 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000d78:	f000 f948 	bl	800100c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000d7c:	f008 fc8c 	bl	8009698 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 8000d80:	f000 fa80 	bl	8001284 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000d84:	f7ff fb98 	bl	80004b8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  configAudio();
 8000d88:	f7ff fc6c 	bl	8000664 <configAudio>
  init_fir_filter();
 8000d8c:	f000 f8e0 	bl	8000f50 <init_fir_filter>

  HAL_TIM_Base_Start(&htim2);
 8000d90:	481f      	ldr	r0, [pc, #124]	@ (8000e10 <main+0xb4>)
 8000d92:	f005 ffcf 	bl	8006d34 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, adc_signal, BUFFER_SIZE);
 8000d96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d9a:	491e      	ldr	r1, [pc, #120]	@ (8000e14 <main+0xb8>)
 8000d9c:	481e      	ldr	r0, [pc, #120]	@ (8000e18 <main+0xbc>)
 8000d9e:	f000 fbe1 	bl	8001564 <HAL_ADC_Start_DMA>

  HAL_I2S_Transmit_DMA(&hi2s3, filtered_signal, BUFFER_SIZE);
 8000da2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000da6:	491d      	ldr	r1, [pc, #116]	@ (8000e1c <main+0xc0>)
 8000da8:	481d      	ldr	r0, [pc, #116]	@ (8000e20 <main+0xc4>)
 8000daa:	f004 fccd 	bl	8005748 <HAL_I2S_Transmit_DMA>
  {
    /* USER CODE END WHILE */
//    MX_USB_HOST_Process();

    /* USER CODE BEGIN 3 */
    if (fx_ready == 1) {
 8000dae:	4b1d      	ldr	r3, [pc, #116]	@ (8000e24 <main+0xc8>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d1fa      	bne.n	8000dae <main+0x52>
		fx_ready = 0;
 8000db8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e24 <main+0xc8>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	701a      	strb	r2, [r3, #0]
		 last_systick = HAL_GetTick();
 8000dbe:	f000 fb5d 	bl	800147c <HAL_GetTick>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	4a18      	ldr	r2, [pc, #96]	@ (8000e28 <main+0xcc>)
 8000dc6:	6013      	str	r3, [r2, #0]
		 convert_to_q15(adc_signal, conv_signal, BUFFER_SIZE);
 8000dc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dcc:	4917      	ldr	r1, [pc, #92]	@ (8000e2c <main+0xd0>)
 8000dce:	4811      	ldr	r0, [pc, #68]	@ (8000e14 <main+0xb8>)
 8000dd0:	f000 f898 	bl	8000f04 <convert_to_q15>
		 last_systick = HAL_GetTick();
 8000dd4:	f000 fb52 	bl	800147c <HAL_GetTick>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	4a13      	ldr	r2, [pc, #76]	@ (8000e28 <main+0xcc>)
 8000ddc:	6013      	str	r3, [r2, #0]

        last_systick = HAL_GetTick();
 8000dde:	f000 fb4d 	bl	800147c <HAL_GetTick>
 8000de2:	4603      	mov	r3, r0
 8000de4:	4a10      	ldr	r2, [pc, #64]	@ (8000e28 <main+0xcc>)
 8000de6:	6013      	str	r3, [r2, #0]
//		echo_effect(conv_signal, output_signal, BUFFER_SIZE, 0.5, 0.5);
		last_systick = HAL_GetTick();
 8000de8:	f000 fb48 	bl	800147c <HAL_GetTick>
 8000dec:	4603      	mov	r3, r0
 8000dee:	4a0e      	ldr	r2, [pc, #56]	@ (8000e28 <main+0xcc>)
 8000df0:	6013      	str	r3, [r2, #0]



//		echo_effect_q15(conv_signal, output_signal, BUFFER_SIZE);
//		tremolo_effect(conv_signal, output_signal, BUFFER_SIZE, 440);
		fir_filter(conv_signal, filtered_signal);
 8000df2:	490a      	ldr	r1, [pc, #40]	@ (8000e1c <main+0xc0>)
 8000df4:	480d      	ldr	r0, [pc, #52]	@ (8000e2c <main+0xd0>)
 8000df6:	f000 f8c7 	bl	8000f88 <fir_filter>
		last_systick = HAL_GetTick();
 8000dfa:	f000 fb3f 	bl	800147c <HAL_GetTick>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	4a09      	ldr	r2, [pc, #36]	@ (8000e28 <main+0xcc>)
 8000e02:	6013      	str	r3, [r2, #0]




        last_systick = HAL_GetTick();
 8000e04:	f000 fb3a 	bl	800147c <HAL_GetTick>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	4a07      	ldr	r2, [pc, #28]	@ (8000e28 <main+0xcc>)
 8000e0c:	6013      	str	r3, [r2, #0]
    if (fx_ready == 1) {
 8000e0e:	e7ce      	b.n	8000dae <main+0x52>
 8000e10:	200011ac 	.word	0x200011ac
 8000e14:	2000033c 	.word	0x2000033c
 8000e18:	20000198 	.word	0x20000198
 8000e1c:	20000b44 	.word	0x20000b44
 8000e20:	20000294 	.word	0x20000294
 8000e24:	2000073c 	.word	0x2000073c
 8000e28:	20000740 	.word	0x20000740
 8000e2c:	20000744 	.word	0x20000744

08000e30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b094      	sub	sp, #80	@ 0x50
 8000e34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e36:	f107 0320 	add.w	r3, r7, #32
 8000e3a:	2230      	movs	r2, #48	@ 0x30
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f009 f9d6 	bl	800a1f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e44:	f107 030c 	add.w	r3, r7, #12
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e54:	2300      	movs	r3, #0
 8000e56:	60bb      	str	r3, [r7, #8]
 8000e58:	4b28      	ldr	r3, [pc, #160]	@ (8000efc <SystemClock_Config+0xcc>)
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5c:	4a27      	ldr	r2, [pc, #156]	@ (8000efc <SystemClock_Config+0xcc>)
 8000e5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e62:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e64:	4b25      	ldr	r3, [pc, #148]	@ (8000efc <SystemClock_Config+0xcc>)
 8000e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e70:	2300      	movs	r3, #0
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	4b22      	ldr	r3, [pc, #136]	@ (8000f00 <SystemClock_Config+0xd0>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a21      	ldr	r2, [pc, #132]	@ (8000f00 <SystemClock_Config+0xd0>)
 8000e7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e7e:	6013      	str	r3, [r2, #0]
 8000e80:	4b1f      	ldr	r3, [pc, #124]	@ (8000f00 <SystemClock_Config+0xd0>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e90:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e94:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e96:	2302      	movs	r3, #2
 8000e98:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e9a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ea0:	2304      	movs	r3, #4
 8000ea2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ea4:	23a8      	movs	r3, #168	@ 0xa8
 8000ea6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000eac:	2307      	movs	r3, #7
 8000eae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb0:	f107 0320 	add.w	r3, r7, #32
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f005 f89f 	bl	8005ff8 <HAL_RCC_OscConfig>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ec0:	f000 f89e 	bl	8001000 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ec4:	230f      	movs	r3, #15
 8000ec6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ed0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ed4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ed6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eda:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	2105      	movs	r1, #5
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f005 fb00 	bl	80064e8 <HAL_RCC_ClockConfig>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000eee:	f000 f887 	bl	8001000 <Error_Handler>
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	3750      	adds	r7, #80	@ 0x50
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40007000 	.word	0x40007000

08000f04 <convert_to_q15>:
}



//FIR FILTER
void convert_to_q15(uint16_t *rawInput, q15_t *convertedSignal, int size) {
 8000f04:	b480      	push	{r7}
 8000f06:	b087      	sub	sp, #28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++) {
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	e010      	b.n	8000f38 <convert_to_q15+0x34>
        // Map uint16_t (0 to 65535) to q15_t (-32768 to 32767)
        convertedSignal[i] = (q15_t)((int32_t)(rawInput[i] - 32768));
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	881b      	ldrh	r3, [r3, #0]
 8000f20:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8000f24:	b299      	uxth	r1, r3
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	68ba      	ldr	r2, [r7, #8]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	b20a      	sxth	r2, r1
 8000f30:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	3301      	adds	r3, #1
 8000f36:	617b      	str	r3, [r7, #20]
 8000f38:	697a      	ldr	r2, [r7, #20]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	dbea      	blt.n	8000f16 <convert_to_q15+0x12>
    }
}
 8000f40:	bf00      	nop
 8000f42:	bf00      	nop
 8000f44:	371c      	adds	r7, #28
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
	...

08000f50 <init_fir_filter>:

void init_fir_filter(void) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af02      	add	r7, sp, #8
    arm_float_to_q15(firCoeffs32, firCoeffsQ15, NUM_TAPS);
 8000f56:	2240      	movs	r2, #64	@ 0x40
 8000f58:	4907      	ldr	r1, [pc, #28]	@ (8000f78 <init_fir_filter+0x28>)
 8000f5a:	4808      	ldr	r0, [pc, #32]	@ (8000f7c <init_fir_filter+0x2c>)
 8000f5c:	f008 fe50 	bl	8009c00 <arm_float_to_q15>
    arm_fir_init_q15(&S, NUM_TAPS, firCoeffsQ15, firStateQ15, BLOCK_SIZE);
 8000f60:	2380      	movs	r3, #128	@ 0x80
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <init_fir_filter+0x30>)
 8000f66:	4a04      	ldr	r2, [pc, #16]	@ (8000f78 <init_fir_filter+0x28>)
 8000f68:	2140      	movs	r1, #64	@ 0x40
 8000f6a:	4806      	ldr	r0, [pc, #24]	@ (8000f84 <init_fir_filter+0x34>)
 8000f6c:	f009 f86c 	bl	800a048 <arm_fir_init_q15>
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000f44 	.word	0x20000f44
 8000f7c:	20000000 	.word	0x20000000
 8000f80:	20000fc4 	.word	0x20000fc4
 8000f84:	20001144 	.word	0x20001144

08000f88 <fir_filter>:
void fir_filter(q15_t *input, q15_t *output) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < BUFFER_SIZE; i += BLOCK_SIZE) {
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	e00e      	b.n	8000fb6 <fir_filter+0x2e>
        arm_fir_q15(&S, &input[i], &output[i], BLOCK_SIZE);
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	18d1      	adds	r1, r2, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	683a      	ldr	r2, [r7, #0]
 8000fa6:	441a      	add	r2, r3
 8000fa8:	2380      	movs	r3, #128	@ 0x80
 8000faa:	4807      	ldr	r0, [pc, #28]	@ (8000fc8 <fir_filter+0x40>)
 8000fac:	f008 fec0 	bl	8009d30 <arm_fir_q15>
    for (int i = 0; i < BUFFER_SIZE; i += BLOCK_SIZE) {
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	3380      	adds	r3, #128	@ 0x80
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000fbc:	dbec      	blt.n	8000f98 <fir_filter+0x10>
    }
}
 8000fbe:	bf00      	nop
 8000fc0:	bf00      	nop
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20001144 	.word	0x20001144

08000fcc <HAL_ADC_ConvCpltCallback>:

    arm_cmplx_mag_q15(fftOutput, magnitudeSpectrum, FFT_SIZE / 2); //ovo je za magnitudes, mora biti /2 jer je simetrično, nyquistov dijagram iz automatskog samo poz frekv
}


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc1) {
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	fx_ready = 1;
 8000fd4:	4b04      	ldr	r3, [pc, #16]	@ (8000fe8 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	701a      	strb	r2, [r3, #0]
//	last_dma_systick = __HAL_TIM_GET_COUNTER(&htim2);
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	2000073c 	.word	0x2000073c

08000fec <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
    if (hi2s->Instance == SPI3) {
    }
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001004:	b672      	cpsid	i
}
 8001006:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <Error_Handler+0x8>

0800100c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001010:	4b17      	ldr	r3, [pc, #92]	@ (8001070 <MX_SPI1_Init+0x64>)
 8001012:	4a18      	ldr	r2, [pc, #96]	@ (8001074 <MX_SPI1_Init+0x68>)
 8001014:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001016:	4b16      	ldr	r3, [pc, #88]	@ (8001070 <MX_SPI1_Init+0x64>)
 8001018:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800101c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800101e:	4b14      	ldr	r3, [pc, #80]	@ (8001070 <MX_SPI1_Init+0x64>)
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001024:	4b12      	ldr	r3, [pc, #72]	@ (8001070 <MX_SPI1_Init+0x64>)
 8001026:	2200      	movs	r2, #0
 8001028:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800102a:	4b11      	ldr	r3, [pc, #68]	@ (8001070 <MX_SPI1_Init+0x64>)
 800102c:	2200      	movs	r2, #0
 800102e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001030:	4b0f      	ldr	r3, [pc, #60]	@ (8001070 <MX_SPI1_Init+0x64>)
 8001032:	2200      	movs	r2, #0
 8001034:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001036:	4b0e      	ldr	r3, [pc, #56]	@ (8001070 <MX_SPI1_Init+0x64>)
 8001038:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800103c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800103e:	4b0c      	ldr	r3, [pc, #48]	@ (8001070 <MX_SPI1_Init+0x64>)
 8001040:	2200      	movs	r2, #0
 8001042:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001044:	4b0a      	ldr	r3, [pc, #40]	@ (8001070 <MX_SPI1_Init+0x64>)
 8001046:	2200      	movs	r2, #0
 8001048:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800104a:	4b09      	ldr	r3, [pc, #36]	@ (8001070 <MX_SPI1_Init+0x64>)
 800104c:	2200      	movs	r2, #0
 800104e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001050:	4b07      	ldr	r3, [pc, #28]	@ (8001070 <MX_SPI1_Init+0x64>)
 8001052:	2200      	movs	r2, #0
 8001054:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001056:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <MX_SPI1_Init+0x64>)
 8001058:	220a      	movs	r2, #10
 800105a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800105c:	4804      	ldr	r0, [pc, #16]	@ (8001070 <MX_SPI1_Init+0x64>)
 800105e:	f005 fd91 	bl	8006b84 <HAL_SPI_Init>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001068:	f7ff ffca 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20001150 	.word	0x20001150
 8001074:	40013000 	.word	0x40013000

08001078 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08a      	sub	sp, #40	@ 0x28
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a19      	ldr	r2, [pc, #100]	@ (80010fc <HAL_SPI_MspInit+0x84>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d12b      	bne.n	80010f2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	4b18      	ldr	r3, [pc, #96]	@ (8001100 <HAL_SPI_MspInit+0x88>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010a2:	4a17      	ldr	r2, [pc, #92]	@ (8001100 <HAL_SPI_MspInit+0x88>)
 80010a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80010aa:	4b15      	ldr	r3, [pc, #84]	@ (8001100 <HAL_SPI_MspInit+0x88>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	4b11      	ldr	r3, [pc, #68]	@ (8001100 <HAL_SPI_MspInit+0x88>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	4a10      	ldr	r2, [pc, #64]	@ (8001100 <HAL_SPI_MspInit+0x88>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001100 <HAL_SPI_MspInit+0x88>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80010d2:	23e0      	movs	r3, #224	@ 0xe0
 80010d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010de:	2300      	movs	r3, #0
 80010e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010e2:	2305      	movs	r3, #5
 80010e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	4619      	mov	r1, r3
 80010ec:	4805      	ldr	r0, [pc, #20]	@ (8001104 <HAL_SPI_MspInit+0x8c>)
 80010ee:	f001 fa7f 	bl	80025f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80010f2:	bf00      	nop
 80010f4:	3728      	adds	r7, #40	@ 0x28
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40013000 	.word	0x40013000
 8001100:	40023800 	.word	0x40023800
 8001104:	40020000 	.word	0x40020000

08001108 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	4b10      	ldr	r3, [pc, #64]	@ (8001154 <HAL_MspInit+0x4c>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001116:	4a0f      	ldr	r2, [pc, #60]	@ (8001154 <HAL_MspInit+0x4c>)
 8001118:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800111c:	6453      	str	r3, [r2, #68]	@ 0x44
 800111e:	4b0d      	ldr	r3, [pc, #52]	@ (8001154 <HAL_MspInit+0x4c>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001122:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	603b      	str	r3, [r7, #0]
 800112e:	4b09      	ldr	r3, [pc, #36]	@ (8001154 <HAL_MspInit+0x4c>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001132:	4a08      	ldr	r2, [pc, #32]	@ (8001154 <HAL_MspInit+0x4c>)
 8001134:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001138:	6413      	str	r3, [r2, #64]	@ 0x40
 800113a:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <HAL_MspInit+0x4c>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001142:	603b      	str	r3, [r7, #0]
 8001144:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001146:	2007      	movs	r0, #7
 8001148:	f000 fea0 	bl	8001e8c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40023800 	.word	0x40023800

08001158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <NMI_Handler+0x4>

08001160 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001164:	bf00      	nop
 8001166:	e7fd      	b.n	8001164 <HardFault_Handler+0x4>

08001168 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800116c:	bf00      	nop
 800116e:	e7fd      	b.n	800116c <MemManage_Handler+0x4>

08001170 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001174:	bf00      	nop
 8001176:	e7fd      	b.n	8001174 <BusFault_Handler+0x4>

08001178 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800117c:	bf00      	nop
 800117e:	e7fd      	b.n	800117c <UsageFault_Handler+0x4>

08001180 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ae:	f000 f951 	bl	8001454 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80011bc:	4802      	ldr	r0, [pc, #8]	@ (80011c8 <DMA1_Stream5_IRQHandler+0x10>)
 80011be:	f000 ffad 	bl	800211c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200002dc 	.word	0x200002dc

080011cc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80011d0:	4802      	ldr	r0, [pc, #8]	@ (80011dc <DMA2_Stream0_IRQHandler+0x10>)
 80011d2:	f000 ffa3 	bl	800211c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200001e0 	.word	0x200001e0

080011e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80011e4:	4802      	ldr	r0, [pc, #8]	@ (80011f0 <OTG_FS_IRQHandler+0x10>)
 80011e6:	f001 fe99 	bl	8002f1c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	200015d4 	.word	0x200015d4

080011f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011fc:	4a14      	ldr	r2, [pc, #80]	@ (8001250 <_sbrk+0x5c>)
 80011fe:	4b15      	ldr	r3, [pc, #84]	@ (8001254 <_sbrk+0x60>)
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001208:	4b13      	ldr	r3, [pc, #76]	@ (8001258 <_sbrk+0x64>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d102      	bne.n	8001216 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001210:	4b11      	ldr	r3, [pc, #68]	@ (8001258 <_sbrk+0x64>)
 8001212:	4a12      	ldr	r2, [pc, #72]	@ (800125c <_sbrk+0x68>)
 8001214:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001216:	4b10      	ldr	r3, [pc, #64]	@ (8001258 <_sbrk+0x64>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4413      	add	r3, r2
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	429a      	cmp	r2, r3
 8001222:	d207      	bcs.n	8001234 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001224:	f008 fffc 	bl	800a220 <__errno>
 8001228:	4603      	mov	r3, r0
 800122a:	220c      	movs	r2, #12
 800122c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800122e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001232:	e009      	b.n	8001248 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001234:	4b08      	ldr	r3, [pc, #32]	@ (8001258 <_sbrk+0x64>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800123a:	4b07      	ldr	r3, [pc, #28]	@ (8001258 <_sbrk+0x64>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4413      	add	r3, r2
 8001242:	4a05      	ldr	r2, [pc, #20]	@ (8001258 <_sbrk+0x64>)
 8001244:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001246:	68fb      	ldr	r3, [r7, #12]
}
 8001248:	4618      	mov	r0, r3
 800124a:	3718      	adds	r7, #24
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20020000 	.word	0x20020000
 8001254:	00000400 	.word	0x00000400
 8001258:	200011a8 	.word	0x200011a8
 800125c:	20001b00 	.word	0x20001b00

08001260 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001264:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <SystemInit+0x20>)
 8001266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800126a:	4a05      	ldr	r2, [pc, #20]	@ (8001280 <SystemInit+0x20>)
 800126c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001270:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800128a:	f107 0308 	add.w	r3, r7, #8
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001298:	463b      	mov	r3, r7
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001318 <MX_TIM2_Init+0x94>)
 80012a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80012a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001318 <MX_TIM2_Init+0x94>)
 80012aa:	2253      	movs	r2, #83	@ 0x53
 80012ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001318 <MX_TIM2_Init+0x94>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 23-1;
 80012b4:	4b18      	ldr	r3, [pc, #96]	@ (8001318 <MX_TIM2_Init+0x94>)
 80012b6:	2216      	movs	r2, #22
 80012b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ba:	4b17      	ldr	r3, [pc, #92]	@ (8001318 <MX_TIM2_Init+0x94>)
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c0:	4b15      	ldr	r3, [pc, #84]	@ (8001318 <MX_TIM2_Init+0x94>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012c6:	4814      	ldr	r0, [pc, #80]	@ (8001318 <MX_TIM2_Init+0x94>)
 80012c8:	f005 fce5 	bl	8006c96 <HAL_TIM_Base_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80012d2:	f7ff fe95 	bl	8001000 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012dc:	f107 0308 	add.w	r3, r7, #8
 80012e0:	4619      	mov	r1, r3
 80012e2:	480d      	ldr	r0, [pc, #52]	@ (8001318 <MX_TIM2_Init+0x94>)
 80012e4:	f005 fd8e 	bl	8006e04 <HAL_TIM_ConfigClockSource>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80012ee:	f7ff fe87 	bl	8001000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012f2:	2320      	movs	r3, #32
 80012f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012fa:	463b      	mov	r3, r7
 80012fc:	4619      	mov	r1, r3
 80012fe:	4806      	ldr	r0, [pc, #24]	@ (8001318 <MX_TIM2_Init+0x94>)
 8001300:	f005 ff8e 	bl	8007220 <HAL_TIMEx_MasterConfigSynchronization>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800130a:	f7ff fe79 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800130e:	bf00      	nop
 8001310:	3718      	adds	r7, #24
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	200011ac 	.word	0x200011ac

0800131c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800132c:	d10d      	bne.n	800134a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	4b09      	ldr	r3, [pc, #36]	@ (8001358 <HAL_TIM_Base_MspInit+0x3c>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001336:	4a08      	ldr	r2, [pc, #32]	@ (8001358 <HAL_TIM_Base_MspInit+0x3c>)
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	6413      	str	r3, [r2, #64]	@ 0x40
 800133e:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <HAL_TIM_Base_MspInit+0x3c>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800134a:	bf00      	nop
 800134c:	3714      	adds	r7, #20
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	40023800 	.word	0x40023800

0800135c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800135c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001394 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001360:	f7ff ff7e 	bl	8001260 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001364:	480c      	ldr	r0, [pc, #48]	@ (8001398 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001366:	490d      	ldr	r1, [pc, #52]	@ (800139c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001368:	4a0d      	ldr	r2, [pc, #52]	@ (80013a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800136a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800136c:	e002      	b.n	8001374 <LoopCopyDataInit>

0800136e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800136e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001372:	3304      	adds	r3, #4

08001374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001378:	d3f9      	bcc.n	800136e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800137a:	4a0a      	ldr	r2, [pc, #40]	@ (80013a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800137c:	4c0a      	ldr	r4, [pc, #40]	@ (80013a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800137e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001380:	e001      	b.n	8001386 <LoopFillZerobss>

08001382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001384:	3204      	adds	r2, #4

08001386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001388:	d3fb      	bcc.n	8001382 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800138a:	f008 ff4f 	bl	800a22c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800138e:	f7ff fce5 	bl	8000d5c <main>
  bx  lr    
 8001392:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001394:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800139c:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 80013a0:	0800a358 	.word	0x0800a358
  ldr r2, =_sbss
 80013a4:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 80013a8:	20001afc 	.word	0x20001afc

080013ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013ac:	e7fe      	b.n	80013ac <ADC_IRQHandler>
	...

080013b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013b4:	4b0e      	ldr	r3, [pc, #56]	@ (80013f0 <HAL_Init+0x40>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a0d      	ldr	r2, [pc, #52]	@ (80013f0 <HAL_Init+0x40>)
 80013ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013c0:	4b0b      	ldr	r3, [pc, #44]	@ (80013f0 <HAL_Init+0x40>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a0a      	ldr	r2, [pc, #40]	@ (80013f0 <HAL_Init+0x40>)
 80013c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013cc:	4b08      	ldr	r3, [pc, #32]	@ (80013f0 <HAL_Init+0x40>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a07      	ldr	r2, [pc, #28]	@ (80013f0 <HAL_Init+0x40>)
 80013d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d8:	2003      	movs	r0, #3
 80013da:	f000 fd57 	bl	8001e8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013de:	2000      	movs	r0, #0
 80013e0:	f000 f808 	bl	80013f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e4:	f7ff fe90 	bl	8001108 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40023c00 	.word	0x40023c00

080013f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013fc:	4b12      	ldr	r3, [pc, #72]	@ (8001448 <HAL_InitTick+0x54>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b12      	ldr	r3, [pc, #72]	@ (800144c <HAL_InitTick+0x58>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	4619      	mov	r1, r3
 8001406:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800140a:	fbb3 f3f1 	udiv	r3, r3, r1
 800140e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001412:	4618      	mov	r0, r3
 8001414:	f000 fd6f 	bl	8001ef6 <HAL_SYSTICK_Config>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e00e      	b.n	8001440 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b0f      	cmp	r3, #15
 8001426:	d80a      	bhi.n	800143e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001428:	2200      	movs	r2, #0
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001430:	f000 fd37 	bl	8001ea2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001434:	4a06      	ldr	r2, [pc, #24]	@ (8001450 <HAL_InitTick+0x5c>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800143a:	2300      	movs	r3, #0
 800143c:	e000      	b.n	8001440 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
}
 8001440:	4618      	mov	r0, r3
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000100 	.word	0x20000100
 800144c:	20000108 	.word	0x20000108
 8001450:	20000104 	.word	0x20000104

08001454 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001458:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <HAL_IncTick+0x20>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	461a      	mov	r2, r3
 800145e:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <HAL_IncTick+0x24>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4413      	add	r3, r2
 8001464:	4a04      	ldr	r2, [pc, #16]	@ (8001478 <HAL_IncTick+0x24>)
 8001466:	6013      	str	r3, [r2, #0]
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	20000108 	.word	0x20000108
 8001478:	200011f4 	.word	0x200011f4

0800147c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  return uwTick;
 8001480:	4b03      	ldr	r3, [pc, #12]	@ (8001490 <HAL_GetTick+0x14>)
 8001482:	681b      	ldr	r3, [r3, #0]
}
 8001484:	4618      	mov	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	200011f4 	.word	0x200011f4

08001494 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800149c:	f7ff ffee 	bl	800147c <HAL_GetTick>
 80014a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80014ac:	d005      	beq.n	80014ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ae:	4b0a      	ldr	r3, [pc, #40]	@ (80014d8 <HAL_Delay+0x44>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	461a      	mov	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	4413      	add	r3, r2
 80014b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014ba:	bf00      	nop
 80014bc:	f7ff ffde 	bl	800147c <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d8f7      	bhi.n	80014bc <HAL_Delay+0x28>
  {
  }
}
 80014cc:	bf00      	nop
 80014ce:	bf00      	nop
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000108 	.word	0x20000108

080014dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014e4:	2300      	movs	r3, #0
 80014e6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e033      	b.n	800155a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d109      	bne.n	800150e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff f82e 	bl	800055c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001512:	f003 0310 	and.w	r3, r3, #16
 8001516:	2b00      	cmp	r3, #0
 8001518:	d118      	bne.n	800154c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001522:	f023 0302 	bic.w	r3, r3, #2
 8001526:	f043 0202 	orr.w	r2, r3, #2
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f000 fa5e 	bl	80019f0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153e:	f023 0303 	bic.w	r3, r3, #3
 8001542:	f043 0201 	orr.w	r2, r3, #1
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	641a      	str	r2, [r3, #64]	@ 0x40
 800154a:	e001      	b.n	8001550 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001558:	7bfb      	ldrb	r3, [r7, #15]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001570:	2300      	movs	r3, #0
 8001572:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800157a:	2b01      	cmp	r3, #1
 800157c:	d101      	bne.n	8001582 <HAL_ADC_Start_DMA+0x1e>
 800157e:	2302      	movs	r3, #2
 8001580:	e0e9      	b.n	8001756 <HAL_ADC_Start_DMA+0x1f2>
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2201      	movs	r2, #1
 8001586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	2b01      	cmp	r3, #1
 8001596:	d018      	beq.n	80015ca <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	689a      	ldr	r2, [r3, #8]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f042 0201 	orr.w	r2, r2, #1
 80015a6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015a8:	4b6d      	ldr	r3, [pc, #436]	@ (8001760 <HAL_ADC_Start_DMA+0x1fc>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a6d      	ldr	r2, [pc, #436]	@ (8001764 <HAL_ADC_Start_DMA+0x200>)
 80015ae:	fba2 2303 	umull	r2, r3, r2, r3
 80015b2:	0c9a      	lsrs	r2, r3, #18
 80015b4:	4613      	mov	r3, r2
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	4413      	add	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80015bc:	e002      	b.n	80015c4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	3b01      	subs	r3, #1
 80015c2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f9      	bne.n	80015be <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80015d8:	d107      	bne.n	80015ea <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80015e8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	f040 80a1 	bne.w	800173c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fe:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001602:	f023 0301 	bic.w	r3, r3, #1
 8001606:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001618:	2b00      	cmp	r3, #0
 800161a:	d007      	beq.n	800162c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001620:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001624:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001630:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001634:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001638:	d106      	bne.n	8001648 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800163e:	f023 0206 	bic.w	r2, r3, #6
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	645a      	str	r2, [r3, #68]	@ 0x44
 8001646:	e002      	b.n	800164e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2200      	movs	r2, #0
 800164c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001656:	4b44      	ldr	r3, [pc, #272]	@ (8001768 <HAL_ADC_Start_DMA+0x204>)
 8001658:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800165e:	4a43      	ldr	r2, [pc, #268]	@ (800176c <HAL_ADC_Start_DMA+0x208>)
 8001660:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001666:	4a42      	ldr	r2, [pc, #264]	@ (8001770 <HAL_ADC_Start_DMA+0x20c>)
 8001668:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800166e:	4a41      	ldr	r2, [pc, #260]	@ (8001774 <HAL_ADC_Start_DMA+0x210>)
 8001670:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800167a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800168a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	689a      	ldr	r2, [r3, #8]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800169a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	334c      	adds	r3, #76	@ 0x4c
 80016a6:	4619      	mov	r1, r3
 80016a8:	68ba      	ldr	r2, [r7, #8]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f000 fcde 	bl	800206c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 031f 	and.w	r3, r3, #31
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d12a      	bne.n	8001712 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a2d      	ldr	r2, [pc, #180]	@ (8001778 <HAL_ADC_Start_DMA+0x214>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d015      	beq.n	80016f2 <HAL_ADC_Start_DMA+0x18e>
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a2c      	ldr	r2, [pc, #176]	@ (800177c <HAL_ADC_Start_DMA+0x218>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d105      	bne.n	80016dc <HAL_ADC_Start_DMA+0x178>
 80016d0:	4b25      	ldr	r3, [pc, #148]	@ (8001768 <HAL_ADC_Start_DMA+0x204>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 031f 	and.w	r3, r3, #31
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d00a      	beq.n	80016f2 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a27      	ldr	r2, [pc, #156]	@ (8001780 <HAL_ADC_Start_DMA+0x21c>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d136      	bne.n	8001754 <HAL_ADC_Start_DMA+0x1f0>
 80016e6:	4b20      	ldr	r3, [pc, #128]	@ (8001768 <HAL_ADC_Start_DMA+0x204>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f003 0310 	and.w	r3, r3, #16
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d130      	bne.n	8001754 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d129      	bne.n	8001754 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	689a      	ldr	r2, [r3, #8]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	e020      	b.n	8001754 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a18      	ldr	r2, [pc, #96]	@ (8001778 <HAL_ADC_Start_DMA+0x214>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d11b      	bne.n	8001754 <HAL_ADC_Start_DMA+0x1f0>
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d114      	bne.n	8001754 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001738:	609a      	str	r2, [r3, #8]
 800173a:	e00b      	b.n	8001754 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001740:	f043 0210 	orr.w	r2, r3, #16
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174c:	f043 0201 	orr.w	r2, r3, #1
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3718      	adds	r7, #24
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000100 	.word	0x20000100
 8001764:	431bde83 	.word	0x431bde83
 8001768:	40012300 	.word	0x40012300
 800176c:	08001be9 	.word	0x08001be9
 8001770:	08001ca3 	.word	0x08001ca3
 8001774:	08001cbf 	.word	0x08001cbf
 8001778:	40012000 	.word	0x40012000
 800177c:	40012100 	.word	0x40012100
 8001780:	40012200 	.word	0x40012200

08001784 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80017b6:	2300      	movs	r3, #0
 80017b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d101      	bne.n	80017c8 <HAL_ADC_ConfigChannel+0x1c>
 80017c4:	2302      	movs	r3, #2
 80017c6:	e105      	b.n	80019d4 <HAL_ADC_ConfigChannel+0x228>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b09      	cmp	r3, #9
 80017d6:	d925      	bls.n	8001824 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	68d9      	ldr	r1, [r3, #12]
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	461a      	mov	r2, r3
 80017e6:	4613      	mov	r3, r2
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	4413      	add	r3, r2
 80017ec:	3b1e      	subs	r3, #30
 80017ee:	2207      	movs	r2, #7
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43da      	mvns	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	400a      	ands	r2, r1
 80017fc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68d9      	ldr	r1, [r3, #12]
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	b29b      	uxth	r3, r3
 800180e:	4618      	mov	r0, r3
 8001810:	4603      	mov	r3, r0
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	4403      	add	r3, r0
 8001816:	3b1e      	subs	r3, #30
 8001818:	409a      	lsls	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	430a      	orrs	r2, r1
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	e022      	b.n	800186a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6919      	ldr	r1, [r3, #16]
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	b29b      	uxth	r3, r3
 8001830:	461a      	mov	r2, r3
 8001832:	4613      	mov	r3, r2
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	4413      	add	r3, r2
 8001838:	2207      	movs	r2, #7
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43da      	mvns	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	400a      	ands	r2, r1
 8001846:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6919      	ldr	r1, [r3, #16]
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	b29b      	uxth	r3, r3
 8001858:	4618      	mov	r0, r3
 800185a:	4603      	mov	r3, r0
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	4403      	add	r3, r0
 8001860:	409a      	lsls	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	430a      	orrs	r2, r1
 8001868:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b06      	cmp	r3, #6
 8001870:	d824      	bhi.n	80018bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685a      	ldr	r2, [r3, #4]
 800187c:	4613      	mov	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	3b05      	subs	r3, #5
 8001884:	221f      	movs	r2, #31
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43da      	mvns	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	400a      	ands	r2, r1
 8001892:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	b29b      	uxth	r3, r3
 80018a0:	4618      	mov	r0, r3
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	4613      	mov	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4413      	add	r3, r2
 80018ac:	3b05      	subs	r3, #5
 80018ae:	fa00 f203 	lsl.w	r2, r0, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	430a      	orrs	r2, r1
 80018b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80018ba:	e04c      	b.n	8001956 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	2b0c      	cmp	r3, #12
 80018c2:	d824      	bhi.n	800190e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	3b23      	subs	r3, #35	@ 0x23
 80018d6:	221f      	movs	r2, #31
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43da      	mvns	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	400a      	ands	r2, r1
 80018e4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	4618      	mov	r0, r3
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685a      	ldr	r2, [r3, #4]
 80018f8:	4613      	mov	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	3b23      	subs	r3, #35	@ 0x23
 8001900:	fa00 f203 	lsl.w	r2, r0, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	430a      	orrs	r2, r1
 800190a:	631a      	str	r2, [r3, #48]	@ 0x30
 800190c:	e023      	b.n	8001956 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685a      	ldr	r2, [r3, #4]
 8001918:	4613      	mov	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	3b41      	subs	r3, #65	@ 0x41
 8001920:	221f      	movs	r2, #31
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43da      	mvns	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	400a      	ands	r2, r1
 800192e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	b29b      	uxth	r3, r3
 800193c:	4618      	mov	r0, r3
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685a      	ldr	r2, [r3, #4]
 8001942:	4613      	mov	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4413      	add	r3, r2
 8001948:	3b41      	subs	r3, #65	@ 0x41
 800194a:	fa00 f203 	lsl.w	r2, r0, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	430a      	orrs	r2, r1
 8001954:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001956:	4b22      	ldr	r3, [pc, #136]	@ (80019e0 <HAL_ADC_ConfigChannel+0x234>)
 8001958:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a21      	ldr	r2, [pc, #132]	@ (80019e4 <HAL_ADC_ConfigChannel+0x238>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d109      	bne.n	8001978 <HAL_ADC_ConfigChannel+0x1cc>
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b12      	cmp	r3, #18
 800196a:	d105      	bne.n	8001978 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a19      	ldr	r2, [pc, #100]	@ (80019e4 <HAL_ADC_ConfigChannel+0x238>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d123      	bne.n	80019ca <HAL_ADC_ConfigChannel+0x21e>
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2b10      	cmp	r3, #16
 8001988:	d003      	beq.n	8001992 <HAL_ADC_ConfigChannel+0x1e6>
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2b11      	cmp	r3, #17
 8001990:	d11b      	bne.n	80019ca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2b10      	cmp	r3, #16
 80019a4:	d111      	bne.n	80019ca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019a6:	4b10      	ldr	r3, [pc, #64]	@ (80019e8 <HAL_ADC_ConfigChannel+0x23c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a10      	ldr	r2, [pc, #64]	@ (80019ec <HAL_ADC_ConfigChannel+0x240>)
 80019ac:	fba2 2303 	umull	r2, r3, r2, r3
 80019b0:	0c9a      	lsrs	r2, r3, #18
 80019b2:	4613      	mov	r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	4413      	add	r3, r2
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80019bc:	e002      	b.n	80019c4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	3b01      	subs	r3, #1
 80019c2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1f9      	bne.n	80019be <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	40012300 	.word	0x40012300
 80019e4:	40012000 	.word	0x40012000
 80019e8:	20000100 	.word	0x20000100
 80019ec:	431bde83 	.word	0x431bde83

080019f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019f8:	4b79      	ldr	r3, [pc, #484]	@ (8001be0 <ADC_Init+0x1f0>)
 80019fa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	431a      	orrs	r2, r3
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	685a      	ldr	r2, [r3, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	6859      	ldr	r1, [r3, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	021a      	lsls	r2, r3, #8
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	430a      	orrs	r2, r1
 8001a38:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001a48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	6859      	ldr	r1, [r3, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	689a      	ldr	r2, [r3, #8]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6899      	ldr	r1, [r3, #8]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68da      	ldr	r2, [r3, #12]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a82:	4a58      	ldr	r2, [pc, #352]	@ (8001be4 <ADC_Init+0x1f4>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d022      	beq.n	8001ace <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	689a      	ldr	r2, [r3, #8]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001a96:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6899      	ldr	r1, [r3, #8]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001ab8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	6899      	ldr	r1, [r3, #8]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	e00f      	b.n	8001aee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001adc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001aec:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 0202 	bic.w	r2, r2, #2
 8001afc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	6899      	ldr	r1, [r3, #8]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	7e1b      	ldrb	r3, [r3, #24]
 8001b08:	005a      	lsls	r2, r3, #1
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d01b      	beq.n	8001b54 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	685a      	ldr	r2, [r3, #4]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b2a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001b3a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6859      	ldr	r1, [r3, #4]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b46:	3b01      	subs	r3, #1
 8001b48:	035a      	lsls	r2, r3, #13
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	e007      	b.n	8001b64 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	685a      	ldr	r2, [r3, #4]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b62:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001b72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	051a      	lsls	r2, r3, #20
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	430a      	orrs	r2, r1
 8001b88:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001b98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6899      	ldr	r1, [r3, #8]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001ba6:	025a      	lsls	r2, r3, #9
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	430a      	orrs	r2, r1
 8001bae:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	689a      	ldr	r2, [r3, #8]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001bbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6899      	ldr	r1, [r3, #8]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	029a      	lsls	r2, r3, #10
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	609a      	str	r2, [r3, #8]
}
 8001bd4:	bf00      	nop
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	40012300 	.word	0x40012300
 8001be4:	0f000001 	.word	0x0f000001

08001be8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bf4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfa:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d13c      	bne.n	8001c7c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c06:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d12b      	bne.n	8001c74 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d127      	bne.n	8001c74 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c2a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d006      	beq.n	8001c40 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d119      	bne.n	8001c74 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 0220 	bic.w	r2, r2, #32
 8001c4e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d105      	bne.n	8001c74 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6c:	f043 0201 	orr.w	r2, r3, #1
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c74:	68f8      	ldr	r0, [r7, #12]
 8001c76:	f7ff f9a9 	bl	8000fcc <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001c7a:	e00e      	b.n	8001c9a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c80:	f003 0310 	and.w	r3, r3, #16
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d003      	beq.n	8001c90 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	f7ff fd85 	bl	8001798 <HAL_ADC_ErrorCallback>
}
 8001c8e:	e004      	b.n	8001c9a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	4798      	blx	r3
}
 8001c9a:	bf00      	nop
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b084      	sub	sp, #16
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cae:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	f7ff fd67 	bl	8001784 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001cb6:	bf00      	nop
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b084      	sub	sp, #16
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cca:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2240      	movs	r2, #64	@ 0x40
 8001cd0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd6:	f043 0204 	orr.w	r2, r3, #4
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	f7ff fd5a 	bl	8001798 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ce4:	bf00      	nop
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d30 <__NVIC_SetPriorityGrouping+0x44>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d08:	4013      	ands	r3, r2
 8001d0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d1e:	4a04      	ldr	r2, [pc, #16]	@ (8001d30 <__NVIC_SetPriorityGrouping+0x44>)
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	60d3      	str	r3, [r2, #12]
}
 8001d24:	bf00      	nop
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d38:	4b04      	ldr	r3, [pc, #16]	@ (8001d4c <__NVIC_GetPriorityGrouping+0x18>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	0a1b      	lsrs	r3, r3, #8
 8001d3e:	f003 0307 	and.w	r3, r3, #7
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	db0b      	blt.n	8001d7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	f003 021f 	and.w	r2, r3, #31
 8001d68:	4907      	ldr	r1, [pc, #28]	@ (8001d88 <__NVIC_EnableIRQ+0x38>)
 8001d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6e:	095b      	lsrs	r3, r3, #5
 8001d70:	2001      	movs	r0, #1
 8001d72:	fa00 f202 	lsl.w	r2, r0, r2
 8001d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	e000e100 	.word	0xe000e100

08001d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	6039      	str	r1, [r7, #0]
 8001d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	db0a      	blt.n	8001db6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	490c      	ldr	r1, [pc, #48]	@ (8001dd8 <__NVIC_SetPriority+0x4c>)
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	0112      	lsls	r2, r2, #4
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	440b      	add	r3, r1
 8001db0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db4:	e00a      	b.n	8001dcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	4908      	ldr	r1, [pc, #32]	@ (8001ddc <__NVIC_SetPriority+0x50>)
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	3b04      	subs	r3, #4
 8001dc4:	0112      	lsls	r2, r2, #4
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	440b      	add	r3, r1
 8001dca:	761a      	strb	r2, [r3, #24]
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	e000e100 	.word	0xe000e100
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b089      	sub	sp, #36	@ 0x24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f1c3 0307 	rsb	r3, r3, #7
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	bf28      	it	cs
 8001dfe:	2304      	movcs	r3, #4
 8001e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3304      	adds	r3, #4
 8001e06:	2b06      	cmp	r3, #6
 8001e08:	d902      	bls.n	8001e10 <NVIC_EncodePriority+0x30>
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	3b03      	subs	r3, #3
 8001e0e:	e000      	b.n	8001e12 <NVIC_EncodePriority+0x32>
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43da      	mvns	r2, r3
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	401a      	ands	r2, r3
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e28:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e32:	43d9      	mvns	r1, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e38:	4313      	orrs	r3, r2
         );
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3724      	adds	r7, #36	@ 0x24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e58:	d301      	bcc.n	8001e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e00f      	b.n	8001e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e88 <SysTick_Config+0x40>)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e66:	210f      	movs	r1, #15
 8001e68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e6c:	f7ff ff8e 	bl	8001d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e70:	4b05      	ldr	r3, [pc, #20]	@ (8001e88 <SysTick_Config+0x40>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e76:	4b04      	ldr	r3, [pc, #16]	@ (8001e88 <SysTick_Config+0x40>)
 8001e78:	2207      	movs	r2, #7
 8001e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	e000e010 	.word	0xe000e010

08001e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f7ff ff29 	bl	8001cec <__NVIC_SetPriorityGrouping>
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b086      	sub	sp, #24
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eb4:	f7ff ff3e 	bl	8001d34 <__NVIC_GetPriorityGrouping>
 8001eb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	68b9      	ldr	r1, [r7, #8]
 8001ebe:	6978      	ldr	r0, [r7, #20]
 8001ec0:	f7ff ff8e 	bl	8001de0 <NVIC_EncodePriority>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eca:	4611      	mov	r1, r2
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff ff5d 	bl	8001d8c <__NVIC_SetPriority>
}
 8001ed2:	bf00      	nop
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff ff31 	bl	8001d50 <__NVIC_EnableIRQ>
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff ffa2 	bl	8001e48 <SysTick_Config>
 8001f04:	4603      	mov	r3, r0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f1c:	f7ff faae 	bl	800147c <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e099      	b.n	8002060 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2202      	movs	r2, #2
 8001f30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 0201 	bic.w	r2, r2, #1
 8001f4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f4c:	e00f      	b.n	8001f6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f4e:	f7ff fa95 	bl	800147c <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b05      	cmp	r3, #5
 8001f5a:	d908      	bls.n	8001f6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2220      	movs	r2, #32
 8001f60:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2203      	movs	r2, #3
 8001f66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e078      	b.n	8002060 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1e8      	bne.n	8001f4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	4b38      	ldr	r3, [pc, #224]	@ (8002068 <HAL_DMA_Init+0x158>)
 8001f88:	4013      	ands	r3, r2
 8001f8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	d107      	bne.n	8001fd8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	f023 0307 	bic.w	r3, r3, #7
 8001fee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	d117      	bne.n	8002032 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	4313      	orrs	r3, r2
 800200a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00e      	beq.n	8002032 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 fa6f 	bl	80024f8 <DMA_CheckFifoParam>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d008      	beq.n	8002032 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2240      	movs	r2, #64	@ 0x40
 8002024:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800202e:	2301      	movs	r3, #1
 8002030:	e016      	b.n	8002060 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 fa26 	bl	800248c <DMA_CalcBaseAndBitshift>
 8002040:	4603      	mov	r3, r0
 8002042:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002048:	223f      	movs	r2, #63	@ 0x3f
 800204a:	409a      	lsls	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	f010803f 	.word	0xf010803f

0800206c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
 8002078:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800207a:	2300      	movs	r3, #0
 800207c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002082:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800208a:	2b01      	cmp	r3, #1
 800208c:	d101      	bne.n	8002092 <HAL_DMA_Start_IT+0x26>
 800208e:	2302      	movs	r3, #2
 8002090:	e040      	b.n	8002114 <HAL_DMA_Start_IT+0xa8>
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d12f      	bne.n	8002106 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2202      	movs	r2, #2
 80020aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2200      	movs	r2, #0
 80020b2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	68b9      	ldr	r1, [r7, #8]
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f000 f9b8 	bl	8002430 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c4:	223f      	movs	r2, #63	@ 0x3f
 80020c6:	409a      	lsls	r2, r3
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f042 0216 	orr.w	r2, r2, #22
 80020da:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d007      	beq.n	80020f4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 0208 	orr.w	r2, r2, #8
 80020f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f042 0201 	orr.w	r2, r2, #1
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	e005      	b.n	8002112 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800210e:	2302      	movs	r3, #2
 8002110:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002112:	7dfb      	ldrb	r3, [r7, #23]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3718      	adds	r7, #24
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002124:	2300      	movs	r3, #0
 8002126:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002128:	4b8e      	ldr	r3, [pc, #568]	@ (8002364 <HAL_DMA_IRQHandler+0x248>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a8e      	ldr	r2, [pc, #568]	@ (8002368 <HAL_DMA_IRQHandler+0x24c>)
 800212e:	fba2 2303 	umull	r2, r3, r2, r3
 8002132:	0a9b      	lsrs	r3, r3, #10
 8002134:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800213a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002146:	2208      	movs	r2, #8
 8002148:	409a      	lsls	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	4013      	ands	r3, r2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d01a      	beq.n	8002188 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b00      	cmp	r3, #0
 800215e:	d013      	beq.n	8002188 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0204 	bic.w	r2, r2, #4
 800216e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002174:	2208      	movs	r2, #8
 8002176:	409a      	lsls	r2, r3
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002180:	f043 0201 	orr.w	r2, r3, #1
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800218c:	2201      	movs	r2, #1
 800218e:	409a      	lsls	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4013      	ands	r3, r2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d012      	beq.n	80021be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00b      	beq.n	80021be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021aa:	2201      	movs	r2, #1
 80021ac:	409a      	lsls	r2, r3
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021b6:	f043 0202 	orr.w	r2, r3, #2
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021c2:	2204      	movs	r2, #4
 80021c4:	409a      	lsls	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	4013      	ands	r3, r2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d012      	beq.n	80021f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00b      	beq.n	80021f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e0:	2204      	movs	r2, #4
 80021e2:	409a      	lsls	r2, r3
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ec:	f043 0204 	orr.w	r2, r3, #4
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021f8:	2210      	movs	r2, #16
 80021fa:	409a      	lsls	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	4013      	ands	r3, r2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d043      	beq.n	800228c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	2b00      	cmp	r3, #0
 8002210:	d03c      	beq.n	800228c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002216:	2210      	movs	r2, #16
 8002218:	409a      	lsls	r2, r3
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d018      	beq.n	800225e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d108      	bne.n	800224c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223e:	2b00      	cmp	r3, #0
 8002240:	d024      	beq.n	800228c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	4798      	blx	r3
 800224a:	e01f      	b.n	800228c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002250:	2b00      	cmp	r3, #0
 8002252:	d01b      	beq.n	800228c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	4798      	blx	r3
 800225c:	e016      	b.n	800228c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002268:	2b00      	cmp	r3, #0
 800226a:	d107      	bne.n	800227c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f022 0208 	bic.w	r2, r2, #8
 800227a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002290:	2220      	movs	r2, #32
 8002292:	409a      	lsls	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	4013      	ands	r3, r2
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 808f 	beq.w	80023bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0310 	and.w	r3, r3, #16
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 8087 	beq.w	80023bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022b2:	2220      	movs	r2, #32
 80022b4:	409a      	lsls	r2, r3
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b05      	cmp	r3, #5
 80022c4:	d136      	bne.n	8002334 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 0216 	bic.w	r2, r2, #22
 80022d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	695a      	ldr	r2, [r3, #20]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d103      	bne.n	80022f6 <HAL_DMA_IRQHandler+0x1da>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d007      	beq.n	8002306 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 0208 	bic.w	r2, r2, #8
 8002304:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800230a:	223f      	movs	r2, #63	@ 0x3f
 800230c:	409a      	lsls	r2, r3
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002326:	2b00      	cmp	r3, #0
 8002328:	d07e      	beq.n	8002428 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	4798      	blx	r3
        }
        return;
 8002332:	e079      	b.n	8002428 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d01d      	beq.n	800237e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10d      	bne.n	800236c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002354:	2b00      	cmp	r3, #0
 8002356:	d031      	beq.n	80023bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	4798      	blx	r3
 8002360:	e02c      	b.n	80023bc <HAL_DMA_IRQHandler+0x2a0>
 8002362:	bf00      	nop
 8002364:	20000100 	.word	0x20000100
 8002368:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002370:	2b00      	cmp	r3, #0
 8002372:	d023      	beq.n	80023bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	4798      	blx	r3
 800237c:	e01e      	b.n	80023bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002388:	2b00      	cmp	r3, #0
 800238a:	d10f      	bne.n	80023ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 0210 	bic.w	r2, r2, #16
 800239a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d003      	beq.n	80023bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d032      	beq.n	800242a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d022      	beq.n	8002416 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2205      	movs	r2, #5
 80023d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 0201 	bic.w	r2, r2, #1
 80023e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	3301      	adds	r3, #1
 80023ec:	60bb      	str	r3, [r7, #8]
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d307      	bcc.n	8002404 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f2      	bne.n	80023e8 <HAL_DMA_IRQHandler+0x2cc>
 8002402:	e000      	b.n	8002406 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002404:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2201      	movs	r2, #1
 800240a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800241a:	2b00      	cmp	r3, #0
 800241c:	d005      	beq.n	800242a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	4798      	blx	r3
 8002426:	e000      	b.n	800242a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002428:	bf00      	nop
    }
  }
}
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
 800243c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800244c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	2b40      	cmp	r3, #64	@ 0x40
 800245c:	d108      	bne.n	8002470 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800246e:	e007      	b.n	8002480 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68ba      	ldr	r2, [r7, #8]
 8002476:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	60da      	str	r2, [r3, #12]
}
 8002480:	bf00      	nop
 8002482:	3714      	adds	r7, #20
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	b2db      	uxtb	r3, r3
 800249a:	3b10      	subs	r3, #16
 800249c:	4a14      	ldr	r2, [pc, #80]	@ (80024f0 <DMA_CalcBaseAndBitshift+0x64>)
 800249e:	fba2 2303 	umull	r2, r3, r2, r3
 80024a2:	091b      	lsrs	r3, r3, #4
 80024a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024a6:	4a13      	ldr	r2, [pc, #76]	@ (80024f4 <DMA_CalcBaseAndBitshift+0x68>)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	4413      	add	r3, r2
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	461a      	mov	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2b03      	cmp	r3, #3
 80024b8:	d909      	bls.n	80024ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80024c2:	f023 0303 	bic.w	r3, r3, #3
 80024c6:	1d1a      	adds	r2, r3, #4
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	659a      	str	r2, [r3, #88]	@ 0x58
 80024cc:	e007      	b.n	80024de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80024d6:	f023 0303 	bic.w	r3, r3, #3
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3714      	adds	r7, #20
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	aaaaaaab 	.word	0xaaaaaaab
 80024f4:	0800a340 	.word	0x0800a340

080024f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002500:	2300      	movs	r3, #0
 8002502:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002508:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d11f      	bne.n	8002552 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	2b03      	cmp	r3, #3
 8002516:	d856      	bhi.n	80025c6 <DMA_CheckFifoParam+0xce>
 8002518:	a201      	add	r2, pc, #4	@ (adr r2, 8002520 <DMA_CheckFifoParam+0x28>)
 800251a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800251e:	bf00      	nop
 8002520:	08002531 	.word	0x08002531
 8002524:	08002543 	.word	0x08002543
 8002528:	08002531 	.word	0x08002531
 800252c:	080025c7 	.word	0x080025c7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002534:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d046      	beq.n	80025ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002540:	e043      	b.n	80025ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002546:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800254a:	d140      	bne.n	80025ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002550:	e03d      	b.n	80025ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800255a:	d121      	bne.n	80025a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	2b03      	cmp	r3, #3
 8002560:	d837      	bhi.n	80025d2 <DMA_CheckFifoParam+0xda>
 8002562:	a201      	add	r2, pc, #4	@ (adr r2, 8002568 <DMA_CheckFifoParam+0x70>)
 8002564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002568:	08002579 	.word	0x08002579
 800256c:	0800257f 	.word	0x0800257f
 8002570:	08002579 	.word	0x08002579
 8002574:	08002591 	.word	0x08002591
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	73fb      	strb	r3, [r7, #15]
      break;
 800257c:	e030      	b.n	80025e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002582:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d025      	beq.n	80025d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800258e:	e022      	b.n	80025d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002594:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002598:	d11f      	bne.n	80025da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800259e:	e01c      	b.n	80025da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d903      	bls.n	80025ae <DMA_CheckFifoParam+0xb6>
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	2b03      	cmp	r3, #3
 80025aa:	d003      	beq.n	80025b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025ac:	e018      	b.n	80025e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	73fb      	strb	r3, [r7, #15]
      break;
 80025b2:	e015      	b.n	80025e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00e      	beq.n	80025de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	73fb      	strb	r3, [r7, #15]
      break;
 80025c4:	e00b      	b.n	80025de <DMA_CheckFifoParam+0xe6>
      break;
 80025c6:	bf00      	nop
 80025c8:	e00a      	b.n	80025e0 <DMA_CheckFifoParam+0xe8>
      break;
 80025ca:	bf00      	nop
 80025cc:	e008      	b.n	80025e0 <DMA_CheckFifoParam+0xe8>
      break;
 80025ce:	bf00      	nop
 80025d0:	e006      	b.n	80025e0 <DMA_CheckFifoParam+0xe8>
      break;
 80025d2:	bf00      	nop
 80025d4:	e004      	b.n	80025e0 <DMA_CheckFifoParam+0xe8>
      break;
 80025d6:	bf00      	nop
 80025d8:	e002      	b.n	80025e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80025da:	bf00      	nop
 80025dc:	e000      	b.n	80025e0 <DMA_CheckFifoParam+0xe8>
      break;
 80025de:	bf00      	nop
    }
  } 
  
  return status; 
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop

080025f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b089      	sub	sp, #36	@ 0x24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025fe:	2300      	movs	r3, #0
 8002600:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002602:	2300      	movs	r3, #0
 8002604:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002606:	2300      	movs	r3, #0
 8002608:	61fb      	str	r3, [r7, #28]
 800260a:	e16b      	b.n	80028e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800260c:	2201      	movs	r2, #1
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	4013      	ands	r3, r2
 800261e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	429a      	cmp	r2, r3
 8002626:	f040 815a 	bne.w	80028de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	2b01      	cmp	r3, #1
 8002634:	d005      	beq.n	8002642 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800263e:	2b02      	cmp	r3, #2
 8002640:	d130      	bne.n	80026a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	2203      	movs	r2, #3
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43db      	mvns	r3, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4013      	ands	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	68da      	ldr	r2, [r3, #12]
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4313      	orrs	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002678:	2201      	movs	r2, #1
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	43db      	mvns	r3, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4013      	ands	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	091b      	lsrs	r3, r3, #4
 800268e:	f003 0201 	and.w	r2, r3, #1
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4313      	orrs	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f003 0303 	and.w	r3, r3, #3
 80026ac:	2b03      	cmp	r3, #3
 80026ae:	d017      	beq.n	80026e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	2203      	movs	r2, #3
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	43db      	mvns	r3, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4013      	ands	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f003 0303 	and.w	r3, r3, #3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d123      	bne.n	8002734 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	08da      	lsrs	r2, r3, #3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3208      	adds	r2, #8
 80026f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	220f      	movs	r2, #15
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	43db      	mvns	r3, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4013      	ands	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	691a      	ldr	r2, [r3, #16]
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4313      	orrs	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	08da      	lsrs	r2, r3, #3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	3208      	adds	r2, #8
 800272e:	69b9      	ldr	r1, [r7, #24]
 8002730:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	2203      	movs	r2, #3
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	43db      	mvns	r3, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4013      	ands	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f003 0203 	and.w	r2, r3, #3
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4313      	orrs	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002770:	2b00      	cmp	r3, #0
 8002772:	f000 80b4 	beq.w	80028de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	4b60      	ldr	r3, [pc, #384]	@ (80028fc <HAL_GPIO_Init+0x30c>)
 800277c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800277e:	4a5f      	ldr	r2, [pc, #380]	@ (80028fc <HAL_GPIO_Init+0x30c>)
 8002780:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002784:	6453      	str	r3, [r2, #68]	@ 0x44
 8002786:	4b5d      	ldr	r3, [pc, #372]	@ (80028fc <HAL_GPIO_Init+0x30c>)
 8002788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800278a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002792:	4a5b      	ldr	r2, [pc, #364]	@ (8002900 <HAL_GPIO_Init+0x310>)
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	089b      	lsrs	r3, r3, #2
 8002798:	3302      	adds	r3, #2
 800279a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800279e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	f003 0303 	and.w	r3, r3, #3
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	220f      	movs	r2, #15
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	43db      	mvns	r3, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4013      	ands	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a52      	ldr	r2, [pc, #328]	@ (8002904 <HAL_GPIO_Init+0x314>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d02b      	beq.n	8002816 <HAL_GPIO_Init+0x226>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a51      	ldr	r2, [pc, #324]	@ (8002908 <HAL_GPIO_Init+0x318>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d025      	beq.n	8002812 <HAL_GPIO_Init+0x222>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a50      	ldr	r2, [pc, #320]	@ (800290c <HAL_GPIO_Init+0x31c>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d01f      	beq.n	800280e <HAL_GPIO_Init+0x21e>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a4f      	ldr	r2, [pc, #316]	@ (8002910 <HAL_GPIO_Init+0x320>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d019      	beq.n	800280a <HAL_GPIO_Init+0x21a>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a4e      	ldr	r2, [pc, #312]	@ (8002914 <HAL_GPIO_Init+0x324>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d013      	beq.n	8002806 <HAL_GPIO_Init+0x216>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a4d      	ldr	r2, [pc, #308]	@ (8002918 <HAL_GPIO_Init+0x328>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d00d      	beq.n	8002802 <HAL_GPIO_Init+0x212>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a4c      	ldr	r2, [pc, #304]	@ (800291c <HAL_GPIO_Init+0x32c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d007      	beq.n	80027fe <HAL_GPIO_Init+0x20e>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a4b      	ldr	r2, [pc, #300]	@ (8002920 <HAL_GPIO_Init+0x330>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d101      	bne.n	80027fa <HAL_GPIO_Init+0x20a>
 80027f6:	2307      	movs	r3, #7
 80027f8:	e00e      	b.n	8002818 <HAL_GPIO_Init+0x228>
 80027fa:	2308      	movs	r3, #8
 80027fc:	e00c      	b.n	8002818 <HAL_GPIO_Init+0x228>
 80027fe:	2306      	movs	r3, #6
 8002800:	e00a      	b.n	8002818 <HAL_GPIO_Init+0x228>
 8002802:	2305      	movs	r3, #5
 8002804:	e008      	b.n	8002818 <HAL_GPIO_Init+0x228>
 8002806:	2304      	movs	r3, #4
 8002808:	e006      	b.n	8002818 <HAL_GPIO_Init+0x228>
 800280a:	2303      	movs	r3, #3
 800280c:	e004      	b.n	8002818 <HAL_GPIO_Init+0x228>
 800280e:	2302      	movs	r3, #2
 8002810:	e002      	b.n	8002818 <HAL_GPIO_Init+0x228>
 8002812:	2301      	movs	r3, #1
 8002814:	e000      	b.n	8002818 <HAL_GPIO_Init+0x228>
 8002816:	2300      	movs	r3, #0
 8002818:	69fa      	ldr	r2, [r7, #28]
 800281a:	f002 0203 	and.w	r2, r2, #3
 800281e:	0092      	lsls	r2, r2, #2
 8002820:	4093      	lsls	r3, r2
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4313      	orrs	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002828:	4935      	ldr	r1, [pc, #212]	@ (8002900 <HAL_GPIO_Init+0x310>)
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	089b      	lsrs	r3, r3, #2
 800282e:	3302      	adds	r3, #2
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002836:	4b3b      	ldr	r3, [pc, #236]	@ (8002924 <HAL_GPIO_Init+0x334>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	43db      	mvns	r3, r3
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	4013      	ands	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	4313      	orrs	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800285a:	4a32      	ldr	r2, [pc, #200]	@ (8002924 <HAL_GPIO_Init+0x334>)
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002860:	4b30      	ldr	r3, [pc, #192]	@ (8002924 <HAL_GPIO_Init+0x334>)
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	43db      	mvns	r3, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4013      	ands	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d003      	beq.n	8002884 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	4313      	orrs	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002884:	4a27      	ldr	r2, [pc, #156]	@ (8002924 <HAL_GPIO_Init+0x334>)
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800288a:	4b26      	ldr	r3, [pc, #152]	@ (8002924 <HAL_GPIO_Init+0x334>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	43db      	mvns	r3, r3
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4013      	ands	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028ae:	4a1d      	ldr	r2, [pc, #116]	@ (8002924 <HAL_GPIO_Init+0x334>)
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002924 <HAL_GPIO_Init+0x334>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	43db      	mvns	r3, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4013      	ands	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d003      	beq.n	80028d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028d8:	4a12      	ldr	r2, [pc, #72]	@ (8002924 <HAL_GPIO_Init+0x334>)
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	3301      	adds	r3, #1
 80028e2:	61fb      	str	r3, [r7, #28]
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	2b0f      	cmp	r3, #15
 80028e8:	f67f ae90 	bls.w	800260c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028ec:	bf00      	nop
 80028ee:	bf00      	nop
 80028f0:	3724      	adds	r7, #36	@ 0x24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	40023800 	.word	0x40023800
 8002900:	40013800 	.word	0x40013800
 8002904:	40020000 	.word	0x40020000
 8002908:	40020400 	.word	0x40020400
 800290c:	40020800 	.word	0x40020800
 8002910:	40020c00 	.word	0x40020c00
 8002914:	40021000 	.word	0x40021000
 8002918:	40021400 	.word	0x40021400
 800291c:	40021800 	.word	0x40021800
 8002920:	40021c00 	.word	0x40021c00
 8002924:	40013c00 	.word	0x40013c00

08002928 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	460b      	mov	r3, r1
 8002932:	807b      	strh	r3, [r7, #2]
 8002934:	4613      	mov	r3, r2
 8002936:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002938:	787b      	ldrb	r3, [r7, #1]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800293e:	887a      	ldrh	r2, [r7, #2]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002944:	e003      	b.n	800294e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002946:	887b      	ldrh	r3, [r7, #2]
 8002948:	041a      	lsls	r2, r3, #16
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	619a      	str	r2, [r3, #24]
}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr

0800295a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b086      	sub	sp, #24
 800295e:	af02      	add	r7, sp, #8
 8002960:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e059      	b.n	8002a20 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d106      	bne.n	800298c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f006 feda 	bl	8009740 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2203      	movs	r2, #3
 8002990:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800299a:	d102      	bne.n	80029a2 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f004 fd2b 	bl	8007402 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6818      	ldr	r0, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	7c1a      	ldrb	r2, [r3, #16]
 80029b4:	f88d 2000 	strb.w	r2, [sp]
 80029b8:	3304      	adds	r3, #4
 80029ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029bc:	f004 fcac 	bl	8007318 <USB_CoreInit>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d005      	beq.n	80029d2 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2202      	movs	r2, #2
 80029ca:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e026      	b.n	8002a20 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2101      	movs	r1, #1
 80029d8:	4618      	mov	r0, r3
 80029da:	f004 fd23 	bl	8007424 <USB_SetCurrentMode>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d005      	beq.n	80029f0 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2202      	movs	r2, #2
 80029e8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e017      	b.n	8002a20 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6818      	ldr	r0, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	7c1a      	ldrb	r2, [r3, #16]
 80029f8:	f88d 2000 	strb.w	r2, [sp]
 80029fc:	3304      	adds	r3, #4
 80029fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a00:	f004 fec6 	bl	8007790 <USB_HostInit>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d005      	beq.n	8002a16 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2202      	movs	r2, #2
 8002a0e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e004      	b.n	8002a20 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002a28:	b590      	push	{r4, r7, lr}
 8002a2a:	b08b      	sub	sp, #44	@ 0x2c
 8002a2c:	af04      	add	r7, sp, #16
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	4608      	mov	r0, r1
 8002a32:	4611      	mov	r1, r2
 8002a34:	461a      	mov	r2, r3
 8002a36:	4603      	mov	r3, r0
 8002a38:	70fb      	strb	r3, [r7, #3]
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	70bb      	strb	r3, [r7, #2]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002a42:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002a44:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d101      	bne.n	8002a54 <HAL_HCD_HC_Init+0x2c>
 8002a50:	2302      	movs	r3, #2
 8002a52:	e09d      	b.n	8002b90 <HAL_HCD_HC_Init+0x168>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002a5c:	78fa      	ldrb	r2, [r7, #3]
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	4613      	mov	r3, r2
 8002a62:	011b      	lsls	r3, r3, #4
 8002a64:	1a9b      	subs	r3, r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	3319      	adds	r3, #25
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002a70:	78fa      	ldrb	r2, [r7, #3]
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	4613      	mov	r3, r2
 8002a76:	011b      	lsls	r3, r3, #4
 8002a78:	1a9b      	subs	r3, r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	3314      	adds	r3, #20
 8002a80:	787a      	ldrb	r2, [r7, #1]
 8002a82:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002a84:	78fa      	ldrb	r2, [r7, #3]
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	011b      	lsls	r3, r3, #4
 8002a8c:	1a9b      	subs	r3, r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	440b      	add	r3, r1
 8002a92:	3315      	adds	r3, #21
 8002a94:	78fa      	ldrb	r2, [r7, #3]
 8002a96:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002a98:	78fa      	ldrb	r2, [r7, #3]
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	011b      	lsls	r3, r3, #4
 8002aa0:	1a9b      	subs	r3, r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	3326      	adds	r3, #38	@ 0x26
 8002aa8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002aac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002aae:	78fa      	ldrb	r2, [r7, #3]
 8002ab0:	78bb      	ldrb	r3, [r7, #2]
 8002ab2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ab6:	b2d8      	uxtb	r0, r3
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	4613      	mov	r3, r2
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	1a9b      	subs	r3, r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	440b      	add	r3, r1
 8002ac4:	3316      	adds	r3, #22
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002aca:	78fb      	ldrb	r3, [r7, #3]
 8002acc:	4619      	mov	r1, r3
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 fbac 	bl	800322c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002ad4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	da0a      	bge.n	8002af2 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002adc:	78fa      	ldrb	r2, [r7, #3]
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	011b      	lsls	r3, r3, #4
 8002ae4:	1a9b      	subs	r3, r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	440b      	add	r3, r1
 8002aea:	3317      	adds	r3, #23
 8002aec:	2201      	movs	r2, #1
 8002aee:	701a      	strb	r2, [r3, #0]
 8002af0:	e009      	b.n	8002b06 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002af2:	78fa      	ldrb	r2, [r7, #3]
 8002af4:	6879      	ldr	r1, [r7, #4]
 8002af6:	4613      	mov	r3, r2
 8002af8:	011b      	lsls	r3, r3, #4
 8002afa:	1a9b      	subs	r3, r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	440b      	add	r3, r1
 8002b00:	3317      	adds	r3, #23
 8002b02:	2200      	movs	r2, #0
 8002b04:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f004 ff7a 	bl	8007a04 <USB_GetHostSpeed>
 8002b10:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002b12:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d10b      	bne.n	8002b32 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002b1a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d107      	bne.n	8002b32 <HAL_HCD_HC_Init+0x10a>
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d104      	bne.n	8002b32 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	2bbc      	cmp	r3, #188	@ 0xbc
 8002b2c:	d901      	bls.n	8002b32 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002b2e:	23bc      	movs	r3, #188	@ 0xbc
 8002b30:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002b32:	78fa      	ldrb	r2, [r7, #3]
 8002b34:	6879      	ldr	r1, [r7, #4]
 8002b36:	4613      	mov	r3, r2
 8002b38:	011b      	lsls	r3, r3, #4
 8002b3a:	1a9b      	subs	r3, r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	440b      	add	r3, r1
 8002b40:	3318      	adds	r3, #24
 8002b42:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002b46:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002b48:	78fa      	ldrb	r2, [r7, #3]
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	b298      	uxth	r0, r3
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	4613      	mov	r3, r2
 8002b52:	011b      	lsls	r3, r3, #4
 8002b54:	1a9b      	subs	r3, r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	3328      	adds	r3, #40	@ 0x28
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6818      	ldr	r0, [r3, #0]
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	787c      	ldrb	r4, [r7, #1]
 8002b6a:	78ba      	ldrb	r2, [r7, #2]
 8002b6c:	78f9      	ldrb	r1, [r7, #3]
 8002b6e:	9302      	str	r3, [sp, #8]
 8002b70:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002b74:	9301      	str	r3, [sp, #4]
 8002b76:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	4623      	mov	r3, r4
 8002b7e:	f004 ff69 	bl	8007a54 <USB_HC_Init>
 8002b82:	4603      	mov	r3, r0
 8002b84:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	371c      	adds	r7, #28
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd90      	pop	{r4, r7, pc}

08002b98 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d101      	bne.n	8002bb6 <HAL_HCD_HC_Halt+0x1e>
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	e00f      	b.n	8002bd6 <HAL_HCD_HC_Halt+0x3e>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	78fa      	ldrb	r2, [r7, #3]
 8002bc4:	4611      	mov	r1, r2
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f005 fafb 	bl	80081c2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
	...

08002be0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	4608      	mov	r0, r1
 8002bea:	4611      	mov	r1, r2
 8002bec:	461a      	mov	r2, r3
 8002bee:	4603      	mov	r3, r0
 8002bf0:	70fb      	strb	r3, [r7, #3]
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	70bb      	strb	r3, [r7, #2]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002bfa:	78fa      	ldrb	r2, [r7, #3]
 8002bfc:	6879      	ldr	r1, [r7, #4]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	011b      	lsls	r3, r3, #4
 8002c02:	1a9b      	subs	r3, r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	440b      	add	r3, r1
 8002c08:	3317      	adds	r3, #23
 8002c0a:	78ba      	ldrb	r2, [r7, #2]
 8002c0c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002c0e:	78fa      	ldrb	r2, [r7, #3]
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	4613      	mov	r3, r2
 8002c14:	011b      	lsls	r3, r3, #4
 8002c16:	1a9b      	subs	r3, r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	440b      	add	r3, r1
 8002c1c:	3326      	adds	r3, #38	@ 0x26
 8002c1e:	787a      	ldrb	r2, [r7, #1]
 8002c20:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002c22:	7c3b      	ldrb	r3, [r7, #16]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d114      	bne.n	8002c52 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002c28:	78fa      	ldrb	r2, [r7, #3]
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	011b      	lsls	r3, r3, #4
 8002c30:	1a9b      	subs	r3, r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	440b      	add	r3, r1
 8002c36:	332a      	adds	r3, #42	@ 0x2a
 8002c38:	2203      	movs	r2, #3
 8002c3a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002c3c:	78fa      	ldrb	r2, [r7, #3]
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	4613      	mov	r3, r2
 8002c42:	011b      	lsls	r3, r3, #4
 8002c44:	1a9b      	subs	r3, r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	440b      	add	r3, r1
 8002c4a:	3319      	adds	r3, #25
 8002c4c:	7f3a      	ldrb	r2, [r7, #28]
 8002c4e:	701a      	strb	r2, [r3, #0]
 8002c50:	e009      	b.n	8002c66 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c52:	78fa      	ldrb	r2, [r7, #3]
 8002c54:	6879      	ldr	r1, [r7, #4]
 8002c56:	4613      	mov	r3, r2
 8002c58:	011b      	lsls	r3, r3, #4
 8002c5a:	1a9b      	subs	r3, r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	440b      	add	r3, r1
 8002c60:	332a      	adds	r3, #42	@ 0x2a
 8002c62:	2202      	movs	r2, #2
 8002c64:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002c66:	787b      	ldrb	r3, [r7, #1]
 8002c68:	2b03      	cmp	r3, #3
 8002c6a:	f200 8102 	bhi.w	8002e72 <HAL_HCD_HC_SubmitRequest+0x292>
 8002c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8002c74 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c74:	08002c85 	.word	0x08002c85
 8002c78:	08002e5d 	.word	0x08002e5d
 8002c7c:	08002d49 	.word	0x08002d49
 8002c80:	08002dd3 	.word	0x08002dd3
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002c84:	7c3b      	ldrb	r3, [r7, #16]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	f040 80f5 	bne.w	8002e76 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002c8c:	78bb      	ldrb	r3, [r7, #2]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d12d      	bne.n	8002cee <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002c92:	8b3b      	ldrh	r3, [r7, #24]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d109      	bne.n	8002cac <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002c98:	78fa      	ldrb	r2, [r7, #3]
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	011b      	lsls	r3, r3, #4
 8002ca0:	1a9b      	subs	r3, r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	333d      	adds	r3, #61	@ 0x3d
 8002ca8:	2201      	movs	r2, #1
 8002caa:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002cac:	78fa      	ldrb	r2, [r7, #3]
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	011b      	lsls	r3, r3, #4
 8002cb4:	1a9b      	subs	r3, r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	333d      	adds	r3, #61	@ 0x3d
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10a      	bne.n	8002cd8 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002cc2:	78fa      	ldrb	r2, [r7, #3]
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	011b      	lsls	r3, r3, #4
 8002cca:	1a9b      	subs	r3, r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	440b      	add	r3, r1
 8002cd0:	332a      	adds	r3, #42	@ 0x2a
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002cd6:	e0ce      	b.n	8002e76 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002cd8:	78fa      	ldrb	r2, [r7, #3]
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	011b      	lsls	r3, r3, #4
 8002ce0:	1a9b      	subs	r3, r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	332a      	adds	r3, #42	@ 0x2a
 8002ce8:	2202      	movs	r2, #2
 8002cea:	701a      	strb	r2, [r3, #0]
      break;
 8002cec:	e0c3      	b.n	8002e76 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002cee:	78fa      	ldrb	r2, [r7, #3]
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	011b      	lsls	r3, r3, #4
 8002cf6:	1a9b      	subs	r3, r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	440b      	add	r3, r1
 8002cfc:	331a      	adds	r3, #26
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	f040 80b8 	bne.w	8002e76 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002d06:	78fa      	ldrb	r2, [r7, #3]
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	011b      	lsls	r3, r3, #4
 8002d0e:	1a9b      	subs	r3, r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	440b      	add	r3, r1
 8002d14:	333c      	adds	r3, #60	@ 0x3c
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10a      	bne.n	8002d32 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d1c:	78fa      	ldrb	r2, [r7, #3]
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	4613      	mov	r3, r2
 8002d22:	011b      	lsls	r3, r3, #4
 8002d24:	1a9b      	subs	r3, r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	440b      	add	r3, r1
 8002d2a:	332a      	adds	r3, #42	@ 0x2a
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	701a      	strb	r2, [r3, #0]
      break;
 8002d30:	e0a1      	b.n	8002e76 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d32:	78fa      	ldrb	r2, [r7, #3]
 8002d34:	6879      	ldr	r1, [r7, #4]
 8002d36:	4613      	mov	r3, r2
 8002d38:	011b      	lsls	r3, r3, #4
 8002d3a:	1a9b      	subs	r3, r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	440b      	add	r3, r1
 8002d40:	332a      	adds	r3, #42	@ 0x2a
 8002d42:	2202      	movs	r2, #2
 8002d44:	701a      	strb	r2, [r3, #0]
      break;
 8002d46:	e096      	b.n	8002e76 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002d48:	78bb      	ldrb	r3, [r7, #2]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d120      	bne.n	8002d90 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002d4e:	78fa      	ldrb	r2, [r7, #3]
 8002d50:	6879      	ldr	r1, [r7, #4]
 8002d52:	4613      	mov	r3, r2
 8002d54:	011b      	lsls	r3, r3, #4
 8002d56:	1a9b      	subs	r3, r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	440b      	add	r3, r1
 8002d5c:	333d      	adds	r3, #61	@ 0x3d
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d10a      	bne.n	8002d7a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d64:	78fa      	ldrb	r2, [r7, #3]
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	011b      	lsls	r3, r3, #4
 8002d6c:	1a9b      	subs	r3, r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	332a      	adds	r3, #42	@ 0x2a
 8002d74:	2200      	movs	r2, #0
 8002d76:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002d78:	e07e      	b.n	8002e78 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d7a:	78fa      	ldrb	r2, [r7, #3]
 8002d7c:	6879      	ldr	r1, [r7, #4]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	011b      	lsls	r3, r3, #4
 8002d82:	1a9b      	subs	r3, r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	440b      	add	r3, r1
 8002d88:	332a      	adds	r3, #42	@ 0x2a
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	701a      	strb	r2, [r3, #0]
      break;
 8002d8e:	e073      	b.n	8002e78 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002d90:	78fa      	ldrb	r2, [r7, #3]
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	4613      	mov	r3, r2
 8002d96:	011b      	lsls	r3, r3, #4
 8002d98:	1a9b      	subs	r3, r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	440b      	add	r3, r1
 8002d9e:	333c      	adds	r3, #60	@ 0x3c
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10a      	bne.n	8002dbc <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002da6:	78fa      	ldrb	r2, [r7, #3]
 8002da8:	6879      	ldr	r1, [r7, #4]
 8002daa:	4613      	mov	r3, r2
 8002dac:	011b      	lsls	r3, r3, #4
 8002dae:	1a9b      	subs	r3, r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	440b      	add	r3, r1
 8002db4:	332a      	adds	r3, #42	@ 0x2a
 8002db6:	2200      	movs	r2, #0
 8002db8:	701a      	strb	r2, [r3, #0]
      break;
 8002dba:	e05d      	b.n	8002e78 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002dbc:	78fa      	ldrb	r2, [r7, #3]
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	1a9b      	subs	r3, r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	332a      	adds	r3, #42	@ 0x2a
 8002dcc:	2202      	movs	r2, #2
 8002dce:	701a      	strb	r2, [r3, #0]
      break;
 8002dd0:	e052      	b.n	8002e78 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002dd2:	78bb      	ldrb	r3, [r7, #2]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d120      	bne.n	8002e1a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002dd8:	78fa      	ldrb	r2, [r7, #3]
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	011b      	lsls	r3, r3, #4
 8002de0:	1a9b      	subs	r3, r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	333d      	adds	r3, #61	@ 0x3d
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10a      	bne.n	8002e04 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002dee:	78fa      	ldrb	r2, [r7, #3]
 8002df0:	6879      	ldr	r1, [r7, #4]
 8002df2:	4613      	mov	r3, r2
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	1a9b      	subs	r3, r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	440b      	add	r3, r1
 8002dfc:	332a      	adds	r3, #42	@ 0x2a
 8002dfe:	2200      	movs	r2, #0
 8002e00:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002e02:	e039      	b.n	8002e78 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e04:	78fa      	ldrb	r2, [r7, #3]
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	011b      	lsls	r3, r3, #4
 8002e0c:	1a9b      	subs	r3, r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	332a      	adds	r3, #42	@ 0x2a
 8002e14:	2202      	movs	r2, #2
 8002e16:	701a      	strb	r2, [r3, #0]
      break;
 8002e18:	e02e      	b.n	8002e78 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002e1a:	78fa      	ldrb	r2, [r7, #3]
 8002e1c:	6879      	ldr	r1, [r7, #4]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	011b      	lsls	r3, r3, #4
 8002e22:	1a9b      	subs	r3, r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	440b      	add	r3, r1
 8002e28:	333c      	adds	r3, #60	@ 0x3c
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10a      	bne.n	8002e46 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e30:	78fa      	ldrb	r2, [r7, #3]
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	4613      	mov	r3, r2
 8002e36:	011b      	lsls	r3, r3, #4
 8002e38:	1a9b      	subs	r3, r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	332a      	adds	r3, #42	@ 0x2a
 8002e40:	2200      	movs	r2, #0
 8002e42:	701a      	strb	r2, [r3, #0]
      break;
 8002e44:	e018      	b.n	8002e78 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e46:	78fa      	ldrb	r2, [r7, #3]
 8002e48:	6879      	ldr	r1, [r7, #4]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	011b      	lsls	r3, r3, #4
 8002e4e:	1a9b      	subs	r3, r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	440b      	add	r3, r1
 8002e54:	332a      	adds	r3, #42	@ 0x2a
 8002e56:	2202      	movs	r2, #2
 8002e58:	701a      	strb	r2, [r3, #0]
      break;
 8002e5a:	e00d      	b.n	8002e78 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e5c:	78fa      	ldrb	r2, [r7, #3]
 8002e5e:	6879      	ldr	r1, [r7, #4]
 8002e60:	4613      	mov	r3, r2
 8002e62:	011b      	lsls	r3, r3, #4
 8002e64:	1a9b      	subs	r3, r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	440b      	add	r3, r1
 8002e6a:	332a      	adds	r3, #42	@ 0x2a
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	701a      	strb	r2, [r3, #0]
      break;
 8002e70:	e002      	b.n	8002e78 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002e72:	bf00      	nop
 8002e74:	e000      	b.n	8002e78 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002e76:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002e78:	78fa      	ldrb	r2, [r7, #3]
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	011b      	lsls	r3, r3, #4
 8002e80:	1a9b      	subs	r3, r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	332c      	adds	r3, #44	@ 0x2c
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002e8c:	78fa      	ldrb	r2, [r7, #3]
 8002e8e:	8b39      	ldrh	r1, [r7, #24]
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	4613      	mov	r3, r2
 8002e94:	011b      	lsls	r3, r3, #4
 8002e96:	1a9b      	subs	r3, r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4403      	add	r3, r0
 8002e9c:	3334      	adds	r3, #52	@ 0x34
 8002e9e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002ea0:	78fa      	ldrb	r2, [r7, #3]
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	011b      	lsls	r3, r3, #4
 8002ea8:	1a9b      	subs	r3, r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	334c      	adds	r3, #76	@ 0x4c
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002eb4:	78fa      	ldrb	r2, [r7, #3]
 8002eb6:	6879      	ldr	r1, [r7, #4]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	011b      	lsls	r3, r3, #4
 8002ebc:	1a9b      	subs	r3, r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	3338      	adds	r3, #56	@ 0x38
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002ec8:	78fa      	ldrb	r2, [r7, #3]
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	011b      	lsls	r3, r3, #4
 8002ed0:	1a9b      	subs	r3, r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	3315      	adds	r3, #21
 8002ed8:	78fa      	ldrb	r2, [r7, #3]
 8002eda:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002edc:	78fa      	ldrb	r2, [r7, #3]
 8002ede:	6879      	ldr	r1, [r7, #4]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	011b      	lsls	r3, r3, #4
 8002ee4:	1a9b      	subs	r3, r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	440b      	add	r3, r1
 8002eea:	334d      	adds	r3, #77	@ 0x4d
 8002eec:	2200      	movs	r2, #0
 8002eee:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6818      	ldr	r0, [r3, #0]
 8002ef4:	78fa      	ldrb	r2, [r7, #3]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	011b      	lsls	r3, r3, #4
 8002efa:	1a9b      	subs	r3, r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	3310      	adds	r3, #16
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	4413      	add	r3, r2
 8002f04:	1d19      	adds	r1, r3, #4
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	799b      	ldrb	r3, [r3, #6]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	f004 fece 	bl	8007cac <USB_HC_StartXfer>
 8002f10:	4603      	mov	r3, r0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop

08002f1c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f004 fbec 	bl	8007710 <USB_GetMode>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	f040 80fb 	bne.w	8003136 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f004 fbaf 	bl	80076a8 <USB_ReadInterrupts>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 80f1 	beq.w	8003134 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f004 fba6 	bl	80076a8 <USB_ReadInterrupts>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f66:	d104      	bne.n	8002f72 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002f70:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f004 fb96 	bl	80076a8 <USB_ReadInterrupts>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f86:	d104      	bne.n	8002f92 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002f90:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f004 fb86 	bl	80076a8 <USB_ReadInterrupts>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002fa2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002fa6:	d104      	bne.n	8002fb2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002fb0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f004 fb76 	bl	80076a8 <USB_ReadInterrupts>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d103      	bne.n	8002fce <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2202      	movs	r2, #2
 8002fcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f004 fb68 	bl	80076a8 <USB_ReadInterrupts>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002fde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fe2:	d120      	bne.n	8003026 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002fec:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d113      	bne.n	8003026 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002ffe:	2110      	movs	r1, #16
 8003000:	6938      	ldr	r0, [r7, #16]
 8003002:	f004 fa5b 	bl	80074bc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003006:	6938      	ldr	r0, [r7, #16]
 8003008:	f004 fa8a 	bl	8007520 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	7a5b      	ldrb	r3, [r3, #9]
 8003010:	2b02      	cmp	r3, #2
 8003012:	d105      	bne.n	8003020 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2101      	movs	r1, #1
 800301a:	4618      	mov	r0, r3
 800301c:	f004 fc7c 	bl	8007918 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f006 fc0b 	bl	800983c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f004 fb3c 	bl	80076a8 <USB_ReadInterrupts>
 8003030:	4603      	mov	r3, r0
 8003032:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003036:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800303a:	d102      	bne.n	8003042 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f001 fd31 	bl	8004aa4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f004 fb2e 	bl	80076a8 <USB_ReadInterrupts>
 800304c:	4603      	mov	r3, r0
 800304e:	f003 0308 	and.w	r3, r3, #8
 8003052:	2b08      	cmp	r3, #8
 8003054:	d106      	bne.n	8003064 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f006 fbd4 	bl	8009804 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2208      	movs	r2, #8
 8003062:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4618      	mov	r0, r3
 800306a:	f004 fb1d 	bl	80076a8 <USB_ReadInterrupts>
 800306e:	4603      	mov	r3, r0
 8003070:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003074:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003078:	d139      	bne.n	80030ee <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f005 f88e 	bl	80081a0 <USB_HC_ReadInterrupt>
 8003084:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003086:	2300      	movs	r3, #0
 8003088:	617b      	str	r3, [r7, #20]
 800308a:	e025      	b.n	80030d8 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	f003 030f 	and.w	r3, r3, #15
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	fa22 f303 	lsr.w	r3, r2, r3
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	2b00      	cmp	r3, #0
 800309e:	d018      	beq.n	80030d2 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	015a      	lsls	r2, r3, #5
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4413      	add	r3, r2
 80030a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030b6:	d106      	bne.n	80030c6 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	4619      	mov	r1, r3
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f8e9 	bl	8003296 <HCD_HC_IN_IRQHandler>
 80030c4:	e005      	b.n	80030d2 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	4619      	mov	r1, r3
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 ff4b 	bl	8003f68 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	3301      	adds	r3, #1
 80030d6:	617b      	str	r3, [r7, #20]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	795b      	ldrb	r3, [r3, #5]
 80030dc:	461a      	mov	r2, r3
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d3d3      	bcc.n	800308c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f004 fad8 	bl	80076a8 <USB_ReadInterrupts>
 80030f8:	4603      	mov	r3, r0
 80030fa:	f003 0310 	and.w	r3, r3, #16
 80030fe:	2b10      	cmp	r3, #16
 8003100:	d101      	bne.n	8003106 <HAL_HCD_IRQHandler+0x1ea>
 8003102:	2301      	movs	r3, #1
 8003104:	e000      	b.n	8003108 <HAL_HCD_IRQHandler+0x1ec>
 8003106:	2300      	movs	r3, #0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d014      	beq.n	8003136 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	699a      	ldr	r2, [r3, #24]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 0210 	bic.w	r2, r2, #16
 800311a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f001 fbe2 	bl	80048e6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	699a      	ldr	r2, [r3, #24]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f042 0210 	orr.w	r2, r2, #16
 8003130:	619a      	str	r2, [r3, #24]
 8003132:	e000      	b.n	8003136 <HAL_HCD_IRQHandler+0x21a>
      return;
 8003134:	bf00      	nop
    }
  }
}
 8003136:	3718      	adds	r7, #24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800314a:	2b01      	cmp	r3, #1
 800314c:	d101      	bne.n	8003152 <HAL_HCD_Start+0x16>
 800314e:	2302      	movs	r3, #2
 8003150:	e013      	b.n	800317a <HAL_HCD_Start+0x3e>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2101      	movs	r1, #1
 8003160:	4618      	mov	r0, r3
 8003162:	f004 fc16 	bl	8007992 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4618      	mov	r0, r3
 800316c:	f004 f938 	bl	80073e0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b082      	sub	sp, #8
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003190:	2b01      	cmp	r3, #1
 8003192:	d101      	bne.n	8003198 <HAL_HCD_Stop+0x16>
 8003194:	2302      	movs	r3, #2
 8003196:	e00d      	b.n	80031b4 <HAL_HCD_Stop+0x32>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f005 f969 	bl	800847c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3708      	adds	r7, #8
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	460b      	mov	r3, r1
 80031c6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80031c8:	78fa      	ldrb	r2, [r7, #3]
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	4613      	mov	r3, r2
 80031ce:	011b      	lsls	r3, r3, #4
 80031d0:	1a9b      	subs	r3, r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	334c      	adds	r3, #76	@ 0x4c
 80031d8:	781b      	ldrb	r3, [r3, #0]
}
 80031da:	4618      	mov	r0, r3
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
 80031ee:	460b      	mov	r3, r1
 80031f0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80031f2:	78fa      	ldrb	r2, [r7, #3]
 80031f4:	6879      	ldr	r1, [r7, #4]
 80031f6:	4613      	mov	r3, r2
 80031f8:	011b      	lsls	r3, r3, #4
 80031fa:	1a9b      	subs	r3, r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	440b      	add	r3, r1
 8003200:	3338      	adds	r3, #56	@ 0x38
 8003202:	681b      	ldr	r3, [r3, #0]
}
 8003204:	4618      	mov	r0, r3
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4618      	mov	r0, r3
 800321e:	f004 fc08 	bl	8007a32 <USB_GetCurrentFrame>
 8003222:	4603      	mov	r3, r0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	460b      	mov	r3, r1
 8003236:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003238:	78fa      	ldrb	r2, [r7, #3]
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	4613      	mov	r3, r2
 800323e:	011b      	lsls	r3, r3, #4
 8003240:	1a9b      	subs	r3, r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	331a      	adds	r3, #26
 8003248:	2200      	movs	r2, #0
 800324a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 800324c:	78fa      	ldrb	r2, [r7, #3]
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	4613      	mov	r3, r2
 8003252:	011b      	lsls	r3, r3, #4
 8003254:	1a9b      	subs	r3, r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	331b      	adds	r3, #27
 800325c:	2200      	movs	r2, #0
 800325e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003260:	78fa      	ldrb	r2, [r7, #3]
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	4613      	mov	r3, r2
 8003266:	011b      	lsls	r3, r3, #4
 8003268:	1a9b      	subs	r3, r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	440b      	add	r3, r1
 800326e:	3325      	adds	r3, #37	@ 0x25
 8003270:	2200      	movs	r2, #0
 8003272:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003274:	78fa      	ldrb	r2, [r7, #3]
 8003276:	6879      	ldr	r1, [r7, #4]
 8003278:	4613      	mov	r3, r2
 800327a:	011b      	lsls	r3, r3, #4
 800327c:	1a9b      	subs	r3, r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	440b      	add	r3, r1
 8003282:	3324      	adds	r3, #36	@ 0x24
 8003284:	2200      	movs	r2, #0
 8003286:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b086      	sub	sp, #24
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
 800329e:	460b      	mov	r3, r1
 80032a0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	78fa      	ldrb	r2, [r7, #3]
 80032b2:	4611      	mov	r1, r2
 80032b4:	4618      	mov	r0, r3
 80032b6:	f004 fa0a 	bl	80076ce <USB_ReadChInterrupts>
 80032ba:	4603      	mov	r3, r0
 80032bc:	f003 0304 	and.w	r3, r3, #4
 80032c0:	2b04      	cmp	r3, #4
 80032c2:	d11a      	bne.n	80032fa <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80032c4:	78fb      	ldrb	r3, [r7, #3]
 80032c6:	015a      	lsls	r2, r3, #5
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	4413      	add	r3, r2
 80032cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032d0:	461a      	mov	r2, r3
 80032d2:	2304      	movs	r3, #4
 80032d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80032d6:	78fa      	ldrb	r2, [r7, #3]
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	1a9b      	subs	r3, r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	440b      	add	r3, r1
 80032e4:	334d      	adds	r3, #77	@ 0x4d
 80032e6:	2207      	movs	r2, #7
 80032e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	78fa      	ldrb	r2, [r7, #3]
 80032f0:	4611      	mov	r1, r2
 80032f2:	4618      	mov	r0, r3
 80032f4:	f004 ff65 	bl	80081c2 <USB_HC_Halt>
 80032f8:	e09e      	b.n	8003438 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	78fa      	ldrb	r2, [r7, #3]
 8003300:	4611      	mov	r1, r2
 8003302:	4618      	mov	r0, r3
 8003304:	f004 f9e3 	bl	80076ce <USB_ReadChInterrupts>
 8003308:	4603      	mov	r3, r0
 800330a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800330e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003312:	d11b      	bne.n	800334c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003314:	78fb      	ldrb	r3, [r7, #3]
 8003316:	015a      	lsls	r2, r3, #5
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	4413      	add	r3, r2
 800331c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003320:	461a      	mov	r2, r3
 8003322:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003326:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003328:	78fa      	ldrb	r2, [r7, #3]
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	4613      	mov	r3, r2
 800332e:	011b      	lsls	r3, r3, #4
 8003330:	1a9b      	subs	r3, r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	440b      	add	r3, r1
 8003336:	334d      	adds	r3, #77	@ 0x4d
 8003338:	2208      	movs	r2, #8
 800333a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	78fa      	ldrb	r2, [r7, #3]
 8003342:	4611      	mov	r1, r2
 8003344:	4618      	mov	r0, r3
 8003346:	f004 ff3c 	bl	80081c2 <USB_HC_Halt>
 800334a:	e075      	b.n	8003438 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	78fa      	ldrb	r2, [r7, #3]
 8003352:	4611      	mov	r1, r2
 8003354:	4618      	mov	r0, r3
 8003356:	f004 f9ba 	bl	80076ce <USB_ReadChInterrupts>
 800335a:	4603      	mov	r3, r0
 800335c:	f003 0308 	and.w	r3, r3, #8
 8003360:	2b08      	cmp	r3, #8
 8003362:	d11a      	bne.n	800339a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003364:	78fb      	ldrb	r3, [r7, #3]
 8003366:	015a      	lsls	r2, r3, #5
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	4413      	add	r3, r2
 800336c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003370:	461a      	mov	r2, r3
 8003372:	2308      	movs	r3, #8
 8003374:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003376:	78fa      	ldrb	r2, [r7, #3]
 8003378:	6879      	ldr	r1, [r7, #4]
 800337a:	4613      	mov	r3, r2
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	1a9b      	subs	r3, r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	440b      	add	r3, r1
 8003384:	334d      	adds	r3, #77	@ 0x4d
 8003386:	2206      	movs	r2, #6
 8003388:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	78fa      	ldrb	r2, [r7, #3]
 8003390:	4611      	mov	r1, r2
 8003392:	4618      	mov	r0, r3
 8003394:	f004 ff15 	bl	80081c2 <USB_HC_Halt>
 8003398:	e04e      	b.n	8003438 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	78fa      	ldrb	r2, [r7, #3]
 80033a0:	4611      	mov	r1, r2
 80033a2:	4618      	mov	r0, r3
 80033a4:	f004 f993 	bl	80076ce <USB_ReadChInterrupts>
 80033a8:	4603      	mov	r3, r0
 80033aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033b2:	d11b      	bne.n	80033ec <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80033b4:	78fb      	ldrb	r3, [r7, #3]
 80033b6:	015a      	lsls	r2, r3, #5
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	4413      	add	r3, r2
 80033bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033c0:	461a      	mov	r2, r3
 80033c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80033c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80033c8:	78fa      	ldrb	r2, [r7, #3]
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	4613      	mov	r3, r2
 80033ce:	011b      	lsls	r3, r3, #4
 80033d0:	1a9b      	subs	r3, r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	440b      	add	r3, r1
 80033d6:	334d      	adds	r3, #77	@ 0x4d
 80033d8:	2209      	movs	r2, #9
 80033da:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	78fa      	ldrb	r2, [r7, #3]
 80033e2:	4611      	mov	r1, r2
 80033e4:	4618      	mov	r0, r3
 80033e6:	f004 feec 	bl	80081c2 <USB_HC_Halt>
 80033ea:	e025      	b.n	8003438 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	78fa      	ldrb	r2, [r7, #3]
 80033f2:	4611      	mov	r1, r2
 80033f4:	4618      	mov	r0, r3
 80033f6:	f004 f96a 	bl	80076ce <USB_ReadChInterrupts>
 80033fa:	4603      	mov	r3, r0
 80033fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003400:	2b80      	cmp	r3, #128	@ 0x80
 8003402:	d119      	bne.n	8003438 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003404:	78fb      	ldrb	r3, [r7, #3]
 8003406:	015a      	lsls	r2, r3, #5
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	4413      	add	r3, r2
 800340c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003410:	461a      	mov	r2, r3
 8003412:	2380      	movs	r3, #128	@ 0x80
 8003414:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003416:	78fa      	ldrb	r2, [r7, #3]
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	4613      	mov	r3, r2
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	1a9b      	subs	r3, r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	440b      	add	r3, r1
 8003424:	334d      	adds	r3, #77	@ 0x4d
 8003426:	2207      	movs	r2, #7
 8003428:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	78fa      	ldrb	r2, [r7, #3]
 8003430:	4611      	mov	r1, r2
 8003432:	4618      	mov	r0, r3
 8003434:	f004 fec5 	bl	80081c2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	78fa      	ldrb	r2, [r7, #3]
 800343e:	4611      	mov	r1, r2
 8003440:	4618      	mov	r0, r3
 8003442:	f004 f944 	bl	80076ce <USB_ReadChInterrupts>
 8003446:	4603      	mov	r3, r0
 8003448:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800344c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003450:	d112      	bne.n	8003478 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	78fa      	ldrb	r2, [r7, #3]
 8003458:	4611      	mov	r1, r2
 800345a:	4618      	mov	r0, r3
 800345c:	f004 feb1 	bl	80081c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003460:	78fb      	ldrb	r3, [r7, #3]
 8003462:	015a      	lsls	r2, r3, #5
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	4413      	add	r3, r2
 8003468:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800346c:	461a      	mov	r2, r3
 800346e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003472:	6093      	str	r3, [r2, #8]
 8003474:	f000 bd75 	b.w	8003f62 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	78fa      	ldrb	r2, [r7, #3]
 800347e:	4611      	mov	r1, r2
 8003480:	4618      	mov	r0, r3
 8003482:	f004 f924 	bl	80076ce <USB_ReadChInterrupts>
 8003486:	4603      	mov	r3, r0
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	2b01      	cmp	r3, #1
 800348e:	f040 8128 	bne.w	80036e2 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003492:	78fb      	ldrb	r3, [r7, #3]
 8003494:	015a      	lsls	r2, r3, #5
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	4413      	add	r3, r2
 800349a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800349e:	461a      	mov	r2, r3
 80034a0:	2320      	movs	r3, #32
 80034a2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80034a4:	78fa      	ldrb	r2, [r7, #3]
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	4613      	mov	r3, r2
 80034aa:	011b      	lsls	r3, r3, #4
 80034ac:	1a9b      	subs	r3, r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	331b      	adds	r3, #27
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d119      	bne.n	80034ee <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80034ba:	78fa      	ldrb	r2, [r7, #3]
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	4613      	mov	r3, r2
 80034c0:	011b      	lsls	r3, r3, #4
 80034c2:	1a9b      	subs	r3, r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	331b      	adds	r3, #27
 80034ca:	2200      	movs	r2, #0
 80034cc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80034ce:	78fb      	ldrb	r3, [r7, #3]
 80034d0:	015a      	lsls	r2, r3, #5
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	4413      	add	r3, r2
 80034d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	78fa      	ldrb	r2, [r7, #3]
 80034de:	0151      	lsls	r1, r2, #5
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	440a      	add	r2, r1
 80034e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80034e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034ec:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	799b      	ldrb	r3, [r3, #6]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d01b      	beq.n	800352e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80034f6:	78fa      	ldrb	r2, [r7, #3]
 80034f8:	6879      	ldr	r1, [r7, #4]
 80034fa:	4613      	mov	r3, r2
 80034fc:	011b      	lsls	r3, r3, #4
 80034fe:	1a9b      	subs	r3, r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	440b      	add	r3, r1
 8003504:	3330      	adds	r3, #48	@ 0x30
 8003506:	6819      	ldr	r1, [r3, #0]
 8003508:	78fb      	ldrb	r3, [r7, #3]
 800350a:	015a      	lsls	r2, r3, #5
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	4413      	add	r3, r2
 8003510:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800351a:	78fa      	ldrb	r2, [r7, #3]
 800351c:	1ac9      	subs	r1, r1, r3
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	4613      	mov	r3, r2
 8003522:	011b      	lsls	r3, r3, #4
 8003524:	1a9b      	subs	r3, r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4403      	add	r3, r0
 800352a:	3338      	adds	r3, #56	@ 0x38
 800352c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800352e:	78fa      	ldrb	r2, [r7, #3]
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	4613      	mov	r3, r2
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	1a9b      	subs	r3, r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	440b      	add	r3, r1
 800353c:	334d      	adds	r3, #77	@ 0x4d
 800353e:	2201      	movs	r2, #1
 8003540:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003542:	78fa      	ldrb	r2, [r7, #3]
 8003544:	6879      	ldr	r1, [r7, #4]
 8003546:	4613      	mov	r3, r2
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	1a9b      	subs	r3, r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	440b      	add	r3, r1
 8003550:	3344      	adds	r3, #68	@ 0x44
 8003552:	2200      	movs	r2, #0
 8003554:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003556:	78fb      	ldrb	r3, [r7, #3]
 8003558:	015a      	lsls	r2, r3, #5
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	4413      	add	r3, r2
 800355e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003562:	461a      	mov	r2, r3
 8003564:	2301      	movs	r3, #1
 8003566:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003568:	78fa      	ldrb	r2, [r7, #3]
 800356a:	6879      	ldr	r1, [r7, #4]
 800356c:	4613      	mov	r3, r2
 800356e:	011b      	lsls	r3, r3, #4
 8003570:	1a9b      	subs	r3, r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	3326      	adds	r3, #38	@ 0x26
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00a      	beq.n	8003594 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800357e:	78fa      	ldrb	r2, [r7, #3]
 8003580:	6879      	ldr	r1, [r7, #4]
 8003582:	4613      	mov	r3, r2
 8003584:	011b      	lsls	r3, r3, #4
 8003586:	1a9b      	subs	r3, r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	440b      	add	r3, r1
 800358c:	3326      	adds	r3, #38	@ 0x26
 800358e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003590:	2b02      	cmp	r3, #2
 8003592:	d110      	bne.n	80035b6 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	78fa      	ldrb	r2, [r7, #3]
 800359a:	4611      	mov	r1, r2
 800359c:	4618      	mov	r0, r3
 800359e:	f004 fe10 	bl	80081c2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80035a2:	78fb      	ldrb	r3, [r7, #3]
 80035a4:	015a      	lsls	r2, r3, #5
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	4413      	add	r3, r2
 80035aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035ae:	461a      	mov	r2, r3
 80035b0:	2310      	movs	r3, #16
 80035b2:	6093      	str	r3, [r2, #8]
 80035b4:	e03d      	b.n	8003632 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80035b6:	78fa      	ldrb	r2, [r7, #3]
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	4613      	mov	r3, r2
 80035bc:	011b      	lsls	r3, r3, #4
 80035be:	1a9b      	subs	r3, r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	440b      	add	r3, r1
 80035c4:	3326      	adds	r3, #38	@ 0x26
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	2b03      	cmp	r3, #3
 80035ca:	d00a      	beq.n	80035e2 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80035cc:	78fa      	ldrb	r2, [r7, #3]
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	4613      	mov	r3, r2
 80035d2:	011b      	lsls	r3, r3, #4
 80035d4:	1a9b      	subs	r3, r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	3326      	adds	r3, #38	@ 0x26
 80035dc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d127      	bne.n	8003632 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80035e2:	78fb      	ldrb	r3, [r7, #3]
 80035e4:	015a      	lsls	r2, r3, #5
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	4413      	add	r3, r2
 80035ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	78fa      	ldrb	r2, [r7, #3]
 80035f2:	0151      	lsls	r1, r2, #5
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	440a      	add	r2, r1
 80035f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80035fc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003600:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003602:	78fa      	ldrb	r2, [r7, #3]
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	4613      	mov	r3, r2
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	1a9b      	subs	r3, r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	440b      	add	r3, r1
 8003610:	334c      	adds	r3, #76	@ 0x4c
 8003612:	2201      	movs	r2, #1
 8003614:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003616:	78fa      	ldrb	r2, [r7, #3]
 8003618:	6879      	ldr	r1, [r7, #4]
 800361a:	4613      	mov	r3, r2
 800361c:	011b      	lsls	r3, r3, #4
 800361e:	1a9b      	subs	r3, r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	440b      	add	r3, r1
 8003624:	334c      	adds	r3, #76	@ 0x4c
 8003626:	781a      	ldrb	r2, [r3, #0]
 8003628:	78fb      	ldrb	r3, [r7, #3]
 800362a:	4619      	mov	r1, r3
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f006 f913 	bl	8009858 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	799b      	ldrb	r3, [r3, #6]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d13b      	bne.n	80036b2 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800363a:	78fa      	ldrb	r2, [r7, #3]
 800363c:	6879      	ldr	r1, [r7, #4]
 800363e:	4613      	mov	r3, r2
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	1a9b      	subs	r3, r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	440b      	add	r3, r1
 8003648:	3338      	adds	r3, #56	@ 0x38
 800364a:	6819      	ldr	r1, [r3, #0]
 800364c:	78fa      	ldrb	r2, [r7, #3]
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	4613      	mov	r3, r2
 8003652:	011b      	lsls	r3, r3, #4
 8003654:	1a9b      	subs	r3, r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4403      	add	r3, r0
 800365a:	3328      	adds	r3, #40	@ 0x28
 800365c:	881b      	ldrh	r3, [r3, #0]
 800365e:	440b      	add	r3, r1
 8003660:	1e59      	subs	r1, r3, #1
 8003662:	78fa      	ldrb	r2, [r7, #3]
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	4613      	mov	r3, r2
 8003668:	011b      	lsls	r3, r3, #4
 800366a:	1a9b      	subs	r3, r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	4403      	add	r3, r0
 8003670:	3328      	adds	r3, #40	@ 0x28
 8003672:	881b      	ldrh	r3, [r3, #0]
 8003674:	fbb1 f3f3 	udiv	r3, r1, r3
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 8470 	beq.w	8003f62 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003682:	78fa      	ldrb	r2, [r7, #3]
 8003684:	6879      	ldr	r1, [r7, #4]
 8003686:	4613      	mov	r3, r2
 8003688:	011b      	lsls	r3, r3, #4
 800368a:	1a9b      	subs	r3, r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	440b      	add	r3, r1
 8003690:	333c      	adds	r3, #60	@ 0x3c
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	78fa      	ldrb	r2, [r7, #3]
 8003696:	f083 0301 	eor.w	r3, r3, #1
 800369a:	b2d8      	uxtb	r0, r3
 800369c:	6879      	ldr	r1, [r7, #4]
 800369e:	4613      	mov	r3, r2
 80036a0:	011b      	lsls	r3, r3, #4
 80036a2:	1a9b      	subs	r3, r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	440b      	add	r3, r1
 80036a8:	333c      	adds	r3, #60	@ 0x3c
 80036aa:	4602      	mov	r2, r0
 80036ac:	701a      	strb	r2, [r3, #0]
 80036ae:	f000 bc58 	b.w	8003f62 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80036b2:	78fa      	ldrb	r2, [r7, #3]
 80036b4:	6879      	ldr	r1, [r7, #4]
 80036b6:	4613      	mov	r3, r2
 80036b8:	011b      	lsls	r3, r3, #4
 80036ba:	1a9b      	subs	r3, r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	440b      	add	r3, r1
 80036c0:	333c      	adds	r3, #60	@ 0x3c
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	78fa      	ldrb	r2, [r7, #3]
 80036c6:	f083 0301 	eor.w	r3, r3, #1
 80036ca:	b2d8      	uxtb	r0, r3
 80036cc:	6879      	ldr	r1, [r7, #4]
 80036ce:	4613      	mov	r3, r2
 80036d0:	011b      	lsls	r3, r3, #4
 80036d2:	1a9b      	subs	r3, r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	440b      	add	r3, r1
 80036d8:	333c      	adds	r3, #60	@ 0x3c
 80036da:	4602      	mov	r2, r0
 80036dc:	701a      	strb	r2, [r3, #0]
 80036de:	f000 bc40 	b.w	8003f62 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	78fa      	ldrb	r2, [r7, #3]
 80036e8:	4611      	mov	r1, r2
 80036ea:	4618      	mov	r0, r3
 80036ec:	f003 ffef 	bl	80076ce <USB_ReadChInterrupts>
 80036f0:	4603      	mov	r3, r0
 80036f2:	f003 0320 	and.w	r3, r3, #32
 80036f6:	2b20      	cmp	r3, #32
 80036f8:	d131      	bne.n	800375e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80036fa:	78fb      	ldrb	r3, [r7, #3]
 80036fc:	015a      	lsls	r2, r3, #5
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	4413      	add	r3, r2
 8003702:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003706:	461a      	mov	r2, r3
 8003708:	2320      	movs	r3, #32
 800370a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800370c:	78fa      	ldrb	r2, [r7, #3]
 800370e:	6879      	ldr	r1, [r7, #4]
 8003710:	4613      	mov	r3, r2
 8003712:	011b      	lsls	r3, r3, #4
 8003714:	1a9b      	subs	r3, r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	440b      	add	r3, r1
 800371a:	331a      	adds	r3, #26
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	2b01      	cmp	r3, #1
 8003720:	f040 841f 	bne.w	8003f62 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003724:	78fa      	ldrb	r2, [r7, #3]
 8003726:	6879      	ldr	r1, [r7, #4]
 8003728:	4613      	mov	r3, r2
 800372a:	011b      	lsls	r3, r3, #4
 800372c:	1a9b      	subs	r3, r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	331b      	adds	r3, #27
 8003734:	2201      	movs	r2, #1
 8003736:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003738:	78fa      	ldrb	r2, [r7, #3]
 800373a:	6879      	ldr	r1, [r7, #4]
 800373c:	4613      	mov	r3, r2
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	1a9b      	subs	r3, r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	440b      	add	r3, r1
 8003746:	334d      	adds	r3, #77	@ 0x4d
 8003748:	2203      	movs	r2, #3
 800374a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	78fa      	ldrb	r2, [r7, #3]
 8003752:	4611      	mov	r1, r2
 8003754:	4618      	mov	r0, r3
 8003756:	f004 fd34 	bl	80081c2 <USB_HC_Halt>
 800375a:	f000 bc02 	b.w	8003f62 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	78fa      	ldrb	r2, [r7, #3]
 8003764:	4611      	mov	r1, r2
 8003766:	4618      	mov	r0, r3
 8003768:	f003 ffb1 	bl	80076ce <USB_ReadChInterrupts>
 800376c:	4603      	mov	r3, r0
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b02      	cmp	r3, #2
 8003774:	f040 8305 	bne.w	8003d82 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003778:	78fb      	ldrb	r3, [r7, #3]
 800377a:	015a      	lsls	r2, r3, #5
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	4413      	add	r3, r2
 8003780:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003784:	461a      	mov	r2, r3
 8003786:	2302      	movs	r3, #2
 8003788:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800378a:	78fa      	ldrb	r2, [r7, #3]
 800378c:	6879      	ldr	r1, [r7, #4]
 800378e:	4613      	mov	r3, r2
 8003790:	011b      	lsls	r3, r3, #4
 8003792:	1a9b      	subs	r3, r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	440b      	add	r3, r1
 8003798:	334d      	adds	r3, #77	@ 0x4d
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d114      	bne.n	80037ca <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80037a0:	78fa      	ldrb	r2, [r7, #3]
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	4613      	mov	r3, r2
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	1a9b      	subs	r3, r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	440b      	add	r3, r1
 80037ae:	334d      	adds	r3, #77	@ 0x4d
 80037b0:	2202      	movs	r2, #2
 80037b2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80037b4:	78fa      	ldrb	r2, [r7, #3]
 80037b6:	6879      	ldr	r1, [r7, #4]
 80037b8:	4613      	mov	r3, r2
 80037ba:	011b      	lsls	r3, r3, #4
 80037bc:	1a9b      	subs	r3, r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	440b      	add	r3, r1
 80037c2:	334c      	adds	r3, #76	@ 0x4c
 80037c4:	2201      	movs	r2, #1
 80037c6:	701a      	strb	r2, [r3, #0]
 80037c8:	e2cc      	b.n	8003d64 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80037ca:	78fa      	ldrb	r2, [r7, #3]
 80037cc:	6879      	ldr	r1, [r7, #4]
 80037ce:	4613      	mov	r3, r2
 80037d0:	011b      	lsls	r3, r3, #4
 80037d2:	1a9b      	subs	r3, r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	440b      	add	r3, r1
 80037d8:	334d      	adds	r3, #77	@ 0x4d
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	2b06      	cmp	r3, #6
 80037de:	d114      	bne.n	800380a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80037e0:	78fa      	ldrb	r2, [r7, #3]
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	4613      	mov	r3, r2
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	1a9b      	subs	r3, r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	334d      	adds	r3, #77	@ 0x4d
 80037f0:	2202      	movs	r2, #2
 80037f2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80037f4:	78fa      	ldrb	r2, [r7, #3]
 80037f6:	6879      	ldr	r1, [r7, #4]
 80037f8:	4613      	mov	r3, r2
 80037fa:	011b      	lsls	r3, r3, #4
 80037fc:	1a9b      	subs	r3, r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	440b      	add	r3, r1
 8003802:	334c      	adds	r3, #76	@ 0x4c
 8003804:	2205      	movs	r2, #5
 8003806:	701a      	strb	r2, [r3, #0]
 8003808:	e2ac      	b.n	8003d64 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800380a:	78fa      	ldrb	r2, [r7, #3]
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	4613      	mov	r3, r2
 8003810:	011b      	lsls	r3, r3, #4
 8003812:	1a9b      	subs	r3, r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	440b      	add	r3, r1
 8003818:	334d      	adds	r3, #77	@ 0x4d
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	2b07      	cmp	r3, #7
 800381e:	d00b      	beq.n	8003838 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003820:	78fa      	ldrb	r2, [r7, #3]
 8003822:	6879      	ldr	r1, [r7, #4]
 8003824:	4613      	mov	r3, r2
 8003826:	011b      	lsls	r3, r3, #4
 8003828:	1a9b      	subs	r3, r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	440b      	add	r3, r1
 800382e:	334d      	adds	r3, #77	@ 0x4d
 8003830:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003832:	2b09      	cmp	r3, #9
 8003834:	f040 80a6 	bne.w	8003984 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003838:	78fa      	ldrb	r2, [r7, #3]
 800383a:	6879      	ldr	r1, [r7, #4]
 800383c:	4613      	mov	r3, r2
 800383e:	011b      	lsls	r3, r3, #4
 8003840:	1a9b      	subs	r3, r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	440b      	add	r3, r1
 8003846:	334d      	adds	r3, #77	@ 0x4d
 8003848:	2202      	movs	r2, #2
 800384a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800384c:	78fa      	ldrb	r2, [r7, #3]
 800384e:	6879      	ldr	r1, [r7, #4]
 8003850:	4613      	mov	r3, r2
 8003852:	011b      	lsls	r3, r3, #4
 8003854:	1a9b      	subs	r3, r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	440b      	add	r3, r1
 800385a:	3344      	adds	r3, #68	@ 0x44
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	1c59      	adds	r1, r3, #1
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	4613      	mov	r3, r2
 8003864:	011b      	lsls	r3, r3, #4
 8003866:	1a9b      	subs	r3, r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4403      	add	r3, r0
 800386c:	3344      	adds	r3, #68	@ 0x44
 800386e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003870:	78fa      	ldrb	r2, [r7, #3]
 8003872:	6879      	ldr	r1, [r7, #4]
 8003874:	4613      	mov	r3, r2
 8003876:	011b      	lsls	r3, r3, #4
 8003878:	1a9b      	subs	r3, r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	440b      	add	r3, r1
 800387e:	3344      	adds	r3, #68	@ 0x44
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b02      	cmp	r3, #2
 8003884:	d943      	bls.n	800390e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003886:	78fa      	ldrb	r2, [r7, #3]
 8003888:	6879      	ldr	r1, [r7, #4]
 800388a:	4613      	mov	r3, r2
 800388c:	011b      	lsls	r3, r3, #4
 800388e:	1a9b      	subs	r3, r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	440b      	add	r3, r1
 8003894:	3344      	adds	r3, #68	@ 0x44
 8003896:	2200      	movs	r2, #0
 8003898:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800389a:	78fa      	ldrb	r2, [r7, #3]
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	4613      	mov	r3, r2
 80038a0:	011b      	lsls	r3, r3, #4
 80038a2:	1a9b      	subs	r3, r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	440b      	add	r3, r1
 80038a8:	331a      	adds	r3, #26
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d123      	bne.n	80038f8 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80038b0:	78fa      	ldrb	r2, [r7, #3]
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	4613      	mov	r3, r2
 80038b6:	011b      	lsls	r3, r3, #4
 80038b8:	1a9b      	subs	r3, r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	331b      	adds	r3, #27
 80038c0:	2200      	movs	r2, #0
 80038c2:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80038c4:	78fa      	ldrb	r2, [r7, #3]
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	4613      	mov	r3, r2
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	1a9b      	subs	r3, r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	331c      	adds	r3, #28
 80038d4:	2200      	movs	r2, #0
 80038d6:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80038d8:	78fb      	ldrb	r3, [r7, #3]
 80038da:	015a      	lsls	r2, r3, #5
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	4413      	add	r3, r2
 80038e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	78fa      	ldrb	r2, [r7, #3]
 80038e8:	0151      	lsls	r1, r2, #5
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	440a      	add	r2, r1
 80038ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80038f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038f6:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80038f8:	78fa      	ldrb	r2, [r7, #3]
 80038fa:	6879      	ldr	r1, [r7, #4]
 80038fc:	4613      	mov	r3, r2
 80038fe:	011b      	lsls	r3, r3, #4
 8003900:	1a9b      	subs	r3, r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	440b      	add	r3, r1
 8003906:	334c      	adds	r3, #76	@ 0x4c
 8003908:	2204      	movs	r2, #4
 800390a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800390c:	e229      	b.n	8003d62 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800390e:	78fa      	ldrb	r2, [r7, #3]
 8003910:	6879      	ldr	r1, [r7, #4]
 8003912:	4613      	mov	r3, r2
 8003914:	011b      	lsls	r3, r3, #4
 8003916:	1a9b      	subs	r3, r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	440b      	add	r3, r1
 800391c:	334c      	adds	r3, #76	@ 0x4c
 800391e:	2202      	movs	r2, #2
 8003920:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003922:	78fa      	ldrb	r2, [r7, #3]
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	4613      	mov	r3, r2
 8003928:	011b      	lsls	r3, r3, #4
 800392a:	1a9b      	subs	r3, r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	440b      	add	r3, r1
 8003930:	3326      	adds	r3, #38	@ 0x26
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00b      	beq.n	8003950 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003938:	78fa      	ldrb	r2, [r7, #3]
 800393a:	6879      	ldr	r1, [r7, #4]
 800393c:	4613      	mov	r3, r2
 800393e:	011b      	lsls	r3, r3, #4
 8003940:	1a9b      	subs	r3, r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	3326      	adds	r3, #38	@ 0x26
 8003948:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800394a:	2b02      	cmp	r3, #2
 800394c:	f040 8209 	bne.w	8003d62 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003950:	78fb      	ldrb	r3, [r7, #3]
 8003952:	015a      	lsls	r2, r3, #5
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	4413      	add	r3, r2
 8003958:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003966:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800396e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003970:	78fb      	ldrb	r3, [r7, #3]
 8003972:	015a      	lsls	r2, r3, #5
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	4413      	add	r3, r2
 8003978:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800397c:	461a      	mov	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003982:	e1ee      	b.n	8003d62 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003984:	78fa      	ldrb	r2, [r7, #3]
 8003986:	6879      	ldr	r1, [r7, #4]
 8003988:	4613      	mov	r3, r2
 800398a:	011b      	lsls	r3, r3, #4
 800398c:	1a9b      	subs	r3, r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	440b      	add	r3, r1
 8003992:	334d      	adds	r3, #77	@ 0x4d
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	2b05      	cmp	r3, #5
 8003998:	f040 80c8 	bne.w	8003b2c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800399c:	78fa      	ldrb	r2, [r7, #3]
 800399e:	6879      	ldr	r1, [r7, #4]
 80039a0:	4613      	mov	r3, r2
 80039a2:	011b      	lsls	r3, r3, #4
 80039a4:	1a9b      	subs	r3, r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	440b      	add	r3, r1
 80039aa:	334d      	adds	r3, #77	@ 0x4d
 80039ac:	2202      	movs	r2, #2
 80039ae:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80039b0:	78fa      	ldrb	r2, [r7, #3]
 80039b2:	6879      	ldr	r1, [r7, #4]
 80039b4:	4613      	mov	r3, r2
 80039b6:	011b      	lsls	r3, r3, #4
 80039b8:	1a9b      	subs	r3, r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	331b      	adds	r3, #27
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	f040 81ce 	bne.w	8003d64 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80039c8:	78fa      	ldrb	r2, [r7, #3]
 80039ca:	6879      	ldr	r1, [r7, #4]
 80039cc:	4613      	mov	r3, r2
 80039ce:	011b      	lsls	r3, r3, #4
 80039d0:	1a9b      	subs	r3, r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	440b      	add	r3, r1
 80039d6:	3326      	adds	r3, #38	@ 0x26
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	2b03      	cmp	r3, #3
 80039dc:	d16b      	bne.n	8003ab6 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80039de:	78fa      	ldrb	r2, [r7, #3]
 80039e0:	6879      	ldr	r1, [r7, #4]
 80039e2:	4613      	mov	r3, r2
 80039e4:	011b      	lsls	r3, r3, #4
 80039e6:	1a9b      	subs	r3, r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	440b      	add	r3, r1
 80039ec:	3348      	adds	r3, #72	@ 0x48
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	1c59      	adds	r1, r3, #1
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	4613      	mov	r3, r2
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	1a9b      	subs	r3, r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4403      	add	r3, r0
 80039fe:	3348      	adds	r3, #72	@ 0x48
 8003a00:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003a02:	78fa      	ldrb	r2, [r7, #3]
 8003a04:	6879      	ldr	r1, [r7, #4]
 8003a06:	4613      	mov	r3, r2
 8003a08:	011b      	lsls	r3, r3, #4
 8003a0a:	1a9b      	subs	r3, r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	440b      	add	r3, r1
 8003a10:	3348      	adds	r3, #72	@ 0x48
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d943      	bls.n	8003aa0 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003a18:	78fa      	ldrb	r2, [r7, #3]
 8003a1a:	6879      	ldr	r1, [r7, #4]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	011b      	lsls	r3, r3, #4
 8003a20:	1a9b      	subs	r3, r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	440b      	add	r3, r1
 8003a26:	3348      	adds	r3, #72	@ 0x48
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003a2c:	78fa      	ldrb	r2, [r7, #3]
 8003a2e:	6879      	ldr	r1, [r7, #4]
 8003a30:	4613      	mov	r3, r2
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	1a9b      	subs	r3, r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	440b      	add	r3, r1
 8003a3a:	331b      	adds	r3, #27
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003a40:	78fa      	ldrb	r2, [r7, #3]
 8003a42:	6879      	ldr	r1, [r7, #4]
 8003a44:	4613      	mov	r3, r2
 8003a46:	011b      	lsls	r3, r3, #4
 8003a48:	1a9b      	subs	r3, r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	3344      	adds	r3, #68	@ 0x44
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d809      	bhi.n	8003a6a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003a56:	78fa      	ldrb	r2, [r7, #3]
 8003a58:	6879      	ldr	r1, [r7, #4]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	011b      	lsls	r3, r3, #4
 8003a5e:	1a9b      	subs	r3, r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	440b      	add	r3, r1
 8003a64:	331c      	adds	r3, #28
 8003a66:	2201      	movs	r2, #1
 8003a68:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003a6a:	78fb      	ldrb	r3, [r7, #3]
 8003a6c:	015a      	lsls	r2, r3, #5
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	4413      	add	r3, r2
 8003a72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	78fa      	ldrb	r2, [r7, #3]
 8003a7a:	0151      	lsls	r1, r2, #5
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	440a      	add	r2, r1
 8003a80:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a88:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003a8a:	78fa      	ldrb	r2, [r7, #3]
 8003a8c:	6879      	ldr	r1, [r7, #4]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	011b      	lsls	r3, r3, #4
 8003a92:	1a9b      	subs	r3, r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	440b      	add	r3, r1
 8003a98:	334c      	adds	r3, #76	@ 0x4c
 8003a9a:	2204      	movs	r2, #4
 8003a9c:	701a      	strb	r2, [r3, #0]
 8003a9e:	e014      	b.n	8003aca <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003aa0:	78fa      	ldrb	r2, [r7, #3]
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	011b      	lsls	r3, r3, #4
 8003aa8:	1a9b      	subs	r3, r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	440b      	add	r3, r1
 8003aae:	334c      	adds	r3, #76	@ 0x4c
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	701a      	strb	r2, [r3, #0]
 8003ab4:	e009      	b.n	8003aca <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003ab6:	78fa      	ldrb	r2, [r7, #3]
 8003ab8:	6879      	ldr	r1, [r7, #4]
 8003aba:	4613      	mov	r3, r2
 8003abc:	011b      	lsls	r3, r3, #4
 8003abe:	1a9b      	subs	r3, r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	440b      	add	r3, r1
 8003ac4:	334c      	adds	r3, #76	@ 0x4c
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003aca:	78fa      	ldrb	r2, [r7, #3]
 8003acc:	6879      	ldr	r1, [r7, #4]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	011b      	lsls	r3, r3, #4
 8003ad2:	1a9b      	subs	r3, r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	440b      	add	r3, r1
 8003ad8:	3326      	adds	r3, #38	@ 0x26
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00b      	beq.n	8003af8 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003ae0:	78fa      	ldrb	r2, [r7, #3]
 8003ae2:	6879      	ldr	r1, [r7, #4]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	011b      	lsls	r3, r3, #4
 8003ae8:	1a9b      	subs	r3, r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	440b      	add	r3, r1
 8003aee:	3326      	adds	r3, #38	@ 0x26
 8003af0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	f040 8136 	bne.w	8003d64 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003af8:	78fb      	ldrb	r3, [r7, #3]
 8003afa:	015a      	lsls	r2, r3, #5
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	4413      	add	r3, r2
 8003b00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003b0e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003b16:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003b18:	78fb      	ldrb	r3, [r7, #3]
 8003b1a:	015a      	lsls	r2, r3, #5
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	4413      	add	r3, r2
 8003b20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b24:	461a      	mov	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6013      	str	r3, [r2, #0]
 8003b2a:	e11b      	b.n	8003d64 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003b2c:	78fa      	ldrb	r2, [r7, #3]
 8003b2e:	6879      	ldr	r1, [r7, #4]
 8003b30:	4613      	mov	r3, r2
 8003b32:	011b      	lsls	r3, r3, #4
 8003b34:	1a9b      	subs	r3, r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	440b      	add	r3, r1
 8003b3a:	334d      	adds	r3, #77	@ 0x4d
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	2b03      	cmp	r3, #3
 8003b40:	f040 8081 	bne.w	8003c46 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b44:	78fa      	ldrb	r2, [r7, #3]
 8003b46:	6879      	ldr	r1, [r7, #4]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	011b      	lsls	r3, r3, #4
 8003b4c:	1a9b      	subs	r3, r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	440b      	add	r3, r1
 8003b52:	334d      	adds	r3, #77	@ 0x4d
 8003b54:	2202      	movs	r2, #2
 8003b56:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003b58:	78fa      	ldrb	r2, [r7, #3]
 8003b5a:	6879      	ldr	r1, [r7, #4]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	011b      	lsls	r3, r3, #4
 8003b60:	1a9b      	subs	r3, r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	440b      	add	r3, r1
 8003b66:	331b      	adds	r3, #27
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	f040 80fa 	bne.w	8003d64 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b70:	78fa      	ldrb	r2, [r7, #3]
 8003b72:	6879      	ldr	r1, [r7, #4]
 8003b74:	4613      	mov	r3, r2
 8003b76:	011b      	lsls	r3, r3, #4
 8003b78:	1a9b      	subs	r3, r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	440b      	add	r3, r1
 8003b7e:	334c      	adds	r3, #76	@ 0x4c
 8003b80:	2202      	movs	r2, #2
 8003b82:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003b84:	78fb      	ldrb	r3, [r7, #3]
 8003b86:	015a      	lsls	r2, r3, #5
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	78fa      	ldrb	r2, [r7, #3]
 8003b94:	0151      	lsls	r1, r2, #5
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	440a      	add	r2, r1
 8003b9a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ba2:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003ba4:	78fb      	ldrb	r3, [r7, #3]
 8003ba6:	015a      	lsls	r2, r3, #5
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	4413      	add	r3, r2
 8003bac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	78fa      	ldrb	r2, [r7, #3]
 8003bb4:	0151      	lsls	r1, r2, #5
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	440a      	add	r2, r1
 8003bba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003bbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003bc2:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003bc4:	78fb      	ldrb	r3, [r7, #3]
 8003bc6:	015a      	lsls	r2, r3, #5
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	4413      	add	r3, r2
 8003bcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	78fa      	ldrb	r2, [r7, #3]
 8003bd4:	0151      	lsls	r1, r2, #5
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	440a      	add	r2, r1
 8003bda:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003bde:	f023 0320 	bic.w	r3, r3, #32
 8003be2:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003be4:	78fa      	ldrb	r2, [r7, #3]
 8003be6:	6879      	ldr	r1, [r7, #4]
 8003be8:	4613      	mov	r3, r2
 8003bea:	011b      	lsls	r3, r3, #4
 8003bec:	1a9b      	subs	r3, r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	440b      	add	r3, r1
 8003bf2:	3326      	adds	r3, #38	@ 0x26
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00b      	beq.n	8003c12 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003bfa:	78fa      	ldrb	r2, [r7, #3]
 8003bfc:	6879      	ldr	r1, [r7, #4]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	011b      	lsls	r3, r3, #4
 8003c02:	1a9b      	subs	r3, r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	440b      	add	r3, r1
 8003c08:	3326      	adds	r3, #38	@ 0x26
 8003c0a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	f040 80a9 	bne.w	8003d64 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003c12:	78fb      	ldrb	r3, [r7, #3]
 8003c14:	015a      	lsls	r2, r3, #5
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	4413      	add	r3, r2
 8003c1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003c28:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003c30:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003c32:	78fb      	ldrb	r3, [r7, #3]
 8003c34:	015a      	lsls	r2, r3, #5
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	4413      	add	r3, r2
 8003c3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c3e:	461a      	mov	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6013      	str	r3, [r2, #0]
 8003c44:	e08e      	b.n	8003d64 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003c46:	78fa      	ldrb	r2, [r7, #3]
 8003c48:	6879      	ldr	r1, [r7, #4]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	011b      	lsls	r3, r3, #4
 8003c4e:	1a9b      	subs	r3, r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	440b      	add	r3, r1
 8003c54:	334d      	adds	r3, #77	@ 0x4d
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	2b04      	cmp	r3, #4
 8003c5a:	d143      	bne.n	8003ce4 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c5c:	78fa      	ldrb	r2, [r7, #3]
 8003c5e:	6879      	ldr	r1, [r7, #4]
 8003c60:	4613      	mov	r3, r2
 8003c62:	011b      	lsls	r3, r3, #4
 8003c64:	1a9b      	subs	r3, r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	440b      	add	r3, r1
 8003c6a:	334d      	adds	r3, #77	@ 0x4d
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c70:	78fa      	ldrb	r2, [r7, #3]
 8003c72:	6879      	ldr	r1, [r7, #4]
 8003c74:	4613      	mov	r3, r2
 8003c76:	011b      	lsls	r3, r3, #4
 8003c78:	1a9b      	subs	r3, r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	440b      	add	r3, r1
 8003c7e:	334c      	adds	r3, #76	@ 0x4c
 8003c80:	2202      	movs	r2, #2
 8003c82:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c84:	78fa      	ldrb	r2, [r7, #3]
 8003c86:	6879      	ldr	r1, [r7, #4]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	011b      	lsls	r3, r3, #4
 8003c8c:	1a9b      	subs	r3, r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	440b      	add	r3, r1
 8003c92:	3326      	adds	r3, #38	@ 0x26
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00a      	beq.n	8003cb0 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003c9a:	78fa      	ldrb	r2, [r7, #3]
 8003c9c:	6879      	ldr	r1, [r7, #4]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	011b      	lsls	r3, r3, #4
 8003ca2:	1a9b      	subs	r3, r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	440b      	add	r3, r1
 8003ca8:	3326      	adds	r3, #38	@ 0x26
 8003caa:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d159      	bne.n	8003d64 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003cb0:	78fb      	ldrb	r3, [r7, #3]
 8003cb2:	015a      	lsls	r2, r3, #5
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003cc6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003cce:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003cd0:	78fb      	ldrb	r3, [r7, #3]
 8003cd2:	015a      	lsls	r2, r3, #5
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cdc:	461a      	mov	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6013      	str	r3, [r2, #0]
 8003ce2:	e03f      	b.n	8003d64 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003ce4:	78fa      	ldrb	r2, [r7, #3]
 8003ce6:	6879      	ldr	r1, [r7, #4]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	011b      	lsls	r3, r3, #4
 8003cec:	1a9b      	subs	r3, r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	440b      	add	r3, r1
 8003cf2:	334d      	adds	r3, #77	@ 0x4d
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	2b08      	cmp	r3, #8
 8003cf8:	d126      	bne.n	8003d48 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003cfa:	78fa      	ldrb	r2, [r7, #3]
 8003cfc:	6879      	ldr	r1, [r7, #4]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	011b      	lsls	r3, r3, #4
 8003d02:	1a9b      	subs	r3, r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	440b      	add	r3, r1
 8003d08:	334d      	adds	r3, #77	@ 0x4d
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003d0e:	78fa      	ldrb	r2, [r7, #3]
 8003d10:	6879      	ldr	r1, [r7, #4]
 8003d12:	4613      	mov	r3, r2
 8003d14:	011b      	lsls	r3, r3, #4
 8003d16:	1a9b      	subs	r3, r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	440b      	add	r3, r1
 8003d1c:	3344      	adds	r3, #68	@ 0x44
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	1c59      	adds	r1, r3, #1
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	4613      	mov	r3, r2
 8003d26:	011b      	lsls	r3, r3, #4
 8003d28:	1a9b      	subs	r3, r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	4403      	add	r3, r0
 8003d2e:	3344      	adds	r3, #68	@ 0x44
 8003d30:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003d32:	78fa      	ldrb	r2, [r7, #3]
 8003d34:	6879      	ldr	r1, [r7, #4]
 8003d36:	4613      	mov	r3, r2
 8003d38:	011b      	lsls	r3, r3, #4
 8003d3a:	1a9b      	subs	r3, r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	440b      	add	r3, r1
 8003d40:	334c      	adds	r3, #76	@ 0x4c
 8003d42:	2204      	movs	r2, #4
 8003d44:	701a      	strb	r2, [r3, #0]
 8003d46:	e00d      	b.n	8003d64 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003d48:	78fa      	ldrb	r2, [r7, #3]
 8003d4a:	6879      	ldr	r1, [r7, #4]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	011b      	lsls	r3, r3, #4
 8003d50:	1a9b      	subs	r3, r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	440b      	add	r3, r1
 8003d56:	334d      	adds	r3, #77	@ 0x4d
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	f000 8100 	beq.w	8003f60 <HCD_HC_IN_IRQHandler+0xcca>
 8003d60:	e000      	b.n	8003d64 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003d62:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003d64:	78fa      	ldrb	r2, [r7, #3]
 8003d66:	6879      	ldr	r1, [r7, #4]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	011b      	lsls	r3, r3, #4
 8003d6c:	1a9b      	subs	r3, r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	334c      	adds	r3, #76	@ 0x4c
 8003d74:	781a      	ldrb	r2, [r3, #0]
 8003d76:	78fb      	ldrb	r3, [r7, #3]
 8003d78:	4619      	mov	r1, r3
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f005 fd6c 	bl	8009858 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003d80:	e0ef      	b.n	8003f62 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	78fa      	ldrb	r2, [r7, #3]
 8003d88:	4611      	mov	r1, r2
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f003 fc9f 	bl	80076ce <USB_ReadChInterrupts>
 8003d90:	4603      	mov	r3, r0
 8003d92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d96:	2b40      	cmp	r3, #64	@ 0x40
 8003d98:	d12f      	bne.n	8003dfa <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003d9a:	78fb      	ldrb	r3, [r7, #3]
 8003d9c:	015a      	lsls	r2, r3, #5
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	4413      	add	r3, r2
 8003da2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003da6:	461a      	mov	r2, r3
 8003da8:	2340      	movs	r3, #64	@ 0x40
 8003daa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003dac:	78fa      	ldrb	r2, [r7, #3]
 8003dae:	6879      	ldr	r1, [r7, #4]
 8003db0:	4613      	mov	r3, r2
 8003db2:	011b      	lsls	r3, r3, #4
 8003db4:	1a9b      	subs	r3, r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	440b      	add	r3, r1
 8003dba:	334d      	adds	r3, #77	@ 0x4d
 8003dbc:	2205      	movs	r2, #5
 8003dbe:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003dc0:	78fa      	ldrb	r2, [r7, #3]
 8003dc2:	6879      	ldr	r1, [r7, #4]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	011b      	lsls	r3, r3, #4
 8003dc8:	1a9b      	subs	r3, r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	440b      	add	r3, r1
 8003dce:	331a      	adds	r3, #26
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d109      	bne.n	8003dea <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003dd6:	78fa      	ldrb	r2, [r7, #3]
 8003dd8:	6879      	ldr	r1, [r7, #4]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	011b      	lsls	r3, r3, #4
 8003dde:	1a9b      	subs	r3, r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	440b      	add	r3, r1
 8003de4:	3344      	adds	r3, #68	@ 0x44
 8003de6:	2200      	movs	r2, #0
 8003de8:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	78fa      	ldrb	r2, [r7, #3]
 8003df0:	4611      	mov	r1, r2
 8003df2:	4618      	mov	r0, r3
 8003df4:	f004 f9e5 	bl	80081c2 <USB_HC_Halt>
 8003df8:	e0b3      	b.n	8003f62 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	78fa      	ldrb	r2, [r7, #3]
 8003e00:	4611      	mov	r1, r2
 8003e02:	4618      	mov	r0, r3
 8003e04:	f003 fc63 	bl	80076ce <USB_ReadChInterrupts>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	f003 0310 	and.w	r3, r3, #16
 8003e0e:	2b10      	cmp	r3, #16
 8003e10:	f040 80a7 	bne.w	8003f62 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003e14:	78fa      	ldrb	r2, [r7, #3]
 8003e16:	6879      	ldr	r1, [r7, #4]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	011b      	lsls	r3, r3, #4
 8003e1c:	1a9b      	subs	r3, r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	440b      	add	r3, r1
 8003e22:	3326      	adds	r3, #38	@ 0x26
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	2b03      	cmp	r3, #3
 8003e28:	d11b      	bne.n	8003e62 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003e2a:	78fa      	ldrb	r2, [r7, #3]
 8003e2c:	6879      	ldr	r1, [r7, #4]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	011b      	lsls	r3, r3, #4
 8003e32:	1a9b      	subs	r3, r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	440b      	add	r3, r1
 8003e38:	3344      	adds	r3, #68	@ 0x44
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003e3e:	78fa      	ldrb	r2, [r7, #3]
 8003e40:	6879      	ldr	r1, [r7, #4]
 8003e42:	4613      	mov	r3, r2
 8003e44:	011b      	lsls	r3, r3, #4
 8003e46:	1a9b      	subs	r3, r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	440b      	add	r3, r1
 8003e4c:	334d      	adds	r3, #77	@ 0x4d
 8003e4e:	2204      	movs	r2, #4
 8003e50:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	78fa      	ldrb	r2, [r7, #3]
 8003e58:	4611      	mov	r1, r2
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f004 f9b1 	bl	80081c2 <USB_HC_Halt>
 8003e60:	e03f      	b.n	8003ee2 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003e62:	78fa      	ldrb	r2, [r7, #3]
 8003e64:	6879      	ldr	r1, [r7, #4]
 8003e66:	4613      	mov	r3, r2
 8003e68:	011b      	lsls	r3, r3, #4
 8003e6a:	1a9b      	subs	r3, r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	440b      	add	r3, r1
 8003e70:	3326      	adds	r3, #38	@ 0x26
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00a      	beq.n	8003e8e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003e78:	78fa      	ldrb	r2, [r7, #3]
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	011b      	lsls	r3, r3, #4
 8003e80:	1a9b      	subs	r3, r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	440b      	add	r3, r1
 8003e86:	3326      	adds	r3, #38	@ 0x26
 8003e88:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d129      	bne.n	8003ee2 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003e8e:	78fa      	ldrb	r2, [r7, #3]
 8003e90:	6879      	ldr	r1, [r7, #4]
 8003e92:	4613      	mov	r3, r2
 8003e94:	011b      	lsls	r3, r3, #4
 8003e96:	1a9b      	subs	r3, r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	440b      	add	r3, r1
 8003e9c:	3344      	adds	r3, #68	@ 0x44
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	799b      	ldrb	r3, [r3, #6]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00a      	beq.n	8003ec0 <HCD_HC_IN_IRQHandler+0xc2a>
 8003eaa:	78fa      	ldrb	r2, [r7, #3]
 8003eac:	6879      	ldr	r1, [r7, #4]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	011b      	lsls	r3, r3, #4
 8003eb2:	1a9b      	subs	r3, r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	440b      	add	r3, r1
 8003eb8:	331b      	adds	r3, #27
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d110      	bne.n	8003ee2 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003ec0:	78fa      	ldrb	r2, [r7, #3]
 8003ec2:	6879      	ldr	r1, [r7, #4]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	011b      	lsls	r3, r3, #4
 8003ec8:	1a9b      	subs	r3, r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	440b      	add	r3, r1
 8003ece:	334d      	adds	r3, #77	@ 0x4d
 8003ed0:	2204      	movs	r2, #4
 8003ed2:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	78fa      	ldrb	r2, [r7, #3]
 8003eda:	4611      	mov	r1, r2
 8003edc:	4618      	mov	r0, r3
 8003ede:	f004 f970 	bl	80081c2 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003ee2:	78fa      	ldrb	r2, [r7, #3]
 8003ee4:	6879      	ldr	r1, [r7, #4]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	011b      	lsls	r3, r3, #4
 8003eea:	1a9b      	subs	r3, r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	440b      	add	r3, r1
 8003ef0:	331b      	adds	r3, #27
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d129      	bne.n	8003f4c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003ef8:	78fa      	ldrb	r2, [r7, #3]
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	4613      	mov	r3, r2
 8003efe:	011b      	lsls	r3, r3, #4
 8003f00:	1a9b      	subs	r3, r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	331b      	adds	r3, #27
 8003f08:	2200      	movs	r2, #0
 8003f0a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003f0c:	78fb      	ldrb	r3, [r7, #3]
 8003f0e:	015a      	lsls	r2, r3, #5
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	4413      	add	r3, r2
 8003f14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	78fa      	ldrb	r2, [r7, #3]
 8003f1c:	0151      	lsls	r1, r2, #5
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	440a      	add	r2, r1
 8003f22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003f26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f2a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003f2c:	78fb      	ldrb	r3, [r7, #3]
 8003f2e:	015a      	lsls	r2, r3, #5
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	4413      	add	r3, r2
 8003f34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	78fa      	ldrb	r2, [r7, #3]
 8003f3c:	0151      	lsls	r1, r2, #5
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	440a      	add	r2, r1
 8003f42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003f46:	f043 0320 	orr.w	r3, r3, #32
 8003f4a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003f4c:	78fb      	ldrb	r3, [r7, #3]
 8003f4e:	015a      	lsls	r2, r3, #5
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	4413      	add	r3, r2
 8003f54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f58:	461a      	mov	r2, r3
 8003f5a:	2310      	movs	r3, #16
 8003f5c:	6093      	str	r3, [r2, #8]
 8003f5e:	e000      	b.n	8003f62 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003f60:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003f62:	3718      	adds	r7, #24
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b086      	sub	sp, #24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	460b      	mov	r3, r1
 8003f72:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	78fa      	ldrb	r2, [r7, #3]
 8003f84:	4611      	mov	r1, r2
 8003f86:	4618      	mov	r0, r3
 8003f88:	f003 fba1 	bl	80076ce <USB_ReadChInterrupts>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	f003 0304 	and.w	r3, r3, #4
 8003f92:	2b04      	cmp	r3, #4
 8003f94:	d11b      	bne.n	8003fce <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003f96:	78fb      	ldrb	r3, [r7, #3]
 8003f98:	015a      	lsls	r2, r3, #5
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	2304      	movs	r3, #4
 8003fa6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003fa8:	78fa      	ldrb	r2, [r7, #3]
 8003faa:	6879      	ldr	r1, [r7, #4]
 8003fac:	4613      	mov	r3, r2
 8003fae:	011b      	lsls	r3, r3, #4
 8003fb0:	1a9b      	subs	r3, r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	440b      	add	r3, r1
 8003fb6:	334d      	adds	r3, #77	@ 0x4d
 8003fb8:	2207      	movs	r2, #7
 8003fba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	78fa      	ldrb	r2, [r7, #3]
 8003fc2:	4611      	mov	r1, r2
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f004 f8fc 	bl	80081c2 <USB_HC_Halt>
 8003fca:	f000 bc89 	b.w	80048e0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	78fa      	ldrb	r2, [r7, #3]
 8003fd4:	4611      	mov	r1, r2
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f003 fb79 	bl	80076ce <USB_ReadChInterrupts>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	f003 0320 	and.w	r3, r3, #32
 8003fe2:	2b20      	cmp	r3, #32
 8003fe4:	f040 8082 	bne.w	80040ec <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003fe8:	78fb      	ldrb	r3, [r7, #3]
 8003fea:	015a      	lsls	r2, r3, #5
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	4413      	add	r3, r2
 8003ff0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	2320      	movs	r3, #32
 8003ff8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003ffa:	78fa      	ldrb	r2, [r7, #3]
 8003ffc:	6879      	ldr	r1, [r7, #4]
 8003ffe:	4613      	mov	r3, r2
 8004000:	011b      	lsls	r3, r3, #4
 8004002:	1a9b      	subs	r3, r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	440b      	add	r3, r1
 8004008:	3319      	adds	r3, #25
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d124      	bne.n	800405a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004010:	78fa      	ldrb	r2, [r7, #3]
 8004012:	6879      	ldr	r1, [r7, #4]
 8004014:	4613      	mov	r3, r2
 8004016:	011b      	lsls	r3, r3, #4
 8004018:	1a9b      	subs	r3, r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	440b      	add	r3, r1
 800401e:	3319      	adds	r3, #25
 8004020:	2200      	movs	r2, #0
 8004022:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004024:	78fa      	ldrb	r2, [r7, #3]
 8004026:	6879      	ldr	r1, [r7, #4]
 8004028:	4613      	mov	r3, r2
 800402a:	011b      	lsls	r3, r3, #4
 800402c:	1a9b      	subs	r3, r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	440b      	add	r3, r1
 8004032:	334c      	adds	r3, #76	@ 0x4c
 8004034:	2202      	movs	r2, #2
 8004036:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004038:	78fa      	ldrb	r2, [r7, #3]
 800403a:	6879      	ldr	r1, [r7, #4]
 800403c:	4613      	mov	r3, r2
 800403e:	011b      	lsls	r3, r3, #4
 8004040:	1a9b      	subs	r3, r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	440b      	add	r3, r1
 8004046:	334d      	adds	r3, #77	@ 0x4d
 8004048:	2203      	movs	r2, #3
 800404a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	78fa      	ldrb	r2, [r7, #3]
 8004052:	4611      	mov	r1, r2
 8004054:	4618      	mov	r0, r3
 8004056:	f004 f8b4 	bl	80081c2 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800405a:	78fa      	ldrb	r2, [r7, #3]
 800405c:	6879      	ldr	r1, [r7, #4]
 800405e:	4613      	mov	r3, r2
 8004060:	011b      	lsls	r3, r3, #4
 8004062:	1a9b      	subs	r3, r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	440b      	add	r3, r1
 8004068:	331a      	adds	r3, #26
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	2b01      	cmp	r3, #1
 800406e:	f040 8437 	bne.w	80048e0 <HCD_HC_OUT_IRQHandler+0x978>
 8004072:	78fa      	ldrb	r2, [r7, #3]
 8004074:	6879      	ldr	r1, [r7, #4]
 8004076:	4613      	mov	r3, r2
 8004078:	011b      	lsls	r3, r3, #4
 800407a:	1a9b      	subs	r3, r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	440b      	add	r3, r1
 8004080:	331b      	adds	r3, #27
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	f040 842b 	bne.w	80048e0 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800408a:	78fa      	ldrb	r2, [r7, #3]
 800408c:	6879      	ldr	r1, [r7, #4]
 800408e:	4613      	mov	r3, r2
 8004090:	011b      	lsls	r3, r3, #4
 8004092:	1a9b      	subs	r3, r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	440b      	add	r3, r1
 8004098:	3326      	adds	r3, #38	@ 0x26
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d009      	beq.n	80040b4 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80040a0:	78fa      	ldrb	r2, [r7, #3]
 80040a2:	6879      	ldr	r1, [r7, #4]
 80040a4:	4613      	mov	r3, r2
 80040a6:	011b      	lsls	r3, r3, #4
 80040a8:	1a9b      	subs	r3, r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	440b      	add	r3, r1
 80040ae:	331b      	adds	r3, #27
 80040b0:	2201      	movs	r2, #1
 80040b2:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80040b4:	78fa      	ldrb	r2, [r7, #3]
 80040b6:	6879      	ldr	r1, [r7, #4]
 80040b8:	4613      	mov	r3, r2
 80040ba:	011b      	lsls	r3, r3, #4
 80040bc:	1a9b      	subs	r3, r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	440b      	add	r3, r1
 80040c2:	334d      	adds	r3, #77	@ 0x4d
 80040c4:	2203      	movs	r2, #3
 80040c6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	78fa      	ldrb	r2, [r7, #3]
 80040ce:	4611      	mov	r1, r2
 80040d0:	4618      	mov	r0, r3
 80040d2:	f004 f876 	bl	80081c2 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80040d6:	78fa      	ldrb	r2, [r7, #3]
 80040d8:	6879      	ldr	r1, [r7, #4]
 80040da:	4613      	mov	r3, r2
 80040dc:	011b      	lsls	r3, r3, #4
 80040de:	1a9b      	subs	r3, r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	440b      	add	r3, r1
 80040e4:	3344      	adds	r3, #68	@ 0x44
 80040e6:	2200      	movs	r2, #0
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	e3f9      	b.n	80048e0 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	78fa      	ldrb	r2, [r7, #3]
 80040f2:	4611      	mov	r1, r2
 80040f4:	4618      	mov	r0, r3
 80040f6:	f003 faea 	bl	80076ce <USB_ReadChInterrupts>
 80040fa:	4603      	mov	r3, r0
 80040fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004100:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004104:	d111      	bne.n	800412a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004106:	78fb      	ldrb	r3, [r7, #3]
 8004108:	015a      	lsls	r2, r3, #5
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	4413      	add	r3, r2
 800410e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004112:	461a      	mov	r2, r3
 8004114:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004118:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	78fa      	ldrb	r2, [r7, #3]
 8004120:	4611      	mov	r1, r2
 8004122:	4618      	mov	r0, r3
 8004124:	f004 f84d 	bl	80081c2 <USB_HC_Halt>
 8004128:	e3da      	b.n	80048e0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	78fa      	ldrb	r2, [r7, #3]
 8004130:	4611      	mov	r1, r2
 8004132:	4618      	mov	r0, r3
 8004134:	f003 facb 	bl	80076ce <USB_ReadChInterrupts>
 8004138:	4603      	mov	r3, r0
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b01      	cmp	r3, #1
 8004140:	d168      	bne.n	8004214 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004142:	78fa      	ldrb	r2, [r7, #3]
 8004144:	6879      	ldr	r1, [r7, #4]
 8004146:	4613      	mov	r3, r2
 8004148:	011b      	lsls	r3, r3, #4
 800414a:	1a9b      	subs	r3, r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	440b      	add	r3, r1
 8004150:	3344      	adds	r3, #68	@ 0x44
 8004152:	2200      	movs	r2, #0
 8004154:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	78fa      	ldrb	r2, [r7, #3]
 800415c:	4611      	mov	r1, r2
 800415e:	4618      	mov	r0, r3
 8004160:	f003 fab5 	bl	80076ce <USB_ReadChInterrupts>
 8004164:	4603      	mov	r3, r0
 8004166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800416a:	2b40      	cmp	r3, #64	@ 0x40
 800416c:	d112      	bne.n	8004194 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800416e:	78fa      	ldrb	r2, [r7, #3]
 8004170:	6879      	ldr	r1, [r7, #4]
 8004172:	4613      	mov	r3, r2
 8004174:	011b      	lsls	r3, r3, #4
 8004176:	1a9b      	subs	r3, r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	440b      	add	r3, r1
 800417c:	3319      	adds	r3, #25
 800417e:	2201      	movs	r2, #1
 8004180:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004182:	78fb      	ldrb	r3, [r7, #3]
 8004184:	015a      	lsls	r2, r3, #5
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	4413      	add	r3, r2
 800418a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800418e:	461a      	mov	r2, r3
 8004190:	2340      	movs	r3, #64	@ 0x40
 8004192:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004194:	78fa      	ldrb	r2, [r7, #3]
 8004196:	6879      	ldr	r1, [r7, #4]
 8004198:	4613      	mov	r3, r2
 800419a:	011b      	lsls	r3, r3, #4
 800419c:	1a9b      	subs	r3, r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	440b      	add	r3, r1
 80041a2:	331b      	adds	r3, #27
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d019      	beq.n	80041de <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80041aa:	78fa      	ldrb	r2, [r7, #3]
 80041ac:	6879      	ldr	r1, [r7, #4]
 80041ae:	4613      	mov	r3, r2
 80041b0:	011b      	lsls	r3, r3, #4
 80041b2:	1a9b      	subs	r3, r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	440b      	add	r3, r1
 80041b8:	331b      	adds	r3, #27
 80041ba:	2200      	movs	r2, #0
 80041bc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80041be:	78fb      	ldrb	r3, [r7, #3]
 80041c0:	015a      	lsls	r2, r3, #5
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	4413      	add	r3, r2
 80041c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	78fa      	ldrb	r2, [r7, #3]
 80041ce:	0151      	lsls	r1, r2, #5
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	440a      	add	r2, r1
 80041d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80041d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041dc:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80041de:	78fb      	ldrb	r3, [r7, #3]
 80041e0:	015a      	lsls	r2, r3, #5
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	4413      	add	r3, r2
 80041e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041ea:	461a      	mov	r2, r3
 80041ec:	2301      	movs	r3, #1
 80041ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80041f0:	78fa      	ldrb	r2, [r7, #3]
 80041f2:	6879      	ldr	r1, [r7, #4]
 80041f4:	4613      	mov	r3, r2
 80041f6:	011b      	lsls	r3, r3, #4
 80041f8:	1a9b      	subs	r3, r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	440b      	add	r3, r1
 80041fe:	334d      	adds	r3, #77	@ 0x4d
 8004200:	2201      	movs	r2, #1
 8004202:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	78fa      	ldrb	r2, [r7, #3]
 800420a:	4611      	mov	r1, r2
 800420c:	4618      	mov	r0, r3
 800420e:	f003 ffd8 	bl	80081c2 <USB_HC_Halt>
 8004212:	e365      	b.n	80048e0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	78fa      	ldrb	r2, [r7, #3]
 800421a:	4611      	mov	r1, r2
 800421c:	4618      	mov	r0, r3
 800421e:	f003 fa56 	bl	80076ce <USB_ReadChInterrupts>
 8004222:	4603      	mov	r3, r0
 8004224:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004228:	2b40      	cmp	r3, #64	@ 0x40
 800422a:	d139      	bne.n	80042a0 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800422c:	78fa      	ldrb	r2, [r7, #3]
 800422e:	6879      	ldr	r1, [r7, #4]
 8004230:	4613      	mov	r3, r2
 8004232:	011b      	lsls	r3, r3, #4
 8004234:	1a9b      	subs	r3, r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	440b      	add	r3, r1
 800423a:	334d      	adds	r3, #77	@ 0x4d
 800423c:	2205      	movs	r2, #5
 800423e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004240:	78fa      	ldrb	r2, [r7, #3]
 8004242:	6879      	ldr	r1, [r7, #4]
 8004244:	4613      	mov	r3, r2
 8004246:	011b      	lsls	r3, r3, #4
 8004248:	1a9b      	subs	r3, r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	440b      	add	r3, r1
 800424e:	331a      	adds	r3, #26
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d109      	bne.n	800426a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004256:	78fa      	ldrb	r2, [r7, #3]
 8004258:	6879      	ldr	r1, [r7, #4]
 800425a:	4613      	mov	r3, r2
 800425c:	011b      	lsls	r3, r3, #4
 800425e:	1a9b      	subs	r3, r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	440b      	add	r3, r1
 8004264:	3319      	adds	r3, #25
 8004266:	2201      	movs	r2, #1
 8004268:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800426a:	78fa      	ldrb	r2, [r7, #3]
 800426c:	6879      	ldr	r1, [r7, #4]
 800426e:	4613      	mov	r3, r2
 8004270:	011b      	lsls	r3, r3, #4
 8004272:	1a9b      	subs	r3, r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	440b      	add	r3, r1
 8004278:	3344      	adds	r3, #68	@ 0x44
 800427a:	2200      	movs	r2, #0
 800427c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	78fa      	ldrb	r2, [r7, #3]
 8004284:	4611      	mov	r1, r2
 8004286:	4618      	mov	r0, r3
 8004288:	f003 ff9b 	bl	80081c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800428c:	78fb      	ldrb	r3, [r7, #3]
 800428e:	015a      	lsls	r2, r3, #5
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	4413      	add	r3, r2
 8004294:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004298:	461a      	mov	r2, r3
 800429a:	2340      	movs	r3, #64	@ 0x40
 800429c:	6093      	str	r3, [r2, #8]
 800429e:	e31f      	b.n	80048e0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	78fa      	ldrb	r2, [r7, #3]
 80042a6:	4611      	mov	r1, r2
 80042a8:	4618      	mov	r0, r3
 80042aa:	f003 fa10 	bl	80076ce <USB_ReadChInterrupts>
 80042ae:	4603      	mov	r3, r0
 80042b0:	f003 0308 	and.w	r3, r3, #8
 80042b4:	2b08      	cmp	r3, #8
 80042b6:	d11a      	bne.n	80042ee <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80042b8:	78fb      	ldrb	r3, [r7, #3]
 80042ba:	015a      	lsls	r2, r3, #5
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	4413      	add	r3, r2
 80042c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042c4:	461a      	mov	r2, r3
 80042c6:	2308      	movs	r3, #8
 80042c8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80042ca:	78fa      	ldrb	r2, [r7, #3]
 80042cc:	6879      	ldr	r1, [r7, #4]
 80042ce:	4613      	mov	r3, r2
 80042d0:	011b      	lsls	r3, r3, #4
 80042d2:	1a9b      	subs	r3, r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	440b      	add	r3, r1
 80042d8:	334d      	adds	r3, #77	@ 0x4d
 80042da:	2206      	movs	r2, #6
 80042dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	78fa      	ldrb	r2, [r7, #3]
 80042e4:	4611      	mov	r1, r2
 80042e6:	4618      	mov	r0, r3
 80042e8:	f003 ff6b 	bl	80081c2 <USB_HC_Halt>
 80042ec:	e2f8      	b.n	80048e0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	78fa      	ldrb	r2, [r7, #3]
 80042f4:	4611      	mov	r1, r2
 80042f6:	4618      	mov	r0, r3
 80042f8:	f003 f9e9 	bl	80076ce <USB_ReadChInterrupts>
 80042fc:	4603      	mov	r3, r0
 80042fe:	f003 0310 	and.w	r3, r3, #16
 8004302:	2b10      	cmp	r3, #16
 8004304:	d144      	bne.n	8004390 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004306:	78fa      	ldrb	r2, [r7, #3]
 8004308:	6879      	ldr	r1, [r7, #4]
 800430a:	4613      	mov	r3, r2
 800430c:	011b      	lsls	r3, r3, #4
 800430e:	1a9b      	subs	r3, r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	440b      	add	r3, r1
 8004314:	3344      	adds	r3, #68	@ 0x44
 8004316:	2200      	movs	r2, #0
 8004318:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800431a:	78fa      	ldrb	r2, [r7, #3]
 800431c:	6879      	ldr	r1, [r7, #4]
 800431e:	4613      	mov	r3, r2
 8004320:	011b      	lsls	r3, r3, #4
 8004322:	1a9b      	subs	r3, r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	440b      	add	r3, r1
 8004328:	334d      	adds	r3, #77	@ 0x4d
 800432a:	2204      	movs	r2, #4
 800432c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800432e:	78fa      	ldrb	r2, [r7, #3]
 8004330:	6879      	ldr	r1, [r7, #4]
 8004332:	4613      	mov	r3, r2
 8004334:	011b      	lsls	r3, r3, #4
 8004336:	1a9b      	subs	r3, r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	440b      	add	r3, r1
 800433c:	3319      	adds	r3, #25
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d114      	bne.n	800436e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004344:	78fa      	ldrb	r2, [r7, #3]
 8004346:	6879      	ldr	r1, [r7, #4]
 8004348:	4613      	mov	r3, r2
 800434a:	011b      	lsls	r3, r3, #4
 800434c:	1a9b      	subs	r3, r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	440b      	add	r3, r1
 8004352:	3318      	adds	r3, #24
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d109      	bne.n	800436e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800435a:	78fa      	ldrb	r2, [r7, #3]
 800435c:	6879      	ldr	r1, [r7, #4]
 800435e:	4613      	mov	r3, r2
 8004360:	011b      	lsls	r3, r3, #4
 8004362:	1a9b      	subs	r3, r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	440b      	add	r3, r1
 8004368:	3319      	adds	r3, #25
 800436a:	2201      	movs	r2, #1
 800436c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	78fa      	ldrb	r2, [r7, #3]
 8004374:	4611      	mov	r1, r2
 8004376:	4618      	mov	r0, r3
 8004378:	f003 ff23 	bl	80081c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800437c:	78fb      	ldrb	r3, [r7, #3]
 800437e:	015a      	lsls	r2, r3, #5
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	4413      	add	r3, r2
 8004384:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004388:	461a      	mov	r2, r3
 800438a:	2310      	movs	r3, #16
 800438c:	6093      	str	r3, [r2, #8]
 800438e:	e2a7      	b.n	80048e0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	78fa      	ldrb	r2, [r7, #3]
 8004396:	4611      	mov	r1, r2
 8004398:	4618      	mov	r0, r3
 800439a:	f003 f998 	bl	80076ce <USB_ReadChInterrupts>
 800439e:	4603      	mov	r3, r0
 80043a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043a4:	2b80      	cmp	r3, #128	@ 0x80
 80043a6:	f040 8083 	bne.w	80044b0 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	799b      	ldrb	r3, [r3, #6]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d111      	bne.n	80043d6 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80043b2:	78fa      	ldrb	r2, [r7, #3]
 80043b4:	6879      	ldr	r1, [r7, #4]
 80043b6:	4613      	mov	r3, r2
 80043b8:	011b      	lsls	r3, r3, #4
 80043ba:	1a9b      	subs	r3, r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	440b      	add	r3, r1
 80043c0:	334d      	adds	r3, #77	@ 0x4d
 80043c2:	2207      	movs	r2, #7
 80043c4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	78fa      	ldrb	r2, [r7, #3]
 80043cc:	4611      	mov	r1, r2
 80043ce:	4618      	mov	r0, r3
 80043d0:	f003 fef7 	bl	80081c2 <USB_HC_Halt>
 80043d4:	e062      	b.n	800449c <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80043d6:	78fa      	ldrb	r2, [r7, #3]
 80043d8:	6879      	ldr	r1, [r7, #4]
 80043da:	4613      	mov	r3, r2
 80043dc:	011b      	lsls	r3, r3, #4
 80043de:	1a9b      	subs	r3, r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	440b      	add	r3, r1
 80043e4:	3344      	adds	r3, #68	@ 0x44
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	1c59      	adds	r1, r3, #1
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	4613      	mov	r3, r2
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	1a9b      	subs	r3, r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	4403      	add	r3, r0
 80043f6:	3344      	adds	r3, #68	@ 0x44
 80043f8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80043fa:	78fa      	ldrb	r2, [r7, #3]
 80043fc:	6879      	ldr	r1, [r7, #4]
 80043fe:	4613      	mov	r3, r2
 8004400:	011b      	lsls	r3, r3, #4
 8004402:	1a9b      	subs	r3, r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	440b      	add	r3, r1
 8004408:	3344      	adds	r3, #68	@ 0x44
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2b02      	cmp	r3, #2
 800440e:	d922      	bls.n	8004456 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004410:	78fa      	ldrb	r2, [r7, #3]
 8004412:	6879      	ldr	r1, [r7, #4]
 8004414:	4613      	mov	r3, r2
 8004416:	011b      	lsls	r3, r3, #4
 8004418:	1a9b      	subs	r3, r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	440b      	add	r3, r1
 800441e:	3344      	adds	r3, #68	@ 0x44
 8004420:	2200      	movs	r2, #0
 8004422:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004424:	78fa      	ldrb	r2, [r7, #3]
 8004426:	6879      	ldr	r1, [r7, #4]
 8004428:	4613      	mov	r3, r2
 800442a:	011b      	lsls	r3, r3, #4
 800442c:	1a9b      	subs	r3, r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	440b      	add	r3, r1
 8004432:	334c      	adds	r3, #76	@ 0x4c
 8004434:	2204      	movs	r2, #4
 8004436:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004438:	78fa      	ldrb	r2, [r7, #3]
 800443a:	6879      	ldr	r1, [r7, #4]
 800443c:	4613      	mov	r3, r2
 800443e:	011b      	lsls	r3, r3, #4
 8004440:	1a9b      	subs	r3, r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	440b      	add	r3, r1
 8004446:	334c      	adds	r3, #76	@ 0x4c
 8004448:	781a      	ldrb	r2, [r3, #0]
 800444a:	78fb      	ldrb	r3, [r7, #3]
 800444c:	4619      	mov	r1, r3
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f005 fa02 	bl	8009858 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004454:	e022      	b.n	800449c <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004456:	78fa      	ldrb	r2, [r7, #3]
 8004458:	6879      	ldr	r1, [r7, #4]
 800445a:	4613      	mov	r3, r2
 800445c:	011b      	lsls	r3, r3, #4
 800445e:	1a9b      	subs	r3, r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	440b      	add	r3, r1
 8004464:	334c      	adds	r3, #76	@ 0x4c
 8004466:	2202      	movs	r2, #2
 8004468:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800446a:	78fb      	ldrb	r3, [r7, #3]
 800446c:	015a      	lsls	r2, r3, #5
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	4413      	add	r3, r2
 8004472:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004480:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004488:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800448a:	78fb      	ldrb	r3, [r7, #3]
 800448c:	015a      	lsls	r2, r3, #5
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	4413      	add	r3, r2
 8004492:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004496:	461a      	mov	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800449c:	78fb      	ldrb	r3, [r7, #3]
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044a8:	461a      	mov	r2, r3
 80044aa:	2380      	movs	r3, #128	@ 0x80
 80044ac:	6093      	str	r3, [r2, #8]
 80044ae:	e217      	b.n	80048e0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	78fa      	ldrb	r2, [r7, #3]
 80044b6:	4611      	mov	r1, r2
 80044b8:	4618      	mov	r0, r3
 80044ba:	f003 f908 	bl	80076ce <USB_ReadChInterrupts>
 80044be:	4603      	mov	r3, r0
 80044c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044c8:	d11b      	bne.n	8004502 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80044ca:	78fa      	ldrb	r2, [r7, #3]
 80044cc:	6879      	ldr	r1, [r7, #4]
 80044ce:	4613      	mov	r3, r2
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	1a9b      	subs	r3, r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	440b      	add	r3, r1
 80044d8:	334d      	adds	r3, #77	@ 0x4d
 80044da:	2209      	movs	r2, #9
 80044dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	78fa      	ldrb	r2, [r7, #3]
 80044e4:	4611      	mov	r1, r2
 80044e6:	4618      	mov	r0, r3
 80044e8:	f003 fe6b 	bl	80081c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80044ec:	78fb      	ldrb	r3, [r7, #3]
 80044ee:	015a      	lsls	r2, r3, #5
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	4413      	add	r3, r2
 80044f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044f8:	461a      	mov	r2, r3
 80044fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80044fe:	6093      	str	r3, [r2, #8]
 8004500:	e1ee      	b.n	80048e0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	78fa      	ldrb	r2, [r7, #3]
 8004508:	4611      	mov	r1, r2
 800450a:	4618      	mov	r0, r3
 800450c:	f003 f8df 	bl	80076ce <USB_ReadChInterrupts>
 8004510:	4603      	mov	r3, r0
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b02      	cmp	r3, #2
 8004518:	f040 81df 	bne.w	80048da <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800451c:	78fb      	ldrb	r3, [r7, #3]
 800451e:	015a      	lsls	r2, r3, #5
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	4413      	add	r3, r2
 8004524:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004528:	461a      	mov	r2, r3
 800452a:	2302      	movs	r3, #2
 800452c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800452e:	78fa      	ldrb	r2, [r7, #3]
 8004530:	6879      	ldr	r1, [r7, #4]
 8004532:	4613      	mov	r3, r2
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	1a9b      	subs	r3, r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	440b      	add	r3, r1
 800453c:	334d      	adds	r3, #77	@ 0x4d
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	2b01      	cmp	r3, #1
 8004542:	f040 8093 	bne.w	800466c <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004546:	78fa      	ldrb	r2, [r7, #3]
 8004548:	6879      	ldr	r1, [r7, #4]
 800454a:	4613      	mov	r3, r2
 800454c:	011b      	lsls	r3, r3, #4
 800454e:	1a9b      	subs	r3, r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	440b      	add	r3, r1
 8004554:	334d      	adds	r3, #77	@ 0x4d
 8004556:	2202      	movs	r2, #2
 8004558:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800455a:	78fa      	ldrb	r2, [r7, #3]
 800455c:	6879      	ldr	r1, [r7, #4]
 800455e:	4613      	mov	r3, r2
 8004560:	011b      	lsls	r3, r3, #4
 8004562:	1a9b      	subs	r3, r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	440b      	add	r3, r1
 8004568:	334c      	adds	r3, #76	@ 0x4c
 800456a:	2201      	movs	r2, #1
 800456c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800456e:	78fa      	ldrb	r2, [r7, #3]
 8004570:	6879      	ldr	r1, [r7, #4]
 8004572:	4613      	mov	r3, r2
 8004574:	011b      	lsls	r3, r3, #4
 8004576:	1a9b      	subs	r3, r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	440b      	add	r3, r1
 800457c:	3326      	adds	r3, #38	@ 0x26
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	2b02      	cmp	r3, #2
 8004582:	d00b      	beq.n	800459c <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004584:	78fa      	ldrb	r2, [r7, #3]
 8004586:	6879      	ldr	r1, [r7, #4]
 8004588:	4613      	mov	r3, r2
 800458a:	011b      	lsls	r3, r3, #4
 800458c:	1a9b      	subs	r3, r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	440b      	add	r3, r1
 8004592:	3326      	adds	r3, #38	@ 0x26
 8004594:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004596:	2b03      	cmp	r3, #3
 8004598:	f040 8190 	bne.w	80048bc <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	799b      	ldrb	r3, [r3, #6]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d115      	bne.n	80045d0 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80045a4:	78fa      	ldrb	r2, [r7, #3]
 80045a6:	6879      	ldr	r1, [r7, #4]
 80045a8:	4613      	mov	r3, r2
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	1a9b      	subs	r3, r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	440b      	add	r3, r1
 80045b2:	333d      	adds	r3, #61	@ 0x3d
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	78fa      	ldrb	r2, [r7, #3]
 80045b8:	f083 0301 	eor.w	r3, r3, #1
 80045bc:	b2d8      	uxtb	r0, r3
 80045be:	6879      	ldr	r1, [r7, #4]
 80045c0:	4613      	mov	r3, r2
 80045c2:	011b      	lsls	r3, r3, #4
 80045c4:	1a9b      	subs	r3, r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	440b      	add	r3, r1
 80045ca:	333d      	adds	r3, #61	@ 0x3d
 80045cc:	4602      	mov	r2, r0
 80045ce:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	799b      	ldrb	r3, [r3, #6]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	f040 8171 	bne.w	80048bc <HCD_HC_OUT_IRQHandler+0x954>
 80045da:	78fa      	ldrb	r2, [r7, #3]
 80045dc:	6879      	ldr	r1, [r7, #4]
 80045de:	4613      	mov	r3, r2
 80045e0:	011b      	lsls	r3, r3, #4
 80045e2:	1a9b      	subs	r3, r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	440b      	add	r3, r1
 80045e8:	3334      	adds	r3, #52	@ 0x34
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 8165 	beq.w	80048bc <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80045f2:	78fa      	ldrb	r2, [r7, #3]
 80045f4:	6879      	ldr	r1, [r7, #4]
 80045f6:	4613      	mov	r3, r2
 80045f8:	011b      	lsls	r3, r3, #4
 80045fa:	1a9b      	subs	r3, r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	440b      	add	r3, r1
 8004600:	3334      	adds	r3, #52	@ 0x34
 8004602:	6819      	ldr	r1, [r3, #0]
 8004604:	78fa      	ldrb	r2, [r7, #3]
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	4613      	mov	r3, r2
 800460a:	011b      	lsls	r3, r3, #4
 800460c:	1a9b      	subs	r3, r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	4403      	add	r3, r0
 8004612:	3328      	adds	r3, #40	@ 0x28
 8004614:	881b      	ldrh	r3, [r3, #0]
 8004616:	440b      	add	r3, r1
 8004618:	1e59      	subs	r1, r3, #1
 800461a:	78fa      	ldrb	r2, [r7, #3]
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	4613      	mov	r3, r2
 8004620:	011b      	lsls	r3, r3, #4
 8004622:	1a9b      	subs	r3, r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4403      	add	r3, r0
 8004628:	3328      	adds	r3, #40	@ 0x28
 800462a:	881b      	ldrh	r3, [r3, #0]
 800462c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004630:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b00      	cmp	r3, #0
 800463a:	f000 813f 	beq.w	80048bc <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800463e:	78fa      	ldrb	r2, [r7, #3]
 8004640:	6879      	ldr	r1, [r7, #4]
 8004642:	4613      	mov	r3, r2
 8004644:	011b      	lsls	r3, r3, #4
 8004646:	1a9b      	subs	r3, r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	440b      	add	r3, r1
 800464c:	333d      	adds	r3, #61	@ 0x3d
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	78fa      	ldrb	r2, [r7, #3]
 8004652:	f083 0301 	eor.w	r3, r3, #1
 8004656:	b2d8      	uxtb	r0, r3
 8004658:	6879      	ldr	r1, [r7, #4]
 800465a:	4613      	mov	r3, r2
 800465c:	011b      	lsls	r3, r3, #4
 800465e:	1a9b      	subs	r3, r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	440b      	add	r3, r1
 8004664:	333d      	adds	r3, #61	@ 0x3d
 8004666:	4602      	mov	r2, r0
 8004668:	701a      	strb	r2, [r3, #0]
 800466a:	e127      	b.n	80048bc <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800466c:	78fa      	ldrb	r2, [r7, #3]
 800466e:	6879      	ldr	r1, [r7, #4]
 8004670:	4613      	mov	r3, r2
 8004672:	011b      	lsls	r3, r3, #4
 8004674:	1a9b      	subs	r3, r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	440b      	add	r3, r1
 800467a:	334d      	adds	r3, #77	@ 0x4d
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	2b03      	cmp	r3, #3
 8004680:	d120      	bne.n	80046c4 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004682:	78fa      	ldrb	r2, [r7, #3]
 8004684:	6879      	ldr	r1, [r7, #4]
 8004686:	4613      	mov	r3, r2
 8004688:	011b      	lsls	r3, r3, #4
 800468a:	1a9b      	subs	r3, r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	440b      	add	r3, r1
 8004690:	334d      	adds	r3, #77	@ 0x4d
 8004692:	2202      	movs	r2, #2
 8004694:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004696:	78fa      	ldrb	r2, [r7, #3]
 8004698:	6879      	ldr	r1, [r7, #4]
 800469a:	4613      	mov	r3, r2
 800469c:	011b      	lsls	r3, r3, #4
 800469e:	1a9b      	subs	r3, r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	440b      	add	r3, r1
 80046a4:	331b      	adds	r3, #27
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	f040 8107 	bne.w	80048bc <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80046ae:	78fa      	ldrb	r2, [r7, #3]
 80046b0:	6879      	ldr	r1, [r7, #4]
 80046b2:	4613      	mov	r3, r2
 80046b4:	011b      	lsls	r3, r3, #4
 80046b6:	1a9b      	subs	r3, r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	440b      	add	r3, r1
 80046bc:	334c      	adds	r3, #76	@ 0x4c
 80046be:	2202      	movs	r2, #2
 80046c0:	701a      	strb	r2, [r3, #0]
 80046c2:	e0fb      	b.n	80048bc <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80046c4:	78fa      	ldrb	r2, [r7, #3]
 80046c6:	6879      	ldr	r1, [r7, #4]
 80046c8:	4613      	mov	r3, r2
 80046ca:	011b      	lsls	r3, r3, #4
 80046cc:	1a9b      	subs	r3, r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	440b      	add	r3, r1
 80046d2:	334d      	adds	r3, #77	@ 0x4d
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	2b04      	cmp	r3, #4
 80046d8:	d13a      	bne.n	8004750 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80046da:	78fa      	ldrb	r2, [r7, #3]
 80046dc:	6879      	ldr	r1, [r7, #4]
 80046de:	4613      	mov	r3, r2
 80046e0:	011b      	lsls	r3, r3, #4
 80046e2:	1a9b      	subs	r3, r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	440b      	add	r3, r1
 80046e8:	334d      	adds	r3, #77	@ 0x4d
 80046ea:	2202      	movs	r2, #2
 80046ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80046ee:	78fa      	ldrb	r2, [r7, #3]
 80046f0:	6879      	ldr	r1, [r7, #4]
 80046f2:	4613      	mov	r3, r2
 80046f4:	011b      	lsls	r3, r3, #4
 80046f6:	1a9b      	subs	r3, r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	440b      	add	r3, r1
 80046fc:	334c      	adds	r3, #76	@ 0x4c
 80046fe:	2202      	movs	r2, #2
 8004700:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004702:	78fa      	ldrb	r2, [r7, #3]
 8004704:	6879      	ldr	r1, [r7, #4]
 8004706:	4613      	mov	r3, r2
 8004708:	011b      	lsls	r3, r3, #4
 800470a:	1a9b      	subs	r3, r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	440b      	add	r3, r1
 8004710:	331b      	adds	r3, #27
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	2b01      	cmp	r3, #1
 8004716:	f040 80d1 	bne.w	80048bc <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800471a:	78fa      	ldrb	r2, [r7, #3]
 800471c:	6879      	ldr	r1, [r7, #4]
 800471e:	4613      	mov	r3, r2
 8004720:	011b      	lsls	r3, r3, #4
 8004722:	1a9b      	subs	r3, r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	440b      	add	r3, r1
 8004728:	331b      	adds	r3, #27
 800472a:	2200      	movs	r2, #0
 800472c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800472e:	78fb      	ldrb	r3, [r7, #3]
 8004730:	015a      	lsls	r2, r3, #5
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	4413      	add	r3, r2
 8004736:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	78fa      	ldrb	r2, [r7, #3]
 800473e:	0151      	lsls	r1, r2, #5
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	440a      	add	r2, r1
 8004744:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004748:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800474c:	6053      	str	r3, [r2, #4]
 800474e:	e0b5      	b.n	80048bc <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004750:	78fa      	ldrb	r2, [r7, #3]
 8004752:	6879      	ldr	r1, [r7, #4]
 8004754:	4613      	mov	r3, r2
 8004756:	011b      	lsls	r3, r3, #4
 8004758:	1a9b      	subs	r3, r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	440b      	add	r3, r1
 800475e:	334d      	adds	r3, #77	@ 0x4d
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	2b05      	cmp	r3, #5
 8004764:	d114      	bne.n	8004790 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004766:	78fa      	ldrb	r2, [r7, #3]
 8004768:	6879      	ldr	r1, [r7, #4]
 800476a:	4613      	mov	r3, r2
 800476c:	011b      	lsls	r3, r3, #4
 800476e:	1a9b      	subs	r3, r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	440b      	add	r3, r1
 8004774:	334d      	adds	r3, #77	@ 0x4d
 8004776:	2202      	movs	r2, #2
 8004778:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800477a:	78fa      	ldrb	r2, [r7, #3]
 800477c:	6879      	ldr	r1, [r7, #4]
 800477e:	4613      	mov	r3, r2
 8004780:	011b      	lsls	r3, r3, #4
 8004782:	1a9b      	subs	r3, r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	440b      	add	r3, r1
 8004788:	334c      	adds	r3, #76	@ 0x4c
 800478a:	2202      	movs	r2, #2
 800478c:	701a      	strb	r2, [r3, #0]
 800478e:	e095      	b.n	80048bc <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004790:	78fa      	ldrb	r2, [r7, #3]
 8004792:	6879      	ldr	r1, [r7, #4]
 8004794:	4613      	mov	r3, r2
 8004796:	011b      	lsls	r3, r3, #4
 8004798:	1a9b      	subs	r3, r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	440b      	add	r3, r1
 800479e:	334d      	adds	r3, #77	@ 0x4d
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	2b06      	cmp	r3, #6
 80047a4:	d114      	bne.n	80047d0 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80047a6:	78fa      	ldrb	r2, [r7, #3]
 80047a8:	6879      	ldr	r1, [r7, #4]
 80047aa:	4613      	mov	r3, r2
 80047ac:	011b      	lsls	r3, r3, #4
 80047ae:	1a9b      	subs	r3, r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	440b      	add	r3, r1
 80047b4:	334d      	adds	r3, #77	@ 0x4d
 80047b6:	2202      	movs	r2, #2
 80047b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80047ba:	78fa      	ldrb	r2, [r7, #3]
 80047bc:	6879      	ldr	r1, [r7, #4]
 80047be:	4613      	mov	r3, r2
 80047c0:	011b      	lsls	r3, r3, #4
 80047c2:	1a9b      	subs	r3, r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	440b      	add	r3, r1
 80047c8:	334c      	adds	r3, #76	@ 0x4c
 80047ca:	2205      	movs	r2, #5
 80047cc:	701a      	strb	r2, [r3, #0]
 80047ce:	e075      	b.n	80048bc <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80047d0:	78fa      	ldrb	r2, [r7, #3]
 80047d2:	6879      	ldr	r1, [r7, #4]
 80047d4:	4613      	mov	r3, r2
 80047d6:	011b      	lsls	r3, r3, #4
 80047d8:	1a9b      	subs	r3, r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	440b      	add	r3, r1
 80047de:	334d      	adds	r3, #77	@ 0x4d
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	2b07      	cmp	r3, #7
 80047e4:	d00a      	beq.n	80047fc <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80047e6:	78fa      	ldrb	r2, [r7, #3]
 80047e8:	6879      	ldr	r1, [r7, #4]
 80047ea:	4613      	mov	r3, r2
 80047ec:	011b      	lsls	r3, r3, #4
 80047ee:	1a9b      	subs	r3, r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	440b      	add	r3, r1
 80047f4:	334d      	adds	r3, #77	@ 0x4d
 80047f6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80047f8:	2b09      	cmp	r3, #9
 80047fa:	d170      	bne.n	80048de <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80047fc:	78fa      	ldrb	r2, [r7, #3]
 80047fe:	6879      	ldr	r1, [r7, #4]
 8004800:	4613      	mov	r3, r2
 8004802:	011b      	lsls	r3, r3, #4
 8004804:	1a9b      	subs	r3, r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	440b      	add	r3, r1
 800480a:	334d      	adds	r3, #77	@ 0x4d
 800480c:	2202      	movs	r2, #2
 800480e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004810:	78fa      	ldrb	r2, [r7, #3]
 8004812:	6879      	ldr	r1, [r7, #4]
 8004814:	4613      	mov	r3, r2
 8004816:	011b      	lsls	r3, r3, #4
 8004818:	1a9b      	subs	r3, r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	440b      	add	r3, r1
 800481e:	3344      	adds	r3, #68	@ 0x44
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	1c59      	adds	r1, r3, #1
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	4613      	mov	r3, r2
 8004828:	011b      	lsls	r3, r3, #4
 800482a:	1a9b      	subs	r3, r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	4403      	add	r3, r0
 8004830:	3344      	adds	r3, #68	@ 0x44
 8004832:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004834:	78fa      	ldrb	r2, [r7, #3]
 8004836:	6879      	ldr	r1, [r7, #4]
 8004838:	4613      	mov	r3, r2
 800483a:	011b      	lsls	r3, r3, #4
 800483c:	1a9b      	subs	r3, r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	440b      	add	r3, r1
 8004842:	3344      	adds	r3, #68	@ 0x44
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2b02      	cmp	r3, #2
 8004848:	d914      	bls.n	8004874 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800484a:	78fa      	ldrb	r2, [r7, #3]
 800484c:	6879      	ldr	r1, [r7, #4]
 800484e:	4613      	mov	r3, r2
 8004850:	011b      	lsls	r3, r3, #4
 8004852:	1a9b      	subs	r3, r3, r2
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	440b      	add	r3, r1
 8004858:	3344      	adds	r3, #68	@ 0x44
 800485a:	2200      	movs	r2, #0
 800485c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800485e:	78fa      	ldrb	r2, [r7, #3]
 8004860:	6879      	ldr	r1, [r7, #4]
 8004862:	4613      	mov	r3, r2
 8004864:	011b      	lsls	r3, r3, #4
 8004866:	1a9b      	subs	r3, r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	440b      	add	r3, r1
 800486c:	334c      	adds	r3, #76	@ 0x4c
 800486e:	2204      	movs	r2, #4
 8004870:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004872:	e022      	b.n	80048ba <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004874:	78fa      	ldrb	r2, [r7, #3]
 8004876:	6879      	ldr	r1, [r7, #4]
 8004878:	4613      	mov	r3, r2
 800487a:	011b      	lsls	r3, r3, #4
 800487c:	1a9b      	subs	r3, r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	440b      	add	r3, r1
 8004882:	334c      	adds	r3, #76	@ 0x4c
 8004884:	2202      	movs	r2, #2
 8004886:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004888:	78fb      	ldrb	r3, [r7, #3]
 800488a:	015a      	lsls	r2, r3, #5
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	4413      	add	r3, r2
 8004890:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800489e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80048a6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80048a8:	78fb      	ldrb	r3, [r7, #3]
 80048aa:	015a      	lsls	r2, r3, #5
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	4413      	add	r3, r2
 80048b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048b4:	461a      	mov	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80048ba:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80048bc:	78fa      	ldrb	r2, [r7, #3]
 80048be:	6879      	ldr	r1, [r7, #4]
 80048c0:	4613      	mov	r3, r2
 80048c2:	011b      	lsls	r3, r3, #4
 80048c4:	1a9b      	subs	r3, r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	440b      	add	r3, r1
 80048ca:	334c      	adds	r3, #76	@ 0x4c
 80048cc:	781a      	ldrb	r2, [r3, #0]
 80048ce:	78fb      	ldrb	r3, [r7, #3]
 80048d0:	4619      	mov	r1, r3
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f004 ffc0 	bl	8009858 <HAL_HCD_HC_NotifyURBChange_Callback>
 80048d8:	e002      	b.n	80048e0 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80048da:	bf00      	nop
 80048dc:	e000      	b.n	80048e0 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80048de:	bf00      	nop
  }
}
 80048e0:	3718      	adds	r7, #24
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b08a      	sub	sp, #40	@ 0x28
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	f003 030f 	and.w	r3, r3, #15
 8004906:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	0c5b      	lsrs	r3, r3, #17
 800490c:	f003 030f 	and.w	r3, r3, #15
 8004910:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	091b      	lsrs	r3, r3, #4
 8004916:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800491a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	2b02      	cmp	r3, #2
 8004920:	d004      	beq.n	800492c <HCD_RXQLVL_IRQHandler+0x46>
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	2b05      	cmp	r3, #5
 8004926:	f000 80b6 	beq.w	8004a96 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800492a:	e0b7      	b.n	8004a9c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 80b3 	beq.w	8004a9a <HCD_RXQLVL_IRQHandler+0x1b4>
 8004934:	6879      	ldr	r1, [r7, #4]
 8004936:	69ba      	ldr	r2, [r7, #24]
 8004938:	4613      	mov	r3, r2
 800493a:	011b      	lsls	r3, r3, #4
 800493c:	1a9b      	subs	r3, r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	440b      	add	r3, r1
 8004942:	332c      	adds	r3, #44	@ 0x2c
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	f000 80a7 	beq.w	8004a9a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800494c:	6879      	ldr	r1, [r7, #4]
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	4613      	mov	r3, r2
 8004952:	011b      	lsls	r3, r3, #4
 8004954:	1a9b      	subs	r3, r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	440b      	add	r3, r1
 800495a:	3338      	adds	r3, #56	@ 0x38
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	18d1      	adds	r1, r2, r3
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	4613      	mov	r3, r2
 8004968:	011b      	lsls	r3, r3, #4
 800496a:	1a9b      	subs	r3, r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4403      	add	r3, r0
 8004970:	3334      	adds	r3, #52	@ 0x34
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4299      	cmp	r1, r3
 8004976:	f200 8083 	bhi.w	8004a80 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6818      	ldr	r0, [r3, #0]
 800497e:	6879      	ldr	r1, [r7, #4]
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	4613      	mov	r3, r2
 8004984:	011b      	lsls	r3, r3, #4
 8004986:	1a9b      	subs	r3, r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	440b      	add	r3, r1
 800498c:	332c      	adds	r3, #44	@ 0x2c
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	b292      	uxth	r2, r2
 8004994:	4619      	mov	r1, r3
 8004996:	f002 fe2f 	bl	80075f8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800499a:	6879      	ldr	r1, [r7, #4]
 800499c:	69ba      	ldr	r2, [r7, #24]
 800499e:	4613      	mov	r3, r2
 80049a0:	011b      	lsls	r3, r3, #4
 80049a2:	1a9b      	subs	r3, r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	440b      	add	r3, r1
 80049a8:	332c      	adds	r3, #44	@ 0x2c
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	18d1      	adds	r1, r2, r3
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	69ba      	ldr	r2, [r7, #24]
 80049b4:	4613      	mov	r3, r2
 80049b6:	011b      	lsls	r3, r3, #4
 80049b8:	1a9b      	subs	r3, r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4403      	add	r3, r0
 80049be:	332c      	adds	r3, #44	@ 0x2c
 80049c0:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80049c2:	6879      	ldr	r1, [r7, #4]
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	4613      	mov	r3, r2
 80049c8:	011b      	lsls	r3, r3, #4
 80049ca:	1a9b      	subs	r3, r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	440b      	add	r3, r1
 80049d0:	3338      	adds	r3, #56	@ 0x38
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	18d1      	adds	r1, r2, r3
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	69ba      	ldr	r2, [r7, #24]
 80049dc:	4613      	mov	r3, r2
 80049de:	011b      	lsls	r3, r3, #4
 80049e0:	1a9b      	subs	r3, r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	4403      	add	r3, r0
 80049e6:	3338      	adds	r3, #56	@ 0x38
 80049e8:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	015a      	lsls	r2, r3, #5
 80049ee:	6a3b      	ldr	r3, [r7, #32]
 80049f0:	4413      	add	r3, r2
 80049f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	0cdb      	lsrs	r3, r3, #19
 80049fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049fe:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004a00:	6879      	ldr	r1, [r7, #4]
 8004a02:	69ba      	ldr	r2, [r7, #24]
 8004a04:	4613      	mov	r3, r2
 8004a06:	011b      	lsls	r3, r3, #4
 8004a08:	1a9b      	subs	r3, r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	440b      	add	r3, r1
 8004a0e:	3328      	adds	r3, #40	@ 0x28
 8004a10:	881b      	ldrh	r3, [r3, #0]
 8004a12:	461a      	mov	r2, r3
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d13f      	bne.n	8004a9a <HCD_RXQLVL_IRQHandler+0x1b4>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d03c      	beq.n	8004a9a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	015a      	lsls	r2, r3, #5
 8004a24:	6a3b      	ldr	r3, [r7, #32]
 8004a26:	4413      	add	r3, r2
 8004a28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004a36:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004a3e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	015a      	lsls	r2, r3, #5
 8004a44:	6a3b      	ldr	r3, [r7, #32]
 8004a46:	4413      	add	r3, r2
 8004a48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004a52:	6879      	ldr	r1, [r7, #4]
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	4613      	mov	r3, r2
 8004a58:	011b      	lsls	r3, r3, #4
 8004a5a:	1a9b      	subs	r3, r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	440b      	add	r3, r1
 8004a60:	333c      	adds	r3, #60	@ 0x3c
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	f083 0301 	eor.w	r3, r3, #1
 8004a68:	b2d8      	uxtb	r0, r3
 8004a6a:	6879      	ldr	r1, [r7, #4]
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	011b      	lsls	r3, r3, #4
 8004a72:	1a9b      	subs	r3, r3, r2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	440b      	add	r3, r1
 8004a78:	333c      	adds	r3, #60	@ 0x3c
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	701a      	strb	r2, [r3, #0]
      break;
 8004a7e:	e00c      	b.n	8004a9a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004a80:	6879      	ldr	r1, [r7, #4]
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	4613      	mov	r3, r2
 8004a86:	011b      	lsls	r3, r3, #4
 8004a88:	1a9b      	subs	r3, r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	440b      	add	r3, r1
 8004a8e:	334c      	adds	r3, #76	@ 0x4c
 8004a90:	2204      	movs	r2, #4
 8004a92:	701a      	strb	r2, [r3, #0]
      break;
 8004a94:	e001      	b.n	8004a9a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004a96:	bf00      	nop
 8004a98:	e000      	b.n	8004a9c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004a9a:	bf00      	nop
  }
}
 8004a9c:	bf00      	nop
 8004a9e:	3728      	adds	r7, #40	@ 0x28
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004ad0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d10b      	bne.n	8004af4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d102      	bne.n	8004aec <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f004 fe9a 	bl	8009820 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	f043 0302 	orr.w	r3, r3, #2
 8004af2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f003 0308 	and.w	r3, r3, #8
 8004afa:	2b08      	cmp	r3, #8
 8004afc:	d132      	bne.n	8004b64 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	f043 0308 	orr.w	r3, r3, #8
 8004b04:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f003 0304 	and.w	r3, r3, #4
 8004b0c:	2b04      	cmp	r3, #4
 8004b0e:	d126      	bne.n	8004b5e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	7a5b      	ldrb	r3, [r3, #9]
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d113      	bne.n	8004b40 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004b1e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b22:	d106      	bne.n	8004b32 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2102      	movs	r1, #2
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f002 fef4 	bl	8007918 <USB_InitFSLSPClkSel>
 8004b30:	e011      	b.n	8004b56 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2101      	movs	r1, #1
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f002 feed 	bl	8007918 <USB_InitFSLSPClkSel>
 8004b3e:	e00a      	b.n	8004b56 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	79db      	ldrb	r3, [r3, #7]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d106      	bne.n	8004b56 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b4e:	461a      	mov	r2, r3
 8004b50:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004b54:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f004 fe8c 	bl	8009874 <HAL_HCD_PortEnabled_Callback>
 8004b5c:	e002      	b.n	8004b64 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f004 fe96 	bl	8009890 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f003 0320 	and.w	r3, r3, #32
 8004b6a:	2b20      	cmp	r3, #32
 8004b6c:	d103      	bne.n	8004b76 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	f043 0320 	orr.w	r3, r3, #32
 8004b74:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	6013      	str	r3, [r2, #0]
}
 8004b82:	bf00      	nop
 8004b84:	3718      	adds	r7, #24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
	...

08004b8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e12b      	b.n	8004df6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d106      	bne.n	8004bb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f7fb ffa8 	bl	8000b08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2224      	movs	r2, #36	@ 0x24
 8004bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f022 0201 	bic.w	r2, r2, #1
 8004bce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004bde:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004bee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004bf0:	f001 fe72 	bl	80068d8 <HAL_RCC_GetPCLK1Freq>
 8004bf4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	4a81      	ldr	r2, [pc, #516]	@ (8004e00 <HAL_I2C_Init+0x274>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d807      	bhi.n	8004c10 <HAL_I2C_Init+0x84>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	4a80      	ldr	r2, [pc, #512]	@ (8004e04 <HAL_I2C_Init+0x278>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	bf94      	ite	ls
 8004c08:	2301      	movls	r3, #1
 8004c0a:	2300      	movhi	r3, #0
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	e006      	b.n	8004c1e <HAL_I2C_Init+0x92>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	4a7d      	ldr	r2, [pc, #500]	@ (8004e08 <HAL_I2C_Init+0x27c>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	bf94      	ite	ls
 8004c18:	2301      	movls	r3, #1
 8004c1a:	2300      	movhi	r3, #0
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e0e7      	b.n	8004df6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	4a78      	ldr	r2, [pc, #480]	@ (8004e0c <HAL_I2C_Init+0x280>)
 8004c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2e:	0c9b      	lsrs	r3, r3, #18
 8004c30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	430a      	orrs	r2, r1
 8004c44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	6a1b      	ldr	r3, [r3, #32]
 8004c4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	4a6a      	ldr	r2, [pc, #424]	@ (8004e00 <HAL_I2C_Init+0x274>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d802      	bhi.n	8004c60 <HAL_I2C_Init+0xd4>
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	e009      	b.n	8004c74 <HAL_I2C_Init+0xe8>
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004c66:	fb02 f303 	mul.w	r3, r2, r3
 8004c6a:	4a69      	ldr	r2, [pc, #420]	@ (8004e10 <HAL_I2C_Init+0x284>)
 8004c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c70:	099b      	lsrs	r3, r3, #6
 8004c72:	3301      	adds	r3, #1
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	6812      	ldr	r2, [r2, #0]
 8004c78:	430b      	orrs	r3, r1
 8004c7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	69db      	ldr	r3, [r3, #28]
 8004c82:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004c86:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	495c      	ldr	r1, [pc, #368]	@ (8004e00 <HAL_I2C_Init+0x274>)
 8004c90:	428b      	cmp	r3, r1
 8004c92:	d819      	bhi.n	8004cc8 <HAL_I2C_Init+0x13c>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	1e59      	subs	r1, r3, #1
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	005b      	lsls	r3, r3, #1
 8004c9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ca2:	1c59      	adds	r1, r3, #1
 8004ca4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004ca8:	400b      	ands	r3, r1
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00a      	beq.n	8004cc4 <HAL_I2C_Init+0x138>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	1e59      	subs	r1, r3, #1
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	005b      	lsls	r3, r3, #1
 8004cb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cc2:	e051      	b.n	8004d68 <HAL_I2C_Init+0x1dc>
 8004cc4:	2304      	movs	r3, #4
 8004cc6:	e04f      	b.n	8004d68 <HAL_I2C_Init+0x1dc>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d111      	bne.n	8004cf4 <HAL_I2C_Init+0x168>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	1e58      	subs	r0, r3, #1
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6859      	ldr	r1, [r3, #4]
 8004cd8:	460b      	mov	r3, r1
 8004cda:	005b      	lsls	r3, r3, #1
 8004cdc:	440b      	add	r3, r1
 8004cde:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	bf0c      	ite	eq
 8004cec:	2301      	moveq	r3, #1
 8004cee:	2300      	movne	r3, #0
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	e012      	b.n	8004d1a <HAL_I2C_Init+0x18e>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	1e58      	subs	r0, r3, #1
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6859      	ldr	r1, [r3, #4]
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	440b      	add	r3, r1
 8004d02:	0099      	lsls	r1, r3, #2
 8004d04:	440b      	add	r3, r1
 8004d06:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	bf0c      	ite	eq
 8004d14:	2301      	moveq	r3, #1
 8004d16:	2300      	movne	r3, #0
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d001      	beq.n	8004d22 <HAL_I2C_Init+0x196>
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e022      	b.n	8004d68 <HAL_I2C_Init+0x1dc>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10e      	bne.n	8004d48 <HAL_I2C_Init+0x1bc>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	1e58      	subs	r0, r3, #1
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6859      	ldr	r1, [r3, #4]
 8004d32:	460b      	mov	r3, r1
 8004d34:	005b      	lsls	r3, r3, #1
 8004d36:	440b      	add	r3, r1
 8004d38:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d46:	e00f      	b.n	8004d68 <HAL_I2C_Init+0x1dc>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	1e58      	subs	r0, r3, #1
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6859      	ldr	r1, [r3, #4]
 8004d50:	460b      	mov	r3, r1
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	440b      	add	r3, r1
 8004d56:	0099      	lsls	r1, r3, #2
 8004d58:	440b      	add	r3, r1
 8004d5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d5e:	3301      	adds	r3, #1
 8004d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d64:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d68:	6879      	ldr	r1, [r7, #4]
 8004d6a:	6809      	ldr	r1, [r1, #0]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	69da      	ldr	r2, [r3, #28]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a1b      	ldr	r3, [r3, #32]
 8004d82:	431a      	orrs	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004d96:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	6911      	ldr	r1, [r2, #16]
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	68d2      	ldr	r2, [r2, #12]
 8004da2:	4311      	orrs	r1, r2
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	6812      	ldr	r2, [r2, #0]
 8004da8:	430b      	orrs	r3, r1
 8004daa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	695a      	ldr	r2, [r3, #20]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f042 0201 	orr.w	r2, r2, #1
 8004dd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2220      	movs	r2, #32
 8004de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	000186a0 	.word	0x000186a0
 8004e04:	001e847f 	.word	0x001e847f
 8004e08:	003d08ff 	.word	0x003d08ff
 8004e0c:	431bde83 	.word	0x431bde83
 8004e10:	10624dd3 	.word	0x10624dd3

08004e14 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b088      	sub	sp, #32
 8004e18:	af02      	add	r7, sp, #8
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	607a      	str	r2, [r7, #4]
 8004e1e:	461a      	mov	r2, r3
 8004e20:	460b      	mov	r3, r1
 8004e22:	817b      	strh	r3, [r7, #10]
 8004e24:	4613      	mov	r3, r2
 8004e26:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e28:	f7fc fb28 	bl	800147c <HAL_GetTick>
 8004e2c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b20      	cmp	r3, #32
 8004e38:	f040 80e0 	bne.w	8004ffc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	9300      	str	r3, [sp, #0]
 8004e40:	2319      	movs	r3, #25
 8004e42:	2201      	movs	r2, #1
 8004e44:	4970      	ldr	r1, [pc, #448]	@ (8005008 <HAL_I2C_Master_Transmit+0x1f4>)
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f000 f964 	bl	8005114 <I2C_WaitOnFlagUntilTimeout>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004e52:	2302      	movs	r3, #2
 8004e54:	e0d3      	b.n	8004ffe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d101      	bne.n	8004e64 <HAL_I2C_Master_Transmit+0x50>
 8004e60:	2302      	movs	r3, #2
 8004e62:	e0cc      	b.n	8004ffe <HAL_I2C_Master_Transmit+0x1ea>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d007      	beq.n	8004e8a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f042 0201 	orr.w	r2, r2, #1
 8004e88:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e98:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2221      	movs	r2, #33	@ 0x21
 8004e9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2210      	movs	r2, #16
 8004ea6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2200      	movs	r2, #0
 8004eae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	893a      	ldrh	r2, [r7, #8]
 8004eba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	4a50      	ldr	r2, [pc, #320]	@ (800500c <HAL_I2C_Master_Transmit+0x1f8>)
 8004eca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004ecc:	8979      	ldrh	r1, [r7, #10]
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	6a3a      	ldr	r2, [r7, #32]
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f000 f89c 	bl	8005010 <I2C_MasterRequestWrite>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e08d      	b.n	8004ffe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	613b      	str	r3, [r7, #16]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	613b      	str	r3, [r7, #16]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	613b      	str	r3, [r7, #16]
 8004ef6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004ef8:	e066      	b.n	8004fc8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	6a39      	ldr	r1, [r7, #32]
 8004efe:	68f8      	ldr	r0, [r7, #12]
 8004f00:	f000 fa22 	bl	8005348 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00d      	beq.n	8004f26 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0e:	2b04      	cmp	r3, #4
 8004f10:	d107      	bne.n	8004f22 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e06b      	b.n	8004ffe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2a:	781a      	ldrb	r2, [r3, #0]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f36:	1c5a      	adds	r2, r3, #1
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	3b01      	subs	r3, #1
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	f003 0304 	and.w	r3, r3, #4
 8004f60:	2b04      	cmp	r3, #4
 8004f62:	d11b      	bne.n	8004f9c <HAL_I2C_Master_Transmit+0x188>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d017      	beq.n	8004f9c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f70:	781a      	ldrb	r2, [r3, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7c:	1c5a      	adds	r2, r3, #1
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f94:	3b01      	subs	r3, #1
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	6a39      	ldr	r1, [r7, #32]
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f000 fa19 	bl	80053d8 <I2C_WaitOnBTFFlagUntilTimeout>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00d      	beq.n	8004fc8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb0:	2b04      	cmp	r3, #4
 8004fb2:	d107      	bne.n	8004fc4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fc2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e01a      	b.n	8004ffe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d194      	bne.n	8004efa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2220      	movs	r2, #32
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	e000      	b.n	8004ffe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004ffc:	2302      	movs	r3, #2
  }
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3718      	adds	r7, #24
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	00100002 	.word	0x00100002
 800500c:	ffff0000 	.word	0xffff0000

08005010 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b088      	sub	sp, #32
 8005014:	af02      	add	r7, sp, #8
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	607a      	str	r2, [r7, #4]
 800501a:	603b      	str	r3, [r7, #0]
 800501c:	460b      	mov	r3, r1
 800501e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005024:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	2b08      	cmp	r3, #8
 800502a:	d006      	beq.n	800503a <I2C_MasterRequestWrite+0x2a>
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	2b01      	cmp	r3, #1
 8005030:	d003      	beq.n	800503a <I2C_MasterRequestWrite+0x2a>
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005038:	d108      	bne.n	800504c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005048:	601a      	str	r2, [r3, #0]
 800504a:	e00b      	b.n	8005064 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005050:	2b12      	cmp	r3, #18
 8005052:	d107      	bne.n	8005064 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005062:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	9300      	str	r3, [sp, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005070:	68f8      	ldr	r0, [r7, #12]
 8005072:	f000 f84f 	bl	8005114 <I2C_WaitOnFlagUntilTimeout>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00d      	beq.n	8005098 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005086:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800508a:	d103      	bne.n	8005094 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005092:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e035      	b.n	8005104 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050a0:	d108      	bne.n	80050b4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050a2:	897b      	ldrh	r3, [r7, #10]
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	461a      	mov	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80050b0:	611a      	str	r2, [r3, #16]
 80050b2:	e01b      	b.n	80050ec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80050b4:	897b      	ldrh	r3, [r7, #10]
 80050b6:	11db      	asrs	r3, r3, #7
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	f003 0306 	and.w	r3, r3, #6
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	f063 030f 	orn	r3, r3, #15
 80050c4:	b2da      	uxtb	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	490e      	ldr	r1, [pc, #56]	@ (800510c <I2C_MasterRequestWrite+0xfc>)
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f000 f898 	bl	8005208 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d001      	beq.n	80050e2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e010      	b.n	8005104 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80050e2:	897b      	ldrh	r3, [r7, #10]
 80050e4:	b2da      	uxtb	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	4907      	ldr	r1, [pc, #28]	@ (8005110 <I2C_MasterRequestWrite+0x100>)
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f000 f888 	bl	8005208 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e000      	b.n	8005104 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3718      	adds	r7, #24
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	00010008 	.word	0x00010008
 8005110:	00010002 	.word	0x00010002

08005114 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	603b      	str	r3, [r7, #0]
 8005120:	4613      	mov	r3, r2
 8005122:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005124:	e048      	b.n	80051b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800512c:	d044      	beq.n	80051b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800512e:	f7fc f9a5 	bl	800147c <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	683a      	ldr	r2, [r7, #0]
 800513a:	429a      	cmp	r2, r3
 800513c:	d302      	bcc.n	8005144 <I2C_WaitOnFlagUntilTimeout+0x30>
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d139      	bne.n	80051b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	0c1b      	lsrs	r3, r3, #16
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2b01      	cmp	r3, #1
 800514c:	d10d      	bne.n	800516a <I2C_WaitOnFlagUntilTimeout+0x56>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	43da      	mvns	r2, r3
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	4013      	ands	r3, r2
 800515a:	b29b      	uxth	r3, r3
 800515c:	2b00      	cmp	r3, #0
 800515e:	bf0c      	ite	eq
 8005160:	2301      	moveq	r3, #1
 8005162:	2300      	movne	r3, #0
 8005164:	b2db      	uxtb	r3, r3
 8005166:	461a      	mov	r2, r3
 8005168:	e00c      	b.n	8005184 <I2C_WaitOnFlagUntilTimeout+0x70>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	43da      	mvns	r2, r3
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	4013      	ands	r3, r2
 8005176:	b29b      	uxth	r3, r3
 8005178:	2b00      	cmp	r3, #0
 800517a:	bf0c      	ite	eq
 800517c:	2301      	moveq	r3, #1
 800517e:	2300      	movne	r3, #0
 8005180:	b2db      	uxtb	r3, r3
 8005182:	461a      	mov	r2, r3
 8005184:	79fb      	ldrb	r3, [r7, #7]
 8005186:	429a      	cmp	r2, r3
 8005188:	d116      	bne.n	80051b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2220      	movs	r2, #32
 8005194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a4:	f043 0220 	orr.w	r2, r3, #32
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e023      	b.n	8005200 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	0c1b      	lsrs	r3, r3, #16
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d10d      	bne.n	80051de <I2C_WaitOnFlagUntilTimeout+0xca>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	695b      	ldr	r3, [r3, #20]
 80051c8:	43da      	mvns	r2, r3
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	4013      	ands	r3, r2
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	bf0c      	ite	eq
 80051d4:	2301      	moveq	r3, #1
 80051d6:	2300      	movne	r3, #0
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	461a      	mov	r2, r3
 80051dc:	e00c      	b.n	80051f8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	43da      	mvns	r2, r3
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	4013      	ands	r3, r2
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	bf0c      	ite	eq
 80051f0:	2301      	moveq	r3, #1
 80051f2:	2300      	movne	r3, #0
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	461a      	mov	r2, r3
 80051f8:	79fb      	ldrb	r3, [r7, #7]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d093      	beq.n	8005126 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3710      	adds	r7, #16
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
 8005214:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005216:	e071      	b.n	80052fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005222:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005226:	d123      	bne.n	8005270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005236:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005240:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2220      	movs	r2, #32
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800525c:	f043 0204 	orr.w	r2, r3, #4
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e067      	b.n	8005340 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005276:	d041      	beq.n	80052fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005278:	f7fc f900 	bl	800147c <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	429a      	cmp	r2, r3
 8005286:	d302      	bcc.n	800528e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d136      	bne.n	80052fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	0c1b      	lsrs	r3, r3, #16
 8005292:	b2db      	uxtb	r3, r3
 8005294:	2b01      	cmp	r3, #1
 8005296:	d10c      	bne.n	80052b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	43da      	mvns	r2, r3
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	4013      	ands	r3, r2
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	bf14      	ite	ne
 80052aa:	2301      	movne	r3, #1
 80052ac:	2300      	moveq	r3, #0
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	e00b      	b.n	80052ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	43da      	mvns	r2, r3
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	4013      	ands	r3, r2
 80052be:	b29b      	uxth	r3, r3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	bf14      	ite	ne
 80052c4:	2301      	movne	r3, #1
 80052c6:	2300      	moveq	r3, #0
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d016      	beq.n	80052fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2220      	movs	r2, #32
 80052d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e8:	f043 0220 	orr.w	r2, r3, #32
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e021      	b.n	8005340 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	0c1b      	lsrs	r3, r3, #16
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b01      	cmp	r3, #1
 8005304:	d10c      	bne.n	8005320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	695b      	ldr	r3, [r3, #20]
 800530c:	43da      	mvns	r2, r3
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	4013      	ands	r3, r2
 8005312:	b29b      	uxth	r3, r3
 8005314:	2b00      	cmp	r3, #0
 8005316:	bf14      	ite	ne
 8005318:	2301      	movne	r3, #1
 800531a:	2300      	moveq	r3, #0
 800531c:	b2db      	uxtb	r3, r3
 800531e:	e00b      	b.n	8005338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	43da      	mvns	r2, r3
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	4013      	ands	r3, r2
 800532c:	b29b      	uxth	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	bf14      	ite	ne
 8005332:	2301      	movne	r3, #1
 8005334:	2300      	moveq	r3, #0
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b00      	cmp	r3, #0
 800533a:	f47f af6d 	bne.w	8005218 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005354:	e034      	b.n	80053c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f000 f886 	bl	8005468 <I2C_IsAcknowledgeFailed>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d001      	beq.n	8005366 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e034      	b.n	80053d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800536c:	d028      	beq.n	80053c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800536e:	f7fc f885 	bl	800147c <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	68ba      	ldr	r2, [r7, #8]
 800537a:	429a      	cmp	r2, r3
 800537c:	d302      	bcc.n	8005384 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d11d      	bne.n	80053c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800538e:	2b80      	cmp	r3, #128	@ 0x80
 8005390:	d016      	beq.n	80053c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2220      	movs	r2, #32
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ac:	f043 0220 	orr.w	r2, r3, #32
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e007      	b.n	80053d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053ca:	2b80      	cmp	r3, #128	@ 0x80
 80053cc:	d1c3      	bne.n	8005356 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3710      	adds	r7, #16
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053e4:	e034      	b.n	8005450 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f000 f83e 	bl	8005468 <I2C_IsAcknowledgeFailed>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d001      	beq.n	80053f6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e034      	b.n	8005460 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053fc:	d028      	beq.n	8005450 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053fe:	f7fc f83d 	bl	800147c <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	429a      	cmp	r2, r3
 800540c:	d302      	bcc.n	8005414 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d11d      	bne.n	8005450 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	f003 0304 	and.w	r3, r3, #4
 800541e:	2b04      	cmp	r3, #4
 8005420:	d016      	beq.n	8005450 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2220      	movs	r2, #32
 800542c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800543c:	f043 0220 	orr.w	r2, r3, #32
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e007      	b.n	8005460 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	f003 0304 	and.w	r3, r3, #4
 800545a:	2b04      	cmp	r3, #4
 800545c:	d1c3      	bne.n	80053e6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3710      	adds	r7, #16
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800547a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800547e:	d11b      	bne.n	80054b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005488:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2220      	movs	r2, #32
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a4:	f043 0204 	orr.w	r2, r3, #4
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e000      	b.n	80054ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
	...

080054c8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b088      	sub	sp, #32
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e128      	b.n	800572c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d109      	bne.n	80054fa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a90      	ldr	r2, [pc, #576]	@ (8005734 <HAL_I2S_Init+0x26c>)
 80054f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f7fb fb7d 	bl	8000bf4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2202      	movs	r2, #2
 80054fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	69db      	ldr	r3, [r3, #28]
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	6812      	ldr	r2, [r2, #0]
 800550c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005510:	f023 030f 	bic.w	r3, r3, #15
 8005514:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2202      	movs	r2, #2
 800551c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	2b02      	cmp	r3, #2
 8005524:	d060      	beq.n	80055e8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d102      	bne.n	8005534 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800552e:	2310      	movs	r3, #16
 8005530:	617b      	str	r3, [r7, #20]
 8005532:	e001      	b.n	8005538 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005534:	2320      	movs	r3, #32
 8005536:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	2b20      	cmp	r3, #32
 800553e:	d802      	bhi.n	8005546 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	005b      	lsls	r3, r3, #1
 8005544:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005546:	2001      	movs	r0, #1
 8005548:	f001 fabc 	bl	8006ac4 <HAL_RCCEx_GetPeriphCLKFreq>
 800554c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005556:	d125      	bne.n	80055a4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d010      	beq.n	8005582 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	fbb2 f2f3 	udiv	r2, r2, r3
 800556a:	4613      	mov	r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	4413      	add	r3, r2
 8005570:	005b      	lsls	r3, r3, #1
 8005572:	461a      	mov	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	695b      	ldr	r3, [r3, #20]
 8005578:	fbb2 f3f3 	udiv	r3, r2, r3
 800557c:	3305      	adds	r3, #5
 800557e:	613b      	str	r3, [r7, #16]
 8005580:	e01f      	b.n	80055c2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	00db      	lsls	r3, r3, #3
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	fbb2 f2f3 	udiv	r2, r2, r3
 800558c:	4613      	mov	r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	4413      	add	r3, r2
 8005592:	005b      	lsls	r3, r3, #1
 8005594:	461a      	mov	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	fbb2 f3f3 	udiv	r3, r2, r3
 800559e:	3305      	adds	r3, #5
 80055a0:	613b      	str	r3, [r7, #16]
 80055a2:	e00e      	b.n	80055c2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80055ac:	4613      	mov	r3, r2
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	4413      	add	r3, r2
 80055b2:	005b      	lsls	r3, r3, #1
 80055b4:	461a      	mov	r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80055be:	3305      	adds	r3, #5
 80055c0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	4a5c      	ldr	r2, [pc, #368]	@ (8005738 <HAL_I2S_Init+0x270>)
 80055c6:	fba2 2303 	umull	r2, r3, r2, r3
 80055ca:	08db      	lsrs	r3, r3, #3
 80055cc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	f003 0301 	and.w	r3, r3, #1
 80055d4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	085b      	lsrs	r3, r3, #1
 80055de:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	021b      	lsls	r3, r3, #8
 80055e4:	61bb      	str	r3, [r7, #24]
 80055e6:	e003      	b.n	80055f0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80055e8:	2302      	movs	r3, #2
 80055ea:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80055ec:	2300      	movs	r3, #0
 80055ee:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d902      	bls.n	80055fc <HAL_I2S_Init+0x134>
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	2bff      	cmp	r3, #255	@ 0xff
 80055fa:	d907      	bls.n	800560c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005600:	f043 0210 	orr.w	r2, r3, #16
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e08f      	b.n	800572c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	691a      	ldr	r2, [r3, #16]
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	ea42 0103 	orr.w	r1, r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	69fa      	ldr	r2, [r7, #28]
 800561c:	430a      	orrs	r2, r1
 800561e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	69db      	ldr	r3, [r3, #28]
 8005626:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800562a:	f023 030f 	bic.w	r3, r3, #15
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	6851      	ldr	r1, [r2, #4]
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	6892      	ldr	r2, [r2, #8]
 8005636:	4311      	orrs	r1, r2
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	68d2      	ldr	r2, [r2, #12]
 800563c:	4311      	orrs	r1, r2
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	6992      	ldr	r2, [r2, #24]
 8005642:	430a      	orrs	r2, r1
 8005644:	431a      	orrs	r2, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800564e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a1b      	ldr	r3, [r3, #32]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d161      	bne.n	800571c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a38      	ldr	r2, [pc, #224]	@ (800573c <HAL_I2S_Init+0x274>)
 800565c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a37      	ldr	r2, [pc, #220]	@ (8005740 <HAL_I2S_Init+0x278>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d101      	bne.n	800566c <HAL_I2S_Init+0x1a4>
 8005668:	4b36      	ldr	r3, [pc, #216]	@ (8005744 <HAL_I2S_Init+0x27c>)
 800566a:	e001      	b.n	8005670 <HAL_I2S_Init+0x1a8>
 800566c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005670:	69db      	ldr	r3, [r3, #28]
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	6812      	ldr	r2, [r2, #0]
 8005676:	4932      	ldr	r1, [pc, #200]	@ (8005740 <HAL_I2S_Init+0x278>)
 8005678:	428a      	cmp	r2, r1
 800567a:	d101      	bne.n	8005680 <HAL_I2S_Init+0x1b8>
 800567c:	4a31      	ldr	r2, [pc, #196]	@ (8005744 <HAL_I2S_Init+0x27c>)
 800567e:	e001      	b.n	8005684 <HAL_I2S_Init+0x1bc>
 8005680:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005684:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005688:	f023 030f 	bic.w	r3, r3, #15
 800568c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a2b      	ldr	r2, [pc, #172]	@ (8005740 <HAL_I2S_Init+0x278>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d101      	bne.n	800569c <HAL_I2S_Init+0x1d4>
 8005698:	4b2a      	ldr	r3, [pc, #168]	@ (8005744 <HAL_I2S_Init+0x27c>)
 800569a:	e001      	b.n	80056a0 <HAL_I2S_Init+0x1d8>
 800569c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80056a0:	2202      	movs	r2, #2
 80056a2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a25      	ldr	r2, [pc, #148]	@ (8005740 <HAL_I2S_Init+0x278>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d101      	bne.n	80056b2 <HAL_I2S_Init+0x1ea>
 80056ae:	4b25      	ldr	r3, [pc, #148]	@ (8005744 <HAL_I2S_Init+0x27c>)
 80056b0:	e001      	b.n	80056b6 <HAL_I2S_Init+0x1ee>
 80056b2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80056b6:	69db      	ldr	r3, [r3, #28]
 80056b8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056c2:	d003      	beq.n	80056cc <HAL_I2S_Init+0x204>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d103      	bne.n	80056d4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80056cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80056d0:	613b      	str	r3, [r7, #16]
 80056d2:	e001      	b.n	80056d8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80056d4:	2300      	movs	r3, #0
 80056d6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80056e2:	4313      	orrs	r3, r2
 80056e4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80056ec:	4313      	orrs	r3, r2
 80056ee:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80056f6:	4313      	orrs	r3, r2
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	897b      	ldrh	r3, [r7, #10]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	b29b      	uxth	r3, r3
 8005700:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005704:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a0d      	ldr	r2, [pc, #52]	@ (8005740 <HAL_I2S_Init+0x278>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d101      	bne.n	8005714 <HAL_I2S_Init+0x24c>
 8005710:	4b0c      	ldr	r3, [pc, #48]	@ (8005744 <HAL_I2S_Init+0x27c>)
 8005712:	e001      	b.n	8005718 <HAL_I2S_Init+0x250>
 8005714:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005718:	897a      	ldrh	r2, [r7, #10]
 800571a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3720      	adds	r7, #32
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	08005a31 	.word	0x08005a31
 8005738:	cccccccd 	.word	0xcccccccd
 800573c:	08005b45 	.word	0x08005b45
 8005740:	40003800 	.word	0x40003800
 8005744:	40003400 	.word	0x40003400

08005748 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b086      	sub	sp, #24
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	4613      	mov	r3, r2
 8005754:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d002      	beq.n	8005762 <HAL_I2S_Transmit_DMA+0x1a>
 800575c:	88fb      	ldrh	r3, [r7, #6]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e08a      	b.n	800587c <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800576c:	b2db      	uxtb	r3, r3
 800576e:	2b01      	cmp	r3, #1
 8005770:	d001      	beq.n	8005776 <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8005772:	2302      	movs	r3, #2
 8005774:	e082      	b.n	800587c <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b01      	cmp	r3, #1
 8005780:	d101      	bne.n	8005786 <HAL_I2S_Transmit_DMA+0x3e>
 8005782:	2302      	movs	r3, #2
 8005784:	e07a      	b.n	800587c <HAL_I2S_Transmit_DMA+0x134>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2203      	movs	r2, #3
 8005792:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	68ba      	ldr	r2, [r7, #8]
 80057a0:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	69db      	ldr	r3, [r3, #28]
 80057a8:	f003 0307 	and.w	r3, r3, #7
 80057ac:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	2b03      	cmp	r3, #3
 80057b2:	d002      	beq.n	80057ba <HAL_I2S_Transmit_DMA+0x72>
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	2b05      	cmp	r3, #5
 80057b8:	d10a      	bne.n	80057d0 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 80057ba:	88fb      	ldrh	r3, [r7, #6]
 80057bc:	005b      	lsls	r3, r3, #1
 80057be:	b29a      	uxth	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 80057c4:	88fb      	ldrh	r3, [r7, #6]
 80057c6:	005b      	lsls	r3, r3, #1
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80057ce:	e005      	b.n	80057dc <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	88fa      	ldrh	r2, [r7, #6]
 80057d4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	88fa      	ldrh	r2, [r7, #6]
 80057da:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057e0:	4a28      	ldr	r2, [pc, #160]	@ (8005884 <HAL_I2S_Transmit_DMA+0x13c>)
 80057e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057e8:	4a27      	ldr	r2, [pc, #156]	@ (8005888 <HAL_I2S_Transmit_DMA+0x140>)
 80057ea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057f0:	4a26      	ldr	r2, [pc, #152]	@ (800588c <HAL_I2S_Transmit_DMA+0x144>)
 80057f2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80057fc:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005804:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800580a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800580c:	f7fc fc2e 	bl	800206c <HAL_DMA_Start_IT>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00f      	beq.n	8005836 <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800581a:	f043 0208 	orr.w	r2, r3, #8
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e022      	b.n	800587c <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	f003 0302 	and.w	r3, r3, #2
 8005848:	2b00      	cmp	r3, #0
 800584a:	d107      	bne.n	800585c <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	685a      	ldr	r2, [r3, #4]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f042 0202 	orr.w	r2, r2, #2
 800585a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	69db      	ldr	r3, [r3, #28]
 8005862:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005866:	2b00      	cmp	r3, #0
 8005868:	d107      	bne.n	800587a <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	69da      	ldr	r2, [r3, #28]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005878:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3718      	adds	r7, #24
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	0800590f 	.word	0x0800590f
 8005888:	080058cd 	.word	0x080058cd
 800588c:	0800592b 	.word	0x0800592b

08005890 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80058ac:	bf00      	nop
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058d8:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	69db      	ldr	r3, [r3, #28]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d10e      	bne.n	8005900 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	685a      	ldr	r2, [r3, #4]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f022 0202 	bic.w	r2, r2, #2
 80058f0:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2200      	movs	r2, #0
 80058f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8005900:	68f8      	ldr	r0, [r7, #12]
 8005902:	f7fb fb73 	bl	8000fec <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005906:	bf00      	nop
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b084      	sub	sp, #16
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800591a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f7ff ffb7 	bl	8005890 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005922:	bf00      	nop
 8005924:	3710      	adds	r7, #16
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b084      	sub	sp, #16
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005936:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 0203 	bic.w	r2, r2, #3
 8005946:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005960:	f043 0208 	orr.w	r2, r3, #8
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8005968:	68f8      	ldr	r0, [r7, #12]
 800596a:	f7ff ffa5 	bl	80058b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800596e:	bf00      	nop
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005976:	b580      	push	{r7, lr}
 8005978:	b082      	sub	sp, #8
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005982:	881a      	ldrh	r2, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800598e:	1c9a      	adds	r2, r3, #2
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005998:	b29b      	uxth	r3, r3
 800599a:	3b01      	subs	r3, #1
 800599c:	b29a      	uxth	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d10e      	bne.n	80059ca <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	685a      	ldr	r2, [r3, #4]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80059ba:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f7fb fb11 	bl	8000fec <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80059ca:	bf00      	nop
 80059cc:	3708      	adds	r7, #8
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b082      	sub	sp, #8
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68da      	ldr	r2, [r3, #12]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059e4:	b292      	uxth	r2, r2
 80059e6:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ec:	1c9a      	adds	r2, r3, #2
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	3b01      	subs	r3, #1
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d10e      	bne.n	8005a28 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	685a      	ldr	r2, [r3, #4]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005a18:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f7ff ff3e 	bl	80058a4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005a28:	bf00      	nop
 8005a2a:	3708      	adds	r7, #8
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b086      	sub	sp, #24
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	2b04      	cmp	r3, #4
 8005a4a:	d13a      	bne.n	8005ac2 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	f003 0301 	and.w	r3, r3, #1
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d109      	bne.n	8005a6a <I2S_IRQHandler+0x3a>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a60:	2b40      	cmp	r3, #64	@ 0x40
 8005a62:	d102      	bne.n	8005a6a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f7ff ffb4 	bl	80059d2 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a70:	2b40      	cmp	r3, #64	@ 0x40
 8005a72:	d126      	bne.n	8005ac2 <I2S_IRQHandler+0x92>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f003 0320 	and.w	r3, r3, #32
 8005a7e:	2b20      	cmp	r3, #32
 8005a80:	d11f      	bne.n	8005ac2 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	685a      	ldr	r2, [r3, #4]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005a90:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005a92:	2300      	movs	r3, #0
 8005a94:	613b      	str	r3, [r7, #16]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	613b      	str	r3, [r7, #16]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	613b      	str	r3, [r7, #16]
 8005aa6:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ab4:	f043 0202 	orr.w	r2, r3, #2
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f7ff fefb 	bl	80058b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b03      	cmp	r3, #3
 8005acc:	d136      	bne.n	8005b3c <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	f003 0302 	and.w	r3, r3, #2
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d109      	bne.n	8005aec <I2S_IRQHandler+0xbc>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ae2:	2b80      	cmp	r3, #128	@ 0x80
 8005ae4:	d102      	bne.n	8005aec <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f7ff ff45 	bl	8005976 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	f003 0308 	and.w	r3, r3, #8
 8005af2:	2b08      	cmp	r3, #8
 8005af4:	d122      	bne.n	8005b3c <I2S_IRQHandler+0x10c>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f003 0320 	and.w	r3, r3, #32
 8005b00:	2b20      	cmp	r3, #32
 8005b02:	d11b      	bne.n	8005b3c <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	685a      	ldr	r2, [r3, #4]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005b12:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005b14:	2300      	movs	r3, #0
 8005b16:	60fb      	str	r3, [r7, #12]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	60fb      	str	r3, [r7, #12]
 8005b20:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b2e:	f043 0204 	orr.w	r2, r3, #4
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7ff febe 	bl	80058b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005b3c:	bf00      	nop
 8005b3e:	3718      	adds	r7, #24
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b088      	sub	sp, #32
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a92      	ldr	r2, [pc, #584]	@ (8005da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d101      	bne.n	8005b62 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005b5e:	4b92      	ldr	r3, [pc, #584]	@ (8005da8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005b60:	e001      	b.n	8005b66 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005b62:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a8b      	ldr	r2, [pc, #556]	@ (8005da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d101      	bne.n	8005b80 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005b7c:	4b8a      	ldr	r3, [pc, #552]	@ (8005da8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005b7e:	e001      	b.n	8005b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005b80:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b90:	d004      	beq.n	8005b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f040 8099 	bne.w	8005cce <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	f003 0302 	and.w	r3, r3, #2
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d107      	bne.n	8005bb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d002      	beq.n	8005bb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 f925 	bl	8005e00 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	f003 0301 	and.w	r3, r3, #1
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d107      	bne.n	8005bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d002      	beq.n	8005bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 f9c8 	bl	8005f60 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bd6:	2b40      	cmp	r3, #64	@ 0x40
 8005bd8:	d13a      	bne.n	8005c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	f003 0320 	and.w	r3, r3, #32
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d035      	beq.n	8005c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a6e      	ldr	r2, [pc, #440]	@ (8005da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d101      	bne.n	8005bf2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005bee:	4b6e      	ldr	r3, [pc, #440]	@ (8005da8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005bf0:	e001      	b.n	8005bf6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005bf2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005bf6:	685a      	ldr	r2, [r3, #4]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4969      	ldr	r1, [pc, #420]	@ (8005da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005bfe:	428b      	cmp	r3, r1
 8005c00:	d101      	bne.n	8005c06 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005c02:	4b69      	ldr	r3, [pc, #420]	@ (8005da8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005c04:	e001      	b.n	8005c0a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005c06:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c0a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005c0e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005c1e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005c20:	2300      	movs	r3, #0
 8005c22:	60fb      	str	r3, [r7, #12]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	60fb      	str	r3, [r7, #12]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	60fb      	str	r3, [r7, #12]
 8005c34:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c42:	f043 0202 	orr.w	r2, r3, #2
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f7ff fe34 	bl	80058b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	f003 0308 	and.w	r3, r3, #8
 8005c56:	2b08      	cmp	r3, #8
 8005c58:	f040 80c3 	bne.w	8005de2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	f003 0320 	and.w	r3, r3, #32
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	f000 80bd 	beq.w	8005de2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	685a      	ldr	r2, [r3, #4]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005c76:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a49      	ldr	r2, [pc, #292]	@ (8005da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d101      	bne.n	8005c86 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005c82:	4b49      	ldr	r3, [pc, #292]	@ (8005da8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005c84:	e001      	b.n	8005c8a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005c86:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c8a:	685a      	ldr	r2, [r3, #4]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4944      	ldr	r1, [pc, #272]	@ (8005da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005c92:	428b      	cmp	r3, r1
 8005c94:	d101      	bne.n	8005c9a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005c96:	4b44      	ldr	r3, [pc, #272]	@ (8005da8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005c98:	e001      	b.n	8005c9e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005c9a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c9e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005ca2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	60bb      	str	r3, [r7, #8]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	60bb      	str	r3, [r7, #8]
 8005cb0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cbe:	f043 0204 	orr.w	r2, r3, #4
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f7ff fdf6 	bl	80058b8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005ccc:	e089      	b.n	8005de2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	f003 0302 	and.w	r3, r3, #2
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	d107      	bne.n	8005ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d002      	beq.n	8005ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 f8be 	bl	8005e64 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d107      	bne.n	8005d02 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d002      	beq.n	8005d02 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 f8fd 	bl	8005efc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d08:	2b40      	cmp	r3, #64	@ 0x40
 8005d0a:	d12f      	bne.n	8005d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	f003 0320 	and.w	r3, r3, #32
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d02a      	beq.n	8005d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005d24:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a1e      	ldr	r2, [pc, #120]	@ (8005da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d101      	bne.n	8005d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005d30:	4b1d      	ldr	r3, [pc, #116]	@ (8005da8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d32:	e001      	b.n	8005d38 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005d34:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005d38:	685a      	ldr	r2, [r3, #4]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4919      	ldr	r1, [pc, #100]	@ (8005da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d40:	428b      	cmp	r3, r1
 8005d42:	d101      	bne.n	8005d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005d44:	4b18      	ldr	r3, [pc, #96]	@ (8005da8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d46:	e001      	b.n	8005d4c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005d48:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005d4c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005d50:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d5e:	f043 0202 	orr.w	r2, r3, #2
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7ff fda6 	bl	80058b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	f003 0308 	and.w	r3, r3, #8
 8005d72:	2b08      	cmp	r3, #8
 8005d74:	d136      	bne.n	8005de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	f003 0320 	and.w	r3, r3, #32
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d031      	beq.n	8005de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a07      	ldr	r2, [pc, #28]	@ (8005da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d101      	bne.n	8005d8e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005d8a:	4b07      	ldr	r3, [pc, #28]	@ (8005da8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d8c:	e001      	b.n	8005d92 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005d8e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4902      	ldr	r1, [pc, #8]	@ (8005da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d9a:	428b      	cmp	r3, r1
 8005d9c:	d106      	bne.n	8005dac <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005d9e:	4b02      	ldr	r3, [pc, #8]	@ (8005da8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005da0:	e006      	b.n	8005db0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005da2:	bf00      	nop
 8005da4:	40003800 	.word	0x40003800
 8005da8:	40003400 	.word	0x40003400
 8005dac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005db0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005db4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	685a      	ldr	r2, [r3, #4]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005dc4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dd2:	f043 0204 	orr.w	r2, r3, #4
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f7ff fd6c 	bl	80058b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005de0:	e000      	b.n	8005de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005de2:	bf00      	nop
}
 8005de4:	bf00      	nop
 8005de6:	3720      	adds	r7, #32
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e0c:	1c99      	adds	r1, r3, #2
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	6251      	str	r1, [r2, #36]	@ 0x24
 8005e12:	881a      	ldrh	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	3b01      	subs	r3, #1
 8005e22:	b29a      	uxth	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d113      	bne.n	8005e5a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	685a      	ldr	r2, [r3, #4]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005e40:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d106      	bne.n	8005e5a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f7ff ffc9 	bl	8005dec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005e5a:	bf00      	nop
 8005e5c:	3708      	adds	r7, #8
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
	...

08005e64 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e70:	1c99      	adds	r1, r3, #2
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	6251      	str	r1, [r2, #36]	@ 0x24
 8005e76:	8819      	ldrh	r1, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a1d      	ldr	r2, [pc, #116]	@ (8005ef4 <I2SEx_TxISR_I2SExt+0x90>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d101      	bne.n	8005e86 <I2SEx_TxISR_I2SExt+0x22>
 8005e82:	4b1d      	ldr	r3, [pc, #116]	@ (8005ef8 <I2SEx_TxISR_I2SExt+0x94>)
 8005e84:	e001      	b.n	8005e8a <I2SEx_TxISR_I2SExt+0x26>
 8005e86:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e8a:	460a      	mov	r2, r1
 8005e8c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	3b01      	subs	r3, #1
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d121      	bne.n	8005eea <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a12      	ldr	r2, [pc, #72]	@ (8005ef4 <I2SEx_TxISR_I2SExt+0x90>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d101      	bne.n	8005eb4 <I2SEx_TxISR_I2SExt+0x50>
 8005eb0:	4b11      	ldr	r3, [pc, #68]	@ (8005ef8 <I2SEx_TxISR_I2SExt+0x94>)
 8005eb2:	e001      	b.n	8005eb8 <I2SEx_TxISR_I2SExt+0x54>
 8005eb4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005eb8:	685a      	ldr	r2, [r3, #4]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	490d      	ldr	r1, [pc, #52]	@ (8005ef4 <I2SEx_TxISR_I2SExt+0x90>)
 8005ec0:	428b      	cmp	r3, r1
 8005ec2:	d101      	bne.n	8005ec8 <I2SEx_TxISR_I2SExt+0x64>
 8005ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8005ef8 <I2SEx_TxISR_I2SExt+0x94>)
 8005ec6:	e001      	b.n	8005ecc <I2SEx_TxISR_I2SExt+0x68>
 8005ec8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ecc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005ed0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d106      	bne.n	8005eea <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f7ff ff81 	bl	8005dec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005eea:	bf00      	nop
 8005eec:	3708      	adds	r7, #8
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	40003800 	.word	0x40003800
 8005ef8:	40003400 	.word	0x40003400

08005efc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68d8      	ldr	r0, [r3, #12]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f0e:	1c99      	adds	r1, r3, #2
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005f14:	b282      	uxth	r2, r0
 8005f16:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	b29a      	uxth	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d113      	bne.n	8005f58 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	685a      	ldr	r2, [r3, #4]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005f3e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d106      	bne.n	8005f58 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f7ff ff4a 	bl	8005dec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005f58:	bf00      	nop
 8005f5a:	3708      	adds	r7, #8
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a20      	ldr	r2, [pc, #128]	@ (8005ff0 <I2SEx_RxISR_I2SExt+0x90>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d101      	bne.n	8005f76 <I2SEx_RxISR_I2SExt+0x16>
 8005f72:	4b20      	ldr	r3, [pc, #128]	@ (8005ff4 <I2SEx_RxISR_I2SExt+0x94>)
 8005f74:	e001      	b.n	8005f7a <I2SEx_RxISR_I2SExt+0x1a>
 8005f76:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f7a:	68d8      	ldr	r0, [r3, #12]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f80:	1c99      	adds	r1, r3, #2
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005f86:	b282      	uxth	r2, r0
 8005f88:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	3b01      	subs	r3, #1
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d121      	bne.n	8005fe6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a12      	ldr	r2, [pc, #72]	@ (8005ff0 <I2SEx_RxISR_I2SExt+0x90>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d101      	bne.n	8005fb0 <I2SEx_RxISR_I2SExt+0x50>
 8005fac:	4b11      	ldr	r3, [pc, #68]	@ (8005ff4 <I2SEx_RxISR_I2SExt+0x94>)
 8005fae:	e001      	b.n	8005fb4 <I2SEx_RxISR_I2SExt+0x54>
 8005fb0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005fb4:	685a      	ldr	r2, [r3, #4]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	490d      	ldr	r1, [pc, #52]	@ (8005ff0 <I2SEx_RxISR_I2SExt+0x90>)
 8005fbc:	428b      	cmp	r3, r1
 8005fbe:	d101      	bne.n	8005fc4 <I2SEx_RxISR_I2SExt+0x64>
 8005fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8005ff4 <I2SEx_RxISR_I2SExt+0x94>)
 8005fc2:	e001      	b.n	8005fc8 <I2SEx_RxISR_I2SExt+0x68>
 8005fc4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005fc8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005fcc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d106      	bne.n	8005fe6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f7ff ff03 	bl	8005dec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005fe6:	bf00      	nop
 8005fe8:	3708      	adds	r7, #8
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	40003800 	.word	0x40003800
 8005ff4:	40003400 	.word	0x40003400

08005ff8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b086      	sub	sp, #24
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e267      	b.n	80064da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	d075      	beq.n	8006102 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006016:	4b88      	ldr	r3, [pc, #544]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f003 030c 	and.w	r3, r3, #12
 800601e:	2b04      	cmp	r3, #4
 8006020:	d00c      	beq.n	800603c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006022:	4b85      	ldr	r3, [pc, #532]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800602a:	2b08      	cmp	r3, #8
 800602c:	d112      	bne.n	8006054 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800602e:	4b82      	ldr	r3, [pc, #520]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006036:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800603a:	d10b      	bne.n	8006054 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800603c:	4b7e      	ldr	r3, [pc, #504]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d05b      	beq.n	8006100 <HAL_RCC_OscConfig+0x108>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d157      	bne.n	8006100 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e242      	b.n	80064da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800605c:	d106      	bne.n	800606c <HAL_RCC_OscConfig+0x74>
 800605e:	4b76      	ldr	r3, [pc, #472]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a75      	ldr	r2, [pc, #468]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 8006064:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006068:	6013      	str	r3, [r2, #0]
 800606a:	e01d      	b.n	80060a8 <HAL_RCC_OscConfig+0xb0>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006074:	d10c      	bne.n	8006090 <HAL_RCC_OscConfig+0x98>
 8006076:	4b70      	ldr	r3, [pc, #448]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a6f      	ldr	r2, [pc, #444]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 800607c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006080:	6013      	str	r3, [r2, #0]
 8006082:	4b6d      	ldr	r3, [pc, #436]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a6c      	ldr	r2, [pc, #432]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 8006088:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800608c:	6013      	str	r3, [r2, #0]
 800608e:	e00b      	b.n	80060a8 <HAL_RCC_OscConfig+0xb0>
 8006090:	4b69      	ldr	r3, [pc, #420]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a68      	ldr	r2, [pc, #416]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 8006096:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800609a:	6013      	str	r3, [r2, #0]
 800609c:	4b66      	ldr	r3, [pc, #408]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a65      	ldr	r2, [pc, #404]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 80060a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80060a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d013      	beq.n	80060d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060b0:	f7fb f9e4 	bl	800147c <HAL_GetTick>
 80060b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060b6:	e008      	b.n	80060ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060b8:	f7fb f9e0 	bl	800147c <HAL_GetTick>
 80060bc:	4602      	mov	r2, r0
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	2b64      	cmp	r3, #100	@ 0x64
 80060c4:	d901      	bls.n	80060ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e207      	b.n	80064da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060ca:	4b5b      	ldr	r3, [pc, #364]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d0f0      	beq.n	80060b8 <HAL_RCC_OscConfig+0xc0>
 80060d6:	e014      	b.n	8006102 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060d8:	f7fb f9d0 	bl	800147c <HAL_GetTick>
 80060dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060de:	e008      	b.n	80060f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060e0:	f7fb f9cc 	bl	800147c <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	2b64      	cmp	r3, #100	@ 0x64
 80060ec:	d901      	bls.n	80060f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e1f3      	b.n	80064da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060f2:	4b51      	ldr	r3, [pc, #324]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1f0      	bne.n	80060e0 <HAL_RCC_OscConfig+0xe8>
 80060fe:	e000      	b.n	8006102 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 0302 	and.w	r3, r3, #2
 800610a:	2b00      	cmp	r3, #0
 800610c:	d063      	beq.n	80061d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800610e:	4b4a      	ldr	r3, [pc, #296]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f003 030c 	and.w	r3, r3, #12
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00b      	beq.n	8006132 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800611a:	4b47      	ldr	r3, [pc, #284]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006122:	2b08      	cmp	r3, #8
 8006124:	d11c      	bne.n	8006160 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006126:	4b44      	ldr	r3, [pc, #272]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d116      	bne.n	8006160 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006132:	4b41      	ldr	r3, [pc, #260]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 0302 	and.w	r3, r3, #2
 800613a:	2b00      	cmp	r3, #0
 800613c:	d005      	beq.n	800614a <HAL_RCC_OscConfig+0x152>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	2b01      	cmp	r3, #1
 8006144:	d001      	beq.n	800614a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e1c7      	b.n	80064da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800614a:	4b3b      	ldr	r3, [pc, #236]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	00db      	lsls	r3, r3, #3
 8006158:	4937      	ldr	r1, [pc, #220]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 800615a:	4313      	orrs	r3, r2
 800615c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800615e:	e03a      	b.n	80061d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d020      	beq.n	80061aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006168:	4b34      	ldr	r3, [pc, #208]	@ (800623c <HAL_RCC_OscConfig+0x244>)
 800616a:	2201      	movs	r2, #1
 800616c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800616e:	f7fb f985 	bl	800147c <HAL_GetTick>
 8006172:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006174:	e008      	b.n	8006188 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006176:	f7fb f981 	bl	800147c <HAL_GetTick>
 800617a:	4602      	mov	r2, r0
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	2b02      	cmp	r3, #2
 8006182:	d901      	bls.n	8006188 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	e1a8      	b.n	80064da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006188:	4b2b      	ldr	r3, [pc, #172]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 0302 	and.w	r3, r3, #2
 8006190:	2b00      	cmp	r3, #0
 8006192:	d0f0      	beq.n	8006176 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006194:	4b28      	ldr	r3, [pc, #160]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	00db      	lsls	r3, r3, #3
 80061a2:	4925      	ldr	r1, [pc, #148]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 80061a4:	4313      	orrs	r3, r2
 80061a6:	600b      	str	r3, [r1, #0]
 80061a8:	e015      	b.n	80061d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061aa:	4b24      	ldr	r3, [pc, #144]	@ (800623c <HAL_RCC_OscConfig+0x244>)
 80061ac:	2200      	movs	r2, #0
 80061ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b0:	f7fb f964 	bl	800147c <HAL_GetTick>
 80061b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061b6:	e008      	b.n	80061ca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061b8:	f7fb f960 	bl	800147c <HAL_GetTick>
 80061bc:	4602      	mov	r2, r0
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d901      	bls.n	80061ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e187      	b.n	80064da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061ca:	4b1b      	ldr	r3, [pc, #108]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0302 	and.w	r3, r3, #2
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1f0      	bne.n	80061b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0308 	and.w	r3, r3, #8
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d036      	beq.n	8006250 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d016      	beq.n	8006218 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061ea:	4b15      	ldr	r3, [pc, #84]	@ (8006240 <HAL_RCC_OscConfig+0x248>)
 80061ec:	2201      	movs	r2, #1
 80061ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061f0:	f7fb f944 	bl	800147c <HAL_GetTick>
 80061f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061f6:	e008      	b.n	800620a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061f8:	f7fb f940 	bl	800147c <HAL_GetTick>
 80061fc:	4602      	mov	r2, r0
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	2b02      	cmp	r3, #2
 8006204:	d901      	bls.n	800620a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	e167      	b.n	80064da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800620a:	4b0b      	ldr	r3, [pc, #44]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 800620c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800620e:	f003 0302 	and.w	r3, r3, #2
 8006212:	2b00      	cmp	r3, #0
 8006214:	d0f0      	beq.n	80061f8 <HAL_RCC_OscConfig+0x200>
 8006216:	e01b      	b.n	8006250 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006218:	4b09      	ldr	r3, [pc, #36]	@ (8006240 <HAL_RCC_OscConfig+0x248>)
 800621a:	2200      	movs	r2, #0
 800621c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800621e:	f7fb f92d 	bl	800147c <HAL_GetTick>
 8006222:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006224:	e00e      	b.n	8006244 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006226:	f7fb f929 	bl	800147c <HAL_GetTick>
 800622a:	4602      	mov	r2, r0
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	2b02      	cmp	r3, #2
 8006232:	d907      	bls.n	8006244 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006234:	2303      	movs	r3, #3
 8006236:	e150      	b.n	80064da <HAL_RCC_OscConfig+0x4e2>
 8006238:	40023800 	.word	0x40023800
 800623c:	42470000 	.word	0x42470000
 8006240:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006244:	4b88      	ldr	r3, [pc, #544]	@ (8006468 <HAL_RCC_OscConfig+0x470>)
 8006246:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006248:	f003 0302 	and.w	r3, r3, #2
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1ea      	bne.n	8006226 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0304 	and.w	r3, r3, #4
 8006258:	2b00      	cmp	r3, #0
 800625a:	f000 8097 	beq.w	800638c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800625e:	2300      	movs	r3, #0
 8006260:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006262:	4b81      	ldr	r3, [pc, #516]	@ (8006468 <HAL_RCC_OscConfig+0x470>)
 8006264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006266:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800626a:	2b00      	cmp	r3, #0
 800626c:	d10f      	bne.n	800628e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800626e:	2300      	movs	r3, #0
 8006270:	60bb      	str	r3, [r7, #8]
 8006272:	4b7d      	ldr	r3, [pc, #500]	@ (8006468 <HAL_RCC_OscConfig+0x470>)
 8006274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006276:	4a7c      	ldr	r2, [pc, #496]	@ (8006468 <HAL_RCC_OscConfig+0x470>)
 8006278:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800627c:	6413      	str	r3, [r2, #64]	@ 0x40
 800627e:	4b7a      	ldr	r3, [pc, #488]	@ (8006468 <HAL_RCC_OscConfig+0x470>)
 8006280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006286:	60bb      	str	r3, [r7, #8]
 8006288:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800628a:	2301      	movs	r3, #1
 800628c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800628e:	4b77      	ldr	r3, [pc, #476]	@ (800646c <HAL_RCC_OscConfig+0x474>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006296:	2b00      	cmp	r3, #0
 8006298:	d118      	bne.n	80062cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800629a:	4b74      	ldr	r3, [pc, #464]	@ (800646c <HAL_RCC_OscConfig+0x474>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a73      	ldr	r2, [pc, #460]	@ (800646c <HAL_RCC_OscConfig+0x474>)
 80062a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062a6:	f7fb f8e9 	bl	800147c <HAL_GetTick>
 80062aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062ac:	e008      	b.n	80062c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062ae:	f7fb f8e5 	bl	800147c <HAL_GetTick>
 80062b2:	4602      	mov	r2, r0
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d901      	bls.n	80062c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80062bc:	2303      	movs	r3, #3
 80062be:	e10c      	b.n	80064da <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062c0:	4b6a      	ldr	r3, [pc, #424]	@ (800646c <HAL_RCC_OscConfig+0x474>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d0f0      	beq.n	80062ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d106      	bne.n	80062e2 <HAL_RCC_OscConfig+0x2ea>
 80062d4:	4b64      	ldr	r3, [pc, #400]	@ (8006468 <HAL_RCC_OscConfig+0x470>)
 80062d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062d8:	4a63      	ldr	r2, [pc, #396]	@ (8006468 <HAL_RCC_OscConfig+0x470>)
 80062da:	f043 0301 	orr.w	r3, r3, #1
 80062de:	6713      	str	r3, [r2, #112]	@ 0x70
 80062e0:	e01c      	b.n	800631c <HAL_RCC_OscConfig+0x324>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	2b05      	cmp	r3, #5
 80062e8:	d10c      	bne.n	8006304 <HAL_RCC_OscConfig+0x30c>
 80062ea:	4b5f      	ldr	r3, [pc, #380]	@ (8006468 <HAL_RCC_OscConfig+0x470>)
 80062ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062ee:	4a5e      	ldr	r2, [pc, #376]	@ (8006468 <HAL_RCC_OscConfig+0x470>)
 80062f0:	f043 0304 	orr.w	r3, r3, #4
 80062f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80062f6:	4b5c      	ldr	r3, [pc, #368]	@ (8006468 <HAL_RCC_OscConfig+0x470>)
 80062f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062fa:	4a5b      	ldr	r2, [pc, #364]	@ (8006468 <HAL_RCC_OscConfig+0x470>)
 80062fc:	f043 0301 	orr.w	r3, r3, #1
 8006300:	6713      	str	r3, [r2, #112]	@ 0x70
 8006302:	e00b      	b.n	800631c <HAL_RCC_OscConfig+0x324>
 8006304:	4b58      	ldr	r3, [pc, #352]	@ (8006468 <HAL_RCC_OscConfig+0x470>)
 8006306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006308:	4a57      	ldr	r2, [pc, #348]	@ (8006468 <HAL_RCC_OscConfig+0x470>)
 800630a:	f023 0301 	bic.w	r3, r3, #1
 800630e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006310:	4b55      	ldr	r3, [pc, #340]	@ (8006468 <HAL_RCC_OscConfig+0x470>)
 8006312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006314:	4a54      	ldr	r2, [pc, #336]	@ (8006468 <HAL_RCC_OscConfig+0x470>)
 8006316:	f023 0304 	bic.w	r3, r3, #4
 800631a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d015      	beq.n	8006350 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006324:	f7fb f8aa 	bl	800147c <HAL_GetTick>
 8006328:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800632a:	e00a      	b.n	8006342 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800632c:	f7fb f8a6 	bl	800147c <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	f241 3288 	movw	r2, #5000	@ 0x1388
 800633a:	4293      	cmp	r3, r2
 800633c:	d901      	bls.n	8006342 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e0cb      	b.n	80064da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006342:	4b49      	ldr	r3, [pc, #292]	@ (8006468 <HAL_RCC_OscConfig+0x470>)
 8006344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006346:	f003 0302 	and.w	r3, r3, #2
 800634a:	2b00      	cmp	r3, #0
 800634c:	d0ee      	beq.n	800632c <HAL_RCC_OscConfig+0x334>
 800634e:	e014      	b.n	800637a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006350:	f7fb f894 	bl	800147c <HAL_GetTick>
 8006354:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006356:	e00a      	b.n	800636e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006358:	f7fb f890 	bl	800147c <HAL_GetTick>
 800635c:	4602      	mov	r2, r0
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006366:	4293      	cmp	r3, r2
 8006368:	d901      	bls.n	800636e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e0b5      	b.n	80064da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800636e:	4b3e      	ldr	r3, [pc, #248]	@ (8006468 <HAL_RCC_OscConfig+0x470>)
 8006370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006372:	f003 0302 	and.w	r3, r3, #2
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1ee      	bne.n	8006358 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800637a:	7dfb      	ldrb	r3, [r7, #23]
 800637c:	2b01      	cmp	r3, #1
 800637e:	d105      	bne.n	800638c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006380:	4b39      	ldr	r3, [pc, #228]	@ (8006468 <HAL_RCC_OscConfig+0x470>)
 8006382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006384:	4a38      	ldr	r2, [pc, #224]	@ (8006468 <HAL_RCC_OscConfig+0x470>)
 8006386:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800638a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	2b00      	cmp	r3, #0
 8006392:	f000 80a1 	beq.w	80064d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006396:	4b34      	ldr	r3, [pc, #208]	@ (8006468 <HAL_RCC_OscConfig+0x470>)
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f003 030c 	and.w	r3, r3, #12
 800639e:	2b08      	cmp	r3, #8
 80063a0:	d05c      	beq.n	800645c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d141      	bne.n	800642e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063aa:	4b31      	ldr	r3, [pc, #196]	@ (8006470 <HAL_RCC_OscConfig+0x478>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063b0:	f7fb f864 	bl	800147c <HAL_GetTick>
 80063b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063b6:	e008      	b.n	80063ca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063b8:	f7fb f860 	bl	800147c <HAL_GetTick>
 80063bc:	4602      	mov	r2, r0
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d901      	bls.n	80063ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e087      	b.n	80064da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063ca:	4b27      	ldr	r3, [pc, #156]	@ (8006468 <HAL_RCC_OscConfig+0x470>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1f0      	bne.n	80063b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	69da      	ldr	r2, [r3, #28]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	431a      	orrs	r2, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e4:	019b      	lsls	r3, r3, #6
 80063e6:	431a      	orrs	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ec:	085b      	lsrs	r3, r3, #1
 80063ee:	3b01      	subs	r3, #1
 80063f0:	041b      	lsls	r3, r3, #16
 80063f2:	431a      	orrs	r2, r3
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063f8:	061b      	lsls	r3, r3, #24
 80063fa:	491b      	ldr	r1, [pc, #108]	@ (8006468 <HAL_RCC_OscConfig+0x470>)
 80063fc:	4313      	orrs	r3, r2
 80063fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006400:	4b1b      	ldr	r3, [pc, #108]	@ (8006470 <HAL_RCC_OscConfig+0x478>)
 8006402:	2201      	movs	r2, #1
 8006404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006406:	f7fb f839 	bl	800147c <HAL_GetTick>
 800640a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800640c:	e008      	b.n	8006420 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800640e:	f7fb f835 	bl	800147c <HAL_GetTick>
 8006412:	4602      	mov	r2, r0
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	2b02      	cmp	r3, #2
 800641a:	d901      	bls.n	8006420 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	e05c      	b.n	80064da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006420:	4b11      	ldr	r3, [pc, #68]	@ (8006468 <HAL_RCC_OscConfig+0x470>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006428:	2b00      	cmp	r3, #0
 800642a:	d0f0      	beq.n	800640e <HAL_RCC_OscConfig+0x416>
 800642c:	e054      	b.n	80064d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800642e:	4b10      	ldr	r3, [pc, #64]	@ (8006470 <HAL_RCC_OscConfig+0x478>)
 8006430:	2200      	movs	r2, #0
 8006432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006434:	f7fb f822 	bl	800147c <HAL_GetTick>
 8006438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800643a:	e008      	b.n	800644e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800643c:	f7fb f81e 	bl	800147c <HAL_GetTick>
 8006440:	4602      	mov	r2, r0
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	2b02      	cmp	r3, #2
 8006448:	d901      	bls.n	800644e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e045      	b.n	80064da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800644e:	4b06      	ldr	r3, [pc, #24]	@ (8006468 <HAL_RCC_OscConfig+0x470>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1f0      	bne.n	800643c <HAL_RCC_OscConfig+0x444>
 800645a:	e03d      	b.n	80064d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	699b      	ldr	r3, [r3, #24]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d107      	bne.n	8006474 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e038      	b.n	80064da <HAL_RCC_OscConfig+0x4e2>
 8006468:	40023800 	.word	0x40023800
 800646c:	40007000 	.word	0x40007000
 8006470:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006474:	4b1b      	ldr	r3, [pc, #108]	@ (80064e4 <HAL_RCC_OscConfig+0x4ec>)
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	2b01      	cmp	r3, #1
 8006480:	d028      	beq.n	80064d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800648c:	429a      	cmp	r2, r3
 800648e:	d121      	bne.n	80064d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800649a:	429a      	cmp	r2, r3
 800649c:	d11a      	bne.n	80064d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80064a4:	4013      	ands	r3, r2
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80064aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d111      	bne.n	80064d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ba:	085b      	lsrs	r3, r3, #1
 80064bc:	3b01      	subs	r3, #1
 80064be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d107      	bne.n	80064d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d001      	beq.n	80064d8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e000      	b.n	80064da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3718      	adds	r7, #24
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	40023800 	.word	0x40023800

080064e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d101      	bne.n	80064fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e0cc      	b.n	8006696 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80064fc:	4b68      	ldr	r3, [pc, #416]	@ (80066a0 <HAL_RCC_ClockConfig+0x1b8>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 0307 	and.w	r3, r3, #7
 8006504:	683a      	ldr	r2, [r7, #0]
 8006506:	429a      	cmp	r2, r3
 8006508:	d90c      	bls.n	8006524 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800650a:	4b65      	ldr	r3, [pc, #404]	@ (80066a0 <HAL_RCC_ClockConfig+0x1b8>)
 800650c:	683a      	ldr	r2, [r7, #0]
 800650e:	b2d2      	uxtb	r2, r2
 8006510:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006512:	4b63      	ldr	r3, [pc, #396]	@ (80066a0 <HAL_RCC_ClockConfig+0x1b8>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0307 	and.w	r3, r3, #7
 800651a:	683a      	ldr	r2, [r7, #0]
 800651c:	429a      	cmp	r2, r3
 800651e:	d001      	beq.n	8006524 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	e0b8      	b.n	8006696 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 0302 	and.w	r3, r3, #2
 800652c:	2b00      	cmp	r3, #0
 800652e:	d020      	beq.n	8006572 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 0304 	and.w	r3, r3, #4
 8006538:	2b00      	cmp	r3, #0
 800653a:	d005      	beq.n	8006548 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800653c:	4b59      	ldr	r3, [pc, #356]	@ (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	4a58      	ldr	r2, [pc, #352]	@ (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006542:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006546:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 0308 	and.w	r3, r3, #8
 8006550:	2b00      	cmp	r3, #0
 8006552:	d005      	beq.n	8006560 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006554:	4b53      	ldr	r3, [pc, #332]	@ (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	4a52      	ldr	r2, [pc, #328]	@ (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 800655a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800655e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006560:	4b50      	ldr	r3, [pc, #320]	@ (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	494d      	ldr	r1, [pc, #308]	@ (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 800656e:	4313      	orrs	r3, r2
 8006570:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0301 	and.w	r3, r3, #1
 800657a:	2b00      	cmp	r3, #0
 800657c:	d044      	beq.n	8006608 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	2b01      	cmp	r3, #1
 8006584:	d107      	bne.n	8006596 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006586:	4b47      	ldr	r3, [pc, #284]	@ (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800658e:	2b00      	cmp	r3, #0
 8006590:	d119      	bne.n	80065c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e07f      	b.n	8006696 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	2b02      	cmp	r3, #2
 800659c:	d003      	beq.n	80065a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065a2:	2b03      	cmp	r3, #3
 80065a4:	d107      	bne.n	80065b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065a6:	4b3f      	ldr	r3, [pc, #252]	@ (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d109      	bne.n	80065c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e06f      	b.n	8006696 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065b6:	4b3b      	ldr	r3, [pc, #236]	@ (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0302 	and.w	r3, r3, #2
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d101      	bne.n	80065c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e067      	b.n	8006696 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065c6:	4b37      	ldr	r3, [pc, #220]	@ (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	f023 0203 	bic.w	r2, r3, #3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	4934      	ldr	r1, [pc, #208]	@ (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 80065d4:	4313      	orrs	r3, r2
 80065d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065d8:	f7fa ff50 	bl	800147c <HAL_GetTick>
 80065dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065de:	e00a      	b.n	80065f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065e0:	f7fa ff4c 	bl	800147c <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d901      	bls.n	80065f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e04f      	b.n	8006696 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065f6:	4b2b      	ldr	r3, [pc, #172]	@ (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	f003 020c 	and.w	r2, r3, #12
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	429a      	cmp	r2, r3
 8006606:	d1eb      	bne.n	80065e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006608:	4b25      	ldr	r3, [pc, #148]	@ (80066a0 <HAL_RCC_ClockConfig+0x1b8>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0307 	and.w	r3, r3, #7
 8006610:	683a      	ldr	r2, [r7, #0]
 8006612:	429a      	cmp	r2, r3
 8006614:	d20c      	bcs.n	8006630 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006616:	4b22      	ldr	r3, [pc, #136]	@ (80066a0 <HAL_RCC_ClockConfig+0x1b8>)
 8006618:	683a      	ldr	r2, [r7, #0]
 800661a:	b2d2      	uxtb	r2, r2
 800661c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800661e:	4b20      	ldr	r3, [pc, #128]	@ (80066a0 <HAL_RCC_ClockConfig+0x1b8>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f003 0307 	and.w	r3, r3, #7
 8006626:	683a      	ldr	r2, [r7, #0]
 8006628:	429a      	cmp	r2, r3
 800662a:	d001      	beq.n	8006630 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e032      	b.n	8006696 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 0304 	and.w	r3, r3, #4
 8006638:	2b00      	cmp	r3, #0
 800663a:	d008      	beq.n	800664e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800663c:	4b19      	ldr	r3, [pc, #100]	@ (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	4916      	ldr	r1, [pc, #88]	@ (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 800664a:	4313      	orrs	r3, r2
 800664c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 0308 	and.w	r3, r3, #8
 8006656:	2b00      	cmp	r3, #0
 8006658:	d009      	beq.n	800666e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800665a:	4b12      	ldr	r3, [pc, #72]	@ (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	00db      	lsls	r3, r3, #3
 8006668:	490e      	ldr	r1, [pc, #56]	@ (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 800666a:	4313      	orrs	r3, r2
 800666c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800666e:	f000 f821 	bl	80066b4 <HAL_RCC_GetSysClockFreq>
 8006672:	4602      	mov	r2, r0
 8006674:	4b0b      	ldr	r3, [pc, #44]	@ (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	091b      	lsrs	r3, r3, #4
 800667a:	f003 030f 	and.w	r3, r3, #15
 800667e:	490a      	ldr	r1, [pc, #40]	@ (80066a8 <HAL_RCC_ClockConfig+0x1c0>)
 8006680:	5ccb      	ldrb	r3, [r1, r3]
 8006682:	fa22 f303 	lsr.w	r3, r2, r3
 8006686:	4a09      	ldr	r2, [pc, #36]	@ (80066ac <HAL_RCC_ClockConfig+0x1c4>)
 8006688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800668a:	4b09      	ldr	r3, [pc, #36]	@ (80066b0 <HAL_RCC_ClockConfig+0x1c8>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4618      	mov	r0, r3
 8006690:	f7fa feb0 	bl	80013f4 <HAL_InitTick>

  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	40023c00 	.word	0x40023c00
 80066a4:	40023800 	.word	0x40023800
 80066a8:	0800a328 	.word	0x0800a328
 80066ac:	20000100 	.word	0x20000100
 80066b0:	20000104 	.word	0x20000104

080066b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066b8:	b094      	sub	sp, #80	@ 0x50
 80066ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80066bc:	2300      	movs	r3, #0
 80066be:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80066c0:	2300      	movs	r3, #0
 80066c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80066c4:	2300      	movs	r3, #0
 80066c6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80066c8:	2300      	movs	r3, #0
 80066ca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066cc:	4b79      	ldr	r3, [pc, #484]	@ (80068b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	f003 030c 	and.w	r3, r3, #12
 80066d4:	2b08      	cmp	r3, #8
 80066d6:	d00d      	beq.n	80066f4 <HAL_RCC_GetSysClockFreq+0x40>
 80066d8:	2b08      	cmp	r3, #8
 80066da:	f200 80e1 	bhi.w	80068a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d002      	beq.n	80066e8 <HAL_RCC_GetSysClockFreq+0x34>
 80066e2:	2b04      	cmp	r3, #4
 80066e4:	d003      	beq.n	80066ee <HAL_RCC_GetSysClockFreq+0x3a>
 80066e6:	e0db      	b.n	80068a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80066e8:	4b73      	ldr	r3, [pc, #460]	@ (80068b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80066ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80066ec:	e0db      	b.n	80068a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80066ee:	4b73      	ldr	r3, [pc, #460]	@ (80068bc <HAL_RCC_GetSysClockFreq+0x208>)
 80066f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80066f2:	e0d8      	b.n	80068a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80066f4:	4b6f      	ldr	r3, [pc, #444]	@ (80068b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80066fc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80066fe:	4b6d      	ldr	r3, [pc, #436]	@ (80068b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d063      	beq.n	80067d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800670a:	4b6a      	ldr	r3, [pc, #424]	@ (80068b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	099b      	lsrs	r3, r3, #6
 8006710:	2200      	movs	r2, #0
 8006712:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006714:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006718:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800671c:	633b      	str	r3, [r7, #48]	@ 0x30
 800671e:	2300      	movs	r3, #0
 8006720:	637b      	str	r3, [r7, #52]	@ 0x34
 8006722:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006726:	4622      	mov	r2, r4
 8006728:	462b      	mov	r3, r5
 800672a:	f04f 0000 	mov.w	r0, #0
 800672e:	f04f 0100 	mov.w	r1, #0
 8006732:	0159      	lsls	r1, r3, #5
 8006734:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006738:	0150      	lsls	r0, r2, #5
 800673a:	4602      	mov	r2, r0
 800673c:	460b      	mov	r3, r1
 800673e:	4621      	mov	r1, r4
 8006740:	1a51      	subs	r1, r2, r1
 8006742:	6139      	str	r1, [r7, #16]
 8006744:	4629      	mov	r1, r5
 8006746:	eb63 0301 	sbc.w	r3, r3, r1
 800674a:	617b      	str	r3, [r7, #20]
 800674c:	f04f 0200 	mov.w	r2, #0
 8006750:	f04f 0300 	mov.w	r3, #0
 8006754:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006758:	4659      	mov	r1, fp
 800675a:	018b      	lsls	r3, r1, #6
 800675c:	4651      	mov	r1, sl
 800675e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006762:	4651      	mov	r1, sl
 8006764:	018a      	lsls	r2, r1, #6
 8006766:	4651      	mov	r1, sl
 8006768:	ebb2 0801 	subs.w	r8, r2, r1
 800676c:	4659      	mov	r1, fp
 800676e:	eb63 0901 	sbc.w	r9, r3, r1
 8006772:	f04f 0200 	mov.w	r2, #0
 8006776:	f04f 0300 	mov.w	r3, #0
 800677a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800677e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006782:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006786:	4690      	mov	r8, r2
 8006788:	4699      	mov	r9, r3
 800678a:	4623      	mov	r3, r4
 800678c:	eb18 0303 	adds.w	r3, r8, r3
 8006790:	60bb      	str	r3, [r7, #8]
 8006792:	462b      	mov	r3, r5
 8006794:	eb49 0303 	adc.w	r3, r9, r3
 8006798:	60fb      	str	r3, [r7, #12]
 800679a:	f04f 0200 	mov.w	r2, #0
 800679e:	f04f 0300 	mov.w	r3, #0
 80067a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80067a6:	4629      	mov	r1, r5
 80067a8:	024b      	lsls	r3, r1, #9
 80067aa:	4621      	mov	r1, r4
 80067ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80067b0:	4621      	mov	r1, r4
 80067b2:	024a      	lsls	r2, r1, #9
 80067b4:	4610      	mov	r0, r2
 80067b6:	4619      	mov	r1, r3
 80067b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067ba:	2200      	movs	r2, #0
 80067bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80067c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80067c4:	f7f9 fd00 	bl	80001c8 <__aeabi_uldivmod>
 80067c8:	4602      	mov	r2, r0
 80067ca:	460b      	mov	r3, r1
 80067cc:	4613      	mov	r3, r2
 80067ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067d0:	e058      	b.n	8006884 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067d2:	4b38      	ldr	r3, [pc, #224]	@ (80068b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	099b      	lsrs	r3, r3, #6
 80067d8:	2200      	movs	r2, #0
 80067da:	4618      	mov	r0, r3
 80067dc:	4611      	mov	r1, r2
 80067de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80067e2:	623b      	str	r3, [r7, #32]
 80067e4:	2300      	movs	r3, #0
 80067e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80067e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80067ec:	4642      	mov	r2, r8
 80067ee:	464b      	mov	r3, r9
 80067f0:	f04f 0000 	mov.w	r0, #0
 80067f4:	f04f 0100 	mov.w	r1, #0
 80067f8:	0159      	lsls	r1, r3, #5
 80067fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80067fe:	0150      	lsls	r0, r2, #5
 8006800:	4602      	mov	r2, r0
 8006802:	460b      	mov	r3, r1
 8006804:	4641      	mov	r1, r8
 8006806:	ebb2 0a01 	subs.w	sl, r2, r1
 800680a:	4649      	mov	r1, r9
 800680c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006810:	f04f 0200 	mov.w	r2, #0
 8006814:	f04f 0300 	mov.w	r3, #0
 8006818:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800681c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006820:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006824:	ebb2 040a 	subs.w	r4, r2, sl
 8006828:	eb63 050b 	sbc.w	r5, r3, fp
 800682c:	f04f 0200 	mov.w	r2, #0
 8006830:	f04f 0300 	mov.w	r3, #0
 8006834:	00eb      	lsls	r3, r5, #3
 8006836:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800683a:	00e2      	lsls	r2, r4, #3
 800683c:	4614      	mov	r4, r2
 800683e:	461d      	mov	r5, r3
 8006840:	4643      	mov	r3, r8
 8006842:	18e3      	adds	r3, r4, r3
 8006844:	603b      	str	r3, [r7, #0]
 8006846:	464b      	mov	r3, r9
 8006848:	eb45 0303 	adc.w	r3, r5, r3
 800684c:	607b      	str	r3, [r7, #4]
 800684e:	f04f 0200 	mov.w	r2, #0
 8006852:	f04f 0300 	mov.w	r3, #0
 8006856:	e9d7 4500 	ldrd	r4, r5, [r7]
 800685a:	4629      	mov	r1, r5
 800685c:	028b      	lsls	r3, r1, #10
 800685e:	4621      	mov	r1, r4
 8006860:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006864:	4621      	mov	r1, r4
 8006866:	028a      	lsls	r2, r1, #10
 8006868:	4610      	mov	r0, r2
 800686a:	4619      	mov	r1, r3
 800686c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800686e:	2200      	movs	r2, #0
 8006870:	61bb      	str	r3, [r7, #24]
 8006872:	61fa      	str	r2, [r7, #28]
 8006874:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006878:	f7f9 fca6 	bl	80001c8 <__aeabi_uldivmod>
 800687c:	4602      	mov	r2, r0
 800687e:	460b      	mov	r3, r1
 8006880:	4613      	mov	r3, r2
 8006882:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006884:	4b0b      	ldr	r3, [pc, #44]	@ (80068b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	0c1b      	lsrs	r3, r3, #16
 800688a:	f003 0303 	and.w	r3, r3, #3
 800688e:	3301      	adds	r3, #1
 8006890:	005b      	lsls	r3, r3, #1
 8006892:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006894:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006896:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006898:	fbb2 f3f3 	udiv	r3, r2, r3
 800689c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800689e:	e002      	b.n	80068a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80068a0:	4b05      	ldr	r3, [pc, #20]	@ (80068b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80068a2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80068a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3750      	adds	r7, #80	@ 0x50
 80068ac:	46bd      	mov	sp, r7
 80068ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068b2:	bf00      	nop
 80068b4:	40023800 	.word	0x40023800
 80068b8:	00f42400 	.word	0x00f42400
 80068bc:	007a1200 	.word	0x007a1200

080068c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068c0:	b480      	push	{r7}
 80068c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068c4:	4b03      	ldr	r3, [pc, #12]	@ (80068d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80068c6:	681b      	ldr	r3, [r3, #0]
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	20000100 	.word	0x20000100

080068d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80068dc:	f7ff fff0 	bl	80068c0 <HAL_RCC_GetHCLKFreq>
 80068e0:	4602      	mov	r2, r0
 80068e2:	4b05      	ldr	r3, [pc, #20]	@ (80068f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	0a9b      	lsrs	r3, r3, #10
 80068e8:	f003 0307 	and.w	r3, r3, #7
 80068ec:	4903      	ldr	r1, [pc, #12]	@ (80068fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80068ee:	5ccb      	ldrb	r3, [r1, r3]
 80068f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	40023800 	.word	0x40023800
 80068fc:	0800a338 	.word	0x0800a338

08006900 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b086      	sub	sp, #24
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006908:	2300      	movs	r3, #0
 800690a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800690c:	2300      	movs	r3, #0
 800690e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 0301 	and.w	r3, r3, #1
 8006918:	2b00      	cmp	r3, #0
 800691a:	d105      	bne.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006924:	2b00      	cmp	r3, #0
 8006926:	d035      	beq.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006928:	4b62      	ldr	r3, [pc, #392]	@ (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800692a:	2200      	movs	r2, #0
 800692c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800692e:	f7fa fda5 	bl	800147c <HAL_GetTick>
 8006932:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006934:	e008      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006936:	f7fa fda1 	bl	800147c <HAL_GetTick>
 800693a:	4602      	mov	r2, r0
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	1ad3      	subs	r3, r2, r3
 8006940:	2b02      	cmp	r3, #2
 8006942:	d901      	bls.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006944:	2303      	movs	r3, #3
 8006946:	e0b0      	b.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006948:	4b5b      	ldr	r3, [pc, #364]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006950:	2b00      	cmp	r3, #0
 8006952:	d1f0      	bne.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	019a      	lsls	r2, r3, #6
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	071b      	lsls	r3, r3, #28
 8006960:	4955      	ldr	r1, [pc, #340]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006962:	4313      	orrs	r3, r2
 8006964:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006968:	4b52      	ldr	r3, [pc, #328]	@ (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800696a:	2201      	movs	r2, #1
 800696c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800696e:	f7fa fd85 	bl	800147c <HAL_GetTick>
 8006972:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006974:	e008      	b.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006976:	f7fa fd81 	bl	800147c <HAL_GetTick>
 800697a:	4602      	mov	r2, r0
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	2b02      	cmp	r3, #2
 8006982:	d901      	bls.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006984:	2303      	movs	r3, #3
 8006986:	e090      	b.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006988:	4b4b      	ldr	r3, [pc, #300]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006990:	2b00      	cmp	r3, #0
 8006992:	d0f0      	beq.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 0302 	and.w	r3, r3, #2
 800699c:	2b00      	cmp	r3, #0
 800699e:	f000 8083 	beq.w	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80069a2:	2300      	movs	r3, #0
 80069a4:	60fb      	str	r3, [r7, #12]
 80069a6:	4b44      	ldr	r3, [pc, #272]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069aa:	4a43      	ldr	r2, [pc, #268]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80069b2:	4b41      	ldr	r3, [pc, #260]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069ba:	60fb      	str	r3, [r7, #12]
 80069bc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80069be:	4b3f      	ldr	r3, [pc, #252]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a3e      	ldr	r2, [pc, #248]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80069c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069c8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80069ca:	f7fa fd57 	bl	800147c <HAL_GetTick>
 80069ce:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80069d0:	e008      	b.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069d2:	f7fa fd53 	bl	800147c <HAL_GetTick>
 80069d6:	4602      	mov	r2, r0
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	2b02      	cmp	r3, #2
 80069de:	d901      	bls.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80069e0:	2303      	movs	r3, #3
 80069e2:	e062      	b.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80069e4:	4b35      	ldr	r3, [pc, #212]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d0f0      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80069f0:	4b31      	ldr	r3, [pc, #196]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069f8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d02f      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a08:	693a      	ldr	r2, [r7, #16]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d028      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a0e:	4b2a      	ldr	r3, [pc, #168]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a16:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a18:	4b29      	ldr	r3, [pc, #164]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a1e:	4b28      	ldr	r3, [pc, #160]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006a20:	2200      	movs	r2, #0
 8006a22:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006a24:	4a24      	ldr	r2, [pc, #144]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006a2a:	4b23      	ldr	r3, [pc, #140]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a2e:	f003 0301 	and.w	r3, r3, #1
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d114      	bne.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006a36:	f7fa fd21 	bl	800147c <HAL_GetTick>
 8006a3a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a3c:	e00a      	b.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a3e:	f7fa fd1d 	bl	800147c <HAL_GetTick>
 8006a42:	4602      	mov	r2, r0
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d901      	bls.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006a50:	2303      	movs	r3, #3
 8006a52:	e02a      	b.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a54:	4b18      	ldr	r3, [pc, #96]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a58:	f003 0302 	and.w	r3, r3, #2
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d0ee      	beq.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a68:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a6c:	d10d      	bne.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006a6e:	4b12      	ldr	r3, [pc, #72]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006a7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a82:	490d      	ldr	r1, [pc, #52]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a84:	4313      	orrs	r3, r2
 8006a86:	608b      	str	r3, [r1, #8]
 8006a88:	e005      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a90:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006a94:	6093      	str	r3, [r2, #8]
 8006a96:	4b08      	ldr	r3, [pc, #32]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a98:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006aa2:	4905      	ldr	r1, [pc, #20]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3718      	adds	r7, #24
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	42470068 	.word	0x42470068
 8006ab8:	40023800 	.word	0x40023800
 8006abc:	40007000 	.word	0x40007000
 8006ac0:	42470e40 	.word	0x42470e40

08006ac4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b087      	sub	sp, #28
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006acc:	2300      	movs	r3, #0
 8006ace:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d13f      	bne.n	8006b62 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006ae2:	4b24      	ldr	r3, [pc, #144]	@ (8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006aea:	60fb      	str	r3, [r7, #12]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d006      	beq.n	8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006af8:	d12f      	bne.n	8006b5a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006afa:	4b1f      	ldr	r3, [pc, #124]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006afc:	617b      	str	r3, [r7, #20]
          break;
 8006afe:	e02f      	b.n	8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006b00:	4b1c      	ldr	r3, [pc, #112]	@ (8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b0c:	d108      	bne.n	8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006b0e:	4b19      	ldr	r3, [pc, #100]	@ (8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b16:	4a19      	ldr	r2, [pc, #100]	@ (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b1c:	613b      	str	r3, [r7, #16]
 8006b1e:	e007      	b.n	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006b20:	4b14      	ldr	r3, [pc, #80]	@ (8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b28:	4a15      	ldr	r2, [pc, #84]	@ (8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b2e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006b30:	4b10      	ldr	r3, [pc, #64]	@ (8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006b32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b36:	099b      	lsrs	r3, r3, #6
 8006b38:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	fb02 f303 	mul.w	r3, r2, r3
 8006b42:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006b44:	4b0b      	ldr	r3, [pc, #44]	@ (8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006b46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b4a:	0f1b      	lsrs	r3, r3, #28
 8006b4c:	f003 0307 	and.w	r3, r3, #7
 8006b50:	68ba      	ldr	r2, [r7, #8]
 8006b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b56:	617b      	str	r3, [r7, #20]
          break;
 8006b58:	e002      	b.n	8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	617b      	str	r3, [r7, #20]
          break;
 8006b5e:	bf00      	nop
        }
      }
      break;
 8006b60:	e000      	b.n	8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8006b62:	bf00      	nop
    }
  }
  return frequency;
 8006b64:	697b      	ldr	r3, [r7, #20]
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	371c      	adds	r7, #28
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr
 8006b72:	bf00      	nop
 8006b74:	40023800 	.word	0x40023800
 8006b78:	00bb8000 	.word	0x00bb8000
 8006b7c:	007a1200 	.word	0x007a1200
 8006b80:	00f42400 	.word	0x00f42400

08006b84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d101      	bne.n	8006b96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e07b      	b.n	8006c8e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d108      	bne.n	8006bb0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ba6:	d009      	beq.n	8006bbc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	61da      	str	r2, [r3, #28]
 8006bae:	e005      	b.n	8006bbc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d106      	bne.n	8006bdc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f7fa fa4e 	bl	8001078 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2202      	movs	r2, #2
 8006be0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006bf2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006c04:	431a      	orrs	r2, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c0e:	431a      	orrs	r2, r3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	f003 0302 	and.w	r3, r3, #2
 8006c18:	431a      	orrs	r2, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	695b      	ldr	r3, [r3, #20]
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	431a      	orrs	r2, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	699b      	ldr	r3, [r3, #24]
 8006c28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c2c:	431a      	orrs	r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	69db      	ldr	r3, [r3, #28]
 8006c32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c36:	431a      	orrs	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6a1b      	ldr	r3, [r3, #32]
 8006c3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c40:	ea42 0103 	orr.w	r1, r2, r3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c48:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	430a      	orrs	r2, r1
 8006c52:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	699b      	ldr	r3, [r3, #24]
 8006c58:	0c1b      	lsrs	r3, r3, #16
 8006c5a:	f003 0104 	and.w	r1, r3, #4
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c62:	f003 0210 	and.w	r2, r3, #16
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	430a      	orrs	r2, r1
 8006c6c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	69da      	ldr	r2, [r3, #28]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c7c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3708      	adds	r7, #8
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b082      	sub	sp, #8
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d101      	bne.n	8006ca8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e041      	b.n	8006d2c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d106      	bne.n	8006cc2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f7fa fb2d 	bl	800131c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2202      	movs	r2, #2
 8006cc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	3304      	adds	r3, #4
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	4610      	mov	r0, r2
 8006cd6:	f000 f95d 	bl	8006f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2201      	movs	r2, #1
 8006cee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2201      	movs	r2, #1
 8006d06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2201      	movs	r2, #1
 8006d16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2201      	movs	r2, #1
 8006d26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3708      	adds	r7, #8
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d001      	beq.n	8006d4c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e046      	b.n	8006dda <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2202      	movs	r2, #2
 8006d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a23      	ldr	r2, [pc, #140]	@ (8006de8 <HAL_TIM_Base_Start+0xb4>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d022      	beq.n	8006da4 <HAL_TIM_Base_Start+0x70>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d66:	d01d      	beq.n	8006da4 <HAL_TIM_Base_Start+0x70>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a1f      	ldr	r2, [pc, #124]	@ (8006dec <HAL_TIM_Base_Start+0xb8>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d018      	beq.n	8006da4 <HAL_TIM_Base_Start+0x70>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a1e      	ldr	r2, [pc, #120]	@ (8006df0 <HAL_TIM_Base_Start+0xbc>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d013      	beq.n	8006da4 <HAL_TIM_Base_Start+0x70>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a1c      	ldr	r2, [pc, #112]	@ (8006df4 <HAL_TIM_Base_Start+0xc0>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d00e      	beq.n	8006da4 <HAL_TIM_Base_Start+0x70>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a1b      	ldr	r2, [pc, #108]	@ (8006df8 <HAL_TIM_Base_Start+0xc4>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d009      	beq.n	8006da4 <HAL_TIM_Base_Start+0x70>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a19      	ldr	r2, [pc, #100]	@ (8006dfc <HAL_TIM_Base_Start+0xc8>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d004      	beq.n	8006da4 <HAL_TIM_Base_Start+0x70>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a18      	ldr	r2, [pc, #96]	@ (8006e00 <HAL_TIM_Base_Start+0xcc>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d111      	bne.n	8006dc8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	f003 0307 	and.w	r3, r3, #7
 8006dae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2b06      	cmp	r3, #6
 8006db4:	d010      	beq.n	8006dd8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f042 0201 	orr.w	r2, r2, #1
 8006dc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dc6:	e007      	b.n	8006dd8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f042 0201 	orr.w	r2, r2, #1
 8006dd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3714      	adds	r7, #20
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	40010000 	.word	0x40010000
 8006dec:	40000400 	.word	0x40000400
 8006df0:	40000800 	.word	0x40000800
 8006df4:	40000c00 	.word	0x40000c00
 8006df8:	40010400 	.word	0x40010400
 8006dfc:	40014000 	.word	0x40014000
 8006e00:	40001800 	.word	0x40001800

08006e04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d101      	bne.n	8006e20 <HAL_TIM_ConfigClockSource+0x1c>
 8006e1c:	2302      	movs	r3, #2
 8006e1e:	e0b4      	b.n	8006f8a <HAL_TIM_ConfigClockSource+0x186>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2202      	movs	r2, #2
 8006e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006e3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006e46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68ba      	ldr	r2, [r7, #8]
 8006e4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e58:	d03e      	beq.n	8006ed8 <HAL_TIM_ConfigClockSource+0xd4>
 8006e5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e5e:	f200 8087 	bhi.w	8006f70 <HAL_TIM_ConfigClockSource+0x16c>
 8006e62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e66:	f000 8086 	beq.w	8006f76 <HAL_TIM_ConfigClockSource+0x172>
 8006e6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e6e:	d87f      	bhi.n	8006f70 <HAL_TIM_ConfigClockSource+0x16c>
 8006e70:	2b70      	cmp	r3, #112	@ 0x70
 8006e72:	d01a      	beq.n	8006eaa <HAL_TIM_ConfigClockSource+0xa6>
 8006e74:	2b70      	cmp	r3, #112	@ 0x70
 8006e76:	d87b      	bhi.n	8006f70 <HAL_TIM_ConfigClockSource+0x16c>
 8006e78:	2b60      	cmp	r3, #96	@ 0x60
 8006e7a:	d050      	beq.n	8006f1e <HAL_TIM_ConfigClockSource+0x11a>
 8006e7c:	2b60      	cmp	r3, #96	@ 0x60
 8006e7e:	d877      	bhi.n	8006f70 <HAL_TIM_ConfigClockSource+0x16c>
 8006e80:	2b50      	cmp	r3, #80	@ 0x50
 8006e82:	d03c      	beq.n	8006efe <HAL_TIM_ConfigClockSource+0xfa>
 8006e84:	2b50      	cmp	r3, #80	@ 0x50
 8006e86:	d873      	bhi.n	8006f70 <HAL_TIM_ConfigClockSource+0x16c>
 8006e88:	2b40      	cmp	r3, #64	@ 0x40
 8006e8a:	d058      	beq.n	8006f3e <HAL_TIM_ConfigClockSource+0x13a>
 8006e8c:	2b40      	cmp	r3, #64	@ 0x40
 8006e8e:	d86f      	bhi.n	8006f70 <HAL_TIM_ConfigClockSource+0x16c>
 8006e90:	2b30      	cmp	r3, #48	@ 0x30
 8006e92:	d064      	beq.n	8006f5e <HAL_TIM_ConfigClockSource+0x15a>
 8006e94:	2b30      	cmp	r3, #48	@ 0x30
 8006e96:	d86b      	bhi.n	8006f70 <HAL_TIM_ConfigClockSource+0x16c>
 8006e98:	2b20      	cmp	r3, #32
 8006e9a:	d060      	beq.n	8006f5e <HAL_TIM_ConfigClockSource+0x15a>
 8006e9c:	2b20      	cmp	r3, #32
 8006e9e:	d867      	bhi.n	8006f70 <HAL_TIM_ConfigClockSource+0x16c>
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d05c      	beq.n	8006f5e <HAL_TIM_ConfigClockSource+0x15a>
 8006ea4:	2b10      	cmp	r3, #16
 8006ea6:	d05a      	beq.n	8006f5e <HAL_TIM_ConfigClockSource+0x15a>
 8006ea8:	e062      	b.n	8006f70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006eba:	f000 f991 	bl	80071e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006ecc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	68ba      	ldr	r2, [r7, #8]
 8006ed4:	609a      	str	r2, [r3, #8]
      break;
 8006ed6:	e04f      	b.n	8006f78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ee8:	f000 f97a 	bl	80071e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	689a      	ldr	r2, [r3, #8]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006efa:	609a      	str	r2, [r3, #8]
      break;
 8006efc:	e03c      	b.n	8006f78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	f000 f8ee 	bl	80070ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2150      	movs	r1, #80	@ 0x50
 8006f16:	4618      	mov	r0, r3
 8006f18:	f000 f947 	bl	80071aa <TIM_ITRx_SetConfig>
      break;
 8006f1c:	e02c      	b.n	8006f78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	f000 f90d 	bl	800714a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2160      	movs	r1, #96	@ 0x60
 8006f36:	4618      	mov	r0, r3
 8006f38:	f000 f937 	bl	80071aa <TIM_ITRx_SetConfig>
      break;
 8006f3c:	e01c      	b.n	8006f78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	f000 f8ce 	bl	80070ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2140      	movs	r1, #64	@ 0x40
 8006f56:	4618      	mov	r0, r3
 8006f58:	f000 f927 	bl	80071aa <TIM_ITRx_SetConfig>
      break;
 8006f5c:	e00c      	b.n	8006f78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4619      	mov	r1, r3
 8006f68:	4610      	mov	r0, r2
 8006f6a:	f000 f91e 	bl	80071aa <TIM_ITRx_SetConfig>
      break;
 8006f6e:	e003      	b.n	8006f78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	73fb      	strb	r3, [r7, #15]
      break;
 8006f74:	e000      	b.n	8006f78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006f76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3710      	adds	r7, #16
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
	...

08006f94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a46      	ldr	r2, [pc, #280]	@ (80070c0 <TIM_Base_SetConfig+0x12c>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d013      	beq.n	8006fd4 <TIM_Base_SetConfig+0x40>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fb2:	d00f      	beq.n	8006fd4 <TIM_Base_SetConfig+0x40>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a43      	ldr	r2, [pc, #268]	@ (80070c4 <TIM_Base_SetConfig+0x130>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d00b      	beq.n	8006fd4 <TIM_Base_SetConfig+0x40>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a42      	ldr	r2, [pc, #264]	@ (80070c8 <TIM_Base_SetConfig+0x134>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d007      	beq.n	8006fd4 <TIM_Base_SetConfig+0x40>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a41      	ldr	r2, [pc, #260]	@ (80070cc <TIM_Base_SetConfig+0x138>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d003      	beq.n	8006fd4 <TIM_Base_SetConfig+0x40>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a40      	ldr	r2, [pc, #256]	@ (80070d0 <TIM_Base_SetConfig+0x13c>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d108      	bne.n	8006fe6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a35      	ldr	r2, [pc, #212]	@ (80070c0 <TIM_Base_SetConfig+0x12c>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d02b      	beq.n	8007046 <TIM_Base_SetConfig+0xb2>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ff4:	d027      	beq.n	8007046 <TIM_Base_SetConfig+0xb2>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4a32      	ldr	r2, [pc, #200]	@ (80070c4 <TIM_Base_SetConfig+0x130>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d023      	beq.n	8007046 <TIM_Base_SetConfig+0xb2>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4a31      	ldr	r2, [pc, #196]	@ (80070c8 <TIM_Base_SetConfig+0x134>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d01f      	beq.n	8007046 <TIM_Base_SetConfig+0xb2>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4a30      	ldr	r2, [pc, #192]	@ (80070cc <TIM_Base_SetConfig+0x138>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d01b      	beq.n	8007046 <TIM_Base_SetConfig+0xb2>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4a2f      	ldr	r2, [pc, #188]	@ (80070d0 <TIM_Base_SetConfig+0x13c>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d017      	beq.n	8007046 <TIM_Base_SetConfig+0xb2>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	4a2e      	ldr	r2, [pc, #184]	@ (80070d4 <TIM_Base_SetConfig+0x140>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d013      	beq.n	8007046 <TIM_Base_SetConfig+0xb2>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4a2d      	ldr	r2, [pc, #180]	@ (80070d8 <TIM_Base_SetConfig+0x144>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d00f      	beq.n	8007046 <TIM_Base_SetConfig+0xb2>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	4a2c      	ldr	r2, [pc, #176]	@ (80070dc <TIM_Base_SetConfig+0x148>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d00b      	beq.n	8007046 <TIM_Base_SetConfig+0xb2>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4a2b      	ldr	r2, [pc, #172]	@ (80070e0 <TIM_Base_SetConfig+0x14c>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d007      	beq.n	8007046 <TIM_Base_SetConfig+0xb2>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a2a      	ldr	r2, [pc, #168]	@ (80070e4 <TIM_Base_SetConfig+0x150>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d003      	beq.n	8007046 <TIM_Base_SetConfig+0xb2>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a29      	ldr	r2, [pc, #164]	@ (80070e8 <TIM_Base_SetConfig+0x154>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d108      	bne.n	8007058 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800704c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	4313      	orrs	r3, r2
 8007056:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	695b      	ldr	r3, [r3, #20]
 8007062:	4313      	orrs	r3, r2
 8007064:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	689a      	ldr	r2, [r3, #8]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a10      	ldr	r2, [pc, #64]	@ (80070c0 <TIM_Base_SetConfig+0x12c>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d003      	beq.n	800708c <TIM_Base_SetConfig+0xf8>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4a12      	ldr	r2, [pc, #72]	@ (80070d0 <TIM_Base_SetConfig+0x13c>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d103      	bne.n	8007094 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	691a      	ldr	r2, [r3, #16]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	f003 0301 	and.w	r3, r3, #1
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d105      	bne.n	80070b2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	f023 0201 	bic.w	r2, r3, #1
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	611a      	str	r2, [r3, #16]
  }
}
 80070b2:	bf00      	nop
 80070b4:	3714      	adds	r7, #20
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr
 80070be:	bf00      	nop
 80070c0:	40010000 	.word	0x40010000
 80070c4:	40000400 	.word	0x40000400
 80070c8:	40000800 	.word	0x40000800
 80070cc:	40000c00 	.word	0x40000c00
 80070d0:	40010400 	.word	0x40010400
 80070d4:	40014000 	.word	0x40014000
 80070d8:	40014400 	.word	0x40014400
 80070dc:	40014800 	.word	0x40014800
 80070e0:	40001800 	.word	0x40001800
 80070e4:	40001c00 	.word	0x40001c00
 80070e8:	40002000 	.word	0x40002000

080070ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b087      	sub	sp, #28
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6a1b      	ldr	r3, [r3, #32]
 80070fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6a1b      	ldr	r3, [r3, #32]
 8007102:	f023 0201 	bic.w	r2, r3, #1
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	699b      	ldr	r3, [r3, #24]
 800710e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007116:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	011b      	lsls	r3, r3, #4
 800711c:	693a      	ldr	r2, [r7, #16]
 800711e:	4313      	orrs	r3, r2
 8007120:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	f023 030a 	bic.w	r3, r3, #10
 8007128:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800712a:	697a      	ldr	r2, [r7, #20]
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	4313      	orrs	r3, r2
 8007130:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	693a      	ldr	r2, [r7, #16]
 8007136:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	697a      	ldr	r2, [r7, #20]
 800713c:	621a      	str	r2, [r3, #32]
}
 800713e:	bf00      	nop
 8007140:	371c      	adds	r7, #28
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr

0800714a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800714a:	b480      	push	{r7}
 800714c:	b087      	sub	sp, #28
 800714e:	af00      	add	r7, sp, #0
 8007150:	60f8      	str	r0, [r7, #12]
 8007152:	60b9      	str	r1, [r7, #8]
 8007154:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6a1b      	ldr	r3, [r3, #32]
 800715a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6a1b      	ldr	r3, [r3, #32]
 8007160:	f023 0210 	bic.w	r2, r3, #16
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	699b      	ldr	r3, [r3, #24]
 800716c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007174:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	031b      	lsls	r3, r3, #12
 800717a:	693a      	ldr	r2, [r7, #16]
 800717c:	4313      	orrs	r3, r2
 800717e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007186:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	011b      	lsls	r3, r3, #4
 800718c:	697a      	ldr	r2, [r7, #20]
 800718e:	4313      	orrs	r3, r2
 8007190:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	693a      	ldr	r2, [r7, #16]
 8007196:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	697a      	ldr	r2, [r7, #20]
 800719c:	621a      	str	r2, [r3, #32]
}
 800719e:	bf00      	nop
 80071a0:	371c      	adds	r7, #28
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr

080071aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80071aa:	b480      	push	{r7}
 80071ac:	b085      	sub	sp, #20
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
 80071b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80071c2:	683a      	ldr	r2, [r7, #0]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	f043 0307 	orr.w	r3, r3, #7
 80071cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	68fa      	ldr	r2, [r7, #12]
 80071d2:	609a      	str	r2, [r3, #8]
}
 80071d4:	bf00      	nop
 80071d6:	3714      	adds	r7, #20
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b087      	sub	sp, #28
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]
 80071ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80071fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	021a      	lsls	r2, r3, #8
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	431a      	orrs	r2, r3
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	4313      	orrs	r3, r2
 8007208:	697a      	ldr	r2, [r7, #20]
 800720a:	4313      	orrs	r3, r2
 800720c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	697a      	ldr	r2, [r7, #20]
 8007212:	609a      	str	r2, [r3, #8]
}
 8007214:	bf00      	nop
 8007216:	371c      	adds	r7, #28
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007220:	b480      	push	{r7}
 8007222:	b085      	sub	sp, #20
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007230:	2b01      	cmp	r3, #1
 8007232:	d101      	bne.n	8007238 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007234:	2302      	movs	r3, #2
 8007236:	e05a      	b.n	80072ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2202      	movs	r2, #2
 8007244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800725e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	4313      	orrs	r3, r2
 8007268:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a21      	ldr	r2, [pc, #132]	@ (80072fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d022      	beq.n	80072c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007284:	d01d      	beq.n	80072c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a1d      	ldr	r2, [pc, #116]	@ (8007300 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d018      	beq.n	80072c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a1b      	ldr	r2, [pc, #108]	@ (8007304 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d013      	beq.n	80072c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a1a      	ldr	r2, [pc, #104]	@ (8007308 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d00e      	beq.n	80072c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a18      	ldr	r2, [pc, #96]	@ (800730c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d009      	beq.n	80072c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a17      	ldr	r2, [pc, #92]	@ (8007310 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d004      	beq.n	80072c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a15      	ldr	r2, [pc, #84]	@ (8007314 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d10c      	bne.n	80072dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	68ba      	ldr	r2, [r7, #8]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	68ba      	ldr	r2, [r7, #8]
 80072da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80072ec:	2300      	movs	r3, #0
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3714      	adds	r7, #20
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	40010000 	.word	0x40010000
 8007300:	40000400 	.word	0x40000400
 8007304:	40000800 	.word	0x40000800
 8007308:	40000c00 	.word	0x40000c00
 800730c:	40010400 	.word	0x40010400
 8007310:	40014000 	.word	0x40014000
 8007314:	40001800 	.word	0x40001800

08007318 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007318:	b084      	sub	sp, #16
 800731a:	b580      	push	{r7, lr}
 800731c:	b084      	sub	sp, #16
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
 8007322:	f107 001c 	add.w	r0, r7, #28
 8007326:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800732a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800732e:	2b01      	cmp	r3, #1
 8007330:	d123      	bne.n	800737a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007336:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007346:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800735a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800735e:	2b01      	cmp	r3, #1
 8007360:	d105      	bne.n	800736e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 f9dc 	bl	800772c <USB_CoreReset>
 8007374:	4603      	mov	r3, r0
 8007376:	73fb      	strb	r3, [r7, #15]
 8007378:	e01b      	b.n	80073b2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 f9d0 	bl	800772c <USB_CoreReset>
 800738c:	4603      	mov	r3, r0
 800738e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007390:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007394:	2b00      	cmp	r3, #0
 8007396:	d106      	bne.n	80073a6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800739c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	639a      	str	r2, [r3, #56]	@ 0x38
 80073a4:	e005      	b.n	80073b2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073aa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80073b2:	7fbb      	ldrb	r3, [r7, #30]
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d10b      	bne.n	80073d0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	f043 0206 	orr.w	r2, r3, #6
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	f043 0220 	orr.w	r2, r3, #32
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80073d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3710      	adds	r7, #16
 80073d6:	46bd      	mov	sp, r7
 80073d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80073dc:	b004      	add	sp, #16
 80073de:	4770      	bx	lr

080073e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	f043 0201 	orr.w	r2, r3, #1
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	370c      	adds	r7, #12
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr

08007402 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007402:	b480      	push	{r7}
 8007404:	b083      	sub	sp, #12
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	f023 0201 	bic.w	r2, r3, #1
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007416:	2300      	movs	r3, #0
}
 8007418:	4618      	mov	r0, r3
 800741a:	370c      	adds	r7, #12
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr

08007424 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	460b      	mov	r3, r1
 800742e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007430:	2300      	movs	r3, #0
 8007432:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007440:	78fb      	ldrb	r3, [r7, #3]
 8007442:	2b01      	cmp	r3, #1
 8007444:	d115      	bne.n	8007472 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007452:	200a      	movs	r0, #10
 8007454:	f7fa f81e 	bl	8001494 <HAL_Delay>
      ms += 10U;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	330a      	adds	r3, #10
 800745c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 f956 	bl	8007710 <USB_GetMode>
 8007464:	4603      	mov	r3, r0
 8007466:	2b01      	cmp	r3, #1
 8007468:	d01e      	beq.n	80074a8 <USB_SetCurrentMode+0x84>
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2bc7      	cmp	r3, #199	@ 0xc7
 800746e:	d9f0      	bls.n	8007452 <USB_SetCurrentMode+0x2e>
 8007470:	e01a      	b.n	80074a8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007472:	78fb      	ldrb	r3, [r7, #3]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d115      	bne.n	80074a4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007484:	200a      	movs	r0, #10
 8007486:	f7fa f805 	bl	8001494 <HAL_Delay>
      ms += 10U;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	330a      	adds	r3, #10
 800748e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 f93d 	bl	8007710 <USB_GetMode>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d005      	beq.n	80074a8 <USB_SetCurrentMode+0x84>
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2bc7      	cmp	r3, #199	@ 0xc7
 80074a0:	d9f0      	bls.n	8007484 <USB_SetCurrentMode+0x60>
 80074a2:	e001      	b.n	80074a8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	e005      	b.n	80074b4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2bc8      	cmp	r3, #200	@ 0xc8
 80074ac:	d101      	bne.n	80074b2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	e000      	b.n	80074b4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80074b2:	2300      	movs	r3, #0
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3710      	adds	r7, #16
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80074bc:	b480      	push	{r7}
 80074be:	b085      	sub	sp, #20
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80074c6:	2300      	movs	r3, #0
 80074c8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	3301      	adds	r3, #1
 80074ce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074d6:	d901      	bls.n	80074dc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80074d8:	2303      	movs	r3, #3
 80074da:	e01b      	b.n	8007514 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	daf2      	bge.n	80074ca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80074e4:	2300      	movs	r3, #0
 80074e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	019b      	lsls	r3, r3, #6
 80074ec:	f043 0220 	orr.w	r2, r3, #32
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	3301      	adds	r3, #1
 80074f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007500:	d901      	bls.n	8007506 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007502:	2303      	movs	r3, #3
 8007504:	e006      	b.n	8007514 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	f003 0320 	and.w	r3, r3, #32
 800750e:	2b20      	cmp	r3, #32
 8007510:	d0f0      	beq.n	80074f4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	3714      	adds	r7, #20
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007520:	b480      	push	{r7}
 8007522:	b085      	sub	sp, #20
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007528:	2300      	movs	r3, #0
 800752a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	3301      	adds	r3, #1
 8007530:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007538:	d901      	bls.n	800753e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800753a:	2303      	movs	r3, #3
 800753c:	e018      	b.n	8007570 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	691b      	ldr	r3, [r3, #16]
 8007542:	2b00      	cmp	r3, #0
 8007544:	daf2      	bge.n	800752c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007546:	2300      	movs	r3, #0
 8007548:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2210      	movs	r2, #16
 800754e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	3301      	adds	r3, #1
 8007554:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800755c:	d901      	bls.n	8007562 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800755e:	2303      	movs	r3, #3
 8007560:	e006      	b.n	8007570 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	f003 0310 	and.w	r3, r3, #16
 800756a:	2b10      	cmp	r3, #16
 800756c:	d0f0      	beq.n	8007550 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3714      	adds	r7, #20
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800757c:	b480      	push	{r7}
 800757e:	b089      	sub	sp, #36	@ 0x24
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	4611      	mov	r1, r2
 8007588:	461a      	mov	r2, r3
 800758a:	460b      	mov	r3, r1
 800758c:	71fb      	strb	r3, [r7, #7]
 800758e:	4613      	mov	r3, r2
 8007590:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800759a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d123      	bne.n	80075ea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80075a2:	88bb      	ldrh	r3, [r7, #4]
 80075a4:	3303      	adds	r3, #3
 80075a6:	089b      	lsrs	r3, r3, #2
 80075a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80075aa:	2300      	movs	r3, #0
 80075ac:	61bb      	str	r3, [r7, #24]
 80075ae:	e018      	b.n	80075e2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80075b0:	79fb      	ldrb	r3, [r7, #7]
 80075b2:	031a      	lsls	r2, r3, #12
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	4413      	add	r3, r2
 80075b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075bc:	461a      	mov	r2, r3
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80075c4:	69fb      	ldr	r3, [r7, #28]
 80075c6:	3301      	adds	r3, #1
 80075c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	3301      	adds	r3, #1
 80075ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	3301      	adds	r3, #1
 80075d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	3301      	adds	r3, #1
 80075da:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	3301      	adds	r3, #1
 80075e0:	61bb      	str	r3, [r7, #24]
 80075e2:	69ba      	ldr	r2, [r7, #24]
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d3e2      	bcc.n	80075b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3724      	adds	r7, #36	@ 0x24
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b08b      	sub	sp, #44	@ 0x2c
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	60b9      	str	r1, [r7, #8]
 8007602:	4613      	mov	r3, r2
 8007604:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800760e:	88fb      	ldrh	r3, [r7, #6]
 8007610:	089b      	lsrs	r3, r3, #2
 8007612:	b29b      	uxth	r3, r3
 8007614:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007616:	88fb      	ldrh	r3, [r7, #6]
 8007618:	f003 0303 	and.w	r3, r3, #3
 800761c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800761e:	2300      	movs	r3, #0
 8007620:	623b      	str	r3, [r7, #32]
 8007622:	e014      	b.n	800764e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007624:	69bb      	ldr	r3, [r7, #24]
 8007626:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800762e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007632:	3301      	adds	r3, #1
 8007634:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007638:	3301      	adds	r3, #1
 800763a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800763c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800763e:	3301      	adds	r3, #1
 8007640:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007644:	3301      	adds	r3, #1
 8007646:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007648:	6a3b      	ldr	r3, [r7, #32]
 800764a:	3301      	adds	r3, #1
 800764c:	623b      	str	r3, [r7, #32]
 800764e:	6a3a      	ldr	r2, [r7, #32]
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	429a      	cmp	r2, r3
 8007654:	d3e6      	bcc.n	8007624 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007656:	8bfb      	ldrh	r3, [r7, #30]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d01e      	beq.n	800769a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800765c:	2300      	movs	r3, #0
 800765e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007666:	461a      	mov	r2, r3
 8007668:	f107 0310 	add.w	r3, r7, #16
 800766c:	6812      	ldr	r2, [r2, #0]
 800766e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007670:	693a      	ldr	r2, [r7, #16]
 8007672:	6a3b      	ldr	r3, [r7, #32]
 8007674:	b2db      	uxtb	r3, r3
 8007676:	00db      	lsls	r3, r3, #3
 8007678:	fa22 f303 	lsr.w	r3, r2, r3
 800767c:	b2da      	uxtb	r2, r3
 800767e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007680:	701a      	strb	r2, [r3, #0]
      i++;
 8007682:	6a3b      	ldr	r3, [r7, #32]
 8007684:	3301      	adds	r3, #1
 8007686:	623b      	str	r3, [r7, #32]
      pDest++;
 8007688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800768a:	3301      	adds	r3, #1
 800768c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800768e:	8bfb      	ldrh	r3, [r7, #30]
 8007690:	3b01      	subs	r3, #1
 8007692:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007694:	8bfb      	ldrh	r3, [r7, #30]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d1ea      	bne.n	8007670 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800769a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800769c:	4618      	mov	r0, r3
 800769e:	372c      	adds	r7, #44	@ 0x2c
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	695b      	ldr	r3, [r3, #20]
 80076b4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	699b      	ldr	r3, [r3, #24]
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	4013      	ands	r3, r2
 80076be:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80076c0:	68fb      	ldr	r3, [r7, #12]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3714      	adds	r7, #20
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr

080076ce <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80076ce:	b480      	push	{r7}
 80076d0:	b085      	sub	sp, #20
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
 80076d6:	460b      	mov	r3, r1
 80076d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80076de:	78fb      	ldrb	r3, [r7, #3]
 80076e0:	015a      	lsls	r2, r3, #5
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	4413      	add	r3, r2
 80076e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80076ee:	78fb      	ldrb	r3, [r7, #3]
 80076f0:	015a      	lsls	r2, r3, #5
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	4413      	add	r3, r2
 80076f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	68ba      	ldr	r2, [r7, #8]
 80076fe:	4013      	ands	r3, r2
 8007700:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007702:	68bb      	ldr	r3, [r7, #8]
}
 8007704:	4618      	mov	r0, r3
 8007706:	3714      	adds	r7, #20
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr

08007710 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007710:	b480      	push	{r7}
 8007712:	b083      	sub	sp, #12
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	695b      	ldr	r3, [r3, #20]
 800771c:	f003 0301 	and.w	r3, r3, #1
}
 8007720:	4618      	mov	r0, r3
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800772c:	b480      	push	{r7}
 800772e:	b085      	sub	sp, #20
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007734:	2300      	movs	r3, #0
 8007736:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	3301      	adds	r3, #1
 800773c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007744:	d901      	bls.n	800774a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007746:	2303      	movs	r3, #3
 8007748:	e01b      	b.n	8007782 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	691b      	ldr	r3, [r3, #16]
 800774e:	2b00      	cmp	r3, #0
 8007750:	daf2      	bge.n	8007738 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007752:	2300      	movs	r3, #0
 8007754:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	f043 0201 	orr.w	r2, r3, #1
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	3301      	adds	r3, #1
 8007766:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800776e:	d901      	bls.n	8007774 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007770:	2303      	movs	r3, #3
 8007772:	e006      	b.n	8007782 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	691b      	ldr	r3, [r3, #16]
 8007778:	f003 0301 	and.w	r3, r3, #1
 800777c:	2b01      	cmp	r3, #1
 800777e:	d0f0      	beq.n	8007762 <USB_CoreReset+0x36>

  return HAL_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3714      	adds	r7, #20
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr
	...

08007790 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007790:	b084      	sub	sp, #16
 8007792:	b580      	push	{r7, lr}
 8007794:	b086      	sub	sp, #24
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
 800779a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800779e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80077a2:	2300      	movs	r3, #0
 80077a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80077b0:	461a      	mov	r2, r3
 80077b2:	2300      	movs	r3, #0
 80077b4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077ba:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077c6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077d2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d119      	bne.n	800781a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80077e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d10a      	bne.n	8007804 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80077fc:	f043 0304 	orr.w	r3, r3, #4
 8007800:	6013      	str	r3, [r2, #0]
 8007802:	e014      	b.n	800782e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007812:	f023 0304 	bic.w	r3, r3, #4
 8007816:	6013      	str	r3, [r2, #0]
 8007818:	e009      	b.n	800782e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	68fa      	ldr	r2, [r7, #12]
 8007824:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007828:	f023 0304 	bic.w	r3, r3, #4
 800782c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800782e:	2110      	movs	r1, #16
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f7ff fe43 	bl	80074bc <USB_FlushTxFifo>
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d001      	beq.n	8007840 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f7ff fe6d 	bl	8007520 <USB_FlushRxFifo>
 8007846:	4603      	mov	r3, r0
 8007848:	2b00      	cmp	r3, #0
 800784a:	d001      	beq.n	8007850 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800784c:	2301      	movs	r3, #1
 800784e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007850:	2300      	movs	r3, #0
 8007852:	613b      	str	r3, [r7, #16]
 8007854:	e015      	b.n	8007882 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	015a      	lsls	r2, r3, #5
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	4413      	add	r3, r2
 800785e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007862:	461a      	mov	r2, r3
 8007864:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007868:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	015a      	lsls	r2, r3, #5
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	4413      	add	r3, r2
 8007872:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007876:	461a      	mov	r2, r3
 8007878:	2300      	movs	r3, #0
 800787a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	3301      	adds	r3, #1
 8007880:	613b      	str	r3, [r7, #16]
 8007882:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007886:	461a      	mov	r2, r3
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	4293      	cmp	r3, r2
 800788c:	d3e3      	bcc.n	8007856 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800789a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	4a18      	ldr	r2, [pc, #96]	@ (8007900 <USB_HostInit+0x170>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d10b      	bne.n	80078bc <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80078aa:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	4a15      	ldr	r2, [pc, #84]	@ (8007904 <USB_HostInit+0x174>)
 80078b0:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4a14      	ldr	r2, [pc, #80]	@ (8007908 <USB_HostInit+0x178>)
 80078b6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80078ba:	e009      	b.n	80078d0 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2280      	movs	r2, #128	@ 0x80
 80078c0:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a11      	ldr	r2, [pc, #68]	@ (800790c <USB_HostInit+0x17c>)
 80078c6:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4a11      	ldr	r2, [pc, #68]	@ (8007910 <USB_HostInit+0x180>)
 80078cc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80078d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d105      	bne.n	80078e4 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	699b      	ldr	r3, [r3, #24]
 80078dc:	f043 0210 	orr.w	r2, r3, #16
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	699a      	ldr	r2, [r3, #24]
 80078e8:	4b0a      	ldr	r3, [pc, #40]	@ (8007914 <USB_HostInit+0x184>)
 80078ea:	4313      	orrs	r3, r2
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80078f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3718      	adds	r7, #24
 80078f6:	46bd      	mov	sp, r7
 80078f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80078fc:	b004      	add	sp, #16
 80078fe:	4770      	bx	lr
 8007900:	40040000 	.word	0x40040000
 8007904:	01000200 	.word	0x01000200
 8007908:	00e00300 	.word	0x00e00300
 800790c:	00600080 	.word	0x00600080
 8007910:	004000e0 	.word	0x004000e0
 8007914:	a3200008 	.word	0xa3200008

08007918 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007918:	b480      	push	{r7}
 800791a:	b085      	sub	sp, #20
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	460b      	mov	r3, r1
 8007922:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	68fa      	ldr	r2, [r7, #12]
 8007932:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007936:	f023 0303 	bic.w	r3, r3, #3
 800793a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	78fb      	ldrb	r3, [r7, #3]
 8007946:	f003 0303 	and.w	r3, r3, #3
 800794a:	68f9      	ldr	r1, [r7, #12]
 800794c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007950:	4313      	orrs	r3, r2
 8007952:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007954:	78fb      	ldrb	r3, [r7, #3]
 8007956:	2b01      	cmp	r3, #1
 8007958:	d107      	bne.n	800796a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007960:	461a      	mov	r2, r3
 8007962:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007966:	6053      	str	r3, [r2, #4]
 8007968:	e00c      	b.n	8007984 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800796a:	78fb      	ldrb	r3, [r7, #3]
 800796c:	2b02      	cmp	r3, #2
 800796e:	d107      	bne.n	8007980 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007976:	461a      	mov	r2, r3
 8007978:	f241 7370 	movw	r3, #6000	@ 0x1770
 800797c:	6053      	str	r3, [r2, #4]
 800797e:	e001      	b.n	8007984 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	e000      	b.n	8007986 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3714      	adds	r7, #20
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr

08007992 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007992:	b480      	push	{r7}
 8007994:	b085      	sub	sp, #20
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
 800799a:	460b      	mov	r3, r1
 800799c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80079a2:	2300      	movs	r3, #0
 80079a4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80079b6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d109      	bne.n	80079d6 <USB_DriveVbus+0x44>
 80079c2:	78fb      	ldrb	r3, [r7, #3]
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d106      	bne.n	80079d6 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	68fa      	ldr	r2, [r7, #12]
 80079cc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80079d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80079d4:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80079dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079e0:	d109      	bne.n	80079f6 <USB_DriveVbus+0x64>
 80079e2:	78fb      	ldrb	r3, [r7, #3]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d106      	bne.n	80079f6 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80079f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80079f4:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80079f6:	2300      	movs	r3, #0
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3714      	adds	r7, #20
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b085      	sub	sp, #20
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007a10:	2300      	movs	r3, #0
 8007a12:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	0c5b      	lsrs	r3, r3, #17
 8007a22:	f003 0303 	and.w	r3, r3, #3
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3714      	adds	r7, #20
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr

08007a32 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8007a32:	b480      	push	{r7}
 8007a34:	b085      	sub	sp, #20
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	b29b      	uxth	r3, r3
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3714      	adds	r7, #20
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b088      	sub	sp, #32
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	4608      	mov	r0, r1
 8007a5e:	4611      	mov	r1, r2
 8007a60:	461a      	mov	r2, r3
 8007a62:	4603      	mov	r3, r0
 8007a64:	70fb      	strb	r3, [r7, #3]
 8007a66:	460b      	mov	r3, r1
 8007a68:	70bb      	strb	r3, [r7, #2]
 8007a6a:	4613      	mov	r3, r2
 8007a6c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8007a76:	78fb      	ldrb	r3, [r7, #3]
 8007a78:	015a      	lsls	r2, r3, #5
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a82:	461a      	mov	r2, r3
 8007a84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007a88:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007a8a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007a8e:	2b03      	cmp	r3, #3
 8007a90:	d87c      	bhi.n	8007b8c <USB_HC_Init+0x138>
 8007a92:	a201      	add	r2, pc, #4	@ (adr r2, 8007a98 <USB_HC_Init+0x44>)
 8007a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a98:	08007aa9 	.word	0x08007aa9
 8007a9c:	08007b4f 	.word	0x08007b4f
 8007aa0:	08007aa9 	.word	0x08007aa9
 8007aa4:	08007b11 	.word	0x08007b11
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007aa8:	78fb      	ldrb	r3, [r7, #3]
 8007aaa:	015a      	lsls	r2, r3, #5
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	4413      	add	r3, r2
 8007ab0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	f240 439d 	movw	r3, #1181	@ 0x49d
 8007aba:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007abc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	da10      	bge.n	8007ae6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007ac4:	78fb      	ldrb	r3, [r7, #3]
 8007ac6:	015a      	lsls	r2, r3, #5
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	4413      	add	r3, r2
 8007acc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	78fa      	ldrb	r2, [r7, #3]
 8007ad4:	0151      	lsls	r1, r2, #5
 8007ad6:	693a      	ldr	r2, [r7, #16]
 8007ad8:	440a      	add	r2, r1
 8007ada:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ade:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ae2:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8007ae4:	e055      	b.n	8007b92 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4a6f      	ldr	r2, [pc, #444]	@ (8007ca8 <USB_HC_Init+0x254>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d151      	bne.n	8007b92 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007aee:	78fb      	ldrb	r3, [r7, #3]
 8007af0:	015a      	lsls	r2, r3, #5
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	4413      	add	r3, r2
 8007af6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	78fa      	ldrb	r2, [r7, #3]
 8007afe:	0151      	lsls	r1, r2, #5
 8007b00:	693a      	ldr	r2, [r7, #16]
 8007b02:	440a      	add	r2, r1
 8007b04:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b08:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007b0c:	60d3      	str	r3, [r2, #12]
      break;
 8007b0e:	e040      	b.n	8007b92 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007b10:	78fb      	ldrb	r3, [r7, #3]
 8007b12:	015a      	lsls	r2, r3, #5
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	4413      	add	r3, r2
 8007b18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	f240 639d 	movw	r3, #1693	@ 0x69d
 8007b22:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007b24:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	da34      	bge.n	8007b96 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007b2c:	78fb      	ldrb	r3, [r7, #3]
 8007b2e:	015a      	lsls	r2, r3, #5
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	4413      	add	r3, r2
 8007b34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b38:	68db      	ldr	r3, [r3, #12]
 8007b3a:	78fa      	ldrb	r2, [r7, #3]
 8007b3c:	0151      	lsls	r1, r2, #5
 8007b3e:	693a      	ldr	r2, [r7, #16]
 8007b40:	440a      	add	r2, r1
 8007b42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b4a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007b4c:	e023      	b.n	8007b96 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007b4e:	78fb      	ldrb	r3, [r7, #3]
 8007b50:	015a      	lsls	r2, r3, #5
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	4413      	add	r3, r2
 8007b56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	f240 2325 	movw	r3, #549	@ 0x225
 8007b60:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007b62:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	da17      	bge.n	8007b9a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007b6a:	78fb      	ldrb	r3, [r7, #3]
 8007b6c:	015a      	lsls	r2, r3, #5
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	4413      	add	r3, r2
 8007b72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	78fa      	ldrb	r2, [r7, #3]
 8007b7a:	0151      	lsls	r1, r2, #5
 8007b7c:	693a      	ldr	r2, [r7, #16]
 8007b7e:	440a      	add	r2, r1
 8007b80:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b84:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8007b88:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007b8a:	e006      	b.n	8007b9a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	77fb      	strb	r3, [r7, #31]
      break;
 8007b90:	e004      	b.n	8007b9c <USB_HC_Init+0x148>
      break;
 8007b92:	bf00      	nop
 8007b94:	e002      	b.n	8007b9c <USB_HC_Init+0x148>
      break;
 8007b96:	bf00      	nop
 8007b98:	e000      	b.n	8007b9c <USB_HC_Init+0x148>
      break;
 8007b9a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007b9c:	78fb      	ldrb	r3, [r7, #3]
 8007b9e:	015a      	lsls	r2, r3, #5
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ba8:	461a      	mov	r2, r3
 8007baa:	2300      	movs	r3, #0
 8007bac:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007bae:	78fb      	ldrb	r3, [r7, #3]
 8007bb0:	015a      	lsls	r2, r3, #5
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	78fa      	ldrb	r2, [r7, #3]
 8007bbe:	0151      	lsls	r1, r2, #5
 8007bc0:	693a      	ldr	r2, [r7, #16]
 8007bc2:	440a      	add	r2, r1
 8007bc4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007bc8:	f043 0302 	orr.w	r3, r3, #2
 8007bcc:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007bd4:	699a      	ldr	r2, [r3, #24]
 8007bd6:	78fb      	ldrb	r3, [r7, #3]
 8007bd8:	f003 030f 	and.w	r3, r3, #15
 8007bdc:	2101      	movs	r1, #1
 8007bde:	fa01 f303 	lsl.w	r3, r1, r3
 8007be2:	6939      	ldr	r1, [r7, #16]
 8007be4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007be8:	4313      	orrs	r3, r2
 8007bea:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	699b      	ldr	r3, [r3, #24]
 8007bf0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007bf8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	da03      	bge.n	8007c08 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007c00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c04:	61bb      	str	r3, [r7, #24]
 8007c06:	e001      	b.n	8007c0c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f7ff fef9 	bl	8007a04 <USB_GetHostSpeed>
 8007c12:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007c14:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007c18:	2b02      	cmp	r3, #2
 8007c1a:	d106      	bne.n	8007c2a <USB_HC_Init+0x1d6>
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	d003      	beq.n	8007c2a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007c22:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007c26:	617b      	str	r3, [r7, #20]
 8007c28:	e001      	b.n	8007c2e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007c2e:	787b      	ldrb	r3, [r7, #1]
 8007c30:	059b      	lsls	r3, r3, #22
 8007c32:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007c36:	78bb      	ldrb	r3, [r7, #2]
 8007c38:	02db      	lsls	r3, r3, #11
 8007c3a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007c3e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007c40:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007c44:	049b      	lsls	r3, r3, #18
 8007c46:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007c4a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8007c4c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007c4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007c52:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	431a      	orrs	r2, r3
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007c5c:	78fa      	ldrb	r2, [r7, #3]
 8007c5e:	0151      	lsls	r1, r2, #5
 8007c60:	693a      	ldr	r2, [r7, #16]
 8007c62:	440a      	add	r2, r1
 8007c64:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007c68:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007c6c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007c6e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007c72:	2b03      	cmp	r3, #3
 8007c74:	d003      	beq.n	8007c7e <USB_HC_Init+0x22a>
 8007c76:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d10f      	bne.n	8007c9e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007c7e:	78fb      	ldrb	r3, [r7, #3]
 8007c80:	015a      	lsls	r2, r3, #5
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	4413      	add	r3, r2
 8007c86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	78fa      	ldrb	r2, [r7, #3]
 8007c8e:	0151      	lsls	r1, r2, #5
 8007c90:	693a      	ldr	r2, [r7, #16]
 8007c92:	440a      	add	r2, r1
 8007c94:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c98:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007c9c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007c9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3720      	adds	r7, #32
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	40040000 	.word	0x40040000

08007cac <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b08c      	sub	sp, #48	@ 0x30
 8007cb0:	af02      	add	r7, sp, #8
 8007cb2:	60f8      	str	r0, [r7, #12]
 8007cb4:	60b9      	str	r1, [r7, #8]
 8007cb6:	4613      	mov	r3, r2
 8007cb8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	785b      	ldrb	r3, [r3, #1]
 8007cc2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8007cc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007cc8:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	4a5d      	ldr	r2, [pc, #372]	@ (8007e44 <USB_HC_StartXfer+0x198>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d12f      	bne.n	8007d32 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8007cd2:	79fb      	ldrb	r3, [r7, #7]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d11c      	bne.n	8007d12 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	7c9b      	ldrb	r3, [r3, #18]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d003      	beq.n	8007ce8 <USB_HC_StartXfer+0x3c>
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	7c9b      	ldrb	r3, [r3, #18]
 8007ce4:	2b02      	cmp	r3, #2
 8007ce6:	d124      	bne.n	8007d32 <USB_HC_StartXfer+0x86>
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	799b      	ldrb	r3, [r3, #6]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d120      	bne.n	8007d32 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	015a      	lsls	r2, r3, #5
 8007cf4:	6a3b      	ldr	r3, [r7, #32]
 8007cf6:	4413      	add	r3, r2
 8007cf8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	69fa      	ldr	r2, [r7, #28]
 8007d00:	0151      	lsls	r1, r2, #5
 8007d02:	6a3a      	ldr	r2, [r7, #32]
 8007d04:	440a      	add	r2, r1
 8007d06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d0e:	60d3      	str	r3, [r2, #12]
 8007d10:	e00f      	b.n	8007d32 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	791b      	ldrb	r3, [r3, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d10b      	bne.n	8007d32 <USB_HC_StartXfer+0x86>
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	795b      	ldrb	r3, [r3, #5]
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d107      	bne.n	8007d32 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	785b      	ldrb	r3, [r3, #1]
 8007d26:	4619      	mov	r1, r3
 8007d28:	68f8      	ldr	r0, [r7, #12]
 8007d2a:	f000 fb6b 	bl	8008404 <USB_DoPing>
        return HAL_OK;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	e232      	b.n	8008198 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	799b      	ldrb	r3, [r3, #6]
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d158      	bne.n	8007dec <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	78db      	ldrb	r3, [r3, #3]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d007      	beq.n	8007d56 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007d46:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007d48:	68ba      	ldr	r2, [r7, #8]
 8007d4a:	8a92      	ldrh	r2, [r2, #20]
 8007d4c:	fb03 f202 	mul.w	r2, r3, r2
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	61da      	str	r2, [r3, #28]
 8007d54:	e07c      	b.n	8007e50 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	7c9b      	ldrb	r3, [r3, #18]
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d130      	bne.n	8007dc0 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	6a1b      	ldr	r3, [r3, #32]
 8007d62:	2bbc      	cmp	r3, #188	@ 0xbc
 8007d64:	d918      	bls.n	8007d98 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	8a9b      	ldrh	r3, [r3, #20]
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	69da      	ldr	r2, [r3, #28]
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	68db      	ldr	r3, [r3, #12]
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d003      	beq.n	8007d88 <USB_HC_StartXfer+0xdc>
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	2b02      	cmp	r3, #2
 8007d86:	d103      	bne.n	8007d90 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	2202      	movs	r2, #2
 8007d8c:	60da      	str	r2, [r3, #12]
 8007d8e:	e05f      	b.n	8007e50 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	2201      	movs	r2, #1
 8007d94:	60da      	str	r2, [r3, #12]
 8007d96:	e05b      	b.n	8007e50 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	6a1a      	ldr	r2, [r3, #32]
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d007      	beq.n	8007db8 <USB_HC_StartXfer+0x10c>
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	2b02      	cmp	r3, #2
 8007dae:	d003      	beq.n	8007db8 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	2204      	movs	r2, #4
 8007db4:	60da      	str	r2, [r3, #12]
 8007db6:	e04b      	b.n	8007e50 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	2203      	movs	r2, #3
 8007dbc:	60da      	str	r2, [r3, #12]
 8007dbe:	e047      	b.n	8007e50 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007dc0:	79fb      	ldrb	r3, [r7, #7]
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d10d      	bne.n	8007de2 <USB_HC_StartXfer+0x136>
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	6a1b      	ldr	r3, [r3, #32]
 8007dca:	68ba      	ldr	r2, [r7, #8]
 8007dcc:	8a92      	ldrh	r2, [r2, #20]
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d907      	bls.n	8007de2 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007dd2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007dd4:	68ba      	ldr	r2, [r7, #8]
 8007dd6:	8a92      	ldrh	r2, [r2, #20]
 8007dd8:	fb03 f202 	mul.w	r2, r3, r2
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	61da      	str	r2, [r3, #28]
 8007de0:	e036      	b.n	8007e50 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	6a1a      	ldr	r2, [r3, #32]
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	61da      	str	r2, [r3, #28]
 8007dea:	e031      	b.n	8007e50 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	6a1b      	ldr	r3, [r3, #32]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d018      	beq.n	8007e26 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	6a1b      	ldr	r3, [r3, #32]
 8007df8:	68ba      	ldr	r2, [r7, #8]
 8007dfa:	8a92      	ldrh	r2, [r2, #20]
 8007dfc:	4413      	add	r3, r2
 8007dfe:	3b01      	subs	r3, #1
 8007e00:	68ba      	ldr	r2, [r7, #8]
 8007e02:	8a92      	ldrh	r2, [r2, #20]
 8007e04:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e08:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8007e0a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007e0c:	8b7b      	ldrh	r3, [r7, #26]
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d90b      	bls.n	8007e2a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8007e12:	8b7b      	ldrh	r3, [r7, #26]
 8007e14:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007e16:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007e18:	68ba      	ldr	r2, [r7, #8]
 8007e1a:	8a92      	ldrh	r2, [r2, #20]
 8007e1c:	fb03 f202 	mul.w	r2, r3, r2
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	61da      	str	r2, [r3, #28]
 8007e24:	e001      	b.n	8007e2a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8007e26:	2301      	movs	r3, #1
 8007e28:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	78db      	ldrb	r3, [r3, #3]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d00a      	beq.n	8007e48 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007e32:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007e34:	68ba      	ldr	r2, [r7, #8]
 8007e36:	8a92      	ldrh	r2, [r2, #20]
 8007e38:	fb03 f202 	mul.w	r2, r3, r2
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	61da      	str	r2, [r3, #28]
 8007e40:	e006      	b.n	8007e50 <USB_HC_StartXfer+0x1a4>
 8007e42:	bf00      	nop
 8007e44:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	6a1a      	ldr	r2, [r3, #32]
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	69db      	ldr	r3, [r3, #28]
 8007e54:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007e58:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007e5a:	04d9      	lsls	r1, r3, #19
 8007e5c:	4ba3      	ldr	r3, [pc, #652]	@ (80080ec <USB_HC_StartXfer+0x440>)
 8007e5e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007e60:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	7d9b      	ldrb	r3, [r3, #22]
 8007e66:	075b      	lsls	r3, r3, #29
 8007e68:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007e6c:	69f9      	ldr	r1, [r7, #28]
 8007e6e:	0148      	lsls	r0, r1, #5
 8007e70:	6a39      	ldr	r1, [r7, #32]
 8007e72:	4401      	add	r1, r0
 8007e74:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007e78:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007e7a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007e7c:	79fb      	ldrb	r3, [r7, #7]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d009      	beq.n	8007e96 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	6999      	ldr	r1, [r3, #24]
 8007e86:	69fb      	ldr	r3, [r7, #28]
 8007e88:	015a      	lsls	r2, r3, #5
 8007e8a:	6a3b      	ldr	r3, [r7, #32]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e92:	460a      	mov	r2, r1
 8007e94:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007e96:	6a3b      	ldr	r3, [r7, #32]
 8007e98:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	f003 0301 	and.w	r3, r3, #1
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	bf0c      	ite	eq
 8007ea6:	2301      	moveq	r3, #1
 8007ea8:	2300      	movne	r3, #0
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	015a      	lsls	r2, r3, #5
 8007eb2:	6a3b      	ldr	r3, [r7, #32]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	69fa      	ldr	r2, [r7, #28]
 8007ebe:	0151      	lsls	r1, r2, #5
 8007ec0:	6a3a      	ldr	r2, [r7, #32]
 8007ec2:	440a      	add	r2, r1
 8007ec4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ec8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007ecc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	015a      	lsls	r2, r3, #5
 8007ed2:	6a3b      	ldr	r3, [r7, #32]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	7e7b      	ldrb	r3, [r7, #25]
 8007ede:	075b      	lsls	r3, r3, #29
 8007ee0:	69f9      	ldr	r1, [r7, #28]
 8007ee2:	0148      	lsls	r0, r1, #5
 8007ee4:	6a39      	ldr	r1, [r7, #32]
 8007ee6:	4401      	add	r1, r0
 8007ee8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8007eec:	4313      	orrs	r3, r2
 8007eee:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	799b      	ldrb	r3, [r3, #6]
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	f040 80c3 	bne.w	8008080 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	7c5b      	ldrb	r3, [r3, #17]
 8007efe:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007f00:	68ba      	ldr	r2, [r7, #8]
 8007f02:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007f04:	4313      	orrs	r3, r2
 8007f06:	69fa      	ldr	r2, [r7, #28]
 8007f08:	0151      	lsls	r1, r2, #5
 8007f0a:	6a3a      	ldr	r2, [r7, #32]
 8007f0c:	440a      	add	r2, r1
 8007f0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007f12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007f16:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8007f18:	69fb      	ldr	r3, [r7, #28]
 8007f1a:	015a      	lsls	r2, r3, #5
 8007f1c:	6a3b      	ldr	r3, [r7, #32]
 8007f1e:	4413      	add	r3, r2
 8007f20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f24:	68db      	ldr	r3, [r3, #12]
 8007f26:	69fa      	ldr	r2, [r7, #28]
 8007f28:	0151      	lsls	r1, r2, #5
 8007f2a:	6a3a      	ldr	r2, [r7, #32]
 8007f2c:	440a      	add	r2, r1
 8007f2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f32:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007f36:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	79db      	ldrb	r3, [r3, #7]
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d123      	bne.n	8007f88 <USB_HC_StartXfer+0x2dc>
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	78db      	ldrb	r3, [r3, #3]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d11f      	bne.n	8007f88 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007f48:	69fb      	ldr	r3, [r7, #28]
 8007f4a:	015a      	lsls	r2, r3, #5
 8007f4c:	6a3b      	ldr	r3, [r7, #32]
 8007f4e:	4413      	add	r3, r2
 8007f50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	69fa      	ldr	r2, [r7, #28]
 8007f58:	0151      	lsls	r1, r2, #5
 8007f5a:	6a3a      	ldr	r2, [r7, #32]
 8007f5c:	440a      	add	r2, r1
 8007f5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f66:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007f68:	69fb      	ldr	r3, [r7, #28]
 8007f6a:	015a      	lsls	r2, r3, #5
 8007f6c:	6a3b      	ldr	r3, [r7, #32]
 8007f6e:	4413      	add	r3, r2
 8007f70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f74:	68db      	ldr	r3, [r3, #12]
 8007f76:	69fa      	ldr	r2, [r7, #28]
 8007f78:	0151      	lsls	r1, r2, #5
 8007f7a:	6a3a      	ldr	r2, [r7, #32]
 8007f7c:	440a      	add	r2, r1
 8007f7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f86:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	7c9b      	ldrb	r3, [r3, #18]
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d003      	beq.n	8007f98 <USB_HC_StartXfer+0x2ec>
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	7c9b      	ldrb	r3, [r3, #18]
 8007f94:	2b03      	cmp	r3, #3
 8007f96:	d117      	bne.n	8007fc8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d113      	bne.n	8007fc8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	78db      	ldrb	r3, [r3, #3]
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d10f      	bne.n	8007fc8 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	015a      	lsls	r2, r3, #5
 8007fac:	6a3b      	ldr	r3, [r7, #32]
 8007fae:	4413      	add	r3, r2
 8007fb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	69fa      	ldr	r2, [r7, #28]
 8007fb8:	0151      	lsls	r1, r2, #5
 8007fba:	6a3a      	ldr	r2, [r7, #32]
 8007fbc:	440a      	add	r2, r1
 8007fbe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007fc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007fc6:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	7c9b      	ldrb	r3, [r3, #18]
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d162      	bne.n	8008096 <USB_HC_StartXfer+0x3ea>
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	78db      	ldrb	r3, [r3, #3]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d15e      	bne.n	8008096 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	3b01      	subs	r3, #1
 8007fde:	2b03      	cmp	r3, #3
 8007fe0:	d858      	bhi.n	8008094 <USB_HC_StartXfer+0x3e8>
 8007fe2:	a201      	add	r2, pc, #4	@ (adr r2, 8007fe8 <USB_HC_StartXfer+0x33c>)
 8007fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe8:	08007ff9 	.word	0x08007ff9
 8007fec:	0800801b 	.word	0x0800801b
 8007ff0:	0800803d 	.word	0x0800803d
 8007ff4:	0800805f 	.word	0x0800805f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007ff8:	69fb      	ldr	r3, [r7, #28]
 8007ffa:	015a      	lsls	r2, r3, #5
 8007ffc:	6a3b      	ldr	r3, [r7, #32]
 8007ffe:	4413      	add	r3, r2
 8008000:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	69fa      	ldr	r2, [r7, #28]
 8008008:	0151      	lsls	r1, r2, #5
 800800a:	6a3a      	ldr	r2, [r7, #32]
 800800c:	440a      	add	r2, r1
 800800e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008012:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008016:	6053      	str	r3, [r2, #4]
          break;
 8008018:	e03d      	b.n	8008096 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800801a:	69fb      	ldr	r3, [r7, #28]
 800801c:	015a      	lsls	r2, r3, #5
 800801e:	6a3b      	ldr	r3, [r7, #32]
 8008020:	4413      	add	r3, r2
 8008022:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	69fa      	ldr	r2, [r7, #28]
 800802a:	0151      	lsls	r1, r2, #5
 800802c:	6a3a      	ldr	r2, [r7, #32]
 800802e:	440a      	add	r2, r1
 8008030:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008034:	f043 030e 	orr.w	r3, r3, #14
 8008038:	6053      	str	r3, [r2, #4]
          break;
 800803a:	e02c      	b.n	8008096 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	015a      	lsls	r2, r3, #5
 8008040:	6a3b      	ldr	r3, [r7, #32]
 8008042:	4413      	add	r3, r2
 8008044:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	69fa      	ldr	r2, [r7, #28]
 800804c:	0151      	lsls	r1, r2, #5
 800804e:	6a3a      	ldr	r2, [r7, #32]
 8008050:	440a      	add	r2, r1
 8008052:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008056:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800805a:	6053      	str	r3, [r2, #4]
          break;
 800805c:	e01b      	b.n	8008096 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800805e:	69fb      	ldr	r3, [r7, #28]
 8008060:	015a      	lsls	r2, r3, #5
 8008062:	6a3b      	ldr	r3, [r7, #32]
 8008064:	4413      	add	r3, r2
 8008066:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	69fa      	ldr	r2, [r7, #28]
 800806e:	0151      	lsls	r1, r2, #5
 8008070:	6a3a      	ldr	r2, [r7, #32]
 8008072:	440a      	add	r2, r1
 8008074:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008078:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800807c:	6053      	str	r3, [r2, #4]
          break;
 800807e:	e00a      	b.n	8008096 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008080:	69fb      	ldr	r3, [r7, #28]
 8008082:	015a      	lsls	r2, r3, #5
 8008084:	6a3b      	ldr	r3, [r7, #32]
 8008086:	4413      	add	r3, r2
 8008088:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800808c:	461a      	mov	r2, r3
 800808e:	2300      	movs	r3, #0
 8008090:	6053      	str	r3, [r2, #4]
 8008092:	e000      	b.n	8008096 <USB_HC_StartXfer+0x3ea>
          break;
 8008094:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008096:	69fb      	ldr	r3, [r7, #28]
 8008098:	015a      	lsls	r2, r3, #5
 800809a:	6a3b      	ldr	r3, [r7, #32]
 800809c:	4413      	add	r3, r2
 800809e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80080ac:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	78db      	ldrb	r3, [r3, #3]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d004      	beq.n	80080c0 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080bc:	613b      	str	r3, [r7, #16]
 80080be:	e003      	b.n	80080c8 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80080c6:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80080ce:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80080d0:	69fb      	ldr	r3, [r7, #28]
 80080d2:	015a      	lsls	r2, r3, #5
 80080d4:	6a3b      	ldr	r3, [r7, #32]
 80080d6:	4413      	add	r3, r2
 80080d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080dc:	461a      	mov	r2, r3
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80080e2:	79fb      	ldrb	r3, [r7, #7]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d003      	beq.n	80080f0 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80080e8:	2300      	movs	r3, #0
 80080ea:	e055      	b.n	8008198 <USB_HC_StartXfer+0x4ec>
 80080ec:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	78db      	ldrb	r3, [r3, #3]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d14e      	bne.n	8008196 <USB_HC_StartXfer+0x4ea>
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	6a1b      	ldr	r3, [r3, #32]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d04a      	beq.n	8008196 <USB_HC_StartXfer+0x4ea>
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	79db      	ldrb	r3, [r3, #7]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d146      	bne.n	8008196 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	7c9b      	ldrb	r3, [r3, #18]
 800810c:	2b03      	cmp	r3, #3
 800810e:	d831      	bhi.n	8008174 <USB_HC_StartXfer+0x4c8>
 8008110:	a201      	add	r2, pc, #4	@ (adr r2, 8008118 <USB_HC_StartXfer+0x46c>)
 8008112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008116:	bf00      	nop
 8008118:	08008129 	.word	0x08008129
 800811c:	0800814d 	.word	0x0800814d
 8008120:	08008129 	.word	0x08008129
 8008124:	0800814d 	.word	0x0800814d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	6a1b      	ldr	r3, [r3, #32]
 800812c:	3303      	adds	r3, #3
 800812e:	089b      	lsrs	r3, r3, #2
 8008130:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008132:	8afa      	ldrh	r2, [r7, #22]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008138:	b29b      	uxth	r3, r3
 800813a:	429a      	cmp	r2, r3
 800813c:	d91c      	bls.n	8008178 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	699b      	ldr	r3, [r3, #24]
 8008142:	f043 0220 	orr.w	r2, r3, #32
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	619a      	str	r2, [r3, #24]
        }
        break;
 800814a:	e015      	b.n	8008178 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	6a1b      	ldr	r3, [r3, #32]
 8008150:	3303      	adds	r3, #3
 8008152:	089b      	lsrs	r3, r3, #2
 8008154:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008156:	8afa      	ldrh	r2, [r7, #22]
 8008158:	6a3b      	ldr	r3, [r7, #32]
 800815a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800815e:	691b      	ldr	r3, [r3, #16]
 8008160:	b29b      	uxth	r3, r3
 8008162:	429a      	cmp	r2, r3
 8008164:	d90a      	bls.n	800817c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	699b      	ldr	r3, [r3, #24]
 800816a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	619a      	str	r2, [r3, #24]
        }
        break;
 8008172:	e003      	b.n	800817c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8008174:	bf00      	nop
 8008176:	e002      	b.n	800817e <USB_HC_StartXfer+0x4d2>
        break;
 8008178:	bf00      	nop
 800817a:	e000      	b.n	800817e <USB_HC_StartXfer+0x4d2>
        break;
 800817c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	6999      	ldr	r1, [r3, #24]
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	785a      	ldrb	r2, [r3, #1]
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	6a1b      	ldr	r3, [r3, #32]
 800818a:	b29b      	uxth	r3, r3
 800818c:	2000      	movs	r0, #0
 800818e:	9000      	str	r0, [sp, #0]
 8008190:	68f8      	ldr	r0, [r7, #12]
 8008192:	f7ff f9f3 	bl	800757c <USB_WritePacket>
  }

  return HAL_OK;
 8008196:	2300      	movs	r3, #0
}
 8008198:	4618      	mov	r0, r3
 800819a:	3728      	adds	r7, #40	@ 0x28
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b085      	sub	sp, #20
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80081b2:	695b      	ldr	r3, [r3, #20]
 80081b4:	b29b      	uxth	r3, r3
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3714      	adds	r7, #20
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr

080081c2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80081c2:	b480      	push	{r7}
 80081c4:	b089      	sub	sp, #36	@ 0x24
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
 80081ca:	460b      	mov	r3, r1
 80081cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80081d2:	78fb      	ldrb	r3, [r7, #3]
 80081d4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80081d6:	2300      	movs	r3, #0
 80081d8:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	015a      	lsls	r2, r3, #5
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	4413      	add	r3, r2
 80081e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	0c9b      	lsrs	r3, r3, #18
 80081ea:	f003 0303 	and.w	r3, r3, #3
 80081ee:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80081f0:	69bb      	ldr	r3, [r7, #24]
 80081f2:	015a      	lsls	r2, r3, #5
 80081f4:	69fb      	ldr	r3, [r7, #28]
 80081f6:	4413      	add	r3, r2
 80081f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	0fdb      	lsrs	r3, r3, #31
 8008200:	f003 0301 	and.w	r3, r3, #1
 8008204:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	015a      	lsls	r2, r3, #5
 800820a:	69fb      	ldr	r3, [r7, #28]
 800820c:	4413      	add	r3, r2
 800820e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	0fdb      	lsrs	r3, r3, #31
 8008216:	f003 0301 	and.w	r3, r3, #1
 800821a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	f003 0320 	and.w	r3, r3, #32
 8008224:	2b20      	cmp	r3, #32
 8008226:	d10d      	bne.n	8008244 <USB_HC_Halt+0x82>
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d10a      	bne.n	8008244 <USB_HC_Halt+0x82>
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d005      	beq.n	8008240 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	2b01      	cmp	r3, #1
 8008238:	d002      	beq.n	8008240 <USB_HC_Halt+0x7e>
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	2b03      	cmp	r3, #3
 800823e:	d101      	bne.n	8008244 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8008240:	2300      	movs	r3, #0
 8008242:	e0d8      	b.n	80083f6 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d002      	beq.n	8008250 <USB_HC_Halt+0x8e>
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	2b02      	cmp	r3, #2
 800824e:	d173      	bne.n	8008338 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	015a      	lsls	r2, r3, #5
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	4413      	add	r3, r2
 8008258:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	69ba      	ldr	r2, [r7, #24]
 8008260:	0151      	lsls	r1, r2, #5
 8008262:	69fa      	ldr	r2, [r7, #28]
 8008264:	440a      	add	r2, r1
 8008266:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800826a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800826e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	f003 0320 	and.w	r3, r3, #32
 8008278:	2b00      	cmp	r3, #0
 800827a:	d14a      	bne.n	8008312 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008280:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008284:	2b00      	cmp	r3, #0
 8008286:	d133      	bne.n	80082f0 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008288:	69bb      	ldr	r3, [r7, #24]
 800828a:	015a      	lsls	r2, r3, #5
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	4413      	add	r3, r2
 8008290:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	69ba      	ldr	r2, [r7, #24]
 8008298:	0151      	lsls	r1, r2, #5
 800829a:	69fa      	ldr	r2, [r7, #28]
 800829c:	440a      	add	r2, r1
 800829e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80082a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80082a6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80082a8:	69bb      	ldr	r3, [r7, #24]
 80082aa:	015a      	lsls	r2, r3, #5
 80082ac:	69fb      	ldr	r3, [r7, #28]
 80082ae:	4413      	add	r3, r2
 80082b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	69ba      	ldr	r2, [r7, #24]
 80082b8:	0151      	lsls	r1, r2, #5
 80082ba:	69fa      	ldr	r2, [r7, #28]
 80082bc:	440a      	add	r2, r1
 80082be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80082c2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80082c6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	3301      	adds	r3, #1
 80082cc:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80082d4:	d82e      	bhi.n	8008334 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80082d6:	69bb      	ldr	r3, [r7, #24]
 80082d8:	015a      	lsls	r2, r3, #5
 80082da:	69fb      	ldr	r3, [r7, #28]
 80082dc:	4413      	add	r3, r2
 80082de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80082e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80082ec:	d0ec      	beq.n	80082c8 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80082ee:	e081      	b.n	80083f4 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80082f0:	69bb      	ldr	r3, [r7, #24]
 80082f2:	015a      	lsls	r2, r3, #5
 80082f4:	69fb      	ldr	r3, [r7, #28]
 80082f6:	4413      	add	r3, r2
 80082f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	69ba      	ldr	r2, [r7, #24]
 8008300:	0151      	lsls	r1, r2, #5
 8008302:	69fa      	ldr	r2, [r7, #28]
 8008304:	440a      	add	r2, r1
 8008306:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800830a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800830e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008310:	e070      	b.n	80083f4 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008312:	69bb      	ldr	r3, [r7, #24]
 8008314:	015a      	lsls	r2, r3, #5
 8008316:	69fb      	ldr	r3, [r7, #28]
 8008318:	4413      	add	r3, r2
 800831a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	69ba      	ldr	r2, [r7, #24]
 8008322:	0151      	lsls	r1, r2, #5
 8008324:	69fa      	ldr	r2, [r7, #28]
 8008326:	440a      	add	r2, r1
 8008328:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800832c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008330:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008332:	e05f      	b.n	80083f4 <USB_HC_Halt+0x232>
            break;
 8008334:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008336:	e05d      	b.n	80083f4 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008338:	69bb      	ldr	r3, [r7, #24]
 800833a:	015a      	lsls	r2, r3, #5
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	4413      	add	r3, r2
 8008340:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	69ba      	ldr	r2, [r7, #24]
 8008348:	0151      	lsls	r1, r2, #5
 800834a:	69fa      	ldr	r2, [r7, #28]
 800834c:	440a      	add	r2, r1
 800834e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008352:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008356:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800835e:	691b      	ldr	r3, [r3, #16]
 8008360:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008364:	2b00      	cmp	r3, #0
 8008366:	d133      	bne.n	80083d0 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008368:	69bb      	ldr	r3, [r7, #24]
 800836a:	015a      	lsls	r2, r3, #5
 800836c:	69fb      	ldr	r3, [r7, #28]
 800836e:	4413      	add	r3, r2
 8008370:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	69ba      	ldr	r2, [r7, #24]
 8008378:	0151      	lsls	r1, r2, #5
 800837a:	69fa      	ldr	r2, [r7, #28]
 800837c:	440a      	add	r2, r1
 800837e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008382:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008386:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	015a      	lsls	r2, r3, #5
 800838c:	69fb      	ldr	r3, [r7, #28]
 800838e:	4413      	add	r3, r2
 8008390:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	69ba      	ldr	r2, [r7, #24]
 8008398:	0151      	lsls	r1, r2, #5
 800839a:	69fa      	ldr	r2, [r7, #28]
 800839c:	440a      	add	r2, r1
 800839e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80083a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80083a6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	3301      	adds	r3, #1
 80083ac:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80083b4:	d81d      	bhi.n	80083f2 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80083b6:	69bb      	ldr	r3, [r7, #24]
 80083b8:	015a      	lsls	r2, r3, #5
 80083ba:	69fb      	ldr	r3, [r7, #28]
 80083bc:	4413      	add	r3, r2
 80083be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80083c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80083cc:	d0ec      	beq.n	80083a8 <USB_HC_Halt+0x1e6>
 80083ce:	e011      	b.n	80083f4 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80083d0:	69bb      	ldr	r3, [r7, #24]
 80083d2:	015a      	lsls	r2, r3, #5
 80083d4:	69fb      	ldr	r3, [r7, #28]
 80083d6:	4413      	add	r3, r2
 80083d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	69ba      	ldr	r2, [r7, #24]
 80083e0:	0151      	lsls	r1, r2, #5
 80083e2:	69fa      	ldr	r2, [r7, #28]
 80083e4:	440a      	add	r2, r1
 80083e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80083ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80083ee:	6013      	str	r3, [r2, #0]
 80083f0:	e000      	b.n	80083f4 <USB_HC_Halt+0x232>
          break;
 80083f2:	bf00      	nop
    }
  }

  return HAL_OK;
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3724      	adds	r7, #36	@ 0x24
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr
	...

08008404 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008404:	b480      	push	{r7}
 8008406:	b087      	sub	sp, #28
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	460b      	mov	r3, r1
 800840e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008414:	78fb      	ldrb	r3, [r7, #3]
 8008416:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008418:	2301      	movs	r3, #1
 800841a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	04da      	lsls	r2, r3, #19
 8008420:	4b15      	ldr	r3, [pc, #84]	@ (8008478 <USB_DoPing+0x74>)
 8008422:	4013      	ands	r3, r2
 8008424:	693a      	ldr	r2, [r7, #16]
 8008426:	0151      	lsls	r1, r2, #5
 8008428:	697a      	ldr	r2, [r7, #20]
 800842a:	440a      	add	r2, r1
 800842c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008430:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008434:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	015a      	lsls	r2, r3, #5
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	4413      	add	r3, r2
 800843e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800844c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008454:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	015a      	lsls	r2, r3, #5
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	4413      	add	r3, r2
 800845e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008462:	461a      	mov	r2, r3
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	371c      	adds	r7, #28
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr
 8008476:	bf00      	nop
 8008478:	1ff80000 	.word	0x1ff80000

0800847c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b088      	sub	sp, #32
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008484:	2300      	movs	r3, #0
 8008486:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800848c:	2300      	movs	r3, #0
 800848e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f7fe ffb6 	bl	8007402 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008496:	2110      	movs	r1, #16
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f7ff f80f 	bl	80074bc <USB_FlushTxFifo>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d001      	beq.n	80084a8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80084a4:	2301      	movs	r3, #1
 80084a6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f7ff f839 	bl	8007520 <USB_FlushRxFifo>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d001      	beq.n	80084b8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
 80084b6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80084b8:	2300      	movs	r3, #0
 80084ba:	61bb      	str	r3, [r7, #24]
 80084bc:	e01f      	b.n	80084fe <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80084be:	69bb      	ldr	r3, [r7, #24]
 80084c0:	015a      	lsls	r2, r3, #5
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	4413      	add	r3, r2
 80084c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80084d4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80084dc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80084e4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80084e6:	69bb      	ldr	r3, [r7, #24]
 80084e8:	015a      	lsls	r2, r3, #5
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	4413      	add	r3, r2
 80084ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084f2:	461a      	mov	r2, r3
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	3301      	adds	r3, #1
 80084fc:	61bb      	str	r3, [r7, #24]
 80084fe:	69bb      	ldr	r3, [r7, #24]
 8008500:	2b0f      	cmp	r3, #15
 8008502:	d9dc      	bls.n	80084be <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008504:	2300      	movs	r3, #0
 8008506:	61bb      	str	r3, [r7, #24]
 8008508:	e034      	b.n	8008574 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800850a:	69bb      	ldr	r3, [r7, #24]
 800850c:	015a      	lsls	r2, r3, #5
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	4413      	add	r3, r2
 8008512:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008520:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008528:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008530:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008532:	69bb      	ldr	r3, [r7, #24]
 8008534:	015a      	lsls	r2, r3, #5
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	4413      	add	r3, r2
 800853a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800853e:	461a      	mov	r2, r3
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	3301      	adds	r3, #1
 8008548:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008550:	d80c      	bhi.n	800856c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008552:	69bb      	ldr	r3, [r7, #24]
 8008554:	015a      	lsls	r2, r3, #5
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	4413      	add	r3, r2
 800855a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008564:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008568:	d0ec      	beq.n	8008544 <USB_StopHost+0xc8>
 800856a:	e000      	b.n	800856e <USB_StopHost+0xf2>
        break;
 800856c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800856e:	69bb      	ldr	r3, [r7, #24]
 8008570:	3301      	adds	r3, #1
 8008572:	61bb      	str	r3, [r7, #24]
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	2b0f      	cmp	r3, #15
 8008578:	d9c7      	bls.n	800850a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008580:	461a      	mov	r2, r3
 8008582:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008586:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800858e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f7fe ff25 	bl	80073e0 <USB_EnableGlobalInt>

  return ret;
 8008596:	7ffb      	ldrb	r3, [r7, #31]
}
 8008598:	4618      	mov	r0, r3
 800859a:	3720      	adds	r7, #32
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80085a0:	b590      	push	{r4, r7, lr}
 80085a2:	b089      	sub	sp, #36	@ 0x24
 80085a4:	af04      	add	r7, sp, #16
 80085a6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80085a8:	2301      	movs	r3, #1
 80085aa:	2202      	movs	r2, #2
 80085ac:	2102      	movs	r1, #2
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 fc85 	bl	8008ebe <USBH_FindInterface>
 80085b4:	4603      	mov	r3, r0
 80085b6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80085b8:	7bfb      	ldrb	r3, [r7, #15]
 80085ba:	2bff      	cmp	r3, #255	@ 0xff
 80085bc:	d002      	beq.n	80085c4 <USBH_CDC_InterfaceInit+0x24>
 80085be:	7bfb      	ldrb	r3, [r7, #15]
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d901      	bls.n	80085c8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80085c4:	2302      	movs	r3, #2
 80085c6:	e13d      	b.n	8008844 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80085c8:	7bfb      	ldrb	r3, [r7, #15]
 80085ca:	4619      	mov	r1, r3
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 fc5a 	bl	8008e86 <USBH_SelectInterface>
 80085d2:	4603      	mov	r3, r0
 80085d4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80085d6:	7bbb      	ldrb	r3, [r7, #14]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d001      	beq.n	80085e0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80085dc:	2302      	movs	r3, #2
 80085de:	e131      	b.n	8008844 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80085e6:	2050      	movs	r0, #80	@ 0x50
 80085e8:	f001 fd44 	bl	800a074 <malloc>
 80085ec:	4603      	mov	r3, r0
 80085ee:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80085f6:	69db      	ldr	r3, [r3, #28]
 80085f8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d101      	bne.n	8008604 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008600:	2302      	movs	r3, #2
 8008602:	e11f      	b.n	8008844 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008604:	2250      	movs	r2, #80	@ 0x50
 8008606:	2100      	movs	r1, #0
 8008608:	68b8      	ldr	r0, [r7, #8]
 800860a:	f001 fdf1 	bl	800a1f0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800860e:	7bfb      	ldrb	r3, [r7, #15]
 8008610:	687a      	ldr	r2, [r7, #4]
 8008612:	211a      	movs	r1, #26
 8008614:	fb01 f303 	mul.w	r3, r1, r3
 8008618:	4413      	add	r3, r2
 800861a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	b25b      	sxtb	r3, r3
 8008622:	2b00      	cmp	r3, #0
 8008624:	da15      	bge.n	8008652 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008626:	7bfb      	ldrb	r3, [r7, #15]
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	211a      	movs	r1, #26
 800862c:	fb01 f303 	mul.w	r3, r1, r3
 8008630:	4413      	add	r3, r2
 8008632:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008636:	781a      	ldrb	r2, [r3, #0]
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800863c:	7bfb      	ldrb	r3, [r7, #15]
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	211a      	movs	r1, #26
 8008642:	fb01 f303 	mul.w	r3, r1, r3
 8008646:	4413      	add	r3, r2
 8008648:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800864c:	881a      	ldrh	r2, [r3, #0]
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	785b      	ldrb	r3, [r3, #1]
 8008656:	4619      	mov	r1, r3
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 ffba 	bl	80095d2 <USBH_AllocPipe>
 800865e:	4603      	mov	r3, r0
 8008660:	461a      	mov	r2, r3
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	7819      	ldrb	r1, [r3, #0]
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	7858      	ldrb	r0, [r3, #1]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800867a:	68ba      	ldr	r2, [r7, #8]
 800867c:	8952      	ldrh	r2, [r2, #10]
 800867e:	9202      	str	r2, [sp, #8]
 8008680:	2203      	movs	r2, #3
 8008682:	9201      	str	r2, [sp, #4]
 8008684:	9300      	str	r3, [sp, #0]
 8008686:	4623      	mov	r3, r4
 8008688:	4602      	mov	r2, r0
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 ff72 	bl	8009574 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	2200      	movs	r2, #0
 8008696:	4619      	mov	r1, r3
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f001 fa35 	bl	8009b08 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800869e:	2300      	movs	r3, #0
 80086a0:	2200      	movs	r2, #0
 80086a2:	210a      	movs	r1, #10
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 fc0a 	bl	8008ebe <USBH_FindInterface>
 80086aa:	4603      	mov	r3, r0
 80086ac:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80086ae:	7bfb      	ldrb	r3, [r7, #15]
 80086b0:	2bff      	cmp	r3, #255	@ 0xff
 80086b2:	d002      	beq.n	80086ba <USBH_CDC_InterfaceInit+0x11a>
 80086b4:	7bfb      	ldrb	r3, [r7, #15]
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d901      	bls.n	80086be <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80086ba:	2302      	movs	r3, #2
 80086bc:	e0c2      	b.n	8008844 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80086be:	7bfb      	ldrb	r3, [r7, #15]
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	211a      	movs	r1, #26
 80086c4:	fb01 f303 	mul.w	r3, r1, r3
 80086c8:	4413      	add	r3, r2
 80086ca:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	b25b      	sxtb	r3, r3
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	da16      	bge.n	8008704 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80086d6:	7bfb      	ldrb	r3, [r7, #15]
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	211a      	movs	r1, #26
 80086dc:	fb01 f303 	mul.w	r3, r1, r3
 80086e0:	4413      	add	r3, r2
 80086e2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80086e6:	781a      	ldrb	r2, [r3, #0]
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80086ec:	7bfb      	ldrb	r3, [r7, #15]
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	211a      	movs	r1, #26
 80086f2:	fb01 f303 	mul.w	r3, r1, r3
 80086f6:	4413      	add	r3, r2
 80086f8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80086fc:	881a      	ldrh	r2, [r3, #0]
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	835a      	strh	r2, [r3, #26]
 8008702:	e015      	b.n	8008730 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008704:	7bfb      	ldrb	r3, [r7, #15]
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	211a      	movs	r1, #26
 800870a:	fb01 f303 	mul.w	r3, r1, r3
 800870e:	4413      	add	r3, r2
 8008710:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008714:	781a      	ldrb	r2, [r3, #0]
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800871a:	7bfb      	ldrb	r3, [r7, #15]
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	211a      	movs	r1, #26
 8008720:	fb01 f303 	mul.w	r3, r1, r3
 8008724:	4413      	add	r3, r2
 8008726:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800872a:	881a      	ldrh	r2, [r3, #0]
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008730:	7bfb      	ldrb	r3, [r7, #15]
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	211a      	movs	r1, #26
 8008736:	fb01 f303 	mul.w	r3, r1, r3
 800873a:	4413      	add	r3, r2
 800873c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	b25b      	sxtb	r3, r3
 8008744:	2b00      	cmp	r3, #0
 8008746:	da16      	bge.n	8008776 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008748:	7bfb      	ldrb	r3, [r7, #15]
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	211a      	movs	r1, #26
 800874e:	fb01 f303 	mul.w	r3, r1, r3
 8008752:	4413      	add	r3, r2
 8008754:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008758:	781a      	ldrb	r2, [r3, #0]
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800875e:	7bfb      	ldrb	r3, [r7, #15]
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	211a      	movs	r1, #26
 8008764:	fb01 f303 	mul.w	r3, r1, r3
 8008768:	4413      	add	r3, r2
 800876a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800876e:	881a      	ldrh	r2, [r3, #0]
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	835a      	strh	r2, [r3, #26]
 8008774:	e015      	b.n	80087a2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008776:	7bfb      	ldrb	r3, [r7, #15]
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	211a      	movs	r1, #26
 800877c:	fb01 f303 	mul.w	r3, r1, r3
 8008780:	4413      	add	r3, r2
 8008782:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008786:	781a      	ldrb	r2, [r3, #0]
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800878c:	7bfb      	ldrb	r3, [r7, #15]
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	211a      	movs	r1, #26
 8008792:	fb01 f303 	mul.w	r3, r1, r3
 8008796:	4413      	add	r3, r2
 8008798:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800879c:	881a      	ldrh	r2, [r3, #0]
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	7b9b      	ldrb	r3, [r3, #14]
 80087a6:	4619      	mov	r1, r3
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 ff12 	bl	80095d2 <USBH_AllocPipe>
 80087ae:	4603      	mov	r3, r0
 80087b0:	461a      	mov	r2, r3
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	7bdb      	ldrb	r3, [r3, #15]
 80087ba:	4619      	mov	r1, r3
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f000 ff08 	bl	80095d2 <USBH_AllocPipe>
 80087c2:	4603      	mov	r3, r0
 80087c4:	461a      	mov	r2, r3
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	7b59      	ldrb	r1, [r3, #13]
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	7b98      	ldrb	r0, [r3, #14]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80087de:	68ba      	ldr	r2, [r7, #8]
 80087e0:	8b12      	ldrh	r2, [r2, #24]
 80087e2:	9202      	str	r2, [sp, #8]
 80087e4:	2202      	movs	r2, #2
 80087e6:	9201      	str	r2, [sp, #4]
 80087e8:	9300      	str	r3, [sp, #0]
 80087ea:	4623      	mov	r3, r4
 80087ec:	4602      	mov	r2, r0
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 fec0 	bl	8009574 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	7b19      	ldrb	r1, [r3, #12]
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	7bd8      	ldrb	r0, [r3, #15]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008808:	68ba      	ldr	r2, [r7, #8]
 800880a:	8b52      	ldrh	r2, [r2, #26]
 800880c:	9202      	str	r2, [sp, #8]
 800880e:	2202      	movs	r2, #2
 8008810:	9201      	str	r2, [sp, #4]
 8008812:	9300      	str	r3, [sp, #0]
 8008814:	4623      	mov	r3, r4
 8008816:	4602      	mov	r2, r0
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 feab 	bl	8009574 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	2200      	movs	r2, #0
 8008822:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	7b5b      	ldrb	r3, [r3, #13]
 800882a:	2200      	movs	r2, #0
 800882c:	4619      	mov	r1, r3
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f001 f96a 	bl	8009b08 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	7b1b      	ldrb	r3, [r3, #12]
 8008838:	2200      	movs	r2, #0
 800883a:	4619      	mov	r1, r3
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f001 f963 	bl	8009b08 <USBH_LL_SetToggle>

  return USBH_OK;
 8008842:	2300      	movs	r3, #0
}
 8008844:	4618      	mov	r0, r3
 8008846:	3714      	adds	r7, #20
 8008848:	46bd      	mov	sp, r7
 800884a:	bd90      	pop	{r4, r7, pc}

0800884c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b084      	sub	sp, #16
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800885a:	69db      	ldr	r3, [r3, #28]
 800885c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d00e      	beq.n	8008884 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	4619      	mov	r1, r3
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 fea0 	bl	80095b2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	4619      	mov	r1, r3
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 fecb 	bl	8009614 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2200      	movs	r2, #0
 8008882:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	7b1b      	ldrb	r3, [r3, #12]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d00e      	beq.n	80088aa <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	7b1b      	ldrb	r3, [r3, #12]
 8008890:	4619      	mov	r1, r3
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 fe8d 	bl	80095b2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	7b1b      	ldrb	r3, [r3, #12]
 800889c:	4619      	mov	r1, r3
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 feb8 	bl	8009614 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2200      	movs	r2, #0
 80088a8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	7b5b      	ldrb	r3, [r3, #13]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d00e      	beq.n	80088d0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	7b5b      	ldrb	r3, [r3, #13]
 80088b6:	4619      	mov	r1, r3
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 fe7a 	bl	80095b2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	7b5b      	ldrb	r3, [r3, #13]
 80088c2:	4619      	mov	r1, r3
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f000 fea5 	bl	8009614 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2200      	movs	r2, #0
 80088ce:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80088d6:	69db      	ldr	r3, [r3, #28]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d00b      	beq.n	80088f4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80088e2:	69db      	ldr	r3, [r3, #28]
 80088e4:	4618      	mov	r0, r3
 80088e6:	f001 fbcd 	bl	800a084 <free>
    phost->pActiveClass->pData = 0U;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80088f0:	2200      	movs	r2, #0
 80088f2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80088f4:	2300      	movs	r3, #0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3710      	adds	r7, #16
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}

080088fe <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80088fe:	b580      	push	{r7, lr}
 8008900:	b084      	sub	sp, #16
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800890c:	69db      	ldr	r3, [r3, #28]
 800890e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	3340      	adds	r3, #64	@ 0x40
 8008914:	4619      	mov	r1, r3
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 f8b1 	bl	8008a7e <GetLineCoding>
 800891c:	4603      	mov	r3, r0
 800891e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008920:	7afb      	ldrb	r3, [r7, #11]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d105      	bne.n	8008932 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800892c:	2102      	movs	r1, #2
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008932:	7afb      	ldrb	r3, [r7, #11]
}
 8008934:	4618      	mov	r0, r3
 8008936:	3710      	adds	r7, #16
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008944:	2301      	movs	r3, #1
 8008946:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008948:	2300      	movs	r3, #0
 800894a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008952:	69db      	ldr	r3, [r3, #28]
 8008954:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800895c:	2b04      	cmp	r3, #4
 800895e:	d877      	bhi.n	8008a50 <USBH_CDC_Process+0x114>
 8008960:	a201      	add	r2, pc, #4	@ (adr r2, 8008968 <USBH_CDC_Process+0x2c>)
 8008962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008966:	bf00      	nop
 8008968:	0800897d 	.word	0x0800897d
 800896c:	08008983 	.word	0x08008983
 8008970:	080089b3 	.word	0x080089b3
 8008974:	08008a27 	.word	0x08008a27
 8008978:	08008a35 	.word	0x08008a35
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800897c:	2300      	movs	r3, #0
 800897e:	73fb      	strb	r3, [r7, #15]
      break;
 8008980:	e06d      	b.n	8008a5e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008986:	4619      	mov	r1, r3
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 f897 	bl	8008abc <SetLineCoding>
 800898e:	4603      	mov	r3, r0
 8008990:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008992:	7bbb      	ldrb	r3, [r7, #14]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d104      	bne.n	80089a2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	2202      	movs	r2, #2
 800899c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80089a0:	e058      	b.n	8008a54 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80089a2:	7bbb      	ldrb	r3, [r7, #14]
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d055      	beq.n	8008a54 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	2204      	movs	r2, #4
 80089ac:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80089b0:	e050      	b.n	8008a54 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	3340      	adds	r3, #64	@ 0x40
 80089b6:	4619      	mov	r1, r3
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 f860 	bl	8008a7e <GetLineCoding>
 80089be:	4603      	mov	r3, r0
 80089c0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80089c2:	7bbb      	ldrb	r3, [r7, #14]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d126      	bne.n	8008a16 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089da:	791b      	ldrb	r3, [r3, #4]
 80089dc:	429a      	cmp	r2, r3
 80089de:	d13b      	bne.n	8008a58 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089ea:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d133      	bne.n	8008a58 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089fa:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d12b      	bne.n	8008a58 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a08:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d124      	bne.n	8008a58 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 f958 	bl	8008cc4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008a14:	e020      	b.n	8008a58 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008a16:	7bbb      	ldrb	r3, [r7, #14]
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d01d      	beq.n	8008a58 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	2204      	movs	r2, #4
 8008a20:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008a24:	e018      	b.n	8008a58 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 f867 	bl	8008afa <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f000 f8da 	bl	8008be6 <CDC_ProcessReception>
      break;
 8008a32:	e014      	b.n	8008a5e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008a34:	2100      	movs	r1, #0
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 fb27 	bl	800908a <USBH_ClrFeature>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008a40:	7bbb      	ldrb	r3, [r7, #14]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d10a      	bne.n	8008a5c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8008a4e:	e005      	b.n	8008a5c <USBH_CDC_Process+0x120>

    default:
      break;
 8008a50:	bf00      	nop
 8008a52:	e004      	b.n	8008a5e <USBH_CDC_Process+0x122>
      break;
 8008a54:	bf00      	nop
 8008a56:	e002      	b.n	8008a5e <USBH_CDC_Process+0x122>
      break;
 8008a58:	bf00      	nop
 8008a5a:	e000      	b.n	8008a5e <USBH_CDC_Process+0x122>
      break;
 8008a5c:	bf00      	nop

  }

  return status;
 8008a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3710      	adds	r7, #16
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	370c      	adds	r7, #12
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr

08008a7e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008a7e:	b580      	push	{r7, lr}
 8008a80:	b082      	sub	sp, #8
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
 8008a86:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	22a1      	movs	r2, #161	@ 0xa1
 8008a8c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2221      	movs	r2, #33	@ 0x21
 8008a92:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2200      	movs	r2, #0
 8008a98:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2207      	movs	r2, #7
 8008aa4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	2207      	movs	r2, #7
 8008aaa:	4619      	mov	r1, r3
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 fb10 	bl	80090d2 <USBH_CtlReq>
 8008ab2:	4603      	mov	r3, r0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3708      	adds	r7, #8
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2221      	movs	r2, #33	@ 0x21
 8008aca:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2220      	movs	r2, #32
 8008ad0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2207      	movs	r2, #7
 8008ae2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	2207      	movs	r2, #7
 8008ae8:	4619      	mov	r1, r3
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 faf1 	bl	80090d2 <USBH_CtlReq>
 8008af0:	4603      	mov	r3, r0
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3708      	adds	r7, #8
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}

08008afa <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008afa:	b580      	push	{r7, lr}
 8008afc:	b086      	sub	sp, #24
 8008afe:	af02      	add	r7, sp, #8
 8008b00:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b08:	69db      	ldr	r3, [r3, #28]
 8008b0a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d002      	beq.n	8008b20 <CDC_ProcessTransmission+0x26>
 8008b1a:	2b02      	cmp	r3, #2
 8008b1c:	d023      	beq.n	8008b66 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008b1e:	e05e      	b.n	8008bde <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b24:	68fa      	ldr	r2, [r7, #12]
 8008b26:	8b12      	ldrh	r2, [r2, #24]
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d90b      	bls.n	8008b44 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	69d9      	ldr	r1, [r3, #28]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	8b1a      	ldrh	r2, [r3, #24]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	7b5b      	ldrb	r3, [r3, #13]
 8008b38:	2001      	movs	r0, #1
 8008b3a:	9000      	str	r0, [sp, #0]
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 fcd6 	bl	80094ee <USBH_BulkSendData>
 8008b42:	e00b      	b.n	8008b5c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8008b4c:	b29a      	uxth	r2, r3
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	7b5b      	ldrb	r3, [r3, #13]
 8008b52:	2001      	movs	r0, #1
 8008b54:	9000      	str	r0, [sp, #0]
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 fcc9 	bl	80094ee <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2202      	movs	r2, #2
 8008b60:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008b64:	e03b      	b.n	8008bde <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	7b5b      	ldrb	r3, [r3, #13]
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 ffa1 	bl	8009ab4 <USBH_LL_GetURBState>
 8008b72:	4603      	mov	r3, r0
 8008b74:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008b76:	7afb      	ldrb	r3, [r7, #11]
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d128      	bne.n	8008bce <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b80:	68fa      	ldr	r2, [r7, #12]
 8008b82:	8b12      	ldrh	r2, [r2, #24]
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d90e      	bls.n	8008ba6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b8c:	68fa      	ldr	r2, [r7, #12]
 8008b8e:	8b12      	ldrh	r2, [r2, #24]
 8008b90:	1a9a      	subs	r2, r3, r2
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	69db      	ldr	r3, [r3, #28]
 8008b9a:	68fa      	ldr	r2, [r7, #12]
 8008b9c:	8b12      	ldrh	r2, [r2, #24]
 8008b9e:	441a      	add	r2, r3
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	61da      	str	r2, [r3, #28]
 8008ba4:	e002      	b.n	8008bac <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d004      	beq.n	8008bbe <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008bbc:	e00e      	b.n	8008bdc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f000 f868 	bl	8008c9c <USBH_CDC_TransmitCallback>
      break;
 8008bcc:	e006      	b.n	8008bdc <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008bce:	7afb      	ldrb	r3, [r7, #11]
 8008bd0:	2b02      	cmp	r3, #2
 8008bd2:	d103      	bne.n	8008bdc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008bdc:	bf00      	nop
  }
}
 8008bde:	bf00      	nop
 8008be0:	3710      	adds	r7, #16
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b086      	sub	sp, #24
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008bf4:	69db      	ldr	r3, [r3, #28]
 8008bf6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8008c02:	2b03      	cmp	r3, #3
 8008c04:	d002      	beq.n	8008c0c <CDC_ProcessReception+0x26>
 8008c06:	2b04      	cmp	r3, #4
 8008c08:	d00e      	beq.n	8008c28 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008c0a:	e043      	b.n	8008c94 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	6a19      	ldr	r1, [r3, #32]
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	8b5a      	ldrh	r2, [r3, #26]
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	7b1b      	ldrb	r3, [r3, #12]
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 fc8d 	bl	8009538 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	2204      	movs	r2, #4
 8008c22:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008c26:	e035      	b.n	8008c94 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	7b1b      	ldrb	r3, [r3, #12]
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 ff40 	bl	8009ab4 <USBH_LL_GetURBState>
 8008c34:	4603      	mov	r3, r0
 8008c36:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008c38:	7cfb      	ldrb	r3, [r7, #19]
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d129      	bne.n	8008c92 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	7b1b      	ldrb	r3, [r3, #12]
 8008c42:	4619      	mov	r1, r3
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f000 fea3 	bl	8009990 <USBH_LL_GetLastXferSize>
 8008c4a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c50:	68fa      	ldr	r2, [r7, #12]
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d016      	beq.n	8008c84 <CDC_ProcessReception+0x9e>
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	8b5b      	ldrh	r3, [r3, #26]
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d110      	bne.n	8008c84 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	1ad2      	subs	r2, r2, r3
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	6a1a      	ldr	r2, [r3, #32]
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	441a      	add	r2, r3
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	2203      	movs	r2, #3
 8008c7e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008c82:	e006      	b.n	8008c92 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	2200      	movs	r2, #0
 8008c88:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 f80f 	bl	8008cb0 <USBH_CDC_ReceiveCallback>
      break;
 8008c92:	bf00      	nop
  }
}
 8008c94:	bf00      	nop
 8008c96:	3718      	adds	r7, #24
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008ca4:	bf00      	nop
 8008ca6:	370c      	adds	r7, #12
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr

08008cb0 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b083      	sub	sp, #12
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008cb8:	bf00      	nop
 8008cba:	370c      	adds	r7, #12
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr

08008cc4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b083      	sub	sp, #12
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008ccc:	bf00      	nop
 8008cce:	370c      	adds	r7, #12
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b084      	sub	sp, #16
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	60b9      	str	r1, [r7, #8]
 8008ce2:	4613      	mov	r3, r2
 8008ce4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d101      	bne.n	8008cf0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008cec:	2302      	movs	r3, #2
 8008cee:	e029      	b.n	8008d44 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	79fa      	ldrb	r2, [r7, #7]
 8008cf4:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2200      	movs	r2, #0
 8008d04:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008d08:	68f8      	ldr	r0, [r7, #12]
 8008d0a:	f000 f81f 	bl	8008d4c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2200      	movs	r2, #0
 8008d12:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2200      	movs	r2, #0
 8008d22:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d003      	beq.n	8008d3c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	68ba      	ldr	r2, [r7, #8]
 8008d38:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008d3c:	68f8      	ldr	r0, [r7, #12]
 8008d3e:	f000 fdb5 	bl	80098ac <USBH_LL_Init>

  return USBH_OK;
 8008d42:	2300      	movs	r3, #0
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3710      	adds	r7, #16
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008d54:	2300      	movs	r3, #0
 8008d56:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008d58:	2300      	movs	r3, #0
 8008d5a:	60fb      	str	r3, [r7, #12]
 8008d5c:	e009      	b.n	8008d72 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	33e0      	adds	r3, #224	@ 0xe0
 8008d64:	009b      	lsls	r3, r3, #2
 8008d66:	4413      	add	r3, r2
 8008d68:	2200      	movs	r2, #0
 8008d6a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	3301      	adds	r3, #1
 8008d70:	60fb      	str	r3, [r7, #12]
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2b0f      	cmp	r3, #15
 8008d76:	d9f2      	bls.n	8008d5e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008d78:	2300      	movs	r3, #0
 8008d7a:	60fb      	str	r3, [r7, #12]
 8008d7c:	e009      	b.n	8008d92 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	4413      	add	r3, r2
 8008d84:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008d88:	2200      	movs	r2, #0
 8008d8a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	3301      	adds	r3, #1
 8008d90:	60fb      	str	r3, [r7, #12]
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d98:	d3f1      	bcc.n	8008d7e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2201      	movs	r2, #1
 8008daa:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2200      	movs	r2, #0
 8008db0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2201      	movs	r2, #1
 8008db8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2240      	movs	r2, #64	@ 0x40
 8008dbe:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2200      	movs	r2, #0
 8008de2:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	331c      	adds	r3, #28
 8008dea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008dee:	2100      	movs	r1, #0
 8008df0:	4618      	mov	r0, r3
 8008df2:	f001 f9fd 	bl	800a1f0 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008dfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008e00:	2100      	movs	r1, #0
 8008e02:	4618      	mov	r0, r3
 8008e04:	f001 f9f4 	bl	800a1f0 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008e0e:	2212      	movs	r2, #18
 8008e10:	2100      	movs	r1, #0
 8008e12:	4618      	mov	r0, r3
 8008e14:	f001 f9ec 	bl	800a1f0 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008e1e:	223e      	movs	r2, #62	@ 0x3e
 8008e20:	2100      	movs	r1, #0
 8008e22:	4618      	mov	r0, r3
 8008e24:	f001 f9e4 	bl	800a1f0 <memset>

  return USBH_OK;
 8008e28:	2300      	movs	r3, #0
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3710      	adds	r7, #16
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008e32:	b480      	push	{r7}
 8008e34:	b085      	sub	sp, #20
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
 8008e3a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d016      	beq.n	8008e74 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d10e      	bne.n	8008e6e <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008e56:	1c59      	adds	r1, r3, #1
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	33de      	adds	r3, #222	@ 0xde
 8008e62:	6839      	ldr	r1, [r7, #0]
 8008e64:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	73fb      	strb	r3, [r7, #15]
 8008e6c:	e004      	b.n	8008e78 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008e6e:	2302      	movs	r3, #2
 8008e70:	73fb      	strb	r3, [r7, #15]
 8008e72:	e001      	b.n	8008e78 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008e74:	2302      	movs	r3, #2
 8008e76:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3714      	adds	r7, #20
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr

08008e86 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008e86:	b480      	push	{r7}
 8008e88:	b085      	sub	sp, #20
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
 8008e8e:	460b      	mov	r3, r1
 8008e90:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008e92:	2300      	movs	r3, #0
 8008e94:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8008e9c:	78fa      	ldrb	r2, [r7, #3]
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d204      	bcs.n	8008eac <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	78fa      	ldrb	r2, [r7, #3]
 8008ea6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8008eaa:	e001      	b.n	8008eb0 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008eac:	2302      	movs	r3, #2
 8008eae:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3714      	adds	r7, #20
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr

08008ebe <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008ebe:	b480      	push	{r7}
 8008ec0:	b087      	sub	sp, #28
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	6078      	str	r0, [r7, #4]
 8008ec6:	4608      	mov	r0, r1
 8008ec8:	4611      	mov	r1, r2
 8008eca:	461a      	mov	r2, r3
 8008ecc:	4603      	mov	r3, r0
 8008ece:	70fb      	strb	r3, [r7, #3]
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	70bb      	strb	r3, [r7, #2]
 8008ed4:	4613      	mov	r3, r2
 8008ed6:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008edc:	2300      	movs	r3, #0
 8008ede:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008ee6:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008ee8:	e025      	b.n	8008f36 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008eea:	7dfb      	ldrb	r3, [r7, #23]
 8008eec:	221a      	movs	r2, #26
 8008eee:	fb02 f303 	mul.w	r3, r2, r3
 8008ef2:	3308      	adds	r3, #8
 8008ef4:	68fa      	ldr	r2, [r7, #12]
 8008ef6:	4413      	add	r3, r2
 8008ef8:	3302      	adds	r3, #2
 8008efa:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	795b      	ldrb	r3, [r3, #5]
 8008f00:	78fa      	ldrb	r2, [r7, #3]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d002      	beq.n	8008f0c <USBH_FindInterface+0x4e>
 8008f06:	78fb      	ldrb	r3, [r7, #3]
 8008f08:	2bff      	cmp	r3, #255	@ 0xff
 8008f0a:	d111      	bne.n	8008f30 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008f10:	78ba      	ldrb	r2, [r7, #2]
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d002      	beq.n	8008f1c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008f16:	78bb      	ldrb	r3, [r7, #2]
 8008f18:	2bff      	cmp	r3, #255	@ 0xff
 8008f1a:	d109      	bne.n	8008f30 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008f20:	787a      	ldrb	r2, [r7, #1]
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d002      	beq.n	8008f2c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008f26:	787b      	ldrb	r3, [r7, #1]
 8008f28:	2bff      	cmp	r3, #255	@ 0xff
 8008f2a:	d101      	bne.n	8008f30 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008f2c:	7dfb      	ldrb	r3, [r7, #23]
 8008f2e:	e006      	b.n	8008f3e <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008f30:	7dfb      	ldrb	r3, [r7, #23]
 8008f32:	3301      	adds	r3, #1
 8008f34:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008f36:	7dfb      	ldrb	r3, [r7, #23]
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	d9d6      	bls.n	8008eea <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008f3c:	23ff      	movs	r3, #255	@ 0xff
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	371c      	adds	r7, #28
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr

08008f4a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8008f4a:	b580      	push	{r7, lr}
 8008f4c:	b082      	sub	sp, #8
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 fce6 	bl	8009924 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008f58:	2101      	movs	r1, #1
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 fdbd 	bl	8009ada <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008f60:	2300      	movs	r3, #0
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3708      	adds	r7, #8
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}

08008f6a <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008f6a:	b480      	push	{r7}
 8008f6c:	b083      	sub	sp, #12
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
 8008f72:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	683a      	ldr	r2, [r7, #0]
 8008f78:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8008f7c:	bf00      	nop
 8008f7e:	370c      	adds	r7, #12
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr

08008f88 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008f96:	1c5a      	adds	r2, r3, #1
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 f804 	bl	8008fac <USBH_HandleSof>
}
 8008fa4:	bf00      	nop
 8008fa6:	3708      	adds	r7, #8
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	2b0b      	cmp	r3, #11
 8008fbc:	d10a      	bne.n	8008fd4 <USBH_HandleSof+0x28>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d005      	beq.n	8008fd4 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008fce:	699b      	ldr	r3, [r3, #24]
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	4798      	blx	r3
  }
}
 8008fd4:	bf00      	nop
 8008fd6:	3708      	adds	r7, #8
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008fec:	bf00      	nop
}
 8008fee:	370c      	adds	r7, #12
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8009008:	bf00      	nop
}
 800900a:	370c      	adds	r7, #12
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr

08009014 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2201      	movs	r2, #1
 8009020:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2200      	movs	r2, #0
 8009028:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2200      	movs	r2, #0
 8009030:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009034:	2300      	movs	r3, #0
}
 8009036:	4618      	mov	r0, r3
 8009038:	370c      	adds	r7, #12
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr

08009042 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009042:	b580      	push	{r7, lr}
 8009044:	b082      	sub	sp, #8
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2201      	movs	r2, #1
 800904e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2200      	movs	r2, #0
 8009056:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 fc79 	bl	800995a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	791b      	ldrb	r3, [r3, #4]
 800906c:	4619      	mov	r1, r3
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 fad0 	bl	8009614 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	795b      	ldrb	r3, [r3, #5]
 8009078:	4619      	mov	r1, r3
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 faca 	bl	8009614 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009080:	2300      	movs	r3, #0
}
 8009082:	4618      	mov	r0, r3
 8009084:	3708      	adds	r7, #8
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}

0800908a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800908a:	b580      	push	{r7, lr}
 800908c:	b082      	sub	sp, #8
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
 8009092:	460b      	mov	r3, r1
 8009094:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	789b      	ldrb	r3, [r3, #2]
 800909a:	2b01      	cmp	r3, #1
 800909c:	d10f      	bne.n	80090be <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2202      	movs	r2, #2
 80090a2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2201      	movs	r2, #1
 80090a8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80090b0:	78fb      	ldrb	r3, [r7, #3]
 80090b2:	b29a      	uxth	r2, r3
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2200      	movs	r2, #0
 80090bc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80090be:	2200      	movs	r2, #0
 80090c0:	2100      	movs	r1, #0
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 f805 	bl	80090d2 <USBH_CtlReq>
 80090c8:	4603      	mov	r3, r0
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3708      	adds	r7, #8
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}

080090d2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b086      	sub	sp, #24
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	60f8      	str	r0, [r7, #12]
 80090da:	60b9      	str	r1, [r7, #8]
 80090dc:	4613      	mov	r3, r2
 80090de:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80090e0:	2301      	movs	r3, #1
 80090e2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	789b      	ldrb	r3, [r3, #2]
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d002      	beq.n	80090f2 <USBH_CtlReq+0x20>
 80090ec:	2b02      	cmp	r3, #2
 80090ee:	d00f      	beq.n	8009110 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80090f0:	e027      	b.n	8009142 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	68ba      	ldr	r2, [r7, #8]
 80090f6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	88fa      	ldrh	r2, [r7, #6]
 80090fc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2201      	movs	r2, #1
 8009102:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2202      	movs	r2, #2
 8009108:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800910a:	2301      	movs	r3, #1
 800910c:	75fb      	strb	r3, [r7, #23]
      break;
 800910e:	e018      	b.n	8009142 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009110:	68f8      	ldr	r0, [r7, #12]
 8009112:	f000 f81b 	bl	800914c <USBH_HandleControl>
 8009116:	4603      	mov	r3, r0
 8009118:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800911a:	7dfb      	ldrb	r3, [r7, #23]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d002      	beq.n	8009126 <USBH_CtlReq+0x54>
 8009120:	7dfb      	ldrb	r3, [r7, #23]
 8009122:	2b03      	cmp	r3, #3
 8009124:	d106      	bne.n	8009134 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2201      	movs	r2, #1
 800912a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2200      	movs	r2, #0
 8009130:	761a      	strb	r2, [r3, #24]
      break;
 8009132:	e005      	b.n	8009140 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009134:	7dfb      	ldrb	r3, [r7, #23]
 8009136:	2b02      	cmp	r3, #2
 8009138:	d102      	bne.n	8009140 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2201      	movs	r2, #1
 800913e:	709a      	strb	r2, [r3, #2]
      break;
 8009140:	bf00      	nop
  }
  return status;
 8009142:	7dfb      	ldrb	r3, [r7, #23]
}
 8009144:	4618      	mov	r0, r3
 8009146:	3718      	adds	r7, #24
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b086      	sub	sp, #24
 8009150:	af02      	add	r7, sp, #8
 8009152:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009154:	2301      	movs	r3, #1
 8009156:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009158:	2300      	movs	r3, #0
 800915a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	7e1b      	ldrb	r3, [r3, #24]
 8009160:	3b01      	subs	r3, #1
 8009162:	2b0a      	cmp	r3, #10
 8009164:	f200 8156 	bhi.w	8009414 <USBH_HandleControl+0x2c8>
 8009168:	a201      	add	r2, pc, #4	@ (adr r2, 8009170 <USBH_HandleControl+0x24>)
 800916a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800916e:	bf00      	nop
 8009170:	0800919d 	.word	0x0800919d
 8009174:	080091b7 	.word	0x080091b7
 8009178:	08009221 	.word	0x08009221
 800917c:	08009247 	.word	0x08009247
 8009180:	0800927f 	.word	0x0800927f
 8009184:	080092a9 	.word	0x080092a9
 8009188:	080092fb 	.word	0x080092fb
 800918c:	0800931d 	.word	0x0800931d
 8009190:	08009359 	.word	0x08009359
 8009194:	0800937f 	.word	0x0800937f
 8009198:	080093bd 	.word	0x080093bd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f103 0110 	add.w	r1, r3, #16
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	795b      	ldrb	r3, [r3, #5]
 80091a6:	461a      	mov	r2, r3
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 f943 	bl	8009434 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2202      	movs	r2, #2
 80091b2:	761a      	strb	r2, [r3, #24]
      break;
 80091b4:	e139      	b.n	800942a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	795b      	ldrb	r3, [r3, #5]
 80091ba:	4619      	mov	r1, r3
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 fc79 	bl	8009ab4 <USBH_LL_GetURBState>
 80091c2:	4603      	mov	r3, r0
 80091c4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80091c6:	7bbb      	ldrb	r3, [r7, #14]
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d11e      	bne.n	800920a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	7c1b      	ldrb	r3, [r3, #16]
 80091d0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80091d4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	8adb      	ldrh	r3, [r3, #22]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d00a      	beq.n	80091f4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80091de:	7b7b      	ldrb	r3, [r7, #13]
 80091e0:	2b80      	cmp	r3, #128	@ 0x80
 80091e2:	d103      	bne.n	80091ec <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2203      	movs	r2, #3
 80091e8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80091ea:	e115      	b.n	8009418 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2205      	movs	r2, #5
 80091f0:	761a      	strb	r2, [r3, #24]
      break;
 80091f2:	e111      	b.n	8009418 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80091f4:	7b7b      	ldrb	r3, [r7, #13]
 80091f6:	2b80      	cmp	r3, #128	@ 0x80
 80091f8:	d103      	bne.n	8009202 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2209      	movs	r2, #9
 80091fe:	761a      	strb	r2, [r3, #24]
      break;
 8009200:	e10a      	b.n	8009418 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2207      	movs	r2, #7
 8009206:	761a      	strb	r2, [r3, #24]
      break;
 8009208:	e106      	b.n	8009418 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800920a:	7bbb      	ldrb	r3, [r7, #14]
 800920c:	2b04      	cmp	r3, #4
 800920e:	d003      	beq.n	8009218 <USBH_HandleControl+0xcc>
 8009210:	7bbb      	ldrb	r3, [r7, #14]
 8009212:	2b02      	cmp	r3, #2
 8009214:	f040 8100 	bne.w	8009418 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	220b      	movs	r2, #11
 800921c:	761a      	strb	r2, [r3, #24]
      break;
 800921e:	e0fb      	b.n	8009418 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009226:	b29a      	uxth	r2, r3
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6899      	ldr	r1, [r3, #8]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	899a      	ldrh	r2, [r3, #12]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	791b      	ldrb	r3, [r3, #4]
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 f93a 	bl	80094b2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2204      	movs	r2, #4
 8009242:	761a      	strb	r2, [r3, #24]
      break;
 8009244:	e0f1      	b.n	800942a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	791b      	ldrb	r3, [r3, #4]
 800924a:	4619      	mov	r1, r3
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 fc31 	bl	8009ab4 <USBH_LL_GetURBState>
 8009252:	4603      	mov	r3, r0
 8009254:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009256:	7bbb      	ldrb	r3, [r7, #14]
 8009258:	2b01      	cmp	r3, #1
 800925a:	d102      	bne.n	8009262 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2209      	movs	r2, #9
 8009260:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009262:	7bbb      	ldrb	r3, [r7, #14]
 8009264:	2b05      	cmp	r3, #5
 8009266:	d102      	bne.n	800926e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009268:	2303      	movs	r3, #3
 800926a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800926c:	e0d6      	b.n	800941c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800926e:	7bbb      	ldrb	r3, [r7, #14]
 8009270:	2b04      	cmp	r3, #4
 8009272:	f040 80d3 	bne.w	800941c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	220b      	movs	r2, #11
 800927a:	761a      	strb	r2, [r3, #24]
      break;
 800927c:	e0ce      	b.n	800941c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6899      	ldr	r1, [r3, #8]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	899a      	ldrh	r2, [r3, #12]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	795b      	ldrb	r3, [r3, #5]
 800928a:	2001      	movs	r0, #1
 800928c:	9000      	str	r0, [sp, #0]
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 f8ea 	bl	8009468 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800929a:	b29a      	uxth	r2, r3
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2206      	movs	r2, #6
 80092a4:	761a      	strb	r2, [r3, #24]
      break;
 80092a6:	e0c0      	b.n	800942a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	795b      	ldrb	r3, [r3, #5]
 80092ac:	4619      	mov	r1, r3
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 fc00 	bl	8009ab4 <USBH_LL_GetURBState>
 80092b4:	4603      	mov	r3, r0
 80092b6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80092b8:	7bbb      	ldrb	r3, [r7, #14]
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d103      	bne.n	80092c6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2207      	movs	r2, #7
 80092c2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80092c4:	e0ac      	b.n	8009420 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80092c6:	7bbb      	ldrb	r3, [r7, #14]
 80092c8:	2b05      	cmp	r3, #5
 80092ca:	d105      	bne.n	80092d8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	220c      	movs	r2, #12
 80092d0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80092d2:	2303      	movs	r3, #3
 80092d4:	73fb      	strb	r3, [r7, #15]
      break;
 80092d6:	e0a3      	b.n	8009420 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80092d8:	7bbb      	ldrb	r3, [r7, #14]
 80092da:	2b02      	cmp	r3, #2
 80092dc:	d103      	bne.n	80092e6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2205      	movs	r2, #5
 80092e2:	761a      	strb	r2, [r3, #24]
      break;
 80092e4:	e09c      	b.n	8009420 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80092e6:	7bbb      	ldrb	r3, [r7, #14]
 80092e8:	2b04      	cmp	r3, #4
 80092ea:	f040 8099 	bne.w	8009420 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	220b      	movs	r2, #11
 80092f2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80092f4:	2302      	movs	r3, #2
 80092f6:	73fb      	strb	r3, [r7, #15]
      break;
 80092f8:	e092      	b.n	8009420 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	791b      	ldrb	r3, [r3, #4]
 80092fe:	2200      	movs	r2, #0
 8009300:	2100      	movs	r1, #0
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 f8d5 	bl	80094b2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800930e:	b29a      	uxth	r2, r3
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2208      	movs	r2, #8
 8009318:	761a      	strb	r2, [r3, #24]

      break;
 800931a:	e086      	b.n	800942a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	791b      	ldrb	r3, [r3, #4]
 8009320:	4619      	mov	r1, r3
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 fbc6 	bl	8009ab4 <USBH_LL_GetURBState>
 8009328:	4603      	mov	r3, r0
 800932a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800932c:	7bbb      	ldrb	r3, [r7, #14]
 800932e:	2b01      	cmp	r3, #1
 8009330:	d105      	bne.n	800933e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	220d      	movs	r2, #13
 8009336:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009338:	2300      	movs	r3, #0
 800933a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800933c:	e072      	b.n	8009424 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800933e:	7bbb      	ldrb	r3, [r7, #14]
 8009340:	2b04      	cmp	r3, #4
 8009342:	d103      	bne.n	800934c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	220b      	movs	r2, #11
 8009348:	761a      	strb	r2, [r3, #24]
      break;
 800934a:	e06b      	b.n	8009424 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800934c:	7bbb      	ldrb	r3, [r7, #14]
 800934e:	2b05      	cmp	r3, #5
 8009350:	d168      	bne.n	8009424 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009352:	2303      	movs	r3, #3
 8009354:	73fb      	strb	r3, [r7, #15]
      break;
 8009356:	e065      	b.n	8009424 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	795b      	ldrb	r3, [r3, #5]
 800935c:	2201      	movs	r2, #1
 800935e:	9200      	str	r2, [sp, #0]
 8009360:	2200      	movs	r2, #0
 8009362:	2100      	movs	r1, #0
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f000 f87f 	bl	8009468 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009370:	b29a      	uxth	r2, r3
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	220a      	movs	r2, #10
 800937a:	761a      	strb	r2, [r3, #24]
      break;
 800937c:	e055      	b.n	800942a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	795b      	ldrb	r3, [r3, #5]
 8009382:	4619      	mov	r1, r3
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 fb95 	bl	8009ab4 <USBH_LL_GetURBState>
 800938a:	4603      	mov	r3, r0
 800938c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800938e:	7bbb      	ldrb	r3, [r7, #14]
 8009390:	2b01      	cmp	r3, #1
 8009392:	d105      	bne.n	80093a0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009394:	2300      	movs	r3, #0
 8009396:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	220d      	movs	r2, #13
 800939c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800939e:	e043      	b.n	8009428 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80093a0:	7bbb      	ldrb	r3, [r7, #14]
 80093a2:	2b02      	cmp	r3, #2
 80093a4:	d103      	bne.n	80093ae <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2209      	movs	r2, #9
 80093aa:	761a      	strb	r2, [r3, #24]
      break;
 80093ac:	e03c      	b.n	8009428 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80093ae:	7bbb      	ldrb	r3, [r7, #14]
 80093b0:	2b04      	cmp	r3, #4
 80093b2:	d139      	bne.n	8009428 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	220b      	movs	r2, #11
 80093b8:	761a      	strb	r2, [r3, #24]
      break;
 80093ba:	e035      	b.n	8009428 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	7e5b      	ldrb	r3, [r3, #25]
 80093c0:	3301      	adds	r3, #1
 80093c2:	b2da      	uxtb	r2, r3
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	765a      	strb	r2, [r3, #25]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	7e5b      	ldrb	r3, [r3, #25]
 80093cc:	2b02      	cmp	r3, #2
 80093ce:	d806      	bhi.n	80093de <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2201      	movs	r2, #1
 80093d4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2201      	movs	r2, #1
 80093da:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80093dc:	e025      	b.n	800942a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80093e4:	2106      	movs	r1, #6
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2200      	movs	r2, #0
 80093ee:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	795b      	ldrb	r3, [r3, #5]
 80093f4:	4619      	mov	r1, r3
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 f90c 	bl	8009614 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	791b      	ldrb	r3, [r3, #4]
 8009400:	4619      	mov	r1, r3
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 f906 	bl	8009614 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2200      	movs	r2, #0
 800940c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800940e:	2302      	movs	r3, #2
 8009410:	73fb      	strb	r3, [r7, #15]
      break;
 8009412:	e00a      	b.n	800942a <USBH_HandleControl+0x2de>

    default:
      break;
 8009414:	bf00      	nop
 8009416:	e008      	b.n	800942a <USBH_HandleControl+0x2de>
      break;
 8009418:	bf00      	nop
 800941a:	e006      	b.n	800942a <USBH_HandleControl+0x2de>
      break;
 800941c:	bf00      	nop
 800941e:	e004      	b.n	800942a <USBH_HandleControl+0x2de>
      break;
 8009420:	bf00      	nop
 8009422:	e002      	b.n	800942a <USBH_HandleControl+0x2de>
      break;
 8009424:	bf00      	nop
 8009426:	e000      	b.n	800942a <USBH_HandleControl+0x2de>
      break;
 8009428:	bf00      	nop
  }

  return status;
 800942a:	7bfb      	ldrb	r3, [r7, #15]
}
 800942c:	4618      	mov	r0, r3
 800942e:	3710      	adds	r7, #16
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b088      	sub	sp, #32
 8009438:	af04      	add	r7, sp, #16
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	60b9      	str	r1, [r7, #8]
 800943e:	4613      	mov	r3, r2
 8009440:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009442:	79f9      	ldrb	r1, [r7, #7]
 8009444:	2300      	movs	r3, #0
 8009446:	9303      	str	r3, [sp, #12]
 8009448:	2308      	movs	r3, #8
 800944a:	9302      	str	r3, [sp, #8]
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	9301      	str	r3, [sp, #4]
 8009450:	2300      	movs	r3, #0
 8009452:	9300      	str	r3, [sp, #0]
 8009454:	2300      	movs	r3, #0
 8009456:	2200      	movs	r2, #0
 8009458:	68f8      	ldr	r0, [r7, #12]
 800945a:	f000 fafa 	bl	8009a52 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800945e:	2300      	movs	r3, #0
}
 8009460:	4618      	mov	r0, r3
 8009462:	3710      	adds	r7, #16
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b088      	sub	sp, #32
 800946c:	af04      	add	r7, sp, #16
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	60b9      	str	r1, [r7, #8]
 8009472:	4611      	mov	r1, r2
 8009474:	461a      	mov	r2, r3
 8009476:	460b      	mov	r3, r1
 8009478:	80fb      	strh	r3, [r7, #6]
 800947a:	4613      	mov	r3, r2
 800947c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009484:	2b00      	cmp	r3, #0
 8009486:	d001      	beq.n	800948c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009488:	2300      	movs	r3, #0
 800948a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800948c:	7979      	ldrb	r1, [r7, #5]
 800948e:	7e3b      	ldrb	r3, [r7, #24]
 8009490:	9303      	str	r3, [sp, #12]
 8009492:	88fb      	ldrh	r3, [r7, #6]
 8009494:	9302      	str	r3, [sp, #8]
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	9301      	str	r3, [sp, #4]
 800949a:	2301      	movs	r3, #1
 800949c:	9300      	str	r3, [sp, #0]
 800949e:	2300      	movs	r3, #0
 80094a0:	2200      	movs	r2, #0
 80094a2:	68f8      	ldr	r0, [r7, #12]
 80094a4:	f000 fad5 	bl	8009a52 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80094a8:	2300      	movs	r3, #0
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3710      	adds	r7, #16
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}

080094b2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80094b2:	b580      	push	{r7, lr}
 80094b4:	b088      	sub	sp, #32
 80094b6:	af04      	add	r7, sp, #16
 80094b8:	60f8      	str	r0, [r7, #12]
 80094ba:	60b9      	str	r1, [r7, #8]
 80094bc:	4611      	mov	r1, r2
 80094be:	461a      	mov	r2, r3
 80094c0:	460b      	mov	r3, r1
 80094c2:	80fb      	strh	r3, [r7, #6]
 80094c4:	4613      	mov	r3, r2
 80094c6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80094c8:	7979      	ldrb	r1, [r7, #5]
 80094ca:	2300      	movs	r3, #0
 80094cc:	9303      	str	r3, [sp, #12]
 80094ce:	88fb      	ldrh	r3, [r7, #6]
 80094d0:	9302      	str	r3, [sp, #8]
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	9301      	str	r3, [sp, #4]
 80094d6:	2301      	movs	r3, #1
 80094d8:	9300      	str	r3, [sp, #0]
 80094da:	2300      	movs	r3, #0
 80094dc:	2201      	movs	r2, #1
 80094de:	68f8      	ldr	r0, [r7, #12]
 80094e0:	f000 fab7 	bl	8009a52 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80094e4:	2300      	movs	r3, #0

}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3710      	adds	r7, #16
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}

080094ee <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80094ee:	b580      	push	{r7, lr}
 80094f0:	b088      	sub	sp, #32
 80094f2:	af04      	add	r7, sp, #16
 80094f4:	60f8      	str	r0, [r7, #12]
 80094f6:	60b9      	str	r1, [r7, #8]
 80094f8:	4611      	mov	r1, r2
 80094fa:	461a      	mov	r2, r3
 80094fc:	460b      	mov	r3, r1
 80094fe:	80fb      	strh	r3, [r7, #6]
 8009500:	4613      	mov	r3, r2
 8009502:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800950a:	2b00      	cmp	r3, #0
 800950c:	d001      	beq.n	8009512 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800950e:	2300      	movs	r3, #0
 8009510:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009512:	7979      	ldrb	r1, [r7, #5]
 8009514:	7e3b      	ldrb	r3, [r7, #24]
 8009516:	9303      	str	r3, [sp, #12]
 8009518:	88fb      	ldrh	r3, [r7, #6]
 800951a:	9302      	str	r3, [sp, #8]
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	9301      	str	r3, [sp, #4]
 8009520:	2301      	movs	r3, #1
 8009522:	9300      	str	r3, [sp, #0]
 8009524:	2302      	movs	r3, #2
 8009526:	2200      	movs	r2, #0
 8009528:	68f8      	ldr	r0, [r7, #12]
 800952a:	f000 fa92 	bl	8009a52 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800952e:	2300      	movs	r3, #0
}
 8009530:	4618      	mov	r0, r3
 8009532:	3710      	adds	r7, #16
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b088      	sub	sp, #32
 800953c:	af04      	add	r7, sp, #16
 800953e:	60f8      	str	r0, [r7, #12]
 8009540:	60b9      	str	r1, [r7, #8]
 8009542:	4611      	mov	r1, r2
 8009544:	461a      	mov	r2, r3
 8009546:	460b      	mov	r3, r1
 8009548:	80fb      	strh	r3, [r7, #6]
 800954a:	4613      	mov	r3, r2
 800954c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800954e:	7979      	ldrb	r1, [r7, #5]
 8009550:	2300      	movs	r3, #0
 8009552:	9303      	str	r3, [sp, #12]
 8009554:	88fb      	ldrh	r3, [r7, #6]
 8009556:	9302      	str	r3, [sp, #8]
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	9301      	str	r3, [sp, #4]
 800955c:	2301      	movs	r3, #1
 800955e:	9300      	str	r3, [sp, #0]
 8009560:	2302      	movs	r3, #2
 8009562:	2201      	movs	r2, #1
 8009564:	68f8      	ldr	r0, [r7, #12]
 8009566:	f000 fa74 	bl	8009a52 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800956a:	2300      	movs	r3, #0
}
 800956c:	4618      	mov	r0, r3
 800956e:	3710      	adds	r7, #16
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}

08009574 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b086      	sub	sp, #24
 8009578:	af04      	add	r7, sp, #16
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	4608      	mov	r0, r1
 800957e:	4611      	mov	r1, r2
 8009580:	461a      	mov	r2, r3
 8009582:	4603      	mov	r3, r0
 8009584:	70fb      	strb	r3, [r7, #3]
 8009586:	460b      	mov	r3, r1
 8009588:	70bb      	strb	r3, [r7, #2]
 800958a:	4613      	mov	r3, r2
 800958c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800958e:	7878      	ldrb	r0, [r7, #1]
 8009590:	78ba      	ldrb	r2, [r7, #2]
 8009592:	78f9      	ldrb	r1, [r7, #3]
 8009594:	8b3b      	ldrh	r3, [r7, #24]
 8009596:	9302      	str	r3, [sp, #8]
 8009598:	7d3b      	ldrb	r3, [r7, #20]
 800959a:	9301      	str	r3, [sp, #4]
 800959c:	7c3b      	ldrb	r3, [r7, #16]
 800959e:	9300      	str	r3, [sp, #0]
 80095a0:	4603      	mov	r3, r0
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 fa07 	bl	80099b6 <USBH_LL_OpenPipe>

  return USBH_OK;
 80095a8:	2300      	movs	r3, #0
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3708      	adds	r7, #8
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b082      	sub	sp, #8
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
 80095ba:	460b      	mov	r3, r1
 80095bc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80095be:	78fb      	ldrb	r3, [r7, #3]
 80095c0:	4619      	mov	r1, r3
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 fa26 	bl	8009a14 <USBH_LL_ClosePipe>

  return USBH_OK;
 80095c8:	2300      	movs	r3, #0
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3708      	adds	r7, #8
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}

080095d2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80095d2:	b580      	push	{r7, lr}
 80095d4:	b084      	sub	sp, #16
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
 80095da:	460b      	mov	r3, r1
 80095dc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 f836 	bl	8009650 <USBH_GetFreePipe>
 80095e4:	4603      	mov	r3, r0
 80095e6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80095e8:	89fb      	ldrh	r3, [r7, #14]
 80095ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d00a      	beq.n	8009608 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80095f2:	78fa      	ldrb	r2, [r7, #3]
 80095f4:	89fb      	ldrh	r3, [r7, #14]
 80095f6:	f003 030f 	and.w	r3, r3, #15
 80095fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80095fe:	6879      	ldr	r1, [r7, #4]
 8009600:	33e0      	adds	r3, #224	@ 0xe0
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	440b      	add	r3, r1
 8009606:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009608:	89fb      	ldrh	r3, [r7, #14]
 800960a:	b2db      	uxtb	r3, r3
}
 800960c:	4618      	mov	r0, r3
 800960e:	3710      	adds	r7, #16
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009614:	b480      	push	{r7}
 8009616:	b083      	sub	sp, #12
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	460b      	mov	r3, r1
 800961e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009620:	78fb      	ldrb	r3, [r7, #3]
 8009622:	2b0f      	cmp	r3, #15
 8009624:	d80d      	bhi.n	8009642 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009626:	78fb      	ldrb	r3, [r7, #3]
 8009628:	687a      	ldr	r2, [r7, #4]
 800962a:	33e0      	adds	r3, #224	@ 0xe0
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	4413      	add	r3, r2
 8009630:	685a      	ldr	r2, [r3, #4]
 8009632:	78fb      	ldrb	r3, [r7, #3]
 8009634:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009638:	6879      	ldr	r1, [r7, #4]
 800963a:	33e0      	adds	r3, #224	@ 0xe0
 800963c:	009b      	lsls	r3, r3, #2
 800963e:	440b      	add	r3, r1
 8009640:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009642:	2300      	movs	r3, #0
}
 8009644:	4618      	mov	r0, r3
 8009646:	370c      	adds	r7, #12
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr

08009650 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009650:	b480      	push	{r7}
 8009652:	b085      	sub	sp, #20
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009658:	2300      	movs	r3, #0
 800965a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800965c:	2300      	movs	r3, #0
 800965e:	73fb      	strb	r3, [r7, #15]
 8009660:	e00f      	b.n	8009682 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009662:	7bfb      	ldrb	r3, [r7, #15]
 8009664:	687a      	ldr	r2, [r7, #4]
 8009666:	33e0      	adds	r3, #224	@ 0xe0
 8009668:	009b      	lsls	r3, r3, #2
 800966a:	4413      	add	r3, r2
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009672:	2b00      	cmp	r3, #0
 8009674:	d102      	bne.n	800967c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009676:	7bfb      	ldrb	r3, [r7, #15]
 8009678:	b29b      	uxth	r3, r3
 800967a:	e007      	b.n	800968c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800967c:	7bfb      	ldrb	r3, [r7, #15]
 800967e:	3301      	adds	r3, #1
 8009680:	73fb      	strb	r3, [r7, #15]
 8009682:	7bfb      	ldrb	r3, [r7, #15]
 8009684:	2b0f      	cmp	r3, #15
 8009686:	d9ec      	bls.n	8009662 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009688:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800968c:	4618      	mov	r0, r3
 800968e:	3714      	adds	r7, #20
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr

08009698 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800969c:	2201      	movs	r2, #1
 800969e:	490e      	ldr	r1, [pc, #56]	@ (80096d8 <MX_USB_HOST_Init+0x40>)
 80096a0:	480e      	ldr	r0, [pc, #56]	@ (80096dc <MX_USB_HOST_Init+0x44>)
 80096a2:	f7ff fb19 	bl	8008cd8 <USBH_Init>
 80096a6:	4603      	mov	r3, r0
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d001      	beq.n	80096b0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80096ac:	f7f7 fca8 	bl	8001000 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80096b0:	490b      	ldr	r1, [pc, #44]	@ (80096e0 <MX_USB_HOST_Init+0x48>)
 80096b2:	480a      	ldr	r0, [pc, #40]	@ (80096dc <MX_USB_HOST_Init+0x44>)
 80096b4:	f7ff fbbd 	bl	8008e32 <USBH_RegisterClass>
 80096b8:	4603      	mov	r3, r0
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d001      	beq.n	80096c2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80096be:	f7f7 fc9f 	bl	8001000 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80096c2:	4806      	ldr	r0, [pc, #24]	@ (80096dc <MX_USB_HOST_Init+0x44>)
 80096c4:	f7ff fc41 	bl	8008f4a <USBH_Start>
 80096c8:	4603      	mov	r3, r0
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d001      	beq.n	80096d2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80096ce:	f7f7 fc97 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80096d2:	bf00      	nop
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	bf00      	nop
 80096d8:	080096e5 	.word	0x080096e5
 80096dc:	200011f8 	.word	0x200011f8
 80096e0:	2000010c 	.word	0x2000010c

080096e4 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	460b      	mov	r3, r1
 80096ee:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80096f0:	78fb      	ldrb	r3, [r7, #3]
 80096f2:	3b01      	subs	r3, #1
 80096f4:	2b04      	cmp	r3, #4
 80096f6:	d819      	bhi.n	800972c <USBH_UserProcess+0x48>
 80096f8:	a201      	add	r2, pc, #4	@ (adr r2, 8009700 <USBH_UserProcess+0x1c>)
 80096fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096fe:	bf00      	nop
 8009700:	0800972d 	.word	0x0800972d
 8009704:	0800971d 	.word	0x0800971d
 8009708:	0800972d 	.word	0x0800972d
 800970c:	08009725 	.word	0x08009725
 8009710:	08009715 	.word	0x08009715
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009714:	4b09      	ldr	r3, [pc, #36]	@ (800973c <USBH_UserProcess+0x58>)
 8009716:	2203      	movs	r2, #3
 8009718:	701a      	strb	r2, [r3, #0]
  break;
 800971a:	e008      	b.n	800972e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800971c:	4b07      	ldr	r3, [pc, #28]	@ (800973c <USBH_UserProcess+0x58>)
 800971e:	2202      	movs	r2, #2
 8009720:	701a      	strb	r2, [r3, #0]
  break;
 8009722:	e004      	b.n	800972e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009724:	4b05      	ldr	r3, [pc, #20]	@ (800973c <USBH_UserProcess+0x58>)
 8009726:	2201      	movs	r2, #1
 8009728:	701a      	strb	r2, [r3, #0]
  break;
 800972a:	e000      	b.n	800972e <USBH_UserProcess+0x4a>

  default:
  break;
 800972c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800972e:	bf00      	nop
 8009730:	370c      	adds	r7, #12
 8009732:	46bd      	mov	sp, r7
 8009734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009738:	4770      	bx	lr
 800973a:	bf00      	nop
 800973c:	200015d0 	.word	0x200015d0

08009740 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b08a      	sub	sp, #40	@ 0x28
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009748:	f107 0314 	add.w	r3, r7, #20
 800974c:	2200      	movs	r2, #0
 800974e:	601a      	str	r2, [r3, #0]
 8009750:	605a      	str	r2, [r3, #4]
 8009752:	609a      	str	r2, [r3, #8]
 8009754:	60da      	str	r2, [r3, #12]
 8009756:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009760:	d147      	bne.n	80097f2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009762:	2300      	movs	r3, #0
 8009764:	613b      	str	r3, [r7, #16]
 8009766:	4b25      	ldr	r3, [pc, #148]	@ (80097fc <HAL_HCD_MspInit+0xbc>)
 8009768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800976a:	4a24      	ldr	r2, [pc, #144]	@ (80097fc <HAL_HCD_MspInit+0xbc>)
 800976c:	f043 0301 	orr.w	r3, r3, #1
 8009770:	6313      	str	r3, [r2, #48]	@ 0x30
 8009772:	4b22      	ldr	r3, [pc, #136]	@ (80097fc <HAL_HCD_MspInit+0xbc>)
 8009774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009776:	f003 0301 	and.w	r3, r3, #1
 800977a:	613b      	str	r3, [r7, #16]
 800977c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800977e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009782:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009784:	2300      	movs	r3, #0
 8009786:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009788:	2300      	movs	r3, #0
 800978a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800978c:	f107 0314 	add.w	r3, r7, #20
 8009790:	4619      	mov	r1, r3
 8009792:	481b      	ldr	r0, [pc, #108]	@ (8009800 <HAL_HCD_MspInit+0xc0>)
 8009794:	f7f8 ff2c 	bl	80025f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009798:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800979c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800979e:	2302      	movs	r3, #2
 80097a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097a2:	2300      	movs	r3, #0
 80097a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80097a6:	2300      	movs	r3, #0
 80097a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80097aa:	230a      	movs	r3, #10
 80097ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80097ae:	f107 0314 	add.w	r3, r7, #20
 80097b2:	4619      	mov	r1, r3
 80097b4:	4812      	ldr	r0, [pc, #72]	@ (8009800 <HAL_HCD_MspInit+0xc0>)
 80097b6:	f7f8 ff1b 	bl	80025f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80097ba:	4b10      	ldr	r3, [pc, #64]	@ (80097fc <HAL_HCD_MspInit+0xbc>)
 80097bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097be:	4a0f      	ldr	r2, [pc, #60]	@ (80097fc <HAL_HCD_MspInit+0xbc>)
 80097c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097c4:	6353      	str	r3, [r2, #52]	@ 0x34
 80097c6:	2300      	movs	r3, #0
 80097c8:	60fb      	str	r3, [r7, #12]
 80097ca:	4b0c      	ldr	r3, [pc, #48]	@ (80097fc <HAL_HCD_MspInit+0xbc>)
 80097cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097ce:	4a0b      	ldr	r2, [pc, #44]	@ (80097fc <HAL_HCD_MspInit+0xbc>)
 80097d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80097d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80097d6:	4b09      	ldr	r3, [pc, #36]	@ (80097fc <HAL_HCD_MspInit+0xbc>)
 80097d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80097de:	60fb      	str	r3, [r7, #12]
 80097e0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80097e2:	2200      	movs	r2, #0
 80097e4:	2100      	movs	r1, #0
 80097e6:	2043      	movs	r0, #67	@ 0x43
 80097e8:	f7f8 fb5b 	bl	8001ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80097ec:	2043      	movs	r0, #67	@ 0x43
 80097ee:	f7f8 fb74 	bl	8001eda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80097f2:	bf00      	nop
 80097f4:	3728      	adds	r7, #40	@ 0x28
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop
 80097fc:	40023800 	.word	0x40023800
 8009800:	40020000 	.word	0x40020000

08009804 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009812:	4618      	mov	r0, r3
 8009814:	f7ff fbb8 	bl	8008f88 <USBH_LL_IncTimer>
}
 8009818:	bf00      	nop
 800981a:	3708      	adds	r7, #8
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800982e:	4618      	mov	r0, r3
 8009830:	f7ff fbf0 	bl	8009014 <USBH_LL_Connect>
}
 8009834:	bf00      	nop
 8009836:	3708      	adds	r7, #8
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800984a:	4618      	mov	r0, r3
 800984c:	f7ff fbf9 	bl	8009042 <USBH_LL_Disconnect>
}
 8009850:	bf00      	nop
 8009852:	3708      	adds	r7, #8
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009858:	b480      	push	{r7}
 800985a:	b083      	sub	sp, #12
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	460b      	mov	r3, r1
 8009862:	70fb      	strb	r3, [r7, #3]
 8009864:	4613      	mov	r3, r2
 8009866:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009868:	bf00      	nop
 800986a:	370c      	adds	r7, #12
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr

08009874 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b082      	sub	sp, #8
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009882:	4618      	mov	r0, r3
 8009884:	f7ff fbaa 	bl	8008fdc <USBH_LL_PortEnabled>
}
 8009888:	bf00      	nop
 800988a:	3708      	adds	r7, #8
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b082      	sub	sp, #8
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800989e:	4618      	mov	r0, r3
 80098a0:	f7ff fbaa 	bl	8008ff8 <USBH_LL_PortDisabled>
}
 80098a4:	bf00      	nop
 80098a6:	3708      	adds	r7, #8
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	d12a      	bne.n	8009914 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80098be:	4a18      	ldr	r2, [pc, #96]	@ (8009920 <USBH_LL_Init+0x74>)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	4a15      	ldr	r2, [pc, #84]	@ (8009920 <USBH_LL_Init+0x74>)
 80098ca:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80098ce:	4b14      	ldr	r3, [pc, #80]	@ (8009920 <USBH_LL_Init+0x74>)
 80098d0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80098d4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80098d6:	4b12      	ldr	r3, [pc, #72]	@ (8009920 <USBH_LL_Init+0x74>)
 80098d8:	2208      	movs	r2, #8
 80098da:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80098dc:	4b10      	ldr	r3, [pc, #64]	@ (8009920 <USBH_LL_Init+0x74>)
 80098de:	2201      	movs	r2, #1
 80098e0:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80098e2:	4b0f      	ldr	r3, [pc, #60]	@ (8009920 <USBH_LL_Init+0x74>)
 80098e4:	2200      	movs	r2, #0
 80098e6:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80098e8:	4b0d      	ldr	r3, [pc, #52]	@ (8009920 <USBH_LL_Init+0x74>)
 80098ea:	2202      	movs	r2, #2
 80098ec:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80098ee:	4b0c      	ldr	r3, [pc, #48]	@ (8009920 <USBH_LL_Init+0x74>)
 80098f0:	2200      	movs	r2, #0
 80098f2:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80098f4:	480a      	ldr	r0, [pc, #40]	@ (8009920 <USBH_LL_Init+0x74>)
 80098f6:	f7f9 f830 	bl	800295a <HAL_HCD_Init>
 80098fa:	4603      	mov	r3, r0
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d001      	beq.n	8009904 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009900:	f7f7 fb7e 	bl	8001000 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009904:	4806      	ldr	r0, [pc, #24]	@ (8009920 <USBH_LL_Init+0x74>)
 8009906:	f7f9 fc83 	bl	8003210 <HAL_HCD_GetCurrentFrame>
 800990a:	4603      	mov	r3, r0
 800990c:	4619      	mov	r1, r3
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f7ff fb2b 	bl	8008f6a <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009914:	2300      	movs	r3, #0
}
 8009916:	4618      	mov	r0, r3
 8009918:	3708      	adds	r7, #8
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}
 800991e:	bf00      	nop
 8009920:	200015d4 	.word	0x200015d4

08009924 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b084      	sub	sp, #16
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800992c:	2300      	movs	r3, #0
 800992e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009930:	2300      	movs	r3, #0
 8009932:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800993a:	4618      	mov	r0, r3
 800993c:	f7f9 fbfe 	bl	800313c <HAL_HCD_Start>
 8009940:	4603      	mov	r3, r0
 8009942:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009944:	7bfb      	ldrb	r3, [r7, #15]
 8009946:	4618      	mov	r0, r3
 8009948:	f000 f912 	bl	8009b70 <USBH_Get_USB_Status>
 800994c:	4603      	mov	r3, r0
 800994e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009950:	7bbb      	ldrb	r3, [r7, #14]
}
 8009952:	4618      	mov	r0, r3
 8009954:	3710      	adds	r7, #16
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}

0800995a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800995a:	b580      	push	{r7, lr}
 800995c:	b084      	sub	sp, #16
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009962:	2300      	movs	r3, #0
 8009964:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009966:	2300      	movs	r3, #0
 8009968:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009970:	4618      	mov	r0, r3
 8009972:	f7f9 fc06 	bl	8003182 <HAL_HCD_Stop>
 8009976:	4603      	mov	r3, r0
 8009978:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800997a:	7bfb      	ldrb	r3, [r7, #15]
 800997c:	4618      	mov	r0, r3
 800997e:	f000 f8f7 	bl	8009b70 <USBH_Get_USB_Status>
 8009982:	4603      	mov	r3, r0
 8009984:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009986:	7bbb      	ldrb	r3, [r7, #14]
}
 8009988:	4618      	mov	r0, r3
 800998a:	3710      	adds	r7, #16
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	460b      	mov	r3, r1
 800999a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80099a2:	78fa      	ldrb	r2, [r7, #3]
 80099a4:	4611      	mov	r1, r2
 80099a6:	4618      	mov	r0, r3
 80099a8:	f7f9 fc1d 	bl	80031e6 <HAL_HCD_HC_GetXferCount>
 80099ac:	4603      	mov	r3, r0
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3708      	adds	r7, #8
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}

080099b6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80099b6:	b590      	push	{r4, r7, lr}
 80099b8:	b089      	sub	sp, #36	@ 0x24
 80099ba:	af04      	add	r7, sp, #16
 80099bc:	6078      	str	r0, [r7, #4]
 80099be:	4608      	mov	r0, r1
 80099c0:	4611      	mov	r1, r2
 80099c2:	461a      	mov	r2, r3
 80099c4:	4603      	mov	r3, r0
 80099c6:	70fb      	strb	r3, [r7, #3]
 80099c8:	460b      	mov	r3, r1
 80099ca:	70bb      	strb	r3, [r7, #2]
 80099cc:	4613      	mov	r3, r2
 80099ce:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099d0:	2300      	movs	r3, #0
 80099d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80099d4:	2300      	movs	r3, #0
 80099d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80099de:	787c      	ldrb	r4, [r7, #1]
 80099e0:	78ba      	ldrb	r2, [r7, #2]
 80099e2:	78f9      	ldrb	r1, [r7, #3]
 80099e4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80099e6:	9302      	str	r3, [sp, #8]
 80099e8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80099ec:	9301      	str	r3, [sp, #4]
 80099ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80099f2:	9300      	str	r3, [sp, #0]
 80099f4:	4623      	mov	r3, r4
 80099f6:	f7f9 f817 	bl	8002a28 <HAL_HCD_HC_Init>
 80099fa:	4603      	mov	r3, r0
 80099fc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80099fe:	7bfb      	ldrb	r3, [r7, #15]
 8009a00:	4618      	mov	r0, r3
 8009a02:	f000 f8b5 	bl	8009b70 <USBH_Get_USB_Status>
 8009a06:	4603      	mov	r3, r0
 8009a08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3714      	adds	r7, #20
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd90      	pop	{r4, r7, pc}

08009a14 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a20:	2300      	movs	r3, #0
 8009a22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009a24:	2300      	movs	r3, #0
 8009a26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009a2e:	78fa      	ldrb	r2, [r7, #3]
 8009a30:	4611      	mov	r1, r2
 8009a32:	4618      	mov	r0, r3
 8009a34:	f7f9 f8b0 	bl	8002b98 <HAL_HCD_HC_Halt>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009a3c:	7bfb      	ldrb	r3, [r7, #15]
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f000 f896 	bl	8009b70 <USBH_Get_USB_Status>
 8009a44:	4603      	mov	r3, r0
 8009a46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a48:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3710      	adds	r7, #16
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}

08009a52 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009a52:	b590      	push	{r4, r7, lr}
 8009a54:	b089      	sub	sp, #36	@ 0x24
 8009a56:	af04      	add	r7, sp, #16
 8009a58:	6078      	str	r0, [r7, #4]
 8009a5a:	4608      	mov	r0, r1
 8009a5c:	4611      	mov	r1, r2
 8009a5e:	461a      	mov	r2, r3
 8009a60:	4603      	mov	r3, r0
 8009a62:	70fb      	strb	r3, [r7, #3]
 8009a64:	460b      	mov	r3, r1
 8009a66:	70bb      	strb	r3, [r7, #2]
 8009a68:	4613      	mov	r3, r2
 8009a6a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009a70:	2300      	movs	r3, #0
 8009a72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009a7a:	787c      	ldrb	r4, [r7, #1]
 8009a7c:	78ba      	ldrb	r2, [r7, #2]
 8009a7e:	78f9      	ldrb	r1, [r7, #3]
 8009a80:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009a84:	9303      	str	r3, [sp, #12]
 8009a86:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009a88:	9302      	str	r3, [sp, #8]
 8009a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a8c:	9301      	str	r3, [sp, #4]
 8009a8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009a92:	9300      	str	r3, [sp, #0]
 8009a94:	4623      	mov	r3, r4
 8009a96:	f7f9 f8a3 	bl	8002be0 <HAL_HCD_HC_SubmitRequest>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009a9e:	7bfb      	ldrb	r3, [r7, #15]
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f000 f865 	bl	8009b70 <USBH_Get_USB_Status>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009aaa:	7bbb      	ldrb	r3, [r7, #14]
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3714      	adds	r7, #20
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd90      	pop	{r4, r7, pc}

08009ab4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	460b      	mov	r3, r1
 8009abe:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009ac6:	78fa      	ldrb	r2, [r7, #3]
 8009ac8:	4611      	mov	r1, r2
 8009aca:	4618      	mov	r0, r3
 8009acc:	f7f9 fb76 	bl	80031bc <HAL_HCD_HC_GetURBState>
 8009ad0:	4603      	mov	r3, r0
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3708      	adds	r7, #8
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}

08009ada <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009ada:	b580      	push	{r7, lr}
 8009adc:	b082      	sub	sp, #8
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	d103      	bne.n	8009af8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009af0:	78fb      	ldrb	r3, [r7, #3]
 8009af2:	4618      	mov	r0, r3
 8009af4:	f000 f868 	bl	8009bc8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009af8:	20c8      	movs	r0, #200	@ 0xc8
 8009afa:	f7f7 fccb 	bl	8001494 <HAL_Delay>
  return USBH_OK;
 8009afe:	2300      	movs	r3, #0
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3708      	adds	r7, #8
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b085      	sub	sp, #20
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	460b      	mov	r3, r1
 8009b12:	70fb      	strb	r3, [r7, #3]
 8009b14:	4613      	mov	r3, r2
 8009b16:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009b1e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009b20:	78fa      	ldrb	r2, [r7, #3]
 8009b22:	68f9      	ldr	r1, [r7, #12]
 8009b24:	4613      	mov	r3, r2
 8009b26:	011b      	lsls	r3, r3, #4
 8009b28:	1a9b      	subs	r3, r3, r2
 8009b2a:	009b      	lsls	r3, r3, #2
 8009b2c:	440b      	add	r3, r1
 8009b2e:	3317      	adds	r3, #23
 8009b30:	781b      	ldrb	r3, [r3, #0]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d00a      	beq.n	8009b4c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009b36:	78fa      	ldrb	r2, [r7, #3]
 8009b38:	68f9      	ldr	r1, [r7, #12]
 8009b3a:	4613      	mov	r3, r2
 8009b3c:	011b      	lsls	r3, r3, #4
 8009b3e:	1a9b      	subs	r3, r3, r2
 8009b40:	009b      	lsls	r3, r3, #2
 8009b42:	440b      	add	r3, r1
 8009b44:	333c      	adds	r3, #60	@ 0x3c
 8009b46:	78ba      	ldrb	r2, [r7, #2]
 8009b48:	701a      	strb	r2, [r3, #0]
 8009b4a:	e009      	b.n	8009b60 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009b4c:	78fa      	ldrb	r2, [r7, #3]
 8009b4e:	68f9      	ldr	r1, [r7, #12]
 8009b50:	4613      	mov	r3, r2
 8009b52:	011b      	lsls	r3, r3, #4
 8009b54:	1a9b      	subs	r3, r3, r2
 8009b56:	009b      	lsls	r3, r3, #2
 8009b58:	440b      	add	r3, r1
 8009b5a:	333d      	adds	r3, #61	@ 0x3d
 8009b5c:	78ba      	ldrb	r2, [r7, #2]
 8009b5e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009b60:	2300      	movs	r3, #0
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3714      	adds	r7, #20
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr
	...

08009b70 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b085      	sub	sp, #20
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	4603      	mov	r3, r0
 8009b78:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009b7e:	79fb      	ldrb	r3, [r7, #7]
 8009b80:	2b03      	cmp	r3, #3
 8009b82:	d817      	bhi.n	8009bb4 <USBH_Get_USB_Status+0x44>
 8009b84:	a201      	add	r2, pc, #4	@ (adr r2, 8009b8c <USBH_Get_USB_Status+0x1c>)
 8009b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b8a:	bf00      	nop
 8009b8c:	08009b9d 	.word	0x08009b9d
 8009b90:	08009ba3 	.word	0x08009ba3
 8009b94:	08009ba9 	.word	0x08009ba9
 8009b98:	08009baf 	.word	0x08009baf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	73fb      	strb	r3, [r7, #15]
    break;
 8009ba0:	e00b      	b.n	8009bba <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009ba2:	2302      	movs	r3, #2
 8009ba4:	73fb      	strb	r3, [r7, #15]
    break;
 8009ba6:	e008      	b.n	8009bba <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	73fb      	strb	r3, [r7, #15]
    break;
 8009bac:	e005      	b.n	8009bba <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009bae:	2302      	movs	r3, #2
 8009bb0:	73fb      	strb	r3, [r7, #15]
    break;
 8009bb2:	e002      	b.n	8009bba <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009bb4:	2302      	movs	r3, #2
 8009bb6:	73fb      	strb	r3, [r7, #15]
    break;
 8009bb8:	bf00      	nop
  }
  return usb_status;
 8009bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3714      	adds	r7, #20
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr

08009bc8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	4603      	mov	r3, r0
 8009bd0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009bd2:	79fb      	ldrb	r3, [r7, #7]
 8009bd4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009bd6:	79fb      	ldrb	r3, [r7, #7]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d102      	bne.n	8009be2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	73fb      	strb	r3, [r7, #15]
 8009be0:	e001      	b.n	8009be6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009be2:	2301      	movs	r3, #1
 8009be4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009be6:	7bfb      	ldrb	r3, [r7, #15]
 8009be8:	461a      	mov	r2, r3
 8009bea:	2101      	movs	r1, #1
 8009bec:	4803      	ldr	r0, [pc, #12]	@ (8009bfc <MX_DriverVbusFS+0x34>)
 8009bee:	f7f8 fe9b 	bl	8002928 <HAL_GPIO_WritePin>
}
 8009bf2:	bf00      	nop
 8009bf4:	3710      	adds	r7, #16
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
 8009bfa:	bf00      	nop
 8009bfc:	40020800 	.word	0x40020800

08009c00 <arm_float_to_q15>:
 8009c00:	b4f0      	push	{r4, r5, r6, r7}
 8009c02:	0897      	lsrs	r7, r2, #2
 8009c04:	d06e      	beq.n	8009ce4 <arm_float_to_q15+0xe4>
 8009c06:	eddf 5a49 	vldr	s11, [pc, #292]	@ 8009d2c <arm_float_to_q15+0x12c>
 8009c0a:	f100 0510 	add.w	r5, r0, #16
 8009c0e:	f101 0408 	add.w	r4, r1, #8
 8009c12:	463e      	mov	r6, r7
 8009c14:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8009c18:	eefe 6a00 	vmov.f32	s13, #224	@ 0xbf000000 -0.5
 8009c1c:	ed55 7a04 	vldr	s15, [r5, #-16]
 8009c20:	ee27 7aa5 	vmul.f32	s14, s15, s11
 8009c24:	3510      	adds	r5, #16
 8009c26:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8009c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c2e:	bfd4      	ite	le
 8009c30:	eef0 7a66 	vmovle.f32	s15, s13
 8009c34:	eef0 7a46 	vmovgt.f32	s15, s12
 8009c38:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009c3c:	3408      	adds	r4, #8
 8009c3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009c42:	ee17 3a90 	vmov	r3, s15
 8009c46:	f303 030f 	ssat	r3, #16, r3
 8009c4a:	f824 3c10 	strh.w	r3, [r4, #-16]
 8009c4e:	ed55 7a07 	vldr	s15, [r5, #-28]	@ 0xffffffe4
 8009c52:	ee27 7aa5 	vmul.f32	s14, s15, s11
 8009c56:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8009c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c5e:	bfd4      	ite	le
 8009c60:	eef0 7a66 	vmovle.f32	s15, s13
 8009c64:	eef0 7a46 	vmovgt.f32	s15, s12
 8009c68:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009c6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009c70:	ee17 3a90 	vmov	r3, s15
 8009c74:	f303 030f 	ssat	r3, #16, r3
 8009c78:	f824 3c0e 	strh.w	r3, [r4, #-14]
 8009c7c:	ed55 7a06 	vldr	s15, [r5, #-24]	@ 0xffffffe8
 8009c80:	ee27 7aa5 	vmul.f32	s14, s15, s11
 8009c84:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8009c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c8c:	bfd4      	ite	le
 8009c8e:	eef0 7a66 	vmovle.f32	s15, s13
 8009c92:	eef0 7a46 	vmovgt.f32	s15, s12
 8009c96:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009c9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009c9e:	ee17 3a90 	vmov	r3, s15
 8009ca2:	f303 030f 	ssat	r3, #16, r3
 8009ca6:	f824 3c0c 	strh.w	r3, [r4, #-12]
 8009caa:	ed55 7a05 	vldr	s15, [r5, #-20]	@ 0xffffffec
 8009cae:	ee27 7aa5 	vmul.f32	s14, s15, s11
 8009cb2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8009cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cba:	bfd4      	ite	le
 8009cbc:	eef0 7a66 	vmovle.f32	s15, s13
 8009cc0:	eef0 7a46 	vmovgt.f32	s15, s12
 8009cc4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009cc8:	3e01      	subs	r6, #1
 8009cca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009cce:	ee17 3a90 	vmov	r3, s15
 8009cd2:	f303 030f 	ssat	r3, #16, r3
 8009cd6:	f824 3c0a 	strh.w	r3, [r4, #-10]
 8009cda:	d19f      	bne.n	8009c1c <arm_float_to_q15+0x1c>
 8009cdc:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 8009ce0:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8009ce4:	f012 0203 	ands.w	r2, r2, #3
 8009ce8:	d01e      	beq.n	8009d28 <arm_float_to_q15+0x128>
 8009cea:	eddf 5a10 	vldr	s11, [pc, #64]	@ 8009d2c <arm_float_to_q15+0x12c>
 8009cee:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8009cf2:	eefe 6a00 	vmov.f32	s13, #224	@ 0xbf000000 -0.5
 8009cf6:	ecf0 7a01 	vldmia	r0!, {s15}
 8009cfa:	ee27 7aa5 	vmul.f32	s14, s15, s11
 8009cfe:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8009d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d06:	bfd4      	ite	le
 8009d08:	eef0 7a66 	vmovle.f32	s15, s13
 8009d0c:	eef0 7a46 	vmovgt.f32	s15, s12
 8009d10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009d14:	3a01      	subs	r2, #1
 8009d16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009d1a:	ee17 3a90 	vmov	r3, s15
 8009d1e:	f303 030f 	ssat	r3, #16, r3
 8009d22:	f821 3b02 	strh.w	r3, [r1], #2
 8009d26:	d1e6      	bne.n	8009cf6 <arm_float_to_q15+0xf6>
 8009d28:	bcf0      	pop	{r4, r5, r6, r7}
 8009d2a:	4770      	bx	lr
 8009d2c:	47000000 	.word	0x47000000

08009d30 <arm_fir_q15>:
 8009d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d34:	4605      	mov	r5, r0
 8009d36:	b095      	sub	sp, #84	@ 0x54
 8009d38:	686c      	ldr	r4, [r5, #4]
 8009d3a:	9012      	str	r0, [sp, #72]	@ 0x48
 8009d3c:	8800      	ldrh	r0, [r0, #0]
 8009d3e:	940c      	str	r4, [sp, #48]	@ 0x30
 8009d40:	4626      	mov	r6, r4
 8009d42:	f100 4c00 	add.w	ip, r0, #2147483648	@ 0x80000000
 8009d46:	68ac      	ldr	r4, [r5, #8]
 8009d48:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009d4a:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8009d4e:	461f      	mov	r7, r3
 8009d50:	9408      	str	r4, [sp, #32]
 8009d52:	4623      	mov	r3, r4
 8009d54:	eb06 044c 	add.w	r4, r6, ip, lsl #1
 8009d58:	4625      	mov	r5, r4
 8009d5a:	940d      	str	r4, [sp, #52]	@ 0x34
 8009d5c:	08bc      	lsrs	r4, r7, #2
 8009d5e:	9010      	str	r0, [sp, #64]	@ 0x40
 8009d60:	910e      	str	r1, [sp, #56]	@ 0x38
 8009d62:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009d64:	4627      	mov	r7, r4
 8009d66:	9411      	str	r4, [sp, #68]	@ 0x44
 8009d68:	f000 80c0 	beq.w	8009eec <arm_fir_q15+0x1bc>
 8009d6c:	4604      	mov	r4, r0
 8009d6e:	0880      	lsrs	r0, r0, #2
 8009d70:	9007      	str	r0, [sp, #28]
 8009d72:	00c0      	lsls	r0, r0, #3
 8009d74:	4403      	add	r3, r0
 8009d76:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d78:	f004 0303 	and.w	r3, r4, #3
 8009d7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d7e:	f105 0308 	add.w	r3, r5, #8
 8009d82:	9301      	str	r3, [sp, #4]
 8009d84:	460b      	mov	r3, r1
 8009d86:	3308      	adds	r3, #8
 8009d88:	9302      	str	r3, [sp, #8]
 8009d8a:	4613      	mov	r3, r2
 8009d8c:	3308      	adds	r3, #8
 8009d8e:	9305      	str	r3, [sp, #20]
 8009d90:	f106 0308 	add.w	r3, r6, #8
 8009d94:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009d96:	9303      	str	r3, [sp, #12]
 8009d98:	9704      	str	r7, [sp, #16]
 8009d9a:	9a02      	ldr	r2, [sp, #8]
 8009d9c:	9c01      	ldr	r4, [sp, #4]
 8009d9e:	f832 3c08 	ldrh.w	r3, [r2, #-8]
 8009da2:	f824 3c08 	strh.w	r3, [r4, #-8]
 8009da6:	f832 3c06 	ldrh.w	r3, [r2, #-6]
 8009daa:	f824 3c06 	strh.w	r3, [r4, #-6]
 8009dae:	4611      	mov	r1, r2
 8009db0:	9d07      	ldr	r5, [sp, #28]
 8009db2:	f831 3c04 	ldrh.w	r3, [r1, #-4]
 8009db6:	f824 3c04 	strh.w	r3, [r4, #-4]
 8009dba:	9a03      	ldr	r2, [sp, #12]
 8009dbc:	f831 3c02 	ldrh.w	r3, [r1, #-2]
 8009dc0:	f824 3c02 	strh.w	r3, [r4, #-2]
 8009dc4:	f852 0c08 	ldr.w	r0, [r2, #-8]
 8009dc8:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8009dcc:	4613      	mov	r3, r2
 8009dce:	4611      	mov	r1, r2
 8009dd0:	2d00      	cmp	r5, #0
 8009dd2:	f000 810e 	beq.w	8009ff2 <arm_fir_q15+0x2c2>
 8009dd6:	3308      	adds	r3, #8
 8009dd8:	461a      	mov	r2, r3
 8009dda:	9306      	str	r3, [sp, #24]
 8009ddc:	9908      	ldr	r1, [sp, #32]
 8009dde:	9500      	str	r5, [sp, #0]
 8009de0:	2300      	movs	r3, #0
 8009de2:	469c      	mov	ip, r3
 8009de4:	4693      	mov	fp, r2
 8009de6:	461e      	mov	r6, r3
 8009de8:	469e      	mov	lr, r3
 8009dea:	461a      	mov	r2, r3
 8009dec:	461f      	mov	r7, r3
 8009dee:	4698      	mov	r8, r3
 8009df0:	f101 0a08 	add.w	sl, r1, #8
 8009df4:	4665      	mov	r5, ip
 8009df6:	f85a 1c08 	ldr.w	r1, [sl, #-8]
 8009dfa:	fbc0 85c1 	smlald	r8, r5, r0, r1
 8009dfe:	fbc4 cec1 	smlald	ip, lr, r4, r1
 8009e02:	eac4 0900 	pkhbt	r9, r4, r0
 8009e06:	f85b 0c08 	ldr.w	r0, [fp, #-8]
 8009e0a:	fbc9 27d1 	smlaldx	r2, r7, r9, r1
 8009e0e:	eac0 0904 	pkhbt	r9, r0, r4
 8009e12:	fbc9 36d1 	smlaldx	r3, r6, r9, r1
 8009e16:	f85a 1c04 	ldr.w	r1, [sl, #-4]
 8009e1a:	fbc4 85c1 	smlald	r8, r5, r4, r1
 8009e1e:	f85b 4c04 	ldr.w	r4, [fp, #-4]
 8009e22:	fbc0 cec1 	smlald	ip, lr, r0, r1
 8009e26:	fbc9 27d1 	smlaldx	r2, r7, r9, r1
 8009e2a:	eac4 0900 	pkhbt	r9, r4, r0
 8009e2e:	fbc9 36d1 	smlaldx	r3, r6, r9, r1
 8009e32:	9900      	ldr	r1, [sp, #0]
 8009e34:	3901      	subs	r1, #1
 8009e36:	f10a 0a08 	add.w	sl, sl, #8
 8009e3a:	f10b 0b08 	add.w	fp, fp, #8
 8009e3e:	9100      	str	r1, [sp, #0]
 8009e40:	d1d9      	bne.n	8009df6 <arm_fir_q15+0xc6>
 8009e42:	46c1      	mov	r9, r8
 8009e44:	9903      	ldr	r1, [sp, #12]
 8009e46:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009e4a:	46a8      	mov	r8, r5
 8009e4c:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009e4e:	4429      	add	r1, r5
 8009e50:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009e52:	b175      	cbz	r5, 8009e72 <arm_fir_q15+0x142>
 8009e54:	f8da 5000 	ldr.w	r5, [sl]
 8009e58:	fbc0 98c5 	smlald	r9, r8, r0, r5
 8009e5c:	fbc4 cec5 	smlald	ip, lr, r4, r5
 8009e60:	eac4 0000 	pkhbt	r0, r4, r0
 8009e64:	6809      	ldr	r1, [r1, #0]
 8009e66:	fbc0 27d5 	smlaldx	r2, r7, r0, r5
 8009e6a:	eac1 0404 	pkhbt	r4, r1, r4
 8009e6e:	fbc4 36d5 	smlaldx	r3, r6, r4, r5
 8009e72:	9805      	ldr	r0, [sp, #20]
 8009e74:	ea4f 39d9 	mov.w	r9, r9, lsr #15
 8009e78:	0bd2      	lsrs	r2, r2, #15
 8009e7a:	ea49 4948 	orr.w	r9, r9, r8, lsl #17
 8009e7e:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
 8009e82:	f309 090f 	ssat	r9, #16, r9
 8009e86:	f302 020f 	ssat	r2, #16, r2
 8009e8a:	eac9 4202 	pkhbt	r2, r9, r2, lsl #16
 8009e8e:	f840 2c08 	str.w	r2, [r0, #-8]
 8009e92:	9a01      	ldr	r2, [sp, #4]
 8009e94:	ea4f 3cdc 	mov.w	ip, ip, lsr #15
 8009e98:	3208      	adds	r2, #8
 8009e9a:	0bdb      	lsrs	r3, r3, #15
 8009e9c:	ea4c 4c4e 	orr.w	ip, ip, lr, lsl #17
 8009ea0:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 8009ea4:	f30c 0c0f 	ssat	ip, #16, ip
 8009ea8:	9201      	str	r2, [sp, #4]
 8009eaa:	f303 030f 	ssat	r3, #16, r3
 8009eae:	9a02      	ldr	r2, [sp, #8]
 8009eb0:	eacc 4303 	pkhbt	r3, ip, r3, lsl #16
 8009eb4:	f840 3c04 	str.w	r3, [r0, #-4]
 8009eb8:	f100 0308 	add.w	r3, r0, #8
 8009ebc:	9305      	str	r3, [sp, #20]
 8009ebe:	9b04      	ldr	r3, [sp, #16]
 8009ec0:	3208      	adds	r2, #8
 8009ec2:	9202      	str	r2, [sp, #8]
 8009ec4:	3b01      	subs	r3, #1
 8009ec6:	9a06      	ldr	r2, [sp, #24]
 8009ec8:	9203      	str	r2, [sp, #12]
 8009eca:	9304      	str	r3, [sp, #16]
 8009ecc:	f47f af65 	bne.w	8009d9a <arm_fir_q15+0x6a>
 8009ed0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009ed2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009ed4:	00db      	lsls	r3, r3, #3
 8009ed6:	441a      	add	r2, r3
 8009ed8:	920d      	str	r2, [sp, #52]	@ 0x34
 8009eda:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009edc:	441a      	add	r2, r3
 8009ede:	920e      	str	r2, [sp, #56]	@ 0x38
 8009ee0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009ee2:	441a      	add	r2, r3
 8009ee4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009ee6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009ee8:	441a      	add	r2, r3
 8009eea:	920c      	str	r2, [sp, #48]	@ 0x30
 8009eec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009eee:	f013 0303 	ands.w	r3, r3, #3
 8009ef2:	9302      	str	r3, [sp, #8]
 8009ef4:	d03f      	beq.n	8009f76 <arm_fir_q15+0x246>
 8009ef6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009ef8:	f1a2 0c02 	sub.w	ip, r2, #2
 8009efc:	9a08      	ldr	r2, [sp, #32]
 8009efe:	f102 0904 	add.w	r9, r2, #4
 8009f02:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8009f04:	f8cd 9004 	str.w	r9, [sp, #4]
 8009f08:	ea4f 0852 	mov.w	r8, r2, lsr #1
 8009f0c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009f0e:	f8cd 8000 	str.w	r8, [sp]
 8009f12:	f8dd 903c 	ldr.w	r9, [sp, #60]	@ 0x3c
 8009f16:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
 8009f1a:	f102 0e04 	add.w	lr, r2, #4
 8009f1e:	461f      	mov	r7, r3
 8009f20:	f838 3b02 	ldrh.w	r3, [r8], #2
 8009f24:	9a01      	ldr	r2, [sp, #4]
 8009f26:	9900      	ldr	r1, [sp, #0]
 8009f28:	f82c 3f02 	strh.w	r3, [ip, #2]!
 8009f2c:	2400      	movs	r4, #0
 8009f2e:	4673      	mov	r3, lr
 8009f30:	2500      	movs	r5, #0
 8009f32:	f833 bc04 	ldrh.w	fp, [r3, #-4]
 8009f36:	f832 ac04 	ldrh.w	sl, [r2, #-4]
 8009f3a:	f833 6c02 	ldrh.w	r6, [r3, #-2]
 8009f3e:	f832 0c02 	ldrh.w	r0, [r2, #-2]
 8009f42:	fbcb 458a 	smlalbb	r4, r5, fp, sl
 8009f46:	3901      	subs	r1, #1
 8009f48:	f103 0304 	add.w	r3, r3, #4
 8009f4c:	fbc6 4580 	smlalbb	r4, r5, r6, r0
 8009f50:	f102 0204 	add.w	r2, r2, #4
 8009f54:	d1ed      	bne.n	8009f32 <arm_fir_q15+0x202>
 8009f56:	0be3      	lsrs	r3, r4, #15
 8009f58:	3f01      	subs	r7, #1
 8009f5a:	ea43 4345 	orr.w	r3, r3, r5, lsl #17
 8009f5e:	f10e 0e02 	add.w	lr, lr, #2
 8009f62:	f303 030f 	ssat	r3, #16, r3
 8009f66:	f829 3b02 	strh.w	r3, [r9], #2
 8009f6a:	d1d9      	bne.n	8009f20 <arm_fir_q15+0x1f0>
 8009f6c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009f6e:	9a02      	ldr	r2, [sp, #8]
 8009f70:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8009f74:	930c      	str	r3, [sp, #48]	@ 0x30
 8009f76:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009f78:	1e5f      	subs	r7, r3, #1
 8009f7a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009f7c:	08bd      	lsrs	r5, r7, #2
 8009f7e:	685e      	ldr	r6, [r3, #4]
 8009f80:	d029      	beq.n	8009fd6 <arm_fir_q15+0x2a6>
 8009f82:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8009f84:	4603      	mov	r3, r0
 8009f86:	3310      	adds	r3, #16
 8009f88:	f106 0210 	add.w	r2, r6, #16
 8009f8c:	4290      	cmp	r0, r2
 8009f8e:	bf38      	it	cc
 8009f90:	429e      	cmpcc	r6, r3
 8009f92:	bf2c      	ite	cs
 8009f94:	2301      	movcs	r3, #1
 8009f96:	2300      	movcc	r3, #0
 8009f98:	2d06      	cmp	r5, #6
 8009f9a:	bf94      	ite	ls
 8009f9c:	2300      	movls	r3, #0
 8009f9e:	f003 0301 	andhi.w	r3, r3, #1
 8009fa2:	b3a3      	cbz	r3, 800a00e <arm_fir_q15+0x2de>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	4333      	orrs	r3, r6
 8009fa8:	079b      	lsls	r3, r3, #30
 8009faa:	d130      	bne.n	800a00e <arm_fir_q15+0x2de>
 8009fac:	f100 0208 	add.w	r2, r0, #8
 8009fb0:	f106 0308 	add.w	r3, r6, #8
 8009fb4:	2100      	movs	r1, #0
 8009fb6:	e912 0011 	ldmdb	r2, {r0, r4}
 8009fba:	3101      	adds	r1, #1
 8009fbc:	42a9      	cmp	r1, r5
 8009fbe:	e903 0011 	stmdb	r3, {r0, r4}
 8009fc2:	f102 0208 	add.w	r2, r2, #8
 8009fc6:	f103 0308 	add.w	r3, r3, #8
 8009fca:	d1f4      	bne.n	8009fb6 <arm_fir_q15+0x286>
 8009fcc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009fce:	00ed      	lsls	r5, r5, #3
 8009fd0:	442b      	add	r3, r5
 8009fd2:	442e      	add	r6, r5
 8009fd4:	930c      	str	r3, [sp, #48]	@ 0x30
 8009fd6:	f017 0303 	ands.w	r3, r7, #3
 8009fda:	d007      	beq.n	8009fec <arm_fir_q15+0x2bc>
 8009fdc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009fde:	3e02      	subs	r6, #2
 8009fe0:	f832 1b02 	ldrh.w	r1, [r2], #2
 8009fe4:	f826 1f02 	strh.w	r1, [r6, #2]!
 8009fe8:	3b01      	subs	r3, #1
 8009fea:	d1f9      	bne.n	8009fe0 <arm_fir_q15+0x2b0>
 8009fec:	b015      	add	sp, #84	@ 0x54
 8009fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ff2:	46a8      	mov	r8, r5
 8009ff4:	462b      	mov	r3, r5
 8009ff6:	462e      	mov	r6, r5
 8009ff8:	46ac      	mov	ip, r5
 8009ffa:	46ae      	mov	lr, r5
 8009ffc:	462a      	mov	r2, r5
 8009ffe:	462f      	mov	r7, r5
 800a000:	46a9      	mov	r9, r5
 800a002:	f101 0508 	add.w	r5, r1, #8
 800a006:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a00a:	9506      	str	r5, [sp, #24]
 800a00c:	e720      	b.n	8009e50 <arm_fir_q15+0x120>
 800a00e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a010:	f106 0208 	add.w	r2, r6, #8
 800a014:	3308      	adds	r3, #8
 800a016:	4629      	mov	r1, r5
 800a018:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 800a01c:	f822 0c08 	strh.w	r0, [r2, #-8]
 800a020:	f833 0c06 	ldrh.w	r0, [r3, #-6]
 800a024:	f822 0c06 	strh.w	r0, [r2, #-6]
 800a028:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 800a02c:	f822 0c04 	strh.w	r0, [r2, #-4]
 800a030:	f833 0c02 	ldrh.w	r0, [r3, #-2]
 800a034:	f822 0c02 	strh.w	r0, [r2, #-2]
 800a038:	3901      	subs	r1, #1
 800a03a:	f103 0308 	add.w	r3, r3, #8
 800a03e:	f102 0208 	add.w	r2, r2, #8
 800a042:	d1e9      	bne.n	800a018 <arm_fir_q15+0x2e8>
 800a044:	e7c2      	b.n	8009fcc <arm_fir_q15+0x29c>
 800a046:	bf00      	nop

0800a048 <arm_fir_init_q15>:
 800a048:	b570      	push	{r4, r5, r6, lr}
 800a04a:	f011 0401 	ands.w	r4, r1, #1
 800a04e:	d10f      	bne.n	800a070 <arm_fir_init_q15+0x28>
 800a050:	461e      	mov	r6, r3
 800a052:	9b04      	ldr	r3, [sp, #16]
 800a054:	4605      	mov	r5, r0
 800a056:	4610      	mov	r0, r2
 800a058:	18ca      	adds	r2, r1, r3
 800a05a:	8029      	strh	r1, [r5, #0]
 800a05c:	60a8      	str	r0, [r5, #8]
 800a05e:	0052      	lsls	r2, r2, #1
 800a060:	4630      	mov	r0, r6
 800a062:	4621      	mov	r1, r4
 800a064:	f000 f8c4 	bl	800a1f0 <memset>
 800a068:	606e      	str	r6, [r5, #4]
 800a06a:	4620      	mov	r0, r4
 800a06c:	b240      	sxtb	r0, r0
 800a06e:	bd70      	pop	{r4, r5, r6, pc}
 800a070:	20ff      	movs	r0, #255	@ 0xff
 800a072:	e7fb      	b.n	800a06c <arm_fir_init_q15+0x24>

0800a074 <malloc>:
 800a074:	4b02      	ldr	r3, [pc, #8]	@ (800a080 <malloc+0xc>)
 800a076:	4601      	mov	r1, r0
 800a078:	6818      	ldr	r0, [r3, #0]
 800a07a:	f000 b82d 	b.w	800a0d8 <_malloc_r>
 800a07e:	bf00      	nop
 800a080:	2000012c 	.word	0x2000012c

0800a084 <free>:
 800a084:	4b02      	ldr	r3, [pc, #8]	@ (800a090 <free+0xc>)
 800a086:	4601      	mov	r1, r0
 800a088:	6818      	ldr	r0, [r3, #0]
 800a08a:	f000 b8f5 	b.w	800a278 <_free_r>
 800a08e:	bf00      	nop
 800a090:	2000012c 	.word	0x2000012c

0800a094 <sbrk_aligned>:
 800a094:	b570      	push	{r4, r5, r6, lr}
 800a096:	4e0f      	ldr	r6, [pc, #60]	@ (800a0d4 <sbrk_aligned+0x40>)
 800a098:	460c      	mov	r4, r1
 800a09a:	6831      	ldr	r1, [r6, #0]
 800a09c:	4605      	mov	r5, r0
 800a09e:	b911      	cbnz	r1, 800a0a6 <sbrk_aligned+0x12>
 800a0a0:	f000 f8ae 	bl	800a200 <_sbrk_r>
 800a0a4:	6030      	str	r0, [r6, #0]
 800a0a6:	4621      	mov	r1, r4
 800a0a8:	4628      	mov	r0, r5
 800a0aa:	f000 f8a9 	bl	800a200 <_sbrk_r>
 800a0ae:	1c43      	adds	r3, r0, #1
 800a0b0:	d103      	bne.n	800a0ba <sbrk_aligned+0x26>
 800a0b2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a0b6:	4620      	mov	r0, r4
 800a0b8:	bd70      	pop	{r4, r5, r6, pc}
 800a0ba:	1cc4      	adds	r4, r0, #3
 800a0bc:	f024 0403 	bic.w	r4, r4, #3
 800a0c0:	42a0      	cmp	r0, r4
 800a0c2:	d0f8      	beq.n	800a0b6 <sbrk_aligned+0x22>
 800a0c4:	1a21      	subs	r1, r4, r0
 800a0c6:	4628      	mov	r0, r5
 800a0c8:	f000 f89a 	bl	800a200 <_sbrk_r>
 800a0cc:	3001      	adds	r0, #1
 800a0ce:	d1f2      	bne.n	800a0b6 <sbrk_aligned+0x22>
 800a0d0:	e7ef      	b.n	800a0b2 <sbrk_aligned+0x1e>
 800a0d2:	bf00      	nop
 800a0d4:	200019b4 	.word	0x200019b4

0800a0d8 <_malloc_r>:
 800a0d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0dc:	1ccd      	adds	r5, r1, #3
 800a0de:	f025 0503 	bic.w	r5, r5, #3
 800a0e2:	3508      	adds	r5, #8
 800a0e4:	2d0c      	cmp	r5, #12
 800a0e6:	bf38      	it	cc
 800a0e8:	250c      	movcc	r5, #12
 800a0ea:	2d00      	cmp	r5, #0
 800a0ec:	4606      	mov	r6, r0
 800a0ee:	db01      	blt.n	800a0f4 <_malloc_r+0x1c>
 800a0f0:	42a9      	cmp	r1, r5
 800a0f2:	d904      	bls.n	800a0fe <_malloc_r+0x26>
 800a0f4:	230c      	movs	r3, #12
 800a0f6:	6033      	str	r3, [r6, #0]
 800a0f8:	2000      	movs	r0, #0
 800a0fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a1d4 <_malloc_r+0xfc>
 800a102:	f000 f869 	bl	800a1d8 <__malloc_lock>
 800a106:	f8d8 3000 	ldr.w	r3, [r8]
 800a10a:	461c      	mov	r4, r3
 800a10c:	bb44      	cbnz	r4, 800a160 <_malloc_r+0x88>
 800a10e:	4629      	mov	r1, r5
 800a110:	4630      	mov	r0, r6
 800a112:	f7ff ffbf 	bl	800a094 <sbrk_aligned>
 800a116:	1c43      	adds	r3, r0, #1
 800a118:	4604      	mov	r4, r0
 800a11a:	d158      	bne.n	800a1ce <_malloc_r+0xf6>
 800a11c:	f8d8 4000 	ldr.w	r4, [r8]
 800a120:	4627      	mov	r7, r4
 800a122:	2f00      	cmp	r7, #0
 800a124:	d143      	bne.n	800a1ae <_malloc_r+0xd6>
 800a126:	2c00      	cmp	r4, #0
 800a128:	d04b      	beq.n	800a1c2 <_malloc_r+0xea>
 800a12a:	6823      	ldr	r3, [r4, #0]
 800a12c:	4639      	mov	r1, r7
 800a12e:	4630      	mov	r0, r6
 800a130:	eb04 0903 	add.w	r9, r4, r3
 800a134:	f000 f864 	bl	800a200 <_sbrk_r>
 800a138:	4581      	cmp	r9, r0
 800a13a:	d142      	bne.n	800a1c2 <_malloc_r+0xea>
 800a13c:	6821      	ldr	r1, [r4, #0]
 800a13e:	1a6d      	subs	r5, r5, r1
 800a140:	4629      	mov	r1, r5
 800a142:	4630      	mov	r0, r6
 800a144:	f7ff ffa6 	bl	800a094 <sbrk_aligned>
 800a148:	3001      	adds	r0, #1
 800a14a:	d03a      	beq.n	800a1c2 <_malloc_r+0xea>
 800a14c:	6823      	ldr	r3, [r4, #0]
 800a14e:	442b      	add	r3, r5
 800a150:	6023      	str	r3, [r4, #0]
 800a152:	f8d8 3000 	ldr.w	r3, [r8]
 800a156:	685a      	ldr	r2, [r3, #4]
 800a158:	bb62      	cbnz	r2, 800a1b4 <_malloc_r+0xdc>
 800a15a:	f8c8 7000 	str.w	r7, [r8]
 800a15e:	e00f      	b.n	800a180 <_malloc_r+0xa8>
 800a160:	6822      	ldr	r2, [r4, #0]
 800a162:	1b52      	subs	r2, r2, r5
 800a164:	d420      	bmi.n	800a1a8 <_malloc_r+0xd0>
 800a166:	2a0b      	cmp	r2, #11
 800a168:	d917      	bls.n	800a19a <_malloc_r+0xc2>
 800a16a:	1961      	adds	r1, r4, r5
 800a16c:	42a3      	cmp	r3, r4
 800a16e:	6025      	str	r5, [r4, #0]
 800a170:	bf18      	it	ne
 800a172:	6059      	strne	r1, [r3, #4]
 800a174:	6863      	ldr	r3, [r4, #4]
 800a176:	bf08      	it	eq
 800a178:	f8c8 1000 	streq.w	r1, [r8]
 800a17c:	5162      	str	r2, [r4, r5]
 800a17e:	604b      	str	r3, [r1, #4]
 800a180:	4630      	mov	r0, r6
 800a182:	f000 f82f 	bl	800a1e4 <__malloc_unlock>
 800a186:	f104 000b 	add.w	r0, r4, #11
 800a18a:	1d23      	adds	r3, r4, #4
 800a18c:	f020 0007 	bic.w	r0, r0, #7
 800a190:	1ac2      	subs	r2, r0, r3
 800a192:	bf1c      	itt	ne
 800a194:	1a1b      	subne	r3, r3, r0
 800a196:	50a3      	strne	r3, [r4, r2]
 800a198:	e7af      	b.n	800a0fa <_malloc_r+0x22>
 800a19a:	6862      	ldr	r2, [r4, #4]
 800a19c:	42a3      	cmp	r3, r4
 800a19e:	bf0c      	ite	eq
 800a1a0:	f8c8 2000 	streq.w	r2, [r8]
 800a1a4:	605a      	strne	r2, [r3, #4]
 800a1a6:	e7eb      	b.n	800a180 <_malloc_r+0xa8>
 800a1a8:	4623      	mov	r3, r4
 800a1aa:	6864      	ldr	r4, [r4, #4]
 800a1ac:	e7ae      	b.n	800a10c <_malloc_r+0x34>
 800a1ae:	463c      	mov	r4, r7
 800a1b0:	687f      	ldr	r7, [r7, #4]
 800a1b2:	e7b6      	b.n	800a122 <_malloc_r+0x4a>
 800a1b4:	461a      	mov	r2, r3
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	42a3      	cmp	r3, r4
 800a1ba:	d1fb      	bne.n	800a1b4 <_malloc_r+0xdc>
 800a1bc:	2300      	movs	r3, #0
 800a1be:	6053      	str	r3, [r2, #4]
 800a1c0:	e7de      	b.n	800a180 <_malloc_r+0xa8>
 800a1c2:	230c      	movs	r3, #12
 800a1c4:	6033      	str	r3, [r6, #0]
 800a1c6:	4630      	mov	r0, r6
 800a1c8:	f000 f80c 	bl	800a1e4 <__malloc_unlock>
 800a1cc:	e794      	b.n	800a0f8 <_malloc_r+0x20>
 800a1ce:	6005      	str	r5, [r0, #0]
 800a1d0:	e7d6      	b.n	800a180 <_malloc_r+0xa8>
 800a1d2:	bf00      	nop
 800a1d4:	200019b8 	.word	0x200019b8

0800a1d8 <__malloc_lock>:
 800a1d8:	4801      	ldr	r0, [pc, #4]	@ (800a1e0 <__malloc_lock+0x8>)
 800a1da:	f000 b84b 	b.w	800a274 <__retarget_lock_acquire_recursive>
 800a1de:	bf00      	nop
 800a1e0:	20001af8 	.word	0x20001af8

0800a1e4 <__malloc_unlock>:
 800a1e4:	4801      	ldr	r0, [pc, #4]	@ (800a1ec <__malloc_unlock+0x8>)
 800a1e6:	f000 b846 	b.w	800a276 <__retarget_lock_release_recursive>
 800a1ea:	bf00      	nop
 800a1ec:	20001af8 	.word	0x20001af8

0800a1f0 <memset>:
 800a1f0:	4402      	add	r2, r0
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d100      	bne.n	800a1fa <memset+0xa>
 800a1f8:	4770      	bx	lr
 800a1fa:	f803 1b01 	strb.w	r1, [r3], #1
 800a1fe:	e7f9      	b.n	800a1f4 <memset+0x4>

0800a200 <_sbrk_r>:
 800a200:	b538      	push	{r3, r4, r5, lr}
 800a202:	4d06      	ldr	r5, [pc, #24]	@ (800a21c <_sbrk_r+0x1c>)
 800a204:	2300      	movs	r3, #0
 800a206:	4604      	mov	r4, r0
 800a208:	4608      	mov	r0, r1
 800a20a:	602b      	str	r3, [r5, #0]
 800a20c:	f7f6 fff2 	bl	80011f4 <_sbrk>
 800a210:	1c43      	adds	r3, r0, #1
 800a212:	d102      	bne.n	800a21a <_sbrk_r+0x1a>
 800a214:	682b      	ldr	r3, [r5, #0]
 800a216:	b103      	cbz	r3, 800a21a <_sbrk_r+0x1a>
 800a218:	6023      	str	r3, [r4, #0]
 800a21a:	bd38      	pop	{r3, r4, r5, pc}
 800a21c:	20001af4 	.word	0x20001af4

0800a220 <__errno>:
 800a220:	4b01      	ldr	r3, [pc, #4]	@ (800a228 <__errno+0x8>)
 800a222:	6818      	ldr	r0, [r3, #0]
 800a224:	4770      	bx	lr
 800a226:	bf00      	nop
 800a228:	2000012c 	.word	0x2000012c

0800a22c <__libc_init_array>:
 800a22c:	b570      	push	{r4, r5, r6, lr}
 800a22e:	4d0d      	ldr	r5, [pc, #52]	@ (800a264 <__libc_init_array+0x38>)
 800a230:	4c0d      	ldr	r4, [pc, #52]	@ (800a268 <__libc_init_array+0x3c>)
 800a232:	1b64      	subs	r4, r4, r5
 800a234:	10a4      	asrs	r4, r4, #2
 800a236:	2600      	movs	r6, #0
 800a238:	42a6      	cmp	r6, r4
 800a23a:	d109      	bne.n	800a250 <__libc_init_array+0x24>
 800a23c:	4d0b      	ldr	r5, [pc, #44]	@ (800a26c <__libc_init_array+0x40>)
 800a23e:	4c0c      	ldr	r4, [pc, #48]	@ (800a270 <__libc_init_array+0x44>)
 800a240:	f000 f864 	bl	800a30c <_init>
 800a244:	1b64      	subs	r4, r4, r5
 800a246:	10a4      	asrs	r4, r4, #2
 800a248:	2600      	movs	r6, #0
 800a24a:	42a6      	cmp	r6, r4
 800a24c:	d105      	bne.n	800a25a <__libc_init_array+0x2e>
 800a24e:	bd70      	pop	{r4, r5, r6, pc}
 800a250:	f855 3b04 	ldr.w	r3, [r5], #4
 800a254:	4798      	blx	r3
 800a256:	3601      	adds	r6, #1
 800a258:	e7ee      	b.n	800a238 <__libc_init_array+0xc>
 800a25a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a25e:	4798      	blx	r3
 800a260:	3601      	adds	r6, #1
 800a262:	e7f2      	b.n	800a24a <__libc_init_array+0x1e>
 800a264:	0800a350 	.word	0x0800a350
 800a268:	0800a350 	.word	0x0800a350
 800a26c:	0800a350 	.word	0x0800a350
 800a270:	0800a354 	.word	0x0800a354

0800a274 <__retarget_lock_acquire_recursive>:
 800a274:	4770      	bx	lr

0800a276 <__retarget_lock_release_recursive>:
 800a276:	4770      	bx	lr

0800a278 <_free_r>:
 800a278:	b538      	push	{r3, r4, r5, lr}
 800a27a:	4605      	mov	r5, r0
 800a27c:	2900      	cmp	r1, #0
 800a27e:	d041      	beq.n	800a304 <_free_r+0x8c>
 800a280:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a284:	1f0c      	subs	r4, r1, #4
 800a286:	2b00      	cmp	r3, #0
 800a288:	bfb8      	it	lt
 800a28a:	18e4      	addlt	r4, r4, r3
 800a28c:	f7ff ffa4 	bl	800a1d8 <__malloc_lock>
 800a290:	4a1d      	ldr	r2, [pc, #116]	@ (800a308 <_free_r+0x90>)
 800a292:	6813      	ldr	r3, [r2, #0]
 800a294:	b933      	cbnz	r3, 800a2a4 <_free_r+0x2c>
 800a296:	6063      	str	r3, [r4, #4]
 800a298:	6014      	str	r4, [r2, #0]
 800a29a:	4628      	mov	r0, r5
 800a29c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2a0:	f7ff bfa0 	b.w	800a1e4 <__malloc_unlock>
 800a2a4:	42a3      	cmp	r3, r4
 800a2a6:	d908      	bls.n	800a2ba <_free_r+0x42>
 800a2a8:	6820      	ldr	r0, [r4, #0]
 800a2aa:	1821      	adds	r1, r4, r0
 800a2ac:	428b      	cmp	r3, r1
 800a2ae:	bf01      	itttt	eq
 800a2b0:	6819      	ldreq	r1, [r3, #0]
 800a2b2:	685b      	ldreq	r3, [r3, #4]
 800a2b4:	1809      	addeq	r1, r1, r0
 800a2b6:	6021      	streq	r1, [r4, #0]
 800a2b8:	e7ed      	b.n	800a296 <_free_r+0x1e>
 800a2ba:	461a      	mov	r2, r3
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	b10b      	cbz	r3, 800a2c4 <_free_r+0x4c>
 800a2c0:	42a3      	cmp	r3, r4
 800a2c2:	d9fa      	bls.n	800a2ba <_free_r+0x42>
 800a2c4:	6811      	ldr	r1, [r2, #0]
 800a2c6:	1850      	adds	r0, r2, r1
 800a2c8:	42a0      	cmp	r0, r4
 800a2ca:	d10b      	bne.n	800a2e4 <_free_r+0x6c>
 800a2cc:	6820      	ldr	r0, [r4, #0]
 800a2ce:	4401      	add	r1, r0
 800a2d0:	1850      	adds	r0, r2, r1
 800a2d2:	4283      	cmp	r3, r0
 800a2d4:	6011      	str	r1, [r2, #0]
 800a2d6:	d1e0      	bne.n	800a29a <_free_r+0x22>
 800a2d8:	6818      	ldr	r0, [r3, #0]
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	6053      	str	r3, [r2, #4]
 800a2de:	4408      	add	r0, r1
 800a2e0:	6010      	str	r0, [r2, #0]
 800a2e2:	e7da      	b.n	800a29a <_free_r+0x22>
 800a2e4:	d902      	bls.n	800a2ec <_free_r+0x74>
 800a2e6:	230c      	movs	r3, #12
 800a2e8:	602b      	str	r3, [r5, #0]
 800a2ea:	e7d6      	b.n	800a29a <_free_r+0x22>
 800a2ec:	6820      	ldr	r0, [r4, #0]
 800a2ee:	1821      	adds	r1, r4, r0
 800a2f0:	428b      	cmp	r3, r1
 800a2f2:	bf04      	itt	eq
 800a2f4:	6819      	ldreq	r1, [r3, #0]
 800a2f6:	685b      	ldreq	r3, [r3, #4]
 800a2f8:	6063      	str	r3, [r4, #4]
 800a2fa:	bf04      	itt	eq
 800a2fc:	1809      	addeq	r1, r1, r0
 800a2fe:	6021      	streq	r1, [r4, #0]
 800a300:	6054      	str	r4, [r2, #4]
 800a302:	e7ca      	b.n	800a29a <_free_r+0x22>
 800a304:	bd38      	pop	{r3, r4, r5, pc}
 800a306:	bf00      	nop
 800a308:	200019b8 	.word	0x200019b8

0800a30c <_init>:
 800a30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a30e:	bf00      	nop
 800a310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a312:	bc08      	pop	{r3}
 800a314:	469e      	mov	lr, r3
 800a316:	4770      	bx	lr

0800a318 <_fini>:
 800a318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a31a:	bf00      	nop
 800a31c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a31e:	bc08      	pop	{r3}
 800a320:	469e      	mov	lr, r3
 800a322:	4770      	bx	lr
