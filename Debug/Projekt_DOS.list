
Projekt_DOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c6c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00011e8c  08008df4  08008df4  00009df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ac80  0801ac80  0001c19c  2**0
                  CONTENTS
  4 .ARM          00000008  0801ac80  0801ac80  0001bc80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ac88  0801ac88  0001c19c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ac88  0801ac88  0001bc88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801ac8c  0801ac8c  0001bc8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000019c  20000000  0801ac90  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001c19c  2**0
                  CONTENTS
 10 .bss          00003198  2000019c  2000019c  0001c19c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20003334  20003334  0001c19c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001c19c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000211cd  00000000  00000000  0001c1cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005092  00000000  00000000  0003d399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ad8  00000000  00000000  00042430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001413  00000000  00000000  00043f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026be7  00000000  00000000  0004531b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002390b  00000000  00000000  0006bf02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3e67  00000000  00000000  0008f80d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000b3  00000000  00000000  00173674  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006ec4  00000000  00000000  00173728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  0017a5ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00002199  00000000  00000000  0017a64f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 000001b0  00000000  00000000  0017c7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000019c 	.word	0x2000019c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008ddc 	.word	0x08008ddc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001a0 	.word	0x200001a0
 80001c4:	08008ddc 	.word	0x08008ddc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004be:	463b      	mov	r3, r7
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	605a      	str	r2, [r3, #4]
 80004c6:	609a      	str	r2, [r3, #8]
 80004c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004ca:	4b22      	ldr	r3, [pc, #136]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004cc:	4a22      	ldr	r2, [pc, #136]	@ (8000558 <MX_ADC1_Init+0xa0>)
 80004ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004d0:	4b20      	ldr	r3, [pc, #128]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004d2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80004d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80004de:	4b1d      	ldr	r3, [pc, #116]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80004f2:	4b18      	ldr	r3, [pc, #96]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80004f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80004fa:	4b16      	ldr	r3, [pc, #88]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004fc:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000500:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000502:	4b14      	ldr	r3, [pc, #80]	@ (8000554 <MX_ADC1_Init+0x9c>)
 8000504:	2200      	movs	r2, #0
 8000506:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000508:	4b12      	ldr	r3, [pc, #72]	@ (8000554 <MX_ADC1_Init+0x9c>)
 800050a:	2201      	movs	r2, #1
 800050c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800050e:	4b11      	ldr	r3, [pc, #68]	@ (8000554 <MX_ADC1_Init+0x9c>)
 8000510:	2201      	movs	r2, #1
 8000512:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000516:	4b0f      	ldr	r3, [pc, #60]	@ (8000554 <MX_ADC1_Init+0x9c>)
 8000518:	2201      	movs	r2, #1
 800051a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800051c:	480d      	ldr	r0, [pc, #52]	@ (8000554 <MX_ADC1_Init+0x9c>)
 800051e:	f001 fbd5 	bl	8001ccc <HAL_ADC_Init>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000528:	f001 f90a 	bl	8001740 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800052c:	2301      	movs	r3, #1
 800052e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000530:	2301      	movs	r3, #1
 8000532:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000534:	2300      	movs	r3, #0
 8000536:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000538:	463b      	mov	r3, r7
 800053a:	4619      	mov	r1, r3
 800053c:	4805      	ldr	r0, [pc, #20]	@ (8000554 <MX_ADC1_Init+0x9c>)
 800053e:	f001 fd23 	bl	8001f88 <HAL_ADC_ConfigChannel>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000548:	f001 f8fa 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800054c:	bf00      	nop
 800054e:	3710      	adds	r7, #16
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	200001b8 	.word	0x200001b8
 8000558:	40012000 	.word	0x40012000

0800055c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b08a      	sub	sp, #40	@ 0x28
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000564:	f107 0314 	add.w	r3, r7, #20
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a2f      	ldr	r2, [pc, #188]	@ (8000638 <HAL_ADC_MspInit+0xdc>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d157      	bne.n	800062e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	613b      	str	r3, [r7, #16]
 8000582:	4b2e      	ldr	r3, [pc, #184]	@ (800063c <HAL_ADC_MspInit+0xe0>)
 8000584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000586:	4a2d      	ldr	r2, [pc, #180]	@ (800063c <HAL_ADC_MspInit+0xe0>)
 8000588:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800058c:	6453      	str	r3, [r2, #68]	@ 0x44
 800058e:	4b2b      	ldr	r3, [pc, #172]	@ (800063c <HAL_ADC_MspInit+0xe0>)
 8000590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000596:	613b      	str	r3, [r7, #16]
 8000598:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	4b27      	ldr	r3, [pc, #156]	@ (800063c <HAL_ADC_MspInit+0xe0>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a2:	4a26      	ldr	r2, [pc, #152]	@ (800063c <HAL_ADC_MspInit+0xe0>)
 80005a4:	f043 0301 	orr.w	r3, r3, #1
 80005a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005aa:	4b24      	ldr	r3, [pc, #144]	@ (800063c <HAL_ADC_MspInit+0xe0>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80005b6:	2302      	movs	r3, #2
 80005b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ba:	2303      	movs	r3, #3
 80005bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	4619      	mov	r1, r3
 80005c8:	481d      	ldr	r0, [pc, #116]	@ (8000640 <HAL_ADC_MspInit+0xe4>)
 80005ca:	f002 fbff 	bl	8002dcc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80005ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 80005d0:	4a1d      	ldr	r2, [pc, #116]	@ (8000648 <HAL_ADC_MspInit+0xec>)
 80005d2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80005d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005da:	4b1a      	ldr	r3, [pc, #104]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 80005dc:	2200      	movs	r2, #0
 80005de:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005e0:	4b18      	ldr	r3, [pc, #96]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80005e6:	4b17      	ldr	r3, [pc, #92]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 80005e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005ec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005ee:	4b15      	ldr	r3, [pc, #84]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 80005f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80005f4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80005f6:	4b13      	ldr	r3, [pc, #76]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 80005f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80005fc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80005fe:	4b11      	ldr	r3, [pc, #68]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 8000600:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000604:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000606:	4b0f      	ldr	r3, [pc, #60]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 8000608:	2200      	movs	r2, #0
 800060a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800060c:	4b0d      	ldr	r3, [pc, #52]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 800060e:	2200      	movs	r2, #0
 8000610:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000612:	480c      	ldr	r0, [pc, #48]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 8000614:	f002 f86a 	bl	80026ec <HAL_DMA_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800061e:	f001 f88f 	bl	8001740 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4a07      	ldr	r2, [pc, #28]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 8000626:	639a      	str	r2, [r3, #56]	@ 0x38
 8000628:	4a06      	ldr	r2, [pc, #24]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800062e:	bf00      	nop
 8000630:	3728      	adds	r7, #40	@ 0x28
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40012000 	.word	0x40012000
 800063c:	40023800 	.word	0x40023800
 8000640:	40020000 	.word	0x40020000
 8000644:	20000200 	.word	0x20000200
 8000648:	40026410 	.word	0x40026410

0800064c <init_AudioReset>:
#include "i2s.h"
#include "spi.h"
#include "usb_host.h"
#include "gpio.h"
#include "audio.h"
void init_AudioReset() {
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, AUDIO_RESET_PIN, GPIO_PIN_SET);
 8000650:	2201      	movs	r2, #1
 8000652:	2110      	movs	r1, #16
 8000654:	4802      	ldr	r0, [pc, #8]	@ (8000660 <init_AudioReset+0x14>)
 8000656:	f002 fd55 	bl	8003104 <HAL_GPIO_WritePin>
}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40020c00 	.word	0x40020c00

08000664 <configAudio>:
void configAudio() {
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af02      	add	r7, sp, #8
    uint8_t bytes[2];
    init_AudioReset();
 800066a:	f7ff ffef 	bl	800064c <init_AudioReset>

    /* Power sequence */
    // Set Power Control Register to "on" state
    bytes[0] = 0x02;
 800066e:	2302      	movs	r3, #2
 8000670:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x01;
 8000672:	2301      	movs	r3, #1
 8000674:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000676:	1d3a      	adds	r2, r7, #4
 8000678:	2364      	movs	r3, #100	@ 0x64
 800067a:	9300      	str	r3, [sp, #0]
 800067c:	2302      	movs	r3, #2
 800067e:	2194      	movs	r1, #148	@ 0x94
 8000680:	486f      	ldr	r0, [pc, #444]	@ (8000840 <configAudio+0x1dc>)
 8000682:	f004 fc43 	bl	8004f0c <HAL_I2C_Master_Transmit>

    /* Initialization sequence */
    bytes[0] = 0x00;
 8000686:	2300      	movs	r3, #0
 8000688:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x99;
 800068a:	2399      	movs	r3, #153	@ 0x99
 800068c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800068e:	1d3a      	adds	r2, r7, #4
 8000690:	2364      	movs	r3, #100	@ 0x64
 8000692:	9300      	str	r3, [sp, #0]
 8000694:	2302      	movs	r3, #2
 8000696:	2194      	movs	r1, #148	@ 0x94
 8000698:	4869      	ldr	r0, [pc, #420]	@ (8000840 <configAudio+0x1dc>)
 800069a:	f004 fc37 	bl	8004f0c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x47;
 800069e:	2347      	movs	r3, #71	@ 0x47
 80006a0:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x80;
 80006a2:	2380      	movs	r3, #128	@ 0x80
 80006a4:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80006a6:	1d3a      	adds	r2, r7, #4
 80006a8:	2364      	movs	r3, #100	@ 0x64
 80006aa:	9300      	str	r3, [sp, #0]
 80006ac:	2302      	movs	r3, #2
 80006ae:	2194      	movs	r1, #148	@ 0x94
 80006b0:	4863      	ldr	r0, [pc, #396]	@ (8000840 <configAudio+0x1dc>)
 80006b2:	f004 fc2b 	bl	8004f0c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x32;
 80006b6:	2332      	movs	r3, #50	@ 0x32
 80006b8:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x80;
 80006ba:	2380      	movs	r3, #128	@ 0x80
 80006bc:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80006be:	1d3a      	adds	r2, r7, #4
 80006c0:	2364      	movs	r3, #100	@ 0x64
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	2302      	movs	r3, #2
 80006c6:	2194      	movs	r1, #148	@ 0x94
 80006c8:	485d      	ldr	r0, [pc, #372]	@ (8000840 <configAudio+0x1dc>)
 80006ca:	f004 fc1f 	bl	8004f0c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x32;
 80006ce:	2332      	movs	r3, #50	@ 0x32
 80006d0:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x00;
 80006d2:	2300      	movs	r3, #0
 80006d4:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80006d6:	1d3a      	adds	r2, r7, #4
 80006d8:	2364      	movs	r3, #100	@ 0x64
 80006da:	9300      	str	r3, [sp, #0]
 80006dc:	2302      	movs	r3, #2
 80006de:	2194      	movs	r1, #148	@ 0x94
 80006e0:	4857      	ldr	r0, [pc, #348]	@ (8000840 <configAudio+0x1dc>)
 80006e2:	f004 fc13 	bl	8004f0c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x00;
 80006e6:	2300      	movs	r3, #0
 80006e8:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x00;
 80006ea:	2300      	movs	r3, #0
 80006ec:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80006ee:	1d3a      	adds	r2, r7, #4
 80006f0:	2364      	movs	r3, #100	@ 0x64
 80006f2:	9300      	str	r3, [sp, #0]
 80006f4:	2302      	movs	r3, #2
 80006f6:	2194      	movs	r1, #148	@ 0x94
 80006f8:	4851      	ldr	r0, [pc, #324]	@ (8000840 <configAudio+0x1dc>)
 80006fa:	f004 fc07 	bl	8004f0c <HAL_I2C_Master_Transmit>

    /* Ctl registers configuration */
    bytes[0] = 0x04;
 80006fe:	2304      	movs	r3, #4
 8000700:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0xAF;
 8000702:	23af      	movs	r3, #175	@ 0xaf
 8000704:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000706:	1d3a      	adds	r2, r7, #4
 8000708:	2364      	movs	r3, #100	@ 0x64
 800070a:	9300      	str	r3, [sp, #0]
 800070c:	2302      	movs	r3, #2
 800070e:	2194      	movs	r1, #148	@ 0x94
 8000710:	484b      	ldr	r0, [pc, #300]	@ (8000840 <configAudio+0x1dc>)
 8000712:	f004 fbfb 	bl	8004f0c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x0D;
 8000716:	230d      	movs	r3, #13
 8000718:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x70;
 800071a:	2370      	movs	r3, #112	@ 0x70
 800071c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800071e:	1d3a      	adds	r2, r7, #4
 8000720:	2364      	movs	r3, #100	@ 0x64
 8000722:	9300      	str	r3, [sp, #0]
 8000724:	2302      	movs	r3, #2
 8000726:	2194      	movs	r1, #148	@ 0x94
 8000728:	4845      	ldr	r0, [pc, #276]	@ (8000840 <configAudio+0x1dc>)
 800072a:	f004 fbef 	bl	8004f0c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x05;
 800072e:	2305      	movs	r3, #5
 8000730:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x81;
 8000732:	2381      	movs	r3, #129	@ 0x81
 8000734:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000736:	1d3a      	adds	r2, r7, #4
 8000738:	2364      	movs	r3, #100	@ 0x64
 800073a:	9300      	str	r3, [sp, #0]
 800073c:	2302      	movs	r3, #2
 800073e:	2194      	movs	r1, #148	@ 0x94
 8000740:	483f      	ldr	r0, [pc, #252]	@ (8000840 <configAudio+0x1dc>)
 8000742:	f004 fbe3 	bl	8004f0c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x06;
 8000746:	2306      	movs	r3, #6
 8000748:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x07;
 800074a:	2307      	movs	r3, #7
 800074c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800074e:	1d3a      	adds	r2, r7, #4
 8000750:	2364      	movs	r3, #100	@ 0x64
 8000752:	9300      	str	r3, [sp, #0]
 8000754:	2302      	movs	r3, #2
 8000756:	2194      	movs	r1, #148	@ 0x94
 8000758:	4839      	ldr	r0, [pc, #228]	@ (8000840 <configAudio+0x1dc>)
 800075a:	f004 fbd7 	bl	8004f0c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x0A;
 800075e:	230a      	movs	r3, #10
 8000760:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x00;
 8000762:	2300      	movs	r3, #0
 8000764:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000766:	1d3a      	adds	r2, r7, #4
 8000768:	2364      	movs	r3, #100	@ 0x64
 800076a:	9300      	str	r3, [sp, #0]
 800076c:	2302      	movs	r3, #2
 800076e:	2194      	movs	r1, #148	@ 0x94
 8000770:	4833      	ldr	r0, [pc, #204]	@ (8000840 <configAudio+0x1dc>)
 8000772:	f004 fbcb 	bl	8004f0c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x27;
 8000776:	2327      	movs	r3, #39	@ 0x27
 8000778:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x00;
 800077a:	2300      	movs	r3, #0
 800077c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800077e:	1d3a      	adds	r2, r7, #4
 8000780:	2364      	movs	r3, #100	@ 0x64
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	2302      	movs	r3, #2
 8000786:	2194      	movs	r1, #148	@ 0x94
 8000788:	482d      	ldr	r0, [pc, #180]	@ (8000840 <configAudio+0x1dc>)
 800078a:	f004 fbbf 	bl	8004f0c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x1F;
 800078e:	231f      	movs	r3, #31
 8000790:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x0F;
 8000792:	230f      	movs	r3, #15
 8000794:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000796:	1d3a      	adds	r2, r7, #4
 8000798:	2364      	movs	r3, #100	@ 0x64
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	2302      	movs	r3, #2
 800079e:	2194      	movs	r1, #148	@ 0x94
 80007a0:	4827      	ldr	r0, [pc, #156]	@ (8000840 <configAudio+0x1dc>)
 80007a2:	f004 fbb3 	bl	8004f0c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x22;
 80007a6:	2322      	movs	r3, #34	@ 0x22
 80007a8:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0xC0;
 80007aa:	23c0      	movs	r3, #192	@ 0xc0
 80007ac:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80007ae:	1d3a      	adds	r2, r7, #4
 80007b0:	2364      	movs	r3, #100	@ 0x64
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	2302      	movs	r3, #2
 80007b6:	2194      	movs	r1, #148	@ 0x94
 80007b8:	4821      	ldr	r0, [pc, #132]	@ (8000840 <configAudio+0x1dc>)
 80007ba:	f004 fba7 	bl	8004f0c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x14;
 80007be:	2314      	movs	r3, #20
 80007c0:	713b      	strb	r3, [r7, #4]
    bytes[1] = 2;
 80007c2:	2302      	movs	r3, #2
 80007c4:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80007c6:	1d3a      	adds	r2, r7, #4
 80007c8:	2364      	movs	r3, #100	@ 0x64
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	2302      	movs	r3, #2
 80007ce:	2194      	movs	r1, #148	@ 0x94
 80007d0:	481b      	ldr	r0, [pc, #108]	@ (8000840 <configAudio+0x1dc>)
 80007d2:	f004 fb9b 	bl	8004f0c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x15;
 80007d6:	2315      	movs	r3, #21
 80007d8:	713b      	strb	r3, [r7, #4]
    bytes[1] = 2;
 80007da:	2302      	movs	r3, #2
 80007dc:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80007de:	1d3a      	adds	r2, r7, #4
 80007e0:	2364      	movs	r3, #100	@ 0x64
 80007e2:	9300      	str	r3, [sp, #0]
 80007e4:	2302      	movs	r3, #2
 80007e6:	2194      	movs	r1, #148	@ 0x94
 80007e8:	4815      	ldr	r0, [pc, #84]	@ (8000840 <configAudio+0x1dc>)
 80007ea:	f004 fb8f 	bl	8004f0c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x20;
 80007ee:	2320      	movs	r3, #32
 80007f0:	713b      	strb	r3, [r7, #4]
    bytes[1] = 24;
 80007f2:	2318      	movs	r3, #24
 80007f4:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80007f6:	1d3a      	adds	r2, r7, #4
 80007f8:	2364      	movs	r3, #100	@ 0x64
 80007fa:	9300      	str	r3, [sp, #0]
 80007fc:	2302      	movs	r3, #2
 80007fe:	2194      	movs	r1, #148	@ 0x94
 8000800:	480f      	ldr	r0, [pc, #60]	@ (8000840 <configAudio+0x1dc>)
 8000802:	f004 fb83 	bl	8004f0c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x21;
 8000806:	2321      	movs	r3, #33	@ 0x21
 8000808:	713b      	strb	r3, [r7, #4]
    bytes[1] = 24;
 800080a:	2318      	movs	r3, #24
 800080c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800080e:	1d3a      	adds	r2, r7, #4
 8000810:	2364      	movs	r3, #100	@ 0x64
 8000812:	9300      	str	r3, [sp, #0]
 8000814:	2302      	movs	r3, #2
 8000816:	2194      	movs	r1, #148	@ 0x94
 8000818:	4809      	ldr	r0, [pc, #36]	@ (8000840 <configAudio+0x1dc>)
 800081a:	f004 fb77 	bl	8004f0c <HAL_I2C_Master_Transmit>

    /* Power up */
    bytes[0] = 0x02;
 800081e:	2302      	movs	r3, #2
 8000820:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x9E;
 8000822:	239e      	movs	r3, #158	@ 0x9e
 8000824:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000826:	1d3a      	adds	r2, r7, #4
 8000828:	2364      	movs	r3, #100	@ 0x64
 800082a:	9300      	str	r3, [sp, #0]
 800082c:	2302      	movs	r3, #2
 800082e:	2194      	movs	r1, #148	@ 0x94
 8000830:	4803      	ldr	r0, [pc, #12]	@ (8000840 <configAudio+0x1dc>)
 8000832:	f004 fb6b 	bl	8004f0c <HAL_I2C_Master_Transmit>
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000260 	.word	0x20000260

08000844 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b1b      	ldr	r3, [pc, #108]	@ (80008bc <MX_DMA_Init+0x78>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a1a      	ldr	r2, [pc, #104]	@ (80008bc <MX_DMA_Init+0x78>)
 8000854:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b18      	ldr	r3, [pc, #96]	@ (80008bc <MX_DMA_Init+0x78>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	4b14      	ldr	r3, [pc, #80]	@ (80008bc <MX_DMA_Init+0x78>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a13      	ldr	r2, [pc, #76]	@ (80008bc <MX_DMA_Init+0x78>)
 8000870:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <MX_DMA_Init+0x78>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	2100      	movs	r1, #0
 8000886:	2011      	movs	r0, #17
 8000888:	f001 fef9 	bl	800267e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800088c:	2011      	movs	r0, #17
 800088e:	f001 ff12 	bl	80026b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	2100      	movs	r1, #0
 8000896:	202f      	movs	r0, #47	@ 0x2f
 8000898:	f001 fef1 	bl	800267e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800089c:	202f      	movs	r0, #47	@ 0x2f
 800089e:	f001 ff0a 	bl	80026b6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2100      	movs	r1, #0
 80008a6:	2038      	movs	r0, #56	@ 0x38
 80008a8:	f001 fee9 	bl	800267e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008ac:	2038      	movs	r0, #56	@ 0x38
 80008ae:	f001 ff02 	bl	80026b6 <HAL_NVIC_EnableIRQ>

}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800

080008c0 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08c      	sub	sp, #48	@ 0x30
 80008c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
 80008d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	61bb      	str	r3, [r7, #24]
 80008da:	4b72      	ldr	r3, [pc, #456]	@ (8000aa4 <MX_GPIO_Init+0x1e4>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	4a71      	ldr	r2, [pc, #452]	@ (8000aa4 <MX_GPIO_Init+0x1e4>)
 80008e0:	f043 0310 	orr.w	r3, r3, #16
 80008e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e6:	4b6f      	ldr	r3, [pc, #444]	@ (8000aa4 <MX_GPIO_Init+0x1e4>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	f003 0310 	and.w	r3, r3, #16
 80008ee:	61bb      	str	r3, [r7, #24]
 80008f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
 80008f6:	4b6b      	ldr	r3, [pc, #428]	@ (8000aa4 <MX_GPIO_Init+0x1e4>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	4a6a      	ldr	r2, [pc, #424]	@ (8000aa4 <MX_GPIO_Init+0x1e4>)
 80008fc:	f043 0304 	orr.w	r3, r3, #4
 8000900:	6313      	str	r3, [r2, #48]	@ 0x30
 8000902:	4b68      	ldr	r3, [pc, #416]	@ (8000aa4 <MX_GPIO_Init+0x1e4>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	f003 0304 	and.w	r3, r3, #4
 800090a:	617b      	str	r3, [r7, #20]
 800090c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
 8000912:	4b64      	ldr	r3, [pc, #400]	@ (8000aa4 <MX_GPIO_Init+0x1e4>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	4a63      	ldr	r2, [pc, #396]	@ (8000aa4 <MX_GPIO_Init+0x1e4>)
 8000918:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800091c:	6313      	str	r3, [r2, #48]	@ 0x30
 800091e:	4b61      	ldr	r3, [pc, #388]	@ (8000aa4 <MX_GPIO_Init+0x1e4>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	4b5d      	ldr	r3, [pc, #372]	@ (8000aa4 <MX_GPIO_Init+0x1e4>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	4a5c      	ldr	r2, [pc, #368]	@ (8000aa4 <MX_GPIO_Init+0x1e4>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6313      	str	r3, [r2, #48]	@ 0x30
 800093a:	4b5a      	ldr	r3, [pc, #360]	@ (8000aa4 <MX_GPIO_Init+0x1e4>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	4b56      	ldr	r3, [pc, #344]	@ (8000aa4 <MX_GPIO_Init+0x1e4>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	4a55      	ldr	r2, [pc, #340]	@ (8000aa4 <MX_GPIO_Init+0x1e4>)
 8000950:	f043 0302 	orr.w	r3, r3, #2
 8000954:	6313      	str	r3, [r2, #48]	@ 0x30
 8000956:	4b53      	ldr	r3, [pc, #332]	@ (8000aa4 <MX_GPIO_Init+0x1e4>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	f003 0302 	and.w	r3, r3, #2
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	4b4f      	ldr	r3, [pc, #316]	@ (8000aa4 <MX_GPIO_Init+0x1e4>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	4a4e      	ldr	r2, [pc, #312]	@ (8000aa4 <MX_GPIO_Init+0x1e4>)
 800096c:	f043 0308 	orr.w	r3, r3, #8
 8000970:	6313      	str	r3, [r2, #48]	@ 0x30
 8000972:	4b4c      	ldr	r3, [pc, #304]	@ (8000aa4 <MX_GPIO_Init+0x1e4>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	f003 0308 	and.w	r3, r3, #8
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	2108      	movs	r1, #8
 8000982:	4849      	ldr	r0, [pc, #292]	@ (8000aa8 <MX_GPIO_Init+0x1e8>)
 8000984:	f002 fbbe 	bl	8003104 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000988:	2201      	movs	r2, #1
 800098a:	2101      	movs	r1, #1
 800098c:	4847      	ldr	r0, [pc, #284]	@ (8000aac <MX_GPIO_Init+0x1ec>)
 800098e:	f002 fbb9 	bl	8003104 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000992:	2200      	movs	r2, #0
 8000994:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000998:	4845      	ldr	r0, [pc, #276]	@ (8000ab0 <MX_GPIO_Init+0x1f0>)
 800099a:	f002 fbb3 	bl	8003104 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800099e:	2308      	movs	r3, #8
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	483c      	ldr	r0, [pc, #240]	@ (8000aa8 <MX_GPIO_Init+0x1e8>)
 80009b6:	f002 fa09 	bl	8002dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009ba:	2301      	movs	r3, #1
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009be:	2301      	movs	r3, #1
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	4836      	ldr	r0, [pc, #216]	@ (8000aac <MX_GPIO_Init+0x1ec>)
 80009d2:	f002 f9fb 	bl	8002dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009d6:	2308      	movs	r3, #8
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009da:	2302      	movs	r3, #2
 80009dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	2300      	movs	r3, #0
 80009e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009e6:	2305      	movs	r3, #5
 80009e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	4619      	mov	r1, r3
 80009f0:	482e      	ldr	r0, [pc, #184]	@ (8000aac <MX_GPIO_Init+0x1ec>)
 80009f2:	f002 f9eb 	bl	8002dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009f6:	2301      	movs	r3, #1
 80009f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009fa:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a04:	f107 031c 	add.w	r3, r7, #28
 8000a08:	4619      	mov	r1, r3
 8000a0a:	482a      	ldr	r0, [pc, #168]	@ (8000ab4 <MX_GPIO_Init+0x1f4>)
 8000a0c:	f002 f9de 	bl	8002dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a10:	2304      	movs	r3, #4
 8000a12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a14:	2300      	movs	r3, #0
 8000a16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	f107 031c 	add.w	r3, r7, #28
 8000a20:	4619      	mov	r1, r3
 8000a22:	4825      	ldr	r0, [pc, #148]	@ (8000ab8 <MX_GPIO_Init+0x1f8>)
 8000a24:	f002 f9d2 	bl	8002dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a3a:	2305      	movs	r3, #5
 8000a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	4619      	mov	r1, r3
 8000a44:	481c      	ldr	r0, [pc, #112]	@ (8000ab8 <MX_GPIO_Init+0x1f8>)
 8000a46:	f002 f9c1 	bl	8002dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a4a:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000a4e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	4619      	mov	r1, r3
 8000a62:	4813      	ldr	r0, [pc, #76]	@ (8000ab0 <MX_GPIO_Init+0x1f0>)
 8000a64:	f002 f9b2 	bl	8002dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a68:	2320      	movs	r3, #32
 8000a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a74:	f107 031c 	add.w	r3, r7, #28
 8000a78:	4619      	mov	r1, r3
 8000a7a:	480d      	ldr	r0, [pc, #52]	@ (8000ab0 <MX_GPIO_Init+0x1f0>)
 8000a7c:	f002 f9a6 	bl	8002dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a80:	2302      	movs	r3, #2
 8000a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a84:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	4619      	mov	r1, r3
 8000a94:	4804      	ldr	r0, [pc, #16]	@ (8000aa8 <MX_GPIO_Init+0x1e8>)
 8000a96:	f002 f999 	bl	8002dcc <HAL_GPIO_Init>

}
 8000a9a:	bf00      	nop
 8000a9c:	3730      	adds	r7, #48	@ 0x30
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	40020800 	.word	0x40020800
 8000ab0:	40020c00 	.word	0x40020c00
 8000ab4:	40020000 	.word	0x40020000
 8000ab8:	40020400 	.word	0x40020400

08000abc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ac0:	4b12      	ldr	r3, [pc, #72]	@ (8000b0c <MX_I2C1_Init+0x50>)
 8000ac2:	4a13      	ldr	r2, [pc, #76]	@ (8000b10 <MX_I2C1_Init+0x54>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ac6:	4b11      	ldr	r3, [pc, #68]	@ (8000b0c <MX_I2C1_Init+0x50>)
 8000ac8:	4a12      	ldr	r2, [pc, #72]	@ (8000b14 <MX_I2C1_Init+0x58>)
 8000aca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000acc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b0c <MX_I2C1_Init+0x50>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b0c <MX_I2C1_Init+0x50>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b0c <MX_I2C1_Init+0x50>)
 8000ada:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ade:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8000b0c <MX_I2C1_Init+0x50>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ae6:	4b09      	ldr	r3, [pc, #36]	@ (8000b0c <MX_I2C1_Init+0x50>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aec:	4b07      	ldr	r3, [pc, #28]	@ (8000b0c <MX_I2C1_Init+0x50>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000af2:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <MX_I2C1_Init+0x50>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000af8:	4804      	ldr	r0, [pc, #16]	@ (8000b0c <MX_I2C1_Init+0x50>)
 8000afa:	f004 f8c3 	bl	8004c84 <HAL_I2C_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b04:	f000 fe1c 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000260 	.word	0x20000260
 8000b10:	40005400 	.word	0x40005400
 8000b14:	000186a0 	.word	0x000186a0

08000b18 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	@ 0x28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a19      	ldr	r2, [pc, #100]	@ (8000b9c <HAL_I2C_MspInit+0x84>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d12c      	bne.n	8000b94 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	4b18      	ldr	r3, [pc, #96]	@ (8000ba0 <HAL_I2C_MspInit+0x88>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b42:	4a17      	ldr	r2, [pc, #92]	@ (8000ba0 <HAL_I2C_MspInit+0x88>)
 8000b44:	f043 0302 	orr.w	r3, r3, #2
 8000b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ba0 <HAL_I2C_MspInit+0x88>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	f003 0302 	and.w	r3, r3, #2
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b56:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000b5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b5c:	2312      	movs	r3, #18
 8000b5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b60:	2301      	movs	r3, #1
 8000b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b64:	2300      	movs	r3, #0
 8000b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b68:	2304      	movs	r3, #4
 8000b6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	4619      	mov	r1, r3
 8000b72:	480c      	ldr	r0, [pc, #48]	@ (8000ba4 <HAL_I2C_MspInit+0x8c>)
 8000b74:	f002 f92a 	bl	8002dcc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ba0 <HAL_I2C_MspInit+0x88>)
 8000b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b80:	4a07      	ldr	r2, [pc, #28]	@ (8000ba0 <HAL_I2C_MspInit+0x88>)
 8000b82:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b86:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b88:	4b05      	ldr	r3, [pc, #20]	@ (8000ba0 <HAL_I2C_MspInit+0x88>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b94:	bf00      	nop
 8000b96:	3728      	adds	r7, #40	@ 0x28
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40005400 	.word	0x40005400
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40020400 	.word	0x40020400

08000ba8 <MX_I2S3_Init>:
I2S_HandleTypeDef hi2s3;
DMA_HandleTypeDef hdma_spi3_tx;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000bac:	4b13      	ldr	r3, [pc, #76]	@ (8000bfc <MX_I2S3_Init+0x54>)
 8000bae:	4a14      	ldr	r2, [pc, #80]	@ (8000c00 <MX_I2S3_Init+0x58>)
 8000bb0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000bb2:	4b12      	ldr	r3, [pc, #72]	@ (8000bfc <MX_I2S3_Init+0x54>)
 8000bb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bb8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000bba:	4b10      	ldr	r3, [pc, #64]	@ (8000bfc <MX_I2S3_Init+0x54>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000bfc <MX_I2S3_Init+0x54>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000bfc <MX_I2S3_Init+0x54>)
 8000bc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bcc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000bce:	4b0b      	ldr	r3, [pc, #44]	@ (8000bfc <MX_I2S3_Init+0x54>)
 8000bd0:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8000bd4:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000bd6:	4b09      	ldr	r3, [pc, #36]	@ (8000bfc <MX_I2S3_Init+0x54>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000bdc:	4b07      	ldr	r3, [pc, #28]	@ (8000bfc <MX_I2S3_Init+0x54>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000be2:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <MX_I2S3_Init+0x54>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000be8:	4804      	ldr	r0, [pc, #16]	@ (8000bfc <MX_I2S3_Init+0x54>)
 8000bea:	f004 fce9 	bl	80055c0 <HAL_I2S_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000bf4:	f000 fda4 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	200002b4 	.word	0x200002b4
 8000c00:	40003c00 	.word	0x40003c00

08000c04 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08e      	sub	sp, #56	@ 0x38
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a49      	ldr	r2, [pc, #292]	@ (8000d54 <HAL_I2S_MspInit+0x150>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	f040 808b 	bne.w	8000d4c <HAL_I2S_MspInit+0x148>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c36:	2301      	movs	r3, #1
 8000c38:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000c3a:	23c0      	movs	r3, #192	@ 0xc0
 8000c3c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c42:	f107 0314 	add.w	r3, r7, #20
 8000c46:	4618      	mov	r0, r3
 8000c48:	f005 feea 	bl	8006a20 <HAL_RCCEx_PeriphCLKConfig>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8000c52:	f000 fd75 	bl	8001740 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	4b3f      	ldr	r3, [pc, #252]	@ (8000d58 <HAL_I2S_MspInit+0x154>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5e:	4a3e      	ldr	r2, [pc, #248]	@ (8000d58 <HAL_I2S_MspInit+0x154>)
 8000c60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c66:	4b3c      	ldr	r3, [pc, #240]	@ (8000d58 <HAL_I2S_MspInit+0x154>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	4b38      	ldr	r3, [pc, #224]	@ (8000d58 <HAL_I2S_MspInit+0x154>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	4a37      	ldr	r2, [pc, #220]	@ (8000d58 <HAL_I2S_MspInit+0x154>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c82:	4b35      	ldr	r3, [pc, #212]	@ (8000d58 <HAL_I2S_MspInit+0x154>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60bb      	str	r3, [r7, #8]
 8000c92:	4b31      	ldr	r3, [pc, #196]	@ (8000d58 <HAL_I2S_MspInit+0x154>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c96:	4a30      	ldr	r2, [pc, #192]	@ (8000d58 <HAL_I2S_MspInit+0x154>)
 8000c98:	f043 0304 	orr.w	r3, r3, #4
 8000c9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9e:	4b2e      	ldr	r3, [pc, #184]	@ (8000d58 <HAL_I2S_MspInit+0x154>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	f003 0304 	and.w	r3, r3, #4
 8000ca6:	60bb      	str	r3, [r7, #8]
 8000ca8:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000caa:	2310      	movs	r3, #16
 8000cac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cba:	2306      	movs	r3, #6
 8000cbc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000cbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4825      	ldr	r0, [pc, #148]	@ (8000d5c <HAL_I2S_MspInit+0x158>)
 8000cc6:	f002 f881 	bl	8002dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000cca:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000cce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cdc:	2306      	movs	r3, #6
 8000cde:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	481e      	ldr	r0, [pc, #120]	@ (8000d60 <HAL_I2S_MspInit+0x15c>)
 8000ce8:	f002 f870 	bl	8002dcc <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream7;
 8000cec:	4b1d      	ldr	r3, [pc, #116]	@ (8000d64 <HAL_I2S_MspInit+0x160>)
 8000cee:	4a1e      	ldr	r2, [pc, #120]	@ (8000d68 <HAL_I2S_MspInit+0x164>)
 8000cf0:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d64 <HAL_I2S_MspInit+0x160>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cf8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d64 <HAL_I2S_MspInit+0x160>)
 8000cfa:	2240      	movs	r2, #64	@ 0x40
 8000cfc:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cfe:	4b19      	ldr	r3, [pc, #100]	@ (8000d64 <HAL_I2S_MspInit+0x160>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d04:	4b17      	ldr	r3, [pc, #92]	@ (8000d64 <HAL_I2S_MspInit+0x160>)
 8000d06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d0a:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d0c:	4b15      	ldr	r3, [pc, #84]	@ (8000d64 <HAL_I2S_MspInit+0x160>)
 8000d0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d12:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d14:	4b13      	ldr	r3, [pc, #76]	@ (8000d64 <HAL_I2S_MspInit+0x160>)
 8000d16:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d1a:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8000d1c:	4b11      	ldr	r3, [pc, #68]	@ (8000d64 <HAL_I2S_MspInit+0x160>)
 8000d1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d22:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d24:	4b0f      	ldr	r3, [pc, #60]	@ (8000d64 <HAL_I2S_MspInit+0x160>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d64 <HAL_I2S_MspInit+0x160>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000d30:	480c      	ldr	r0, [pc, #48]	@ (8000d64 <HAL_I2S_MspInit+0x160>)
 8000d32:	f001 fcdb 	bl	80026ec <HAL_DMA_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <HAL_I2S_MspInit+0x13c>
    {
      Error_Handler();
 8000d3c:	f000 fd00 	bl	8001740 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi3_tx);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4a08      	ldr	r2, [pc, #32]	@ (8000d64 <HAL_I2S_MspInit+0x160>)
 8000d44:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d46:	4a07      	ldr	r2, [pc, #28]	@ (8000d64 <HAL_I2S_MspInit+0x160>)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000d4c:	bf00      	nop
 8000d4e:	3738      	adds	r7, #56	@ 0x38
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40003c00 	.word	0x40003c00
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	40020000 	.word	0x40020000
 8000d60:	40020800 	.word	0x40020800
 8000d64:	200002fc 	.word	0x200002fc
 8000d68:	400260b8 	.word	0x400260b8

08000d6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d72:	f000 ff39 	bl	8001be8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d76:	f000 f8f7 	bl	8000f68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d7a:	f7ff fda1 	bl	80008c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d7e:	f7ff fd61 	bl	8000844 <MX_DMA_Init>
  MX_I2C1_Init();
 8000d82:	f7ff fe9b 	bl	8000abc <MX_I2C1_Init>
  MX_I2S3_Init();
 8000d86:	f7ff ff0f 	bl	8000ba8 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000d8a:	f000 fcdf 	bl	800174c <MX_SPI1_Init>
//  MX_USB_HOST_Init();
  MX_TIM2_Init();
 8000d8e:	f000 fded 	bl	800196c <MX_TIM2_Init>
  MX_ADC1_Init();
 8000d92:	f7ff fb91 	bl	80004b8 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000d96:	f000 fe55 	bl	8001a44 <MX_USART2_UART_Init>
//  q15_t test = -2022;   // Skaliraj 2022 na Q15 format
//  float izbor = 0.1;
//  q15_t multiplier = (q15_t)(0x7FFF * izbor);         // Q15 format za 1.0
//  q15_t rezultat = 0;
//  arm_mult_q15(&test, &multiplier, &rezultat, 1);
  arm_rfft_init_q15(&rfftInstance, FFT_SIZE, 0, 1);
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000da2:	4862      	ldr	r0, [pc, #392]	@ (8000f2c <main+0x1c0>)
 8000da4:	f007 fcb8 	bl	8008718 <arm_rfft_init_q15>
  configAudio();
 8000da8:	f7ff fc5c 	bl	8000664 <configAudio>


  HAL_TIM_Base_Start(&htim2);
 8000dac:	4860      	ldr	r0, [pc, #384]	@ (8000f30 <main+0x1c4>)
 8000dae:	f006 f851 	bl	8006e54 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, adc_signal, ADC_SIZE);
 8000db2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000db6:	495f      	ldr	r1, [pc, #380]	@ (8000f34 <main+0x1c8>)
 8000db8:	485f      	ldr	r0, [pc, #380]	@ (8000f38 <main+0x1cc>)
 8000dba:	f000 ffcb 	bl	8001d54 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  arm_rfft_init_q15(&rfftInstance, FFT_SIZE, 0, 1);
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dc6:	4859      	ldr	r0, [pc, #356]	@ (8000f2c <main+0x1c0>)
 8000dc8:	f007 fca6 	bl	8008718 <arm_rfft_init_q15>
//	  init_iir_filter();
	  if (adc_half_flag == 1) {
 8000dcc:	4b5b      	ldr	r3, [pc, #364]	@ (8000f3c <main+0x1d0>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d156      	bne.n	8000e84 <main+0x118>
    	adc_half_flag = 0;
 8000dd6:	4b59      	ldr	r3, [pc, #356]	@ (8000f3c <main+0x1d0>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]
    	conv_flag = 0;
 8000ddc:	4b58      	ldr	r3, [pc, #352]	@ (8000f40 <main+0x1d4>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	701a      	strb	r2, [r3, #0]
    	last_systick = HAL_GetTick();
 8000de2:	f000 ff67 	bl	8001cb4 <HAL_GetTick>
 8000de6:	4603      	mov	r3, r0
 8000de8:	4a56      	ldr	r2, [pc, #344]	@ (8000f44 <main+0x1d8>)
 8000dea:	6013      	str	r3, [r2, #0]

    	init_iir_filter();
 8000dec:	f000 faec 	bl	80013c8 <init_iir_filter>
    	init_fir_filter();
 8000df0:	f000 fa42 	bl	8001278 <init_fir_filter>
    	convert_to_q15(adc_signal, conv_signal, ADC_SIZE);
 8000df4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000df8:	4953      	ldr	r1, [pc, #332]	@ (8000f48 <main+0x1dc>)
 8000dfa:	484e      	ldr	r0, [pc, #312]	@ (8000f34 <main+0x1c8>)
 8000dfc:	f000 f91e 	bl	800103c <convert_to_q15>

		fir_filter(conv_signal, filtered_signal, ADC_SIZE/2, BLOCK_SIZE);
 8000e00:	2340      	movs	r3, #64	@ 0x40
 8000e02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e06:	4951      	ldr	r1, [pc, #324]	@ (8000f4c <main+0x1e0>)
 8000e08:	484f      	ldr	r0, [pc, #316]	@ (8000f48 <main+0x1dc>)
 8000e0a:	f000 fa55 	bl	80012b8 <fir_filter>

    	iir_filter(filtered_signal, output_signal, ADC_SIZE/2);
 8000e0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e12:	494f      	ldr	r1, [pc, #316]	@ (8000f50 <main+0x1e4>)
 8000e14:	484d      	ldr	r0, [pc, #308]	@ (8000f4c <main+0x1e0>)
 8000e16:	f000 fb07 	bl	8001428 <iir_filter>

    	for (int i = 0; i < ADC_SIZE/2; i++) {
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	e00f      	b.n	8000e40 <main+0xd4>
    	    output_signal[i] = soft_clip(output_signal[i]);
 8000e20:	4a4b      	ldr	r2, [pc, #300]	@ (8000f50 <main+0x1e4>)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f000 fa8b 	bl	8001344 <soft_clip>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	4619      	mov	r1, r3
 8000e32:	4a47      	ldr	r2, [pc, #284]	@ (8000f50 <main+0x1e4>)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    	for (int i = 0; i < ADC_SIZE/2; i++) {
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000e46:	dbeb      	blt.n	8000e20 <main+0xb4>
    	}

//		iir_filter_lowpass(filtered_signal, output_signal, ADC_SIZE/2);

		process_equalizer(output_signal, eq_signal, ADC_SIZE/2);
 8000e48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e4c:	4941      	ldr	r1, [pc, #260]	@ (8000f54 <main+0x1e8>)
 8000e4e:	4840      	ldr	r0, [pc, #256]	@ (8000f50 <main+0x1e4>)
 8000e50:	f000 fafc 	bl	800144c <process_equalizer>

    	last_systick = HAL_GetTick();
 8000e54:	f000 ff2e 	bl	8001cb4 <HAL_GetTick>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	4a3a      	ldr	r2, [pc, #232]	@ (8000f44 <main+0x1d8>)
 8000e5c:	6013      	str	r3, [r2, #0]
//		rfft(finish_signal, fftOutput, magnitudeSpectrum);
    	last_systick = HAL_GetTick();
 8000e5e:	f000 ff29 	bl	8001cb4 <HAL_GetTick>
 8000e62:	4603      	mov	r3, r0
 8000e64:	4a37      	ldr	r2, [pc, #220]	@ (8000f44 <main+0x1d8>)
 8000e66:	6013      	str	r3, [r2, #0]
    	last_systick = HAL_GetTick();
 8000e68:	f000 ff24 	bl	8001cb4 <HAL_GetTick>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	4a35      	ldr	r2, [pc, #212]	@ (8000f44 <main+0x1d8>)
 8000e70:	6013      	str	r3, [r2, #0]
//		peak_values_fft(magnitudeSpectrum); // Look for unexpected peaks


		i2s_send_flag = 0; //DA KRENE PRVU POLOVICU
 8000e72:	4b39      	ldr	r3, [pc, #228]	@ (8000f58 <main+0x1ec>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	701a      	strb	r2, [r3, #0]

		convert_to_i2s(eq_signal, i2s_signal, ADC_SIZE);
 8000e78:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e7c:	4937      	ldr	r1, [pc, #220]	@ (8000f5c <main+0x1f0>)
 8000e7e:	4835      	ldr	r0, [pc, #212]	@ (8000f54 <main+0x1e8>)
 8000e80:	f000 f97e 	bl	8001180 <convert_to_i2s>

    }

    if (adc_done_flag == 1) {
 8000e84:	4b36      	ldr	r3, [pc, #216]	@ (8000f60 <main+0x1f4>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d197      	bne.n	8000dbe <main+0x52>
    	adc_done_flag = 0;
 8000e8e:	4b34      	ldr	r3, [pc, #208]	@ (8000f60 <main+0x1f4>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]
    	conv_flag = 1;
 8000e94:	4b2a      	ldr	r3, [pc, #168]	@ (8000f40 <main+0x1d4>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	701a      	strb	r2, [r3, #0]
    	init_iir_filter();
 8000e9a:	f000 fa95 	bl	80013c8 <init_iir_filter>
    	init_fir_filter();
 8000e9e:	f000 f9eb 	bl	8001278 <init_fir_filter>
    	convert_to_q15(adc_signal, conv_signal, ADC_SIZE);
 8000ea2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ea6:	4928      	ldr	r1, [pc, #160]	@ (8000f48 <main+0x1dc>)
 8000ea8:	4822      	ldr	r0, [pc, #136]	@ (8000f34 <main+0x1c8>)
 8000eaa:	f000 f8c7 	bl	800103c <convert_to_q15>
    	fir_filter(conv_signal, filtered_signal, ADC_SIZE/2, BLOCK_SIZE);
 8000eae:	2340      	movs	r3, #64	@ 0x40
 8000eb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000eb4:	4925      	ldr	r1, [pc, #148]	@ (8000f4c <main+0x1e0>)
 8000eb6:	4824      	ldr	r0, [pc, #144]	@ (8000f48 <main+0x1dc>)
 8000eb8:	f000 f9fe 	bl	80012b8 <fir_filter>
    	iir_filter(filtered_signal, output_signal, ADC_SIZE/2);
 8000ebc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ec0:	4923      	ldr	r1, [pc, #140]	@ (8000f50 <main+0x1e4>)
 8000ec2:	4822      	ldr	r0, [pc, #136]	@ (8000f4c <main+0x1e0>)
 8000ec4:	f000 fab0 	bl	8001428 <iir_filter>

    	for (int i = 0; i < ADC_SIZE/2; i++) {
 8000ec8:	2300      	movs	r3, #0
 8000eca:	603b      	str	r3, [r7, #0]
 8000ecc:	e00f      	b.n	8000eee <main+0x182>
    	    output_signal[i] = soft_clip(output_signal[i]);
 8000ece:	4a20      	ldr	r2, [pc, #128]	@ (8000f50 <main+0x1e4>)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 fa34 	bl	8001344 <soft_clip>
 8000edc:	4603      	mov	r3, r0
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4a1b      	ldr	r2, [pc, #108]	@ (8000f50 <main+0x1e4>)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    	for (int i = 0; i < ADC_SIZE/2; i++) {
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	3301      	adds	r3, #1
 8000eec:	603b      	str	r3, [r7, #0]
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ef4:	dbeb      	blt.n	8000ece <main+0x162>
    	}

//		iir_filter_lowpass(filtered_signal, output_signal, ADC_SIZE/2);
//		fir_filter(filtered_signal, output_signal, ADC_SIZE/2, BLOCK_SIZE);

		process_equalizer(output_signal, eq_signal, ADC_SIZE/2);
 8000ef6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000efa:	4916      	ldr	r1, [pc, #88]	@ (8000f54 <main+0x1e8>)
 8000efc:	4814      	ldr	r0, [pc, #80]	@ (8000f50 <main+0x1e4>)
 8000efe:	f000 faa5 	bl	800144c <process_equalizer>

		i2s_send_flag = 1; //DA KRENE DRUGU POLOVICU
 8000f02:	4b15      	ldr	r3, [pc, #84]	@ (8000f58 <main+0x1ec>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	701a      	strb	r2, [r3, #0]
		convert_to_i2s(eq_signal, i2s_signal, ADC_SIZE);
 8000f08:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f0c:	4913      	ldr	r1, [pc, #76]	@ (8000f5c <main+0x1f0>)
 8000f0e:	4811      	ldr	r0, [pc, #68]	@ (8000f54 <main+0x1e8>)
 8000f10:	f000 f936 	bl	8001180 <convert_to_i2s>
		if (flag_uart == 1) {
 8000f14:	4b13      	ldr	r3, [pc, #76]	@ (8000f64 <main+0x1f8>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d102      	bne.n	8000f24 <main+0x1b8>
			callUart(i2s_signal);
 8000f1e:	480f      	ldr	r0, [pc, #60]	@ (8000f5c <main+0x1f0>)
 8000f20:	f000 f992 	bl	8001248 <callUart>
		}
		flag_uart = 0;
 8000f24:	4b0f      	ldr	r3, [pc, #60]	@ (8000f64 <main+0x1f8>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	701a      	strb	r2, [r3, #0]
	  arm_rfft_init_q15(&rfftInstance, FFT_SIZE, 0, 1);
 8000f2a:	e748      	b.n	8000dbe <main+0x52>
 8000f2c:	20002b68 	.word	0x20002b68
 8000f30:	20002e60 	.word	0x20002e60
 8000f34:	2000035c 	.word	0x2000035c
 8000f38:	200001b8 	.word	0x200001b8
 8000f3c:	20002b5c 	.word	0x20002b5c
 8000f40:	20002b5e 	.word	0x20002b5e
 8000f44:	20002b64 	.word	0x20002b64
 8000f48:	20000b5c 	.word	0x20000b5c
 8000f4c:	2000135c 	.word	0x2000135c
 8000f50:	20000f5c 	.word	0x20000f5c
 8000f54:	2000175c 	.word	0x2000175c
 8000f58:	20002b5f 	.word	0x20002b5f
 8000f5c:	20001b5c 	.word	0x20001b5c
 8000f60:	20002b5d 	.word	0x20002b5d
 8000f64:	20002b60 	.word	0x20002b60

08000f68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b094      	sub	sp, #80	@ 0x50
 8000f6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6e:	f107 0320 	add.w	r3, r7, #32
 8000f72:	2230      	movs	r2, #48	@ 0x30
 8000f74:	2100      	movs	r1, #0
 8000f76:	4618      	mov	r0, r3
 8000f78:	f007 ff04 	bl	8008d84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	4b28      	ldr	r3, [pc, #160]	@ (8001034 <SystemClock_Config+0xcc>)
 8000f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f94:	4a27      	ldr	r2, [pc, #156]	@ (8001034 <SystemClock_Config+0xcc>)
 8000f96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f9c:	4b25      	ldr	r3, [pc, #148]	@ (8001034 <SystemClock_Config+0xcc>)
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fa8:	2300      	movs	r3, #0
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	4b22      	ldr	r3, [pc, #136]	@ (8001038 <SystemClock_Config+0xd0>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a21      	ldr	r2, [pc, #132]	@ (8001038 <SystemClock_Config+0xd0>)
 8000fb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fb6:	6013      	str	r3, [r2, #0]
 8000fb8:	4b1f      	ldr	r3, [pc, #124]	@ (8001038 <SystemClock_Config+0xd0>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fc8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fcc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fd2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fd8:	2304      	movs	r3, #4
 8000fda:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000fdc:	23a8      	movs	r3, #168	@ 0xa8
 8000fde:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fe4:	2307      	movs	r3, #7
 8000fe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe8:	f107 0320 	add.w	r3, r7, #32
 8000fec:	4618      	mov	r0, r3
 8000fee:	f005 f87f 	bl	80060f0 <HAL_RCC_OscConfig>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ff8:	f000 fba2 	bl	8001740 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ffc:	230f      	movs	r3, #15
 8000ffe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001000:	2302      	movs	r3, #2
 8001002:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001008:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800100c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800100e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001012:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001014:	f107 030c 	add.w	r3, r7, #12
 8001018:	2105      	movs	r1, #5
 800101a:	4618      	mov	r0, r3
 800101c:	f005 fae0 	bl	80065e0 <HAL_RCC_ClockConfig>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001026:	f000 fb8b 	bl	8001740 <Error_Handler>
  }
}
 800102a:	bf00      	nop
 800102c:	3750      	adds	r7, #80	@ 0x50
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40023800 	.word	0x40023800
 8001038:	40007000 	.word	0x40007000

0800103c <convert_to_q15>:
    // Use CMSIS function for vectorized Q15 multiplication
    arm_mult_q15(input_signal, gain_array, output_signal, length);
}


void convert_to_q15(uint16_t *rawInput, q15_t *convertedSignal, int size) {
 800103c:	b480      	push	{r7}
 800103e:	b08b      	sub	sp, #44	@ 0x2c
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
    int i;
    if (conv_flag == 0) {
 8001048:	4b4a      	ldr	r3, [pc, #296]	@ (8001174 <convert_to_q15+0x138>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b00      	cmp	r3, #0
 8001050:	d142      	bne.n	80010d8 <convert_to_q15+0x9c>
        for (i = 0; i < size / 2; i++) {
 8001052:	2300      	movs	r3, #0
 8001054:	627b      	str	r3, [r7, #36]	@ 0x24
 8001056:	e037      	b.n	80010c8 <convert_to_q15+0x8c>
            // Convert and saturate to Q15

            convertedSignal[i] = (q15_t)__SSAT(((rawInput[i] - 2048) * 8), 16);
 8001058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	68fa      	ldr	r2, [r7, #12]
 800105e:	4413      	add	r3, r2
 8001060:	881b      	ldrh	r3, [r3, #0]
 8001062:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001066:	00db      	lsls	r3, r3, #3
 8001068:	623b      	str	r3, [r7, #32]
 800106a:	6a3b      	ldr	r3, [r7, #32]
 800106c:	f303 030f 	ssat	r3, #16, r3
 8001070:	61fb      	str	r3, [r7, #28]
 8001072:	69f9      	ldr	r1, [r7, #28]
 8001074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	68ba      	ldr	r2, [r7, #8]
 800107a:	4413      	add	r3, r2
 800107c:	b20a      	sxth	r2, r1
 800107e:	801a      	strh	r2, [r3, #0]
            if (convertedSignal[i] > 7800*2) convertedSignal[i] = 7800*2;
 8001080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	68ba      	ldr	r2, [r7, #8]
 8001086:	4413      	add	r3, r2
 8001088:	f9b3 3000 	ldrsh.w	r3, [r3]
 800108c:	f643 42f0 	movw	r2, #15600	@ 0x3cf0
 8001090:	4293      	cmp	r3, r2
 8001092:	dd06      	ble.n	80010a2 <convert_to_q15+0x66>
 8001094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	68ba      	ldr	r2, [r7, #8]
 800109a:	4413      	add	r3, r2
 800109c:	f643 42f0 	movw	r2, #15600	@ 0x3cf0
 80010a0:	801a      	strh	r2, [r3, #0]
            if (convertedSignal[i] < -7800*2) convertedSignal[i] = -7800*2;
 80010a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	68ba      	ldr	r2, [r7, #8]
 80010a8:	4413      	add	r3, r2
 80010aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ae:	4a32      	ldr	r2, [pc, #200]	@ (8001178 <convert_to_q15+0x13c>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	da06      	bge.n	80010c2 <convert_to_q15+0x86>
 80010b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	68ba      	ldr	r2, [r7, #8]
 80010ba:	4413      	add	r3, r2
 80010bc:	f24c 3210 	movw	r2, #49936	@ 0xc310
 80010c0:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < size / 2; i++) {
 80010c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c4:	3301      	adds	r3, #1
 80010c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	0fda      	lsrs	r2, r3, #31
 80010cc:	4413      	add	r3, r2
 80010ce:	105b      	asrs	r3, r3, #1
 80010d0:	461a      	mov	r2, r3
 80010d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d4:	4293      	cmp	r3, r2
 80010d6:	dbbf      	blt.n	8001058 <convert_to_q15+0x1c>
        }
    }
    if (conv_flag == 1) {
 80010d8:	4b26      	ldr	r3, [pc, #152]	@ (8001174 <convert_to_q15+0x138>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d141      	bne.n	8001166 <convert_to_q15+0x12a>
        for (i = size / 2; i < size; i++) {
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	0fda      	lsrs	r2, r3, #31
 80010e6:	4413      	add	r3, r2
 80010e8:	105b      	asrs	r3, r3, #1
 80010ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80010ec:	e037      	b.n	800115e <convert_to_q15+0x122>
            // Convert and saturate to Q15

            convertedSignal[i] = (q15_t)__SSAT(((rawInput[i] - 2048) * 8), 16);
 80010ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	4413      	add	r3, r2
 80010f6:	881b      	ldrh	r3, [r3, #0]
 80010f8:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	61bb      	str	r3, [r7, #24]
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	f303 030f 	ssat	r3, #16, r3
 8001106:	617b      	str	r3, [r7, #20]
 8001108:	6979      	ldr	r1, [r7, #20]
 800110a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	4413      	add	r3, r2
 8001112:	b20a      	sxth	r2, r1
 8001114:	801a      	strh	r2, [r3, #0]
            if (convertedSignal[i] > 7000*2) convertedSignal[i] = 7000*2;
 8001116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	4413      	add	r3, r2
 800111e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001122:	f243 62b0 	movw	r2, #14000	@ 0x36b0
 8001126:	4293      	cmp	r3, r2
 8001128:	dd06      	ble.n	8001138 <convert_to_q15+0xfc>
 800112a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	4413      	add	r3, r2
 8001132:	f243 62b0 	movw	r2, #14000	@ 0x36b0
 8001136:	801a      	strh	r2, [r3, #0]
            if (convertedSignal[i] < -7000*2) convertedSignal[i] = -7000*2;
 8001138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	68ba      	ldr	r2, [r7, #8]
 800113e:	4413      	add	r3, r2
 8001140:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001144:	4a0d      	ldr	r2, [pc, #52]	@ (800117c <convert_to_q15+0x140>)
 8001146:	4293      	cmp	r3, r2
 8001148:	da06      	bge.n	8001158 <convert_to_q15+0x11c>
 800114a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	68ba      	ldr	r2, [r7, #8]
 8001150:	4413      	add	r3, r2
 8001152:	f64c 1250 	movw	r2, #51536	@ 0xc950
 8001156:	801a      	strh	r2, [r3, #0]
        for (i = size / 2; i < size; i++) {
 8001158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800115a:	3301      	adds	r3, #1
 800115c:	627b      	str	r3, [r7, #36]	@ 0x24
 800115e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	429a      	cmp	r2, r3
 8001164:	dbc3      	blt.n	80010ee <convert_to_q15+0xb2>
        }
    }
}
 8001166:	bf00      	nop
 8001168:	372c      	adds	r7, #44	@ 0x2c
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	20002b5e 	.word	0x20002b5e
 8001178:	ffffc310 	.word	0xffffc310
 800117c:	ffffc950 	.word	0xffffc950

08001180 <convert_to_i2s>:


void convert_to_i2s(q15_t *rawInput, q15_t *convertedSignal, int size) {
 8001180:	b480      	push	{r7}
 8001182:	b089      	sub	sp, #36	@ 0x24
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
    int i = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	61fb      	str	r3, [r7, #28]
    	if (i2s_send_flag == 0) {
 8001190:	4b2c      	ldr	r3, [pc, #176]	@ (8001244 <convert_to_i2s+0xc4>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2b00      	cmp	r3, #0
 8001198:	d123      	bne.n	80011e2 <convert_to_i2s+0x62>
        	for (int j = 0; j < size; j += 2) {
 800119a:	2300      	movs	r3, #0
 800119c:	61bb      	str	r3, [r7, #24]
 800119e:	e01c      	b.n	80011da <convert_to_i2s+0x5a>
        		convertedSignal[j] = (q15_t)(rawInput[i]);
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	68fa      	ldr	r2, [r7, #12]
 80011a6:	441a      	add	r2, r3
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	68b9      	ldr	r1, [r7, #8]
 80011ae:	440b      	add	r3, r1
 80011b0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011b4:	801a      	strh	r2, [r3, #0]
        		convertedSignal[j+1] = (q15_t)(rawInput[i]);
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	441a      	add	r2, r3
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	3301      	adds	r3, #1
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	68b9      	ldr	r1, [r7, #8]
 80011c6:	440b      	add	r3, r1
 80011c8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011cc:	801a      	strh	r2, [r3, #0]
        		i++;
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3301      	adds	r3, #1
 80011d2:	61fb      	str	r3, [r7, #28]
        	for (int j = 0; j < size; j += 2) {
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	3302      	adds	r3, #2
 80011d8:	61bb      	str	r3, [r7, #24]
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	429a      	cmp	r2, r3
 80011e0:	dbde      	blt.n	80011a0 <convert_to_i2s+0x20>
        	}
    	}

    	if (i2s_send_flag == 1) {
 80011e2:	4b18      	ldr	r3, [pc, #96]	@ (8001244 <convert_to_i2s+0xc4>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d124      	bne.n	8001236 <convert_to_i2s+0xb6>
        	for (int j = size; j < size*2; j += 2) {
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	617b      	str	r3, [r7, #20]
 80011f0:	e01c      	b.n	800122c <convert_to_i2s+0xac>
        		convertedSignal[j] = (q15_t)(rawInput[i]);
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	68fa      	ldr	r2, [r7, #12]
 80011f8:	441a      	add	r2, r3
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	68b9      	ldr	r1, [r7, #8]
 8001200:	440b      	add	r3, r1
 8001202:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001206:	801a      	strh	r2, [r3, #0]
        		convertedSignal[j+1] = (q15_t)(rawInput[i]);
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	68fa      	ldr	r2, [r7, #12]
 800120e:	441a      	add	r2, r3
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	3301      	adds	r3, #1
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	68b9      	ldr	r1, [r7, #8]
 8001218:	440b      	add	r3, r1
 800121a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800121e:	801a      	strh	r2, [r3, #0]
        		i++;
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	3301      	adds	r3, #1
 8001224:	61fb      	str	r3, [r7, #28]
        	for (int j = size; j < size*2; j += 2) {
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	3302      	adds	r3, #2
 800122a:	617b      	str	r3, [r7, #20]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	697a      	ldr	r2, [r7, #20]
 8001232:	429a      	cmp	r2, r3
 8001234:	dbdd      	blt.n	80011f2 <convert_to_i2s+0x72>
        	}
    	}
}
 8001236:	bf00      	nop
 8001238:	3724      	adds	r7, #36	@ 0x24
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	20002b5f 	.word	0x20002b5f

08001248 <callUart>:



void callUart(q15_t *input) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit_DMA(&huart2, (uint8_t *)input, sizeof(input));
 8001250:	2204      	movs	r2, #4
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	4806      	ldr	r0, [pc, #24]	@ (8001270 <callUart+0x28>)
 8001256:	f006 f93f 	bl	80074d8 <HAL_UART_Transmit_DMA>
	  HAL_I2S_Transmit_DMA(&hi2s3, input, ADC_SIZE*2);
 800125a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	4804      	ldr	r0, [pc, #16]	@ (8001274 <callUart+0x2c>)
 8001262:	f004 faed 	bl	8005840 <HAL_I2S_Transmit_DMA>
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20002ea8 	.word	0x20002ea8
 8001274:	200002b4 	.word	0x200002b4

08001278 <init_fir_filter>:

void init_fir_filter() {
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af02      	add	r7, sp, #8
	arm_float_to_q15(firCoeffs, firCoeffsQ15, NUM_TAPS);
 800127e:	2240      	movs	r2, #64	@ 0x40
 8001280:	4909      	ldr	r1, [pc, #36]	@ (80012a8 <init_fir_filter+0x30>)
 8001282:	480a      	ldr	r0, [pc, #40]	@ (80012ac <init_fir_filter+0x34>)
 8001284:	f007 f9b0 	bl	80085e8 <arm_float_to_q15>
    memset(firStateQ15, 0, sizeof(firStateQ15));
 8001288:	22fe      	movs	r2, #254	@ 0xfe
 800128a:	2100      	movs	r1, #0
 800128c:	4808      	ldr	r0, [pc, #32]	@ (80012b0 <init_fir_filter+0x38>)
 800128e:	f007 fd79 	bl	8008d84 <memset>
    arm_fir_init_q15(&S, NUM_TAPS, firCoeffsQ15, firStateQ15, BLOCK_SIZE);
 8001292:	2340      	movs	r3, #64	@ 0x40
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <init_fir_filter+0x38>)
 8001298:	4a03      	ldr	r2, [pc, #12]	@ (80012a8 <init_fir_filter+0x30>)
 800129a:	2140      	movs	r1, #64	@ 0x40
 800129c:	4805      	ldr	r0, [pc, #20]	@ (80012b4 <init_fir_filter+0x3c>)
 800129e:	f007 fc4f 	bl	8008b40 <arm_fir_init_q15>
}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20002b8c 	.word	0x20002b8c
 80012ac:	20000004 	.word	0x20000004
 80012b0:	20002c0c 	.word	0x20002c0c
 80012b4:	20002b80 	.word	0x20002b80

080012b8 <fir_filter>:

void fir_filter(q15_t *input, q15_t *output, uint16_t length, uint16_t block_size) {
 80012b8:	b590      	push	{r4, r7, lr}
 80012ba:	b087      	sub	sp, #28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	4611      	mov	r1, r2
 80012c4:	461a      	mov	r2, r3
 80012c6:	460b      	mov	r3, r1
 80012c8:	80fb      	strh	r3, [r7, #6]
 80012ca:	4613      	mov	r3, r2
 80012cc:	80bb      	strh	r3, [r7, #4]
    for (int i = 0; i < length; i += block_size) {
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
 80012d2:	e02c      	b.n	800132e <fir_filter+0x76>
        arm_fir_q15(&S, &input[i], &output[i], block_size);
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	68fa      	ldr	r2, [r7, #12]
 80012da:	18d1      	adds	r1, r2, r3
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	68ba      	ldr	r2, [r7, #8]
 80012e2:	441a      	add	r2, r3
 80012e4:	88bb      	ldrh	r3, [r7, #4]
 80012e6:	4816      	ldr	r0, [pc, #88]	@ (8001340 <fir_filter+0x88>)
 80012e8:	f007 fa9e 	bl	8008828 <arm_fir_q15>

        // Apply saturation to ensure no overflow
        for (int j = 0; j < block_size; j++) {
 80012ec:	2300      	movs	r3, #0
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	e015      	b.n	800131e <fir_filter+0x66>
            output[i + j] = soft_clip(output[i + j]);
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	4413      	add	r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	4413      	add	r3, r2
 80012fe:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001302:	697a      	ldr	r2, [r7, #20]
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	4413      	add	r3, r2
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	18d4      	adds	r4, r2, r3
 800130e:	4608      	mov	r0, r1
 8001310:	f000 f818 	bl	8001344 <soft_clip>
 8001314:	4603      	mov	r3, r0
 8001316:	8023      	strh	r3, [r4, #0]
        for (int j = 0; j < block_size; j++) {
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	3301      	adds	r3, #1
 800131c:	613b      	str	r3, [r7, #16]
 800131e:	88bb      	ldrh	r3, [r7, #4]
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	429a      	cmp	r2, r3
 8001324:	dbe5      	blt.n	80012f2 <fir_filter+0x3a>
    for (int i = 0; i < length; i += block_size) {
 8001326:	88bb      	ldrh	r3, [r7, #4]
 8001328:	697a      	ldr	r2, [r7, #20]
 800132a:	4413      	add	r3, r2
 800132c:	617b      	str	r3, [r7, #20]
 800132e:	88fb      	ldrh	r3, [r7, #6]
 8001330:	697a      	ldr	r2, [r7, #20]
 8001332:	429a      	cmp	r2, r3
 8001334:	dbce      	blt.n	80012d4 <fir_filter+0x1c>
        }
    }
}
 8001336:	bf00      	nop
 8001338:	bf00      	nop
 800133a:	371c      	adds	r7, #28
 800133c:	46bd      	mov	sp, r7
 800133e:	bd90      	pop	{r4, r7, pc}
 8001340:	20002b80 	.word	0x20002b80

08001344 <soft_clip>:
q15_t soft_clip(q15_t sample) {
 8001344:	b480      	push	{r7}
 8001346:	b087      	sub	sp, #28
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	80fb      	strh	r3, [r7, #6]
    if (sample > 12000) {
 800134e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001352:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 8001356:	4293      	cmp	r3, r2
 8001358:	dd13      	ble.n	8001382 <soft_clip+0x3e>
        return (q15_t)__SSAT(12000 + ((sample - 12000) / 4), 16);
 800135a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800135e:	f5a3 533b 	sub.w	r3, r3, #11968	@ 0x2ec0
 8001362:	3b20      	subs	r3, #32
 8001364:	2b00      	cmp	r3, #0
 8001366:	da00      	bge.n	800136a <soft_clip+0x26>
 8001368:	3303      	adds	r3, #3
 800136a:	109b      	asrs	r3, r3, #2
 800136c:	f503 533b 	add.w	r3, r3, #11968	@ 0x2ec0
 8001370:	3320      	adds	r3, #32
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f303 030f 	ssat	r3, #16, r3
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	b21b      	sxth	r3, r3
 8001380:	e01a      	b.n	80013b8 <soft_clip+0x74>
    } else if (sample < -12000) {
 8001382:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001386:	4a0f      	ldr	r2, [pc, #60]	@ (80013c4 <soft_clip+0x80>)
 8001388:	4293      	cmp	r3, r2
 800138a:	da13      	bge.n	80013b4 <soft_clip+0x70>
        return (q15_t)__SSAT(-12000 + ((sample + 12000) / 4), 16);
 800138c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001390:	f503 533b 	add.w	r3, r3, #11968	@ 0x2ec0
 8001394:	3320      	adds	r3, #32
 8001396:	2b00      	cmp	r3, #0
 8001398:	da00      	bge.n	800139c <soft_clip+0x58>
 800139a:	3303      	adds	r3, #3
 800139c:	109b      	asrs	r3, r3, #2
 800139e:	f5a3 533b 	sub.w	r3, r3, #11968	@ 0x2ec0
 80013a2:	3b20      	subs	r3, #32
 80013a4:	617b      	str	r3, [r7, #20]
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	f303 030f 	ssat	r3, #16, r3
 80013ac:	613b      	str	r3, [r7, #16]
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	e001      	b.n	80013b8 <soft_clip+0x74>
    }
    return sample;
 80013b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	371c      	adds	r7, #28
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	ffffd120 	.word	0xffffd120

080013c8 <init_iir_filter>:


void init_iir_filter() {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af02      	add	r7, sp, #8
	arm_float_to_q15(highPassCoeffs, highPassCoeffsQ15, 5);
 80013ce:	2205      	movs	r2, #5
 80013d0:	490d      	ldr	r1, [pc, #52]	@ (8001408 <init_iir_filter+0x40>)
 80013d2:	480e      	ldr	r0, [pc, #56]	@ (800140c <init_iir_filter+0x44>)
 80013d4:	f007 f908 	bl	80085e8 <arm_float_to_q15>
	arm_biquad_cascade_df1_init_q15(&highPassFilter, 1, highPassCoeffsQ15, highPassState, 0);
 80013d8:	2300      	movs	r3, #0
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001410 <init_iir_filter+0x48>)
 80013de:	4a0a      	ldr	r2, [pc, #40]	@ (8001408 <init_iir_filter+0x40>)
 80013e0:	2101      	movs	r1, #1
 80013e2:	480c      	ldr	r0, [pc, #48]	@ (8001414 <init_iir_filter+0x4c>)
 80013e4:	f007 fc60 	bl	8008ca8 <arm_biquad_cascade_df1_init_q15>
	arm_float_to_q15(lowPassCoeffs, lowPassCoeffsQ15, 5);
 80013e8:	2205      	movs	r2, #5
 80013ea:	490b      	ldr	r1, [pc, #44]	@ (8001418 <init_iir_filter+0x50>)
 80013ec:	480b      	ldr	r0, [pc, #44]	@ (800141c <init_iir_filter+0x54>)
 80013ee:	f007 f8fb 	bl	80085e8 <arm_float_to_q15>
	arm_biquad_cascade_df1_init_q15(&lowPassFilter, 1, lowPassCoeffsQ15, lowPassState, 0);
 80013f2:	2300      	movs	r3, #0
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001420 <init_iir_filter+0x58>)
 80013f8:	4a07      	ldr	r2, [pc, #28]	@ (8001418 <init_iir_filter+0x50>)
 80013fa:	2101      	movs	r1, #1
 80013fc:	4809      	ldr	r0, [pc, #36]	@ (8001424 <init_iir_filter+0x5c>)
 80013fe:	f007 fc53 	bl	8008ca8 <arm_biquad_cascade_df1_init_q15>
}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20002d24 	.word	0x20002d24
 800140c:	20000104 	.word	0x20000104
 8001410:	20002d0c 	.word	0x20002d0c
 8001414:	20002d14 	.word	0x20002d14
 8001418:	20002d48 	.word	0x20002d48
 800141c:	20000118 	.word	0x20000118
 8001420:	20002d30 	.word	0x20002d30
 8001424:	20002d38 	.word	0x20002d38

08001428 <iir_filter>:

void iir_filter(q15_t *input, q15_t *output, uint32_t blockSize) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
	arm_biquad_cascade_df1_q15(&highPassFilter, input, output, blockSize);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	68f9      	ldr	r1, [r7, #12]
 800143a:	4803      	ldr	r0, [pc, #12]	@ (8001448 <iir_filter+0x20>)
 800143c:	f007 fb96 	bl	8008b6c <arm_biquad_cascade_df1_q15>
}
 8001440:	bf00      	nop
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20002d14 	.word	0x20002d14

0800144c <process_equalizer>:
	}
}



void process_equalizer(q15_t *input, q15_t *output, uint32_t blockSize) {
 800144c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001450:	b09f      	sub	sp, #124	@ 0x7c
 8001452:	af02      	add	r7, sp, #8
 8001454:	6278      	str	r0, [r7, #36]	@ 0x24
 8001456:	6239      	str	r1, [r7, #32]
 8001458:	61fa      	str	r2, [r7, #28]
 800145a:	466b      	mov	r3, sp
 800145c:	607b      	str	r3, [r7, #4]
    q15_t bandOutputs[5][blockSize];   // Temporary storage for each band output
 800145e:	69fe      	ldr	r6, [r7, #28]
 8001460:	4633      	mov	r3, r6
 8001462:	3b01      	subs	r3, #1
 8001464:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001466:	2300      	movs	r3, #0
 8001468:	4634      	mov	r4, r6
 800146a:	461d      	mov	r5, r3
 800146c:	f04f 0200 	mov.w	r2, #0
 8001470:	f04f 0300 	mov.w	r3, #0
 8001474:	012b      	lsls	r3, r5, #4
 8001476:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800147a:	0122      	lsls	r2, r4, #4
 800147c:	0073      	lsls	r3, r6, #1
 800147e:	61bb      	str	r3, [r7, #24]
 8001480:	2300      	movs	r3, #0
 8001482:	613e      	str	r6, [r7, #16]
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800148a:	4622      	mov	r2, r4
 800148c:	462b      	mov	r3, r5
 800148e:	f04f 0000 	mov.w	r0, #0
 8001492:	f04f 0100 	mov.w	r1, #0
 8001496:	0099      	lsls	r1, r3, #2
 8001498:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800149c:	0090      	lsls	r0, r2, #2
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	4621      	mov	r1, r4
 80014a4:	eb12 0a01 	adds.w	sl, r2, r1
 80014a8:	4629      	mov	r1, r5
 80014aa:	eb43 0b01 	adc.w	fp, r3, r1
 80014ae:	f04f 0200 	mov.w	r2, #0
 80014b2:	f04f 0300 	mov.w	r3, #0
 80014b6:	ea4f 130b 	mov.w	r3, fp, lsl #4
 80014ba:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 80014be:	ea4f 120a 	mov.w	r2, sl, lsl #4
 80014c2:	2300      	movs	r3, #0
 80014c4:	60be      	str	r6, [r7, #8]
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80014cc:	4622      	mov	r2, r4
 80014ce:	462b      	mov	r3, r5
 80014d0:	f04f 0000 	mov.w	r0, #0
 80014d4:	f04f 0100 	mov.w	r1, #0
 80014d8:	0099      	lsls	r1, r3, #2
 80014da:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80014de:	0090      	lsls	r0, r2, #2
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	4621      	mov	r1, r4
 80014e6:	eb12 0801 	adds.w	r8, r2, r1
 80014ea:	4629      	mov	r1, r5
 80014ec:	eb43 0901 	adc.w	r9, r3, r1
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	f04f 0300 	mov.w	r3, #0
 80014f8:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80014fc:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8001500:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8001504:	4633      	mov	r3, r6
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4433      	add	r3, r6
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	3307      	adds	r3, #7
 800150e:	08db      	lsrs	r3, r3, #3
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	ebad 0d03 	sub.w	sp, sp, r3
 8001516:	ab02      	add	r3, sp, #8
 8001518:	3301      	adds	r3, #1
 800151a:	085b      	lsrs	r3, r3, #1
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	65bb      	str	r3, [r7, #88]	@ 0x58
    q15_t gainsQ15[5];
    float32_t gains[5] = {0.2, 0.8, 1.0, 1.0, 0.4};
 8001520:	4b56      	ldr	r3, [pc, #344]	@ (800167c <process_equalizer+0x230>)
 8001522:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8001526:	461d      	mov	r5, r3
 8001528:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800152a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800152c:	682b      	ldr	r3, [r5, #0]
 800152e:	6023      	str	r3, [r4, #0]

    arm_float_to_q15(gains, gainsQ15, 5);
 8001530:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8001534:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001538:	2205      	movs	r2, #5
 800153a:	4618      	mov	r0, r3
 800153c:	f007 f854 	bl	80085e8 <arm_float_to_q15>

    arm_float_to_q15(band1_coeffs, band1_coeffs_q15, 5);
 8001540:	2205      	movs	r2, #5
 8001542:	494f      	ldr	r1, [pc, #316]	@ (8001680 <process_equalizer+0x234>)
 8001544:	484f      	ldr	r0, [pc, #316]	@ (8001684 <process_equalizer+0x238>)
 8001546:	f007 f84f 	bl	80085e8 <arm_float_to_q15>
    arm_float_to_q15(band2_coeffs, band2_coeffs_q15, 5);
 800154a:	2205      	movs	r2, #5
 800154c:	494e      	ldr	r1, [pc, #312]	@ (8001688 <process_equalizer+0x23c>)
 800154e:	484f      	ldr	r0, [pc, #316]	@ (800168c <process_equalizer+0x240>)
 8001550:	f007 f84a 	bl	80085e8 <arm_float_to_q15>
    arm_float_to_q15(band3_coeffs, band3_coeffs_q15, 5);
 8001554:	2205      	movs	r2, #5
 8001556:	494e      	ldr	r1, [pc, #312]	@ (8001690 <process_equalizer+0x244>)
 8001558:	484e      	ldr	r0, [pc, #312]	@ (8001694 <process_equalizer+0x248>)
 800155a:	f007 f845 	bl	80085e8 <arm_float_to_q15>
    arm_float_to_q15(band4_coeffs, band4_coeffs_q15, 5);
 800155e:	2205      	movs	r2, #5
 8001560:	494d      	ldr	r1, [pc, #308]	@ (8001698 <process_equalizer+0x24c>)
 8001562:	484e      	ldr	r0, [pc, #312]	@ (800169c <process_equalizer+0x250>)
 8001564:	f007 f840 	bl	80085e8 <arm_float_to_q15>
    arm_float_to_q15(band5_coeffs, band5_coeffs_q15, 5);
 8001568:	2205      	movs	r2, #5
 800156a:	494d      	ldr	r1, [pc, #308]	@ (80016a0 <process_equalizer+0x254>)
 800156c:	484d      	ldr	r0, [pc, #308]	@ (80016a4 <process_equalizer+0x258>)
 800156e:	f007 f83b 	bl	80085e8 <arm_float_to_q15>

    arm_biquad_cascade_df1_init_q15(&eqBands[0], 1, band1_coeffs, band1_state, 0);
 8001572:	2300      	movs	r3, #0
 8001574:	9300      	str	r3, [sp, #0]
 8001576:	4b4c      	ldr	r3, [pc, #304]	@ (80016a8 <process_equalizer+0x25c>)
 8001578:	4a42      	ldr	r2, [pc, #264]	@ (8001684 <process_equalizer+0x238>)
 800157a:	2101      	movs	r1, #1
 800157c:	484b      	ldr	r0, [pc, #300]	@ (80016ac <process_equalizer+0x260>)
 800157e:	f007 fb93 	bl	8008ca8 <arm_biquad_cascade_df1_init_q15>
    arm_biquad_cascade_df1_init_q15(&eqBands[1], 1, band2_coeffs, band2_state, 0);
 8001582:	2300      	movs	r3, #0
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	4b4a      	ldr	r3, [pc, #296]	@ (80016b0 <process_equalizer+0x264>)
 8001588:	4a40      	ldr	r2, [pc, #256]	@ (800168c <process_equalizer+0x240>)
 800158a:	2101      	movs	r1, #1
 800158c:	4849      	ldr	r0, [pc, #292]	@ (80016b4 <process_equalizer+0x268>)
 800158e:	f007 fb8b 	bl	8008ca8 <arm_biquad_cascade_df1_init_q15>
    arm_biquad_cascade_df1_init_q15(&eqBands[2], 1, band3_coeffs, band3_state, 0);
 8001592:	2300      	movs	r3, #0
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	4b48      	ldr	r3, [pc, #288]	@ (80016b8 <process_equalizer+0x26c>)
 8001598:	4a3e      	ldr	r2, [pc, #248]	@ (8001694 <process_equalizer+0x248>)
 800159a:	2101      	movs	r1, #1
 800159c:	4847      	ldr	r0, [pc, #284]	@ (80016bc <process_equalizer+0x270>)
 800159e:	f007 fb83 	bl	8008ca8 <arm_biquad_cascade_df1_init_q15>
    arm_biquad_cascade_df1_init_q15(&eqBands[3], 1, band4_coeffs, band4_state, 0);
 80015a2:	2300      	movs	r3, #0
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	4b46      	ldr	r3, [pc, #280]	@ (80016c0 <process_equalizer+0x274>)
 80015a8:	4a3c      	ldr	r2, [pc, #240]	@ (800169c <process_equalizer+0x250>)
 80015aa:	2101      	movs	r1, #1
 80015ac:	4845      	ldr	r0, [pc, #276]	@ (80016c4 <process_equalizer+0x278>)
 80015ae:	f007 fb7b 	bl	8008ca8 <arm_biquad_cascade_df1_init_q15>
    arm_biquad_cascade_df1_init_q15(&eqBands[4], 1, band5_coeffs, band5_state, 0);
 80015b2:	2300      	movs	r3, #0
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	4b44      	ldr	r3, [pc, #272]	@ (80016c8 <process_equalizer+0x27c>)
 80015b8:	4a3a      	ldr	r2, [pc, #232]	@ (80016a4 <process_equalizer+0x258>)
 80015ba:	2101      	movs	r1, #1
 80015bc:	4843      	ldr	r0, [pc, #268]	@ (80016cc <process_equalizer+0x280>)
 80015be:	f007 fb73 	bl	8008ca8 <arm_biquad_cascade_df1_init_q15>

    // Apply each band filter to the input signal
    for (int i = 0; i < 5; i++) {
 80015c2:	2300      	movs	r3, #0
 80015c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80015c6:	e012      	b.n	80015ee <process_equalizer+0x1a2>
        arm_biquad_cascade_df1_q15(&eqBands[i], input, bandOutputs[i], blockSize);
 80015c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80015ca:	011b      	lsls	r3, r3, #4
 80015cc:	4a37      	ldr	r2, [pc, #220]	@ (80016ac <process_equalizer+0x260>)
 80015ce:	1898      	adds	r0, r3, r2
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	085b      	lsrs	r3, r3, #1
 80015d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80015d6:	fb02 f303 	mul.w	r3, r2, r3
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80015de:	441a      	add	r2, r3
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80015e4:	f007 fac2 	bl	8008b6c <arm_biquad_cascade_df1_q15>
    for (int i = 0; i < 5; i++) {
 80015e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80015ea:	3301      	adds	r3, #1
 80015ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80015ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80015f0:	2b04      	cmp	r3, #4
 80015f2:	dde9      	ble.n	80015c8 <process_equalizer+0x17c>
    }

    for (uint32_t n = 0; n < blockSize; n++) {
 80015f4:	2300      	movs	r3, #0
 80015f6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80015f8:	e034      	b.n	8001664 <process_equalizer+0x218>
           int32_t sum = 0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	667b      	str	r3, [r7, #100]	@ 0x64

           for (int b = 0; b < 5; b++) {
 80015fe:	2300      	movs	r3, #0
 8001600:	663b      	str	r3, [r7, #96]	@ 0x60
 8001602:	e01c      	b.n	800163e <process_equalizer+0x1f2>
               q15_t scaledSample;
               arm_mult_q15(&bandOutputs[b][n], &gainsQ15[b], &scaledSample, 1); // Scale band output
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	085b      	lsrs	r3, r3, #1
 8001608:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800160a:	fb03 f202 	mul.w	r2, r3, r2
 800160e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001610:	4413      	add	r3, r2
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001616:	18d0      	adds	r0, r2, r3
 8001618:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800161c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	18d1      	adds	r1, r2, r3
 8001622:	f107 022e 	add.w	r2, r7, #46	@ 0x2e
 8001626:	2301      	movs	r3, #1
 8001628:	f007 fb4e 	bl	8008cc8 <arm_mult_q15>
               sum += scaledSample; // Sum all bands
 800162c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001630:	461a      	mov	r2, r3
 8001632:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001634:	4413      	add	r3, r2
 8001636:	667b      	str	r3, [r7, #100]	@ 0x64
           for (int b = 0; b < 5; b++) {
 8001638:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800163a:	3301      	adds	r3, #1
 800163c:	663b      	str	r3, [r7, #96]	@ 0x60
 800163e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001640:	2b04      	cmp	r3, #4
 8001642:	dddf      	ble.n	8001604 <process_equalizer+0x1b8>
           }

           // Saturate to Q15 range
           output[n] = (q15_t)__SSAT(sum, 16);
 8001644:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001646:	657b      	str	r3, [r7, #84]	@ 0x54
 8001648:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800164a:	f303 030f 	ssat	r3, #16, r3
 800164e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001650:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001652:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	6a3a      	ldr	r2, [r7, #32]
 8001658:	4413      	add	r3, r2
 800165a:	b20a      	sxth	r2, r1
 800165c:	801a      	strh	r2, [r3, #0]
    for (uint32_t n = 0; n < blockSize; n++) {
 800165e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001660:	3301      	adds	r3, #1
 8001662:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001664:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	429a      	cmp	r2, r3
 800166a:	d3c6      	bcc.n	80015fa <process_equalizer+0x1ae>
 800166c:	f8d7 d004 	ldr.w	sp, [r7, #4]
       }
}
 8001670:	bf00      	nop
 8001672:	3774      	adds	r7, #116	@ 0x74
 8001674:	46bd      	mov	sp, r7
 8001676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800167a:	bf00      	nop
 800167c:	08008df4 	.word	0x08008df4
 8001680:	20002d54 	.word	0x20002d54
 8001684:	2000012c 	.word	0x2000012c
 8001688:	20002d60 	.word	0x20002d60
 800168c:	20000140 	.word	0x20000140
 8001690:	20002d6c 	.word	0x20002d6c
 8001694:	20000154 	.word	0x20000154
 8001698:	20002d78 	.word	0x20002d78
 800169c:	20000168 	.word	0x20000168
 80016a0:	20002d84 	.word	0x20002d84
 80016a4:	2000017c 	.word	0x2000017c
 80016a8:	20002d90 	.word	0x20002d90
 80016ac:	20002db8 	.word	0x20002db8
 80016b0:	20002d98 	.word	0x20002d98
 80016b4:	20002dc8 	.word	0x20002dc8
 80016b8:	20002da0 	.word	0x20002da0
 80016bc:	20002dd8 	.word	0x20002dd8
 80016c0:	20002da8 	.word	0x20002da8
 80016c4:	20002de8 	.word	0x20002de8
 80016c8:	20002db0 	.word	0x20002db0
 80016cc:	20002df8 	.word	0x20002df8

080016d0 <HAL_ADC_ConvHalfCpltCallback>:
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc1) {
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	adc_half_flag = 1;
 80016d8:	4b04      	ldr	r3, [pc, #16]	@ (80016ec <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 80016da:	2201      	movs	r2, #1
 80016dc:	701a      	strb	r2, [r3, #0]
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	20002b5c 	.word	0x20002b5c

080016f0 <HAL_ADC_ConvCpltCallback>:



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc1) {
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
	adc_done_flag = 1;
 80016f8:	4b09      	ldr	r3, [pc, #36]	@ (8001720 <HAL_ADC_ConvCpltCallback+0x30>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	701a      	strb	r2, [r3, #0]
	if (call_uart_once == 1) {
 80016fe:	4b09      	ldr	r3, [pc, #36]	@ (8001724 <HAL_ADC_ConvCpltCallback+0x34>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	b2db      	uxtb	r3, r3
 8001704:	2b01      	cmp	r3, #1
 8001706:	d102      	bne.n	800170e <HAL_ADC_ConvCpltCallback+0x1e>
		flag_uart =  1;
 8001708:	4b07      	ldr	r3, [pc, #28]	@ (8001728 <HAL_ADC_ConvCpltCallback+0x38>)
 800170a:	2201      	movs	r2, #1
 800170c:	701a      	strb	r2, [r3, #0]
	}
	call_uart_once = 0;
 800170e:	4b05      	ldr	r3, [pc, #20]	@ (8001724 <HAL_ADC_ConvCpltCallback+0x34>)
 8001710:	2200      	movs	r2, #0
 8001712:	701a      	strb	r2, [r3, #0]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	20002b5d 	.word	0x20002b5d
 8001724:	20000000 	.word	0x20000000
 8001728:	20002b60 	.word	0x20002b60

0800172c <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
    if (hi2s->Instance == SPI3) {
    }
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001744:	b672      	cpsid	i
}
 8001746:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <Error_Handler+0x8>

0800174c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001750:	4b17      	ldr	r3, [pc, #92]	@ (80017b0 <MX_SPI1_Init+0x64>)
 8001752:	4a18      	ldr	r2, [pc, #96]	@ (80017b4 <MX_SPI1_Init+0x68>)
 8001754:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001756:	4b16      	ldr	r3, [pc, #88]	@ (80017b0 <MX_SPI1_Init+0x64>)
 8001758:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800175c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800175e:	4b14      	ldr	r3, [pc, #80]	@ (80017b0 <MX_SPI1_Init+0x64>)
 8001760:	2200      	movs	r2, #0
 8001762:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001764:	4b12      	ldr	r3, [pc, #72]	@ (80017b0 <MX_SPI1_Init+0x64>)
 8001766:	2200      	movs	r2, #0
 8001768:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800176a:	4b11      	ldr	r3, [pc, #68]	@ (80017b0 <MX_SPI1_Init+0x64>)
 800176c:	2200      	movs	r2, #0
 800176e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001770:	4b0f      	ldr	r3, [pc, #60]	@ (80017b0 <MX_SPI1_Init+0x64>)
 8001772:	2200      	movs	r2, #0
 8001774:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001776:	4b0e      	ldr	r3, [pc, #56]	@ (80017b0 <MX_SPI1_Init+0x64>)
 8001778:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800177c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800177e:	4b0c      	ldr	r3, [pc, #48]	@ (80017b0 <MX_SPI1_Init+0x64>)
 8001780:	2200      	movs	r2, #0
 8001782:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001784:	4b0a      	ldr	r3, [pc, #40]	@ (80017b0 <MX_SPI1_Init+0x64>)
 8001786:	2200      	movs	r2, #0
 8001788:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800178a:	4b09      	ldr	r3, [pc, #36]	@ (80017b0 <MX_SPI1_Init+0x64>)
 800178c:	2200      	movs	r2, #0
 800178e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001790:	4b07      	ldr	r3, [pc, #28]	@ (80017b0 <MX_SPI1_Init+0x64>)
 8001792:	2200      	movs	r2, #0
 8001794:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001796:	4b06      	ldr	r3, [pc, #24]	@ (80017b0 <MX_SPI1_Init+0x64>)
 8001798:	220a      	movs	r2, #10
 800179a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800179c:	4804      	ldr	r0, [pc, #16]	@ (80017b0 <MX_SPI1_Init+0x64>)
 800179e:	f005 fa81 	bl	8006ca4 <HAL_SPI_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80017a8:	f7ff ffca 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20002e08 	.word	0x20002e08
 80017b4:	40013000 	.word	0x40013000

080017b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08a      	sub	sp, #40	@ 0x28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a19      	ldr	r2, [pc, #100]	@ (800183c <HAL_SPI_MspInit+0x84>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d12b      	bne.n	8001832 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	4b18      	ldr	r3, [pc, #96]	@ (8001840 <HAL_SPI_MspInit+0x88>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e2:	4a17      	ldr	r2, [pc, #92]	@ (8001840 <HAL_SPI_MspInit+0x88>)
 80017e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80017ea:	4b15      	ldr	r3, [pc, #84]	@ (8001840 <HAL_SPI_MspInit+0x88>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	4b11      	ldr	r3, [pc, #68]	@ (8001840 <HAL_SPI_MspInit+0x88>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	4a10      	ldr	r2, [pc, #64]	@ (8001840 <HAL_SPI_MspInit+0x88>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6313      	str	r3, [r2, #48]	@ 0x30
 8001806:	4b0e      	ldr	r3, [pc, #56]	@ (8001840 <HAL_SPI_MspInit+0x88>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001812:	23e0      	movs	r3, #224	@ 0xe0
 8001814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001816:	2302      	movs	r3, #2
 8001818:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181e:	2300      	movs	r3, #0
 8001820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001822:	2305      	movs	r3, #5
 8001824:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001826:	f107 0314 	add.w	r3, r7, #20
 800182a:	4619      	mov	r1, r3
 800182c:	4805      	ldr	r0, [pc, #20]	@ (8001844 <HAL_SPI_MspInit+0x8c>)
 800182e:	f001 facd 	bl	8002dcc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001832:	bf00      	nop
 8001834:	3728      	adds	r7, #40	@ 0x28
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40013000 	.word	0x40013000
 8001840:	40023800 	.word	0x40023800
 8001844:	40020000 	.word	0x40020000

08001848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	607b      	str	r3, [r7, #4]
 8001852:	4b10      	ldr	r3, [pc, #64]	@ (8001894 <HAL_MspInit+0x4c>)
 8001854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001856:	4a0f      	ldr	r2, [pc, #60]	@ (8001894 <HAL_MspInit+0x4c>)
 8001858:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800185c:	6453      	str	r3, [r2, #68]	@ 0x44
 800185e:	4b0d      	ldr	r3, [pc, #52]	@ (8001894 <HAL_MspInit+0x4c>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001862:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	603b      	str	r3, [r7, #0]
 800186e:	4b09      	ldr	r3, [pc, #36]	@ (8001894 <HAL_MspInit+0x4c>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001872:	4a08      	ldr	r2, [pc, #32]	@ (8001894 <HAL_MspInit+0x4c>)
 8001874:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001878:	6413      	str	r3, [r2, #64]	@ 0x40
 800187a:	4b06      	ldr	r3, [pc, #24]	@ (8001894 <HAL_MspInit+0x4c>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001882:	603b      	str	r3, [r7, #0]
 8001884:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001886:	2007      	movs	r0, #7
 8001888:	f000 feee 	bl	8002668 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800188c:	bf00      	nop
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40023800 	.word	0x40023800

08001898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800189c:	bf00      	nop
 800189e:	e7fd      	b.n	800189c <NMI_Handler+0x4>

080018a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018a4:	bf00      	nop
 80018a6:	e7fd      	b.n	80018a4 <HardFault_Handler+0x4>

080018a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018ac:	bf00      	nop
 80018ae:	e7fd      	b.n	80018ac <MemManage_Handler+0x4>

080018b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b4:	bf00      	nop
 80018b6:	e7fd      	b.n	80018b4 <BusFault_Handler+0x4>

080018b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018bc:	bf00      	nop
 80018be:	e7fd      	b.n	80018bc <UsageFault_Handler+0x4>

080018c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ee:	f000 f9cd 	bl	8001c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
	...

080018f8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80018fc:	4802      	ldr	r0, [pc, #8]	@ (8001908 <DMA1_Stream6_IRQHandler+0x10>)
 80018fe:	f000 fffb 	bl	80028f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20002ef0 	.word	0x20002ef0

0800190c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001910:	4802      	ldr	r0, [pc, #8]	@ (800191c <DMA1_Stream7_IRQHandler+0x10>)
 8001912:	f000 fff1 	bl	80028f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	200002fc 	.word	0x200002fc

08001920 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001924:	4802      	ldr	r0, [pc, #8]	@ (8001930 <DMA2_Stream0_IRQHandler+0x10>)
 8001926:	f000 ffe7 	bl	80028f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000200 	.word	0x20000200

08001934 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001938:	4802      	ldr	r0, [pc, #8]	@ (8001944 <OTG_FS_IRQHandler+0x10>)
 800193a:	f001 fbfc 	bl	8003136 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20002f54 	.word	0x20002f54

08001948 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800194c:	4b06      	ldr	r3, [pc, #24]	@ (8001968 <SystemInit+0x20>)
 800194e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001952:	4a05      	ldr	r2, [pc, #20]	@ (8001968 <SystemInit+0x20>)
 8001954:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001958:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001972:	f107 0308 	add.w	r3, r7, #8
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	605a      	str	r2, [r3, #4]
 800197c:	609a      	str	r2, [r3, #8]
 800197e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001980:	463b      	mov	r3, r7
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001988:	4b1d      	ldr	r3, [pc, #116]	@ (8001a00 <MX_TIM2_Init+0x94>)
 800198a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800198e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001990:	4b1b      	ldr	r3, [pc, #108]	@ (8001a00 <MX_TIM2_Init+0x94>)
 8001992:	2253      	movs	r2, #83	@ 0x53
 8001994:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001996:	4b1a      	ldr	r3, [pc, #104]	@ (8001a00 <MX_TIM2_Init+0x94>)
 8001998:	2200      	movs	r2, #0
 800199a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 22-1;
 800199c:	4b18      	ldr	r3, [pc, #96]	@ (8001a00 <MX_TIM2_Init+0x94>)
 800199e:	2215      	movs	r2, #21
 80019a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019a2:	4b17      	ldr	r3, [pc, #92]	@ (8001a00 <MX_TIM2_Init+0x94>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a8:	4b15      	ldr	r3, [pc, #84]	@ (8001a00 <MX_TIM2_Init+0x94>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019ae:	4814      	ldr	r0, [pc, #80]	@ (8001a00 <MX_TIM2_Init+0x94>)
 80019b0:	f005 fa01 	bl	8006db6 <HAL_TIM_Base_Init>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80019ba:	f7ff fec1 	bl	8001740 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019c4:	f107 0308 	add.w	r3, r7, #8
 80019c8:	4619      	mov	r1, r3
 80019ca:	480d      	ldr	r0, [pc, #52]	@ (8001a00 <MX_TIM2_Init+0x94>)
 80019cc:	f005 faaa 	bl	8006f24 <HAL_TIM_ConfigClockSource>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80019d6:	f7ff feb3 	bl	8001740 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019da:	2320      	movs	r3, #32
 80019dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019de:	2300      	movs	r3, #0
 80019e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019e2:	463b      	mov	r3, r7
 80019e4:	4619      	mov	r1, r3
 80019e6:	4806      	ldr	r0, [pc, #24]	@ (8001a00 <MX_TIM2_Init+0x94>)
 80019e8:	f005 fcaa 	bl	8007340 <HAL_TIMEx_MasterConfigSynchronization>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80019f2:	f7ff fea5 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019f6:	bf00      	nop
 80019f8:	3718      	adds	r7, #24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20002e60 	.word	0x20002e60

08001a04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a14:	d10d      	bne.n	8001a32 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	4b09      	ldr	r3, [pc, #36]	@ (8001a40 <HAL_TIM_Base_MspInit+0x3c>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1e:	4a08      	ldr	r2, [pc, #32]	@ (8001a40 <HAL_TIM_Base_MspInit+0x3c>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a26:	4b06      	ldr	r3, [pc, #24]	@ (8001a40 <HAL_TIM_Base_MspInit+0x3c>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001a32:	bf00      	nop
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	40023800 	.word	0x40023800

08001a44 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a48:	4b11      	ldr	r3, [pc, #68]	@ (8001a90 <MX_USART2_UART_Init+0x4c>)
 8001a4a:	4a12      	ldr	r2, [pc, #72]	@ (8001a94 <MX_USART2_UART_Init+0x50>)
 8001a4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8001a4e:	4b10      	ldr	r3, [pc, #64]	@ (8001a90 <MX_USART2_UART_Init+0x4c>)
 8001a50:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8001a54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a56:	4b0e      	ldr	r3, [pc, #56]	@ (8001a90 <MX_USART2_UART_Init+0x4c>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a90 <MX_USART2_UART_Init+0x4c>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a62:	4b0b      	ldr	r3, [pc, #44]	@ (8001a90 <MX_USART2_UART_Init+0x4c>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8001a68:	4b09      	ldr	r3, [pc, #36]	@ (8001a90 <MX_USART2_UART_Init+0x4c>)
 8001a6a:	2208      	movs	r2, #8
 8001a6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a6e:	4b08      	ldr	r3, [pc, #32]	@ (8001a90 <MX_USART2_UART_Init+0x4c>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a74:	4b06      	ldr	r3, [pc, #24]	@ (8001a90 <MX_USART2_UART_Init+0x4c>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a7a:	4805      	ldr	r0, [pc, #20]	@ (8001a90 <MX_USART2_UART_Init+0x4c>)
 8001a7c:	f005 fcdc 	bl	8007438 <HAL_UART_Init>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a86:	f7ff fe5b 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20002ea8 	.word	0x20002ea8
 8001a94:	40004400 	.word	0x40004400

08001a98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08a      	sub	sp, #40	@ 0x28
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa0:	f107 0314 	add.w	r3, r7, #20
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a32      	ldr	r2, [pc, #200]	@ (8001b80 <HAL_UART_MspInit+0xe8>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d15d      	bne.n	8001b76 <HAL_UART_MspInit+0xde>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	613b      	str	r3, [r7, #16]
 8001abe:	4b31      	ldr	r3, [pc, #196]	@ (8001b84 <HAL_UART_MspInit+0xec>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac2:	4a30      	ldr	r2, [pc, #192]	@ (8001b84 <HAL_UART_MspInit+0xec>)
 8001ac4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ac8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aca:	4b2e      	ldr	r3, [pc, #184]	@ (8001b84 <HAL_UART_MspInit+0xec>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	4b2a      	ldr	r3, [pc, #168]	@ (8001b84 <HAL_UART_MspInit+0xec>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ade:	4a29      	ldr	r2, [pc, #164]	@ (8001b84 <HAL_UART_MspInit+0xec>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ae6:	4b27      	ldr	r3, [pc, #156]	@ (8001b84 <HAL_UART_MspInit+0xec>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001af2:	230c      	movs	r3, #12
 8001af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af6:	2302      	movs	r3, #2
 8001af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afe:	2303      	movs	r3, #3
 8001b00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b02:	2307      	movs	r3, #7
 8001b04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b06:	f107 0314 	add.w	r3, r7, #20
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	481e      	ldr	r0, [pc, #120]	@ (8001b88 <HAL_UART_MspInit+0xf0>)
 8001b0e:	f001 f95d 	bl	8002dcc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001b12:	4b1e      	ldr	r3, [pc, #120]	@ (8001b8c <HAL_UART_MspInit+0xf4>)
 8001b14:	4a1e      	ldr	r2, [pc, #120]	@ (8001b90 <HAL_UART_MspInit+0xf8>)
 8001b16:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001b18:	4b1c      	ldr	r3, [pc, #112]	@ (8001b8c <HAL_UART_MspInit+0xf4>)
 8001b1a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001b1e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b20:	4b1a      	ldr	r3, [pc, #104]	@ (8001b8c <HAL_UART_MspInit+0xf4>)
 8001b22:	2240      	movs	r2, #64	@ 0x40
 8001b24:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b26:	4b19      	ldr	r3, [pc, #100]	@ (8001b8c <HAL_UART_MspInit+0xf4>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b2c:	4b17      	ldr	r3, [pc, #92]	@ (8001b8c <HAL_UART_MspInit+0xf4>)
 8001b2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b32:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b34:	4b15      	ldr	r3, [pc, #84]	@ (8001b8c <HAL_UART_MspInit+0xf4>)
 8001b36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001b3a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b3c:	4b13      	ldr	r3, [pc, #76]	@ (8001b8c <HAL_UART_MspInit+0xf4>)
 8001b3e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b42:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8001b44:	4b11      	ldr	r3, [pc, #68]	@ (8001b8c <HAL_UART_MspInit+0xf4>)
 8001b46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b4a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b8c <HAL_UART_MspInit+0xf4>)
 8001b4e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b52:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b54:	4b0d      	ldr	r3, [pc, #52]	@ (8001b8c <HAL_UART_MspInit+0xf4>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001b5a:	480c      	ldr	r0, [pc, #48]	@ (8001b8c <HAL_UART_MspInit+0xf4>)
 8001b5c:	f000 fdc6 	bl	80026ec <HAL_DMA_Init>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 8001b66:	f7ff fdeb 	bl	8001740 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a07      	ldr	r2, [pc, #28]	@ (8001b8c <HAL_UART_MspInit+0xf4>)
 8001b6e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001b70:	4a06      	ldr	r2, [pc, #24]	@ (8001b8c <HAL_UART_MspInit+0xf4>)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b76:	bf00      	nop
 8001b78:	3728      	adds	r7, #40	@ 0x28
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40004400 	.word	0x40004400
 8001b84:	40023800 	.word	0x40023800
 8001b88:	40020000 	.word	0x40020000
 8001b8c:	20002ef0 	.word	0x20002ef0
 8001b90:	400260a0 	.word	0x400260a0

08001b94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bcc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b98:	f7ff fed6 	bl	8001948 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b9c:	480c      	ldr	r0, [pc, #48]	@ (8001bd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b9e:	490d      	ldr	r1, [pc, #52]	@ (8001bd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ba0:	4a0d      	ldr	r2, [pc, #52]	@ (8001bd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba4:	e002      	b.n	8001bac <LoopCopyDataInit>

08001ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001baa:	3304      	adds	r3, #4

08001bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb0:	d3f9      	bcc.n	8001ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bb4:	4c0a      	ldr	r4, [pc, #40]	@ (8001be0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb8:	e001      	b.n	8001bbe <LoopFillZerobss>

08001bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bbc:	3204      	adds	r2, #4

08001bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc0:	d3fb      	bcc.n	8001bba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bc2:	f007 f8e7 	bl	8008d94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bc6:	f7ff f8d1 	bl	8000d6c <main>
  bx  lr    
 8001bca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001bcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd4:	2000019c 	.word	0x2000019c
  ldr r2, =_sidata
 8001bd8:	0801ac90 	.word	0x0801ac90
  ldr r2, =_sbss
 8001bdc:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 8001be0:	20003334 	.word	0x20003334

08001be4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001be4:	e7fe      	b.n	8001be4 <ADC_IRQHandler>
	...

08001be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bec:	4b0e      	ldr	r3, [pc, #56]	@ (8001c28 <HAL_Init+0x40>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0d      	ldr	r2, [pc, #52]	@ (8001c28 <HAL_Init+0x40>)
 8001bf2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bf6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c28 <HAL_Init+0x40>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a0a      	ldr	r2, [pc, #40]	@ (8001c28 <HAL_Init+0x40>)
 8001bfe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c04:	4b08      	ldr	r3, [pc, #32]	@ (8001c28 <HAL_Init+0x40>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a07      	ldr	r2, [pc, #28]	@ (8001c28 <HAL_Init+0x40>)
 8001c0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c10:	2003      	movs	r0, #3
 8001c12:	f000 fd29 	bl	8002668 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c16:	2000      	movs	r0, #0
 8001c18:	f000 f808 	bl	8001c2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c1c:	f7ff fe14 	bl	8001848 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40023c00 	.word	0x40023c00

08001c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c34:	4b12      	ldr	r3, [pc, #72]	@ (8001c80 <HAL_InitTick+0x54>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b12      	ldr	r3, [pc, #72]	@ (8001c84 <HAL_InitTick+0x58>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 fd41 	bl	80026d2 <HAL_SYSTICK_Config>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e00e      	b.n	8001c78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b0f      	cmp	r3, #15
 8001c5e:	d80a      	bhi.n	8001c76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c60:	2200      	movs	r2, #0
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c68:	f000 fd09 	bl	800267e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c6c:	4a06      	ldr	r2, [pc, #24]	@ (8001c88 <HAL_InitTick+0x5c>)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
 8001c74:	e000      	b.n	8001c78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	20000190 	.word	0x20000190
 8001c84:	20000198 	.word	0x20000198
 8001c88:	20000194 	.word	0x20000194

08001c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c90:	4b06      	ldr	r3, [pc, #24]	@ (8001cac <HAL_IncTick+0x20>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	461a      	mov	r2, r3
 8001c96:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <HAL_IncTick+0x24>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	4a04      	ldr	r2, [pc, #16]	@ (8001cb0 <HAL_IncTick+0x24>)
 8001c9e:	6013      	str	r3, [r2, #0]
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	20000198 	.word	0x20000198
 8001cb0:	20002f50 	.word	0x20002f50

08001cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb8:	4b03      	ldr	r3, [pc, #12]	@ (8001cc8 <HAL_GetTick+0x14>)
 8001cba:	681b      	ldr	r3, [r3, #0]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	20002f50 	.word	0x20002f50

08001ccc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e033      	b.n	8001d4a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d109      	bne.n	8001cfe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7fe fc36 	bl	800055c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d02:	f003 0310 	and.w	r3, r3, #16
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d118      	bne.n	8001d3c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001d12:	f023 0302 	bic.w	r3, r3, #2
 8001d16:	f043 0202 	orr.w	r2, r3, #2
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 fa54 	bl	80021cc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2e:	f023 0303 	bic.w	r3, r3, #3
 8001d32:	f043 0201 	orr.w	r2, r3, #1
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d3a:	e001      	b.n	8001d40 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
	...

08001d54 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001d60:	2300      	movs	r3, #0
 8001d62:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d101      	bne.n	8001d72 <HAL_ADC_Start_DMA+0x1e>
 8001d6e:	2302      	movs	r3, #2
 8001d70:	e0e9      	b.n	8001f46 <HAL_ADC_Start_DMA+0x1f2>
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2201      	movs	r2, #1
 8001d76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d018      	beq.n	8001dba <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689a      	ldr	r2, [r3, #8]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f042 0201 	orr.w	r2, r2, #1
 8001d96:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d98:	4b6d      	ldr	r3, [pc, #436]	@ (8001f50 <HAL_ADC_Start_DMA+0x1fc>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a6d      	ldr	r2, [pc, #436]	@ (8001f54 <HAL_ADC_Start_DMA+0x200>)
 8001d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001da2:	0c9a      	lsrs	r2, r3, #18
 8001da4:	4613      	mov	r3, r2
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	4413      	add	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001dac:	e002      	b.n	8001db4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	3b01      	subs	r3, #1
 8001db2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f9      	bne.n	8001dae <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001dc8:	d107      	bne.n	8001dda <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001dd8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	f040 80a1 	bne.w	8001f2c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dee:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001df2:	f023 0301 	bic.w	r3, r3, #1
 8001df6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d007      	beq.n	8001e1c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e10:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e14:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e28:	d106      	bne.n	8001e38 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e2e:	f023 0206 	bic.w	r2, r3, #6
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	645a      	str	r2, [r3, #68]	@ 0x44
 8001e36:	e002      	b.n	8001e3e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e46:	4b44      	ldr	r3, [pc, #272]	@ (8001f58 <HAL_ADC_Start_DMA+0x204>)
 8001e48:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e4e:	4a43      	ldr	r2, [pc, #268]	@ (8001f5c <HAL_ADC_Start_DMA+0x208>)
 8001e50:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e56:	4a42      	ldr	r2, [pc, #264]	@ (8001f60 <HAL_ADC_Start_DMA+0x20c>)
 8001e58:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e5e:	4a41      	ldr	r2, [pc, #260]	@ (8001f64 <HAL_ADC_Start_DMA+0x210>)
 8001e60:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001e6a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	685a      	ldr	r2, [r3, #4]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001e7a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e8a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	334c      	adds	r3, #76	@ 0x4c
 8001e96:	4619      	mov	r1, r3
 8001e98:	68ba      	ldr	r2, [r7, #8]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f000 fcd4 	bl	8002848 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 031f 	and.w	r3, r3, #31
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d12a      	bne.n	8001f02 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a2d      	ldr	r2, [pc, #180]	@ (8001f68 <HAL_ADC_Start_DMA+0x214>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d015      	beq.n	8001ee2 <HAL_ADC_Start_DMA+0x18e>
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a2c      	ldr	r2, [pc, #176]	@ (8001f6c <HAL_ADC_Start_DMA+0x218>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d105      	bne.n	8001ecc <HAL_ADC_Start_DMA+0x178>
 8001ec0:	4b25      	ldr	r3, [pc, #148]	@ (8001f58 <HAL_ADC_Start_DMA+0x204>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f003 031f 	and.w	r3, r3, #31
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d00a      	beq.n	8001ee2 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a27      	ldr	r2, [pc, #156]	@ (8001f70 <HAL_ADC_Start_DMA+0x21c>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d136      	bne.n	8001f44 <HAL_ADC_Start_DMA+0x1f0>
 8001ed6:	4b20      	ldr	r3, [pc, #128]	@ (8001f58 <HAL_ADC_Start_DMA+0x204>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 0310 	and.w	r3, r3, #16
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d130      	bne.n	8001f44 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d129      	bne.n	8001f44 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	e020      	b.n	8001f44 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a18      	ldr	r2, [pc, #96]	@ (8001f68 <HAL_ADC_Start_DMA+0x214>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d11b      	bne.n	8001f44 <HAL_ADC_Start_DMA+0x1f0>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d114      	bne.n	8001f44 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001f28:	609a      	str	r2, [r3, #8]
 8001f2a:	e00b      	b.n	8001f44 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f30:	f043 0210 	orr.w	r2, r3, #16
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f3c:	f043 0201 	orr.w	r2, r3, #1
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000190 	.word	0x20000190
 8001f54:	431bde83 	.word	0x431bde83
 8001f58:	40012300 	.word	0x40012300
 8001f5c:	080023c5 	.word	0x080023c5
 8001f60:	0800247f 	.word	0x0800247f
 8001f64:	0800249b 	.word	0x0800249b
 8001f68:	40012000 	.word	0x40012000
 8001f6c:	40012100 	.word	0x40012100
 8001f70:	40012200 	.word	0x40012200

08001f74 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d101      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x1c>
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	e105      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x228>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2b09      	cmp	r3, #9
 8001fb2:	d925      	bls.n	8002000 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68d9      	ldr	r1, [r3, #12]
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3b1e      	subs	r3, #30
 8001fca:	2207      	movs	r2, #7
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43da      	mvns	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	400a      	ands	r2, r1
 8001fd8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68d9      	ldr	r1, [r3, #12]
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	689a      	ldr	r2, [r3, #8]
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	4618      	mov	r0, r3
 8001fec:	4603      	mov	r3, r0
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	4403      	add	r3, r0
 8001ff2:	3b1e      	subs	r3, #30
 8001ff4:	409a      	lsls	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	60da      	str	r2, [r3, #12]
 8001ffe:	e022      	b.n	8002046 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6919      	ldr	r1, [r3, #16]
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	b29b      	uxth	r3, r3
 800200c:	461a      	mov	r2, r3
 800200e:	4613      	mov	r3, r2
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	4413      	add	r3, r2
 8002014:	2207      	movs	r2, #7
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43da      	mvns	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	400a      	ands	r2, r1
 8002022:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6919      	ldr	r1, [r3, #16]
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	689a      	ldr	r2, [r3, #8]
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	b29b      	uxth	r3, r3
 8002034:	4618      	mov	r0, r3
 8002036:	4603      	mov	r3, r0
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	4403      	add	r3, r0
 800203c:	409a      	lsls	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	430a      	orrs	r2, r1
 8002044:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b06      	cmp	r3, #6
 800204c:	d824      	bhi.n	8002098 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	4613      	mov	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4413      	add	r3, r2
 800205e:	3b05      	subs	r3, #5
 8002060:	221f      	movs	r2, #31
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43da      	mvns	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	400a      	ands	r2, r1
 800206e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	b29b      	uxth	r3, r3
 800207c:	4618      	mov	r0, r3
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	4613      	mov	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4413      	add	r3, r2
 8002088:	3b05      	subs	r3, #5
 800208a:	fa00 f203 	lsl.w	r2, r0, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	430a      	orrs	r2, r1
 8002094:	635a      	str	r2, [r3, #52]	@ 0x34
 8002096:	e04c      	b.n	8002132 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	2b0c      	cmp	r3, #12
 800209e:	d824      	bhi.n	80020ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	4613      	mov	r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	4413      	add	r3, r2
 80020b0:	3b23      	subs	r3, #35	@ 0x23
 80020b2:	221f      	movs	r2, #31
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	43da      	mvns	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	400a      	ands	r2, r1
 80020c0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	4618      	mov	r0, r3
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	4613      	mov	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	4413      	add	r3, r2
 80020da:	3b23      	subs	r3, #35	@ 0x23
 80020dc:	fa00 f203 	lsl.w	r2, r0, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80020e8:	e023      	b.n	8002132 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	4613      	mov	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4413      	add	r3, r2
 80020fa:	3b41      	subs	r3, #65	@ 0x41
 80020fc:	221f      	movs	r2, #31
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43da      	mvns	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	400a      	ands	r2, r1
 800210a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	b29b      	uxth	r3, r3
 8002118:	4618      	mov	r0, r3
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685a      	ldr	r2, [r3, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	3b41      	subs	r3, #65	@ 0x41
 8002126:	fa00 f203 	lsl.w	r2, r0, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	430a      	orrs	r2, r1
 8002130:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002132:	4b22      	ldr	r3, [pc, #136]	@ (80021bc <HAL_ADC_ConfigChannel+0x234>)
 8002134:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a21      	ldr	r2, [pc, #132]	@ (80021c0 <HAL_ADC_ConfigChannel+0x238>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d109      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x1cc>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2b12      	cmp	r3, #18
 8002146:	d105      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a19      	ldr	r2, [pc, #100]	@ (80021c0 <HAL_ADC_ConfigChannel+0x238>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d123      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x21e>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2b10      	cmp	r3, #16
 8002164:	d003      	beq.n	800216e <HAL_ADC_ConfigChannel+0x1e6>
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2b11      	cmp	r3, #17
 800216c:	d11b      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2b10      	cmp	r3, #16
 8002180:	d111      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002182:	4b10      	ldr	r3, [pc, #64]	@ (80021c4 <HAL_ADC_ConfigChannel+0x23c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a10      	ldr	r2, [pc, #64]	@ (80021c8 <HAL_ADC_ConfigChannel+0x240>)
 8002188:	fba2 2303 	umull	r2, r3, r2, r3
 800218c:	0c9a      	lsrs	r2, r3, #18
 800218e:	4613      	mov	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002198:	e002      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	3b01      	subs	r3, #1
 800219e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1f9      	bne.n	800219a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	40012300 	.word	0x40012300
 80021c0:	40012000 	.word	0x40012000
 80021c4:	20000190 	.word	0x20000190
 80021c8:	431bde83 	.word	0x431bde83

080021cc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021d4:	4b79      	ldr	r3, [pc, #484]	@ (80023bc <ADC_Init+0x1f0>)
 80021d6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	431a      	orrs	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002200:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6859      	ldr	r1, [r3, #4]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	021a      	lsls	r2, r3, #8
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	430a      	orrs	r2, r1
 8002214:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002224:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6859      	ldr	r1, [r3, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689a      	ldr	r2, [r3, #8]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002246:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6899      	ldr	r1, [r3, #8]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	68da      	ldr	r2, [r3, #12]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	430a      	orrs	r2, r1
 8002258:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800225e:	4a58      	ldr	r2, [pc, #352]	@ (80023c0 <ADC_Init+0x1f4>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d022      	beq.n	80022aa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002272:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6899      	ldr	r1, [r3, #8]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002294:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6899      	ldr	r1, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	e00f      	b.n	80022ca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80022b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80022c8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 0202 	bic.w	r2, r2, #2
 80022d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6899      	ldr	r1, [r3, #8]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	7e1b      	ldrb	r3, [r3, #24]
 80022e4:	005a      	lsls	r2, r3, #1
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d01b      	beq.n	8002330 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	685a      	ldr	r2, [r3, #4]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002306:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	685a      	ldr	r2, [r3, #4]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002316:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6859      	ldr	r1, [r3, #4]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002322:	3b01      	subs	r3, #1
 8002324:	035a      	lsls	r2, r3, #13
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	430a      	orrs	r2, r1
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	e007      	b.n	8002340 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800233e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800234e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	3b01      	subs	r3, #1
 800235c:	051a      	lsls	r2, r3, #20
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	430a      	orrs	r2, r1
 8002364:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002374:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6899      	ldr	r1, [r3, #8]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002382:	025a      	lsls	r2, r3, #9
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	430a      	orrs	r2, r1
 800238a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	689a      	ldr	r2, [r3, #8]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800239a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6899      	ldr	r1, [r3, #8]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	029a      	lsls	r2, r3, #10
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	430a      	orrs	r2, r1
 80023ae:	609a      	str	r2, [r3, #8]
}
 80023b0:	bf00      	nop
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	40012300 	.word	0x40012300
 80023c0:	0f000001 	.word	0x0f000001

080023c4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023d0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d13c      	bne.n	8002458 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d12b      	bne.n	8002450 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d127      	bne.n	8002450 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002406:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800240a:	2b00      	cmp	r3, #0
 800240c:	d006      	beq.n	800241c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002418:	2b00      	cmp	r3, #0
 800241a:	d119      	bne.n	8002450 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	685a      	ldr	r2, [r3, #4]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 0220 	bic.w	r2, r2, #32
 800242a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002430:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d105      	bne.n	8002450 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002448:	f043 0201 	orr.w	r2, r3, #1
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f7ff f94d 	bl	80016f0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002456:	e00e      	b.n	8002476 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245c:	f003 0310 	and.w	r3, r3, #16
 8002460:	2b00      	cmp	r3, #0
 8002462:	d003      	beq.n	800246c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f7ff fd85 	bl	8001f74 <HAL_ADC_ErrorCallback>
}
 800246a:	e004      	b.n	8002476 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	4798      	blx	r3
}
 8002476:	bf00      	nop
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b084      	sub	sp, #16
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800248a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f7ff f91f 	bl	80016d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002492:	bf00      	nop
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b084      	sub	sp, #16
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024a6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2240      	movs	r2, #64	@ 0x40
 80024ac:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024b2:	f043 0204 	orr.w	r2, r3, #4
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f7ff fd5a 	bl	8001f74 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024c0:	bf00      	nop
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024d8:	4b0c      	ldr	r3, [pc, #48]	@ (800250c <__NVIC_SetPriorityGrouping+0x44>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024e4:	4013      	ands	r3, r2
 80024e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024fa:	4a04      	ldr	r2, [pc, #16]	@ (800250c <__NVIC_SetPriorityGrouping+0x44>)
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	60d3      	str	r3, [r2, #12]
}
 8002500:	bf00      	nop
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	e000ed00 	.word	0xe000ed00

08002510 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002514:	4b04      	ldr	r3, [pc, #16]	@ (8002528 <__NVIC_GetPriorityGrouping+0x18>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	0a1b      	lsrs	r3, r3, #8
 800251a:	f003 0307 	and.w	r3, r3, #7
}
 800251e:	4618      	mov	r0, r3
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	e000ed00 	.word	0xe000ed00

0800252c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253a:	2b00      	cmp	r3, #0
 800253c:	db0b      	blt.n	8002556 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	f003 021f 	and.w	r2, r3, #31
 8002544:	4907      	ldr	r1, [pc, #28]	@ (8002564 <__NVIC_EnableIRQ+0x38>)
 8002546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254a:	095b      	lsrs	r3, r3, #5
 800254c:	2001      	movs	r0, #1
 800254e:	fa00 f202 	lsl.w	r2, r0, r2
 8002552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	e000e100 	.word	0xe000e100

08002568 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	6039      	str	r1, [r7, #0]
 8002572:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002578:	2b00      	cmp	r3, #0
 800257a:	db0a      	blt.n	8002592 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	b2da      	uxtb	r2, r3
 8002580:	490c      	ldr	r1, [pc, #48]	@ (80025b4 <__NVIC_SetPriority+0x4c>)
 8002582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002586:	0112      	lsls	r2, r2, #4
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	440b      	add	r3, r1
 800258c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002590:	e00a      	b.n	80025a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	b2da      	uxtb	r2, r3
 8002596:	4908      	ldr	r1, [pc, #32]	@ (80025b8 <__NVIC_SetPriority+0x50>)
 8002598:	79fb      	ldrb	r3, [r7, #7]
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	3b04      	subs	r3, #4
 80025a0:	0112      	lsls	r2, r2, #4
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	440b      	add	r3, r1
 80025a6:	761a      	strb	r2, [r3, #24]
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	e000e100 	.word	0xe000e100
 80025b8:	e000ed00 	.word	0xe000ed00

080025bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025bc:	b480      	push	{r7}
 80025be:	b089      	sub	sp, #36	@ 0x24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	f1c3 0307 	rsb	r3, r3, #7
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	bf28      	it	cs
 80025da:	2304      	movcs	r3, #4
 80025dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	3304      	adds	r3, #4
 80025e2:	2b06      	cmp	r3, #6
 80025e4:	d902      	bls.n	80025ec <NVIC_EncodePriority+0x30>
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	3b03      	subs	r3, #3
 80025ea:	e000      	b.n	80025ee <NVIC_EncodePriority+0x32>
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43da      	mvns	r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	401a      	ands	r2, r3
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002604:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	fa01 f303 	lsl.w	r3, r1, r3
 800260e:	43d9      	mvns	r1, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002614:	4313      	orrs	r3, r2
         );
}
 8002616:	4618      	mov	r0, r3
 8002618:	3724      	adds	r7, #36	@ 0x24
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
	...

08002624 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3b01      	subs	r3, #1
 8002630:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002634:	d301      	bcc.n	800263a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002636:	2301      	movs	r3, #1
 8002638:	e00f      	b.n	800265a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800263a:	4a0a      	ldr	r2, [pc, #40]	@ (8002664 <SysTick_Config+0x40>)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3b01      	subs	r3, #1
 8002640:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002642:	210f      	movs	r1, #15
 8002644:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002648:	f7ff ff8e 	bl	8002568 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800264c:	4b05      	ldr	r3, [pc, #20]	@ (8002664 <SysTick_Config+0x40>)
 800264e:	2200      	movs	r2, #0
 8002650:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002652:	4b04      	ldr	r3, [pc, #16]	@ (8002664 <SysTick_Config+0x40>)
 8002654:	2207      	movs	r2, #7
 8002656:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	e000e010 	.word	0xe000e010

08002668 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f7ff ff29 	bl	80024c8 <__NVIC_SetPriorityGrouping>
}
 8002676:	bf00      	nop
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800267e:	b580      	push	{r7, lr}
 8002680:	b086      	sub	sp, #24
 8002682:	af00      	add	r7, sp, #0
 8002684:	4603      	mov	r3, r0
 8002686:	60b9      	str	r1, [r7, #8]
 8002688:	607a      	str	r2, [r7, #4]
 800268a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002690:	f7ff ff3e 	bl	8002510 <__NVIC_GetPriorityGrouping>
 8002694:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	68b9      	ldr	r1, [r7, #8]
 800269a:	6978      	ldr	r0, [r7, #20]
 800269c:	f7ff ff8e 	bl	80025bc <NVIC_EncodePriority>
 80026a0:	4602      	mov	r2, r0
 80026a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026a6:	4611      	mov	r1, r2
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff ff5d 	bl	8002568 <__NVIC_SetPriority>
}
 80026ae:	bf00      	nop
 80026b0:	3718      	adds	r7, #24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b082      	sub	sp, #8
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	4603      	mov	r3, r0
 80026be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff ff31 	bl	800252c <__NVIC_EnableIRQ>
}
 80026ca:	bf00      	nop
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b082      	sub	sp, #8
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7ff ffa2 	bl	8002624 <SysTick_Config>
 80026e0:	4603      	mov	r3, r0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026f8:	f7ff fadc 	bl	8001cb4 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e099      	b.n	800283c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2202      	movs	r2, #2
 800270c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0201 	bic.w	r2, r2, #1
 8002726:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002728:	e00f      	b.n	800274a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800272a:	f7ff fac3 	bl	8001cb4 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b05      	cmp	r3, #5
 8002736:	d908      	bls.n	800274a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2220      	movs	r2, #32
 800273c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2203      	movs	r2, #3
 8002742:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e078      	b.n	800283c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1e8      	bne.n	800272a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	4b38      	ldr	r3, [pc, #224]	@ (8002844 <HAL_DMA_Init+0x158>)
 8002764:	4013      	ands	r3, r2
 8002766:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002776:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002782:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800278e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	4313      	orrs	r3, r2
 800279a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	d107      	bne.n	80027b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ac:	4313      	orrs	r3, r2
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	f023 0307 	bic.w	r3, r3, #7
 80027ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d117      	bne.n	800280e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00e      	beq.n	800280e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 fa6f 	bl	8002cd4 <DMA_CheckFifoParam>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d008      	beq.n	800280e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2240      	movs	r2, #64	@ 0x40
 8002800:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800280a:	2301      	movs	r3, #1
 800280c:	e016      	b.n	800283c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 fa26 	bl	8002c68 <DMA_CalcBaseAndBitshift>
 800281c:	4603      	mov	r3, r0
 800281e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002824:	223f      	movs	r2, #63	@ 0x3f
 8002826:	409a      	lsls	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3718      	adds	r7, #24
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	f010803f 	.word	0xf010803f

08002848 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
 8002854:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002856:	2300      	movs	r3, #0
 8002858:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800285e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002866:	2b01      	cmp	r3, #1
 8002868:	d101      	bne.n	800286e <HAL_DMA_Start_IT+0x26>
 800286a:	2302      	movs	r3, #2
 800286c:	e040      	b.n	80028f0 <HAL_DMA_Start_IT+0xa8>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b01      	cmp	r3, #1
 8002880:	d12f      	bne.n	80028e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2202      	movs	r2, #2
 8002886:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	68b9      	ldr	r1, [r7, #8]
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 f9b8 	bl	8002c0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a0:	223f      	movs	r2, #63	@ 0x3f
 80028a2:	409a      	lsls	r2, r3
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0216 	orr.w	r2, r2, #22
 80028b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d007      	beq.n	80028d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 0208 	orr.w	r2, r2, #8
 80028ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f042 0201 	orr.w	r2, r2, #1
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	e005      	b.n	80028ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80028ea:	2302      	movs	r3, #2
 80028ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80028ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002900:	2300      	movs	r3, #0
 8002902:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002904:	4b8e      	ldr	r3, [pc, #568]	@ (8002b40 <HAL_DMA_IRQHandler+0x248>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a8e      	ldr	r2, [pc, #568]	@ (8002b44 <HAL_DMA_IRQHandler+0x24c>)
 800290a:	fba2 2303 	umull	r2, r3, r2, r3
 800290e:	0a9b      	lsrs	r3, r3, #10
 8002910:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002916:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002922:	2208      	movs	r2, #8
 8002924:	409a      	lsls	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	4013      	ands	r3, r2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d01a      	beq.n	8002964 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	2b00      	cmp	r3, #0
 800293a:	d013      	beq.n	8002964 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f022 0204 	bic.w	r2, r2, #4
 800294a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002950:	2208      	movs	r2, #8
 8002952:	409a      	lsls	r2, r3
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800295c:	f043 0201 	orr.w	r2, r3, #1
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002968:	2201      	movs	r2, #1
 800296a:	409a      	lsls	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	4013      	ands	r3, r2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d012      	beq.n	800299a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00b      	beq.n	800299a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002986:	2201      	movs	r2, #1
 8002988:	409a      	lsls	r2, r3
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002992:	f043 0202 	orr.w	r2, r3, #2
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800299e:	2204      	movs	r2, #4
 80029a0:	409a      	lsls	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	4013      	ands	r3, r2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d012      	beq.n	80029d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00b      	beq.n	80029d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029bc:	2204      	movs	r2, #4
 80029be:	409a      	lsls	r2, r3
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029c8:	f043 0204 	orr.w	r2, r3, #4
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029d4:	2210      	movs	r2, #16
 80029d6:	409a      	lsls	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	4013      	ands	r3, r2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d043      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0308 	and.w	r3, r3, #8
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d03c      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f2:	2210      	movs	r2, #16
 80029f4:	409a      	lsls	r2, r3
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d018      	beq.n	8002a3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d108      	bne.n	8002a28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d024      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	4798      	blx	r3
 8002a26:	e01f      	b.n	8002a68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d01b      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	4798      	blx	r3
 8002a38:	e016      	b.n	8002a68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d107      	bne.n	8002a58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 0208 	bic.w	r2, r2, #8
 8002a56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d003      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a6c:	2220      	movs	r2, #32
 8002a6e:	409a      	lsls	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4013      	ands	r3, r2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 808f 	beq.w	8002b98 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0310 	and.w	r3, r3, #16
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f000 8087 	beq.w	8002b98 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a8e:	2220      	movs	r2, #32
 8002a90:	409a      	lsls	r2, r3
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b05      	cmp	r3, #5
 8002aa0:	d136      	bne.n	8002b10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 0216 	bic.w	r2, r2, #22
 8002ab0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	695a      	ldr	r2, [r3, #20]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ac0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d103      	bne.n	8002ad2 <HAL_DMA_IRQHandler+0x1da>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d007      	beq.n	8002ae2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 0208 	bic.w	r2, r2, #8
 8002ae0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae6:	223f      	movs	r2, #63	@ 0x3f
 8002ae8:	409a      	lsls	r2, r3
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d07e      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	4798      	blx	r3
        }
        return;
 8002b0e:	e079      	b.n	8002c04 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d01d      	beq.n	8002b5a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10d      	bne.n	8002b48 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d031      	beq.n	8002b98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	4798      	blx	r3
 8002b3c:	e02c      	b.n	8002b98 <HAL_DMA_IRQHandler+0x2a0>
 8002b3e:	bf00      	nop
 8002b40:	20000190 	.word	0x20000190
 8002b44:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d023      	beq.n	8002b98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	4798      	blx	r3
 8002b58:	e01e      	b.n	8002b98 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10f      	bne.n	8002b88 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f022 0210 	bic.w	r2, r2, #16
 8002b76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d032      	beq.n	8002c06 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d022      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2205      	movs	r2, #5
 8002bb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0201 	bic.w	r2, r2, #1
 8002bc2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d307      	bcc.n	8002be0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f2      	bne.n	8002bc4 <HAL_DMA_IRQHandler+0x2cc>
 8002bde:	e000      	b.n	8002be2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002be0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d005      	beq.n	8002c06 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	4798      	blx	r3
 8002c02:	e000      	b.n	8002c06 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c04:	bf00      	nop
    }
  }
}
 8002c06:	3718      	adds	r7, #24
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
 8002c18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002c28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	2b40      	cmp	r3, #64	@ 0x40
 8002c38:	d108      	bne.n	8002c4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68ba      	ldr	r2, [r7, #8]
 8002c48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c4a:	e007      	b.n	8002c5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68ba      	ldr	r2, [r7, #8]
 8002c52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	60da      	str	r2, [r3, #12]
}
 8002c5c:	bf00      	nop
 8002c5e:	3714      	adds	r7, #20
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	3b10      	subs	r3, #16
 8002c78:	4a14      	ldr	r2, [pc, #80]	@ (8002ccc <DMA_CalcBaseAndBitshift+0x64>)
 8002c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7e:	091b      	lsrs	r3, r3, #4
 8002c80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c82:	4a13      	ldr	r2, [pc, #76]	@ (8002cd0 <DMA_CalcBaseAndBitshift+0x68>)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4413      	add	r3, r2
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2b03      	cmp	r3, #3
 8002c94:	d909      	bls.n	8002caa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002c9e:	f023 0303 	bic.w	r3, r3, #3
 8002ca2:	1d1a      	adds	r2, r3, #4
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	659a      	str	r2, [r3, #88]	@ 0x58
 8002ca8:	e007      	b.n	8002cba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002cb2:	f023 0303 	bic.w	r3, r3, #3
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3714      	adds	r7, #20
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	aaaaaaab 	.word	0xaaaaaaab
 8002cd0:	08008e20 	.word	0x08008e20

08002cd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d11f      	bne.n	8002d2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2b03      	cmp	r3, #3
 8002cf2:	d856      	bhi.n	8002da2 <DMA_CheckFifoParam+0xce>
 8002cf4:	a201      	add	r2, pc, #4	@ (adr r2, 8002cfc <DMA_CheckFifoParam+0x28>)
 8002cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cfa:	bf00      	nop
 8002cfc:	08002d0d 	.word	0x08002d0d
 8002d00:	08002d1f 	.word	0x08002d1f
 8002d04:	08002d0d 	.word	0x08002d0d
 8002d08:	08002da3 	.word	0x08002da3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d046      	beq.n	8002da6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d1c:	e043      	b.n	8002da6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d22:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d26:	d140      	bne.n	8002daa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d2c:	e03d      	b.n	8002daa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d36:	d121      	bne.n	8002d7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	2b03      	cmp	r3, #3
 8002d3c:	d837      	bhi.n	8002dae <DMA_CheckFifoParam+0xda>
 8002d3e:	a201      	add	r2, pc, #4	@ (adr r2, 8002d44 <DMA_CheckFifoParam+0x70>)
 8002d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d44:	08002d55 	.word	0x08002d55
 8002d48:	08002d5b 	.word	0x08002d5b
 8002d4c:	08002d55 	.word	0x08002d55
 8002d50:	08002d6d 	.word	0x08002d6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	73fb      	strb	r3, [r7, #15]
      break;
 8002d58:	e030      	b.n	8002dbc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d5e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d025      	beq.n	8002db2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d6a:	e022      	b.n	8002db2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d70:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d74:	d11f      	bne.n	8002db6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d7a:	e01c      	b.n	8002db6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d903      	bls.n	8002d8a <DMA_CheckFifoParam+0xb6>
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	2b03      	cmp	r3, #3
 8002d86:	d003      	beq.n	8002d90 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d88:	e018      	b.n	8002dbc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	73fb      	strb	r3, [r7, #15]
      break;
 8002d8e:	e015      	b.n	8002dbc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00e      	beq.n	8002dba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002da0:	e00b      	b.n	8002dba <DMA_CheckFifoParam+0xe6>
      break;
 8002da2:	bf00      	nop
 8002da4:	e00a      	b.n	8002dbc <DMA_CheckFifoParam+0xe8>
      break;
 8002da6:	bf00      	nop
 8002da8:	e008      	b.n	8002dbc <DMA_CheckFifoParam+0xe8>
      break;
 8002daa:	bf00      	nop
 8002dac:	e006      	b.n	8002dbc <DMA_CheckFifoParam+0xe8>
      break;
 8002dae:	bf00      	nop
 8002db0:	e004      	b.n	8002dbc <DMA_CheckFifoParam+0xe8>
      break;
 8002db2:	bf00      	nop
 8002db4:	e002      	b.n	8002dbc <DMA_CheckFifoParam+0xe8>
      break;   
 8002db6:	bf00      	nop
 8002db8:	e000      	b.n	8002dbc <DMA_CheckFifoParam+0xe8>
      break;
 8002dba:	bf00      	nop
    }
  } 
  
  return status; 
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop

08002dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b089      	sub	sp, #36	@ 0x24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002dde:	2300      	movs	r3, #0
 8002de0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002de2:	2300      	movs	r3, #0
 8002de4:	61fb      	str	r3, [r7, #28]
 8002de6:	e16b      	b.n	80030c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002de8:	2201      	movs	r2, #1
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	f040 815a 	bne.w	80030ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d005      	beq.n	8002e1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d130      	bne.n	8002e80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	2203      	movs	r2, #3
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	4013      	ands	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	68da      	ldr	r2, [r3, #12]
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e54:	2201      	movs	r2, #1
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	4013      	ands	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	091b      	lsrs	r3, r3, #4
 8002e6a:	f003 0201 	and.w	r2, r3, #1
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f003 0303 	and.w	r3, r3, #3
 8002e88:	2b03      	cmp	r3, #3
 8002e8a:	d017      	beq.n	8002ebc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	2203      	movs	r2, #3
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f003 0303 	and.w	r3, r3, #3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d123      	bne.n	8002f10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	08da      	lsrs	r2, r3, #3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	3208      	adds	r2, #8
 8002ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	220f      	movs	r2, #15
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	691a      	ldr	r2, [r3, #16]
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	08da      	lsrs	r2, r3, #3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	3208      	adds	r2, #8
 8002f0a:	69b9      	ldr	r1, [r7, #24]
 8002f0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	2203      	movs	r2, #3
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	43db      	mvns	r3, r3
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	4013      	ands	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f003 0203 	and.w	r2, r3, #3
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 80b4 	beq.w	80030ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f52:	2300      	movs	r3, #0
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	4b60      	ldr	r3, [pc, #384]	@ (80030d8 <HAL_GPIO_Init+0x30c>)
 8002f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f5a:	4a5f      	ldr	r2, [pc, #380]	@ (80030d8 <HAL_GPIO_Init+0x30c>)
 8002f5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f60:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f62:	4b5d      	ldr	r3, [pc, #372]	@ (80030d8 <HAL_GPIO_Init+0x30c>)
 8002f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f6a:	60fb      	str	r3, [r7, #12]
 8002f6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f6e:	4a5b      	ldr	r2, [pc, #364]	@ (80030dc <HAL_GPIO_Init+0x310>)
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	089b      	lsrs	r3, r3, #2
 8002f74:	3302      	adds	r3, #2
 8002f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	f003 0303 	and.w	r3, r3, #3
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	220f      	movs	r2, #15
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	43db      	mvns	r3, r3
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a52      	ldr	r2, [pc, #328]	@ (80030e0 <HAL_GPIO_Init+0x314>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d02b      	beq.n	8002ff2 <HAL_GPIO_Init+0x226>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a51      	ldr	r2, [pc, #324]	@ (80030e4 <HAL_GPIO_Init+0x318>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d025      	beq.n	8002fee <HAL_GPIO_Init+0x222>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a50      	ldr	r2, [pc, #320]	@ (80030e8 <HAL_GPIO_Init+0x31c>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d01f      	beq.n	8002fea <HAL_GPIO_Init+0x21e>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a4f      	ldr	r2, [pc, #316]	@ (80030ec <HAL_GPIO_Init+0x320>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d019      	beq.n	8002fe6 <HAL_GPIO_Init+0x21a>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a4e      	ldr	r2, [pc, #312]	@ (80030f0 <HAL_GPIO_Init+0x324>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d013      	beq.n	8002fe2 <HAL_GPIO_Init+0x216>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a4d      	ldr	r2, [pc, #308]	@ (80030f4 <HAL_GPIO_Init+0x328>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d00d      	beq.n	8002fde <HAL_GPIO_Init+0x212>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a4c      	ldr	r2, [pc, #304]	@ (80030f8 <HAL_GPIO_Init+0x32c>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d007      	beq.n	8002fda <HAL_GPIO_Init+0x20e>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a4b      	ldr	r2, [pc, #300]	@ (80030fc <HAL_GPIO_Init+0x330>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d101      	bne.n	8002fd6 <HAL_GPIO_Init+0x20a>
 8002fd2:	2307      	movs	r3, #7
 8002fd4:	e00e      	b.n	8002ff4 <HAL_GPIO_Init+0x228>
 8002fd6:	2308      	movs	r3, #8
 8002fd8:	e00c      	b.n	8002ff4 <HAL_GPIO_Init+0x228>
 8002fda:	2306      	movs	r3, #6
 8002fdc:	e00a      	b.n	8002ff4 <HAL_GPIO_Init+0x228>
 8002fde:	2305      	movs	r3, #5
 8002fe0:	e008      	b.n	8002ff4 <HAL_GPIO_Init+0x228>
 8002fe2:	2304      	movs	r3, #4
 8002fe4:	e006      	b.n	8002ff4 <HAL_GPIO_Init+0x228>
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e004      	b.n	8002ff4 <HAL_GPIO_Init+0x228>
 8002fea:	2302      	movs	r3, #2
 8002fec:	e002      	b.n	8002ff4 <HAL_GPIO_Init+0x228>
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e000      	b.n	8002ff4 <HAL_GPIO_Init+0x228>
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	69fa      	ldr	r2, [r7, #28]
 8002ff6:	f002 0203 	and.w	r2, r2, #3
 8002ffa:	0092      	lsls	r2, r2, #2
 8002ffc:	4093      	lsls	r3, r2
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	4313      	orrs	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003004:	4935      	ldr	r1, [pc, #212]	@ (80030dc <HAL_GPIO_Init+0x310>)
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	089b      	lsrs	r3, r3, #2
 800300a:	3302      	adds	r3, #2
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003012:	4b3b      	ldr	r3, [pc, #236]	@ (8003100 <HAL_GPIO_Init+0x334>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	43db      	mvns	r3, r3
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	4013      	ands	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	4313      	orrs	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003036:	4a32      	ldr	r2, [pc, #200]	@ (8003100 <HAL_GPIO_Init+0x334>)
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800303c:	4b30      	ldr	r3, [pc, #192]	@ (8003100 <HAL_GPIO_Init+0x334>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	43db      	mvns	r3, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4013      	ands	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d003      	beq.n	8003060 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	4313      	orrs	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003060:	4a27      	ldr	r2, [pc, #156]	@ (8003100 <HAL_GPIO_Init+0x334>)
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003066:	4b26      	ldr	r3, [pc, #152]	@ (8003100 <HAL_GPIO_Init+0x334>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	43db      	mvns	r3, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	4013      	ands	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	4313      	orrs	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800308a:	4a1d      	ldr	r2, [pc, #116]	@ (8003100 <HAL_GPIO_Init+0x334>)
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003090:	4b1b      	ldr	r3, [pc, #108]	@ (8003100 <HAL_GPIO_Init+0x334>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	43db      	mvns	r3, r3
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	4013      	ands	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d003      	beq.n	80030b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030b4:	4a12      	ldr	r2, [pc, #72]	@ (8003100 <HAL_GPIO_Init+0x334>)
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	3301      	adds	r3, #1
 80030be:	61fb      	str	r3, [r7, #28]
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	2b0f      	cmp	r3, #15
 80030c4:	f67f ae90 	bls.w	8002de8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030c8:	bf00      	nop
 80030ca:	bf00      	nop
 80030cc:	3724      	adds	r7, #36	@ 0x24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	40023800 	.word	0x40023800
 80030dc:	40013800 	.word	0x40013800
 80030e0:	40020000 	.word	0x40020000
 80030e4:	40020400 	.word	0x40020400
 80030e8:	40020800 	.word	0x40020800
 80030ec:	40020c00 	.word	0x40020c00
 80030f0:	40021000 	.word	0x40021000
 80030f4:	40021400 	.word	0x40021400
 80030f8:	40021800 	.word	0x40021800
 80030fc:	40021c00 	.word	0x40021c00
 8003100:	40013c00 	.word	0x40013c00

08003104 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	460b      	mov	r3, r1
 800310e:	807b      	strh	r3, [r7, #2]
 8003110:	4613      	mov	r3, r2
 8003112:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003114:	787b      	ldrb	r3, [r7, #1]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800311a:	887a      	ldrh	r2, [r7, #2]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003120:	e003      	b.n	800312a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003122:	887b      	ldrh	r3, [r7, #2]
 8003124:	041a      	lsls	r2, r3, #16
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	619a      	str	r2, [r3, #24]
}
 800312a:	bf00      	nop
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b086      	sub	sp, #24
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4618      	mov	r0, r3
 800314e:	f004 ff03 	bl	8007f58 <USB_GetMode>
 8003152:	4603      	mov	r3, r0
 8003154:	2b01      	cmp	r3, #1
 8003156:	f040 80fb 	bne.w	8003350 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f004 fec6 	bl	8007ef0 <USB_ReadInterrupts>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 80f1 	beq.w	800334e <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f004 febd 	bl	8007ef0 <USB_ReadInterrupts>
 8003176:	4603      	mov	r3, r0
 8003178:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800317c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003180:	d104      	bne.n	800318c <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800318a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4618      	mov	r0, r3
 8003192:	f004 fead 	bl	8007ef0 <USB_ReadInterrupts>
 8003196:	4603      	mov	r3, r0
 8003198:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800319c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031a0:	d104      	bne.n	80031ac <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80031aa:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f004 fe9d 	bl	8007ef0 <USB_ReadInterrupts>
 80031b6:	4603      	mov	r3, r0
 80031b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80031bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80031c0:	d104      	bne.n	80031cc <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80031ca:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f004 fe8d 	bl	8007ef0 <USB_ReadInterrupts>
 80031d6:	4603      	mov	r3, r0
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d103      	bne.n	80031e8 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2202      	movs	r2, #2
 80031e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f004 fe7f 	bl	8007ef0 <USB_ReadInterrupts>
 80031f2:	4603      	mov	r3, r0
 80031f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80031f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031fc:	d120      	bne.n	8003240 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003206:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b00      	cmp	r3, #0
 8003216:	d113      	bne.n	8003240 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003218:	2110      	movs	r1, #16
 800321a:	6938      	ldr	r0, [r7, #16]
 800321c:	f004 fdb0 	bl	8007d80 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003220:	6938      	ldr	r0, [r7, #16]
 8003222:	f004 fddf 	bl	8007de4 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	7a5b      	ldrb	r3, [r3, #9]
 800322a:	2b02      	cmp	r3, #2
 800322c:	d105      	bne.n	800323a <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2101      	movs	r1, #1
 8003234:	4618      	mov	r0, r3
 8003236:	f004 fe9d 	bl	8007f74 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f005 f955 	bl	80084ea <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4618      	mov	r0, r3
 8003246:	f004 fe53 	bl	8007ef0 <USB_ReadInterrupts>
 800324a:	4603      	mov	r3, r0
 800324c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003250:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003254:	d102      	bne.n	800325c <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f001 fca1 	bl	8004b9e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	f004 fe45 	bl	8007ef0 <USB_ReadInterrupts>
 8003266:	4603      	mov	r3, r0
 8003268:	f003 0308 	and.w	r3, r3, #8
 800326c:	2b08      	cmp	r3, #8
 800326e:	d106      	bne.n	800327e <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f005 f91e 	bl	80084b2 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2208      	movs	r2, #8
 800327c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f004 fe34 	bl	8007ef0 <USB_ReadInterrupts>
 8003288:	4603      	mov	r3, r0
 800328a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800328e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003292:	d139      	bne.n	8003308 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4618      	mov	r0, r3
 800329a:	f004 fea8 	bl	8007fee <USB_HC_ReadInterrupt>
 800329e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80032a0:	2300      	movs	r3, #0
 80032a2:	617b      	str	r3, [r7, #20]
 80032a4:	e025      	b.n	80032f2 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	f003 030f 	and.w	r3, r3, #15
 80032ac:	68ba      	ldr	r2, [r7, #8]
 80032ae:	fa22 f303 	lsr.w	r3, r2, r3
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d018      	beq.n	80032ec <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	015a      	lsls	r2, r3, #5
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	4413      	add	r3, r2
 80032c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032d0:	d106      	bne.n	80032e0 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	4619      	mov	r1, r3
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 f859 	bl	8003390 <HCD_HC_IN_IRQHandler>
 80032de:	e005      	b.n	80032ec <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	4619      	mov	r1, r3
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 febb 	bl	8004062 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	3301      	adds	r3, #1
 80032f0:	617b      	str	r3, [r7, #20]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	795b      	ldrb	r3, [r3, #5]
 80032f6:	461a      	mov	r2, r3
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d3d3      	bcc.n	80032a6 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003306:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4618      	mov	r0, r3
 800330e:	f004 fdef 	bl	8007ef0 <USB_ReadInterrupts>
 8003312:	4603      	mov	r3, r0
 8003314:	f003 0310 	and.w	r3, r3, #16
 8003318:	2b10      	cmp	r3, #16
 800331a:	d101      	bne.n	8003320 <HAL_HCD_IRQHandler+0x1ea>
 800331c:	2301      	movs	r3, #1
 800331e:	e000      	b.n	8003322 <HAL_HCD_IRQHandler+0x1ec>
 8003320:	2300      	movs	r3, #0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d014      	beq.n	8003350 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	699a      	ldr	r2, [r3, #24]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 0210 	bic.w	r2, r2, #16
 8003334:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f001 fb52 	bl	80049e0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	699a      	ldr	r2, [r3, #24]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 0210 	orr.w	r2, r2, #16
 800334a:	619a      	str	r2, [r3, #24]
 800334c:	e000      	b.n	8003350 <HAL_HCD_IRQHandler+0x21a>
      return;
 800334e:	bf00      	nop
    }
  }
}
 8003350:	3718      	adds	r7, #24
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b082      	sub	sp, #8
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003364:	2b01      	cmp	r3, #1
 8003366:	d101      	bne.n	800336c <HAL_HCD_Stop+0x16>
 8003368:	2302      	movs	r3, #2
 800336a:	e00d      	b.n	8003388 <HAL_HCD_Stop+0x32>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f004 ff69 	bl	8008250 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	460b      	mov	r3, r1
 800339a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	78fa      	ldrb	r2, [r7, #3]
 80033ac:	4611      	mov	r1, r2
 80033ae:	4618      	mov	r0, r3
 80033b0:	f004 fdb1 	bl	8007f16 <USB_ReadChInterrupts>
 80033b4:	4603      	mov	r3, r0
 80033b6:	f003 0304 	and.w	r3, r3, #4
 80033ba:	2b04      	cmp	r3, #4
 80033bc:	d11a      	bne.n	80033f4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80033be:	78fb      	ldrb	r3, [r7, #3]
 80033c0:	015a      	lsls	r2, r3, #5
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	4413      	add	r3, r2
 80033c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033ca:	461a      	mov	r2, r3
 80033cc:	2304      	movs	r3, #4
 80033ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80033d0:	78fa      	ldrb	r2, [r7, #3]
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	4613      	mov	r3, r2
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	1a9b      	subs	r3, r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	334d      	adds	r3, #77	@ 0x4d
 80033e0:	2207      	movs	r2, #7
 80033e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	78fa      	ldrb	r2, [r7, #3]
 80033ea:	4611      	mov	r1, r2
 80033ec:	4618      	mov	r0, r3
 80033ee:	f004 fe0f 	bl	8008010 <USB_HC_Halt>
 80033f2:	e09e      	b.n	8003532 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	78fa      	ldrb	r2, [r7, #3]
 80033fa:	4611      	mov	r1, r2
 80033fc:	4618      	mov	r0, r3
 80033fe:	f004 fd8a 	bl	8007f16 <USB_ReadChInterrupts>
 8003402:	4603      	mov	r3, r0
 8003404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003408:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800340c:	d11b      	bne.n	8003446 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800340e:	78fb      	ldrb	r3, [r7, #3]
 8003410:	015a      	lsls	r2, r3, #5
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	4413      	add	r3, r2
 8003416:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800341a:	461a      	mov	r2, r3
 800341c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003420:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003422:	78fa      	ldrb	r2, [r7, #3]
 8003424:	6879      	ldr	r1, [r7, #4]
 8003426:	4613      	mov	r3, r2
 8003428:	011b      	lsls	r3, r3, #4
 800342a:	1a9b      	subs	r3, r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	440b      	add	r3, r1
 8003430:	334d      	adds	r3, #77	@ 0x4d
 8003432:	2208      	movs	r2, #8
 8003434:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	78fa      	ldrb	r2, [r7, #3]
 800343c:	4611      	mov	r1, r2
 800343e:	4618      	mov	r0, r3
 8003440:	f004 fde6 	bl	8008010 <USB_HC_Halt>
 8003444:	e075      	b.n	8003532 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	78fa      	ldrb	r2, [r7, #3]
 800344c:	4611      	mov	r1, r2
 800344e:	4618      	mov	r0, r3
 8003450:	f004 fd61 	bl	8007f16 <USB_ReadChInterrupts>
 8003454:	4603      	mov	r3, r0
 8003456:	f003 0308 	and.w	r3, r3, #8
 800345a:	2b08      	cmp	r3, #8
 800345c:	d11a      	bne.n	8003494 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800345e:	78fb      	ldrb	r3, [r7, #3]
 8003460:	015a      	lsls	r2, r3, #5
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	4413      	add	r3, r2
 8003466:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800346a:	461a      	mov	r2, r3
 800346c:	2308      	movs	r3, #8
 800346e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003470:	78fa      	ldrb	r2, [r7, #3]
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	4613      	mov	r3, r2
 8003476:	011b      	lsls	r3, r3, #4
 8003478:	1a9b      	subs	r3, r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	334d      	adds	r3, #77	@ 0x4d
 8003480:	2206      	movs	r2, #6
 8003482:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	78fa      	ldrb	r2, [r7, #3]
 800348a:	4611      	mov	r1, r2
 800348c:	4618      	mov	r0, r3
 800348e:	f004 fdbf 	bl	8008010 <USB_HC_Halt>
 8003492:	e04e      	b.n	8003532 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	78fa      	ldrb	r2, [r7, #3]
 800349a:	4611      	mov	r1, r2
 800349c:	4618      	mov	r0, r3
 800349e:	f004 fd3a 	bl	8007f16 <USB_ReadChInterrupts>
 80034a2:	4603      	mov	r3, r0
 80034a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034ac:	d11b      	bne.n	80034e6 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80034ae:	78fb      	ldrb	r3, [r7, #3]
 80034b0:	015a      	lsls	r2, r3, #5
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	4413      	add	r3, r2
 80034b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034ba:	461a      	mov	r2, r3
 80034bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80034c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80034c2:	78fa      	ldrb	r2, [r7, #3]
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	4613      	mov	r3, r2
 80034c8:	011b      	lsls	r3, r3, #4
 80034ca:	1a9b      	subs	r3, r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	440b      	add	r3, r1
 80034d0:	334d      	adds	r3, #77	@ 0x4d
 80034d2:	2209      	movs	r2, #9
 80034d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	78fa      	ldrb	r2, [r7, #3]
 80034dc:	4611      	mov	r1, r2
 80034de:	4618      	mov	r0, r3
 80034e0:	f004 fd96 	bl	8008010 <USB_HC_Halt>
 80034e4:	e025      	b.n	8003532 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	78fa      	ldrb	r2, [r7, #3]
 80034ec:	4611      	mov	r1, r2
 80034ee:	4618      	mov	r0, r3
 80034f0:	f004 fd11 	bl	8007f16 <USB_ReadChInterrupts>
 80034f4:	4603      	mov	r3, r0
 80034f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034fa:	2b80      	cmp	r3, #128	@ 0x80
 80034fc:	d119      	bne.n	8003532 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80034fe:	78fb      	ldrb	r3, [r7, #3]
 8003500:	015a      	lsls	r2, r3, #5
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	4413      	add	r3, r2
 8003506:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800350a:	461a      	mov	r2, r3
 800350c:	2380      	movs	r3, #128	@ 0x80
 800350e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003510:	78fa      	ldrb	r2, [r7, #3]
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	4613      	mov	r3, r2
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	1a9b      	subs	r3, r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	334d      	adds	r3, #77	@ 0x4d
 8003520:	2207      	movs	r2, #7
 8003522:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	78fa      	ldrb	r2, [r7, #3]
 800352a:	4611      	mov	r1, r2
 800352c:	4618      	mov	r0, r3
 800352e:	f004 fd6f 	bl	8008010 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	78fa      	ldrb	r2, [r7, #3]
 8003538:	4611      	mov	r1, r2
 800353a:	4618      	mov	r0, r3
 800353c:	f004 fceb 	bl	8007f16 <USB_ReadChInterrupts>
 8003540:	4603      	mov	r3, r0
 8003542:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003546:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800354a:	d112      	bne.n	8003572 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	78fa      	ldrb	r2, [r7, #3]
 8003552:	4611      	mov	r1, r2
 8003554:	4618      	mov	r0, r3
 8003556:	f004 fd5b 	bl	8008010 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800355a:	78fb      	ldrb	r3, [r7, #3]
 800355c:	015a      	lsls	r2, r3, #5
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	4413      	add	r3, r2
 8003562:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003566:	461a      	mov	r2, r3
 8003568:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800356c:	6093      	str	r3, [r2, #8]
 800356e:	f000 bd75 	b.w	800405c <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	78fa      	ldrb	r2, [r7, #3]
 8003578:	4611      	mov	r1, r2
 800357a:	4618      	mov	r0, r3
 800357c:	f004 fccb 	bl	8007f16 <USB_ReadChInterrupts>
 8003580:	4603      	mov	r3, r0
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b01      	cmp	r3, #1
 8003588:	f040 8128 	bne.w	80037dc <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800358c:	78fb      	ldrb	r3, [r7, #3]
 800358e:	015a      	lsls	r2, r3, #5
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	4413      	add	r3, r2
 8003594:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003598:	461a      	mov	r2, r3
 800359a:	2320      	movs	r3, #32
 800359c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800359e:	78fa      	ldrb	r2, [r7, #3]
 80035a0:	6879      	ldr	r1, [r7, #4]
 80035a2:	4613      	mov	r3, r2
 80035a4:	011b      	lsls	r3, r3, #4
 80035a6:	1a9b      	subs	r3, r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	440b      	add	r3, r1
 80035ac:	331b      	adds	r3, #27
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d119      	bne.n	80035e8 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80035b4:	78fa      	ldrb	r2, [r7, #3]
 80035b6:	6879      	ldr	r1, [r7, #4]
 80035b8:	4613      	mov	r3, r2
 80035ba:	011b      	lsls	r3, r3, #4
 80035bc:	1a9b      	subs	r3, r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	440b      	add	r3, r1
 80035c2:	331b      	adds	r3, #27
 80035c4:	2200      	movs	r2, #0
 80035c6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80035c8:	78fb      	ldrb	r3, [r7, #3]
 80035ca:	015a      	lsls	r2, r3, #5
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	4413      	add	r3, r2
 80035d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	78fa      	ldrb	r2, [r7, #3]
 80035d8:	0151      	lsls	r1, r2, #5
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	440a      	add	r2, r1
 80035de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80035e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035e6:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	799b      	ldrb	r3, [r3, #6]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d01b      	beq.n	8003628 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80035f0:	78fa      	ldrb	r2, [r7, #3]
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	4613      	mov	r3, r2
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	1a9b      	subs	r3, r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	440b      	add	r3, r1
 80035fe:	3330      	adds	r3, #48	@ 0x30
 8003600:	6819      	ldr	r1, [r3, #0]
 8003602:	78fb      	ldrb	r3, [r7, #3]
 8003604:	015a      	lsls	r2, r3, #5
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	4413      	add	r3, r2
 800360a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003614:	78fa      	ldrb	r2, [r7, #3]
 8003616:	1ac9      	subs	r1, r1, r3
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	4613      	mov	r3, r2
 800361c:	011b      	lsls	r3, r3, #4
 800361e:	1a9b      	subs	r3, r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4403      	add	r3, r0
 8003624:	3338      	adds	r3, #56	@ 0x38
 8003626:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003628:	78fa      	ldrb	r2, [r7, #3]
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	4613      	mov	r3, r2
 800362e:	011b      	lsls	r3, r3, #4
 8003630:	1a9b      	subs	r3, r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	334d      	adds	r3, #77	@ 0x4d
 8003638:	2201      	movs	r2, #1
 800363a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800363c:	78fa      	ldrb	r2, [r7, #3]
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	4613      	mov	r3, r2
 8003642:	011b      	lsls	r3, r3, #4
 8003644:	1a9b      	subs	r3, r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	440b      	add	r3, r1
 800364a:	3344      	adds	r3, #68	@ 0x44
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003650:	78fb      	ldrb	r3, [r7, #3]
 8003652:	015a      	lsls	r2, r3, #5
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	4413      	add	r3, r2
 8003658:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800365c:	461a      	mov	r2, r3
 800365e:	2301      	movs	r3, #1
 8003660:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003662:	78fa      	ldrb	r2, [r7, #3]
 8003664:	6879      	ldr	r1, [r7, #4]
 8003666:	4613      	mov	r3, r2
 8003668:	011b      	lsls	r3, r3, #4
 800366a:	1a9b      	subs	r3, r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	440b      	add	r3, r1
 8003670:	3326      	adds	r3, #38	@ 0x26
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00a      	beq.n	800368e <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003678:	78fa      	ldrb	r2, [r7, #3]
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	4613      	mov	r3, r2
 800367e:	011b      	lsls	r3, r3, #4
 8003680:	1a9b      	subs	r3, r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	440b      	add	r3, r1
 8003686:	3326      	adds	r3, #38	@ 0x26
 8003688:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800368a:	2b02      	cmp	r3, #2
 800368c:	d110      	bne.n	80036b0 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	78fa      	ldrb	r2, [r7, #3]
 8003694:	4611      	mov	r1, r2
 8003696:	4618      	mov	r0, r3
 8003698:	f004 fcba 	bl	8008010 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800369c:	78fb      	ldrb	r3, [r7, #3]
 800369e:	015a      	lsls	r2, r3, #5
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	4413      	add	r3, r2
 80036a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036a8:	461a      	mov	r2, r3
 80036aa:	2310      	movs	r3, #16
 80036ac:	6093      	str	r3, [r2, #8]
 80036ae:	e03d      	b.n	800372c <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80036b0:	78fa      	ldrb	r2, [r7, #3]
 80036b2:	6879      	ldr	r1, [r7, #4]
 80036b4:	4613      	mov	r3, r2
 80036b6:	011b      	lsls	r3, r3, #4
 80036b8:	1a9b      	subs	r3, r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	440b      	add	r3, r1
 80036be:	3326      	adds	r3, #38	@ 0x26
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	2b03      	cmp	r3, #3
 80036c4:	d00a      	beq.n	80036dc <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80036c6:	78fa      	ldrb	r2, [r7, #3]
 80036c8:	6879      	ldr	r1, [r7, #4]
 80036ca:	4613      	mov	r3, r2
 80036cc:	011b      	lsls	r3, r3, #4
 80036ce:	1a9b      	subs	r3, r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	440b      	add	r3, r1
 80036d4:	3326      	adds	r3, #38	@ 0x26
 80036d6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d127      	bne.n	800372c <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80036dc:	78fb      	ldrb	r3, [r7, #3]
 80036de:	015a      	lsls	r2, r3, #5
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	4413      	add	r3, r2
 80036e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	78fa      	ldrb	r2, [r7, #3]
 80036ec:	0151      	lsls	r1, r2, #5
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	440a      	add	r2, r1
 80036f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80036f6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80036fa:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80036fc:	78fa      	ldrb	r2, [r7, #3]
 80036fe:	6879      	ldr	r1, [r7, #4]
 8003700:	4613      	mov	r3, r2
 8003702:	011b      	lsls	r3, r3, #4
 8003704:	1a9b      	subs	r3, r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	440b      	add	r3, r1
 800370a:	334c      	adds	r3, #76	@ 0x4c
 800370c:	2201      	movs	r2, #1
 800370e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003710:	78fa      	ldrb	r2, [r7, #3]
 8003712:	6879      	ldr	r1, [r7, #4]
 8003714:	4613      	mov	r3, r2
 8003716:	011b      	lsls	r3, r3, #4
 8003718:	1a9b      	subs	r3, r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	440b      	add	r3, r1
 800371e:	334c      	adds	r3, #76	@ 0x4c
 8003720:	781a      	ldrb	r2, [r3, #0]
 8003722:	78fb      	ldrb	r3, [r7, #3]
 8003724:	4619      	mov	r1, r3
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f004 feed 	bl	8008506 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	799b      	ldrb	r3, [r3, #6]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d13b      	bne.n	80037ac <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003734:	78fa      	ldrb	r2, [r7, #3]
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	4613      	mov	r3, r2
 800373a:	011b      	lsls	r3, r3, #4
 800373c:	1a9b      	subs	r3, r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	440b      	add	r3, r1
 8003742:	3338      	adds	r3, #56	@ 0x38
 8003744:	6819      	ldr	r1, [r3, #0]
 8003746:	78fa      	ldrb	r2, [r7, #3]
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	4613      	mov	r3, r2
 800374c:	011b      	lsls	r3, r3, #4
 800374e:	1a9b      	subs	r3, r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	4403      	add	r3, r0
 8003754:	3328      	adds	r3, #40	@ 0x28
 8003756:	881b      	ldrh	r3, [r3, #0]
 8003758:	440b      	add	r3, r1
 800375a:	1e59      	subs	r1, r3, #1
 800375c:	78fa      	ldrb	r2, [r7, #3]
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	4613      	mov	r3, r2
 8003762:	011b      	lsls	r3, r3, #4
 8003764:	1a9b      	subs	r3, r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4403      	add	r3, r0
 800376a:	3328      	adds	r3, #40	@ 0x28
 800376c:	881b      	ldrh	r3, [r3, #0]
 800376e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	f000 8470 	beq.w	800405c <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800377c:	78fa      	ldrb	r2, [r7, #3]
 800377e:	6879      	ldr	r1, [r7, #4]
 8003780:	4613      	mov	r3, r2
 8003782:	011b      	lsls	r3, r3, #4
 8003784:	1a9b      	subs	r3, r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	440b      	add	r3, r1
 800378a:	333c      	adds	r3, #60	@ 0x3c
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	78fa      	ldrb	r2, [r7, #3]
 8003790:	f083 0301 	eor.w	r3, r3, #1
 8003794:	b2d8      	uxtb	r0, r3
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	4613      	mov	r3, r2
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	1a9b      	subs	r3, r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	440b      	add	r3, r1
 80037a2:	333c      	adds	r3, #60	@ 0x3c
 80037a4:	4602      	mov	r2, r0
 80037a6:	701a      	strb	r2, [r3, #0]
 80037a8:	f000 bc58 	b.w	800405c <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80037ac:	78fa      	ldrb	r2, [r7, #3]
 80037ae:	6879      	ldr	r1, [r7, #4]
 80037b0:	4613      	mov	r3, r2
 80037b2:	011b      	lsls	r3, r3, #4
 80037b4:	1a9b      	subs	r3, r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	440b      	add	r3, r1
 80037ba:	333c      	adds	r3, #60	@ 0x3c
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	78fa      	ldrb	r2, [r7, #3]
 80037c0:	f083 0301 	eor.w	r3, r3, #1
 80037c4:	b2d8      	uxtb	r0, r3
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	4613      	mov	r3, r2
 80037ca:	011b      	lsls	r3, r3, #4
 80037cc:	1a9b      	subs	r3, r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	440b      	add	r3, r1
 80037d2:	333c      	adds	r3, #60	@ 0x3c
 80037d4:	4602      	mov	r2, r0
 80037d6:	701a      	strb	r2, [r3, #0]
 80037d8:	f000 bc40 	b.w	800405c <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	78fa      	ldrb	r2, [r7, #3]
 80037e2:	4611      	mov	r1, r2
 80037e4:	4618      	mov	r0, r3
 80037e6:	f004 fb96 	bl	8007f16 <USB_ReadChInterrupts>
 80037ea:	4603      	mov	r3, r0
 80037ec:	f003 0320 	and.w	r3, r3, #32
 80037f0:	2b20      	cmp	r3, #32
 80037f2:	d131      	bne.n	8003858 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80037f4:	78fb      	ldrb	r3, [r7, #3]
 80037f6:	015a      	lsls	r2, r3, #5
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003800:	461a      	mov	r2, r3
 8003802:	2320      	movs	r3, #32
 8003804:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003806:	78fa      	ldrb	r2, [r7, #3]
 8003808:	6879      	ldr	r1, [r7, #4]
 800380a:	4613      	mov	r3, r2
 800380c:	011b      	lsls	r3, r3, #4
 800380e:	1a9b      	subs	r3, r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	440b      	add	r3, r1
 8003814:	331a      	adds	r3, #26
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	2b01      	cmp	r3, #1
 800381a:	f040 841f 	bne.w	800405c <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800381e:	78fa      	ldrb	r2, [r7, #3]
 8003820:	6879      	ldr	r1, [r7, #4]
 8003822:	4613      	mov	r3, r2
 8003824:	011b      	lsls	r3, r3, #4
 8003826:	1a9b      	subs	r3, r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	440b      	add	r3, r1
 800382c:	331b      	adds	r3, #27
 800382e:	2201      	movs	r2, #1
 8003830:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003832:	78fa      	ldrb	r2, [r7, #3]
 8003834:	6879      	ldr	r1, [r7, #4]
 8003836:	4613      	mov	r3, r2
 8003838:	011b      	lsls	r3, r3, #4
 800383a:	1a9b      	subs	r3, r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	440b      	add	r3, r1
 8003840:	334d      	adds	r3, #77	@ 0x4d
 8003842:	2203      	movs	r2, #3
 8003844:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	78fa      	ldrb	r2, [r7, #3]
 800384c:	4611      	mov	r1, r2
 800384e:	4618      	mov	r0, r3
 8003850:	f004 fbde 	bl	8008010 <USB_HC_Halt>
 8003854:	f000 bc02 	b.w	800405c <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	78fa      	ldrb	r2, [r7, #3]
 800385e:	4611      	mov	r1, r2
 8003860:	4618      	mov	r0, r3
 8003862:	f004 fb58 	bl	8007f16 <USB_ReadChInterrupts>
 8003866:	4603      	mov	r3, r0
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b02      	cmp	r3, #2
 800386e:	f040 8305 	bne.w	8003e7c <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003872:	78fb      	ldrb	r3, [r7, #3]
 8003874:	015a      	lsls	r2, r3, #5
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	4413      	add	r3, r2
 800387a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800387e:	461a      	mov	r2, r3
 8003880:	2302      	movs	r3, #2
 8003882:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003884:	78fa      	ldrb	r2, [r7, #3]
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	4613      	mov	r3, r2
 800388a:	011b      	lsls	r3, r3, #4
 800388c:	1a9b      	subs	r3, r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	334d      	adds	r3, #77	@ 0x4d
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d114      	bne.n	80038c4 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800389a:	78fa      	ldrb	r2, [r7, #3]
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	4613      	mov	r3, r2
 80038a0:	011b      	lsls	r3, r3, #4
 80038a2:	1a9b      	subs	r3, r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	440b      	add	r3, r1
 80038a8:	334d      	adds	r3, #77	@ 0x4d
 80038aa:	2202      	movs	r2, #2
 80038ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80038ae:	78fa      	ldrb	r2, [r7, #3]
 80038b0:	6879      	ldr	r1, [r7, #4]
 80038b2:	4613      	mov	r3, r2
 80038b4:	011b      	lsls	r3, r3, #4
 80038b6:	1a9b      	subs	r3, r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	440b      	add	r3, r1
 80038bc:	334c      	adds	r3, #76	@ 0x4c
 80038be:	2201      	movs	r2, #1
 80038c0:	701a      	strb	r2, [r3, #0]
 80038c2:	e2cc      	b.n	8003e5e <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80038c4:	78fa      	ldrb	r2, [r7, #3]
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	4613      	mov	r3, r2
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	1a9b      	subs	r3, r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	334d      	adds	r3, #77	@ 0x4d
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	2b06      	cmp	r3, #6
 80038d8:	d114      	bne.n	8003904 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80038da:	78fa      	ldrb	r2, [r7, #3]
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	4613      	mov	r3, r2
 80038e0:	011b      	lsls	r3, r3, #4
 80038e2:	1a9b      	subs	r3, r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	440b      	add	r3, r1
 80038e8:	334d      	adds	r3, #77	@ 0x4d
 80038ea:	2202      	movs	r2, #2
 80038ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80038ee:	78fa      	ldrb	r2, [r7, #3]
 80038f0:	6879      	ldr	r1, [r7, #4]
 80038f2:	4613      	mov	r3, r2
 80038f4:	011b      	lsls	r3, r3, #4
 80038f6:	1a9b      	subs	r3, r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	440b      	add	r3, r1
 80038fc:	334c      	adds	r3, #76	@ 0x4c
 80038fe:	2205      	movs	r2, #5
 8003900:	701a      	strb	r2, [r3, #0]
 8003902:	e2ac      	b.n	8003e5e <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003904:	78fa      	ldrb	r2, [r7, #3]
 8003906:	6879      	ldr	r1, [r7, #4]
 8003908:	4613      	mov	r3, r2
 800390a:	011b      	lsls	r3, r3, #4
 800390c:	1a9b      	subs	r3, r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	440b      	add	r3, r1
 8003912:	334d      	adds	r3, #77	@ 0x4d
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	2b07      	cmp	r3, #7
 8003918:	d00b      	beq.n	8003932 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800391a:	78fa      	ldrb	r2, [r7, #3]
 800391c:	6879      	ldr	r1, [r7, #4]
 800391e:	4613      	mov	r3, r2
 8003920:	011b      	lsls	r3, r3, #4
 8003922:	1a9b      	subs	r3, r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	440b      	add	r3, r1
 8003928:	334d      	adds	r3, #77	@ 0x4d
 800392a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800392c:	2b09      	cmp	r3, #9
 800392e:	f040 80a6 	bne.w	8003a7e <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003932:	78fa      	ldrb	r2, [r7, #3]
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	4613      	mov	r3, r2
 8003938:	011b      	lsls	r3, r3, #4
 800393a:	1a9b      	subs	r3, r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	440b      	add	r3, r1
 8003940:	334d      	adds	r3, #77	@ 0x4d
 8003942:	2202      	movs	r2, #2
 8003944:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003946:	78fa      	ldrb	r2, [r7, #3]
 8003948:	6879      	ldr	r1, [r7, #4]
 800394a:	4613      	mov	r3, r2
 800394c:	011b      	lsls	r3, r3, #4
 800394e:	1a9b      	subs	r3, r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	440b      	add	r3, r1
 8003954:	3344      	adds	r3, #68	@ 0x44
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	1c59      	adds	r1, r3, #1
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	4613      	mov	r3, r2
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	1a9b      	subs	r3, r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4403      	add	r3, r0
 8003966:	3344      	adds	r3, #68	@ 0x44
 8003968:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800396a:	78fa      	ldrb	r2, [r7, #3]
 800396c:	6879      	ldr	r1, [r7, #4]
 800396e:	4613      	mov	r3, r2
 8003970:	011b      	lsls	r3, r3, #4
 8003972:	1a9b      	subs	r3, r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	440b      	add	r3, r1
 8003978:	3344      	adds	r3, #68	@ 0x44
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2b02      	cmp	r3, #2
 800397e:	d943      	bls.n	8003a08 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003980:	78fa      	ldrb	r2, [r7, #3]
 8003982:	6879      	ldr	r1, [r7, #4]
 8003984:	4613      	mov	r3, r2
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	1a9b      	subs	r3, r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	440b      	add	r3, r1
 800398e:	3344      	adds	r3, #68	@ 0x44
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003994:	78fa      	ldrb	r2, [r7, #3]
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	4613      	mov	r3, r2
 800399a:	011b      	lsls	r3, r3, #4
 800399c:	1a9b      	subs	r3, r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	440b      	add	r3, r1
 80039a2:	331a      	adds	r3, #26
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d123      	bne.n	80039f2 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80039aa:	78fa      	ldrb	r2, [r7, #3]
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	4613      	mov	r3, r2
 80039b0:	011b      	lsls	r3, r3, #4
 80039b2:	1a9b      	subs	r3, r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	440b      	add	r3, r1
 80039b8:	331b      	adds	r3, #27
 80039ba:	2200      	movs	r2, #0
 80039bc:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80039be:	78fa      	ldrb	r2, [r7, #3]
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	4613      	mov	r3, r2
 80039c4:	011b      	lsls	r3, r3, #4
 80039c6:	1a9b      	subs	r3, r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	440b      	add	r3, r1
 80039cc:	331c      	adds	r3, #28
 80039ce:	2200      	movs	r2, #0
 80039d0:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80039d2:	78fb      	ldrb	r3, [r7, #3]
 80039d4:	015a      	lsls	r2, r3, #5
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	4413      	add	r3, r2
 80039da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	78fa      	ldrb	r2, [r7, #3]
 80039e2:	0151      	lsls	r1, r2, #5
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	440a      	add	r2, r1
 80039e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80039ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039f0:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80039f2:	78fa      	ldrb	r2, [r7, #3]
 80039f4:	6879      	ldr	r1, [r7, #4]
 80039f6:	4613      	mov	r3, r2
 80039f8:	011b      	lsls	r3, r3, #4
 80039fa:	1a9b      	subs	r3, r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	440b      	add	r3, r1
 8003a00:	334c      	adds	r3, #76	@ 0x4c
 8003a02:	2204      	movs	r2, #4
 8003a04:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003a06:	e229      	b.n	8003e5c <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003a08:	78fa      	ldrb	r2, [r7, #3]
 8003a0a:	6879      	ldr	r1, [r7, #4]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	011b      	lsls	r3, r3, #4
 8003a10:	1a9b      	subs	r3, r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	440b      	add	r3, r1
 8003a16:	334c      	adds	r3, #76	@ 0x4c
 8003a18:	2202      	movs	r2, #2
 8003a1a:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a1c:	78fa      	ldrb	r2, [r7, #3]
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	4613      	mov	r3, r2
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	1a9b      	subs	r3, r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	3326      	adds	r3, #38	@ 0x26
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00b      	beq.n	8003a4a <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003a32:	78fa      	ldrb	r2, [r7, #3]
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	4613      	mov	r3, r2
 8003a38:	011b      	lsls	r3, r3, #4
 8003a3a:	1a9b      	subs	r3, r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	440b      	add	r3, r1
 8003a40:	3326      	adds	r3, #38	@ 0x26
 8003a42:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	f040 8209 	bne.w	8003e5c <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003a4a:	78fb      	ldrb	r3, [r7, #3]
 8003a4c:	015a      	lsls	r2, r3, #5
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	4413      	add	r3, r2
 8003a52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003a60:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003a68:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003a6a:	78fb      	ldrb	r3, [r7, #3]
 8003a6c:	015a      	lsls	r2, r3, #5
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	4413      	add	r3, r2
 8003a72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a76:	461a      	mov	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003a7c:	e1ee      	b.n	8003e5c <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003a7e:	78fa      	ldrb	r2, [r7, #3]
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	4613      	mov	r3, r2
 8003a84:	011b      	lsls	r3, r3, #4
 8003a86:	1a9b      	subs	r3, r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	440b      	add	r3, r1
 8003a8c:	334d      	adds	r3, #77	@ 0x4d
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	2b05      	cmp	r3, #5
 8003a92:	f040 80c8 	bne.w	8003c26 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a96:	78fa      	ldrb	r2, [r7, #3]
 8003a98:	6879      	ldr	r1, [r7, #4]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	011b      	lsls	r3, r3, #4
 8003a9e:	1a9b      	subs	r3, r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	440b      	add	r3, r1
 8003aa4:	334d      	adds	r3, #77	@ 0x4d
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003aaa:	78fa      	ldrb	r2, [r7, #3]
 8003aac:	6879      	ldr	r1, [r7, #4]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	011b      	lsls	r3, r3, #4
 8003ab2:	1a9b      	subs	r3, r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	440b      	add	r3, r1
 8003ab8:	331b      	adds	r3, #27
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	f040 81ce 	bne.w	8003e5e <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003ac2:	78fa      	ldrb	r2, [r7, #3]
 8003ac4:	6879      	ldr	r1, [r7, #4]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	011b      	lsls	r3, r3, #4
 8003aca:	1a9b      	subs	r3, r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	440b      	add	r3, r1
 8003ad0:	3326      	adds	r3, #38	@ 0x26
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	2b03      	cmp	r3, #3
 8003ad6:	d16b      	bne.n	8003bb0 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003ad8:	78fa      	ldrb	r2, [r7, #3]
 8003ada:	6879      	ldr	r1, [r7, #4]
 8003adc:	4613      	mov	r3, r2
 8003ade:	011b      	lsls	r3, r3, #4
 8003ae0:	1a9b      	subs	r3, r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	440b      	add	r3, r1
 8003ae6:	3348      	adds	r3, #72	@ 0x48
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	1c59      	adds	r1, r3, #1
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	4613      	mov	r3, r2
 8003af0:	011b      	lsls	r3, r3, #4
 8003af2:	1a9b      	subs	r3, r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	4403      	add	r3, r0
 8003af8:	3348      	adds	r3, #72	@ 0x48
 8003afa:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003afc:	78fa      	ldrb	r2, [r7, #3]
 8003afe:	6879      	ldr	r1, [r7, #4]
 8003b00:	4613      	mov	r3, r2
 8003b02:	011b      	lsls	r3, r3, #4
 8003b04:	1a9b      	subs	r3, r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	440b      	add	r3, r1
 8003b0a:	3348      	adds	r3, #72	@ 0x48
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d943      	bls.n	8003b9a <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003b12:	78fa      	ldrb	r2, [r7, #3]
 8003b14:	6879      	ldr	r1, [r7, #4]
 8003b16:	4613      	mov	r3, r2
 8003b18:	011b      	lsls	r3, r3, #4
 8003b1a:	1a9b      	subs	r3, r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	440b      	add	r3, r1
 8003b20:	3348      	adds	r3, #72	@ 0x48
 8003b22:	2200      	movs	r2, #0
 8003b24:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003b26:	78fa      	ldrb	r2, [r7, #3]
 8003b28:	6879      	ldr	r1, [r7, #4]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	1a9b      	subs	r3, r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	440b      	add	r3, r1
 8003b34:	331b      	adds	r3, #27
 8003b36:	2200      	movs	r2, #0
 8003b38:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003b3a:	78fa      	ldrb	r2, [r7, #3]
 8003b3c:	6879      	ldr	r1, [r7, #4]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	011b      	lsls	r3, r3, #4
 8003b42:	1a9b      	subs	r3, r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	440b      	add	r3, r1
 8003b48:	3344      	adds	r3, #68	@ 0x44
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d809      	bhi.n	8003b64 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003b50:	78fa      	ldrb	r2, [r7, #3]
 8003b52:	6879      	ldr	r1, [r7, #4]
 8003b54:	4613      	mov	r3, r2
 8003b56:	011b      	lsls	r3, r3, #4
 8003b58:	1a9b      	subs	r3, r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	440b      	add	r3, r1
 8003b5e:	331c      	adds	r3, #28
 8003b60:	2201      	movs	r2, #1
 8003b62:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003b64:	78fb      	ldrb	r3, [r7, #3]
 8003b66:	015a      	lsls	r2, r3, #5
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	78fa      	ldrb	r2, [r7, #3]
 8003b74:	0151      	lsls	r1, r2, #5
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	440a      	add	r2, r1
 8003b7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b82:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003b84:	78fa      	ldrb	r2, [r7, #3]
 8003b86:	6879      	ldr	r1, [r7, #4]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	011b      	lsls	r3, r3, #4
 8003b8c:	1a9b      	subs	r3, r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	440b      	add	r3, r1
 8003b92:	334c      	adds	r3, #76	@ 0x4c
 8003b94:	2204      	movs	r2, #4
 8003b96:	701a      	strb	r2, [r3, #0]
 8003b98:	e014      	b.n	8003bc4 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b9a:	78fa      	ldrb	r2, [r7, #3]
 8003b9c:	6879      	ldr	r1, [r7, #4]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	011b      	lsls	r3, r3, #4
 8003ba2:	1a9b      	subs	r3, r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	440b      	add	r3, r1
 8003ba8:	334c      	adds	r3, #76	@ 0x4c
 8003baa:	2202      	movs	r2, #2
 8003bac:	701a      	strb	r2, [r3, #0]
 8003bae:	e009      	b.n	8003bc4 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003bb0:	78fa      	ldrb	r2, [r7, #3]
 8003bb2:	6879      	ldr	r1, [r7, #4]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	011b      	lsls	r3, r3, #4
 8003bb8:	1a9b      	subs	r3, r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	440b      	add	r3, r1
 8003bbe:	334c      	adds	r3, #76	@ 0x4c
 8003bc0:	2202      	movs	r2, #2
 8003bc2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003bc4:	78fa      	ldrb	r2, [r7, #3]
 8003bc6:	6879      	ldr	r1, [r7, #4]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	011b      	lsls	r3, r3, #4
 8003bcc:	1a9b      	subs	r3, r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	440b      	add	r3, r1
 8003bd2:	3326      	adds	r3, #38	@ 0x26
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00b      	beq.n	8003bf2 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003bda:	78fa      	ldrb	r2, [r7, #3]
 8003bdc:	6879      	ldr	r1, [r7, #4]
 8003bde:	4613      	mov	r3, r2
 8003be0:	011b      	lsls	r3, r3, #4
 8003be2:	1a9b      	subs	r3, r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	440b      	add	r3, r1
 8003be8:	3326      	adds	r3, #38	@ 0x26
 8003bea:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	f040 8136 	bne.w	8003e5e <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003bf2:	78fb      	ldrb	r3, [r7, #3]
 8003bf4:	015a      	lsls	r2, r3, #5
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003c08:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003c10:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003c12:	78fb      	ldrb	r3, [r7, #3]
 8003c14:	015a      	lsls	r2, r3, #5
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	4413      	add	r3, r2
 8003c1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c1e:	461a      	mov	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6013      	str	r3, [r2, #0]
 8003c24:	e11b      	b.n	8003e5e <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003c26:	78fa      	ldrb	r2, [r7, #3]
 8003c28:	6879      	ldr	r1, [r7, #4]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	1a9b      	subs	r3, r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	440b      	add	r3, r1
 8003c34:	334d      	adds	r3, #77	@ 0x4d
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	2b03      	cmp	r3, #3
 8003c3a:	f040 8081 	bne.w	8003d40 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c3e:	78fa      	ldrb	r2, [r7, #3]
 8003c40:	6879      	ldr	r1, [r7, #4]
 8003c42:	4613      	mov	r3, r2
 8003c44:	011b      	lsls	r3, r3, #4
 8003c46:	1a9b      	subs	r3, r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	440b      	add	r3, r1
 8003c4c:	334d      	adds	r3, #77	@ 0x4d
 8003c4e:	2202      	movs	r2, #2
 8003c50:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003c52:	78fa      	ldrb	r2, [r7, #3]
 8003c54:	6879      	ldr	r1, [r7, #4]
 8003c56:	4613      	mov	r3, r2
 8003c58:	011b      	lsls	r3, r3, #4
 8003c5a:	1a9b      	subs	r3, r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	440b      	add	r3, r1
 8003c60:	331b      	adds	r3, #27
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	f040 80fa 	bne.w	8003e5e <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c6a:	78fa      	ldrb	r2, [r7, #3]
 8003c6c:	6879      	ldr	r1, [r7, #4]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	011b      	lsls	r3, r3, #4
 8003c72:	1a9b      	subs	r3, r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	440b      	add	r3, r1
 8003c78:	334c      	adds	r3, #76	@ 0x4c
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003c7e:	78fb      	ldrb	r3, [r7, #3]
 8003c80:	015a      	lsls	r2, r3, #5
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	4413      	add	r3, r2
 8003c86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	78fa      	ldrb	r2, [r7, #3]
 8003c8e:	0151      	lsls	r1, r2, #5
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	440a      	add	r2, r1
 8003c94:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003c98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c9c:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003c9e:	78fb      	ldrb	r3, [r7, #3]
 8003ca0:	015a      	lsls	r2, r3, #5
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	78fa      	ldrb	r2, [r7, #3]
 8003cae:	0151      	lsls	r1, r2, #5
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	440a      	add	r2, r1
 8003cb4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003cb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cbc:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003cbe:	78fb      	ldrb	r3, [r7, #3]
 8003cc0:	015a      	lsls	r2, r3, #5
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	78fa      	ldrb	r2, [r7, #3]
 8003cce:	0151      	lsls	r1, r2, #5
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	440a      	add	r2, r1
 8003cd4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003cd8:	f023 0320 	bic.w	r3, r3, #32
 8003cdc:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003cde:	78fa      	ldrb	r2, [r7, #3]
 8003ce0:	6879      	ldr	r1, [r7, #4]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	011b      	lsls	r3, r3, #4
 8003ce6:	1a9b      	subs	r3, r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	440b      	add	r3, r1
 8003cec:	3326      	adds	r3, #38	@ 0x26
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00b      	beq.n	8003d0c <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003cf4:	78fa      	ldrb	r2, [r7, #3]
 8003cf6:	6879      	ldr	r1, [r7, #4]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	011b      	lsls	r3, r3, #4
 8003cfc:	1a9b      	subs	r3, r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	440b      	add	r3, r1
 8003d02:	3326      	adds	r3, #38	@ 0x26
 8003d04:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	f040 80a9 	bne.w	8003e5e <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003d0c:	78fb      	ldrb	r3, [r7, #3]
 8003d0e:	015a      	lsls	r2, r3, #5
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	4413      	add	r3, r2
 8003d14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003d22:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003d2a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003d2c:	78fb      	ldrb	r3, [r7, #3]
 8003d2e:	015a      	lsls	r2, r3, #5
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	4413      	add	r3, r2
 8003d34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d38:	461a      	mov	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6013      	str	r3, [r2, #0]
 8003d3e:	e08e      	b.n	8003e5e <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003d40:	78fa      	ldrb	r2, [r7, #3]
 8003d42:	6879      	ldr	r1, [r7, #4]
 8003d44:	4613      	mov	r3, r2
 8003d46:	011b      	lsls	r3, r3, #4
 8003d48:	1a9b      	subs	r3, r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	440b      	add	r3, r1
 8003d4e:	334d      	adds	r3, #77	@ 0x4d
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	d143      	bne.n	8003dde <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d56:	78fa      	ldrb	r2, [r7, #3]
 8003d58:	6879      	ldr	r1, [r7, #4]
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	011b      	lsls	r3, r3, #4
 8003d5e:	1a9b      	subs	r3, r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	440b      	add	r3, r1
 8003d64:	334d      	adds	r3, #77	@ 0x4d
 8003d66:	2202      	movs	r2, #2
 8003d68:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d6a:	78fa      	ldrb	r2, [r7, #3]
 8003d6c:	6879      	ldr	r1, [r7, #4]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	011b      	lsls	r3, r3, #4
 8003d72:	1a9b      	subs	r3, r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	440b      	add	r3, r1
 8003d78:	334c      	adds	r3, #76	@ 0x4c
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003d7e:	78fa      	ldrb	r2, [r7, #3]
 8003d80:	6879      	ldr	r1, [r7, #4]
 8003d82:	4613      	mov	r3, r2
 8003d84:	011b      	lsls	r3, r3, #4
 8003d86:	1a9b      	subs	r3, r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	440b      	add	r3, r1
 8003d8c:	3326      	adds	r3, #38	@ 0x26
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00a      	beq.n	8003daa <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003d94:	78fa      	ldrb	r2, [r7, #3]
 8003d96:	6879      	ldr	r1, [r7, #4]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	011b      	lsls	r3, r3, #4
 8003d9c:	1a9b      	subs	r3, r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	440b      	add	r3, r1
 8003da2:	3326      	adds	r3, #38	@ 0x26
 8003da4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d159      	bne.n	8003e5e <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003daa:	78fb      	ldrb	r3, [r7, #3]
 8003dac:	015a      	lsls	r2, r3, #5
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	4413      	add	r3, r2
 8003db2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003dc0:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003dc8:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003dca:	78fb      	ldrb	r3, [r7, #3]
 8003dcc:	015a      	lsls	r2, r3, #5
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6013      	str	r3, [r2, #0]
 8003ddc:	e03f      	b.n	8003e5e <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003dde:	78fa      	ldrb	r2, [r7, #3]
 8003de0:	6879      	ldr	r1, [r7, #4]
 8003de2:	4613      	mov	r3, r2
 8003de4:	011b      	lsls	r3, r3, #4
 8003de6:	1a9b      	subs	r3, r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	440b      	add	r3, r1
 8003dec:	334d      	adds	r3, #77	@ 0x4d
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	2b08      	cmp	r3, #8
 8003df2:	d126      	bne.n	8003e42 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003df4:	78fa      	ldrb	r2, [r7, #3]
 8003df6:	6879      	ldr	r1, [r7, #4]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	011b      	lsls	r3, r3, #4
 8003dfc:	1a9b      	subs	r3, r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	440b      	add	r3, r1
 8003e02:	334d      	adds	r3, #77	@ 0x4d
 8003e04:	2202      	movs	r2, #2
 8003e06:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003e08:	78fa      	ldrb	r2, [r7, #3]
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	011b      	lsls	r3, r3, #4
 8003e10:	1a9b      	subs	r3, r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	440b      	add	r3, r1
 8003e16:	3344      	adds	r3, #68	@ 0x44
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	1c59      	adds	r1, r3, #1
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	011b      	lsls	r3, r3, #4
 8003e22:	1a9b      	subs	r3, r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	4403      	add	r3, r0
 8003e28:	3344      	adds	r3, #68	@ 0x44
 8003e2a:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003e2c:	78fa      	ldrb	r2, [r7, #3]
 8003e2e:	6879      	ldr	r1, [r7, #4]
 8003e30:	4613      	mov	r3, r2
 8003e32:	011b      	lsls	r3, r3, #4
 8003e34:	1a9b      	subs	r3, r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	440b      	add	r3, r1
 8003e3a:	334c      	adds	r3, #76	@ 0x4c
 8003e3c:	2204      	movs	r2, #4
 8003e3e:	701a      	strb	r2, [r3, #0]
 8003e40:	e00d      	b.n	8003e5e <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003e42:	78fa      	ldrb	r2, [r7, #3]
 8003e44:	6879      	ldr	r1, [r7, #4]
 8003e46:	4613      	mov	r3, r2
 8003e48:	011b      	lsls	r3, r3, #4
 8003e4a:	1a9b      	subs	r3, r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	440b      	add	r3, r1
 8003e50:	334d      	adds	r3, #77	@ 0x4d
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	f000 8100 	beq.w	800405a <HCD_HC_IN_IRQHandler+0xcca>
 8003e5a:	e000      	b.n	8003e5e <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003e5c:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003e5e:	78fa      	ldrb	r2, [r7, #3]
 8003e60:	6879      	ldr	r1, [r7, #4]
 8003e62:	4613      	mov	r3, r2
 8003e64:	011b      	lsls	r3, r3, #4
 8003e66:	1a9b      	subs	r3, r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	440b      	add	r3, r1
 8003e6c:	334c      	adds	r3, #76	@ 0x4c
 8003e6e:	781a      	ldrb	r2, [r3, #0]
 8003e70:	78fb      	ldrb	r3, [r7, #3]
 8003e72:	4619      	mov	r1, r3
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f004 fb46 	bl	8008506 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003e7a:	e0ef      	b.n	800405c <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	78fa      	ldrb	r2, [r7, #3]
 8003e82:	4611      	mov	r1, r2
 8003e84:	4618      	mov	r0, r3
 8003e86:	f004 f846 	bl	8007f16 <USB_ReadChInterrupts>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e90:	2b40      	cmp	r3, #64	@ 0x40
 8003e92:	d12f      	bne.n	8003ef4 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003e94:	78fb      	ldrb	r3, [r7, #3]
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	2340      	movs	r3, #64	@ 0x40
 8003ea4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003ea6:	78fa      	ldrb	r2, [r7, #3]
 8003ea8:	6879      	ldr	r1, [r7, #4]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	011b      	lsls	r3, r3, #4
 8003eae:	1a9b      	subs	r3, r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	440b      	add	r3, r1
 8003eb4:	334d      	adds	r3, #77	@ 0x4d
 8003eb6:	2205      	movs	r2, #5
 8003eb8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003eba:	78fa      	ldrb	r2, [r7, #3]
 8003ebc:	6879      	ldr	r1, [r7, #4]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	011b      	lsls	r3, r3, #4
 8003ec2:	1a9b      	subs	r3, r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	440b      	add	r3, r1
 8003ec8:	331a      	adds	r3, #26
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d109      	bne.n	8003ee4 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003ed0:	78fa      	ldrb	r2, [r7, #3]
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	1a9b      	subs	r3, r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	440b      	add	r3, r1
 8003ede:	3344      	adds	r3, #68	@ 0x44
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	78fa      	ldrb	r2, [r7, #3]
 8003eea:	4611      	mov	r1, r2
 8003eec:	4618      	mov	r0, r3
 8003eee:	f004 f88f 	bl	8008010 <USB_HC_Halt>
 8003ef2:	e0b3      	b.n	800405c <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	78fa      	ldrb	r2, [r7, #3]
 8003efa:	4611      	mov	r1, r2
 8003efc:	4618      	mov	r0, r3
 8003efe:	f004 f80a 	bl	8007f16 <USB_ReadChInterrupts>
 8003f02:	4603      	mov	r3, r0
 8003f04:	f003 0310 	and.w	r3, r3, #16
 8003f08:	2b10      	cmp	r3, #16
 8003f0a:	f040 80a7 	bne.w	800405c <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003f0e:	78fa      	ldrb	r2, [r7, #3]
 8003f10:	6879      	ldr	r1, [r7, #4]
 8003f12:	4613      	mov	r3, r2
 8003f14:	011b      	lsls	r3, r3, #4
 8003f16:	1a9b      	subs	r3, r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	440b      	add	r3, r1
 8003f1c:	3326      	adds	r3, #38	@ 0x26
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	2b03      	cmp	r3, #3
 8003f22:	d11b      	bne.n	8003f5c <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003f24:	78fa      	ldrb	r2, [r7, #3]
 8003f26:	6879      	ldr	r1, [r7, #4]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	011b      	lsls	r3, r3, #4
 8003f2c:	1a9b      	subs	r3, r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	440b      	add	r3, r1
 8003f32:	3344      	adds	r3, #68	@ 0x44
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003f38:	78fa      	ldrb	r2, [r7, #3]
 8003f3a:	6879      	ldr	r1, [r7, #4]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	011b      	lsls	r3, r3, #4
 8003f40:	1a9b      	subs	r3, r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	440b      	add	r3, r1
 8003f46:	334d      	adds	r3, #77	@ 0x4d
 8003f48:	2204      	movs	r2, #4
 8003f4a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	78fa      	ldrb	r2, [r7, #3]
 8003f52:	4611      	mov	r1, r2
 8003f54:	4618      	mov	r0, r3
 8003f56:	f004 f85b 	bl	8008010 <USB_HC_Halt>
 8003f5a:	e03f      	b.n	8003fdc <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003f5c:	78fa      	ldrb	r2, [r7, #3]
 8003f5e:	6879      	ldr	r1, [r7, #4]
 8003f60:	4613      	mov	r3, r2
 8003f62:	011b      	lsls	r3, r3, #4
 8003f64:	1a9b      	subs	r3, r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	440b      	add	r3, r1
 8003f6a:	3326      	adds	r3, #38	@ 0x26
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00a      	beq.n	8003f88 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003f72:	78fa      	ldrb	r2, [r7, #3]
 8003f74:	6879      	ldr	r1, [r7, #4]
 8003f76:	4613      	mov	r3, r2
 8003f78:	011b      	lsls	r3, r3, #4
 8003f7a:	1a9b      	subs	r3, r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	440b      	add	r3, r1
 8003f80:	3326      	adds	r3, #38	@ 0x26
 8003f82:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d129      	bne.n	8003fdc <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003f88:	78fa      	ldrb	r2, [r7, #3]
 8003f8a:	6879      	ldr	r1, [r7, #4]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	011b      	lsls	r3, r3, #4
 8003f90:	1a9b      	subs	r3, r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	440b      	add	r3, r1
 8003f96:	3344      	adds	r3, #68	@ 0x44
 8003f98:	2200      	movs	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	799b      	ldrb	r3, [r3, #6]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00a      	beq.n	8003fba <HCD_HC_IN_IRQHandler+0xc2a>
 8003fa4:	78fa      	ldrb	r2, [r7, #3]
 8003fa6:	6879      	ldr	r1, [r7, #4]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	011b      	lsls	r3, r3, #4
 8003fac:	1a9b      	subs	r3, r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	440b      	add	r3, r1
 8003fb2:	331b      	adds	r3, #27
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d110      	bne.n	8003fdc <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003fba:	78fa      	ldrb	r2, [r7, #3]
 8003fbc:	6879      	ldr	r1, [r7, #4]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	011b      	lsls	r3, r3, #4
 8003fc2:	1a9b      	subs	r3, r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	440b      	add	r3, r1
 8003fc8:	334d      	adds	r3, #77	@ 0x4d
 8003fca:	2204      	movs	r2, #4
 8003fcc:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	78fa      	ldrb	r2, [r7, #3]
 8003fd4:	4611      	mov	r1, r2
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f004 f81a 	bl	8008010 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003fdc:	78fa      	ldrb	r2, [r7, #3]
 8003fde:	6879      	ldr	r1, [r7, #4]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	011b      	lsls	r3, r3, #4
 8003fe4:	1a9b      	subs	r3, r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	440b      	add	r3, r1
 8003fea:	331b      	adds	r3, #27
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d129      	bne.n	8004046 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003ff2:	78fa      	ldrb	r2, [r7, #3]
 8003ff4:	6879      	ldr	r1, [r7, #4]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	011b      	lsls	r3, r3, #4
 8003ffa:	1a9b      	subs	r3, r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	440b      	add	r3, r1
 8004000:	331b      	adds	r3, #27
 8004002:	2200      	movs	r2, #0
 8004004:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004006:	78fb      	ldrb	r3, [r7, #3]
 8004008:	015a      	lsls	r2, r3, #5
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	4413      	add	r3, r2
 800400e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	78fa      	ldrb	r2, [r7, #3]
 8004016:	0151      	lsls	r1, r2, #5
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	440a      	add	r2, r1
 800401c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004020:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004024:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004026:	78fb      	ldrb	r3, [r7, #3]
 8004028:	015a      	lsls	r2, r3, #5
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	4413      	add	r3, r2
 800402e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	78fa      	ldrb	r2, [r7, #3]
 8004036:	0151      	lsls	r1, r2, #5
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	440a      	add	r2, r1
 800403c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004040:	f043 0320 	orr.w	r3, r3, #32
 8004044:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004046:	78fb      	ldrb	r3, [r7, #3]
 8004048:	015a      	lsls	r2, r3, #5
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	4413      	add	r3, r2
 800404e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004052:	461a      	mov	r2, r3
 8004054:	2310      	movs	r3, #16
 8004056:	6093      	str	r3, [r2, #8]
 8004058:	e000      	b.n	800405c <HCD_HC_IN_IRQHandler+0xccc>
        return;
 800405a:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800405c:	3718      	adds	r7, #24
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b086      	sub	sp, #24
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
 800406a:	460b      	mov	r3, r1
 800406c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	78fa      	ldrb	r2, [r7, #3]
 800407e:	4611      	mov	r1, r2
 8004080:	4618      	mov	r0, r3
 8004082:	f003 ff48 	bl	8007f16 <USB_ReadChInterrupts>
 8004086:	4603      	mov	r3, r0
 8004088:	f003 0304 	and.w	r3, r3, #4
 800408c:	2b04      	cmp	r3, #4
 800408e:	d11b      	bne.n	80040c8 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004090:	78fb      	ldrb	r3, [r7, #3]
 8004092:	015a      	lsls	r2, r3, #5
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	4413      	add	r3, r2
 8004098:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800409c:	461a      	mov	r2, r3
 800409e:	2304      	movs	r3, #4
 80040a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80040a2:	78fa      	ldrb	r2, [r7, #3]
 80040a4:	6879      	ldr	r1, [r7, #4]
 80040a6:	4613      	mov	r3, r2
 80040a8:	011b      	lsls	r3, r3, #4
 80040aa:	1a9b      	subs	r3, r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	440b      	add	r3, r1
 80040b0:	334d      	adds	r3, #77	@ 0x4d
 80040b2:	2207      	movs	r2, #7
 80040b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	78fa      	ldrb	r2, [r7, #3]
 80040bc:	4611      	mov	r1, r2
 80040be:	4618      	mov	r0, r3
 80040c0:	f003 ffa6 	bl	8008010 <USB_HC_Halt>
 80040c4:	f000 bc89 	b.w	80049da <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	78fa      	ldrb	r2, [r7, #3]
 80040ce:	4611      	mov	r1, r2
 80040d0:	4618      	mov	r0, r3
 80040d2:	f003 ff20 	bl	8007f16 <USB_ReadChInterrupts>
 80040d6:	4603      	mov	r3, r0
 80040d8:	f003 0320 	and.w	r3, r3, #32
 80040dc:	2b20      	cmp	r3, #32
 80040de:	f040 8082 	bne.w	80041e6 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80040e2:	78fb      	ldrb	r3, [r7, #3]
 80040e4:	015a      	lsls	r2, r3, #5
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	4413      	add	r3, r2
 80040ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040ee:	461a      	mov	r2, r3
 80040f0:	2320      	movs	r3, #32
 80040f2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80040f4:	78fa      	ldrb	r2, [r7, #3]
 80040f6:	6879      	ldr	r1, [r7, #4]
 80040f8:	4613      	mov	r3, r2
 80040fa:	011b      	lsls	r3, r3, #4
 80040fc:	1a9b      	subs	r3, r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	440b      	add	r3, r1
 8004102:	3319      	adds	r3, #25
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d124      	bne.n	8004154 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800410a:	78fa      	ldrb	r2, [r7, #3]
 800410c:	6879      	ldr	r1, [r7, #4]
 800410e:	4613      	mov	r3, r2
 8004110:	011b      	lsls	r3, r3, #4
 8004112:	1a9b      	subs	r3, r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	440b      	add	r3, r1
 8004118:	3319      	adds	r3, #25
 800411a:	2200      	movs	r2, #0
 800411c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800411e:	78fa      	ldrb	r2, [r7, #3]
 8004120:	6879      	ldr	r1, [r7, #4]
 8004122:	4613      	mov	r3, r2
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	1a9b      	subs	r3, r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	440b      	add	r3, r1
 800412c:	334c      	adds	r3, #76	@ 0x4c
 800412e:	2202      	movs	r2, #2
 8004130:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004132:	78fa      	ldrb	r2, [r7, #3]
 8004134:	6879      	ldr	r1, [r7, #4]
 8004136:	4613      	mov	r3, r2
 8004138:	011b      	lsls	r3, r3, #4
 800413a:	1a9b      	subs	r3, r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	440b      	add	r3, r1
 8004140:	334d      	adds	r3, #77	@ 0x4d
 8004142:	2203      	movs	r2, #3
 8004144:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	78fa      	ldrb	r2, [r7, #3]
 800414c:	4611      	mov	r1, r2
 800414e:	4618      	mov	r0, r3
 8004150:	f003 ff5e 	bl	8008010 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004154:	78fa      	ldrb	r2, [r7, #3]
 8004156:	6879      	ldr	r1, [r7, #4]
 8004158:	4613      	mov	r3, r2
 800415a:	011b      	lsls	r3, r3, #4
 800415c:	1a9b      	subs	r3, r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	440b      	add	r3, r1
 8004162:	331a      	adds	r3, #26
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	2b01      	cmp	r3, #1
 8004168:	f040 8437 	bne.w	80049da <HCD_HC_OUT_IRQHandler+0x978>
 800416c:	78fa      	ldrb	r2, [r7, #3]
 800416e:	6879      	ldr	r1, [r7, #4]
 8004170:	4613      	mov	r3, r2
 8004172:	011b      	lsls	r3, r3, #4
 8004174:	1a9b      	subs	r3, r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	440b      	add	r3, r1
 800417a:	331b      	adds	r3, #27
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	f040 842b 	bne.w	80049da <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004184:	78fa      	ldrb	r2, [r7, #3]
 8004186:	6879      	ldr	r1, [r7, #4]
 8004188:	4613      	mov	r3, r2
 800418a:	011b      	lsls	r3, r3, #4
 800418c:	1a9b      	subs	r3, r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	440b      	add	r3, r1
 8004192:	3326      	adds	r3, #38	@ 0x26
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d009      	beq.n	80041ae <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800419a:	78fa      	ldrb	r2, [r7, #3]
 800419c:	6879      	ldr	r1, [r7, #4]
 800419e:	4613      	mov	r3, r2
 80041a0:	011b      	lsls	r3, r3, #4
 80041a2:	1a9b      	subs	r3, r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	440b      	add	r3, r1
 80041a8:	331b      	adds	r3, #27
 80041aa:	2201      	movs	r2, #1
 80041ac:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80041ae:	78fa      	ldrb	r2, [r7, #3]
 80041b0:	6879      	ldr	r1, [r7, #4]
 80041b2:	4613      	mov	r3, r2
 80041b4:	011b      	lsls	r3, r3, #4
 80041b6:	1a9b      	subs	r3, r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	440b      	add	r3, r1
 80041bc:	334d      	adds	r3, #77	@ 0x4d
 80041be:	2203      	movs	r2, #3
 80041c0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	78fa      	ldrb	r2, [r7, #3]
 80041c8:	4611      	mov	r1, r2
 80041ca:	4618      	mov	r0, r3
 80041cc:	f003 ff20 	bl	8008010 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80041d0:	78fa      	ldrb	r2, [r7, #3]
 80041d2:	6879      	ldr	r1, [r7, #4]
 80041d4:	4613      	mov	r3, r2
 80041d6:	011b      	lsls	r3, r3, #4
 80041d8:	1a9b      	subs	r3, r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	440b      	add	r3, r1
 80041de:	3344      	adds	r3, #68	@ 0x44
 80041e0:	2200      	movs	r2, #0
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	e3f9      	b.n	80049da <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	78fa      	ldrb	r2, [r7, #3]
 80041ec:	4611      	mov	r1, r2
 80041ee:	4618      	mov	r0, r3
 80041f0:	f003 fe91 	bl	8007f16 <USB_ReadChInterrupts>
 80041f4:	4603      	mov	r3, r0
 80041f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041fe:	d111      	bne.n	8004224 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004200:	78fb      	ldrb	r3, [r7, #3]
 8004202:	015a      	lsls	r2, r3, #5
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	4413      	add	r3, r2
 8004208:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800420c:	461a      	mov	r2, r3
 800420e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004212:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	78fa      	ldrb	r2, [r7, #3]
 800421a:	4611      	mov	r1, r2
 800421c:	4618      	mov	r0, r3
 800421e:	f003 fef7 	bl	8008010 <USB_HC_Halt>
 8004222:	e3da      	b.n	80049da <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	78fa      	ldrb	r2, [r7, #3]
 800422a:	4611      	mov	r1, r2
 800422c:	4618      	mov	r0, r3
 800422e:	f003 fe72 	bl	8007f16 <USB_ReadChInterrupts>
 8004232:	4603      	mov	r3, r0
 8004234:	f003 0301 	and.w	r3, r3, #1
 8004238:	2b01      	cmp	r3, #1
 800423a:	d168      	bne.n	800430e <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800423c:	78fa      	ldrb	r2, [r7, #3]
 800423e:	6879      	ldr	r1, [r7, #4]
 8004240:	4613      	mov	r3, r2
 8004242:	011b      	lsls	r3, r3, #4
 8004244:	1a9b      	subs	r3, r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	440b      	add	r3, r1
 800424a:	3344      	adds	r3, #68	@ 0x44
 800424c:	2200      	movs	r2, #0
 800424e:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	78fa      	ldrb	r2, [r7, #3]
 8004256:	4611      	mov	r1, r2
 8004258:	4618      	mov	r0, r3
 800425a:	f003 fe5c 	bl	8007f16 <USB_ReadChInterrupts>
 800425e:	4603      	mov	r3, r0
 8004260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004264:	2b40      	cmp	r3, #64	@ 0x40
 8004266:	d112      	bne.n	800428e <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004268:	78fa      	ldrb	r2, [r7, #3]
 800426a:	6879      	ldr	r1, [r7, #4]
 800426c:	4613      	mov	r3, r2
 800426e:	011b      	lsls	r3, r3, #4
 8004270:	1a9b      	subs	r3, r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	440b      	add	r3, r1
 8004276:	3319      	adds	r3, #25
 8004278:	2201      	movs	r2, #1
 800427a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800427c:	78fb      	ldrb	r3, [r7, #3]
 800427e:	015a      	lsls	r2, r3, #5
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	4413      	add	r3, r2
 8004284:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004288:	461a      	mov	r2, r3
 800428a:	2340      	movs	r3, #64	@ 0x40
 800428c:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800428e:	78fa      	ldrb	r2, [r7, #3]
 8004290:	6879      	ldr	r1, [r7, #4]
 8004292:	4613      	mov	r3, r2
 8004294:	011b      	lsls	r3, r3, #4
 8004296:	1a9b      	subs	r3, r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	440b      	add	r3, r1
 800429c:	331b      	adds	r3, #27
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d019      	beq.n	80042d8 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80042a4:	78fa      	ldrb	r2, [r7, #3]
 80042a6:	6879      	ldr	r1, [r7, #4]
 80042a8:	4613      	mov	r3, r2
 80042aa:	011b      	lsls	r3, r3, #4
 80042ac:	1a9b      	subs	r3, r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	440b      	add	r3, r1
 80042b2:	331b      	adds	r3, #27
 80042b4:	2200      	movs	r2, #0
 80042b6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80042b8:	78fb      	ldrb	r3, [r7, #3]
 80042ba:	015a      	lsls	r2, r3, #5
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	4413      	add	r3, r2
 80042c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	78fa      	ldrb	r2, [r7, #3]
 80042c8:	0151      	lsls	r1, r2, #5
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	440a      	add	r2, r1
 80042ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80042d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042d6:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80042d8:	78fb      	ldrb	r3, [r7, #3]
 80042da:	015a      	lsls	r2, r3, #5
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	4413      	add	r3, r2
 80042e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042e4:	461a      	mov	r2, r3
 80042e6:	2301      	movs	r3, #1
 80042e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80042ea:	78fa      	ldrb	r2, [r7, #3]
 80042ec:	6879      	ldr	r1, [r7, #4]
 80042ee:	4613      	mov	r3, r2
 80042f0:	011b      	lsls	r3, r3, #4
 80042f2:	1a9b      	subs	r3, r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	440b      	add	r3, r1
 80042f8:	334d      	adds	r3, #77	@ 0x4d
 80042fa:	2201      	movs	r2, #1
 80042fc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	78fa      	ldrb	r2, [r7, #3]
 8004304:	4611      	mov	r1, r2
 8004306:	4618      	mov	r0, r3
 8004308:	f003 fe82 	bl	8008010 <USB_HC_Halt>
 800430c:	e365      	b.n	80049da <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	78fa      	ldrb	r2, [r7, #3]
 8004314:	4611      	mov	r1, r2
 8004316:	4618      	mov	r0, r3
 8004318:	f003 fdfd 	bl	8007f16 <USB_ReadChInterrupts>
 800431c:	4603      	mov	r3, r0
 800431e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004322:	2b40      	cmp	r3, #64	@ 0x40
 8004324:	d139      	bne.n	800439a <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004326:	78fa      	ldrb	r2, [r7, #3]
 8004328:	6879      	ldr	r1, [r7, #4]
 800432a:	4613      	mov	r3, r2
 800432c:	011b      	lsls	r3, r3, #4
 800432e:	1a9b      	subs	r3, r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	440b      	add	r3, r1
 8004334:	334d      	adds	r3, #77	@ 0x4d
 8004336:	2205      	movs	r2, #5
 8004338:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800433a:	78fa      	ldrb	r2, [r7, #3]
 800433c:	6879      	ldr	r1, [r7, #4]
 800433e:	4613      	mov	r3, r2
 8004340:	011b      	lsls	r3, r3, #4
 8004342:	1a9b      	subs	r3, r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	440b      	add	r3, r1
 8004348:	331a      	adds	r3, #26
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d109      	bne.n	8004364 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004350:	78fa      	ldrb	r2, [r7, #3]
 8004352:	6879      	ldr	r1, [r7, #4]
 8004354:	4613      	mov	r3, r2
 8004356:	011b      	lsls	r3, r3, #4
 8004358:	1a9b      	subs	r3, r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	440b      	add	r3, r1
 800435e:	3319      	adds	r3, #25
 8004360:	2201      	movs	r2, #1
 8004362:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004364:	78fa      	ldrb	r2, [r7, #3]
 8004366:	6879      	ldr	r1, [r7, #4]
 8004368:	4613      	mov	r3, r2
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	1a9b      	subs	r3, r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	440b      	add	r3, r1
 8004372:	3344      	adds	r3, #68	@ 0x44
 8004374:	2200      	movs	r2, #0
 8004376:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	78fa      	ldrb	r2, [r7, #3]
 800437e:	4611      	mov	r1, r2
 8004380:	4618      	mov	r0, r3
 8004382:	f003 fe45 	bl	8008010 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004386:	78fb      	ldrb	r3, [r7, #3]
 8004388:	015a      	lsls	r2, r3, #5
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	4413      	add	r3, r2
 800438e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004392:	461a      	mov	r2, r3
 8004394:	2340      	movs	r3, #64	@ 0x40
 8004396:	6093      	str	r3, [r2, #8]
 8004398:	e31f      	b.n	80049da <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	78fa      	ldrb	r2, [r7, #3]
 80043a0:	4611      	mov	r1, r2
 80043a2:	4618      	mov	r0, r3
 80043a4:	f003 fdb7 	bl	8007f16 <USB_ReadChInterrupts>
 80043a8:	4603      	mov	r3, r0
 80043aa:	f003 0308 	and.w	r3, r3, #8
 80043ae:	2b08      	cmp	r3, #8
 80043b0:	d11a      	bne.n	80043e8 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80043b2:	78fb      	ldrb	r3, [r7, #3]
 80043b4:	015a      	lsls	r2, r3, #5
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	4413      	add	r3, r2
 80043ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043be:	461a      	mov	r2, r3
 80043c0:	2308      	movs	r3, #8
 80043c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80043c4:	78fa      	ldrb	r2, [r7, #3]
 80043c6:	6879      	ldr	r1, [r7, #4]
 80043c8:	4613      	mov	r3, r2
 80043ca:	011b      	lsls	r3, r3, #4
 80043cc:	1a9b      	subs	r3, r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	440b      	add	r3, r1
 80043d2:	334d      	adds	r3, #77	@ 0x4d
 80043d4:	2206      	movs	r2, #6
 80043d6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	78fa      	ldrb	r2, [r7, #3]
 80043de:	4611      	mov	r1, r2
 80043e0:	4618      	mov	r0, r3
 80043e2:	f003 fe15 	bl	8008010 <USB_HC_Halt>
 80043e6:	e2f8      	b.n	80049da <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	78fa      	ldrb	r2, [r7, #3]
 80043ee:	4611      	mov	r1, r2
 80043f0:	4618      	mov	r0, r3
 80043f2:	f003 fd90 	bl	8007f16 <USB_ReadChInterrupts>
 80043f6:	4603      	mov	r3, r0
 80043f8:	f003 0310 	and.w	r3, r3, #16
 80043fc:	2b10      	cmp	r3, #16
 80043fe:	d144      	bne.n	800448a <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004400:	78fa      	ldrb	r2, [r7, #3]
 8004402:	6879      	ldr	r1, [r7, #4]
 8004404:	4613      	mov	r3, r2
 8004406:	011b      	lsls	r3, r3, #4
 8004408:	1a9b      	subs	r3, r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	440b      	add	r3, r1
 800440e:	3344      	adds	r3, #68	@ 0x44
 8004410:	2200      	movs	r2, #0
 8004412:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004414:	78fa      	ldrb	r2, [r7, #3]
 8004416:	6879      	ldr	r1, [r7, #4]
 8004418:	4613      	mov	r3, r2
 800441a:	011b      	lsls	r3, r3, #4
 800441c:	1a9b      	subs	r3, r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	440b      	add	r3, r1
 8004422:	334d      	adds	r3, #77	@ 0x4d
 8004424:	2204      	movs	r2, #4
 8004426:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004428:	78fa      	ldrb	r2, [r7, #3]
 800442a:	6879      	ldr	r1, [r7, #4]
 800442c:	4613      	mov	r3, r2
 800442e:	011b      	lsls	r3, r3, #4
 8004430:	1a9b      	subs	r3, r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	440b      	add	r3, r1
 8004436:	3319      	adds	r3, #25
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d114      	bne.n	8004468 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800443e:	78fa      	ldrb	r2, [r7, #3]
 8004440:	6879      	ldr	r1, [r7, #4]
 8004442:	4613      	mov	r3, r2
 8004444:	011b      	lsls	r3, r3, #4
 8004446:	1a9b      	subs	r3, r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	440b      	add	r3, r1
 800444c:	3318      	adds	r3, #24
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d109      	bne.n	8004468 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004454:	78fa      	ldrb	r2, [r7, #3]
 8004456:	6879      	ldr	r1, [r7, #4]
 8004458:	4613      	mov	r3, r2
 800445a:	011b      	lsls	r3, r3, #4
 800445c:	1a9b      	subs	r3, r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	440b      	add	r3, r1
 8004462:	3319      	adds	r3, #25
 8004464:	2201      	movs	r2, #1
 8004466:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	78fa      	ldrb	r2, [r7, #3]
 800446e:	4611      	mov	r1, r2
 8004470:	4618      	mov	r0, r3
 8004472:	f003 fdcd 	bl	8008010 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004476:	78fb      	ldrb	r3, [r7, #3]
 8004478:	015a      	lsls	r2, r3, #5
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	4413      	add	r3, r2
 800447e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004482:	461a      	mov	r2, r3
 8004484:	2310      	movs	r3, #16
 8004486:	6093      	str	r3, [r2, #8]
 8004488:	e2a7      	b.n	80049da <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	78fa      	ldrb	r2, [r7, #3]
 8004490:	4611      	mov	r1, r2
 8004492:	4618      	mov	r0, r3
 8004494:	f003 fd3f 	bl	8007f16 <USB_ReadChInterrupts>
 8004498:	4603      	mov	r3, r0
 800449a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800449e:	2b80      	cmp	r3, #128	@ 0x80
 80044a0:	f040 8083 	bne.w	80045aa <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	799b      	ldrb	r3, [r3, #6]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d111      	bne.n	80044d0 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80044ac:	78fa      	ldrb	r2, [r7, #3]
 80044ae:	6879      	ldr	r1, [r7, #4]
 80044b0:	4613      	mov	r3, r2
 80044b2:	011b      	lsls	r3, r3, #4
 80044b4:	1a9b      	subs	r3, r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	440b      	add	r3, r1
 80044ba:	334d      	adds	r3, #77	@ 0x4d
 80044bc:	2207      	movs	r2, #7
 80044be:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	78fa      	ldrb	r2, [r7, #3]
 80044c6:	4611      	mov	r1, r2
 80044c8:	4618      	mov	r0, r3
 80044ca:	f003 fda1 	bl	8008010 <USB_HC_Halt>
 80044ce:	e062      	b.n	8004596 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80044d0:	78fa      	ldrb	r2, [r7, #3]
 80044d2:	6879      	ldr	r1, [r7, #4]
 80044d4:	4613      	mov	r3, r2
 80044d6:	011b      	lsls	r3, r3, #4
 80044d8:	1a9b      	subs	r3, r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	440b      	add	r3, r1
 80044de:	3344      	adds	r3, #68	@ 0x44
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	1c59      	adds	r1, r3, #1
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	4613      	mov	r3, r2
 80044e8:	011b      	lsls	r3, r3, #4
 80044ea:	1a9b      	subs	r3, r3, r2
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	4403      	add	r3, r0
 80044f0:	3344      	adds	r3, #68	@ 0x44
 80044f2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80044f4:	78fa      	ldrb	r2, [r7, #3]
 80044f6:	6879      	ldr	r1, [r7, #4]
 80044f8:	4613      	mov	r3, r2
 80044fa:	011b      	lsls	r3, r3, #4
 80044fc:	1a9b      	subs	r3, r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	440b      	add	r3, r1
 8004502:	3344      	adds	r3, #68	@ 0x44
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2b02      	cmp	r3, #2
 8004508:	d922      	bls.n	8004550 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800450a:	78fa      	ldrb	r2, [r7, #3]
 800450c:	6879      	ldr	r1, [r7, #4]
 800450e:	4613      	mov	r3, r2
 8004510:	011b      	lsls	r3, r3, #4
 8004512:	1a9b      	subs	r3, r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	440b      	add	r3, r1
 8004518:	3344      	adds	r3, #68	@ 0x44
 800451a:	2200      	movs	r2, #0
 800451c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800451e:	78fa      	ldrb	r2, [r7, #3]
 8004520:	6879      	ldr	r1, [r7, #4]
 8004522:	4613      	mov	r3, r2
 8004524:	011b      	lsls	r3, r3, #4
 8004526:	1a9b      	subs	r3, r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	440b      	add	r3, r1
 800452c:	334c      	adds	r3, #76	@ 0x4c
 800452e:	2204      	movs	r2, #4
 8004530:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004532:	78fa      	ldrb	r2, [r7, #3]
 8004534:	6879      	ldr	r1, [r7, #4]
 8004536:	4613      	mov	r3, r2
 8004538:	011b      	lsls	r3, r3, #4
 800453a:	1a9b      	subs	r3, r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	440b      	add	r3, r1
 8004540:	334c      	adds	r3, #76	@ 0x4c
 8004542:	781a      	ldrb	r2, [r3, #0]
 8004544:	78fb      	ldrb	r3, [r7, #3]
 8004546:	4619      	mov	r1, r3
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f003 ffdc 	bl	8008506 <HAL_HCD_HC_NotifyURBChange_Callback>
 800454e:	e022      	b.n	8004596 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004550:	78fa      	ldrb	r2, [r7, #3]
 8004552:	6879      	ldr	r1, [r7, #4]
 8004554:	4613      	mov	r3, r2
 8004556:	011b      	lsls	r3, r3, #4
 8004558:	1a9b      	subs	r3, r3, r2
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	440b      	add	r3, r1
 800455e:	334c      	adds	r3, #76	@ 0x4c
 8004560:	2202      	movs	r2, #2
 8004562:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004564:	78fb      	ldrb	r3, [r7, #3]
 8004566:	015a      	lsls	r2, r3, #5
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	4413      	add	r3, r2
 800456c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800457a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004582:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004584:	78fb      	ldrb	r3, [r7, #3]
 8004586:	015a      	lsls	r2, r3, #5
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	4413      	add	r3, r2
 800458c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004590:	461a      	mov	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004596:	78fb      	ldrb	r3, [r7, #3]
 8004598:	015a      	lsls	r2, r3, #5
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	4413      	add	r3, r2
 800459e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045a2:	461a      	mov	r2, r3
 80045a4:	2380      	movs	r3, #128	@ 0x80
 80045a6:	6093      	str	r3, [r2, #8]
 80045a8:	e217      	b.n	80049da <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	78fa      	ldrb	r2, [r7, #3]
 80045b0:	4611      	mov	r1, r2
 80045b2:	4618      	mov	r0, r3
 80045b4:	f003 fcaf 	bl	8007f16 <USB_ReadChInterrupts>
 80045b8:	4603      	mov	r3, r0
 80045ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045c2:	d11b      	bne.n	80045fc <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80045c4:	78fa      	ldrb	r2, [r7, #3]
 80045c6:	6879      	ldr	r1, [r7, #4]
 80045c8:	4613      	mov	r3, r2
 80045ca:	011b      	lsls	r3, r3, #4
 80045cc:	1a9b      	subs	r3, r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	440b      	add	r3, r1
 80045d2:	334d      	adds	r3, #77	@ 0x4d
 80045d4:	2209      	movs	r2, #9
 80045d6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	78fa      	ldrb	r2, [r7, #3]
 80045de:	4611      	mov	r1, r2
 80045e0:	4618      	mov	r0, r3
 80045e2:	f003 fd15 	bl	8008010 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80045e6:	78fb      	ldrb	r3, [r7, #3]
 80045e8:	015a      	lsls	r2, r3, #5
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	4413      	add	r3, r2
 80045ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045f2:	461a      	mov	r2, r3
 80045f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80045f8:	6093      	str	r3, [r2, #8]
 80045fa:	e1ee      	b.n	80049da <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	78fa      	ldrb	r2, [r7, #3]
 8004602:	4611      	mov	r1, r2
 8004604:	4618      	mov	r0, r3
 8004606:	f003 fc86 	bl	8007f16 <USB_ReadChInterrupts>
 800460a:	4603      	mov	r3, r0
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b02      	cmp	r3, #2
 8004612:	f040 81df 	bne.w	80049d4 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004616:	78fb      	ldrb	r3, [r7, #3]
 8004618:	015a      	lsls	r2, r3, #5
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	4413      	add	r3, r2
 800461e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004622:	461a      	mov	r2, r3
 8004624:	2302      	movs	r3, #2
 8004626:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004628:	78fa      	ldrb	r2, [r7, #3]
 800462a:	6879      	ldr	r1, [r7, #4]
 800462c:	4613      	mov	r3, r2
 800462e:	011b      	lsls	r3, r3, #4
 8004630:	1a9b      	subs	r3, r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	440b      	add	r3, r1
 8004636:	334d      	adds	r3, #77	@ 0x4d
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	2b01      	cmp	r3, #1
 800463c:	f040 8093 	bne.w	8004766 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004640:	78fa      	ldrb	r2, [r7, #3]
 8004642:	6879      	ldr	r1, [r7, #4]
 8004644:	4613      	mov	r3, r2
 8004646:	011b      	lsls	r3, r3, #4
 8004648:	1a9b      	subs	r3, r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	440b      	add	r3, r1
 800464e:	334d      	adds	r3, #77	@ 0x4d
 8004650:	2202      	movs	r2, #2
 8004652:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004654:	78fa      	ldrb	r2, [r7, #3]
 8004656:	6879      	ldr	r1, [r7, #4]
 8004658:	4613      	mov	r3, r2
 800465a:	011b      	lsls	r3, r3, #4
 800465c:	1a9b      	subs	r3, r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	440b      	add	r3, r1
 8004662:	334c      	adds	r3, #76	@ 0x4c
 8004664:	2201      	movs	r2, #1
 8004666:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004668:	78fa      	ldrb	r2, [r7, #3]
 800466a:	6879      	ldr	r1, [r7, #4]
 800466c:	4613      	mov	r3, r2
 800466e:	011b      	lsls	r3, r3, #4
 8004670:	1a9b      	subs	r3, r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	440b      	add	r3, r1
 8004676:	3326      	adds	r3, #38	@ 0x26
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	2b02      	cmp	r3, #2
 800467c:	d00b      	beq.n	8004696 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800467e:	78fa      	ldrb	r2, [r7, #3]
 8004680:	6879      	ldr	r1, [r7, #4]
 8004682:	4613      	mov	r3, r2
 8004684:	011b      	lsls	r3, r3, #4
 8004686:	1a9b      	subs	r3, r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	440b      	add	r3, r1
 800468c:	3326      	adds	r3, #38	@ 0x26
 800468e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004690:	2b03      	cmp	r3, #3
 8004692:	f040 8190 	bne.w	80049b6 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	799b      	ldrb	r3, [r3, #6]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d115      	bne.n	80046ca <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800469e:	78fa      	ldrb	r2, [r7, #3]
 80046a0:	6879      	ldr	r1, [r7, #4]
 80046a2:	4613      	mov	r3, r2
 80046a4:	011b      	lsls	r3, r3, #4
 80046a6:	1a9b      	subs	r3, r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	440b      	add	r3, r1
 80046ac:	333d      	adds	r3, #61	@ 0x3d
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	78fa      	ldrb	r2, [r7, #3]
 80046b2:	f083 0301 	eor.w	r3, r3, #1
 80046b6:	b2d8      	uxtb	r0, r3
 80046b8:	6879      	ldr	r1, [r7, #4]
 80046ba:	4613      	mov	r3, r2
 80046bc:	011b      	lsls	r3, r3, #4
 80046be:	1a9b      	subs	r3, r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	440b      	add	r3, r1
 80046c4:	333d      	adds	r3, #61	@ 0x3d
 80046c6:	4602      	mov	r2, r0
 80046c8:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	799b      	ldrb	r3, [r3, #6]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	f040 8171 	bne.w	80049b6 <HCD_HC_OUT_IRQHandler+0x954>
 80046d4:	78fa      	ldrb	r2, [r7, #3]
 80046d6:	6879      	ldr	r1, [r7, #4]
 80046d8:	4613      	mov	r3, r2
 80046da:	011b      	lsls	r3, r3, #4
 80046dc:	1a9b      	subs	r3, r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	440b      	add	r3, r1
 80046e2:	3334      	adds	r3, #52	@ 0x34
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f000 8165 	beq.w	80049b6 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80046ec:	78fa      	ldrb	r2, [r7, #3]
 80046ee:	6879      	ldr	r1, [r7, #4]
 80046f0:	4613      	mov	r3, r2
 80046f2:	011b      	lsls	r3, r3, #4
 80046f4:	1a9b      	subs	r3, r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	440b      	add	r3, r1
 80046fa:	3334      	adds	r3, #52	@ 0x34
 80046fc:	6819      	ldr	r1, [r3, #0]
 80046fe:	78fa      	ldrb	r2, [r7, #3]
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	4613      	mov	r3, r2
 8004704:	011b      	lsls	r3, r3, #4
 8004706:	1a9b      	subs	r3, r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	4403      	add	r3, r0
 800470c:	3328      	adds	r3, #40	@ 0x28
 800470e:	881b      	ldrh	r3, [r3, #0]
 8004710:	440b      	add	r3, r1
 8004712:	1e59      	subs	r1, r3, #1
 8004714:	78fa      	ldrb	r2, [r7, #3]
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	4613      	mov	r3, r2
 800471a:	011b      	lsls	r3, r3, #4
 800471c:	1a9b      	subs	r3, r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4403      	add	r3, r0
 8004722:	3328      	adds	r3, #40	@ 0x28
 8004724:	881b      	ldrh	r3, [r3, #0]
 8004726:	fbb1 f3f3 	udiv	r3, r1, r3
 800472a:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 813f 	beq.w	80049b6 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004738:	78fa      	ldrb	r2, [r7, #3]
 800473a:	6879      	ldr	r1, [r7, #4]
 800473c:	4613      	mov	r3, r2
 800473e:	011b      	lsls	r3, r3, #4
 8004740:	1a9b      	subs	r3, r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	440b      	add	r3, r1
 8004746:	333d      	adds	r3, #61	@ 0x3d
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	78fa      	ldrb	r2, [r7, #3]
 800474c:	f083 0301 	eor.w	r3, r3, #1
 8004750:	b2d8      	uxtb	r0, r3
 8004752:	6879      	ldr	r1, [r7, #4]
 8004754:	4613      	mov	r3, r2
 8004756:	011b      	lsls	r3, r3, #4
 8004758:	1a9b      	subs	r3, r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	440b      	add	r3, r1
 800475e:	333d      	adds	r3, #61	@ 0x3d
 8004760:	4602      	mov	r2, r0
 8004762:	701a      	strb	r2, [r3, #0]
 8004764:	e127      	b.n	80049b6 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004766:	78fa      	ldrb	r2, [r7, #3]
 8004768:	6879      	ldr	r1, [r7, #4]
 800476a:	4613      	mov	r3, r2
 800476c:	011b      	lsls	r3, r3, #4
 800476e:	1a9b      	subs	r3, r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	440b      	add	r3, r1
 8004774:	334d      	adds	r3, #77	@ 0x4d
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	2b03      	cmp	r3, #3
 800477a:	d120      	bne.n	80047be <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800477c:	78fa      	ldrb	r2, [r7, #3]
 800477e:	6879      	ldr	r1, [r7, #4]
 8004780:	4613      	mov	r3, r2
 8004782:	011b      	lsls	r3, r3, #4
 8004784:	1a9b      	subs	r3, r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	440b      	add	r3, r1
 800478a:	334d      	adds	r3, #77	@ 0x4d
 800478c:	2202      	movs	r2, #2
 800478e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004790:	78fa      	ldrb	r2, [r7, #3]
 8004792:	6879      	ldr	r1, [r7, #4]
 8004794:	4613      	mov	r3, r2
 8004796:	011b      	lsls	r3, r3, #4
 8004798:	1a9b      	subs	r3, r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	440b      	add	r3, r1
 800479e:	331b      	adds	r3, #27
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	f040 8107 	bne.w	80049b6 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80047a8:	78fa      	ldrb	r2, [r7, #3]
 80047aa:	6879      	ldr	r1, [r7, #4]
 80047ac:	4613      	mov	r3, r2
 80047ae:	011b      	lsls	r3, r3, #4
 80047b0:	1a9b      	subs	r3, r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	440b      	add	r3, r1
 80047b6:	334c      	adds	r3, #76	@ 0x4c
 80047b8:	2202      	movs	r2, #2
 80047ba:	701a      	strb	r2, [r3, #0]
 80047bc:	e0fb      	b.n	80049b6 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80047be:	78fa      	ldrb	r2, [r7, #3]
 80047c0:	6879      	ldr	r1, [r7, #4]
 80047c2:	4613      	mov	r3, r2
 80047c4:	011b      	lsls	r3, r3, #4
 80047c6:	1a9b      	subs	r3, r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	440b      	add	r3, r1
 80047cc:	334d      	adds	r3, #77	@ 0x4d
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	2b04      	cmp	r3, #4
 80047d2:	d13a      	bne.n	800484a <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80047d4:	78fa      	ldrb	r2, [r7, #3]
 80047d6:	6879      	ldr	r1, [r7, #4]
 80047d8:	4613      	mov	r3, r2
 80047da:	011b      	lsls	r3, r3, #4
 80047dc:	1a9b      	subs	r3, r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	440b      	add	r3, r1
 80047e2:	334d      	adds	r3, #77	@ 0x4d
 80047e4:	2202      	movs	r2, #2
 80047e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80047e8:	78fa      	ldrb	r2, [r7, #3]
 80047ea:	6879      	ldr	r1, [r7, #4]
 80047ec:	4613      	mov	r3, r2
 80047ee:	011b      	lsls	r3, r3, #4
 80047f0:	1a9b      	subs	r3, r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	440b      	add	r3, r1
 80047f6:	334c      	adds	r3, #76	@ 0x4c
 80047f8:	2202      	movs	r2, #2
 80047fa:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80047fc:	78fa      	ldrb	r2, [r7, #3]
 80047fe:	6879      	ldr	r1, [r7, #4]
 8004800:	4613      	mov	r3, r2
 8004802:	011b      	lsls	r3, r3, #4
 8004804:	1a9b      	subs	r3, r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	440b      	add	r3, r1
 800480a:	331b      	adds	r3, #27
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	2b01      	cmp	r3, #1
 8004810:	f040 80d1 	bne.w	80049b6 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004814:	78fa      	ldrb	r2, [r7, #3]
 8004816:	6879      	ldr	r1, [r7, #4]
 8004818:	4613      	mov	r3, r2
 800481a:	011b      	lsls	r3, r3, #4
 800481c:	1a9b      	subs	r3, r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	440b      	add	r3, r1
 8004822:	331b      	adds	r3, #27
 8004824:	2200      	movs	r2, #0
 8004826:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004828:	78fb      	ldrb	r3, [r7, #3]
 800482a:	015a      	lsls	r2, r3, #5
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	4413      	add	r3, r2
 8004830:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	78fa      	ldrb	r2, [r7, #3]
 8004838:	0151      	lsls	r1, r2, #5
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	440a      	add	r2, r1
 800483e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004842:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004846:	6053      	str	r3, [r2, #4]
 8004848:	e0b5      	b.n	80049b6 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800484a:	78fa      	ldrb	r2, [r7, #3]
 800484c:	6879      	ldr	r1, [r7, #4]
 800484e:	4613      	mov	r3, r2
 8004850:	011b      	lsls	r3, r3, #4
 8004852:	1a9b      	subs	r3, r3, r2
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	440b      	add	r3, r1
 8004858:	334d      	adds	r3, #77	@ 0x4d
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	2b05      	cmp	r3, #5
 800485e:	d114      	bne.n	800488a <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004860:	78fa      	ldrb	r2, [r7, #3]
 8004862:	6879      	ldr	r1, [r7, #4]
 8004864:	4613      	mov	r3, r2
 8004866:	011b      	lsls	r3, r3, #4
 8004868:	1a9b      	subs	r3, r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	440b      	add	r3, r1
 800486e:	334d      	adds	r3, #77	@ 0x4d
 8004870:	2202      	movs	r2, #2
 8004872:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004874:	78fa      	ldrb	r2, [r7, #3]
 8004876:	6879      	ldr	r1, [r7, #4]
 8004878:	4613      	mov	r3, r2
 800487a:	011b      	lsls	r3, r3, #4
 800487c:	1a9b      	subs	r3, r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	440b      	add	r3, r1
 8004882:	334c      	adds	r3, #76	@ 0x4c
 8004884:	2202      	movs	r2, #2
 8004886:	701a      	strb	r2, [r3, #0]
 8004888:	e095      	b.n	80049b6 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800488a:	78fa      	ldrb	r2, [r7, #3]
 800488c:	6879      	ldr	r1, [r7, #4]
 800488e:	4613      	mov	r3, r2
 8004890:	011b      	lsls	r3, r3, #4
 8004892:	1a9b      	subs	r3, r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	440b      	add	r3, r1
 8004898:	334d      	adds	r3, #77	@ 0x4d
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	2b06      	cmp	r3, #6
 800489e:	d114      	bne.n	80048ca <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80048a0:	78fa      	ldrb	r2, [r7, #3]
 80048a2:	6879      	ldr	r1, [r7, #4]
 80048a4:	4613      	mov	r3, r2
 80048a6:	011b      	lsls	r3, r3, #4
 80048a8:	1a9b      	subs	r3, r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	440b      	add	r3, r1
 80048ae:	334d      	adds	r3, #77	@ 0x4d
 80048b0:	2202      	movs	r2, #2
 80048b2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80048b4:	78fa      	ldrb	r2, [r7, #3]
 80048b6:	6879      	ldr	r1, [r7, #4]
 80048b8:	4613      	mov	r3, r2
 80048ba:	011b      	lsls	r3, r3, #4
 80048bc:	1a9b      	subs	r3, r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	440b      	add	r3, r1
 80048c2:	334c      	adds	r3, #76	@ 0x4c
 80048c4:	2205      	movs	r2, #5
 80048c6:	701a      	strb	r2, [r3, #0]
 80048c8:	e075      	b.n	80049b6 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80048ca:	78fa      	ldrb	r2, [r7, #3]
 80048cc:	6879      	ldr	r1, [r7, #4]
 80048ce:	4613      	mov	r3, r2
 80048d0:	011b      	lsls	r3, r3, #4
 80048d2:	1a9b      	subs	r3, r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	440b      	add	r3, r1
 80048d8:	334d      	adds	r3, #77	@ 0x4d
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	2b07      	cmp	r3, #7
 80048de:	d00a      	beq.n	80048f6 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80048e0:	78fa      	ldrb	r2, [r7, #3]
 80048e2:	6879      	ldr	r1, [r7, #4]
 80048e4:	4613      	mov	r3, r2
 80048e6:	011b      	lsls	r3, r3, #4
 80048e8:	1a9b      	subs	r3, r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	440b      	add	r3, r1
 80048ee:	334d      	adds	r3, #77	@ 0x4d
 80048f0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80048f2:	2b09      	cmp	r3, #9
 80048f4:	d170      	bne.n	80049d8 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80048f6:	78fa      	ldrb	r2, [r7, #3]
 80048f8:	6879      	ldr	r1, [r7, #4]
 80048fa:	4613      	mov	r3, r2
 80048fc:	011b      	lsls	r3, r3, #4
 80048fe:	1a9b      	subs	r3, r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	440b      	add	r3, r1
 8004904:	334d      	adds	r3, #77	@ 0x4d
 8004906:	2202      	movs	r2, #2
 8004908:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800490a:	78fa      	ldrb	r2, [r7, #3]
 800490c:	6879      	ldr	r1, [r7, #4]
 800490e:	4613      	mov	r3, r2
 8004910:	011b      	lsls	r3, r3, #4
 8004912:	1a9b      	subs	r3, r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	440b      	add	r3, r1
 8004918:	3344      	adds	r3, #68	@ 0x44
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	1c59      	adds	r1, r3, #1
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	4613      	mov	r3, r2
 8004922:	011b      	lsls	r3, r3, #4
 8004924:	1a9b      	subs	r3, r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4403      	add	r3, r0
 800492a:	3344      	adds	r3, #68	@ 0x44
 800492c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800492e:	78fa      	ldrb	r2, [r7, #3]
 8004930:	6879      	ldr	r1, [r7, #4]
 8004932:	4613      	mov	r3, r2
 8004934:	011b      	lsls	r3, r3, #4
 8004936:	1a9b      	subs	r3, r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	440b      	add	r3, r1
 800493c:	3344      	adds	r3, #68	@ 0x44
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2b02      	cmp	r3, #2
 8004942:	d914      	bls.n	800496e <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004944:	78fa      	ldrb	r2, [r7, #3]
 8004946:	6879      	ldr	r1, [r7, #4]
 8004948:	4613      	mov	r3, r2
 800494a:	011b      	lsls	r3, r3, #4
 800494c:	1a9b      	subs	r3, r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	440b      	add	r3, r1
 8004952:	3344      	adds	r3, #68	@ 0x44
 8004954:	2200      	movs	r2, #0
 8004956:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004958:	78fa      	ldrb	r2, [r7, #3]
 800495a:	6879      	ldr	r1, [r7, #4]
 800495c:	4613      	mov	r3, r2
 800495e:	011b      	lsls	r3, r3, #4
 8004960:	1a9b      	subs	r3, r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	440b      	add	r3, r1
 8004966:	334c      	adds	r3, #76	@ 0x4c
 8004968:	2204      	movs	r2, #4
 800496a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800496c:	e022      	b.n	80049b4 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800496e:	78fa      	ldrb	r2, [r7, #3]
 8004970:	6879      	ldr	r1, [r7, #4]
 8004972:	4613      	mov	r3, r2
 8004974:	011b      	lsls	r3, r3, #4
 8004976:	1a9b      	subs	r3, r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	440b      	add	r3, r1
 800497c:	334c      	adds	r3, #76	@ 0x4c
 800497e:	2202      	movs	r2, #2
 8004980:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004982:	78fb      	ldrb	r3, [r7, #3]
 8004984:	015a      	lsls	r2, r3, #5
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	4413      	add	r3, r2
 800498a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004998:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80049a0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80049a2:	78fb      	ldrb	r3, [r7, #3]
 80049a4:	015a      	lsls	r2, r3, #5
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	4413      	add	r3, r2
 80049aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049ae:	461a      	mov	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80049b4:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80049b6:	78fa      	ldrb	r2, [r7, #3]
 80049b8:	6879      	ldr	r1, [r7, #4]
 80049ba:	4613      	mov	r3, r2
 80049bc:	011b      	lsls	r3, r3, #4
 80049be:	1a9b      	subs	r3, r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	440b      	add	r3, r1
 80049c4:	334c      	adds	r3, #76	@ 0x4c
 80049c6:	781a      	ldrb	r2, [r3, #0]
 80049c8:	78fb      	ldrb	r3, [r7, #3]
 80049ca:	4619      	mov	r1, r3
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f003 fd9a 	bl	8008506 <HAL_HCD_HC_NotifyURBChange_Callback>
 80049d2:	e002      	b.n	80049da <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80049d4:	bf00      	nop
 80049d6:	e000      	b.n	80049da <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80049d8:	bf00      	nop
  }
}
 80049da:	3718      	adds	r7, #24
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b08a      	sub	sp, #40	@ 0x28
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f0:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	f003 030f 	and.w	r3, r3, #15
 8004a00:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	0c5b      	lsrs	r3, r3, #17
 8004a06:	f003 030f 	and.w	r3, r3, #15
 8004a0a:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	091b      	lsrs	r3, r3, #4
 8004a10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a14:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d004      	beq.n	8004a26 <HCD_RXQLVL_IRQHandler+0x46>
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	2b05      	cmp	r3, #5
 8004a20:	f000 80b6 	beq.w	8004b90 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004a24:	e0b7      	b.n	8004b96 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 80b3 	beq.w	8004b94 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004a2e:	6879      	ldr	r1, [r7, #4]
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	4613      	mov	r3, r2
 8004a34:	011b      	lsls	r3, r3, #4
 8004a36:	1a9b      	subs	r3, r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	440b      	add	r3, r1
 8004a3c:	332c      	adds	r3, #44	@ 0x2c
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f000 80a7 	beq.w	8004b94 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004a46:	6879      	ldr	r1, [r7, #4]
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	011b      	lsls	r3, r3, #4
 8004a4e:	1a9b      	subs	r3, r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	440b      	add	r3, r1
 8004a54:	3338      	adds	r3, #56	@ 0x38
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	18d1      	adds	r1, r2, r3
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	69ba      	ldr	r2, [r7, #24]
 8004a60:	4613      	mov	r3, r2
 8004a62:	011b      	lsls	r3, r3, #4
 8004a64:	1a9b      	subs	r3, r3, r2
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	4403      	add	r3, r0
 8004a6a:	3334      	adds	r3, #52	@ 0x34
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4299      	cmp	r1, r3
 8004a70:	f200 8083 	bhi.w	8004b7a <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6818      	ldr	r0, [r3, #0]
 8004a78:	6879      	ldr	r1, [r7, #4]
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	011b      	lsls	r3, r3, #4
 8004a80:	1a9b      	subs	r3, r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	440b      	add	r3, r1
 8004a86:	332c      	adds	r3, #44	@ 0x2c
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	b292      	uxth	r2, r2
 8004a8e:	4619      	mov	r1, r3
 8004a90:	f003 f9d6 	bl	8007e40 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004a94:	6879      	ldr	r1, [r7, #4]
 8004a96:	69ba      	ldr	r2, [r7, #24]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	011b      	lsls	r3, r3, #4
 8004a9c:	1a9b      	subs	r3, r3, r2
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	440b      	add	r3, r1
 8004aa2:	332c      	adds	r3, #44	@ 0x2c
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	18d1      	adds	r1, r2, r3
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	69ba      	ldr	r2, [r7, #24]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	011b      	lsls	r3, r3, #4
 8004ab2:	1a9b      	subs	r3, r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4403      	add	r3, r0
 8004ab8:	332c      	adds	r3, #44	@ 0x2c
 8004aba:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004abc:	6879      	ldr	r1, [r7, #4]
 8004abe:	69ba      	ldr	r2, [r7, #24]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	011b      	lsls	r3, r3, #4
 8004ac4:	1a9b      	subs	r3, r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	440b      	add	r3, r1
 8004aca:	3338      	adds	r3, #56	@ 0x38
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	18d1      	adds	r1, r2, r3
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	011b      	lsls	r3, r3, #4
 8004ada:	1a9b      	subs	r3, r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4403      	add	r3, r0
 8004ae0:	3338      	adds	r3, #56	@ 0x38
 8004ae2:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	015a      	lsls	r2, r3, #5
 8004ae8:	6a3b      	ldr	r3, [r7, #32]
 8004aea:	4413      	add	r3, r2
 8004aec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	0cdb      	lsrs	r3, r3, #19
 8004af4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004af8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004afa:	6879      	ldr	r1, [r7, #4]
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	4613      	mov	r3, r2
 8004b00:	011b      	lsls	r3, r3, #4
 8004b02:	1a9b      	subs	r3, r3, r2
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	440b      	add	r3, r1
 8004b08:	3328      	adds	r3, #40	@ 0x28
 8004b0a:	881b      	ldrh	r3, [r3, #0]
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d13f      	bne.n	8004b94 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d03c      	beq.n	8004b94 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	015a      	lsls	r2, r3, #5
 8004b1e:	6a3b      	ldr	r3, [r7, #32]
 8004b20:	4413      	add	r3, r2
 8004b22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004b30:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004b38:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	015a      	lsls	r2, r3, #5
 8004b3e:	6a3b      	ldr	r3, [r7, #32]
 8004b40:	4413      	add	r3, r2
 8004b42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b46:	461a      	mov	r2, r3
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004b4c:	6879      	ldr	r1, [r7, #4]
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	4613      	mov	r3, r2
 8004b52:	011b      	lsls	r3, r3, #4
 8004b54:	1a9b      	subs	r3, r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	440b      	add	r3, r1
 8004b5a:	333c      	adds	r3, #60	@ 0x3c
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	f083 0301 	eor.w	r3, r3, #1
 8004b62:	b2d8      	uxtb	r0, r3
 8004b64:	6879      	ldr	r1, [r7, #4]
 8004b66:	69ba      	ldr	r2, [r7, #24]
 8004b68:	4613      	mov	r3, r2
 8004b6a:	011b      	lsls	r3, r3, #4
 8004b6c:	1a9b      	subs	r3, r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	440b      	add	r3, r1
 8004b72:	333c      	adds	r3, #60	@ 0x3c
 8004b74:	4602      	mov	r2, r0
 8004b76:	701a      	strb	r2, [r3, #0]
      break;
 8004b78:	e00c      	b.n	8004b94 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004b7a:	6879      	ldr	r1, [r7, #4]
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	011b      	lsls	r3, r3, #4
 8004b82:	1a9b      	subs	r3, r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	440b      	add	r3, r1
 8004b88:	334c      	adds	r3, #76	@ 0x4c
 8004b8a:	2204      	movs	r2, #4
 8004b8c:	701a      	strb	r2, [r3, #0]
      break;
 8004b8e:	e001      	b.n	8004b94 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004b90:	bf00      	nop
 8004b92:	e000      	b.n	8004b96 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004b94:	bf00      	nop
  }
}
 8004b96:	bf00      	nop
 8004b98:	3728      	adds	r7, #40	@ 0x28
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b086      	sub	sp, #24
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004bca:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d10b      	bne.n	8004bee <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f003 0301 	and.w	r3, r3, #1
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d102      	bne.n	8004be6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f003 fc74 	bl	80084ce <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	f043 0302 	orr.w	r3, r3, #2
 8004bec:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f003 0308 	and.w	r3, r3, #8
 8004bf4:	2b08      	cmp	r3, #8
 8004bf6:	d132      	bne.n	8004c5e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	f043 0308 	orr.w	r3, r3, #8
 8004bfe:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f003 0304 	and.w	r3, r3, #4
 8004c06:	2b04      	cmp	r3, #4
 8004c08:	d126      	bne.n	8004c58 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	7a5b      	ldrb	r3, [r3, #9]
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d113      	bne.n	8004c3a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004c18:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004c1c:	d106      	bne.n	8004c2c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2102      	movs	r1, #2
 8004c24:	4618      	mov	r0, r3
 8004c26:	f003 f9a5 	bl	8007f74 <USB_InitFSLSPClkSel>
 8004c2a:	e011      	b.n	8004c50 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2101      	movs	r1, #1
 8004c32:	4618      	mov	r0, r3
 8004c34:	f003 f99e 	bl	8007f74 <USB_InitFSLSPClkSel>
 8004c38:	e00a      	b.n	8004c50 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	79db      	ldrb	r3, [r3, #7]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d106      	bne.n	8004c50 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004c48:	461a      	mov	r2, r3
 8004c4a:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004c4e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f003 fc66 	bl	8008522 <HAL_HCD_PortEnabled_Callback>
 8004c56:	e002      	b.n	8004c5e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f003 fc70 	bl	800853e <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f003 0320 	and.w	r3, r3, #32
 8004c64:	2b20      	cmp	r3, #32
 8004c66:	d103      	bne.n	8004c70 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	f043 0320 	orr.w	r3, r3, #32
 8004c6e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004c76:	461a      	mov	r2, r3
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	6013      	str	r3, [r2, #0]
}
 8004c7c:	bf00      	nop
 8004c7e:	3718      	adds	r7, #24
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d101      	bne.n	8004c96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e12b      	b.n	8004eee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d106      	bne.n	8004cb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f7fb ff34 	bl	8000b18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2224      	movs	r2, #36	@ 0x24
 8004cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 0201 	bic.w	r2, r2, #1
 8004cc6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004cd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004ce6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004ce8:	f001 fe72 	bl	80069d0 <HAL_RCC_GetPCLK1Freq>
 8004cec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	4a81      	ldr	r2, [pc, #516]	@ (8004ef8 <HAL_I2C_Init+0x274>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d807      	bhi.n	8004d08 <HAL_I2C_Init+0x84>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	4a80      	ldr	r2, [pc, #512]	@ (8004efc <HAL_I2C_Init+0x278>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	bf94      	ite	ls
 8004d00:	2301      	movls	r3, #1
 8004d02:	2300      	movhi	r3, #0
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	e006      	b.n	8004d16 <HAL_I2C_Init+0x92>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	4a7d      	ldr	r2, [pc, #500]	@ (8004f00 <HAL_I2C_Init+0x27c>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	bf94      	ite	ls
 8004d10:	2301      	movls	r3, #1
 8004d12:	2300      	movhi	r3, #0
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d001      	beq.n	8004d1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e0e7      	b.n	8004eee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	4a78      	ldr	r2, [pc, #480]	@ (8004f04 <HAL_I2C_Init+0x280>)
 8004d22:	fba2 2303 	umull	r2, r3, r2, r3
 8004d26:	0c9b      	lsrs	r3, r3, #18
 8004d28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	4a6a      	ldr	r2, [pc, #424]	@ (8004ef8 <HAL_I2C_Init+0x274>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d802      	bhi.n	8004d58 <HAL_I2C_Init+0xd4>
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	3301      	adds	r3, #1
 8004d56:	e009      	b.n	8004d6c <HAL_I2C_Init+0xe8>
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004d5e:	fb02 f303 	mul.w	r3, r2, r3
 8004d62:	4a69      	ldr	r2, [pc, #420]	@ (8004f08 <HAL_I2C_Init+0x284>)
 8004d64:	fba2 2303 	umull	r2, r3, r2, r3
 8004d68:	099b      	lsrs	r3, r3, #6
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	6812      	ldr	r2, [r2, #0]
 8004d70:	430b      	orrs	r3, r1
 8004d72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	69db      	ldr	r3, [r3, #28]
 8004d7a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004d7e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	495c      	ldr	r1, [pc, #368]	@ (8004ef8 <HAL_I2C_Init+0x274>)
 8004d88:	428b      	cmp	r3, r1
 8004d8a:	d819      	bhi.n	8004dc0 <HAL_I2C_Init+0x13c>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	1e59      	subs	r1, r3, #1
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	005b      	lsls	r3, r3, #1
 8004d96:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d9a:	1c59      	adds	r1, r3, #1
 8004d9c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004da0:	400b      	ands	r3, r1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00a      	beq.n	8004dbc <HAL_I2C_Init+0x138>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	1e59      	subs	r1, r3, #1
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	005b      	lsls	r3, r3, #1
 8004db0:	fbb1 f3f3 	udiv	r3, r1, r3
 8004db4:	3301      	adds	r3, #1
 8004db6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dba:	e051      	b.n	8004e60 <HAL_I2C_Init+0x1dc>
 8004dbc:	2304      	movs	r3, #4
 8004dbe:	e04f      	b.n	8004e60 <HAL_I2C_Init+0x1dc>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d111      	bne.n	8004dec <HAL_I2C_Init+0x168>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	1e58      	subs	r0, r3, #1
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6859      	ldr	r1, [r3, #4]
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	005b      	lsls	r3, r3, #1
 8004dd4:	440b      	add	r3, r1
 8004dd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dda:	3301      	adds	r3, #1
 8004ddc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	bf0c      	ite	eq
 8004de4:	2301      	moveq	r3, #1
 8004de6:	2300      	movne	r3, #0
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	e012      	b.n	8004e12 <HAL_I2C_Init+0x18e>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	1e58      	subs	r0, r3, #1
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6859      	ldr	r1, [r3, #4]
 8004df4:	460b      	mov	r3, r1
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	440b      	add	r3, r1
 8004dfa:	0099      	lsls	r1, r3, #2
 8004dfc:	440b      	add	r3, r1
 8004dfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e02:	3301      	adds	r3, #1
 8004e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	bf0c      	ite	eq
 8004e0c:	2301      	moveq	r3, #1
 8004e0e:	2300      	movne	r3, #0
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d001      	beq.n	8004e1a <HAL_I2C_Init+0x196>
 8004e16:	2301      	movs	r3, #1
 8004e18:	e022      	b.n	8004e60 <HAL_I2C_Init+0x1dc>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10e      	bne.n	8004e40 <HAL_I2C_Init+0x1bc>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	1e58      	subs	r0, r3, #1
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6859      	ldr	r1, [r3, #4]
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	005b      	lsls	r3, r3, #1
 8004e2e:	440b      	add	r3, r1
 8004e30:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e34:	3301      	adds	r3, #1
 8004e36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e3e:	e00f      	b.n	8004e60 <HAL_I2C_Init+0x1dc>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	1e58      	subs	r0, r3, #1
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6859      	ldr	r1, [r3, #4]
 8004e48:	460b      	mov	r3, r1
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	440b      	add	r3, r1
 8004e4e:	0099      	lsls	r1, r3, #2
 8004e50:	440b      	add	r3, r1
 8004e52:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e56:	3301      	adds	r3, #1
 8004e58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e60:	6879      	ldr	r1, [r7, #4]
 8004e62:	6809      	ldr	r1, [r1, #0]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	69da      	ldr	r2, [r3, #28]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a1b      	ldr	r3, [r3, #32]
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004e8e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	6911      	ldr	r1, [r2, #16]
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	68d2      	ldr	r2, [r2, #12]
 8004e9a:	4311      	orrs	r1, r2
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	6812      	ldr	r2, [r2, #0]
 8004ea0:	430b      	orrs	r3, r1
 8004ea2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	695a      	ldr	r2, [r3, #20]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f042 0201 	orr.w	r2, r2, #1
 8004ece:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2220      	movs	r2, #32
 8004eda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	000186a0 	.word	0x000186a0
 8004efc:	001e847f 	.word	0x001e847f
 8004f00:	003d08ff 	.word	0x003d08ff
 8004f04:	431bde83 	.word	0x431bde83
 8004f08:	10624dd3 	.word	0x10624dd3

08004f0c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b088      	sub	sp, #32
 8004f10:	af02      	add	r7, sp, #8
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	607a      	str	r2, [r7, #4]
 8004f16:	461a      	mov	r2, r3
 8004f18:	460b      	mov	r3, r1
 8004f1a:	817b      	strh	r3, [r7, #10]
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f20:	f7fc fec8 	bl	8001cb4 <HAL_GetTick>
 8004f24:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b20      	cmp	r3, #32
 8004f30:	f040 80e0 	bne.w	80050f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	9300      	str	r3, [sp, #0]
 8004f38:	2319      	movs	r3, #25
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	4970      	ldr	r1, [pc, #448]	@ (8005100 <HAL_I2C_Master_Transmit+0x1f4>)
 8004f3e:	68f8      	ldr	r0, [r7, #12]
 8004f40:	f000 f964 	bl	800520c <I2C_WaitOnFlagUntilTimeout>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d001      	beq.n	8004f4e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004f4a:	2302      	movs	r3, #2
 8004f4c:	e0d3      	b.n	80050f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d101      	bne.n	8004f5c <HAL_I2C_Master_Transmit+0x50>
 8004f58:	2302      	movs	r3, #2
 8004f5a:	e0cc      	b.n	80050f6 <HAL_I2C_Master_Transmit+0x1ea>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d007      	beq.n	8004f82 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f042 0201 	orr.w	r2, r2, #1
 8004f80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f90:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2221      	movs	r2, #33	@ 0x21
 8004f96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2210      	movs	r2, #16
 8004f9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	893a      	ldrh	r2, [r7, #8]
 8004fb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fb8:	b29a      	uxth	r2, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	4a50      	ldr	r2, [pc, #320]	@ (8005104 <HAL_I2C_Master_Transmit+0x1f8>)
 8004fc2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004fc4:	8979      	ldrh	r1, [r7, #10]
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	6a3a      	ldr	r2, [r7, #32]
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f000 f89c 	bl	8005108 <I2C_MasterRequestWrite>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d001      	beq.n	8004fda <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e08d      	b.n	80050f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fda:	2300      	movs	r3, #0
 8004fdc:	613b      	str	r3, [r7, #16]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	613b      	str	r3, [r7, #16]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	613b      	str	r3, [r7, #16]
 8004fee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004ff0:	e066      	b.n	80050c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	6a39      	ldr	r1, [r7, #32]
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f000 fa22 	bl	8005440 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00d      	beq.n	800501e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005006:	2b04      	cmp	r3, #4
 8005008:	d107      	bne.n	800501a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005018:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e06b      	b.n	80050f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005022:	781a      	ldrb	r2, [r3, #0]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800502e:	1c5a      	adds	r2, r3, #1
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005038:	b29b      	uxth	r3, r3
 800503a:	3b01      	subs	r3, #1
 800503c:	b29a      	uxth	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005046:	3b01      	subs	r3, #1
 8005048:	b29a      	uxth	r2, r3
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	695b      	ldr	r3, [r3, #20]
 8005054:	f003 0304 	and.w	r3, r3, #4
 8005058:	2b04      	cmp	r3, #4
 800505a:	d11b      	bne.n	8005094 <HAL_I2C_Master_Transmit+0x188>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005060:	2b00      	cmp	r3, #0
 8005062:	d017      	beq.n	8005094 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005068:	781a      	ldrb	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005074:	1c5a      	adds	r2, r3, #1
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800507e:	b29b      	uxth	r3, r3
 8005080:	3b01      	subs	r3, #1
 8005082:	b29a      	uxth	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800508c:	3b01      	subs	r3, #1
 800508e:	b29a      	uxth	r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	6a39      	ldr	r1, [r7, #32]
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f000 fa19 	bl	80054d0 <I2C_WaitOnBTFFlagUntilTimeout>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00d      	beq.n	80050c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a8:	2b04      	cmp	r3, #4
 80050aa:	d107      	bne.n	80050bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e01a      	b.n	80050f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d194      	bne.n	8004ff2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2220      	movs	r2, #32
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80050f0:	2300      	movs	r3, #0
 80050f2:	e000      	b.n	80050f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80050f4:	2302      	movs	r3, #2
  }
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3718      	adds	r7, #24
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	00100002 	.word	0x00100002
 8005104:	ffff0000 	.word	0xffff0000

08005108 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b088      	sub	sp, #32
 800510c:	af02      	add	r7, sp, #8
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	607a      	str	r2, [r7, #4]
 8005112:	603b      	str	r3, [r7, #0]
 8005114:	460b      	mov	r3, r1
 8005116:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800511c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	2b08      	cmp	r3, #8
 8005122:	d006      	beq.n	8005132 <I2C_MasterRequestWrite+0x2a>
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d003      	beq.n	8005132 <I2C_MasterRequestWrite+0x2a>
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005130:	d108      	bne.n	8005144 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005140:	601a      	str	r2, [r3, #0]
 8005142:	e00b      	b.n	800515c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005148:	2b12      	cmp	r3, #18
 800514a:	d107      	bne.n	800515c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800515a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	9300      	str	r3, [sp, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005168:	68f8      	ldr	r0, [r7, #12]
 800516a:	f000 f84f 	bl	800520c <I2C_WaitOnFlagUntilTimeout>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00d      	beq.n	8005190 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800517e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005182:	d103      	bne.n	800518c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800518a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e035      	b.n	80051fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005198:	d108      	bne.n	80051ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800519a:	897b      	ldrh	r3, [r7, #10]
 800519c:	b2db      	uxtb	r3, r3
 800519e:	461a      	mov	r2, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80051a8:	611a      	str	r2, [r3, #16]
 80051aa:	e01b      	b.n	80051e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80051ac:	897b      	ldrh	r3, [r7, #10]
 80051ae:	11db      	asrs	r3, r3, #7
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	f003 0306 	and.w	r3, r3, #6
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	f063 030f 	orn	r3, r3, #15
 80051bc:	b2da      	uxtb	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	490e      	ldr	r1, [pc, #56]	@ (8005204 <I2C_MasterRequestWrite+0xfc>)
 80051ca:	68f8      	ldr	r0, [r7, #12]
 80051cc:	f000 f898 	bl	8005300 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d001      	beq.n	80051da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e010      	b.n	80051fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80051da:	897b      	ldrh	r3, [r7, #10]
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	4907      	ldr	r1, [pc, #28]	@ (8005208 <I2C_MasterRequestWrite+0x100>)
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f000 f888 	bl	8005300 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d001      	beq.n	80051fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e000      	b.n	80051fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3718      	adds	r7, #24
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	00010008 	.word	0x00010008
 8005208:	00010002 	.word	0x00010002

0800520c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	603b      	str	r3, [r7, #0]
 8005218:	4613      	mov	r3, r2
 800521a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800521c:	e048      	b.n	80052b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005224:	d044      	beq.n	80052b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005226:	f7fc fd45 	bl	8001cb4 <HAL_GetTick>
 800522a:	4602      	mov	r2, r0
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	683a      	ldr	r2, [r7, #0]
 8005232:	429a      	cmp	r2, r3
 8005234:	d302      	bcc.n	800523c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d139      	bne.n	80052b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	0c1b      	lsrs	r3, r3, #16
 8005240:	b2db      	uxtb	r3, r3
 8005242:	2b01      	cmp	r3, #1
 8005244:	d10d      	bne.n	8005262 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	695b      	ldr	r3, [r3, #20]
 800524c:	43da      	mvns	r2, r3
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	4013      	ands	r3, r2
 8005252:	b29b      	uxth	r3, r3
 8005254:	2b00      	cmp	r3, #0
 8005256:	bf0c      	ite	eq
 8005258:	2301      	moveq	r3, #1
 800525a:	2300      	movne	r3, #0
 800525c:	b2db      	uxtb	r3, r3
 800525e:	461a      	mov	r2, r3
 8005260:	e00c      	b.n	800527c <I2C_WaitOnFlagUntilTimeout+0x70>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	43da      	mvns	r2, r3
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	4013      	ands	r3, r2
 800526e:	b29b      	uxth	r3, r3
 8005270:	2b00      	cmp	r3, #0
 8005272:	bf0c      	ite	eq
 8005274:	2301      	moveq	r3, #1
 8005276:	2300      	movne	r3, #0
 8005278:	b2db      	uxtb	r3, r3
 800527a:	461a      	mov	r2, r3
 800527c:	79fb      	ldrb	r3, [r7, #7]
 800527e:	429a      	cmp	r2, r3
 8005280:	d116      	bne.n	80052b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2220      	movs	r2, #32
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800529c:	f043 0220 	orr.w	r2, r3, #32
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e023      	b.n	80052f8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	0c1b      	lsrs	r3, r3, #16
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d10d      	bne.n	80052d6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	695b      	ldr	r3, [r3, #20]
 80052c0:	43da      	mvns	r2, r3
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	4013      	ands	r3, r2
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	bf0c      	ite	eq
 80052cc:	2301      	moveq	r3, #1
 80052ce:	2300      	movne	r3, #0
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	461a      	mov	r2, r3
 80052d4:	e00c      	b.n	80052f0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	43da      	mvns	r2, r3
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	4013      	ands	r3, r2
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	bf0c      	ite	eq
 80052e8:	2301      	moveq	r3, #1
 80052ea:	2300      	movne	r3, #0
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	461a      	mov	r2, r3
 80052f0:	79fb      	ldrb	r3, [r7, #7]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d093      	beq.n	800521e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
 800530c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800530e:	e071      	b.n	80053f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800531a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800531e:	d123      	bne.n	8005368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800532e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005338:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2220      	movs	r2, #32
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005354:	f043 0204 	orr.w	r2, r3, #4
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e067      	b.n	8005438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800536e:	d041      	beq.n	80053f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005370:	f7fc fca0 	bl	8001cb4 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	429a      	cmp	r2, r3
 800537e:	d302      	bcc.n	8005386 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d136      	bne.n	80053f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	0c1b      	lsrs	r3, r3, #16
 800538a:	b2db      	uxtb	r3, r3
 800538c:	2b01      	cmp	r3, #1
 800538e:	d10c      	bne.n	80053aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	43da      	mvns	r2, r3
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	4013      	ands	r3, r2
 800539c:	b29b      	uxth	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	bf14      	ite	ne
 80053a2:	2301      	movne	r3, #1
 80053a4:	2300      	moveq	r3, #0
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	e00b      	b.n	80053c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	43da      	mvns	r2, r3
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	4013      	ands	r3, r2
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	bf14      	ite	ne
 80053bc:	2301      	movne	r3, #1
 80053be:	2300      	moveq	r3, #0
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d016      	beq.n	80053f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2220      	movs	r2, #32
 80053d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e0:	f043 0220 	orr.w	r2, r3, #32
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e021      	b.n	8005438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	0c1b      	lsrs	r3, r3, #16
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d10c      	bne.n	8005418 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	695b      	ldr	r3, [r3, #20]
 8005404:	43da      	mvns	r2, r3
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	4013      	ands	r3, r2
 800540a:	b29b      	uxth	r3, r3
 800540c:	2b00      	cmp	r3, #0
 800540e:	bf14      	ite	ne
 8005410:	2301      	movne	r3, #1
 8005412:	2300      	moveq	r3, #0
 8005414:	b2db      	uxtb	r3, r3
 8005416:	e00b      	b.n	8005430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	43da      	mvns	r2, r3
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	4013      	ands	r3, r2
 8005424:	b29b      	uxth	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	bf14      	ite	ne
 800542a:	2301      	movne	r3, #1
 800542c:	2300      	moveq	r3, #0
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b00      	cmp	r3, #0
 8005432:	f47f af6d 	bne.w	8005310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800544c:	e034      	b.n	80054b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f000 f886 	bl	8005560 <I2C_IsAcknowledgeFailed>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d001      	beq.n	800545e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e034      	b.n	80054c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005464:	d028      	beq.n	80054b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005466:	f7fc fc25 	bl	8001cb4 <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	68ba      	ldr	r2, [r7, #8]
 8005472:	429a      	cmp	r2, r3
 8005474:	d302      	bcc.n	800547c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d11d      	bne.n	80054b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005486:	2b80      	cmp	r3, #128	@ 0x80
 8005488:	d016      	beq.n	80054b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2220      	movs	r2, #32
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a4:	f043 0220 	orr.w	r2, r3, #32
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e007      	b.n	80054c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054c2:	2b80      	cmp	r3, #128	@ 0x80
 80054c4:	d1c3      	bne.n	800544e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054dc:	e034      	b.n	8005548 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f000 f83e 	bl	8005560 <I2C_IsAcknowledgeFailed>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d001      	beq.n	80054ee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e034      	b.n	8005558 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80054f4:	d028      	beq.n	8005548 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054f6:	f7fc fbdd 	bl	8001cb4 <HAL_GetTick>
 80054fa:	4602      	mov	r2, r0
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	68ba      	ldr	r2, [r7, #8]
 8005502:	429a      	cmp	r2, r3
 8005504:	d302      	bcc.n	800550c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d11d      	bne.n	8005548 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	f003 0304 	and.w	r3, r3, #4
 8005516:	2b04      	cmp	r3, #4
 8005518:	d016      	beq.n	8005548 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2220      	movs	r2, #32
 8005524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005534:	f043 0220 	orr.w	r2, r3, #32
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e007      	b.n	8005558 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	f003 0304 	and.w	r3, r3, #4
 8005552:	2b04      	cmp	r3, #4
 8005554:	d1c3      	bne.n	80054de <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3710      	adds	r7, #16
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005572:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005576:	d11b      	bne.n	80055b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005580:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2220      	movs	r2, #32
 800558c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800559c:	f043 0204 	orr.w	r2, r3, #4
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e000      	b.n	80055b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	370c      	adds	r7, #12
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
	...

080055c0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b088      	sub	sp, #32
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e128      	b.n	8005824 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d109      	bne.n	80055f2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a90      	ldr	r2, [pc, #576]	@ (800582c <HAL_I2S_Init+0x26c>)
 80055ea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f7fb fb09 	bl	8000c04 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2202      	movs	r2, #2
 80055f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	69db      	ldr	r3, [r3, #28]
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	6812      	ldr	r2, [r2, #0]
 8005604:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005608:	f023 030f 	bic.w	r3, r3, #15
 800560c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2202      	movs	r2, #2
 8005614:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	2b02      	cmp	r3, #2
 800561c:	d060      	beq.n	80056e0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d102      	bne.n	800562c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005626:	2310      	movs	r3, #16
 8005628:	617b      	str	r3, [r7, #20]
 800562a:	e001      	b.n	8005630 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800562c:	2320      	movs	r3, #32
 800562e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	2b20      	cmp	r3, #32
 8005636:	d802      	bhi.n	800563e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	005b      	lsls	r3, r3, #1
 800563c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800563e:	2001      	movs	r0, #1
 8005640:	f001 fad0 	bl	8006be4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005644:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800564e:	d125      	bne.n	800569c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d010      	beq.n	800567a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005662:	4613      	mov	r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	4413      	add	r3, r2
 8005668:	005b      	lsls	r3, r3, #1
 800566a:	461a      	mov	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	695b      	ldr	r3, [r3, #20]
 8005670:	fbb2 f3f3 	udiv	r3, r2, r3
 8005674:	3305      	adds	r3, #5
 8005676:	613b      	str	r3, [r7, #16]
 8005678:	e01f      	b.n	80056ba <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	00db      	lsls	r3, r3, #3
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	fbb2 f2f3 	udiv	r2, r2, r3
 8005684:	4613      	mov	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	4413      	add	r3, r2
 800568a:	005b      	lsls	r3, r3, #1
 800568c:	461a      	mov	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	695b      	ldr	r3, [r3, #20]
 8005692:	fbb2 f3f3 	udiv	r3, r2, r3
 8005696:	3305      	adds	r3, #5
 8005698:	613b      	str	r3, [r7, #16]
 800569a:	e00e      	b.n	80056ba <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80056a4:	4613      	mov	r3, r2
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	4413      	add	r3, r2
 80056aa:	005b      	lsls	r3, r3, #1
 80056ac:	461a      	mov	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b6:	3305      	adds	r3, #5
 80056b8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	4a5c      	ldr	r2, [pc, #368]	@ (8005830 <HAL_I2S_Init+0x270>)
 80056be:	fba2 2303 	umull	r2, r3, r2, r3
 80056c2:	08db      	lsrs	r3, r3, #3
 80056c4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	f003 0301 	and.w	r3, r3, #1
 80056cc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	085b      	lsrs	r3, r3, #1
 80056d6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	021b      	lsls	r3, r3, #8
 80056dc:	61bb      	str	r3, [r7, #24]
 80056de:	e003      	b.n	80056e8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80056e0:	2302      	movs	r3, #2
 80056e2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80056e4:	2300      	movs	r3, #0
 80056e6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d902      	bls.n	80056f4 <HAL_I2S_Init+0x134>
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	2bff      	cmp	r3, #255	@ 0xff
 80056f2:	d907      	bls.n	8005704 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f8:	f043 0210 	orr.w	r2, r3, #16
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e08f      	b.n	8005824 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	691a      	ldr	r2, [r3, #16]
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	ea42 0103 	orr.w	r1, r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	69fa      	ldr	r2, [r7, #28]
 8005714:	430a      	orrs	r2, r1
 8005716:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	69db      	ldr	r3, [r3, #28]
 800571e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005722:	f023 030f 	bic.w	r3, r3, #15
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	6851      	ldr	r1, [r2, #4]
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	6892      	ldr	r2, [r2, #8]
 800572e:	4311      	orrs	r1, r2
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	68d2      	ldr	r2, [r2, #12]
 8005734:	4311      	orrs	r1, r2
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	6992      	ldr	r2, [r2, #24]
 800573a:	430a      	orrs	r2, r1
 800573c:	431a      	orrs	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005746:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a1b      	ldr	r3, [r3, #32]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d161      	bne.n	8005814 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a38      	ldr	r2, [pc, #224]	@ (8005834 <HAL_I2S_Init+0x274>)
 8005754:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a37      	ldr	r2, [pc, #220]	@ (8005838 <HAL_I2S_Init+0x278>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d101      	bne.n	8005764 <HAL_I2S_Init+0x1a4>
 8005760:	4b36      	ldr	r3, [pc, #216]	@ (800583c <HAL_I2S_Init+0x27c>)
 8005762:	e001      	b.n	8005768 <HAL_I2S_Init+0x1a8>
 8005764:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005768:	69db      	ldr	r3, [r3, #28]
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	6812      	ldr	r2, [r2, #0]
 800576e:	4932      	ldr	r1, [pc, #200]	@ (8005838 <HAL_I2S_Init+0x278>)
 8005770:	428a      	cmp	r2, r1
 8005772:	d101      	bne.n	8005778 <HAL_I2S_Init+0x1b8>
 8005774:	4a31      	ldr	r2, [pc, #196]	@ (800583c <HAL_I2S_Init+0x27c>)
 8005776:	e001      	b.n	800577c <HAL_I2S_Init+0x1bc>
 8005778:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800577c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005780:	f023 030f 	bic.w	r3, r3, #15
 8005784:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a2b      	ldr	r2, [pc, #172]	@ (8005838 <HAL_I2S_Init+0x278>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d101      	bne.n	8005794 <HAL_I2S_Init+0x1d4>
 8005790:	4b2a      	ldr	r3, [pc, #168]	@ (800583c <HAL_I2S_Init+0x27c>)
 8005792:	e001      	b.n	8005798 <HAL_I2S_Init+0x1d8>
 8005794:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005798:	2202      	movs	r2, #2
 800579a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a25      	ldr	r2, [pc, #148]	@ (8005838 <HAL_I2S_Init+0x278>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d101      	bne.n	80057aa <HAL_I2S_Init+0x1ea>
 80057a6:	4b25      	ldr	r3, [pc, #148]	@ (800583c <HAL_I2S_Init+0x27c>)
 80057a8:	e001      	b.n	80057ae <HAL_I2S_Init+0x1ee>
 80057aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80057ae:	69db      	ldr	r3, [r3, #28]
 80057b0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057ba:	d003      	beq.n	80057c4 <HAL_I2S_Init+0x204>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d103      	bne.n	80057cc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80057c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80057c8:	613b      	str	r3, [r7, #16]
 80057ca:	e001      	b.n	80057d0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80057cc:	2300      	movs	r3, #0
 80057ce:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80057da:	4313      	orrs	r3, r2
 80057dc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80057e4:	4313      	orrs	r3, r2
 80057e6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80057ee:	4313      	orrs	r3, r2
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	897b      	ldrh	r3, [r7, #10]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80057fc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a0d      	ldr	r2, [pc, #52]	@ (8005838 <HAL_I2S_Init+0x278>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d101      	bne.n	800580c <HAL_I2S_Init+0x24c>
 8005808:	4b0c      	ldr	r3, [pc, #48]	@ (800583c <HAL_I2S_Init+0x27c>)
 800580a:	e001      	b.n	8005810 <HAL_I2S_Init+0x250>
 800580c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005810:	897a      	ldrh	r2, [r7, #10]
 8005812:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3720      	adds	r7, #32
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	08005b29 	.word	0x08005b29
 8005830:	cccccccd 	.word	0xcccccccd
 8005834:	08005c3d 	.word	0x08005c3d
 8005838:	40003800 	.word	0x40003800
 800583c:	40003400 	.word	0x40003400

08005840 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b086      	sub	sp, #24
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	4613      	mov	r3, r2
 800584c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d002      	beq.n	800585a <HAL_I2S_Transmit_DMA+0x1a>
 8005854:	88fb      	ldrh	r3, [r7, #6]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d101      	bne.n	800585e <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e08a      	b.n	8005974 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005864:	b2db      	uxtb	r3, r3
 8005866:	2b01      	cmp	r3, #1
 8005868:	d001      	beq.n	800586e <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 800586a:	2302      	movs	r3, #2
 800586c:	e082      	b.n	8005974 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b01      	cmp	r3, #1
 8005878:	d101      	bne.n	800587e <HAL_I2S_Transmit_DMA+0x3e>
 800587a:	2302      	movs	r3, #2
 800587c:	e07a      	b.n	8005974 <HAL_I2S_Transmit_DMA+0x134>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2201      	movs	r2, #1
 8005882:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2203      	movs	r2, #3
 800588a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	69db      	ldr	r3, [r3, #28]
 80058a0:	f003 0307 	and.w	r3, r3, #7
 80058a4:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	2b03      	cmp	r3, #3
 80058aa:	d002      	beq.n	80058b2 <HAL_I2S_Transmit_DMA+0x72>
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	2b05      	cmp	r3, #5
 80058b0:	d10a      	bne.n	80058c8 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 80058b2:	88fb      	ldrh	r3, [r7, #6]
 80058b4:	005b      	lsls	r3, r3, #1
 80058b6:	b29a      	uxth	r2, r3
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 80058bc:	88fb      	ldrh	r3, [r7, #6]
 80058be:	005b      	lsls	r3, r3, #1
 80058c0:	b29a      	uxth	r2, r3
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80058c6:	e005      	b.n	80058d4 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	88fa      	ldrh	r2, [r7, #6]
 80058cc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	88fa      	ldrh	r2, [r7, #6]
 80058d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058d8:	4a28      	ldr	r2, [pc, #160]	@ (800597c <HAL_I2S_Transmit_DMA+0x13c>)
 80058da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058e0:	4a27      	ldr	r2, [pc, #156]	@ (8005980 <HAL_I2S_Transmit_DMA+0x140>)
 80058e2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058e8:	4a26      	ldr	r2, [pc, #152]	@ (8005984 <HAL_I2S_Transmit_DMA+0x144>)
 80058ea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80058f4:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80058fc:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005902:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005904:	f7fc ffa0 	bl	8002848 <HAL_DMA_Start_IT>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00f      	beq.n	800592e <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005912:	f043 0208 	orr.w	r2, r3, #8
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e022      	b.n	8005974 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f003 0302 	and.w	r3, r3, #2
 8005940:	2b00      	cmp	r3, #0
 8005942:	d107      	bne.n	8005954 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f042 0202 	orr.w	r2, r2, #2
 8005952:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	69db      	ldr	r3, [r3, #28]
 800595a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800595e:	2b00      	cmp	r3, #0
 8005960:	d107      	bne.n	8005972 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	69da      	ldr	r2, [r3, #28]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005970:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3718      	adds	r7, #24
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	08005a07 	.word	0x08005a07
 8005980:	080059c5 	.word	0x080059c5
 8005984:	08005a23 	.word	0x08005a23

08005988 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059d0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	69db      	ldr	r3, [r3, #28]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d10e      	bne.n	80059f8 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	685a      	ldr	r2, [r3, #4]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f022 0202 	bic.w	r2, r2, #2
 80059e8:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f7fb fe97 	bl	800172c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80059fe:	bf00      	nop
 8005a00:	3710      	adds	r7, #16
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b084      	sub	sp, #16
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a12:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f7ff ffb7 	bl	8005988 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005a1a:	bf00      	nop
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b084      	sub	sp, #16
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a2e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	685a      	ldr	r2, [r3, #4]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f022 0203 	bic.w	r2, r2, #3
 8005a3e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a58:	f043 0208 	orr.w	r2, r3, #8
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f7ff ffa5 	bl	80059b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005a66:	bf00      	nop
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b082      	sub	sp, #8
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a7a:	881a      	ldrh	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a86:	1c9a      	adds	r2, r3, #2
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	3b01      	subs	r3, #1
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d10e      	bne.n	8005ac2 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	685a      	ldr	r2, [r3, #4]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005ab2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f7fb fe35 	bl	800172c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005ac2:	bf00      	nop
 8005ac4:	3708      	adds	r7, #8
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b082      	sub	sp, #8
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68da      	ldr	r2, [r3, #12]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005adc:	b292      	uxth	r2, r2
 8005ade:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae4:	1c9a      	adds	r2, r3, #2
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	3b01      	subs	r3, #1
 8005af2:	b29a      	uxth	r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d10e      	bne.n	8005b20 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	685a      	ldr	r2, [r3, #4]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005b10:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2201      	movs	r2, #1
 8005b16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f7ff ff3e 	bl	800599c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005b20:	bf00      	nop
 8005b22:	3708      	adds	r7, #8
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b086      	sub	sp, #24
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	2b04      	cmp	r3, #4
 8005b42:	d13a      	bne.n	8005bba <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d109      	bne.n	8005b62 <I2S_IRQHandler+0x3a>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b58:	2b40      	cmp	r3, #64	@ 0x40
 8005b5a:	d102      	bne.n	8005b62 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f7ff ffb4 	bl	8005aca <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b68:	2b40      	cmp	r3, #64	@ 0x40
 8005b6a:	d126      	bne.n	8005bba <I2S_IRQHandler+0x92>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	f003 0320 	and.w	r3, r3, #32
 8005b76:	2b20      	cmp	r3, #32
 8005b78:	d11f      	bne.n	8005bba <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	685a      	ldr	r2, [r3, #4]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005b88:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	613b      	str	r3, [r7, #16]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	613b      	str	r3, [r7, #16]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	613b      	str	r3, [r7, #16]
 8005b9e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bac:	f043 0202 	orr.w	r2, r3, #2
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f7ff fefb 	bl	80059b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b03      	cmp	r3, #3
 8005bc4:	d136      	bne.n	8005c34 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	f003 0302 	and.w	r3, r3, #2
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d109      	bne.n	8005be4 <I2S_IRQHandler+0xbc>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bda:	2b80      	cmp	r3, #128	@ 0x80
 8005bdc:	d102      	bne.n	8005be4 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f7ff ff45 	bl	8005a6e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	f003 0308 	and.w	r3, r3, #8
 8005bea:	2b08      	cmp	r3, #8
 8005bec:	d122      	bne.n	8005c34 <I2S_IRQHandler+0x10c>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f003 0320 	and.w	r3, r3, #32
 8005bf8:	2b20      	cmp	r3, #32
 8005bfa:	d11b      	bne.n	8005c34 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	685a      	ldr	r2, [r3, #4]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005c0a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	60fb      	str	r3, [r7, #12]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	60fb      	str	r3, [r7, #12]
 8005c18:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c26:	f043 0204 	orr.w	r2, r3, #4
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f7ff febe 	bl	80059b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005c34:	bf00      	nop
 8005c36:	3718      	adds	r7, #24
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b088      	sub	sp, #32
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a92      	ldr	r2, [pc, #584]	@ (8005e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d101      	bne.n	8005c5a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005c56:	4b92      	ldr	r3, [pc, #584]	@ (8005ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005c58:	e001      	b.n	8005c5e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005c5a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a8b      	ldr	r2, [pc, #556]	@ (8005e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d101      	bne.n	8005c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005c74:	4b8a      	ldr	r3, [pc, #552]	@ (8005ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005c76:	e001      	b.n	8005c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005c78:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c88:	d004      	beq.n	8005c94 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	f040 8099 	bne.w	8005dc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	f003 0302 	and.w	r3, r3, #2
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d107      	bne.n	8005cae <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d002      	beq.n	8005cae <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 f925 	bl	8005ef8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	f003 0301 	and.w	r3, r3, #1
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d107      	bne.n	8005cc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d002      	beq.n	8005cc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 f9c8 	bl	8006058 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cce:	2b40      	cmp	r3, #64	@ 0x40
 8005cd0:	d13a      	bne.n	8005d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	f003 0320 	and.w	r3, r3, #32
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d035      	beq.n	8005d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a6e      	ldr	r2, [pc, #440]	@ (8005e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d101      	bne.n	8005cea <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005ce6:	4b6e      	ldr	r3, [pc, #440]	@ (8005ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ce8:	e001      	b.n	8005cee <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005cea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005cee:	685a      	ldr	r2, [r3, #4]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4969      	ldr	r1, [pc, #420]	@ (8005e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005cf6:	428b      	cmp	r3, r1
 8005cf8:	d101      	bne.n	8005cfe <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005cfa:	4b69      	ldr	r3, [pc, #420]	@ (8005ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005cfc:	e001      	b.n	8005d02 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005cfe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005d02:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005d06:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	685a      	ldr	r2, [r3, #4]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005d16:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005d18:	2300      	movs	r3, #0
 8005d1a:	60fb      	str	r3, [r7, #12]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	60fb      	str	r3, [r7, #12]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	60fb      	str	r3, [r7, #12]
 8005d2c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d3a:	f043 0202 	orr.w	r2, r3, #2
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f7ff fe34 	bl	80059b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	f003 0308 	and.w	r3, r3, #8
 8005d4e:	2b08      	cmp	r3, #8
 8005d50:	f040 80c3 	bne.w	8005eda <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	f003 0320 	and.w	r3, r3, #32
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	f000 80bd 	beq.w	8005eda <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	685a      	ldr	r2, [r3, #4]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005d6e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a49      	ldr	r2, [pc, #292]	@ (8005e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d101      	bne.n	8005d7e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005d7a:	4b49      	ldr	r3, [pc, #292]	@ (8005ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d7c:	e001      	b.n	8005d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005d7e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005d82:	685a      	ldr	r2, [r3, #4]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4944      	ldr	r1, [pc, #272]	@ (8005e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d8a:	428b      	cmp	r3, r1
 8005d8c:	d101      	bne.n	8005d92 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005d8e:	4b44      	ldr	r3, [pc, #272]	@ (8005ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d90:	e001      	b.n	8005d96 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005d92:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005d96:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005d9a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	60bb      	str	r3, [r7, #8]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	60bb      	str	r3, [r7, #8]
 8005da8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005db6:	f043 0204 	orr.w	r2, r3, #4
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f7ff fdf6 	bl	80059b0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005dc4:	e089      	b.n	8005eda <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	f003 0302 	and.w	r3, r3, #2
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d107      	bne.n	8005de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d002      	beq.n	8005de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f8be 	bl	8005f5c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d107      	bne.n	8005dfa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d002      	beq.n	8005dfa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 f8fd 	bl	8005ff4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e00:	2b40      	cmp	r3, #64	@ 0x40
 8005e02:	d12f      	bne.n	8005e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	f003 0320 	and.w	r3, r3, #32
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d02a      	beq.n	8005e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	685a      	ldr	r2, [r3, #4]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005e1c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a1e      	ldr	r2, [pc, #120]	@ (8005e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d101      	bne.n	8005e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005e28:	4b1d      	ldr	r3, [pc, #116]	@ (8005ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e2a:	e001      	b.n	8005e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005e2c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e30:	685a      	ldr	r2, [r3, #4]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4919      	ldr	r1, [pc, #100]	@ (8005e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e38:	428b      	cmp	r3, r1
 8005e3a:	d101      	bne.n	8005e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005e3c:	4b18      	ldr	r3, [pc, #96]	@ (8005ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e3e:	e001      	b.n	8005e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005e40:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e44:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005e48:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e56:	f043 0202 	orr.w	r2, r3, #2
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f7ff fda6 	bl	80059b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	f003 0308 	and.w	r3, r3, #8
 8005e6a:	2b08      	cmp	r3, #8
 8005e6c:	d136      	bne.n	8005edc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	f003 0320 	and.w	r3, r3, #32
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d031      	beq.n	8005edc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a07      	ldr	r2, [pc, #28]	@ (8005e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d101      	bne.n	8005e86 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005e82:	4b07      	ldr	r3, [pc, #28]	@ (8005ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e84:	e001      	b.n	8005e8a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005e86:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e8a:	685a      	ldr	r2, [r3, #4]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4902      	ldr	r1, [pc, #8]	@ (8005e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e92:	428b      	cmp	r3, r1
 8005e94:	d106      	bne.n	8005ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005e96:	4b02      	ldr	r3, [pc, #8]	@ (8005ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e98:	e006      	b.n	8005ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005e9a:	bf00      	nop
 8005e9c:	40003800 	.word	0x40003800
 8005ea0:	40003400 	.word	0x40003400
 8005ea4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ea8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005eac:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	685a      	ldr	r2, [r3, #4]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005ebc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eca:	f043 0204 	orr.w	r2, r3, #4
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f7ff fd6c 	bl	80059b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005ed8:	e000      	b.n	8005edc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005eda:	bf00      	nop
}
 8005edc:	bf00      	nop
 8005ede:	3720      	adds	r7, #32
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005eec:	bf00      	nop
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f04:	1c99      	adds	r1, r3, #2
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	6251      	str	r1, [r2, #36]	@ 0x24
 8005f0a:	881a      	ldrh	r2, [r3, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d113      	bne.n	8005f52 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	685a      	ldr	r2, [r3, #4]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005f38:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d106      	bne.n	8005f52 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f7ff ffc9 	bl	8005ee4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005f52:	bf00      	nop
 8005f54:	3708      	adds	r7, #8
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
	...

08005f5c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f68:	1c99      	adds	r1, r3, #2
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	6251      	str	r1, [r2, #36]	@ 0x24
 8005f6e:	8819      	ldrh	r1, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a1d      	ldr	r2, [pc, #116]	@ (8005fec <I2SEx_TxISR_I2SExt+0x90>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d101      	bne.n	8005f7e <I2SEx_TxISR_I2SExt+0x22>
 8005f7a:	4b1d      	ldr	r3, [pc, #116]	@ (8005ff0 <I2SEx_TxISR_I2SExt+0x94>)
 8005f7c:	e001      	b.n	8005f82 <I2SEx_TxISR_I2SExt+0x26>
 8005f7e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f82:	460a      	mov	r2, r1
 8005f84:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d121      	bne.n	8005fe2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a12      	ldr	r2, [pc, #72]	@ (8005fec <I2SEx_TxISR_I2SExt+0x90>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d101      	bne.n	8005fac <I2SEx_TxISR_I2SExt+0x50>
 8005fa8:	4b11      	ldr	r3, [pc, #68]	@ (8005ff0 <I2SEx_TxISR_I2SExt+0x94>)
 8005faa:	e001      	b.n	8005fb0 <I2SEx_TxISR_I2SExt+0x54>
 8005fac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005fb0:	685a      	ldr	r2, [r3, #4]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	490d      	ldr	r1, [pc, #52]	@ (8005fec <I2SEx_TxISR_I2SExt+0x90>)
 8005fb8:	428b      	cmp	r3, r1
 8005fba:	d101      	bne.n	8005fc0 <I2SEx_TxISR_I2SExt+0x64>
 8005fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8005ff0 <I2SEx_TxISR_I2SExt+0x94>)
 8005fbe:	e001      	b.n	8005fc4 <I2SEx_TxISR_I2SExt+0x68>
 8005fc0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005fc4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005fc8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d106      	bne.n	8005fe2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f7ff ff81 	bl	8005ee4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005fe2:	bf00      	nop
 8005fe4:	3708      	adds	r7, #8
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	40003800 	.word	0x40003800
 8005ff0:	40003400 	.word	0x40003400

08005ff4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68d8      	ldr	r0, [r3, #12]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006006:	1c99      	adds	r1, r3, #2
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800600c:	b282      	uxth	r2, r0
 800600e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006014:	b29b      	uxth	r3, r3
 8006016:	3b01      	subs	r3, #1
 8006018:	b29a      	uxth	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006022:	b29b      	uxth	r3, r3
 8006024:	2b00      	cmp	r3, #0
 8006026:	d113      	bne.n	8006050 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	685a      	ldr	r2, [r3, #4]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006036:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800603c:	b29b      	uxth	r3, r3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d106      	bne.n	8006050 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f7ff ff4a 	bl	8005ee4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006050:	bf00      	nop
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a20      	ldr	r2, [pc, #128]	@ (80060e8 <I2SEx_RxISR_I2SExt+0x90>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d101      	bne.n	800606e <I2SEx_RxISR_I2SExt+0x16>
 800606a:	4b20      	ldr	r3, [pc, #128]	@ (80060ec <I2SEx_RxISR_I2SExt+0x94>)
 800606c:	e001      	b.n	8006072 <I2SEx_RxISR_I2SExt+0x1a>
 800606e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006072:	68d8      	ldr	r0, [r3, #12]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006078:	1c99      	adds	r1, r3, #2
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800607e:	b282      	uxth	r2, r0
 8006080:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006086:	b29b      	uxth	r3, r3
 8006088:	3b01      	subs	r3, #1
 800608a:	b29a      	uxth	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006094:	b29b      	uxth	r3, r3
 8006096:	2b00      	cmp	r3, #0
 8006098:	d121      	bne.n	80060de <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a12      	ldr	r2, [pc, #72]	@ (80060e8 <I2SEx_RxISR_I2SExt+0x90>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d101      	bne.n	80060a8 <I2SEx_RxISR_I2SExt+0x50>
 80060a4:	4b11      	ldr	r3, [pc, #68]	@ (80060ec <I2SEx_RxISR_I2SExt+0x94>)
 80060a6:	e001      	b.n	80060ac <I2SEx_RxISR_I2SExt+0x54>
 80060a8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80060ac:	685a      	ldr	r2, [r3, #4]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	490d      	ldr	r1, [pc, #52]	@ (80060e8 <I2SEx_RxISR_I2SExt+0x90>)
 80060b4:	428b      	cmp	r3, r1
 80060b6:	d101      	bne.n	80060bc <I2SEx_RxISR_I2SExt+0x64>
 80060b8:	4b0c      	ldr	r3, [pc, #48]	@ (80060ec <I2SEx_RxISR_I2SExt+0x94>)
 80060ba:	e001      	b.n	80060c0 <I2SEx_RxISR_I2SExt+0x68>
 80060bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80060c0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80060c4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d106      	bne.n	80060de <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f7ff ff03 	bl	8005ee4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80060de:	bf00      	nop
 80060e0:	3708      	adds	r7, #8
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	40003800 	.word	0x40003800
 80060ec:	40003400 	.word	0x40003400

080060f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e267      	b.n	80065d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	2b00      	cmp	r3, #0
 800610c:	d075      	beq.n	80061fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800610e:	4b88      	ldr	r3, [pc, #544]	@ (8006330 <HAL_RCC_OscConfig+0x240>)
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f003 030c 	and.w	r3, r3, #12
 8006116:	2b04      	cmp	r3, #4
 8006118:	d00c      	beq.n	8006134 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800611a:	4b85      	ldr	r3, [pc, #532]	@ (8006330 <HAL_RCC_OscConfig+0x240>)
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006122:	2b08      	cmp	r3, #8
 8006124:	d112      	bne.n	800614c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006126:	4b82      	ldr	r3, [pc, #520]	@ (8006330 <HAL_RCC_OscConfig+0x240>)
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800612e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006132:	d10b      	bne.n	800614c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006134:	4b7e      	ldr	r3, [pc, #504]	@ (8006330 <HAL_RCC_OscConfig+0x240>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800613c:	2b00      	cmp	r3, #0
 800613e:	d05b      	beq.n	80061f8 <HAL_RCC_OscConfig+0x108>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d157      	bne.n	80061f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e242      	b.n	80065d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006154:	d106      	bne.n	8006164 <HAL_RCC_OscConfig+0x74>
 8006156:	4b76      	ldr	r3, [pc, #472]	@ (8006330 <HAL_RCC_OscConfig+0x240>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a75      	ldr	r2, [pc, #468]	@ (8006330 <HAL_RCC_OscConfig+0x240>)
 800615c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006160:	6013      	str	r3, [r2, #0]
 8006162:	e01d      	b.n	80061a0 <HAL_RCC_OscConfig+0xb0>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800616c:	d10c      	bne.n	8006188 <HAL_RCC_OscConfig+0x98>
 800616e:	4b70      	ldr	r3, [pc, #448]	@ (8006330 <HAL_RCC_OscConfig+0x240>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a6f      	ldr	r2, [pc, #444]	@ (8006330 <HAL_RCC_OscConfig+0x240>)
 8006174:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006178:	6013      	str	r3, [r2, #0]
 800617a:	4b6d      	ldr	r3, [pc, #436]	@ (8006330 <HAL_RCC_OscConfig+0x240>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a6c      	ldr	r2, [pc, #432]	@ (8006330 <HAL_RCC_OscConfig+0x240>)
 8006180:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006184:	6013      	str	r3, [r2, #0]
 8006186:	e00b      	b.n	80061a0 <HAL_RCC_OscConfig+0xb0>
 8006188:	4b69      	ldr	r3, [pc, #420]	@ (8006330 <HAL_RCC_OscConfig+0x240>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a68      	ldr	r2, [pc, #416]	@ (8006330 <HAL_RCC_OscConfig+0x240>)
 800618e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006192:	6013      	str	r3, [r2, #0]
 8006194:	4b66      	ldr	r3, [pc, #408]	@ (8006330 <HAL_RCC_OscConfig+0x240>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a65      	ldr	r2, [pc, #404]	@ (8006330 <HAL_RCC_OscConfig+0x240>)
 800619a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800619e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d013      	beq.n	80061d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061a8:	f7fb fd84 	bl	8001cb4 <HAL_GetTick>
 80061ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061ae:	e008      	b.n	80061c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061b0:	f7fb fd80 	bl	8001cb4 <HAL_GetTick>
 80061b4:	4602      	mov	r2, r0
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	2b64      	cmp	r3, #100	@ 0x64
 80061bc:	d901      	bls.n	80061c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	e207      	b.n	80065d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061c2:	4b5b      	ldr	r3, [pc, #364]	@ (8006330 <HAL_RCC_OscConfig+0x240>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d0f0      	beq.n	80061b0 <HAL_RCC_OscConfig+0xc0>
 80061ce:	e014      	b.n	80061fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061d0:	f7fb fd70 	bl	8001cb4 <HAL_GetTick>
 80061d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061d6:	e008      	b.n	80061ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061d8:	f7fb fd6c 	bl	8001cb4 <HAL_GetTick>
 80061dc:	4602      	mov	r2, r0
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	2b64      	cmp	r3, #100	@ 0x64
 80061e4:	d901      	bls.n	80061ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e1f3      	b.n	80065d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061ea:	4b51      	ldr	r3, [pc, #324]	@ (8006330 <HAL_RCC_OscConfig+0x240>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d1f0      	bne.n	80061d8 <HAL_RCC_OscConfig+0xe8>
 80061f6:	e000      	b.n	80061fa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 0302 	and.w	r3, r3, #2
 8006202:	2b00      	cmp	r3, #0
 8006204:	d063      	beq.n	80062ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006206:	4b4a      	ldr	r3, [pc, #296]	@ (8006330 <HAL_RCC_OscConfig+0x240>)
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f003 030c 	and.w	r3, r3, #12
 800620e:	2b00      	cmp	r3, #0
 8006210:	d00b      	beq.n	800622a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006212:	4b47      	ldr	r3, [pc, #284]	@ (8006330 <HAL_RCC_OscConfig+0x240>)
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800621a:	2b08      	cmp	r3, #8
 800621c:	d11c      	bne.n	8006258 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800621e:	4b44      	ldr	r3, [pc, #272]	@ (8006330 <HAL_RCC_OscConfig+0x240>)
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d116      	bne.n	8006258 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800622a:	4b41      	ldr	r3, [pc, #260]	@ (8006330 <HAL_RCC_OscConfig+0x240>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 0302 	and.w	r3, r3, #2
 8006232:	2b00      	cmp	r3, #0
 8006234:	d005      	beq.n	8006242 <HAL_RCC_OscConfig+0x152>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	2b01      	cmp	r3, #1
 800623c:	d001      	beq.n	8006242 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e1c7      	b.n	80065d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006242:	4b3b      	ldr	r3, [pc, #236]	@ (8006330 <HAL_RCC_OscConfig+0x240>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	00db      	lsls	r3, r3, #3
 8006250:	4937      	ldr	r1, [pc, #220]	@ (8006330 <HAL_RCC_OscConfig+0x240>)
 8006252:	4313      	orrs	r3, r2
 8006254:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006256:	e03a      	b.n	80062ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d020      	beq.n	80062a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006260:	4b34      	ldr	r3, [pc, #208]	@ (8006334 <HAL_RCC_OscConfig+0x244>)
 8006262:	2201      	movs	r2, #1
 8006264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006266:	f7fb fd25 	bl	8001cb4 <HAL_GetTick>
 800626a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800626c:	e008      	b.n	8006280 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800626e:	f7fb fd21 	bl	8001cb4 <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	2b02      	cmp	r3, #2
 800627a:	d901      	bls.n	8006280 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e1a8      	b.n	80065d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006280:	4b2b      	ldr	r3, [pc, #172]	@ (8006330 <HAL_RCC_OscConfig+0x240>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 0302 	and.w	r3, r3, #2
 8006288:	2b00      	cmp	r3, #0
 800628a:	d0f0      	beq.n	800626e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800628c:	4b28      	ldr	r3, [pc, #160]	@ (8006330 <HAL_RCC_OscConfig+0x240>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	00db      	lsls	r3, r3, #3
 800629a:	4925      	ldr	r1, [pc, #148]	@ (8006330 <HAL_RCC_OscConfig+0x240>)
 800629c:	4313      	orrs	r3, r2
 800629e:	600b      	str	r3, [r1, #0]
 80062a0:	e015      	b.n	80062ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80062a2:	4b24      	ldr	r3, [pc, #144]	@ (8006334 <HAL_RCC_OscConfig+0x244>)
 80062a4:	2200      	movs	r2, #0
 80062a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a8:	f7fb fd04 	bl	8001cb4 <HAL_GetTick>
 80062ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062ae:	e008      	b.n	80062c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062b0:	f7fb fd00 	bl	8001cb4 <HAL_GetTick>
 80062b4:	4602      	mov	r2, r0
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d901      	bls.n	80062c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	e187      	b.n	80065d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062c2:	4b1b      	ldr	r3, [pc, #108]	@ (8006330 <HAL_RCC_OscConfig+0x240>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0302 	and.w	r3, r3, #2
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1f0      	bne.n	80062b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0308 	and.w	r3, r3, #8
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d036      	beq.n	8006348 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	695b      	ldr	r3, [r3, #20]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d016      	beq.n	8006310 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062e2:	4b15      	ldr	r3, [pc, #84]	@ (8006338 <HAL_RCC_OscConfig+0x248>)
 80062e4:	2201      	movs	r2, #1
 80062e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062e8:	f7fb fce4 	bl	8001cb4 <HAL_GetTick>
 80062ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062ee:	e008      	b.n	8006302 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062f0:	f7fb fce0 	bl	8001cb4 <HAL_GetTick>
 80062f4:	4602      	mov	r2, r0
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d901      	bls.n	8006302 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80062fe:	2303      	movs	r3, #3
 8006300:	e167      	b.n	80065d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006302:	4b0b      	ldr	r3, [pc, #44]	@ (8006330 <HAL_RCC_OscConfig+0x240>)
 8006304:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006306:	f003 0302 	and.w	r3, r3, #2
 800630a:	2b00      	cmp	r3, #0
 800630c:	d0f0      	beq.n	80062f0 <HAL_RCC_OscConfig+0x200>
 800630e:	e01b      	b.n	8006348 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006310:	4b09      	ldr	r3, [pc, #36]	@ (8006338 <HAL_RCC_OscConfig+0x248>)
 8006312:	2200      	movs	r2, #0
 8006314:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006316:	f7fb fccd 	bl	8001cb4 <HAL_GetTick>
 800631a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800631c:	e00e      	b.n	800633c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800631e:	f7fb fcc9 	bl	8001cb4 <HAL_GetTick>
 8006322:	4602      	mov	r2, r0
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	2b02      	cmp	r3, #2
 800632a:	d907      	bls.n	800633c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	e150      	b.n	80065d2 <HAL_RCC_OscConfig+0x4e2>
 8006330:	40023800 	.word	0x40023800
 8006334:	42470000 	.word	0x42470000
 8006338:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800633c:	4b88      	ldr	r3, [pc, #544]	@ (8006560 <HAL_RCC_OscConfig+0x470>)
 800633e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006340:	f003 0302 	and.w	r3, r3, #2
 8006344:	2b00      	cmp	r3, #0
 8006346:	d1ea      	bne.n	800631e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 0304 	and.w	r3, r3, #4
 8006350:	2b00      	cmp	r3, #0
 8006352:	f000 8097 	beq.w	8006484 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006356:	2300      	movs	r3, #0
 8006358:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800635a:	4b81      	ldr	r3, [pc, #516]	@ (8006560 <HAL_RCC_OscConfig+0x470>)
 800635c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800635e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006362:	2b00      	cmp	r3, #0
 8006364:	d10f      	bne.n	8006386 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006366:	2300      	movs	r3, #0
 8006368:	60bb      	str	r3, [r7, #8]
 800636a:	4b7d      	ldr	r3, [pc, #500]	@ (8006560 <HAL_RCC_OscConfig+0x470>)
 800636c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800636e:	4a7c      	ldr	r2, [pc, #496]	@ (8006560 <HAL_RCC_OscConfig+0x470>)
 8006370:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006374:	6413      	str	r3, [r2, #64]	@ 0x40
 8006376:	4b7a      	ldr	r3, [pc, #488]	@ (8006560 <HAL_RCC_OscConfig+0x470>)
 8006378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800637a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800637e:	60bb      	str	r3, [r7, #8]
 8006380:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006382:	2301      	movs	r3, #1
 8006384:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006386:	4b77      	ldr	r3, [pc, #476]	@ (8006564 <HAL_RCC_OscConfig+0x474>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800638e:	2b00      	cmp	r3, #0
 8006390:	d118      	bne.n	80063c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006392:	4b74      	ldr	r3, [pc, #464]	@ (8006564 <HAL_RCC_OscConfig+0x474>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a73      	ldr	r2, [pc, #460]	@ (8006564 <HAL_RCC_OscConfig+0x474>)
 8006398:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800639c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800639e:	f7fb fc89 	bl	8001cb4 <HAL_GetTick>
 80063a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063a4:	e008      	b.n	80063b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063a6:	f7fb fc85 	bl	8001cb4 <HAL_GetTick>
 80063aa:	4602      	mov	r2, r0
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	d901      	bls.n	80063b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80063b4:	2303      	movs	r3, #3
 80063b6:	e10c      	b.n	80065d2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063b8:	4b6a      	ldr	r3, [pc, #424]	@ (8006564 <HAL_RCC_OscConfig+0x474>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d0f0      	beq.n	80063a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d106      	bne.n	80063da <HAL_RCC_OscConfig+0x2ea>
 80063cc:	4b64      	ldr	r3, [pc, #400]	@ (8006560 <HAL_RCC_OscConfig+0x470>)
 80063ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063d0:	4a63      	ldr	r2, [pc, #396]	@ (8006560 <HAL_RCC_OscConfig+0x470>)
 80063d2:	f043 0301 	orr.w	r3, r3, #1
 80063d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80063d8:	e01c      	b.n	8006414 <HAL_RCC_OscConfig+0x324>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	2b05      	cmp	r3, #5
 80063e0:	d10c      	bne.n	80063fc <HAL_RCC_OscConfig+0x30c>
 80063e2:	4b5f      	ldr	r3, [pc, #380]	@ (8006560 <HAL_RCC_OscConfig+0x470>)
 80063e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063e6:	4a5e      	ldr	r2, [pc, #376]	@ (8006560 <HAL_RCC_OscConfig+0x470>)
 80063e8:	f043 0304 	orr.w	r3, r3, #4
 80063ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80063ee:	4b5c      	ldr	r3, [pc, #368]	@ (8006560 <HAL_RCC_OscConfig+0x470>)
 80063f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063f2:	4a5b      	ldr	r2, [pc, #364]	@ (8006560 <HAL_RCC_OscConfig+0x470>)
 80063f4:	f043 0301 	orr.w	r3, r3, #1
 80063f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80063fa:	e00b      	b.n	8006414 <HAL_RCC_OscConfig+0x324>
 80063fc:	4b58      	ldr	r3, [pc, #352]	@ (8006560 <HAL_RCC_OscConfig+0x470>)
 80063fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006400:	4a57      	ldr	r2, [pc, #348]	@ (8006560 <HAL_RCC_OscConfig+0x470>)
 8006402:	f023 0301 	bic.w	r3, r3, #1
 8006406:	6713      	str	r3, [r2, #112]	@ 0x70
 8006408:	4b55      	ldr	r3, [pc, #340]	@ (8006560 <HAL_RCC_OscConfig+0x470>)
 800640a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800640c:	4a54      	ldr	r2, [pc, #336]	@ (8006560 <HAL_RCC_OscConfig+0x470>)
 800640e:	f023 0304 	bic.w	r3, r3, #4
 8006412:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d015      	beq.n	8006448 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800641c:	f7fb fc4a 	bl	8001cb4 <HAL_GetTick>
 8006420:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006422:	e00a      	b.n	800643a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006424:	f7fb fc46 	bl	8001cb4 <HAL_GetTick>
 8006428:	4602      	mov	r2, r0
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006432:	4293      	cmp	r3, r2
 8006434:	d901      	bls.n	800643a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006436:	2303      	movs	r3, #3
 8006438:	e0cb      	b.n	80065d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800643a:	4b49      	ldr	r3, [pc, #292]	@ (8006560 <HAL_RCC_OscConfig+0x470>)
 800643c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800643e:	f003 0302 	and.w	r3, r3, #2
 8006442:	2b00      	cmp	r3, #0
 8006444:	d0ee      	beq.n	8006424 <HAL_RCC_OscConfig+0x334>
 8006446:	e014      	b.n	8006472 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006448:	f7fb fc34 	bl	8001cb4 <HAL_GetTick>
 800644c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800644e:	e00a      	b.n	8006466 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006450:	f7fb fc30 	bl	8001cb4 <HAL_GetTick>
 8006454:	4602      	mov	r2, r0
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800645e:	4293      	cmp	r3, r2
 8006460:	d901      	bls.n	8006466 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006462:	2303      	movs	r3, #3
 8006464:	e0b5      	b.n	80065d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006466:	4b3e      	ldr	r3, [pc, #248]	@ (8006560 <HAL_RCC_OscConfig+0x470>)
 8006468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800646a:	f003 0302 	and.w	r3, r3, #2
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1ee      	bne.n	8006450 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006472:	7dfb      	ldrb	r3, [r7, #23]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d105      	bne.n	8006484 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006478:	4b39      	ldr	r3, [pc, #228]	@ (8006560 <HAL_RCC_OscConfig+0x470>)
 800647a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800647c:	4a38      	ldr	r2, [pc, #224]	@ (8006560 <HAL_RCC_OscConfig+0x470>)
 800647e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006482:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	2b00      	cmp	r3, #0
 800648a:	f000 80a1 	beq.w	80065d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800648e:	4b34      	ldr	r3, [pc, #208]	@ (8006560 <HAL_RCC_OscConfig+0x470>)
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	f003 030c 	and.w	r3, r3, #12
 8006496:	2b08      	cmp	r3, #8
 8006498:	d05c      	beq.n	8006554 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d141      	bne.n	8006526 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064a2:	4b31      	ldr	r3, [pc, #196]	@ (8006568 <HAL_RCC_OscConfig+0x478>)
 80064a4:	2200      	movs	r2, #0
 80064a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064a8:	f7fb fc04 	bl	8001cb4 <HAL_GetTick>
 80064ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064ae:	e008      	b.n	80064c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064b0:	f7fb fc00 	bl	8001cb4 <HAL_GetTick>
 80064b4:	4602      	mov	r2, r0
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	d901      	bls.n	80064c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80064be:	2303      	movs	r3, #3
 80064c0:	e087      	b.n	80065d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064c2:	4b27      	ldr	r3, [pc, #156]	@ (8006560 <HAL_RCC_OscConfig+0x470>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d1f0      	bne.n	80064b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	69da      	ldr	r2, [r3, #28]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a1b      	ldr	r3, [r3, #32]
 80064d6:	431a      	orrs	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064dc:	019b      	lsls	r3, r3, #6
 80064de:	431a      	orrs	r2, r3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e4:	085b      	lsrs	r3, r3, #1
 80064e6:	3b01      	subs	r3, #1
 80064e8:	041b      	lsls	r3, r3, #16
 80064ea:	431a      	orrs	r2, r3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064f0:	061b      	lsls	r3, r3, #24
 80064f2:	491b      	ldr	r1, [pc, #108]	@ (8006560 <HAL_RCC_OscConfig+0x470>)
 80064f4:	4313      	orrs	r3, r2
 80064f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064f8:	4b1b      	ldr	r3, [pc, #108]	@ (8006568 <HAL_RCC_OscConfig+0x478>)
 80064fa:	2201      	movs	r2, #1
 80064fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064fe:	f7fb fbd9 	bl	8001cb4 <HAL_GetTick>
 8006502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006504:	e008      	b.n	8006518 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006506:	f7fb fbd5 	bl	8001cb4 <HAL_GetTick>
 800650a:	4602      	mov	r2, r0
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	2b02      	cmp	r3, #2
 8006512:	d901      	bls.n	8006518 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006514:	2303      	movs	r3, #3
 8006516:	e05c      	b.n	80065d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006518:	4b11      	ldr	r3, [pc, #68]	@ (8006560 <HAL_RCC_OscConfig+0x470>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006520:	2b00      	cmp	r3, #0
 8006522:	d0f0      	beq.n	8006506 <HAL_RCC_OscConfig+0x416>
 8006524:	e054      	b.n	80065d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006526:	4b10      	ldr	r3, [pc, #64]	@ (8006568 <HAL_RCC_OscConfig+0x478>)
 8006528:	2200      	movs	r2, #0
 800652a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800652c:	f7fb fbc2 	bl	8001cb4 <HAL_GetTick>
 8006530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006532:	e008      	b.n	8006546 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006534:	f7fb fbbe 	bl	8001cb4 <HAL_GetTick>
 8006538:	4602      	mov	r2, r0
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	2b02      	cmp	r3, #2
 8006540:	d901      	bls.n	8006546 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	e045      	b.n	80065d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006546:	4b06      	ldr	r3, [pc, #24]	@ (8006560 <HAL_RCC_OscConfig+0x470>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1f0      	bne.n	8006534 <HAL_RCC_OscConfig+0x444>
 8006552:	e03d      	b.n	80065d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	699b      	ldr	r3, [r3, #24]
 8006558:	2b01      	cmp	r3, #1
 800655a:	d107      	bne.n	800656c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e038      	b.n	80065d2 <HAL_RCC_OscConfig+0x4e2>
 8006560:	40023800 	.word	0x40023800
 8006564:	40007000 	.word	0x40007000
 8006568:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800656c:	4b1b      	ldr	r3, [pc, #108]	@ (80065dc <HAL_RCC_OscConfig+0x4ec>)
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	2b01      	cmp	r3, #1
 8006578:	d028      	beq.n	80065cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006584:	429a      	cmp	r2, r3
 8006586:	d121      	bne.n	80065cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006592:	429a      	cmp	r2, r3
 8006594:	d11a      	bne.n	80065cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800659c:	4013      	ands	r3, r2
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80065a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d111      	bne.n	80065cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065b2:	085b      	lsrs	r3, r3, #1
 80065b4:	3b01      	subs	r3, #1
 80065b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d107      	bne.n	80065cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d001      	beq.n	80065d0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e000      	b.n	80065d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3718      	adds	r7, #24
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	40023800 	.word	0x40023800

080065e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d101      	bne.n	80065f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	e0cc      	b.n	800678e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80065f4:	4b68      	ldr	r3, [pc, #416]	@ (8006798 <HAL_RCC_ClockConfig+0x1b8>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 0307 	and.w	r3, r3, #7
 80065fc:	683a      	ldr	r2, [r7, #0]
 80065fe:	429a      	cmp	r2, r3
 8006600:	d90c      	bls.n	800661c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006602:	4b65      	ldr	r3, [pc, #404]	@ (8006798 <HAL_RCC_ClockConfig+0x1b8>)
 8006604:	683a      	ldr	r2, [r7, #0]
 8006606:	b2d2      	uxtb	r2, r2
 8006608:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800660a:	4b63      	ldr	r3, [pc, #396]	@ (8006798 <HAL_RCC_ClockConfig+0x1b8>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 0307 	and.w	r3, r3, #7
 8006612:	683a      	ldr	r2, [r7, #0]
 8006614:	429a      	cmp	r2, r3
 8006616:	d001      	beq.n	800661c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e0b8      	b.n	800678e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 0302 	and.w	r3, r3, #2
 8006624:	2b00      	cmp	r3, #0
 8006626:	d020      	beq.n	800666a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0304 	and.w	r3, r3, #4
 8006630:	2b00      	cmp	r3, #0
 8006632:	d005      	beq.n	8006640 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006634:	4b59      	ldr	r3, [pc, #356]	@ (800679c <HAL_RCC_ClockConfig+0x1bc>)
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	4a58      	ldr	r2, [pc, #352]	@ (800679c <HAL_RCC_ClockConfig+0x1bc>)
 800663a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800663e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 0308 	and.w	r3, r3, #8
 8006648:	2b00      	cmp	r3, #0
 800664a:	d005      	beq.n	8006658 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800664c:	4b53      	ldr	r3, [pc, #332]	@ (800679c <HAL_RCC_ClockConfig+0x1bc>)
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	4a52      	ldr	r2, [pc, #328]	@ (800679c <HAL_RCC_ClockConfig+0x1bc>)
 8006652:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006656:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006658:	4b50      	ldr	r3, [pc, #320]	@ (800679c <HAL_RCC_ClockConfig+0x1bc>)
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	494d      	ldr	r1, [pc, #308]	@ (800679c <HAL_RCC_ClockConfig+0x1bc>)
 8006666:	4313      	orrs	r3, r2
 8006668:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	2b00      	cmp	r3, #0
 8006674:	d044      	beq.n	8006700 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	2b01      	cmp	r3, #1
 800667c:	d107      	bne.n	800668e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800667e:	4b47      	ldr	r3, [pc, #284]	@ (800679c <HAL_RCC_ClockConfig+0x1bc>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006686:	2b00      	cmp	r3, #0
 8006688:	d119      	bne.n	80066be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e07f      	b.n	800678e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	2b02      	cmp	r3, #2
 8006694:	d003      	beq.n	800669e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800669a:	2b03      	cmp	r3, #3
 800669c:	d107      	bne.n	80066ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800669e:	4b3f      	ldr	r3, [pc, #252]	@ (800679c <HAL_RCC_ClockConfig+0x1bc>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d109      	bne.n	80066be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e06f      	b.n	800678e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066ae:	4b3b      	ldr	r3, [pc, #236]	@ (800679c <HAL_RCC_ClockConfig+0x1bc>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 0302 	and.w	r3, r3, #2
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d101      	bne.n	80066be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e067      	b.n	800678e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80066be:	4b37      	ldr	r3, [pc, #220]	@ (800679c <HAL_RCC_ClockConfig+0x1bc>)
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	f023 0203 	bic.w	r2, r3, #3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	4934      	ldr	r1, [pc, #208]	@ (800679c <HAL_RCC_ClockConfig+0x1bc>)
 80066cc:	4313      	orrs	r3, r2
 80066ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80066d0:	f7fb faf0 	bl	8001cb4 <HAL_GetTick>
 80066d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066d6:	e00a      	b.n	80066ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066d8:	f7fb faec 	bl	8001cb4 <HAL_GetTick>
 80066dc:	4602      	mov	r2, r0
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d901      	bls.n	80066ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80066ea:	2303      	movs	r3, #3
 80066ec:	e04f      	b.n	800678e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066ee:	4b2b      	ldr	r3, [pc, #172]	@ (800679c <HAL_RCC_ClockConfig+0x1bc>)
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	f003 020c 	and.w	r2, r3, #12
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d1eb      	bne.n	80066d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006700:	4b25      	ldr	r3, [pc, #148]	@ (8006798 <HAL_RCC_ClockConfig+0x1b8>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 0307 	and.w	r3, r3, #7
 8006708:	683a      	ldr	r2, [r7, #0]
 800670a:	429a      	cmp	r2, r3
 800670c:	d20c      	bcs.n	8006728 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800670e:	4b22      	ldr	r3, [pc, #136]	@ (8006798 <HAL_RCC_ClockConfig+0x1b8>)
 8006710:	683a      	ldr	r2, [r7, #0]
 8006712:	b2d2      	uxtb	r2, r2
 8006714:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006716:	4b20      	ldr	r3, [pc, #128]	@ (8006798 <HAL_RCC_ClockConfig+0x1b8>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 0307 	and.w	r3, r3, #7
 800671e:	683a      	ldr	r2, [r7, #0]
 8006720:	429a      	cmp	r2, r3
 8006722:	d001      	beq.n	8006728 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	e032      	b.n	800678e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 0304 	and.w	r3, r3, #4
 8006730:	2b00      	cmp	r3, #0
 8006732:	d008      	beq.n	8006746 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006734:	4b19      	ldr	r3, [pc, #100]	@ (800679c <HAL_RCC_ClockConfig+0x1bc>)
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	4916      	ldr	r1, [pc, #88]	@ (800679c <HAL_RCC_ClockConfig+0x1bc>)
 8006742:	4313      	orrs	r3, r2
 8006744:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 0308 	and.w	r3, r3, #8
 800674e:	2b00      	cmp	r3, #0
 8006750:	d009      	beq.n	8006766 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006752:	4b12      	ldr	r3, [pc, #72]	@ (800679c <HAL_RCC_ClockConfig+0x1bc>)
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	00db      	lsls	r3, r3, #3
 8006760:	490e      	ldr	r1, [pc, #56]	@ (800679c <HAL_RCC_ClockConfig+0x1bc>)
 8006762:	4313      	orrs	r3, r2
 8006764:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006766:	f000 f821 	bl	80067ac <HAL_RCC_GetSysClockFreq>
 800676a:	4602      	mov	r2, r0
 800676c:	4b0b      	ldr	r3, [pc, #44]	@ (800679c <HAL_RCC_ClockConfig+0x1bc>)
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	091b      	lsrs	r3, r3, #4
 8006772:	f003 030f 	and.w	r3, r3, #15
 8006776:	490a      	ldr	r1, [pc, #40]	@ (80067a0 <HAL_RCC_ClockConfig+0x1c0>)
 8006778:	5ccb      	ldrb	r3, [r1, r3]
 800677a:	fa22 f303 	lsr.w	r3, r2, r3
 800677e:	4a09      	ldr	r2, [pc, #36]	@ (80067a4 <HAL_RCC_ClockConfig+0x1c4>)
 8006780:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006782:	4b09      	ldr	r3, [pc, #36]	@ (80067a8 <HAL_RCC_ClockConfig+0x1c8>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4618      	mov	r0, r3
 8006788:	f7fb fa50 	bl	8001c2c <HAL_InitTick>

  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3710      	adds	r7, #16
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	40023c00 	.word	0x40023c00
 800679c:	40023800 	.word	0x40023800
 80067a0:	08008e08 	.word	0x08008e08
 80067a4:	20000190 	.word	0x20000190
 80067a8:	20000194 	.word	0x20000194

080067ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067b0:	b094      	sub	sp, #80	@ 0x50
 80067b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80067b4:	2300      	movs	r3, #0
 80067b6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80067b8:	2300      	movs	r3, #0
 80067ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80067bc:	2300      	movs	r3, #0
 80067be:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80067c0:	2300      	movs	r3, #0
 80067c2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80067c4:	4b79      	ldr	r3, [pc, #484]	@ (80069ac <HAL_RCC_GetSysClockFreq+0x200>)
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	f003 030c 	and.w	r3, r3, #12
 80067cc:	2b08      	cmp	r3, #8
 80067ce:	d00d      	beq.n	80067ec <HAL_RCC_GetSysClockFreq+0x40>
 80067d0:	2b08      	cmp	r3, #8
 80067d2:	f200 80e1 	bhi.w	8006998 <HAL_RCC_GetSysClockFreq+0x1ec>
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d002      	beq.n	80067e0 <HAL_RCC_GetSysClockFreq+0x34>
 80067da:	2b04      	cmp	r3, #4
 80067dc:	d003      	beq.n	80067e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80067de:	e0db      	b.n	8006998 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80067e0:	4b73      	ldr	r3, [pc, #460]	@ (80069b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80067e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80067e4:	e0db      	b.n	800699e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80067e6:	4b73      	ldr	r3, [pc, #460]	@ (80069b4 <HAL_RCC_GetSysClockFreq+0x208>)
 80067e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80067ea:	e0d8      	b.n	800699e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80067ec:	4b6f      	ldr	r3, [pc, #444]	@ (80069ac <HAL_RCC_GetSysClockFreq+0x200>)
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80067f4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80067f6:	4b6d      	ldr	r3, [pc, #436]	@ (80069ac <HAL_RCC_GetSysClockFreq+0x200>)
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d063      	beq.n	80068ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006802:	4b6a      	ldr	r3, [pc, #424]	@ (80069ac <HAL_RCC_GetSysClockFreq+0x200>)
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	099b      	lsrs	r3, r3, #6
 8006808:	2200      	movs	r2, #0
 800680a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800680c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800680e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006810:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006814:	633b      	str	r3, [r7, #48]	@ 0x30
 8006816:	2300      	movs	r3, #0
 8006818:	637b      	str	r3, [r7, #52]	@ 0x34
 800681a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800681e:	4622      	mov	r2, r4
 8006820:	462b      	mov	r3, r5
 8006822:	f04f 0000 	mov.w	r0, #0
 8006826:	f04f 0100 	mov.w	r1, #0
 800682a:	0159      	lsls	r1, r3, #5
 800682c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006830:	0150      	lsls	r0, r2, #5
 8006832:	4602      	mov	r2, r0
 8006834:	460b      	mov	r3, r1
 8006836:	4621      	mov	r1, r4
 8006838:	1a51      	subs	r1, r2, r1
 800683a:	6139      	str	r1, [r7, #16]
 800683c:	4629      	mov	r1, r5
 800683e:	eb63 0301 	sbc.w	r3, r3, r1
 8006842:	617b      	str	r3, [r7, #20]
 8006844:	f04f 0200 	mov.w	r2, #0
 8006848:	f04f 0300 	mov.w	r3, #0
 800684c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006850:	4659      	mov	r1, fp
 8006852:	018b      	lsls	r3, r1, #6
 8006854:	4651      	mov	r1, sl
 8006856:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800685a:	4651      	mov	r1, sl
 800685c:	018a      	lsls	r2, r1, #6
 800685e:	4651      	mov	r1, sl
 8006860:	ebb2 0801 	subs.w	r8, r2, r1
 8006864:	4659      	mov	r1, fp
 8006866:	eb63 0901 	sbc.w	r9, r3, r1
 800686a:	f04f 0200 	mov.w	r2, #0
 800686e:	f04f 0300 	mov.w	r3, #0
 8006872:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006876:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800687a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800687e:	4690      	mov	r8, r2
 8006880:	4699      	mov	r9, r3
 8006882:	4623      	mov	r3, r4
 8006884:	eb18 0303 	adds.w	r3, r8, r3
 8006888:	60bb      	str	r3, [r7, #8]
 800688a:	462b      	mov	r3, r5
 800688c:	eb49 0303 	adc.w	r3, r9, r3
 8006890:	60fb      	str	r3, [r7, #12]
 8006892:	f04f 0200 	mov.w	r2, #0
 8006896:	f04f 0300 	mov.w	r3, #0
 800689a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800689e:	4629      	mov	r1, r5
 80068a0:	024b      	lsls	r3, r1, #9
 80068a2:	4621      	mov	r1, r4
 80068a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80068a8:	4621      	mov	r1, r4
 80068aa:	024a      	lsls	r2, r1, #9
 80068ac:	4610      	mov	r0, r2
 80068ae:	4619      	mov	r1, r3
 80068b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068b2:	2200      	movs	r2, #0
 80068b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80068b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80068bc:	f7f9 fc84 	bl	80001c8 <__aeabi_uldivmod>
 80068c0:	4602      	mov	r2, r0
 80068c2:	460b      	mov	r3, r1
 80068c4:	4613      	mov	r3, r2
 80068c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068c8:	e058      	b.n	800697c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068ca:	4b38      	ldr	r3, [pc, #224]	@ (80069ac <HAL_RCC_GetSysClockFreq+0x200>)
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	099b      	lsrs	r3, r3, #6
 80068d0:	2200      	movs	r2, #0
 80068d2:	4618      	mov	r0, r3
 80068d4:	4611      	mov	r1, r2
 80068d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80068da:	623b      	str	r3, [r7, #32]
 80068dc:	2300      	movs	r3, #0
 80068de:	627b      	str	r3, [r7, #36]	@ 0x24
 80068e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80068e4:	4642      	mov	r2, r8
 80068e6:	464b      	mov	r3, r9
 80068e8:	f04f 0000 	mov.w	r0, #0
 80068ec:	f04f 0100 	mov.w	r1, #0
 80068f0:	0159      	lsls	r1, r3, #5
 80068f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068f6:	0150      	lsls	r0, r2, #5
 80068f8:	4602      	mov	r2, r0
 80068fa:	460b      	mov	r3, r1
 80068fc:	4641      	mov	r1, r8
 80068fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8006902:	4649      	mov	r1, r9
 8006904:	eb63 0b01 	sbc.w	fp, r3, r1
 8006908:	f04f 0200 	mov.w	r2, #0
 800690c:	f04f 0300 	mov.w	r3, #0
 8006910:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006914:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006918:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800691c:	ebb2 040a 	subs.w	r4, r2, sl
 8006920:	eb63 050b 	sbc.w	r5, r3, fp
 8006924:	f04f 0200 	mov.w	r2, #0
 8006928:	f04f 0300 	mov.w	r3, #0
 800692c:	00eb      	lsls	r3, r5, #3
 800692e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006932:	00e2      	lsls	r2, r4, #3
 8006934:	4614      	mov	r4, r2
 8006936:	461d      	mov	r5, r3
 8006938:	4643      	mov	r3, r8
 800693a:	18e3      	adds	r3, r4, r3
 800693c:	603b      	str	r3, [r7, #0]
 800693e:	464b      	mov	r3, r9
 8006940:	eb45 0303 	adc.w	r3, r5, r3
 8006944:	607b      	str	r3, [r7, #4]
 8006946:	f04f 0200 	mov.w	r2, #0
 800694a:	f04f 0300 	mov.w	r3, #0
 800694e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006952:	4629      	mov	r1, r5
 8006954:	028b      	lsls	r3, r1, #10
 8006956:	4621      	mov	r1, r4
 8006958:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800695c:	4621      	mov	r1, r4
 800695e:	028a      	lsls	r2, r1, #10
 8006960:	4610      	mov	r0, r2
 8006962:	4619      	mov	r1, r3
 8006964:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006966:	2200      	movs	r2, #0
 8006968:	61bb      	str	r3, [r7, #24]
 800696a:	61fa      	str	r2, [r7, #28]
 800696c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006970:	f7f9 fc2a 	bl	80001c8 <__aeabi_uldivmod>
 8006974:	4602      	mov	r2, r0
 8006976:	460b      	mov	r3, r1
 8006978:	4613      	mov	r3, r2
 800697a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800697c:	4b0b      	ldr	r3, [pc, #44]	@ (80069ac <HAL_RCC_GetSysClockFreq+0x200>)
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	0c1b      	lsrs	r3, r3, #16
 8006982:	f003 0303 	and.w	r3, r3, #3
 8006986:	3301      	adds	r3, #1
 8006988:	005b      	lsls	r3, r3, #1
 800698a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800698c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800698e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006990:	fbb2 f3f3 	udiv	r3, r2, r3
 8006994:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006996:	e002      	b.n	800699e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006998:	4b05      	ldr	r3, [pc, #20]	@ (80069b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800699a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800699c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800699e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3750      	adds	r7, #80	@ 0x50
 80069a4:	46bd      	mov	sp, r7
 80069a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069aa:	bf00      	nop
 80069ac:	40023800 	.word	0x40023800
 80069b0:	00f42400 	.word	0x00f42400
 80069b4:	007a1200 	.word	0x007a1200

080069b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069b8:	b480      	push	{r7}
 80069ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069bc:	4b03      	ldr	r3, [pc, #12]	@ (80069cc <HAL_RCC_GetHCLKFreq+0x14>)
 80069be:	681b      	ldr	r3, [r3, #0]
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	20000190 	.word	0x20000190

080069d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80069d4:	f7ff fff0 	bl	80069b8 <HAL_RCC_GetHCLKFreq>
 80069d8:	4602      	mov	r2, r0
 80069da:	4b05      	ldr	r3, [pc, #20]	@ (80069f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	0a9b      	lsrs	r3, r3, #10
 80069e0:	f003 0307 	and.w	r3, r3, #7
 80069e4:	4903      	ldr	r1, [pc, #12]	@ (80069f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80069e6:	5ccb      	ldrb	r3, [r1, r3]
 80069e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	40023800 	.word	0x40023800
 80069f4:	08008e18 	.word	0x08008e18

080069f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80069fc:	f7ff ffdc 	bl	80069b8 <HAL_RCC_GetHCLKFreq>
 8006a00:	4602      	mov	r2, r0
 8006a02:	4b05      	ldr	r3, [pc, #20]	@ (8006a18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	0b5b      	lsrs	r3, r3, #13
 8006a08:	f003 0307 	and.w	r3, r3, #7
 8006a0c:	4903      	ldr	r1, [pc, #12]	@ (8006a1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a0e:	5ccb      	ldrb	r3, [r1, r3]
 8006a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	40023800 	.word	0x40023800
 8006a1c:	08008e18 	.word	0x08008e18

08006a20 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b086      	sub	sp, #24
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 0301 	and.w	r3, r3, #1
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d105      	bne.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d035      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006a48:	4b62      	ldr	r3, [pc, #392]	@ (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006a4e:	f7fb f931 	bl	8001cb4 <HAL_GetTick>
 8006a52:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a54:	e008      	b.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006a56:	f7fb f92d 	bl	8001cb4 <HAL_GetTick>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d901      	bls.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a64:	2303      	movs	r3, #3
 8006a66:	e0b0      	b.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a68:	4b5b      	ldr	r3, [pc, #364]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d1f0      	bne.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	019a      	lsls	r2, r3, #6
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	071b      	lsls	r3, r3, #28
 8006a80:	4955      	ldr	r1, [pc, #340]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a82:	4313      	orrs	r3, r2
 8006a84:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006a88:	4b52      	ldr	r3, [pc, #328]	@ (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006a8e:	f7fb f911 	bl	8001cb4 <HAL_GetTick>
 8006a92:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a94:	e008      	b.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006a96:	f7fb f90d 	bl	8001cb4 <HAL_GetTick>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d901      	bls.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	e090      	b.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006aa8:	4b4b      	ldr	r3, [pc, #300]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d0f0      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 0302 	and.w	r3, r3, #2
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	f000 8083 	beq.w	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	60fb      	str	r3, [r7, #12]
 8006ac6:	4b44      	ldr	r3, [pc, #272]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aca:	4a43      	ldr	r2, [pc, #268]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006acc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ad0:	6413      	str	r3, [r2, #64]	@ 0x40
 8006ad2:	4b41      	ldr	r3, [pc, #260]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ad6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ada:	60fb      	str	r3, [r7, #12]
 8006adc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006ade:	4b3f      	ldr	r3, [pc, #252]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a3e      	ldr	r2, [pc, #248]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006ae4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ae8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006aea:	f7fb f8e3 	bl	8001cb4 <HAL_GetTick>
 8006aee:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006af0:	e008      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006af2:	f7fb f8df 	bl	8001cb4 <HAL_GetTick>
 8006af6:	4602      	mov	r2, r0
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d901      	bls.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006b00:	2303      	movs	r3, #3
 8006b02:	e062      	b.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006b04:	4b35      	ldr	r3, [pc, #212]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d0f0      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006b10:	4b31      	ldr	r3, [pc, #196]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b18:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d02f      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b28:	693a      	ldr	r2, [r7, #16]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d028      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b2e:	4b2a      	ldr	r3, [pc, #168]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b36:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006b38:	4b29      	ldr	r3, [pc, #164]	@ (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006b3e:	4b28      	ldr	r3, [pc, #160]	@ (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006b40:	2200      	movs	r2, #0
 8006b42:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006b44:	4a24      	ldr	r2, [pc, #144]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006b4a:	4b23      	ldr	r3, [pc, #140]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b4e:	f003 0301 	and.w	r3, r3, #1
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d114      	bne.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006b56:	f7fb f8ad 	bl	8001cb4 <HAL_GetTick>
 8006b5a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b5c:	e00a      	b.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b5e:	f7fb f8a9 	bl	8001cb4 <HAL_GetTick>
 8006b62:	4602      	mov	r2, r0
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	1ad3      	subs	r3, r2, r3
 8006b68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d901      	bls.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006b70:	2303      	movs	r3, #3
 8006b72:	e02a      	b.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b74:	4b18      	ldr	r3, [pc, #96]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b78:	f003 0302 	and.w	r3, r3, #2
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d0ee      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b8c:	d10d      	bne.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006b8e:	4b12      	ldr	r3, [pc, #72]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006b9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ba2:	490d      	ldr	r1, [pc, #52]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	608b      	str	r3, [r1, #8]
 8006ba8:	e005      	b.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006baa:	4b0b      	ldr	r3, [pc, #44]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	4a0a      	ldr	r2, [pc, #40]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bb0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006bb4:	6093      	str	r3, [r2, #8]
 8006bb6:	4b08      	ldr	r3, [pc, #32]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bb8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bc2:	4905      	ldr	r1, [pc, #20]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3718      	adds	r7, #24
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	42470068 	.word	0x42470068
 8006bd8:	40023800 	.word	0x40023800
 8006bdc:	40007000 	.word	0x40007000
 8006be0:	42470e40 	.word	0x42470e40

08006be4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b087      	sub	sp, #28
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006bec:	2300      	movs	r3, #0
 8006bee:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d13f      	bne.n	8006c82 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006c02:	4b24      	ldr	r3, [pc, #144]	@ (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c0a:	60fb      	str	r3, [r7, #12]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d006      	beq.n	8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006c18:	d12f      	bne.n	8006c7a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006c1a:	4b1f      	ldr	r3, [pc, #124]	@ (8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006c1c:	617b      	str	r3, [r7, #20]
          break;
 8006c1e:	e02f      	b.n	8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006c20:	4b1c      	ldr	r3, [pc, #112]	@ (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c2c:	d108      	bne.n	8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006c2e:	4b19      	ldr	r3, [pc, #100]	@ (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c36:	4a19      	ldr	r2, [pc, #100]	@ (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c3c:	613b      	str	r3, [r7, #16]
 8006c3e:	e007      	b.n	8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006c40:	4b14      	ldr	r3, [pc, #80]	@ (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c48:	4a15      	ldr	r2, [pc, #84]	@ (8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c4e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006c50:	4b10      	ldr	r3, [pc, #64]	@ (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006c52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c56:	099b      	lsrs	r3, r3, #6
 8006c58:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	fb02 f303 	mul.w	r3, r2, r3
 8006c62:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006c64:	4b0b      	ldr	r3, [pc, #44]	@ (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006c66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c6a:	0f1b      	lsrs	r3, r3, #28
 8006c6c:	f003 0307 	and.w	r3, r3, #7
 8006c70:	68ba      	ldr	r2, [r7, #8]
 8006c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c76:	617b      	str	r3, [r7, #20]
          break;
 8006c78:	e002      	b.n	8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	617b      	str	r3, [r7, #20]
          break;
 8006c7e:	bf00      	nop
        }
      }
      break;
 8006c80:	e000      	b.n	8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8006c82:	bf00      	nop
    }
  }
  return frequency;
 8006c84:	697b      	ldr	r3, [r7, #20]
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	371c      	adds	r7, #28
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	40023800 	.word	0x40023800
 8006c98:	00bb8000 	.word	0x00bb8000
 8006c9c:	007a1200 	.word	0x007a1200
 8006ca0:	00f42400 	.word	0x00f42400

08006ca4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d101      	bne.n	8006cb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e07b      	b.n	8006dae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d108      	bne.n	8006cd0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006cc6:	d009      	beq.n	8006cdc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	61da      	str	r2, [r3, #28]
 8006cce:	e005      	b.n	8006cdc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d106      	bne.n	8006cfc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f7fa fd5e 	bl	80017b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2202      	movs	r2, #2
 8006d00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d12:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006d24:	431a      	orrs	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d2e:	431a      	orrs	r2, r3
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	691b      	ldr	r3, [r3, #16]
 8006d34:	f003 0302 	and.w	r3, r3, #2
 8006d38:	431a      	orrs	r2, r3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	695b      	ldr	r3, [r3, #20]
 8006d3e:	f003 0301 	and.w	r3, r3, #1
 8006d42:	431a      	orrs	r2, r3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	699b      	ldr	r3, [r3, #24]
 8006d48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d4c:	431a      	orrs	r2, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	69db      	ldr	r3, [r3, #28]
 8006d52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d56:	431a      	orrs	r2, r3
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6a1b      	ldr	r3, [r3, #32]
 8006d5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d60:	ea42 0103 	orr.w	r1, r2, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d68:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	430a      	orrs	r2, r1
 8006d72:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	699b      	ldr	r3, [r3, #24]
 8006d78:	0c1b      	lsrs	r3, r3, #16
 8006d7a:	f003 0104 	and.w	r1, r3, #4
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d82:	f003 0210 	and.w	r2, r3, #16
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	69da      	ldr	r2, [r3, #28]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006d9c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3708      	adds	r7, #8
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b082      	sub	sp, #8
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d101      	bne.n	8006dc8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e041      	b.n	8006e4c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d106      	bne.n	8006de2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f7fa fe11 	bl	8001a04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2202      	movs	r2, #2
 8006de6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	3304      	adds	r3, #4
 8006df2:	4619      	mov	r1, r3
 8006df4:	4610      	mov	r0, r2
 8006df6:	f000 f95d 	bl	80070b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2201      	movs	r2, #1
 8006e06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2201      	movs	r2, #1
 8006e16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2201      	movs	r2, #1
 8006e26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2201      	movs	r2, #1
 8006e36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2201      	movs	r2, #1
 8006e46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3708      	adds	r7, #8
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d001      	beq.n	8006e6c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e046      	b.n	8006efa <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2202      	movs	r2, #2
 8006e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a23      	ldr	r2, [pc, #140]	@ (8006f08 <HAL_TIM_Base_Start+0xb4>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d022      	beq.n	8006ec4 <HAL_TIM_Base_Start+0x70>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e86:	d01d      	beq.n	8006ec4 <HAL_TIM_Base_Start+0x70>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a1f      	ldr	r2, [pc, #124]	@ (8006f0c <HAL_TIM_Base_Start+0xb8>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d018      	beq.n	8006ec4 <HAL_TIM_Base_Start+0x70>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a1e      	ldr	r2, [pc, #120]	@ (8006f10 <HAL_TIM_Base_Start+0xbc>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d013      	beq.n	8006ec4 <HAL_TIM_Base_Start+0x70>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a1c      	ldr	r2, [pc, #112]	@ (8006f14 <HAL_TIM_Base_Start+0xc0>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d00e      	beq.n	8006ec4 <HAL_TIM_Base_Start+0x70>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a1b      	ldr	r2, [pc, #108]	@ (8006f18 <HAL_TIM_Base_Start+0xc4>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d009      	beq.n	8006ec4 <HAL_TIM_Base_Start+0x70>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a19      	ldr	r2, [pc, #100]	@ (8006f1c <HAL_TIM_Base_Start+0xc8>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d004      	beq.n	8006ec4 <HAL_TIM_Base_Start+0x70>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a18      	ldr	r2, [pc, #96]	@ (8006f20 <HAL_TIM_Base_Start+0xcc>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d111      	bne.n	8006ee8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	f003 0307 	and.w	r3, r3, #7
 8006ece:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2b06      	cmp	r3, #6
 8006ed4:	d010      	beq.n	8006ef8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f042 0201 	orr.w	r2, r2, #1
 8006ee4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ee6:	e007      	b.n	8006ef8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f042 0201 	orr.w	r2, r2, #1
 8006ef6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3714      	adds	r7, #20
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	40010000 	.word	0x40010000
 8006f0c:	40000400 	.word	0x40000400
 8006f10:	40000800 	.word	0x40000800
 8006f14:	40000c00 	.word	0x40000c00
 8006f18:	40010400 	.word	0x40010400
 8006f1c:	40014000 	.word	0x40014000
 8006f20:	40001800 	.word	0x40001800

08006f24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d101      	bne.n	8006f40 <HAL_TIM_ConfigClockSource+0x1c>
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	e0b4      	b.n	80070aa <HAL_TIM_ConfigClockSource+0x186>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2202      	movs	r2, #2
 8006f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006f5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006f66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	68ba      	ldr	r2, [r7, #8]
 8006f6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f78:	d03e      	beq.n	8006ff8 <HAL_TIM_ConfigClockSource+0xd4>
 8006f7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f7e:	f200 8087 	bhi.w	8007090 <HAL_TIM_ConfigClockSource+0x16c>
 8006f82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f86:	f000 8086 	beq.w	8007096 <HAL_TIM_ConfigClockSource+0x172>
 8006f8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f8e:	d87f      	bhi.n	8007090 <HAL_TIM_ConfigClockSource+0x16c>
 8006f90:	2b70      	cmp	r3, #112	@ 0x70
 8006f92:	d01a      	beq.n	8006fca <HAL_TIM_ConfigClockSource+0xa6>
 8006f94:	2b70      	cmp	r3, #112	@ 0x70
 8006f96:	d87b      	bhi.n	8007090 <HAL_TIM_ConfigClockSource+0x16c>
 8006f98:	2b60      	cmp	r3, #96	@ 0x60
 8006f9a:	d050      	beq.n	800703e <HAL_TIM_ConfigClockSource+0x11a>
 8006f9c:	2b60      	cmp	r3, #96	@ 0x60
 8006f9e:	d877      	bhi.n	8007090 <HAL_TIM_ConfigClockSource+0x16c>
 8006fa0:	2b50      	cmp	r3, #80	@ 0x50
 8006fa2:	d03c      	beq.n	800701e <HAL_TIM_ConfigClockSource+0xfa>
 8006fa4:	2b50      	cmp	r3, #80	@ 0x50
 8006fa6:	d873      	bhi.n	8007090 <HAL_TIM_ConfigClockSource+0x16c>
 8006fa8:	2b40      	cmp	r3, #64	@ 0x40
 8006faa:	d058      	beq.n	800705e <HAL_TIM_ConfigClockSource+0x13a>
 8006fac:	2b40      	cmp	r3, #64	@ 0x40
 8006fae:	d86f      	bhi.n	8007090 <HAL_TIM_ConfigClockSource+0x16c>
 8006fb0:	2b30      	cmp	r3, #48	@ 0x30
 8006fb2:	d064      	beq.n	800707e <HAL_TIM_ConfigClockSource+0x15a>
 8006fb4:	2b30      	cmp	r3, #48	@ 0x30
 8006fb6:	d86b      	bhi.n	8007090 <HAL_TIM_ConfigClockSource+0x16c>
 8006fb8:	2b20      	cmp	r3, #32
 8006fba:	d060      	beq.n	800707e <HAL_TIM_ConfigClockSource+0x15a>
 8006fbc:	2b20      	cmp	r3, #32
 8006fbe:	d867      	bhi.n	8007090 <HAL_TIM_ConfigClockSource+0x16c>
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d05c      	beq.n	800707e <HAL_TIM_ConfigClockSource+0x15a>
 8006fc4:	2b10      	cmp	r3, #16
 8006fc6:	d05a      	beq.n	800707e <HAL_TIM_ConfigClockSource+0x15a>
 8006fc8:	e062      	b.n	8007090 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006fda:	f000 f991 	bl	8007300 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006fec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	68ba      	ldr	r2, [r7, #8]
 8006ff4:	609a      	str	r2, [r3, #8]
      break;
 8006ff6:	e04f      	b.n	8007098 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007008:	f000 f97a 	bl	8007300 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	689a      	ldr	r2, [r3, #8]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800701a:	609a      	str	r2, [r3, #8]
      break;
 800701c:	e03c      	b.n	8007098 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800702a:	461a      	mov	r2, r3
 800702c:	f000 f8ee 	bl	800720c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2150      	movs	r1, #80	@ 0x50
 8007036:	4618      	mov	r0, r3
 8007038:	f000 f947 	bl	80072ca <TIM_ITRx_SetConfig>
      break;
 800703c:	e02c      	b.n	8007098 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800704a:	461a      	mov	r2, r3
 800704c:	f000 f90d 	bl	800726a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2160      	movs	r1, #96	@ 0x60
 8007056:	4618      	mov	r0, r3
 8007058:	f000 f937 	bl	80072ca <TIM_ITRx_SetConfig>
      break;
 800705c:	e01c      	b.n	8007098 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800706a:	461a      	mov	r2, r3
 800706c:	f000 f8ce 	bl	800720c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	2140      	movs	r1, #64	@ 0x40
 8007076:	4618      	mov	r0, r3
 8007078:	f000 f927 	bl	80072ca <TIM_ITRx_SetConfig>
      break;
 800707c:	e00c      	b.n	8007098 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4619      	mov	r1, r3
 8007088:	4610      	mov	r0, r2
 800708a:	f000 f91e 	bl	80072ca <TIM_ITRx_SetConfig>
      break;
 800708e:	e003      	b.n	8007098 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	73fb      	strb	r3, [r7, #15]
      break;
 8007094:	e000      	b.n	8007098 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007096:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80070a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
	...

080070b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b085      	sub	sp, #20
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4a46      	ldr	r2, [pc, #280]	@ (80071e0 <TIM_Base_SetConfig+0x12c>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d013      	beq.n	80070f4 <TIM_Base_SetConfig+0x40>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070d2:	d00f      	beq.n	80070f4 <TIM_Base_SetConfig+0x40>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a43      	ldr	r2, [pc, #268]	@ (80071e4 <TIM_Base_SetConfig+0x130>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d00b      	beq.n	80070f4 <TIM_Base_SetConfig+0x40>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a42      	ldr	r2, [pc, #264]	@ (80071e8 <TIM_Base_SetConfig+0x134>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d007      	beq.n	80070f4 <TIM_Base_SetConfig+0x40>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4a41      	ldr	r2, [pc, #260]	@ (80071ec <TIM_Base_SetConfig+0x138>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d003      	beq.n	80070f4 <TIM_Base_SetConfig+0x40>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a40      	ldr	r2, [pc, #256]	@ (80071f0 <TIM_Base_SetConfig+0x13c>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d108      	bne.n	8007106 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	4313      	orrs	r3, r2
 8007104:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a35      	ldr	r2, [pc, #212]	@ (80071e0 <TIM_Base_SetConfig+0x12c>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d02b      	beq.n	8007166 <TIM_Base_SetConfig+0xb2>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007114:	d027      	beq.n	8007166 <TIM_Base_SetConfig+0xb2>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a32      	ldr	r2, [pc, #200]	@ (80071e4 <TIM_Base_SetConfig+0x130>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d023      	beq.n	8007166 <TIM_Base_SetConfig+0xb2>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a31      	ldr	r2, [pc, #196]	@ (80071e8 <TIM_Base_SetConfig+0x134>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d01f      	beq.n	8007166 <TIM_Base_SetConfig+0xb2>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a30      	ldr	r2, [pc, #192]	@ (80071ec <TIM_Base_SetConfig+0x138>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d01b      	beq.n	8007166 <TIM_Base_SetConfig+0xb2>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a2f      	ldr	r2, [pc, #188]	@ (80071f0 <TIM_Base_SetConfig+0x13c>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d017      	beq.n	8007166 <TIM_Base_SetConfig+0xb2>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a2e      	ldr	r2, [pc, #184]	@ (80071f4 <TIM_Base_SetConfig+0x140>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d013      	beq.n	8007166 <TIM_Base_SetConfig+0xb2>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a2d      	ldr	r2, [pc, #180]	@ (80071f8 <TIM_Base_SetConfig+0x144>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d00f      	beq.n	8007166 <TIM_Base_SetConfig+0xb2>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a2c      	ldr	r2, [pc, #176]	@ (80071fc <TIM_Base_SetConfig+0x148>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d00b      	beq.n	8007166 <TIM_Base_SetConfig+0xb2>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a2b      	ldr	r2, [pc, #172]	@ (8007200 <TIM_Base_SetConfig+0x14c>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d007      	beq.n	8007166 <TIM_Base_SetConfig+0xb2>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a2a      	ldr	r2, [pc, #168]	@ (8007204 <TIM_Base_SetConfig+0x150>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d003      	beq.n	8007166 <TIM_Base_SetConfig+0xb2>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a29      	ldr	r2, [pc, #164]	@ (8007208 <TIM_Base_SetConfig+0x154>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d108      	bne.n	8007178 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800716c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	4313      	orrs	r3, r2
 8007176:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	695b      	ldr	r3, [r3, #20]
 8007182:	4313      	orrs	r3, r2
 8007184:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	689a      	ldr	r2, [r3, #8]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a10      	ldr	r2, [pc, #64]	@ (80071e0 <TIM_Base_SetConfig+0x12c>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d003      	beq.n	80071ac <TIM_Base_SetConfig+0xf8>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a12      	ldr	r2, [pc, #72]	@ (80071f0 <TIM_Base_SetConfig+0x13c>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d103      	bne.n	80071b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	691a      	ldr	r2, [r3, #16]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	f003 0301 	and.w	r3, r3, #1
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d105      	bne.n	80071d2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	f023 0201 	bic.w	r2, r3, #1
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	611a      	str	r2, [r3, #16]
  }
}
 80071d2:	bf00      	nop
 80071d4:	3714      	adds	r7, #20
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr
 80071de:	bf00      	nop
 80071e0:	40010000 	.word	0x40010000
 80071e4:	40000400 	.word	0x40000400
 80071e8:	40000800 	.word	0x40000800
 80071ec:	40000c00 	.word	0x40000c00
 80071f0:	40010400 	.word	0x40010400
 80071f4:	40014000 	.word	0x40014000
 80071f8:	40014400 	.word	0x40014400
 80071fc:	40014800 	.word	0x40014800
 8007200:	40001800 	.word	0x40001800
 8007204:	40001c00 	.word	0x40001c00
 8007208:	40002000 	.word	0x40002000

0800720c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800720c:	b480      	push	{r7}
 800720e:	b087      	sub	sp, #28
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6a1b      	ldr	r3, [r3, #32]
 800721c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	6a1b      	ldr	r3, [r3, #32]
 8007222:	f023 0201 	bic.w	r2, r3, #1
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	699b      	ldr	r3, [r3, #24]
 800722e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007236:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	011b      	lsls	r3, r3, #4
 800723c:	693a      	ldr	r2, [r7, #16]
 800723e:	4313      	orrs	r3, r2
 8007240:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	f023 030a 	bic.w	r3, r3, #10
 8007248:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800724a:	697a      	ldr	r2, [r7, #20]
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	4313      	orrs	r3, r2
 8007250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	693a      	ldr	r2, [r7, #16]
 8007256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	697a      	ldr	r2, [r7, #20]
 800725c:	621a      	str	r2, [r3, #32]
}
 800725e:	bf00      	nop
 8007260:	371c      	adds	r7, #28
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr

0800726a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800726a:	b480      	push	{r7}
 800726c:	b087      	sub	sp, #28
 800726e:	af00      	add	r7, sp, #0
 8007270:	60f8      	str	r0, [r7, #12]
 8007272:	60b9      	str	r1, [r7, #8]
 8007274:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6a1b      	ldr	r3, [r3, #32]
 800727a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6a1b      	ldr	r3, [r3, #32]
 8007280:	f023 0210 	bic.w	r2, r3, #16
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	699b      	ldr	r3, [r3, #24]
 800728c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007294:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	031b      	lsls	r3, r3, #12
 800729a:	693a      	ldr	r2, [r7, #16]
 800729c:	4313      	orrs	r3, r2
 800729e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80072a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	011b      	lsls	r3, r3, #4
 80072ac:	697a      	ldr	r2, [r7, #20]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	693a      	ldr	r2, [r7, #16]
 80072b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	697a      	ldr	r2, [r7, #20]
 80072bc:	621a      	str	r2, [r3, #32]
}
 80072be:	bf00      	nop
 80072c0:	371c      	adds	r7, #28
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr

080072ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80072ca:	b480      	push	{r7}
 80072cc:	b085      	sub	sp, #20
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
 80072d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80072e2:	683a      	ldr	r2, [r7, #0]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	f043 0307 	orr.w	r3, r3, #7
 80072ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	609a      	str	r2, [r3, #8]
}
 80072f4:	bf00      	nop
 80072f6:	3714      	adds	r7, #20
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007300:	b480      	push	{r7}
 8007302:	b087      	sub	sp, #28
 8007304:	af00      	add	r7, sp, #0
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	60b9      	str	r1, [r7, #8]
 800730a:	607a      	str	r2, [r7, #4]
 800730c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800731a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	021a      	lsls	r2, r3, #8
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	431a      	orrs	r2, r3
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	4313      	orrs	r3, r2
 8007328:	697a      	ldr	r2, [r7, #20]
 800732a:	4313      	orrs	r3, r2
 800732c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	697a      	ldr	r2, [r7, #20]
 8007332:	609a      	str	r2, [r3, #8]
}
 8007334:	bf00      	nop
 8007336:	371c      	adds	r7, #28
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007340:	b480      	push	{r7}
 8007342:	b085      	sub	sp, #20
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007350:	2b01      	cmp	r3, #1
 8007352:	d101      	bne.n	8007358 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007354:	2302      	movs	r3, #2
 8007356:	e05a      	b.n	800740e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2202      	movs	r2, #2
 8007364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800737e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	68fa      	ldr	r2, [r7, #12]
 8007386:	4313      	orrs	r3, r2
 8007388:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	68fa      	ldr	r2, [r7, #12]
 8007390:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a21      	ldr	r2, [pc, #132]	@ (800741c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d022      	beq.n	80073e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073a4:	d01d      	beq.n	80073e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a1d      	ldr	r2, [pc, #116]	@ (8007420 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d018      	beq.n	80073e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a1b      	ldr	r2, [pc, #108]	@ (8007424 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d013      	beq.n	80073e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a1a      	ldr	r2, [pc, #104]	@ (8007428 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d00e      	beq.n	80073e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a18      	ldr	r2, [pc, #96]	@ (800742c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d009      	beq.n	80073e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a17      	ldr	r2, [pc, #92]	@ (8007430 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d004      	beq.n	80073e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a15      	ldr	r2, [pc, #84]	@ (8007434 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d10c      	bne.n	80073fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	68ba      	ldr	r2, [r7, #8]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	68ba      	ldr	r2, [r7, #8]
 80073fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	3714      	adds	r7, #20
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop
 800741c:	40010000 	.word	0x40010000
 8007420:	40000400 	.word	0x40000400
 8007424:	40000800 	.word	0x40000800
 8007428:	40000c00 	.word	0x40000c00
 800742c:	40010400 	.word	0x40010400
 8007430:	40014000 	.word	0x40014000
 8007434:	40001800 	.word	0x40001800

08007438 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d101      	bne.n	800744a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	e042      	b.n	80074d0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007450:	b2db      	uxtb	r3, r3
 8007452:	2b00      	cmp	r3, #0
 8007454:	d106      	bne.n	8007464 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f7fa fb1a 	bl	8001a98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2224      	movs	r2, #36	@ 0x24
 8007468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68da      	ldr	r2, [r3, #12]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800747a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 f9e9 	bl	8007854 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	691a      	ldr	r2, [r3, #16]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007490:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	695a      	ldr	r2, [r3, #20]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80074a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68da      	ldr	r2, [r3, #12]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80074b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2220      	movs	r2, #32
 80074bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2220      	movs	r2, #32
 80074c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3708      	adds	r7, #8
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b08c      	sub	sp, #48	@ 0x30
 80074dc:	af00      	add	r7, sp, #0
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	60b9      	str	r1, [r7, #8]
 80074e2:	4613      	mov	r3, r2
 80074e4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	2b20      	cmp	r3, #32
 80074f0:	d156      	bne.n	80075a0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d002      	beq.n	80074fe <HAL_UART_Transmit_DMA+0x26>
 80074f8:	88fb      	ldrh	r3, [r7, #6]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d101      	bne.n	8007502 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e04f      	b.n	80075a2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8007502:	68ba      	ldr	r2, [r7, #8]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	88fa      	ldrh	r2, [r7, #6]
 800750c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	88fa      	ldrh	r2, [r7, #6]
 8007512:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2200      	movs	r2, #0
 8007518:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2221      	movs	r2, #33	@ 0x21
 800751e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007526:	4a21      	ldr	r2, [pc, #132]	@ (80075ac <HAL_UART_Transmit_DMA+0xd4>)
 8007528:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800752e:	4a20      	ldr	r2, [pc, #128]	@ (80075b0 <HAL_UART_Transmit_DMA+0xd8>)
 8007530:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007536:	4a1f      	ldr	r2, [pc, #124]	@ (80075b4 <HAL_UART_Transmit_DMA+0xdc>)
 8007538:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800753e:	2200      	movs	r2, #0
 8007540:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007542:	f107 0308 	add.w	r3, r7, #8
 8007546:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800754c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800754e:	6819      	ldr	r1, [r3, #0]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	3304      	adds	r3, #4
 8007556:	461a      	mov	r2, r3
 8007558:	88fb      	ldrh	r3, [r7, #6]
 800755a:	f7fb f975 	bl	8002848 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007566:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	3314      	adds	r3, #20
 800756e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007570:	69bb      	ldr	r3, [r7, #24]
 8007572:	e853 3f00 	ldrex	r3, [r3]
 8007576:	617b      	str	r3, [r7, #20]
   return(result);
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800757e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	3314      	adds	r3, #20
 8007586:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007588:	627a      	str	r2, [r7, #36]	@ 0x24
 800758a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758c:	6a39      	ldr	r1, [r7, #32]
 800758e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007590:	e841 2300 	strex	r3, r2, [r1]
 8007594:	61fb      	str	r3, [r7, #28]
   return(result);
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d1e5      	bne.n	8007568 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800759c:	2300      	movs	r3, #0
 800759e:	e000      	b.n	80075a2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80075a0:	2302      	movs	r3, #2
  }
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3730      	adds	r7, #48	@ 0x30
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	080075f5 	.word	0x080075f5
 80075b0:	0800768f 	.word	0x0800768f
 80075b4:	080076ab 	.word	0x080076ab

080075b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80075c0:	bf00      	nop
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80075d4:	bf00      	nop
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80075e8:	bf00      	nop
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b090      	sub	sp, #64	@ 0x40
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007600:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800760c:	2b00      	cmp	r3, #0
 800760e:	d137      	bne.n	8007680 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007610:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007612:	2200      	movs	r2, #0
 8007614:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007616:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	3314      	adds	r3, #20
 800761c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007620:	e853 3f00 	ldrex	r3, [r3]
 8007624:	623b      	str	r3, [r7, #32]
   return(result);
 8007626:	6a3b      	ldr	r3, [r7, #32]
 8007628:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800762c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800762e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	3314      	adds	r3, #20
 8007634:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007636:	633a      	str	r2, [r7, #48]	@ 0x30
 8007638:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800763c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800763e:	e841 2300 	strex	r3, r2, [r1]
 8007642:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1e5      	bne.n	8007616 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800764a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	330c      	adds	r3, #12
 8007650:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	e853 3f00 	ldrex	r3, [r3]
 8007658:	60fb      	str	r3, [r7, #12]
   return(result);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007660:	637b      	str	r3, [r7, #52]	@ 0x34
 8007662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	330c      	adds	r3, #12
 8007668:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800766a:	61fa      	str	r2, [r7, #28]
 800766c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766e:	69b9      	ldr	r1, [r7, #24]
 8007670:	69fa      	ldr	r2, [r7, #28]
 8007672:	e841 2300 	strex	r3, r2, [r1]
 8007676:	617b      	str	r3, [r7, #20]
   return(result);
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d1e5      	bne.n	800764a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800767e:	e002      	b.n	8007686 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007680:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007682:	f7ff ff99 	bl	80075b8 <HAL_UART_TxCpltCallback>
}
 8007686:	bf00      	nop
 8007688:	3740      	adds	r7, #64	@ 0x40
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}

0800768e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800768e:	b580      	push	{r7, lr}
 8007690:	b084      	sub	sp, #16
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800769a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800769c:	68f8      	ldr	r0, [r7, #12]
 800769e:	f7ff ff95 	bl	80075cc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076a2:	bf00      	nop
 80076a4:	3710      	adds	r7, #16
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}

080076aa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80076aa:	b580      	push	{r7, lr}
 80076ac:	b084      	sub	sp, #16
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80076b2:	2300      	movs	r3, #0
 80076b4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ba:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	695b      	ldr	r3, [r3, #20]
 80076c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076c6:	2b80      	cmp	r3, #128	@ 0x80
 80076c8:	bf0c      	ite	eq
 80076ca:	2301      	moveq	r3, #1
 80076cc:	2300      	movne	r3, #0
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	2b21      	cmp	r3, #33	@ 0x21
 80076dc:	d108      	bne.n	80076f0 <UART_DMAError+0x46>
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d005      	beq.n	80076f0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	2200      	movs	r2, #0
 80076e8:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80076ea:	68b8      	ldr	r0, [r7, #8]
 80076ec:	f000 f827 	bl	800773e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	695b      	ldr	r3, [r3, #20]
 80076f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076fa:	2b40      	cmp	r3, #64	@ 0x40
 80076fc:	bf0c      	ite	eq
 80076fe:	2301      	moveq	r3, #1
 8007700:	2300      	movne	r3, #0
 8007702:	b2db      	uxtb	r3, r3
 8007704:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800770c:	b2db      	uxtb	r3, r3
 800770e:	2b22      	cmp	r3, #34	@ 0x22
 8007710:	d108      	bne.n	8007724 <UART_DMAError+0x7a>
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d005      	beq.n	8007724 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	2200      	movs	r2, #0
 800771c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800771e:	68b8      	ldr	r0, [r7, #8]
 8007720:	f000 f835 	bl	800778e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007728:	f043 0210 	orr.w	r2, r3, #16
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007730:	68b8      	ldr	r0, [r7, #8]
 8007732:	f7ff ff55 	bl	80075e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007736:	bf00      	nop
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800773e:	b480      	push	{r7}
 8007740:	b089      	sub	sp, #36	@ 0x24
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	330c      	adds	r3, #12
 800774c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	e853 3f00 	ldrex	r3, [r3]
 8007754:	60bb      	str	r3, [r7, #8]
   return(result);
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800775c:	61fb      	str	r3, [r7, #28]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	330c      	adds	r3, #12
 8007764:	69fa      	ldr	r2, [r7, #28]
 8007766:	61ba      	str	r2, [r7, #24]
 8007768:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800776a:	6979      	ldr	r1, [r7, #20]
 800776c:	69ba      	ldr	r2, [r7, #24]
 800776e:	e841 2300 	strex	r3, r2, [r1]
 8007772:	613b      	str	r3, [r7, #16]
   return(result);
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d1e5      	bne.n	8007746 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2220      	movs	r2, #32
 800777e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007782:	bf00      	nop
 8007784:	3724      	adds	r7, #36	@ 0x24
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr

0800778e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800778e:	b480      	push	{r7}
 8007790:	b095      	sub	sp, #84	@ 0x54
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	330c      	adds	r3, #12
 800779c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077a0:	e853 3f00 	ldrex	r3, [r3]
 80077a4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80077a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	330c      	adds	r3, #12
 80077b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80077b6:	643a      	str	r2, [r7, #64]	@ 0x40
 80077b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80077bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80077be:	e841 2300 	strex	r3, r2, [r1]
 80077c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80077c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d1e5      	bne.n	8007796 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	3314      	adds	r3, #20
 80077d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d2:	6a3b      	ldr	r3, [r7, #32]
 80077d4:	e853 3f00 	ldrex	r3, [r3]
 80077d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	f023 0301 	bic.w	r3, r3, #1
 80077e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	3314      	adds	r3, #20
 80077e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80077ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80077f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077f2:	e841 2300 	strex	r3, r2, [r1]
 80077f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80077f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d1e5      	bne.n	80077ca <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007802:	2b01      	cmp	r3, #1
 8007804:	d119      	bne.n	800783a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	330c      	adds	r3, #12
 800780c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	e853 3f00 	ldrex	r3, [r3]
 8007814:	60bb      	str	r3, [r7, #8]
   return(result);
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	f023 0310 	bic.w	r3, r3, #16
 800781c:	647b      	str	r3, [r7, #68]	@ 0x44
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	330c      	adds	r3, #12
 8007824:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007826:	61ba      	str	r2, [r7, #24]
 8007828:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782a:	6979      	ldr	r1, [r7, #20]
 800782c:	69ba      	ldr	r2, [r7, #24]
 800782e:	e841 2300 	strex	r3, r2, [r1]
 8007832:	613b      	str	r3, [r7, #16]
   return(result);
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d1e5      	bne.n	8007806 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2220      	movs	r2, #32
 800783e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007848:	bf00      	nop
 800784a:	3754      	adds	r7, #84	@ 0x54
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007854:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007858:	b0c0      	sub	sp, #256	@ 0x100
 800785a:	af00      	add	r7, sp, #0
 800785c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800786c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007870:	68d9      	ldr	r1, [r3, #12]
 8007872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	ea40 0301 	orr.w	r3, r0, r1
 800787c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800787e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007882:	689a      	ldr	r2, [r3, #8]
 8007884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007888:	691b      	ldr	r3, [r3, #16]
 800788a:	431a      	orrs	r2, r3
 800788c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007890:	695b      	ldr	r3, [r3, #20]
 8007892:	431a      	orrs	r2, r3
 8007894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007898:	69db      	ldr	r3, [r3, #28]
 800789a:	4313      	orrs	r3, r2
 800789c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80078a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80078ac:	f021 010c 	bic.w	r1, r1, #12
 80078b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80078ba:	430b      	orrs	r3, r1
 80078bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80078be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	695b      	ldr	r3, [r3, #20]
 80078c6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80078ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078ce:	6999      	ldr	r1, [r3, #24]
 80078d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	ea40 0301 	orr.w	r3, r0, r1
 80078da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80078dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	4b8f      	ldr	r3, [pc, #572]	@ (8007b20 <UART_SetConfig+0x2cc>)
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d005      	beq.n	80078f4 <UART_SetConfig+0xa0>
 80078e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	4b8d      	ldr	r3, [pc, #564]	@ (8007b24 <UART_SetConfig+0x2d0>)
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d104      	bne.n	80078fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80078f4:	f7ff f880 	bl	80069f8 <HAL_RCC_GetPCLK2Freq>
 80078f8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80078fc:	e003      	b.n	8007906 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80078fe:	f7ff f867 	bl	80069d0 <HAL_RCC_GetPCLK1Freq>
 8007902:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800790a:	69db      	ldr	r3, [r3, #28]
 800790c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007910:	f040 810c 	bne.w	8007b2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007914:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007918:	2200      	movs	r2, #0
 800791a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800791e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007922:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007926:	4622      	mov	r2, r4
 8007928:	462b      	mov	r3, r5
 800792a:	1891      	adds	r1, r2, r2
 800792c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800792e:	415b      	adcs	r3, r3
 8007930:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007932:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007936:	4621      	mov	r1, r4
 8007938:	eb12 0801 	adds.w	r8, r2, r1
 800793c:	4629      	mov	r1, r5
 800793e:	eb43 0901 	adc.w	r9, r3, r1
 8007942:	f04f 0200 	mov.w	r2, #0
 8007946:	f04f 0300 	mov.w	r3, #0
 800794a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800794e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007952:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007956:	4690      	mov	r8, r2
 8007958:	4699      	mov	r9, r3
 800795a:	4623      	mov	r3, r4
 800795c:	eb18 0303 	adds.w	r3, r8, r3
 8007960:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007964:	462b      	mov	r3, r5
 8007966:	eb49 0303 	adc.w	r3, r9, r3
 800796a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800796e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800797a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800797e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007982:	460b      	mov	r3, r1
 8007984:	18db      	adds	r3, r3, r3
 8007986:	653b      	str	r3, [r7, #80]	@ 0x50
 8007988:	4613      	mov	r3, r2
 800798a:	eb42 0303 	adc.w	r3, r2, r3
 800798e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007990:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007994:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007998:	f7f8 fc16 	bl	80001c8 <__aeabi_uldivmod>
 800799c:	4602      	mov	r2, r0
 800799e:	460b      	mov	r3, r1
 80079a0:	4b61      	ldr	r3, [pc, #388]	@ (8007b28 <UART_SetConfig+0x2d4>)
 80079a2:	fba3 2302 	umull	r2, r3, r3, r2
 80079a6:	095b      	lsrs	r3, r3, #5
 80079a8:	011c      	lsls	r4, r3, #4
 80079aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079ae:	2200      	movs	r2, #0
 80079b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80079b4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80079b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80079bc:	4642      	mov	r2, r8
 80079be:	464b      	mov	r3, r9
 80079c0:	1891      	adds	r1, r2, r2
 80079c2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80079c4:	415b      	adcs	r3, r3
 80079c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80079cc:	4641      	mov	r1, r8
 80079ce:	eb12 0a01 	adds.w	sl, r2, r1
 80079d2:	4649      	mov	r1, r9
 80079d4:	eb43 0b01 	adc.w	fp, r3, r1
 80079d8:	f04f 0200 	mov.w	r2, #0
 80079dc:	f04f 0300 	mov.w	r3, #0
 80079e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80079e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80079e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079ec:	4692      	mov	sl, r2
 80079ee:	469b      	mov	fp, r3
 80079f0:	4643      	mov	r3, r8
 80079f2:	eb1a 0303 	adds.w	r3, sl, r3
 80079f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80079fa:	464b      	mov	r3, r9
 80079fc:	eb4b 0303 	adc.w	r3, fp, r3
 8007a00:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007a10:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007a14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007a18:	460b      	mov	r3, r1
 8007a1a:	18db      	adds	r3, r3, r3
 8007a1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a1e:	4613      	mov	r3, r2
 8007a20:	eb42 0303 	adc.w	r3, r2, r3
 8007a24:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007a2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007a2e:	f7f8 fbcb 	bl	80001c8 <__aeabi_uldivmod>
 8007a32:	4602      	mov	r2, r0
 8007a34:	460b      	mov	r3, r1
 8007a36:	4611      	mov	r1, r2
 8007a38:	4b3b      	ldr	r3, [pc, #236]	@ (8007b28 <UART_SetConfig+0x2d4>)
 8007a3a:	fba3 2301 	umull	r2, r3, r3, r1
 8007a3e:	095b      	lsrs	r3, r3, #5
 8007a40:	2264      	movs	r2, #100	@ 0x64
 8007a42:	fb02 f303 	mul.w	r3, r2, r3
 8007a46:	1acb      	subs	r3, r1, r3
 8007a48:	00db      	lsls	r3, r3, #3
 8007a4a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007a4e:	4b36      	ldr	r3, [pc, #216]	@ (8007b28 <UART_SetConfig+0x2d4>)
 8007a50:	fba3 2302 	umull	r2, r3, r3, r2
 8007a54:	095b      	lsrs	r3, r3, #5
 8007a56:	005b      	lsls	r3, r3, #1
 8007a58:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007a5c:	441c      	add	r4, r3
 8007a5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a62:	2200      	movs	r2, #0
 8007a64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007a68:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007a6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007a70:	4642      	mov	r2, r8
 8007a72:	464b      	mov	r3, r9
 8007a74:	1891      	adds	r1, r2, r2
 8007a76:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007a78:	415b      	adcs	r3, r3
 8007a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007a80:	4641      	mov	r1, r8
 8007a82:	1851      	adds	r1, r2, r1
 8007a84:	6339      	str	r1, [r7, #48]	@ 0x30
 8007a86:	4649      	mov	r1, r9
 8007a88:	414b      	adcs	r3, r1
 8007a8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a8c:	f04f 0200 	mov.w	r2, #0
 8007a90:	f04f 0300 	mov.w	r3, #0
 8007a94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007a98:	4659      	mov	r1, fp
 8007a9a:	00cb      	lsls	r3, r1, #3
 8007a9c:	4651      	mov	r1, sl
 8007a9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007aa2:	4651      	mov	r1, sl
 8007aa4:	00ca      	lsls	r2, r1, #3
 8007aa6:	4610      	mov	r0, r2
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	4603      	mov	r3, r0
 8007aac:	4642      	mov	r2, r8
 8007aae:	189b      	adds	r3, r3, r2
 8007ab0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007ab4:	464b      	mov	r3, r9
 8007ab6:	460a      	mov	r2, r1
 8007ab8:	eb42 0303 	adc.w	r3, r2, r3
 8007abc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007acc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007ad0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	18db      	adds	r3, r3, r3
 8007ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ada:	4613      	mov	r3, r2
 8007adc:	eb42 0303 	adc.w	r3, r2, r3
 8007ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ae2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007ae6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007aea:	f7f8 fb6d 	bl	80001c8 <__aeabi_uldivmod>
 8007aee:	4602      	mov	r2, r0
 8007af0:	460b      	mov	r3, r1
 8007af2:	4b0d      	ldr	r3, [pc, #52]	@ (8007b28 <UART_SetConfig+0x2d4>)
 8007af4:	fba3 1302 	umull	r1, r3, r3, r2
 8007af8:	095b      	lsrs	r3, r3, #5
 8007afa:	2164      	movs	r1, #100	@ 0x64
 8007afc:	fb01 f303 	mul.w	r3, r1, r3
 8007b00:	1ad3      	subs	r3, r2, r3
 8007b02:	00db      	lsls	r3, r3, #3
 8007b04:	3332      	adds	r3, #50	@ 0x32
 8007b06:	4a08      	ldr	r2, [pc, #32]	@ (8007b28 <UART_SetConfig+0x2d4>)
 8007b08:	fba2 2303 	umull	r2, r3, r2, r3
 8007b0c:	095b      	lsrs	r3, r3, #5
 8007b0e:	f003 0207 	and.w	r2, r3, #7
 8007b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4422      	add	r2, r4
 8007b1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007b1c:	e106      	b.n	8007d2c <UART_SetConfig+0x4d8>
 8007b1e:	bf00      	nop
 8007b20:	40011000 	.word	0x40011000
 8007b24:	40011400 	.word	0x40011400
 8007b28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b30:	2200      	movs	r2, #0
 8007b32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007b36:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007b3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007b3e:	4642      	mov	r2, r8
 8007b40:	464b      	mov	r3, r9
 8007b42:	1891      	adds	r1, r2, r2
 8007b44:	6239      	str	r1, [r7, #32]
 8007b46:	415b      	adcs	r3, r3
 8007b48:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b4e:	4641      	mov	r1, r8
 8007b50:	1854      	adds	r4, r2, r1
 8007b52:	4649      	mov	r1, r9
 8007b54:	eb43 0501 	adc.w	r5, r3, r1
 8007b58:	f04f 0200 	mov.w	r2, #0
 8007b5c:	f04f 0300 	mov.w	r3, #0
 8007b60:	00eb      	lsls	r3, r5, #3
 8007b62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b66:	00e2      	lsls	r2, r4, #3
 8007b68:	4614      	mov	r4, r2
 8007b6a:	461d      	mov	r5, r3
 8007b6c:	4643      	mov	r3, r8
 8007b6e:	18e3      	adds	r3, r4, r3
 8007b70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007b74:	464b      	mov	r3, r9
 8007b76:	eb45 0303 	adc.w	r3, r5, r3
 8007b7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007b8a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007b8e:	f04f 0200 	mov.w	r2, #0
 8007b92:	f04f 0300 	mov.w	r3, #0
 8007b96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007b9a:	4629      	mov	r1, r5
 8007b9c:	008b      	lsls	r3, r1, #2
 8007b9e:	4621      	mov	r1, r4
 8007ba0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ba4:	4621      	mov	r1, r4
 8007ba6:	008a      	lsls	r2, r1, #2
 8007ba8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007bac:	f7f8 fb0c 	bl	80001c8 <__aeabi_uldivmod>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	4b60      	ldr	r3, [pc, #384]	@ (8007d38 <UART_SetConfig+0x4e4>)
 8007bb6:	fba3 2302 	umull	r2, r3, r3, r2
 8007bba:	095b      	lsrs	r3, r3, #5
 8007bbc:	011c      	lsls	r4, r3, #4
 8007bbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007bc8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007bcc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007bd0:	4642      	mov	r2, r8
 8007bd2:	464b      	mov	r3, r9
 8007bd4:	1891      	adds	r1, r2, r2
 8007bd6:	61b9      	str	r1, [r7, #24]
 8007bd8:	415b      	adcs	r3, r3
 8007bda:	61fb      	str	r3, [r7, #28]
 8007bdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007be0:	4641      	mov	r1, r8
 8007be2:	1851      	adds	r1, r2, r1
 8007be4:	6139      	str	r1, [r7, #16]
 8007be6:	4649      	mov	r1, r9
 8007be8:	414b      	adcs	r3, r1
 8007bea:	617b      	str	r3, [r7, #20]
 8007bec:	f04f 0200 	mov.w	r2, #0
 8007bf0:	f04f 0300 	mov.w	r3, #0
 8007bf4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007bf8:	4659      	mov	r1, fp
 8007bfa:	00cb      	lsls	r3, r1, #3
 8007bfc:	4651      	mov	r1, sl
 8007bfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c02:	4651      	mov	r1, sl
 8007c04:	00ca      	lsls	r2, r1, #3
 8007c06:	4610      	mov	r0, r2
 8007c08:	4619      	mov	r1, r3
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	4642      	mov	r2, r8
 8007c0e:	189b      	adds	r3, r3, r2
 8007c10:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007c14:	464b      	mov	r3, r9
 8007c16:	460a      	mov	r2, r1
 8007c18:	eb42 0303 	adc.w	r3, r2, r3
 8007c1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007c2a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007c2c:	f04f 0200 	mov.w	r2, #0
 8007c30:	f04f 0300 	mov.w	r3, #0
 8007c34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007c38:	4649      	mov	r1, r9
 8007c3a:	008b      	lsls	r3, r1, #2
 8007c3c:	4641      	mov	r1, r8
 8007c3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c42:	4641      	mov	r1, r8
 8007c44:	008a      	lsls	r2, r1, #2
 8007c46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007c4a:	f7f8 fabd 	bl	80001c8 <__aeabi_uldivmod>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	460b      	mov	r3, r1
 8007c52:	4611      	mov	r1, r2
 8007c54:	4b38      	ldr	r3, [pc, #224]	@ (8007d38 <UART_SetConfig+0x4e4>)
 8007c56:	fba3 2301 	umull	r2, r3, r3, r1
 8007c5a:	095b      	lsrs	r3, r3, #5
 8007c5c:	2264      	movs	r2, #100	@ 0x64
 8007c5e:	fb02 f303 	mul.w	r3, r2, r3
 8007c62:	1acb      	subs	r3, r1, r3
 8007c64:	011b      	lsls	r3, r3, #4
 8007c66:	3332      	adds	r3, #50	@ 0x32
 8007c68:	4a33      	ldr	r2, [pc, #204]	@ (8007d38 <UART_SetConfig+0x4e4>)
 8007c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c6e:	095b      	lsrs	r3, r3, #5
 8007c70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007c74:	441c      	add	r4, r3
 8007c76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	673b      	str	r3, [r7, #112]	@ 0x70
 8007c7e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007c80:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007c84:	4642      	mov	r2, r8
 8007c86:	464b      	mov	r3, r9
 8007c88:	1891      	adds	r1, r2, r2
 8007c8a:	60b9      	str	r1, [r7, #8]
 8007c8c:	415b      	adcs	r3, r3
 8007c8e:	60fb      	str	r3, [r7, #12]
 8007c90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c94:	4641      	mov	r1, r8
 8007c96:	1851      	adds	r1, r2, r1
 8007c98:	6039      	str	r1, [r7, #0]
 8007c9a:	4649      	mov	r1, r9
 8007c9c:	414b      	adcs	r3, r1
 8007c9e:	607b      	str	r3, [r7, #4]
 8007ca0:	f04f 0200 	mov.w	r2, #0
 8007ca4:	f04f 0300 	mov.w	r3, #0
 8007ca8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007cac:	4659      	mov	r1, fp
 8007cae:	00cb      	lsls	r3, r1, #3
 8007cb0:	4651      	mov	r1, sl
 8007cb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007cb6:	4651      	mov	r1, sl
 8007cb8:	00ca      	lsls	r2, r1, #3
 8007cba:	4610      	mov	r0, r2
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	4642      	mov	r2, r8
 8007cc2:	189b      	adds	r3, r3, r2
 8007cc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007cc6:	464b      	mov	r3, r9
 8007cc8:	460a      	mov	r2, r1
 8007cca:	eb42 0303 	adc.w	r3, r2, r3
 8007cce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	663b      	str	r3, [r7, #96]	@ 0x60
 8007cda:	667a      	str	r2, [r7, #100]	@ 0x64
 8007cdc:	f04f 0200 	mov.w	r2, #0
 8007ce0:	f04f 0300 	mov.w	r3, #0
 8007ce4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007ce8:	4649      	mov	r1, r9
 8007cea:	008b      	lsls	r3, r1, #2
 8007cec:	4641      	mov	r1, r8
 8007cee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007cf2:	4641      	mov	r1, r8
 8007cf4:	008a      	lsls	r2, r1, #2
 8007cf6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007cfa:	f7f8 fa65 	bl	80001c8 <__aeabi_uldivmod>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	460b      	mov	r3, r1
 8007d02:	4b0d      	ldr	r3, [pc, #52]	@ (8007d38 <UART_SetConfig+0x4e4>)
 8007d04:	fba3 1302 	umull	r1, r3, r3, r2
 8007d08:	095b      	lsrs	r3, r3, #5
 8007d0a:	2164      	movs	r1, #100	@ 0x64
 8007d0c:	fb01 f303 	mul.w	r3, r1, r3
 8007d10:	1ad3      	subs	r3, r2, r3
 8007d12:	011b      	lsls	r3, r3, #4
 8007d14:	3332      	adds	r3, #50	@ 0x32
 8007d16:	4a08      	ldr	r2, [pc, #32]	@ (8007d38 <UART_SetConfig+0x4e4>)
 8007d18:	fba2 2303 	umull	r2, r3, r2, r3
 8007d1c:	095b      	lsrs	r3, r3, #5
 8007d1e:	f003 020f 	and.w	r2, r3, #15
 8007d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4422      	add	r2, r4
 8007d2a:	609a      	str	r2, [r3, #8]
}
 8007d2c:	bf00      	nop
 8007d2e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007d32:	46bd      	mov	sp, r7
 8007d34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d38:	51eb851f 	.word	0x51eb851f

08007d3c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	f043 0201 	orr.w	r2, r3, #1
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d50:	2300      	movs	r3, #0
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	370c      	adds	r7, #12
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr

08007d5e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d5e:	b480      	push	{r7}
 8007d60:	b083      	sub	sp, #12
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	f023 0201 	bic.w	r2, r3, #1
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d72:	2300      	movs	r3, #0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b085      	sub	sp, #20
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	3301      	adds	r3, #1
 8007d92:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d9a:	d901      	bls.n	8007da0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007d9c:	2303      	movs	r3, #3
 8007d9e:	e01b      	b.n	8007dd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	691b      	ldr	r3, [r3, #16]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	daf2      	bge.n	8007d8e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007da8:	2300      	movs	r3, #0
 8007daa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	019b      	lsls	r3, r3, #6
 8007db0:	f043 0220 	orr.w	r2, r3, #32
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	3301      	adds	r3, #1
 8007dbc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007dc4:	d901      	bls.n	8007dca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007dc6:	2303      	movs	r3, #3
 8007dc8:	e006      	b.n	8007dd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	691b      	ldr	r3, [r3, #16]
 8007dce:	f003 0320 	and.w	r3, r3, #32
 8007dd2:	2b20      	cmp	r3, #32
 8007dd4:	d0f0      	beq.n	8007db8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007dd6:	2300      	movs	r3, #0
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3714      	adds	r7, #20
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007dec:	2300      	movs	r3, #0
 8007dee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	3301      	adds	r3, #1
 8007df4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007dfc:	d901      	bls.n	8007e02 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007dfe:	2303      	movs	r3, #3
 8007e00:	e018      	b.n	8007e34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	daf2      	bge.n	8007df0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2210      	movs	r2, #16
 8007e12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	3301      	adds	r3, #1
 8007e18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e20:	d901      	bls.n	8007e26 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007e22:	2303      	movs	r3, #3
 8007e24:	e006      	b.n	8007e34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	f003 0310 	and.w	r3, r3, #16
 8007e2e:	2b10      	cmp	r3, #16
 8007e30:	d0f0      	beq.n	8007e14 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007e32:	2300      	movs	r3, #0
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3714      	adds	r7, #20
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr

08007e40 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b08b      	sub	sp, #44	@ 0x2c
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	4613      	mov	r3, r2
 8007e4c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007e56:	88fb      	ldrh	r3, [r7, #6]
 8007e58:	089b      	lsrs	r3, r3, #2
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007e5e:	88fb      	ldrh	r3, [r7, #6]
 8007e60:	f003 0303 	and.w	r3, r3, #3
 8007e64:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007e66:	2300      	movs	r3, #0
 8007e68:	623b      	str	r3, [r7, #32]
 8007e6a:	e014      	b.n	8007e96 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e76:	601a      	str	r2, [r3, #0]
    pDest++;
 8007e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e80:	3301      	adds	r3, #1
 8007e82:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e86:	3301      	adds	r3, #1
 8007e88:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007e90:	6a3b      	ldr	r3, [r7, #32]
 8007e92:	3301      	adds	r3, #1
 8007e94:	623b      	str	r3, [r7, #32]
 8007e96:	6a3a      	ldr	r2, [r7, #32]
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d3e6      	bcc.n	8007e6c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007e9e:	8bfb      	ldrh	r3, [r7, #30]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d01e      	beq.n	8007ee2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007ea8:	69bb      	ldr	r3, [r7, #24]
 8007eaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007eae:	461a      	mov	r2, r3
 8007eb0:	f107 0310 	add.w	r3, r7, #16
 8007eb4:	6812      	ldr	r2, [r2, #0]
 8007eb6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007eb8:	693a      	ldr	r2, [r7, #16]
 8007eba:	6a3b      	ldr	r3, [r7, #32]
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	00db      	lsls	r3, r3, #3
 8007ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ec4:	b2da      	uxtb	r2, r3
 8007ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec8:	701a      	strb	r2, [r3, #0]
      i++;
 8007eca:	6a3b      	ldr	r3, [r7, #32]
 8007ecc:	3301      	adds	r3, #1
 8007ece:	623b      	str	r3, [r7, #32]
      pDest++;
 8007ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007ed6:	8bfb      	ldrh	r3, [r7, #30]
 8007ed8:	3b01      	subs	r3, #1
 8007eda:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007edc:	8bfb      	ldrh	r3, [r7, #30]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d1ea      	bne.n	8007eb8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	372c      	adds	r7, #44	@ 0x2c
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b085      	sub	sp, #20
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	695b      	ldr	r3, [r3, #20]
 8007efc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	699b      	ldr	r3, [r3, #24]
 8007f02:	68fa      	ldr	r2, [r7, #12]
 8007f04:	4013      	ands	r3, r2
 8007f06:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007f08:	68fb      	ldr	r3, [r7, #12]
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3714      	adds	r7, #20
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr

08007f16 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007f16:	b480      	push	{r7}
 8007f18:	b085      	sub	sp, #20
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
 8007f1e:	460b      	mov	r3, r1
 8007f20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007f26:	78fb      	ldrb	r3, [r7, #3]
 8007f28:	015a      	lsls	r2, r3, #5
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	4413      	add	r3, r2
 8007f2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007f36:	78fb      	ldrb	r3, [r7, #3]
 8007f38:	015a      	lsls	r2, r3, #5
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	4413      	add	r3, r2
 8007f3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f42:	68db      	ldr	r3, [r3, #12]
 8007f44:	68ba      	ldr	r2, [r7, #8]
 8007f46:	4013      	ands	r3, r2
 8007f48:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007f4a:	68bb      	ldr	r3, [r7, #8]
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3714      	adds	r7, #20
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	695b      	ldr	r3, [r3, #20]
 8007f64:	f003 0301 	and.w	r3, r3, #1
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	370c      	adds	r7, #12
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	68fa      	ldr	r2, [r7, #12]
 8007f8e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007f92:	f023 0303 	bic.w	r3, r3, #3
 8007f96:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	78fb      	ldrb	r3, [r7, #3]
 8007fa2:	f003 0303 	and.w	r3, r3, #3
 8007fa6:	68f9      	ldr	r1, [r7, #12]
 8007fa8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007fac:	4313      	orrs	r3, r2
 8007fae:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007fb0:	78fb      	ldrb	r3, [r7, #3]
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d107      	bne.n	8007fc6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007fc2:	6053      	str	r3, [r2, #4]
 8007fc4:	e00c      	b.n	8007fe0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8007fc6:	78fb      	ldrb	r3, [r7, #3]
 8007fc8:	2b02      	cmp	r3, #2
 8007fca:	d107      	bne.n	8007fdc <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	f241 7370 	movw	r3, #6000	@ 0x1770
 8007fd8:	6053      	str	r3, [r2, #4]
 8007fda:	e001      	b.n	8007fe0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e000      	b.n	8007fe2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007fe0:	2300      	movs	r3, #0
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3714      	adds	r7, #20
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr

08007fee <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007fee:	b480      	push	{r7}
 8007ff0:	b085      	sub	sp, #20
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008000:	695b      	ldr	r3, [r3, #20]
 8008002:	b29b      	uxth	r3, r3
}
 8008004:	4618      	mov	r0, r3
 8008006:	3714      	adds	r7, #20
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr

08008010 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008010:	b480      	push	{r7}
 8008012:	b089      	sub	sp, #36	@ 0x24
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	460b      	mov	r3, r1
 800801a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008020:	78fb      	ldrb	r3, [r7, #3]
 8008022:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008024:	2300      	movs	r3, #0
 8008026:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	015a      	lsls	r2, r3, #5
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	4413      	add	r3, r2
 8008030:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	0c9b      	lsrs	r3, r3, #18
 8008038:	f003 0303 	and.w	r3, r3, #3
 800803c:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800803e:	69bb      	ldr	r3, [r7, #24]
 8008040:	015a      	lsls	r2, r3, #5
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	4413      	add	r3, r2
 8008046:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	0fdb      	lsrs	r3, r3, #31
 800804e:	f003 0301 	and.w	r3, r3, #1
 8008052:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8008054:	69bb      	ldr	r3, [r7, #24]
 8008056:	015a      	lsls	r2, r3, #5
 8008058:	69fb      	ldr	r3, [r7, #28]
 800805a:	4413      	add	r3, r2
 800805c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	0fdb      	lsrs	r3, r3, #31
 8008064:	f003 0301 	and.w	r3, r3, #1
 8008068:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	f003 0320 	and.w	r3, r3, #32
 8008072:	2b20      	cmp	r3, #32
 8008074:	d10d      	bne.n	8008092 <USB_HC_Halt+0x82>
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d10a      	bne.n	8008092 <USB_HC_Halt+0x82>
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d005      	beq.n	800808e <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	2b01      	cmp	r3, #1
 8008086:	d002      	beq.n	800808e <USB_HC_Halt+0x7e>
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	2b03      	cmp	r3, #3
 800808c:	d101      	bne.n	8008092 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800808e:	2300      	movs	r3, #0
 8008090:	e0d8      	b.n	8008244 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d002      	beq.n	800809e <USB_HC_Halt+0x8e>
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	2b02      	cmp	r3, #2
 800809c:	d173      	bne.n	8008186 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800809e:	69bb      	ldr	r3, [r7, #24]
 80080a0:	015a      	lsls	r2, r3, #5
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	4413      	add	r3, r2
 80080a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	69ba      	ldr	r2, [r7, #24]
 80080ae:	0151      	lsls	r1, r2, #5
 80080b0:	69fa      	ldr	r2, [r7, #28]
 80080b2:	440a      	add	r2, r1
 80080b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80080bc:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	f003 0320 	and.w	r3, r3, #32
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d14a      	bne.n	8008160 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ce:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d133      	bne.n	800813e <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	015a      	lsls	r2, r3, #5
 80080da:	69fb      	ldr	r3, [r7, #28]
 80080dc:	4413      	add	r3, r2
 80080de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	69ba      	ldr	r2, [r7, #24]
 80080e6:	0151      	lsls	r1, r2, #5
 80080e8:	69fa      	ldr	r2, [r7, #28]
 80080ea:	440a      	add	r2, r1
 80080ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80080f4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80080f6:	69bb      	ldr	r3, [r7, #24]
 80080f8:	015a      	lsls	r2, r3, #5
 80080fa:	69fb      	ldr	r3, [r7, #28]
 80080fc:	4413      	add	r3, r2
 80080fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	69ba      	ldr	r2, [r7, #24]
 8008106:	0151      	lsls	r1, r2, #5
 8008108:	69fa      	ldr	r2, [r7, #28]
 800810a:	440a      	add	r2, r1
 800810c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008110:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008114:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	3301      	adds	r3, #1
 800811a:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008122:	d82e      	bhi.n	8008182 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008124:	69bb      	ldr	r3, [r7, #24]
 8008126:	015a      	lsls	r2, r3, #5
 8008128:	69fb      	ldr	r3, [r7, #28]
 800812a:	4413      	add	r3, r2
 800812c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008136:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800813a:	d0ec      	beq.n	8008116 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800813c:	e081      	b.n	8008242 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800813e:	69bb      	ldr	r3, [r7, #24]
 8008140:	015a      	lsls	r2, r3, #5
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	4413      	add	r3, r2
 8008146:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	69ba      	ldr	r2, [r7, #24]
 800814e:	0151      	lsls	r1, r2, #5
 8008150:	69fa      	ldr	r2, [r7, #28]
 8008152:	440a      	add	r2, r1
 8008154:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008158:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800815c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800815e:	e070      	b.n	8008242 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008160:	69bb      	ldr	r3, [r7, #24]
 8008162:	015a      	lsls	r2, r3, #5
 8008164:	69fb      	ldr	r3, [r7, #28]
 8008166:	4413      	add	r3, r2
 8008168:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	69ba      	ldr	r2, [r7, #24]
 8008170:	0151      	lsls	r1, r2, #5
 8008172:	69fa      	ldr	r2, [r7, #28]
 8008174:	440a      	add	r2, r1
 8008176:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800817a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800817e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008180:	e05f      	b.n	8008242 <USB_HC_Halt+0x232>
            break;
 8008182:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008184:	e05d      	b.n	8008242 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008186:	69bb      	ldr	r3, [r7, #24]
 8008188:	015a      	lsls	r2, r3, #5
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	4413      	add	r3, r2
 800818e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	69ba      	ldr	r2, [r7, #24]
 8008196:	0151      	lsls	r1, r2, #5
 8008198:	69fa      	ldr	r2, [r7, #28]
 800819a:	440a      	add	r2, r1
 800819c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80081a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80081a4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80081a6:	69fb      	ldr	r3, [r7, #28]
 80081a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80081ac:	691b      	ldr	r3, [r3, #16]
 80081ae:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d133      	bne.n	800821e <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	015a      	lsls	r2, r3, #5
 80081ba:	69fb      	ldr	r3, [r7, #28]
 80081bc:	4413      	add	r3, r2
 80081be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	69ba      	ldr	r2, [r7, #24]
 80081c6:	0151      	lsls	r1, r2, #5
 80081c8:	69fa      	ldr	r2, [r7, #28]
 80081ca:	440a      	add	r2, r1
 80081cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80081d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80081d4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80081d6:	69bb      	ldr	r3, [r7, #24]
 80081d8:	015a      	lsls	r2, r3, #5
 80081da:	69fb      	ldr	r3, [r7, #28]
 80081dc:	4413      	add	r3, r2
 80081de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	69ba      	ldr	r2, [r7, #24]
 80081e6:	0151      	lsls	r1, r2, #5
 80081e8:	69fa      	ldr	r2, [r7, #28]
 80081ea:	440a      	add	r2, r1
 80081ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80081f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80081f4:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	3301      	adds	r3, #1
 80081fa:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008202:	d81d      	bhi.n	8008240 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	015a      	lsls	r2, r3, #5
 8008208:	69fb      	ldr	r3, [r7, #28]
 800820a:	4413      	add	r3, r2
 800820c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008216:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800821a:	d0ec      	beq.n	80081f6 <USB_HC_Halt+0x1e6>
 800821c:	e011      	b.n	8008242 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	015a      	lsls	r2, r3, #5
 8008222:	69fb      	ldr	r3, [r7, #28]
 8008224:	4413      	add	r3, r2
 8008226:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	69ba      	ldr	r2, [r7, #24]
 800822e:	0151      	lsls	r1, r2, #5
 8008230:	69fa      	ldr	r2, [r7, #28]
 8008232:	440a      	add	r2, r1
 8008234:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008238:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800823c:	6013      	str	r3, [r2, #0]
 800823e:	e000      	b.n	8008242 <USB_HC_Halt+0x232>
          break;
 8008240:	bf00      	nop
    }
  }

  return HAL_OK;
 8008242:	2300      	movs	r3, #0
}
 8008244:	4618      	mov	r0, r3
 8008246:	3724      	adds	r7, #36	@ 0x24
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr

08008250 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b088      	sub	sp, #32
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008258:	2300      	movs	r3, #0
 800825a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008260:	2300      	movs	r3, #0
 8008262:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f7ff fd7a 	bl	8007d5e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800826a:	2110      	movs	r1, #16
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f7ff fd87 	bl	8007d80 <USB_FlushTxFifo>
 8008272:	4603      	mov	r3, r0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d001      	beq.n	800827c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008278:	2301      	movs	r3, #1
 800827a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f7ff fdb1 	bl	8007de4 <USB_FlushRxFifo>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d001      	beq.n	800828c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008288:	2301      	movs	r3, #1
 800828a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800828c:	2300      	movs	r3, #0
 800828e:	61bb      	str	r3, [r7, #24]
 8008290:	e01f      	b.n	80082d2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008292:	69bb      	ldr	r3, [r7, #24]
 8008294:	015a      	lsls	r2, r3, #5
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	4413      	add	r3, r2
 800829a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80082a8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80082b0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80082b8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80082ba:	69bb      	ldr	r3, [r7, #24]
 80082bc:	015a      	lsls	r2, r3, #5
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	4413      	add	r3, r2
 80082c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082c6:	461a      	mov	r2, r3
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80082cc:	69bb      	ldr	r3, [r7, #24]
 80082ce:	3301      	adds	r3, #1
 80082d0:	61bb      	str	r3, [r7, #24]
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	2b0f      	cmp	r3, #15
 80082d6:	d9dc      	bls.n	8008292 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80082d8:	2300      	movs	r3, #0
 80082da:	61bb      	str	r3, [r7, #24]
 80082dc:	e034      	b.n	8008348 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80082de:	69bb      	ldr	r3, [r7, #24]
 80082e0:	015a      	lsls	r2, r3, #5
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	4413      	add	r3, r2
 80082e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80082f4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80082fc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008304:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008306:	69bb      	ldr	r3, [r7, #24]
 8008308:	015a      	lsls	r2, r3, #5
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	4413      	add	r3, r2
 800830e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008312:	461a      	mov	r2, r3
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	3301      	adds	r3, #1
 800831c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008324:	d80c      	bhi.n	8008340 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008326:	69bb      	ldr	r3, [r7, #24]
 8008328:	015a      	lsls	r2, r3, #5
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	4413      	add	r3, r2
 800832e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008338:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800833c:	d0ec      	beq.n	8008318 <USB_StopHost+0xc8>
 800833e:	e000      	b.n	8008342 <USB_StopHost+0xf2>
        break;
 8008340:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008342:	69bb      	ldr	r3, [r7, #24]
 8008344:	3301      	adds	r3, #1
 8008346:	61bb      	str	r3, [r7, #24]
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	2b0f      	cmp	r3, #15
 800834c:	d9c7      	bls.n	80082de <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008354:	461a      	mov	r2, r3
 8008356:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800835a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008362:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f7ff fce9 	bl	8007d3c <USB_EnableGlobalInt>

  return ret;
 800836a:	7ffb      	ldrb	r3, [r7, #31]
}
 800836c:	4618      	mov	r0, r3
 800836e:	3720      	adds	r7, #32
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008382:	1c5a      	adds	r2, r3, #1
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 f804 	bl	8008398 <USBH_HandleSof>
}
 8008390:	bf00      	nop
 8008392:	3708      	adds	r7, #8
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	2b0b      	cmp	r3, #11
 80083a8:	d10a      	bne.n	80083c0 <USBH_HandleSof+0x28>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d005      	beq.n	80083c0 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80083ba:	699b      	ldr	r3, [r3, #24]
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	4798      	blx	r3
  }
}
 80083c0:	bf00      	nop
 80083c2:	3708      	adds	r7, #8
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b083      	sub	sp, #12
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2201      	movs	r2, #1
 80083d4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80083d8:	bf00      	nop
}
 80083da:	370c      	adds	r7, #12
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80083f4:	bf00      	nop
}
 80083f6:	370c      	adds	r7, #12
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2201      	movs	r2, #1
 800840c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008420:	2300      	movs	r3, #0
}
 8008422:	4618      	mov	r0, r3
 8008424:	370c      	adds	r7, #12
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr

0800842e <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800842e:	b580      	push	{r7, lr}
 8008430:	b082      	sub	sp, #8
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2201      	movs	r2, #1
 800843a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 f883 	bl	800855a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	791b      	ldrb	r3, [r3, #4]
 8008458:	4619      	mov	r1, r3
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 f80b 	bl	8008476 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	795b      	ldrb	r3, [r3, #5]
 8008464:	4619      	mov	r1, r3
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 f805 	bl	8008476 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800846c:	2300      	movs	r3, #0
}
 800846e:	4618      	mov	r0, r3
 8008470:	3708      	adds	r7, #8
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008476:	b480      	push	{r7}
 8008478:	b083      	sub	sp, #12
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
 800847e:	460b      	mov	r3, r1
 8008480:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008482:	78fb      	ldrb	r3, [r7, #3]
 8008484:	2b0f      	cmp	r3, #15
 8008486:	d80d      	bhi.n	80084a4 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008488:	78fb      	ldrb	r3, [r7, #3]
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	33e0      	adds	r3, #224	@ 0xe0
 800848e:	009b      	lsls	r3, r3, #2
 8008490:	4413      	add	r3, r2
 8008492:	685a      	ldr	r2, [r3, #4]
 8008494:	78fb      	ldrb	r3, [r7, #3]
 8008496:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800849a:	6879      	ldr	r1, [r7, #4]
 800849c:	33e0      	adds	r3, #224	@ 0xe0
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	440b      	add	r3, r1
 80084a2:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	370c      	adds	r7, #12
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr

080084b2 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b082      	sub	sp, #8
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80084c0:	4618      	mov	r0, r3
 80084c2:	f7ff ff57 	bl	8008374 <USBH_LL_IncTimer>
}
 80084c6:	bf00      	nop
 80084c8:	3708      	adds	r7, #8
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}

080084ce <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80084ce:	b580      	push	{r7, lr}
 80084d0:	b082      	sub	sp, #8
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80084dc:	4618      	mov	r0, r3
 80084de:	f7ff ff8f 	bl	8008400 <USBH_LL_Connect>
}
 80084e2:	bf00      	nop
 80084e4:	3708      	adds	r7, #8
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}

080084ea <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80084ea:	b580      	push	{r7, lr}
 80084ec:	b082      	sub	sp, #8
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80084f8:	4618      	mov	r0, r3
 80084fa:	f7ff ff98 	bl	800842e <USBH_LL_Disconnect>
}
 80084fe:	bf00      	nop
 8008500:	3708      	adds	r7, #8
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}

08008506 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008506:	b480      	push	{r7}
 8008508:	b083      	sub	sp, #12
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
 800850e:	460b      	mov	r3, r1
 8008510:	70fb      	strb	r3, [r7, #3]
 8008512:	4613      	mov	r3, r2
 8008514:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008516:	bf00      	nop
 8008518:	370c      	adds	r7, #12
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr

08008522 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008522:	b580      	push	{r7, lr}
 8008524:	b082      	sub	sp, #8
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008530:	4618      	mov	r0, r3
 8008532:	f7ff ff49 	bl	80083c8 <USBH_LL_PortEnabled>
}
 8008536:	bf00      	nop
 8008538:	3708      	adds	r7, #8
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b082      	sub	sp, #8
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800854c:	4618      	mov	r0, r3
 800854e:	f7ff ff49 	bl	80083e4 <USBH_LL_PortDisabled>
}
 8008552:	bf00      	nop
 8008554:	3708      	adds	r7, #8
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800855a:	b580      	push	{r7, lr}
 800855c:	b084      	sub	sp, #16
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008562:	2300      	movs	r3, #0
 8008564:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008566:	2300      	movs	r3, #0
 8008568:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008570:	4618      	mov	r0, r3
 8008572:	f7fa fef0 	bl	8003356 <HAL_HCD_Stop>
 8008576:	4603      	mov	r3, r0
 8008578:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800857a:	7bfb      	ldrb	r3, [r7, #15]
 800857c:	4618      	mov	r0, r3
 800857e:	f000 f807 	bl	8008590 <USBH_Get_USB_Status>
 8008582:	4603      	mov	r3, r0
 8008584:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008586:	7bbb      	ldrb	r3, [r7, #14]
}
 8008588:	4618      	mov	r0, r3
 800858a:	3710      	adds	r7, #16
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008590:	b480      	push	{r7}
 8008592:	b085      	sub	sp, #20
 8008594:	af00      	add	r7, sp, #0
 8008596:	4603      	mov	r3, r0
 8008598:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800859a:	2300      	movs	r3, #0
 800859c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800859e:	79fb      	ldrb	r3, [r7, #7]
 80085a0:	2b03      	cmp	r3, #3
 80085a2:	d817      	bhi.n	80085d4 <USBH_Get_USB_Status+0x44>
 80085a4:	a201      	add	r2, pc, #4	@ (adr r2, 80085ac <USBH_Get_USB_Status+0x1c>)
 80085a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085aa:	bf00      	nop
 80085ac:	080085bd 	.word	0x080085bd
 80085b0:	080085c3 	.word	0x080085c3
 80085b4:	080085c9 	.word	0x080085c9
 80085b8:	080085cf 	.word	0x080085cf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80085bc:	2300      	movs	r3, #0
 80085be:	73fb      	strb	r3, [r7, #15]
    break;
 80085c0:	e00b      	b.n	80085da <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80085c2:	2302      	movs	r3, #2
 80085c4:	73fb      	strb	r3, [r7, #15]
    break;
 80085c6:	e008      	b.n	80085da <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80085c8:	2301      	movs	r3, #1
 80085ca:	73fb      	strb	r3, [r7, #15]
    break;
 80085cc:	e005      	b.n	80085da <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80085ce:	2302      	movs	r3, #2
 80085d0:	73fb      	strb	r3, [r7, #15]
    break;
 80085d2:	e002      	b.n	80085da <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80085d4:	2302      	movs	r3, #2
 80085d6:	73fb      	strb	r3, [r7, #15]
    break;
 80085d8:	bf00      	nop
  }
  return usb_status;
 80085da:	7bfb      	ldrb	r3, [r7, #15]
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3714      	adds	r7, #20
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <arm_float_to_q15>:
 80085e8:	b4f0      	push	{r4, r5, r6, r7}
 80085ea:	0897      	lsrs	r7, r2, #2
 80085ec:	d06e      	beq.n	80086cc <arm_float_to_q15+0xe4>
 80085ee:	eddf 5a49 	vldr	s11, [pc, #292]	@ 8008714 <arm_float_to_q15+0x12c>
 80085f2:	f100 0510 	add.w	r5, r0, #16
 80085f6:	f101 0408 	add.w	r4, r1, #8
 80085fa:	463e      	mov	r6, r7
 80085fc:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8008600:	eefe 6a00 	vmov.f32	s13, #224	@ 0xbf000000 -0.5
 8008604:	ed55 7a04 	vldr	s15, [r5, #-16]
 8008608:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800860c:	3510      	adds	r5, #16
 800860e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8008612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008616:	bfd4      	ite	le
 8008618:	eef0 7a66 	vmovle.f32	s15, s13
 800861c:	eef0 7a46 	vmovgt.f32	s15, s12
 8008620:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008624:	3408      	adds	r4, #8
 8008626:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800862a:	ee17 3a90 	vmov	r3, s15
 800862e:	f303 030f 	ssat	r3, #16, r3
 8008632:	f824 3c10 	strh.w	r3, [r4, #-16]
 8008636:	ed55 7a07 	vldr	s15, [r5, #-28]	@ 0xffffffe4
 800863a:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800863e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8008642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008646:	bfd4      	ite	le
 8008648:	eef0 7a66 	vmovle.f32	s15, s13
 800864c:	eef0 7a46 	vmovgt.f32	s15, s12
 8008650:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008654:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008658:	ee17 3a90 	vmov	r3, s15
 800865c:	f303 030f 	ssat	r3, #16, r3
 8008660:	f824 3c0e 	strh.w	r3, [r4, #-14]
 8008664:	ed55 7a06 	vldr	s15, [r5, #-24]	@ 0xffffffe8
 8008668:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800866c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8008670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008674:	bfd4      	ite	le
 8008676:	eef0 7a66 	vmovle.f32	s15, s13
 800867a:	eef0 7a46 	vmovgt.f32	s15, s12
 800867e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008682:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008686:	ee17 3a90 	vmov	r3, s15
 800868a:	f303 030f 	ssat	r3, #16, r3
 800868e:	f824 3c0c 	strh.w	r3, [r4, #-12]
 8008692:	ed55 7a05 	vldr	s15, [r5, #-20]	@ 0xffffffec
 8008696:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800869a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800869e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086a2:	bfd4      	ite	le
 80086a4:	eef0 7a66 	vmovle.f32	s15, s13
 80086a8:	eef0 7a46 	vmovgt.f32	s15, s12
 80086ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80086b0:	3e01      	subs	r6, #1
 80086b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80086b6:	ee17 3a90 	vmov	r3, s15
 80086ba:	f303 030f 	ssat	r3, #16, r3
 80086be:	f824 3c0a 	strh.w	r3, [r4, #-10]
 80086c2:	d19f      	bne.n	8008604 <arm_float_to_q15+0x1c>
 80086c4:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 80086c8:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 80086cc:	f012 0203 	ands.w	r2, r2, #3
 80086d0:	d01e      	beq.n	8008710 <arm_float_to_q15+0x128>
 80086d2:	eddf 5a10 	vldr	s11, [pc, #64]	@ 8008714 <arm_float_to_q15+0x12c>
 80086d6:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80086da:	eefe 6a00 	vmov.f32	s13, #224	@ 0xbf000000 -0.5
 80086de:	ecf0 7a01 	vldmia	r0!, {s15}
 80086e2:	ee27 7aa5 	vmul.f32	s14, s15, s11
 80086e6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80086ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086ee:	bfd4      	ite	le
 80086f0:	eef0 7a66 	vmovle.f32	s15, s13
 80086f4:	eef0 7a46 	vmovgt.f32	s15, s12
 80086f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80086fc:	3a01      	subs	r2, #1
 80086fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008702:	ee17 3a90 	vmov	r3, s15
 8008706:	f303 030f 	ssat	r3, #16, r3
 800870a:	f821 3b02 	strh.w	r3, [r1], #2
 800870e:	d1e6      	bne.n	80086de <arm_float_to_q15+0xf6>
 8008710:	bcf0      	pop	{r4, r5, r6, r7}
 8008712:	4770      	bx	lr
 8008714:	47000000 	.word	0x47000000

08008718 <arm_rfft_init_q15>:
 8008718:	b289      	uxth	r1, r1
 800871a:	b430      	push	{r4, r5}
 800871c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8008720:	4d36      	ldr	r5, [pc, #216]	@ (80087fc <arm_rfft_init_q15+0xe4>)
 8008722:	4c37      	ldr	r4, [pc, #220]	@ (8008800 <arm_rfft_init_q15+0xe8>)
 8008724:	7102      	strb	r2, [r0, #4]
 8008726:	7143      	strb	r3, [r0, #5]
 8008728:	6001      	str	r1, [r0, #0]
 800872a:	60c5      	str	r5, [r0, #12]
 800872c:	6104      	str	r4, [r0, #16]
 800872e:	d050      	beq.n	80087d2 <arm_rfft_init_q15+0xba>
 8008730:	d911      	bls.n	8008756 <arm_rfft_init_q15+0x3e>
 8008732:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8008736:	d054      	beq.n	80087e2 <arm_rfft_init_q15+0xca>
 8008738:	d938      	bls.n	80087ac <arm_rfft_init_q15+0x94>
 800873a:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800873e:	d022      	beq.n	8008786 <arm_rfft_init_q15+0x6e>
 8008740:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8008744:	d155      	bne.n	80087f2 <arm_rfft_init_q15+0xda>
 8008746:	2201      	movs	r2, #1
 8008748:	4b2e      	ldr	r3, [pc, #184]	@ (8008804 <arm_rfft_init_q15+0xec>)
 800874a:	6082      	str	r2, [r0, #8]
 800874c:	6143      	str	r3, [r0, #20]
 800874e:	2000      	movs	r0, #0
 8008750:	b240      	sxtb	r0, r0
 8008752:	bc30      	pop	{r4, r5}
 8008754:	4770      	bx	lr
 8008756:	2940      	cmp	r1, #64	@ 0x40
 8008758:	d033      	beq.n	80087c2 <arm_rfft_init_q15+0xaa>
 800875a:	d91c      	bls.n	8008796 <arm_rfft_init_q15+0x7e>
 800875c:	2980      	cmp	r1, #128	@ 0x80
 800875e:	d00a      	beq.n	8008776 <arm_rfft_init_q15+0x5e>
 8008760:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8008764:	d145      	bne.n	80087f2 <arm_rfft_init_q15+0xda>
 8008766:	2220      	movs	r2, #32
 8008768:	4b27      	ldr	r3, [pc, #156]	@ (8008808 <arm_rfft_init_q15+0xf0>)
 800876a:	6082      	str	r2, [r0, #8]
 800876c:	6143      	str	r3, [r0, #20]
 800876e:	2000      	movs	r0, #0
 8008770:	b240      	sxtb	r0, r0
 8008772:	bc30      	pop	{r4, r5}
 8008774:	4770      	bx	lr
 8008776:	2240      	movs	r2, #64	@ 0x40
 8008778:	4b24      	ldr	r3, [pc, #144]	@ (800880c <arm_rfft_init_q15+0xf4>)
 800877a:	6082      	str	r2, [r0, #8]
 800877c:	6143      	str	r3, [r0, #20]
 800877e:	2000      	movs	r0, #0
 8008780:	b240      	sxtb	r0, r0
 8008782:	bc30      	pop	{r4, r5}
 8008784:	4770      	bx	lr
 8008786:	2202      	movs	r2, #2
 8008788:	4b21      	ldr	r3, [pc, #132]	@ (8008810 <arm_rfft_init_q15+0xf8>)
 800878a:	6082      	str	r2, [r0, #8]
 800878c:	6143      	str	r3, [r0, #20]
 800878e:	2000      	movs	r0, #0
 8008790:	b240      	sxtb	r0, r0
 8008792:	bc30      	pop	{r4, r5}
 8008794:	4770      	bx	lr
 8008796:	2920      	cmp	r1, #32
 8008798:	d12b      	bne.n	80087f2 <arm_rfft_init_q15+0xda>
 800879a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800879e:	4b1d      	ldr	r3, [pc, #116]	@ (8008814 <arm_rfft_init_q15+0xfc>)
 80087a0:	6082      	str	r2, [r0, #8]
 80087a2:	6143      	str	r3, [r0, #20]
 80087a4:	2000      	movs	r0, #0
 80087a6:	b240      	sxtb	r0, r0
 80087a8:	bc30      	pop	{r4, r5}
 80087aa:	4770      	bx	lr
 80087ac:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80087b0:	d11f      	bne.n	80087f2 <arm_rfft_init_q15+0xda>
 80087b2:	2208      	movs	r2, #8
 80087b4:	4b18      	ldr	r3, [pc, #96]	@ (8008818 <arm_rfft_init_q15+0x100>)
 80087b6:	6082      	str	r2, [r0, #8]
 80087b8:	6143      	str	r3, [r0, #20]
 80087ba:	2000      	movs	r0, #0
 80087bc:	b240      	sxtb	r0, r0
 80087be:	bc30      	pop	{r4, r5}
 80087c0:	4770      	bx	lr
 80087c2:	2280      	movs	r2, #128	@ 0x80
 80087c4:	4b15      	ldr	r3, [pc, #84]	@ (800881c <arm_rfft_init_q15+0x104>)
 80087c6:	6082      	str	r2, [r0, #8]
 80087c8:	6143      	str	r3, [r0, #20]
 80087ca:	2000      	movs	r0, #0
 80087cc:	b240      	sxtb	r0, r0
 80087ce:	bc30      	pop	{r4, r5}
 80087d0:	4770      	bx	lr
 80087d2:	2210      	movs	r2, #16
 80087d4:	4b12      	ldr	r3, [pc, #72]	@ (8008820 <arm_rfft_init_q15+0x108>)
 80087d6:	6082      	str	r2, [r0, #8]
 80087d8:	6143      	str	r3, [r0, #20]
 80087da:	2000      	movs	r0, #0
 80087dc:	b240      	sxtb	r0, r0
 80087de:	bc30      	pop	{r4, r5}
 80087e0:	4770      	bx	lr
 80087e2:	2204      	movs	r2, #4
 80087e4:	4b0f      	ldr	r3, [pc, #60]	@ (8008824 <arm_rfft_init_q15+0x10c>)
 80087e6:	6082      	str	r2, [r0, #8]
 80087e8:	6143      	str	r3, [r0, #20]
 80087ea:	2000      	movs	r0, #0
 80087ec:	b240      	sxtb	r0, r0
 80087ee:	bc30      	pop	{r4, r5}
 80087f0:	4770      	bx	lr
 80087f2:	20ff      	movs	r0, #255	@ 0xff
 80087f4:	b240      	sxtb	r0, r0
 80087f6:	bc30      	pop	{r4, r5}
 80087f8:	4770      	bx	lr
 80087fa:	bf00      	nop
 80087fc:	08008e28 	.word	0x08008e28
 8008800:	0800ce28 	.word	0x0800ce28
 8008804:	08010e58 	.word	0x08010e58
 8008808:	08010e98 	.word	0x08010e98
 800880c:	08010e78 	.word	0x08010e78
 8008810:	08010ea8 	.word	0x08010ea8
 8008814:	08010e38 	.word	0x08010e38
 8008818:	08010e68 	.word	0x08010e68
 800881c:	08010e48 	.word	0x08010e48
 8008820:	08010e88 	.word	0x08010e88
 8008824:	08010e28 	.word	0x08010e28

08008828 <arm_fir_q15>:
 8008828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800882c:	4605      	mov	r5, r0
 800882e:	b095      	sub	sp, #84	@ 0x54
 8008830:	686c      	ldr	r4, [r5, #4]
 8008832:	9012      	str	r0, [sp, #72]	@ 0x48
 8008834:	8800      	ldrh	r0, [r0, #0]
 8008836:	940c      	str	r4, [sp, #48]	@ 0x30
 8008838:	4626      	mov	r6, r4
 800883a:	f100 4c00 	add.w	ip, r0, #2147483648	@ 0x80000000
 800883e:	68ac      	ldr	r4, [r5, #8]
 8008840:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008842:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8008846:	461f      	mov	r7, r3
 8008848:	9408      	str	r4, [sp, #32]
 800884a:	4623      	mov	r3, r4
 800884c:	eb06 044c 	add.w	r4, r6, ip, lsl #1
 8008850:	4625      	mov	r5, r4
 8008852:	940d      	str	r4, [sp, #52]	@ 0x34
 8008854:	08bc      	lsrs	r4, r7, #2
 8008856:	9010      	str	r0, [sp, #64]	@ 0x40
 8008858:	910e      	str	r1, [sp, #56]	@ 0x38
 800885a:	920f      	str	r2, [sp, #60]	@ 0x3c
 800885c:	4627      	mov	r7, r4
 800885e:	9411      	str	r4, [sp, #68]	@ 0x44
 8008860:	f000 80c0 	beq.w	80089e4 <arm_fir_q15+0x1bc>
 8008864:	4604      	mov	r4, r0
 8008866:	0880      	lsrs	r0, r0, #2
 8008868:	9007      	str	r0, [sp, #28]
 800886a:	00c0      	lsls	r0, r0, #3
 800886c:	4403      	add	r3, r0
 800886e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008870:	f004 0303 	and.w	r3, r4, #3
 8008874:	9309      	str	r3, [sp, #36]	@ 0x24
 8008876:	f105 0308 	add.w	r3, r5, #8
 800887a:	9301      	str	r3, [sp, #4]
 800887c:	460b      	mov	r3, r1
 800887e:	3308      	adds	r3, #8
 8008880:	9302      	str	r3, [sp, #8]
 8008882:	4613      	mov	r3, r2
 8008884:	3308      	adds	r3, #8
 8008886:	9305      	str	r3, [sp, #20]
 8008888:	f106 0308 	add.w	r3, r6, #8
 800888c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800888e:	9303      	str	r3, [sp, #12]
 8008890:	9704      	str	r7, [sp, #16]
 8008892:	9a02      	ldr	r2, [sp, #8]
 8008894:	9c01      	ldr	r4, [sp, #4]
 8008896:	f832 3c08 	ldrh.w	r3, [r2, #-8]
 800889a:	f824 3c08 	strh.w	r3, [r4, #-8]
 800889e:	f832 3c06 	ldrh.w	r3, [r2, #-6]
 80088a2:	f824 3c06 	strh.w	r3, [r4, #-6]
 80088a6:	4611      	mov	r1, r2
 80088a8:	9d07      	ldr	r5, [sp, #28]
 80088aa:	f831 3c04 	ldrh.w	r3, [r1, #-4]
 80088ae:	f824 3c04 	strh.w	r3, [r4, #-4]
 80088b2:	9a03      	ldr	r2, [sp, #12]
 80088b4:	f831 3c02 	ldrh.w	r3, [r1, #-2]
 80088b8:	f824 3c02 	strh.w	r3, [r4, #-2]
 80088bc:	f852 0c08 	ldr.w	r0, [r2, #-8]
 80088c0:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80088c4:	4613      	mov	r3, r2
 80088c6:	4611      	mov	r1, r2
 80088c8:	2d00      	cmp	r5, #0
 80088ca:	f000 810e 	beq.w	8008aea <arm_fir_q15+0x2c2>
 80088ce:	3308      	adds	r3, #8
 80088d0:	461a      	mov	r2, r3
 80088d2:	9306      	str	r3, [sp, #24]
 80088d4:	9908      	ldr	r1, [sp, #32]
 80088d6:	9500      	str	r5, [sp, #0]
 80088d8:	2300      	movs	r3, #0
 80088da:	469c      	mov	ip, r3
 80088dc:	4693      	mov	fp, r2
 80088de:	461e      	mov	r6, r3
 80088e0:	469e      	mov	lr, r3
 80088e2:	461a      	mov	r2, r3
 80088e4:	461f      	mov	r7, r3
 80088e6:	4698      	mov	r8, r3
 80088e8:	f101 0a08 	add.w	sl, r1, #8
 80088ec:	4665      	mov	r5, ip
 80088ee:	f85a 1c08 	ldr.w	r1, [sl, #-8]
 80088f2:	fbc0 85c1 	smlald	r8, r5, r0, r1
 80088f6:	fbc4 cec1 	smlald	ip, lr, r4, r1
 80088fa:	eac4 0900 	pkhbt	r9, r4, r0
 80088fe:	f85b 0c08 	ldr.w	r0, [fp, #-8]
 8008902:	fbc9 27d1 	smlaldx	r2, r7, r9, r1
 8008906:	eac0 0904 	pkhbt	r9, r0, r4
 800890a:	fbc9 36d1 	smlaldx	r3, r6, r9, r1
 800890e:	f85a 1c04 	ldr.w	r1, [sl, #-4]
 8008912:	fbc4 85c1 	smlald	r8, r5, r4, r1
 8008916:	f85b 4c04 	ldr.w	r4, [fp, #-4]
 800891a:	fbc0 cec1 	smlald	ip, lr, r0, r1
 800891e:	fbc9 27d1 	smlaldx	r2, r7, r9, r1
 8008922:	eac4 0900 	pkhbt	r9, r4, r0
 8008926:	fbc9 36d1 	smlaldx	r3, r6, r9, r1
 800892a:	9900      	ldr	r1, [sp, #0]
 800892c:	3901      	subs	r1, #1
 800892e:	f10a 0a08 	add.w	sl, sl, #8
 8008932:	f10b 0b08 	add.w	fp, fp, #8
 8008936:	9100      	str	r1, [sp, #0]
 8008938:	d1d9      	bne.n	80088ee <arm_fir_q15+0xc6>
 800893a:	46c1      	mov	r9, r8
 800893c:	9903      	ldr	r1, [sp, #12]
 800893e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008942:	46a8      	mov	r8, r5
 8008944:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008946:	4429      	add	r1, r5
 8008948:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800894a:	b175      	cbz	r5, 800896a <arm_fir_q15+0x142>
 800894c:	f8da 5000 	ldr.w	r5, [sl]
 8008950:	fbc0 98c5 	smlald	r9, r8, r0, r5
 8008954:	fbc4 cec5 	smlald	ip, lr, r4, r5
 8008958:	eac4 0000 	pkhbt	r0, r4, r0
 800895c:	6809      	ldr	r1, [r1, #0]
 800895e:	fbc0 27d5 	smlaldx	r2, r7, r0, r5
 8008962:	eac1 0404 	pkhbt	r4, r1, r4
 8008966:	fbc4 36d5 	smlaldx	r3, r6, r4, r5
 800896a:	9805      	ldr	r0, [sp, #20]
 800896c:	ea4f 39d9 	mov.w	r9, r9, lsr #15
 8008970:	0bd2      	lsrs	r2, r2, #15
 8008972:	ea49 4948 	orr.w	r9, r9, r8, lsl #17
 8008976:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
 800897a:	f309 090f 	ssat	r9, #16, r9
 800897e:	f302 020f 	ssat	r2, #16, r2
 8008982:	eac9 4202 	pkhbt	r2, r9, r2, lsl #16
 8008986:	f840 2c08 	str.w	r2, [r0, #-8]
 800898a:	9a01      	ldr	r2, [sp, #4]
 800898c:	ea4f 3cdc 	mov.w	ip, ip, lsr #15
 8008990:	3208      	adds	r2, #8
 8008992:	0bdb      	lsrs	r3, r3, #15
 8008994:	ea4c 4c4e 	orr.w	ip, ip, lr, lsl #17
 8008998:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 800899c:	f30c 0c0f 	ssat	ip, #16, ip
 80089a0:	9201      	str	r2, [sp, #4]
 80089a2:	f303 030f 	ssat	r3, #16, r3
 80089a6:	9a02      	ldr	r2, [sp, #8]
 80089a8:	eacc 4303 	pkhbt	r3, ip, r3, lsl #16
 80089ac:	f840 3c04 	str.w	r3, [r0, #-4]
 80089b0:	f100 0308 	add.w	r3, r0, #8
 80089b4:	9305      	str	r3, [sp, #20]
 80089b6:	9b04      	ldr	r3, [sp, #16]
 80089b8:	3208      	adds	r2, #8
 80089ba:	9202      	str	r2, [sp, #8]
 80089bc:	3b01      	subs	r3, #1
 80089be:	9a06      	ldr	r2, [sp, #24]
 80089c0:	9203      	str	r2, [sp, #12]
 80089c2:	9304      	str	r3, [sp, #16]
 80089c4:	f47f af65 	bne.w	8008892 <arm_fir_q15+0x6a>
 80089c8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80089ca:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80089cc:	00db      	lsls	r3, r3, #3
 80089ce:	441a      	add	r2, r3
 80089d0:	920d      	str	r2, [sp, #52]	@ 0x34
 80089d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80089d4:	441a      	add	r2, r3
 80089d6:	920e      	str	r2, [sp, #56]	@ 0x38
 80089d8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80089da:	441a      	add	r2, r3
 80089dc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80089de:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80089e0:	441a      	add	r2, r3
 80089e2:	920c      	str	r2, [sp, #48]	@ 0x30
 80089e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80089e6:	f013 0303 	ands.w	r3, r3, #3
 80089ea:	9302      	str	r3, [sp, #8]
 80089ec:	d03f      	beq.n	8008a6e <arm_fir_q15+0x246>
 80089ee:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80089f0:	f1a2 0c02 	sub.w	ip, r2, #2
 80089f4:	9a08      	ldr	r2, [sp, #32]
 80089f6:	f102 0904 	add.w	r9, r2, #4
 80089fa:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80089fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8008a00:	ea4f 0852 	mov.w	r8, r2, lsr #1
 8008a04:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008a06:	f8cd 8000 	str.w	r8, [sp]
 8008a0a:	f8dd 903c 	ldr.w	r9, [sp, #60]	@ 0x3c
 8008a0e:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
 8008a12:	f102 0e04 	add.w	lr, r2, #4
 8008a16:	461f      	mov	r7, r3
 8008a18:	f838 3b02 	ldrh.w	r3, [r8], #2
 8008a1c:	9a01      	ldr	r2, [sp, #4]
 8008a1e:	9900      	ldr	r1, [sp, #0]
 8008a20:	f82c 3f02 	strh.w	r3, [ip, #2]!
 8008a24:	2400      	movs	r4, #0
 8008a26:	4673      	mov	r3, lr
 8008a28:	2500      	movs	r5, #0
 8008a2a:	f833 bc04 	ldrh.w	fp, [r3, #-4]
 8008a2e:	f832 ac04 	ldrh.w	sl, [r2, #-4]
 8008a32:	f833 6c02 	ldrh.w	r6, [r3, #-2]
 8008a36:	f832 0c02 	ldrh.w	r0, [r2, #-2]
 8008a3a:	fbcb 458a 	smlalbb	r4, r5, fp, sl
 8008a3e:	3901      	subs	r1, #1
 8008a40:	f103 0304 	add.w	r3, r3, #4
 8008a44:	fbc6 4580 	smlalbb	r4, r5, r6, r0
 8008a48:	f102 0204 	add.w	r2, r2, #4
 8008a4c:	d1ed      	bne.n	8008a2a <arm_fir_q15+0x202>
 8008a4e:	0be3      	lsrs	r3, r4, #15
 8008a50:	3f01      	subs	r7, #1
 8008a52:	ea43 4345 	orr.w	r3, r3, r5, lsl #17
 8008a56:	f10e 0e02 	add.w	lr, lr, #2
 8008a5a:	f303 030f 	ssat	r3, #16, r3
 8008a5e:	f829 3b02 	strh.w	r3, [r9], #2
 8008a62:	d1d9      	bne.n	8008a18 <arm_fir_q15+0x1f0>
 8008a64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008a66:	9a02      	ldr	r2, [sp, #8]
 8008a68:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8008a6c:	930c      	str	r3, [sp, #48]	@ 0x30
 8008a6e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008a70:	1e5f      	subs	r7, r3, #1
 8008a72:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008a74:	08bd      	lsrs	r5, r7, #2
 8008a76:	685e      	ldr	r6, [r3, #4]
 8008a78:	d029      	beq.n	8008ace <arm_fir_q15+0x2a6>
 8008a7a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	3310      	adds	r3, #16
 8008a80:	f106 0210 	add.w	r2, r6, #16
 8008a84:	4290      	cmp	r0, r2
 8008a86:	bf38      	it	cc
 8008a88:	429e      	cmpcc	r6, r3
 8008a8a:	bf2c      	ite	cs
 8008a8c:	2301      	movcs	r3, #1
 8008a8e:	2300      	movcc	r3, #0
 8008a90:	2d06      	cmp	r5, #6
 8008a92:	bf94      	ite	ls
 8008a94:	2300      	movls	r3, #0
 8008a96:	f003 0301 	andhi.w	r3, r3, #1
 8008a9a:	b3a3      	cbz	r3, 8008b06 <arm_fir_q15+0x2de>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	4333      	orrs	r3, r6
 8008aa0:	079b      	lsls	r3, r3, #30
 8008aa2:	d130      	bne.n	8008b06 <arm_fir_q15+0x2de>
 8008aa4:	f100 0208 	add.w	r2, r0, #8
 8008aa8:	f106 0308 	add.w	r3, r6, #8
 8008aac:	2100      	movs	r1, #0
 8008aae:	e912 0011 	ldmdb	r2, {r0, r4}
 8008ab2:	3101      	adds	r1, #1
 8008ab4:	42a9      	cmp	r1, r5
 8008ab6:	e903 0011 	stmdb	r3, {r0, r4}
 8008aba:	f102 0208 	add.w	r2, r2, #8
 8008abe:	f103 0308 	add.w	r3, r3, #8
 8008ac2:	d1f4      	bne.n	8008aae <arm_fir_q15+0x286>
 8008ac4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008ac6:	00ed      	lsls	r5, r5, #3
 8008ac8:	442b      	add	r3, r5
 8008aca:	442e      	add	r6, r5
 8008acc:	930c      	str	r3, [sp, #48]	@ 0x30
 8008ace:	f017 0303 	ands.w	r3, r7, #3
 8008ad2:	d007      	beq.n	8008ae4 <arm_fir_q15+0x2bc>
 8008ad4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008ad6:	3e02      	subs	r6, #2
 8008ad8:	f832 1b02 	ldrh.w	r1, [r2], #2
 8008adc:	f826 1f02 	strh.w	r1, [r6, #2]!
 8008ae0:	3b01      	subs	r3, #1
 8008ae2:	d1f9      	bne.n	8008ad8 <arm_fir_q15+0x2b0>
 8008ae4:	b015      	add	sp, #84	@ 0x54
 8008ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aea:	46a8      	mov	r8, r5
 8008aec:	462b      	mov	r3, r5
 8008aee:	462e      	mov	r6, r5
 8008af0:	46ac      	mov	ip, r5
 8008af2:	46ae      	mov	lr, r5
 8008af4:	462a      	mov	r2, r5
 8008af6:	462f      	mov	r7, r5
 8008af8:	46a9      	mov	r9, r5
 8008afa:	f101 0508 	add.w	r5, r1, #8
 8008afe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008b02:	9506      	str	r5, [sp, #24]
 8008b04:	e720      	b.n	8008948 <arm_fir_q15+0x120>
 8008b06:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008b08:	f106 0208 	add.w	r2, r6, #8
 8008b0c:	3308      	adds	r3, #8
 8008b0e:	4629      	mov	r1, r5
 8008b10:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 8008b14:	f822 0c08 	strh.w	r0, [r2, #-8]
 8008b18:	f833 0c06 	ldrh.w	r0, [r3, #-6]
 8008b1c:	f822 0c06 	strh.w	r0, [r2, #-6]
 8008b20:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 8008b24:	f822 0c04 	strh.w	r0, [r2, #-4]
 8008b28:	f833 0c02 	ldrh.w	r0, [r3, #-2]
 8008b2c:	f822 0c02 	strh.w	r0, [r2, #-2]
 8008b30:	3901      	subs	r1, #1
 8008b32:	f103 0308 	add.w	r3, r3, #8
 8008b36:	f102 0208 	add.w	r2, r2, #8
 8008b3a:	d1e9      	bne.n	8008b10 <arm_fir_q15+0x2e8>
 8008b3c:	e7c2      	b.n	8008ac4 <arm_fir_q15+0x29c>
 8008b3e:	bf00      	nop

08008b40 <arm_fir_init_q15>:
 8008b40:	b570      	push	{r4, r5, r6, lr}
 8008b42:	f011 0401 	ands.w	r4, r1, #1
 8008b46:	d10f      	bne.n	8008b68 <arm_fir_init_q15+0x28>
 8008b48:	461e      	mov	r6, r3
 8008b4a:	9b04      	ldr	r3, [sp, #16]
 8008b4c:	4605      	mov	r5, r0
 8008b4e:	4610      	mov	r0, r2
 8008b50:	18ca      	adds	r2, r1, r3
 8008b52:	8029      	strh	r1, [r5, #0]
 8008b54:	60a8      	str	r0, [r5, #8]
 8008b56:	0052      	lsls	r2, r2, #1
 8008b58:	4630      	mov	r0, r6
 8008b5a:	4621      	mov	r1, r4
 8008b5c:	f000 f912 	bl	8008d84 <memset>
 8008b60:	606e      	str	r6, [r5, #4]
 8008b62:	4620      	mov	r0, r4
 8008b64:	b240      	sxtb	r0, r0
 8008b66:	bd70      	pop	{r4, r5, r6, pc}
 8008b68:	20ff      	movs	r0, #255	@ 0xff
 8008b6a:	e7fb      	b.n	8008b64 <arm_fir_init_q15+0x24>

08008b6c <arm_biquad_cascade_df1_q15>:
 8008b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b70:	b08b      	sub	sp, #44	@ 0x2c
 8008b72:	085c      	lsrs	r4, r3, #1
 8008b74:	f990 800c 	ldrsb.w	r8, [r0, #12]
 8008b78:	6885      	ldr	r5, [r0, #8]
 8008b7a:	9407      	str	r4, [sp, #28]
 8008b7c:	4626      	mov	r6, r4
 8008b7e:	f003 0301 	and.w	r3, r3, #1
 8008b82:	6844      	ldr	r4, [r0, #4]
 8008b84:	f990 0000 	ldrsb.w	r0, [r0]
 8008b88:	9004      	str	r0, [sp, #16]
 8008b8a:	9306      	str	r3, [sp, #24]
 8008b8c:	00b0      	lsls	r0, r6, #2
 8008b8e:	4613      	mov	r3, r2
 8008b90:	4403      	add	r3, r0
 8008b92:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b94:	f105 030c 	add.w	r3, r5, #12
 8008b98:	9302      	str	r3, [sp, #8]
 8008b9a:	f104 0308 	add.w	r3, r4, #8
 8008b9e:	f1c8 090f 	rsb	r9, r8, #15
 8008ba2:	9205      	str	r2, [sp, #20]
 8008ba4:	9008      	str	r0, [sp, #32]
 8008ba6:	9101      	str	r1, [sp, #4]
 8008ba8:	f108 0811 	add.w	r8, r8, #17
 8008bac:	9303      	str	r3, [sp, #12]
 8008bae:	9a02      	ldr	r2, [sp, #8]
 8008bb0:	f852 4c0c 	ldr.w	r4, [r2, #-12]
 8008bb4:	e912 0003 	ldmdb	r2, {r0, r1}
 8008bb8:	9a03      	ldr	r2, [sp, #12]
 8008bba:	f852 ac08 	ldr.w	sl, [r2, #-8]
 8008bbe:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8008bc2:	9a07      	ldr	r2, [sp, #28]
 8008bc4:	2a00      	cmp	r2, #0
 8008bc6:	d06c      	beq.n	8008ca2 <arm_biquad_cascade_df1_q15+0x136>
 8008bc8:	f8dd c004 	ldr.w	ip, [sp, #4]
 8008bcc:	f8dd e014 	ldr.w	lr, [sp, #20]
 8008bd0:	4615      	mov	r5, r2
 8008bd2:	461f      	mov	r7, r3
 8008bd4:	f85c 6b04 	ldr.w	r6, [ip], #4
 8008bd8:	fb24 fb06 	smuad	fp, r4, r6
 8008bdc:	465a      	mov	r2, fp
 8008bde:	17d3      	asrs	r3, r2, #31
 8008be0:	461a      	mov	r2, r3
 8008be2:	465b      	mov	r3, fp
 8008be4:	fbc0 32ca 	smlald	r3, r2, r0, sl
 8008be8:	fbc1 32c7 	smlald	r3, r2, r1, r7
 8008bec:	fa23 f309 	lsr.w	r3, r3, r9
 8008bf0:	fa02 f208 	lsl.w	r2, r2, r8
 8008bf4:	431a      	orrs	r2, r3
 8008bf6:	eac6 430a 	pkhbt	r3, r6, sl, lsl #16
 8008bfa:	f302 020f 	ssat	r2, #16, r2
 8008bfe:	eac2 4707 	pkhbt	r7, r2, r7, lsl #16
 8008c02:	fb24 f216 	smuadx	r2, r4, r6
 8008c06:	ea4f 7be2 	mov.w	fp, r2, asr #31
 8008c0a:	46da      	mov	sl, fp
 8008c0c:	fbc0 2ac3 	smlald	r2, sl, r0, r3
 8008c10:	fbc1 2ac7 	smlald	r2, sl, r1, r7
 8008c14:	fa0a fa08 	lsl.w	sl, sl, r8
 8008c18:	fa22 f209 	lsr.w	r2, r2, r9
 8008c1c:	3d01      	subs	r5, #1
 8008c1e:	ea4a 0202 	orr.w	r2, sl, r2
 8008c22:	ea4f 4626 	mov.w	r6, r6, asr #16
 8008c26:	f302 020f 	ssat	r2, #16, r2
 8008c2a:	eac6 4a03 	pkhbt	sl, r6, r3, lsl #16
 8008c2e:	eac7 4302 	pkhbt	r3, r7, r2, lsl #16
 8008c32:	eac2 4707 	pkhbt	r7, r2, r7, lsl #16
 8008c36:	f84e 3b04 	str.w	r3, [lr], #4
 8008c3a:	d1cb      	bne.n	8008bd4 <arm_biquad_cascade_df1_q15+0x68>
 8008c3c:	9a01      	ldr	r2, [sp, #4]
 8008c3e:	9d08      	ldr	r5, [sp, #32]
 8008c40:	442a      	add	r2, r5
 8008c42:	9201      	str	r2, [sp, #4]
 8008c44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c46:	463b      	mov	r3, r7
 8008c48:	9d06      	ldr	r5, [sp, #24]
 8008c4a:	b1b5      	cbz	r5, 8008c7a <arm_biquad_cascade_df1_q15+0x10e>
 8008c4c:	9d01      	ldr	r5, [sp, #4]
 8008c4e:	f9b5 5000 	ldrsh.w	r5, [r5]
 8008c52:	fb24 f405 	smuad	r4, r4, r5
 8008c56:	17e7      	asrs	r7, r4, #31
 8008c58:	463e      	mov	r6, r7
 8008c5a:	fbc0 46ca 	smlald	r4, r6, r0, sl
 8008c5e:	fbc1 46c3 	smlald	r4, r6, r1, r3
 8008c62:	fa06 f608 	lsl.w	r6, r6, r8
 8008c66:	fa24 f409 	lsr.w	r4, r4, r9
 8008c6a:	4326      	orrs	r6, r4
 8008c6c:	f306 060f 	ssat	r6, #16, r6
 8008c70:	8016      	strh	r6, [r2, #0]
 8008c72:	eac6 4303 	pkhbt	r3, r6, r3, lsl #16
 8008c76:	eac5 4a0a 	pkhbt	sl, r5, sl, lsl #16
 8008c7a:	9903      	ldr	r1, [sp, #12]
 8008c7c:	f841 3c04 	str.w	r3, [r1, #-4]
 8008c80:	9b02      	ldr	r3, [sp, #8]
 8008c82:	f841 ac08 	str.w	sl, [r1, #-8]
 8008c86:	330c      	adds	r3, #12
 8008c88:	9302      	str	r3, [sp, #8]
 8008c8a:	f101 0308 	add.w	r3, r1, #8
 8008c8e:	9303      	str	r3, [sp, #12]
 8008c90:	9b05      	ldr	r3, [sp, #20]
 8008c92:	9301      	str	r3, [sp, #4]
 8008c94:	9b04      	ldr	r3, [sp, #16]
 8008c96:	3b01      	subs	r3, #1
 8008c98:	9304      	str	r3, [sp, #16]
 8008c9a:	d188      	bne.n	8008bae <arm_biquad_cascade_df1_q15+0x42>
 8008c9c:	b00b      	add	sp, #44	@ 0x2c
 8008c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ca2:	9a05      	ldr	r2, [sp, #20]
 8008ca4:	e7d0      	b.n	8008c48 <arm_biquad_cascade_df1_q15+0xdc>
 8008ca6:	bf00      	nop

08008ca8 <arm_biquad_cascade_df1_init_q15>:
 8008ca8:	b538      	push	{r3, r4, r5, lr}
 8008caa:	461d      	mov	r5, r3
 8008cac:	4604      	mov	r4, r0
 8008cae:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 8008cb2:	6082      	str	r2, [r0, #8]
 8008cb4:	7001      	strb	r1, [r0, #0]
 8008cb6:	00ca      	lsls	r2, r1, #3
 8008cb8:	7303      	strb	r3, [r0, #12]
 8008cba:	2100      	movs	r1, #0
 8008cbc:	4628      	mov	r0, r5
 8008cbe:	f000 f861 	bl	8008d84 <memset>
 8008cc2:	6065      	str	r5, [r4, #4]
 8008cc4:	bd38      	pop	{r3, r4, r5, pc}
 8008cc6:	bf00      	nop

08008cc8 <arm_mult_q15>:
 8008cc8:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8008ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cd0:	d043      	beq.n	8008d5a <arm_mult_q15+0x92>
 8008cd2:	f100 0708 	add.w	r7, r0, #8
 8008cd6:	f101 0608 	add.w	r6, r1, #8
 8008cda:	f102 0508 	add.w	r5, r2, #8
 8008cde:	46e6      	mov	lr, ip
 8008ce0:	f857 9c08 	ldr.w	r9, [r7, #-8]
 8008ce4:	f856 8c08 	ldr.w	r8, [r6, #-8]
 8008ce8:	f857 bc04 	ldr.w	fp, [r7, #-4]
 8008cec:	f856 4c04 	ldr.w	r4, [r6, #-4]
 8008cf0:	fb19 fa38 	smultt	sl, r9, r8
 8008cf4:	f1be 0e01 	subs.w	lr, lr, #1
 8008cf8:	fb19 f808 	smulbb	r8, r9, r8
 8008cfc:	fb1b f934 	smultt	r9, fp, r4
 8008d00:	fb1b f404 	smulbb	r4, fp, r4
 8008d04:	ea4f 3aea 	mov.w	sl, sl, asr #15
 8008d08:	ea4f 38e8 	mov.w	r8, r8, asr #15
 8008d0c:	f30a 0a0f 	ssat	sl, #16, sl
 8008d10:	f308 080f 	ssat	r8, #16, r8
 8008d14:	fa0f fa8a 	sxth.w	sl, sl
 8008d18:	fa0f f888 	sxth.w	r8, r8
 8008d1c:	ea4f 39e9 	mov.w	r9, r9, asr #15
 8008d20:	eac8 480a 	pkhbt	r8, r8, sl, lsl #16
 8008d24:	ea4f 34e4 	mov.w	r4, r4, asr #15
 8008d28:	f845 8c08 	str.w	r8, [r5, #-8]
 8008d2c:	f309 090f 	ssat	r9, #16, r9
 8008d30:	f304 040f 	ssat	r4, #16, r4
 8008d34:	fa0f f989 	sxth.w	r9, r9
 8008d38:	b224      	sxth	r4, r4
 8008d3a:	f107 0708 	add.w	r7, r7, #8
 8008d3e:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 8008d42:	f106 0608 	add.w	r6, r6, #8
 8008d46:	f845 4c04 	str.w	r4, [r5, #-4]
 8008d4a:	f105 0508 	add.w	r5, r5, #8
 8008d4e:	d1c7      	bne.n	8008ce0 <arm_mult_q15+0x18>
 8008d50:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8008d54:	4460      	add	r0, ip
 8008d56:	4461      	add	r1, ip
 8008d58:	4462      	add	r2, ip
 8008d5a:	f013 0303 	ands.w	r3, r3, #3
 8008d5e:	d00e      	beq.n	8008d7e <arm_mult_q15+0xb6>
 8008d60:	3a02      	subs	r2, #2
 8008d62:	f830 5b02 	ldrh.w	r5, [r0], #2
 8008d66:	f831 4b02 	ldrh.w	r4, [r1], #2
 8008d6a:	3b01      	subs	r3, #1
 8008d6c:	fb15 f404 	smulbb	r4, r5, r4
 8008d70:	ea4f 34e4 	mov.w	r4, r4, asr #15
 8008d74:	f304 040f 	ssat	r4, #16, r4
 8008d78:	f822 4f02 	strh.w	r4, [r2, #2]!
 8008d7c:	d1f1      	bne.n	8008d62 <arm_mult_q15+0x9a>
 8008d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d82:	bf00      	nop

08008d84 <memset>:
 8008d84:	4402      	add	r2, r0
 8008d86:	4603      	mov	r3, r0
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d100      	bne.n	8008d8e <memset+0xa>
 8008d8c:	4770      	bx	lr
 8008d8e:	f803 1b01 	strb.w	r1, [r3], #1
 8008d92:	e7f9      	b.n	8008d88 <memset+0x4>

08008d94 <__libc_init_array>:
 8008d94:	b570      	push	{r4, r5, r6, lr}
 8008d96:	4d0d      	ldr	r5, [pc, #52]	@ (8008dcc <__libc_init_array+0x38>)
 8008d98:	4c0d      	ldr	r4, [pc, #52]	@ (8008dd0 <__libc_init_array+0x3c>)
 8008d9a:	1b64      	subs	r4, r4, r5
 8008d9c:	10a4      	asrs	r4, r4, #2
 8008d9e:	2600      	movs	r6, #0
 8008da0:	42a6      	cmp	r6, r4
 8008da2:	d109      	bne.n	8008db8 <__libc_init_array+0x24>
 8008da4:	4d0b      	ldr	r5, [pc, #44]	@ (8008dd4 <__libc_init_array+0x40>)
 8008da6:	4c0c      	ldr	r4, [pc, #48]	@ (8008dd8 <__libc_init_array+0x44>)
 8008da8:	f000 f818 	bl	8008ddc <_init>
 8008dac:	1b64      	subs	r4, r4, r5
 8008dae:	10a4      	asrs	r4, r4, #2
 8008db0:	2600      	movs	r6, #0
 8008db2:	42a6      	cmp	r6, r4
 8008db4:	d105      	bne.n	8008dc2 <__libc_init_array+0x2e>
 8008db6:	bd70      	pop	{r4, r5, r6, pc}
 8008db8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dbc:	4798      	blx	r3
 8008dbe:	3601      	adds	r6, #1
 8008dc0:	e7ee      	b.n	8008da0 <__libc_init_array+0xc>
 8008dc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dc6:	4798      	blx	r3
 8008dc8:	3601      	adds	r6, #1
 8008dca:	e7f2      	b.n	8008db2 <__libc_init_array+0x1e>
 8008dcc:	0801ac88 	.word	0x0801ac88
 8008dd0:	0801ac88 	.word	0x0801ac88
 8008dd4:	0801ac88 	.word	0x0801ac88
 8008dd8:	0801ac8c 	.word	0x0801ac8c

08008ddc <_init>:
 8008ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dde:	bf00      	nop
 8008de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008de2:	bc08      	pop	{r3}
 8008de4:	469e      	mov	lr, r3
 8008de6:	4770      	bx	lr

08008de8 <_fini>:
 8008de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dea:	bf00      	nop
 8008dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dee:	bc08      	pop	{r3}
 8008df0:	469e      	mov	lr, r3
 8008df2:	4770      	bx	lr
