
Projekt_DOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c830  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d8  0800c9c0  0800c9c0  0000d9c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc98  0800cc98  0000e088  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc98  0800cc98  0000dc98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cca0  0800cca0  0000e088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cca0  0800cca0  0000dca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cca4  0800cca4  0000dca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800cca8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e088  2**0
                  CONTENTS
 10 .bss          00000b78  20000088  20000088  0000e088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000c00  20000c00  0000e088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bad2  00000000  00000000  0000e0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004907  00000000  00000000  00029b8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001808  00000000  00000000  0002e498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000126b  00000000  00000000  0002fca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026bde  00000000  00000000  00030f0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ff95  00000000  00000000  00057ae9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d64e7  00000000  00000000  00077a7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014df65  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007120  00000000  00000000  0014dfa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  001550c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c9a8 	.word	0x0800c9a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800c9a8 	.word	0x0800c9a8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2f>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b74:	bf24      	itt	cs
 8000b76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b7e:	d90d      	bls.n	8000b9c <__aeabi_d2f+0x30>
 8000b80:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b8c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b94:	bf08      	it	eq
 8000b96:	f020 0001 	biceq.w	r0, r0, #1
 8000b9a:	4770      	bx	lr
 8000b9c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ba0:	d121      	bne.n	8000be6 <__aeabi_d2f+0x7a>
 8000ba2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ba6:	bfbc      	itt	lt
 8000ba8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bac:	4770      	bxlt	lr
 8000bae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb6:	f1c2 0218 	rsb	r2, r2, #24
 8000bba:	f1c2 0c20 	rsb	ip, r2, #32
 8000bbe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc6:	bf18      	it	ne
 8000bc8:	f040 0001 	orrne.w	r0, r0, #1
 8000bcc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd8:	ea40 000c 	orr.w	r0, r0, ip
 8000bdc:	fa23 f302 	lsr.w	r3, r3, r2
 8000be0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be4:	e7cc      	b.n	8000b80 <__aeabi_d2f+0x14>
 8000be6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bea:	d107      	bne.n	8000bfc <__aeabi_d2f+0x90>
 8000bec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bf6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bfa:	4770      	bxne	lr
 8000bfc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c00:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c20:	f000 b96a 	b.w	8000ef8 <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f806 	bl	8000c3c <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__udivmoddi4>:
 8000c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c40:	9d08      	ldr	r5, [sp, #32]
 8000c42:	460c      	mov	r4, r1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d14e      	bne.n	8000ce6 <__udivmoddi4+0xaa>
 8000c48:	4694      	mov	ip, r2
 8000c4a:	458c      	cmp	ip, r1
 8000c4c:	4686      	mov	lr, r0
 8000c4e:	fab2 f282 	clz	r2, r2
 8000c52:	d962      	bls.n	8000d1a <__udivmoddi4+0xde>
 8000c54:	b14a      	cbz	r2, 8000c6a <__udivmoddi4+0x2e>
 8000c56:	f1c2 0320 	rsb	r3, r2, #32
 8000c5a:	4091      	lsls	r1, r2
 8000c5c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c64:	4319      	orrs	r1, r3
 8000c66:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6e:	fa1f f68c 	uxth.w	r6, ip
 8000c72:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c76:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c7a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c82:	fb04 f106 	mul.w	r1, r4, r6
 8000c86:	4299      	cmp	r1, r3
 8000c88:	d90a      	bls.n	8000ca0 <__udivmoddi4+0x64>
 8000c8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c92:	f080 8112 	bcs.w	8000eba <__udivmoddi4+0x27e>
 8000c96:	4299      	cmp	r1, r3
 8000c98:	f240 810f 	bls.w	8000eba <__udivmoddi4+0x27e>
 8000c9c:	3c02      	subs	r4, #2
 8000c9e:	4463      	add	r3, ip
 8000ca0:	1a59      	subs	r1, r3, r1
 8000ca2:	fa1f f38e 	uxth.w	r3, lr
 8000ca6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000caa:	fb07 1110 	mls	r1, r7, r0, r1
 8000cae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb2:	fb00 f606 	mul.w	r6, r0, r6
 8000cb6:	429e      	cmp	r6, r3
 8000cb8:	d90a      	bls.n	8000cd0 <__udivmoddi4+0x94>
 8000cba:	eb1c 0303 	adds.w	r3, ip, r3
 8000cbe:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000cc2:	f080 80fc 	bcs.w	8000ebe <__udivmoddi4+0x282>
 8000cc6:	429e      	cmp	r6, r3
 8000cc8:	f240 80f9 	bls.w	8000ebe <__udivmoddi4+0x282>
 8000ccc:	4463      	add	r3, ip
 8000cce:	3802      	subs	r0, #2
 8000cd0:	1b9b      	subs	r3, r3, r6
 8000cd2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	b11d      	cbz	r5, 8000ce2 <__udivmoddi4+0xa6>
 8000cda:	40d3      	lsrs	r3, r2
 8000cdc:	2200      	movs	r2, #0
 8000cde:	e9c5 3200 	strd	r3, r2, [r5]
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d905      	bls.n	8000cf6 <__udivmoddi4+0xba>
 8000cea:	b10d      	cbz	r5, 8000cf0 <__udivmoddi4+0xb4>
 8000cec:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4608      	mov	r0, r1
 8000cf4:	e7f5      	b.n	8000ce2 <__udivmoddi4+0xa6>
 8000cf6:	fab3 f183 	clz	r1, r3
 8000cfa:	2900      	cmp	r1, #0
 8000cfc:	d146      	bne.n	8000d8c <__udivmoddi4+0x150>
 8000cfe:	42a3      	cmp	r3, r4
 8000d00:	d302      	bcc.n	8000d08 <__udivmoddi4+0xcc>
 8000d02:	4290      	cmp	r0, r2
 8000d04:	f0c0 80f0 	bcc.w	8000ee8 <__udivmoddi4+0x2ac>
 8000d08:	1a86      	subs	r6, r0, r2
 8000d0a:	eb64 0303 	sbc.w	r3, r4, r3
 8000d0e:	2001      	movs	r0, #1
 8000d10:	2d00      	cmp	r5, #0
 8000d12:	d0e6      	beq.n	8000ce2 <__udivmoddi4+0xa6>
 8000d14:	e9c5 6300 	strd	r6, r3, [r5]
 8000d18:	e7e3      	b.n	8000ce2 <__udivmoddi4+0xa6>
 8000d1a:	2a00      	cmp	r2, #0
 8000d1c:	f040 8090 	bne.w	8000e40 <__udivmoddi4+0x204>
 8000d20:	eba1 040c 	sub.w	r4, r1, ip
 8000d24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d28:	fa1f f78c 	uxth.w	r7, ip
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d36:	fb08 4416 	mls	r4, r8, r6, r4
 8000d3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d3e:	fb07 f006 	mul.w	r0, r7, r6
 8000d42:	4298      	cmp	r0, r3
 8000d44:	d908      	bls.n	8000d58 <__udivmoddi4+0x11c>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d4e:	d202      	bcs.n	8000d56 <__udivmoddi4+0x11a>
 8000d50:	4298      	cmp	r0, r3
 8000d52:	f200 80cd 	bhi.w	8000ef0 <__udivmoddi4+0x2b4>
 8000d56:	4626      	mov	r6, r4
 8000d58:	1a1c      	subs	r4, r3, r0
 8000d5a:	fa1f f38e 	uxth.w	r3, lr
 8000d5e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d62:	fb08 4410 	mls	r4, r8, r0, r4
 8000d66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d6a:	fb00 f707 	mul.w	r7, r0, r7
 8000d6e:	429f      	cmp	r7, r3
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x148>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x146>
 8000d7c:	429f      	cmp	r7, r3
 8000d7e:	f200 80b0 	bhi.w	8000ee2 <__udivmoddi4+0x2a6>
 8000d82:	4620      	mov	r0, r4
 8000d84:	1bdb      	subs	r3, r3, r7
 8000d86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d8a:	e7a5      	b.n	8000cd8 <__udivmoddi4+0x9c>
 8000d8c:	f1c1 0620 	rsb	r6, r1, #32
 8000d90:	408b      	lsls	r3, r1
 8000d92:	fa22 f706 	lsr.w	r7, r2, r6
 8000d96:	431f      	orrs	r7, r3
 8000d98:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d9c:	fa04 f301 	lsl.w	r3, r4, r1
 8000da0:	ea43 030c 	orr.w	r3, r3, ip
 8000da4:	40f4      	lsrs	r4, r6
 8000da6:	fa00 f801 	lsl.w	r8, r0, r1
 8000daa:	0c38      	lsrs	r0, r7, #16
 8000dac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000db0:	fbb4 fef0 	udiv	lr, r4, r0
 8000db4:	fa1f fc87 	uxth.w	ip, r7
 8000db8:	fb00 441e 	mls	r4, r0, lr, r4
 8000dbc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc0:	fb0e f90c 	mul.w	r9, lr, ip
 8000dc4:	45a1      	cmp	r9, r4
 8000dc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dca:	d90a      	bls.n	8000de2 <__udivmoddi4+0x1a6>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dd2:	f080 8084 	bcs.w	8000ede <__udivmoddi4+0x2a2>
 8000dd6:	45a1      	cmp	r9, r4
 8000dd8:	f240 8081 	bls.w	8000ede <__udivmoddi4+0x2a2>
 8000ddc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000de0:	443c      	add	r4, r7
 8000de2:	eba4 0409 	sub.w	r4, r4, r9
 8000de6:	fa1f f983 	uxth.w	r9, r3
 8000dea:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dee:	fb00 4413 	mls	r4, r0, r3, r4
 8000df2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000df6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dfa:	45a4      	cmp	ip, r4
 8000dfc:	d907      	bls.n	8000e0e <__udivmoddi4+0x1d2>
 8000dfe:	193c      	adds	r4, r7, r4
 8000e00:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e04:	d267      	bcs.n	8000ed6 <__udivmoddi4+0x29a>
 8000e06:	45a4      	cmp	ip, r4
 8000e08:	d965      	bls.n	8000ed6 <__udivmoddi4+0x29a>
 8000e0a:	3b02      	subs	r3, #2
 8000e0c:	443c      	add	r4, r7
 8000e0e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e12:	fba0 9302 	umull	r9, r3, r0, r2
 8000e16:	eba4 040c 	sub.w	r4, r4, ip
 8000e1a:	429c      	cmp	r4, r3
 8000e1c:	46ce      	mov	lr, r9
 8000e1e:	469c      	mov	ip, r3
 8000e20:	d351      	bcc.n	8000ec6 <__udivmoddi4+0x28a>
 8000e22:	d04e      	beq.n	8000ec2 <__udivmoddi4+0x286>
 8000e24:	b155      	cbz	r5, 8000e3c <__udivmoddi4+0x200>
 8000e26:	ebb8 030e 	subs.w	r3, r8, lr
 8000e2a:	eb64 040c 	sbc.w	r4, r4, ip
 8000e2e:	fa04 f606 	lsl.w	r6, r4, r6
 8000e32:	40cb      	lsrs	r3, r1
 8000e34:	431e      	orrs	r6, r3
 8000e36:	40cc      	lsrs	r4, r1
 8000e38:	e9c5 6400 	strd	r6, r4, [r5]
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	e750      	b.n	8000ce2 <__udivmoddi4+0xa6>
 8000e40:	f1c2 0320 	rsb	r3, r2, #32
 8000e44:	fa20 f103 	lsr.w	r1, r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa24 f303 	lsr.w	r3, r4, r3
 8000e50:	4094      	lsls	r4, r2
 8000e52:	430c      	orrs	r4, r1
 8000e54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e58:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e5c:	fa1f f78c 	uxth.w	r7, ip
 8000e60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e64:	fb08 3110 	mls	r1, r8, r0, r3
 8000e68:	0c23      	lsrs	r3, r4, #16
 8000e6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6e:	fb00 f107 	mul.w	r1, r0, r7
 8000e72:	4299      	cmp	r1, r3
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x24c>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e7e:	d22c      	bcs.n	8000eda <__udivmoddi4+0x29e>
 8000e80:	4299      	cmp	r1, r3
 8000e82:	d92a      	bls.n	8000eda <__udivmoddi4+0x29e>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1a5b      	subs	r3, r3, r1
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e90:	fb08 3311 	mls	r3, r8, r1, r3
 8000e94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e98:	fb01 f307 	mul.w	r3, r1, r7
 8000e9c:	42a3      	cmp	r3, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x276>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ea8:	d213      	bcs.n	8000ed2 <__udivmoddi4+0x296>
 8000eaa:	42a3      	cmp	r3, r4
 8000eac:	d911      	bls.n	8000ed2 <__udivmoddi4+0x296>
 8000eae:	3902      	subs	r1, #2
 8000eb0:	4464      	add	r4, ip
 8000eb2:	1ae4      	subs	r4, r4, r3
 8000eb4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000eb8:	e739      	b.n	8000d2e <__udivmoddi4+0xf2>
 8000eba:	4604      	mov	r4, r0
 8000ebc:	e6f0      	b.n	8000ca0 <__udivmoddi4+0x64>
 8000ebe:	4608      	mov	r0, r1
 8000ec0:	e706      	b.n	8000cd0 <__udivmoddi4+0x94>
 8000ec2:	45c8      	cmp	r8, r9
 8000ec4:	d2ae      	bcs.n	8000e24 <__udivmoddi4+0x1e8>
 8000ec6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eca:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ece:	3801      	subs	r0, #1
 8000ed0:	e7a8      	b.n	8000e24 <__udivmoddi4+0x1e8>
 8000ed2:	4631      	mov	r1, r6
 8000ed4:	e7ed      	b.n	8000eb2 <__udivmoddi4+0x276>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	e799      	b.n	8000e0e <__udivmoddi4+0x1d2>
 8000eda:	4630      	mov	r0, r6
 8000edc:	e7d4      	b.n	8000e88 <__udivmoddi4+0x24c>
 8000ede:	46d6      	mov	lr, sl
 8000ee0:	e77f      	b.n	8000de2 <__udivmoddi4+0x1a6>
 8000ee2:	4463      	add	r3, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e74d      	b.n	8000d84 <__udivmoddi4+0x148>
 8000ee8:	4606      	mov	r6, r0
 8000eea:	4623      	mov	r3, r4
 8000eec:	4608      	mov	r0, r1
 8000eee:	e70f      	b.n	8000d10 <__udivmoddi4+0xd4>
 8000ef0:	3e02      	subs	r6, #2
 8000ef2:	4463      	add	r3, ip
 8000ef4:	e730      	b.n	8000d58 <__udivmoddi4+0x11c>
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <init_AudioReset>:
#include "i2s.h"
#include "spi.h"
#include "usb_host.h"
#include "gpio.h"
#include "audio.h"
void init_AudioReset() {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, AUDIO_RESET_PIN, GPIO_PIN_SET);
 8000f00:	2201      	movs	r2, #1
 8000f02:	2110      	movs	r1, #16
 8000f04:	4802      	ldr	r0, [pc, #8]	@ (8000f10 <init_AudioReset+0x14>)
 8000f06:	f001 fa75 	bl	80023f4 <HAL_GPIO_WritePin>
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40020c00 	.word	0x40020c00

08000f14 <configAudio>:
void configAudio() {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af02      	add	r7, sp, #8
    uint8_t bytes[2];
    init_AudioReset();
 8000f1a:	f7ff ffef 	bl	8000efc <init_AudioReset>

    /* Power sequence */
    // Set Power Control Register to "on" state
    bytes[0] = 0x02;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x01;
 8000f22:	2301      	movs	r3, #1
 8000f24:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000f26:	1d3a      	adds	r2, r7, #4
 8000f28:	2364      	movs	r3, #100	@ 0x64
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	2194      	movs	r1, #148	@ 0x94
 8000f30:	486f      	ldr	r0, [pc, #444]	@ (80010f0 <configAudio+0x1dc>)
 8000f32:	f003 fd0b 	bl	800494c <HAL_I2C_Master_Transmit>

    /* Initialization sequence */
    bytes[0] = 0x00;
 8000f36:	2300      	movs	r3, #0
 8000f38:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x99;
 8000f3a:	2399      	movs	r3, #153	@ 0x99
 8000f3c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000f3e:	1d3a      	adds	r2, r7, #4
 8000f40:	2364      	movs	r3, #100	@ 0x64
 8000f42:	9300      	str	r3, [sp, #0]
 8000f44:	2302      	movs	r3, #2
 8000f46:	2194      	movs	r1, #148	@ 0x94
 8000f48:	4869      	ldr	r0, [pc, #420]	@ (80010f0 <configAudio+0x1dc>)
 8000f4a:	f003 fcff 	bl	800494c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x47;
 8000f4e:	2347      	movs	r3, #71	@ 0x47
 8000f50:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x80;
 8000f52:	2380      	movs	r3, #128	@ 0x80
 8000f54:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000f56:	1d3a      	adds	r2, r7, #4
 8000f58:	2364      	movs	r3, #100	@ 0x64
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	2194      	movs	r1, #148	@ 0x94
 8000f60:	4863      	ldr	r0, [pc, #396]	@ (80010f0 <configAudio+0x1dc>)
 8000f62:	f003 fcf3 	bl	800494c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x32;
 8000f66:	2332      	movs	r3, #50	@ 0x32
 8000f68:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x80;
 8000f6a:	2380      	movs	r3, #128	@ 0x80
 8000f6c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000f6e:	1d3a      	adds	r2, r7, #4
 8000f70:	2364      	movs	r3, #100	@ 0x64
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	2302      	movs	r3, #2
 8000f76:	2194      	movs	r1, #148	@ 0x94
 8000f78:	485d      	ldr	r0, [pc, #372]	@ (80010f0 <configAudio+0x1dc>)
 8000f7a:	f003 fce7 	bl	800494c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x32;
 8000f7e:	2332      	movs	r3, #50	@ 0x32
 8000f80:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x00;
 8000f82:	2300      	movs	r3, #0
 8000f84:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000f86:	1d3a      	adds	r2, r7, #4
 8000f88:	2364      	movs	r3, #100	@ 0x64
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	2194      	movs	r1, #148	@ 0x94
 8000f90:	4857      	ldr	r0, [pc, #348]	@ (80010f0 <configAudio+0x1dc>)
 8000f92:	f003 fcdb 	bl	800494c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x00;
 8000f96:	2300      	movs	r3, #0
 8000f98:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x00;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000f9e:	1d3a      	adds	r2, r7, #4
 8000fa0:	2364      	movs	r3, #100	@ 0x64
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	2194      	movs	r1, #148	@ 0x94
 8000fa8:	4851      	ldr	r0, [pc, #324]	@ (80010f0 <configAudio+0x1dc>)
 8000faa:	f003 fccf 	bl	800494c <HAL_I2C_Master_Transmit>

    /* Ctl registers configuration */
    bytes[0] = 0x04;
 8000fae:	2304      	movs	r3, #4
 8000fb0:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0xAF;
 8000fb2:	23af      	movs	r3, #175	@ 0xaf
 8000fb4:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000fb6:	1d3a      	adds	r2, r7, #4
 8000fb8:	2364      	movs	r3, #100	@ 0x64
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	2194      	movs	r1, #148	@ 0x94
 8000fc0:	484b      	ldr	r0, [pc, #300]	@ (80010f0 <configAudio+0x1dc>)
 8000fc2:	f003 fcc3 	bl	800494c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x0D;
 8000fc6:	230d      	movs	r3, #13
 8000fc8:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x70;
 8000fca:	2370      	movs	r3, #112	@ 0x70
 8000fcc:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000fce:	1d3a      	adds	r2, r7, #4
 8000fd0:	2364      	movs	r3, #100	@ 0x64
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	2194      	movs	r1, #148	@ 0x94
 8000fd8:	4845      	ldr	r0, [pc, #276]	@ (80010f0 <configAudio+0x1dc>)
 8000fda:	f003 fcb7 	bl	800494c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x05;
 8000fde:	2305      	movs	r3, #5
 8000fe0:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x81;
 8000fe2:	2381      	movs	r3, #129	@ 0x81
 8000fe4:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000fe6:	1d3a      	adds	r2, r7, #4
 8000fe8:	2364      	movs	r3, #100	@ 0x64
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	2302      	movs	r3, #2
 8000fee:	2194      	movs	r1, #148	@ 0x94
 8000ff0:	483f      	ldr	r0, [pc, #252]	@ (80010f0 <configAudio+0x1dc>)
 8000ff2:	f003 fcab 	bl	800494c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x06;
 8000ff6:	2306      	movs	r3, #6
 8000ff8:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x07;
 8000ffa:	2307      	movs	r3, #7
 8000ffc:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000ffe:	1d3a      	adds	r2, r7, #4
 8001000:	2364      	movs	r3, #100	@ 0x64
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	2302      	movs	r3, #2
 8001006:	2194      	movs	r1, #148	@ 0x94
 8001008:	4839      	ldr	r0, [pc, #228]	@ (80010f0 <configAudio+0x1dc>)
 800100a:	f003 fc9f 	bl	800494c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x0A;
 800100e:	230a      	movs	r3, #10
 8001010:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x00;
 8001012:	2300      	movs	r3, #0
 8001014:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8001016:	1d3a      	adds	r2, r7, #4
 8001018:	2364      	movs	r3, #100	@ 0x64
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	2302      	movs	r3, #2
 800101e:	2194      	movs	r1, #148	@ 0x94
 8001020:	4833      	ldr	r0, [pc, #204]	@ (80010f0 <configAudio+0x1dc>)
 8001022:	f003 fc93 	bl	800494c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x27;
 8001026:	2327      	movs	r3, #39	@ 0x27
 8001028:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x00;
 800102a:	2300      	movs	r3, #0
 800102c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800102e:	1d3a      	adds	r2, r7, #4
 8001030:	2364      	movs	r3, #100	@ 0x64
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	2302      	movs	r3, #2
 8001036:	2194      	movs	r1, #148	@ 0x94
 8001038:	482d      	ldr	r0, [pc, #180]	@ (80010f0 <configAudio+0x1dc>)
 800103a:	f003 fc87 	bl	800494c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x1F;
 800103e:	231f      	movs	r3, #31
 8001040:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x0F;
 8001042:	230f      	movs	r3, #15
 8001044:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8001046:	1d3a      	adds	r2, r7, #4
 8001048:	2364      	movs	r3, #100	@ 0x64
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	2302      	movs	r3, #2
 800104e:	2194      	movs	r1, #148	@ 0x94
 8001050:	4827      	ldr	r0, [pc, #156]	@ (80010f0 <configAudio+0x1dc>)
 8001052:	f003 fc7b 	bl	800494c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x22;
 8001056:	2322      	movs	r3, #34	@ 0x22
 8001058:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0xC0;
 800105a:	23c0      	movs	r3, #192	@ 0xc0
 800105c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800105e:	1d3a      	adds	r2, r7, #4
 8001060:	2364      	movs	r3, #100	@ 0x64
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	2302      	movs	r3, #2
 8001066:	2194      	movs	r1, #148	@ 0x94
 8001068:	4821      	ldr	r0, [pc, #132]	@ (80010f0 <configAudio+0x1dc>)
 800106a:	f003 fc6f 	bl	800494c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x14;
 800106e:	2314      	movs	r3, #20
 8001070:	713b      	strb	r3, [r7, #4]
    bytes[1] = 2;
 8001072:	2302      	movs	r3, #2
 8001074:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8001076:	1d3a      	adds	r2, r7, #4
 8001078:	2364      	movs	r3, #100	@ 0x64
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	2302      	movs	r3, #2
 800107e:	2194      	movs	r1, #148	@ 0x94
 8001080:	481b      	ldr	r0, [pc, #108]	@ (80010f0 <configAudio+0x1dc>)
 8001082:	f003 fc63 	bl	800494c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x15;
 8001086:	2315      	movs	r3, #21
 8001088:	713b      	strb	r3, [r7, #4]
    bytes[1] = 2;
 800108a:	2302      	movs	r3, #2
 800108c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800108e:	1d3a      	adds	r2, r7, #4
 8001090:	2364      	movs	r3, #100	@ 0x64
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2302      	movs	r3, #2
 8001096:	2194      	movs	r1, #148	@ 0x94
 8001098:	4815      	ldr	r0, [pc, #84]	@ (80010f0 <configAudio+0x1dc>)
 800109a:	f003 fc57 	bl	800494c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x20;
 800109e:	2320      	movs	r3, #32
 80010a0:	713b      	strb	r3, [r7, #4]
    bytes[1] = 24;
 80010a2:	2318      	movs	r3, #24
 80010a4:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80010a6:	1d3a      	adds	r2, r7, #4
 80010a8:	2364      	movs	r3, #100	@ 0x64
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	2302      	movs	r3, #2
 80010ae:	2194      	movs	r1, #148	@ 0x94
 80010b0:	480f      	ldr	r0, [pc, #60]	@ (80010f0 <configAudio+0x1dc>)
 80010b2:	f003 fc4b 	bl	800494c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x21;
 80010b6:	2321      	movs	r3, #33	@ 0x21
 80010b8:	713b      	strb	r3, [r7, #4]
    bytes[1] = 24;
 80010ba:	2318      	movs	r3, #24
 80010bc:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80010be:	1d3a      	adds	r2, r7, #4
 80010c0:	2364      	movs	r3, #100	@ 0x64
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	2302      	movs	r3, #2
 80010c6:	2194      	movs	r1, #148	@ 0x94
 80010c8:	4809      	ldr	r0, [pc, #36]	@ (80010f0 <configAudio+0x1dc>)
 80010ca:	f003 fc3f 	bl	800494c <HAL_I2C_Master_Transmit>

    /* Power up */
    bytes[0] = 0x02;
 80010ce:	2302      	movs	r3, #2
 80010d0:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x9E;
 80010d2:	239e      	movs	r3, #158	@ 0x9e
 80010d4:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80010d6:	1d3a      	adds	r2, r7, #4
 80010d8:	2364      	movs	r3, #100	@ 0x64
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	2302      	movs	r3, #2
 80010de:	2194      	movs	r1, #148	@ 0x94
 80010e0:	4803      	ldr	r0, [pc, #12]	@ (80010f0 <configAudio+0x1dc>)
 80010e2:	f003 fc33 	bl	800494c <HAL_I2C_Master_Transmit>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200000a4 	.word	0x200000a4

080010f4 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08c      	sub	sp, #48	@ 0x30
 80010f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fa:	f107 031c 	add.w	r3, r7, #28
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
 8001108:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	61bb      	str	r3, [r7, #24]
 800110e:	4b72      	ldr	r3, [pc, #456]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	4a71      	ldr	r2, [pc, #452]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 8001114:	f043 0310 	orr.w	r3, r3, #16
 8001118:	6313      	str	r3, [r2, #48]	@ 0x30
 800111a:	4b6f      	ldr	r3, [pc, #444]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111e:	f003 0310 	and.w	r3, r3, #16
 8001122:	61bb      	str	r3, [r7, #24]
 8001124:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	4b6b      	ldr	r3, [pc, #428]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	4a6a      	ldr	r2, [pc, #424]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 8001130:	f043 0304 	orr.w	r3, r3, #4
 8001134:	6313      	str	r3, [r2, #48]	@ 0x30
 8001136:	4b68      	ldr	r3, [pc, #416]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113a:	f003 0304 	and.w	r3, r3, #4
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
 8001146:	4b64      	ldr	r3, [pc, #400]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114a:	4a63      	ldr	r2, [pc, #396]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 800114c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001150:	6313      	str	r3, [r2, #48]	@ 0x30
 8001152:	4b61      	ldr	r3, [pc, #388]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	4b5d      	ldr	r3, [pc, #372]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	4a5c      	ldr	r2, [pc, #368]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6313      	str	r3, [r2, #48]	@ 0x30
 800116e:	4b5a      	ldr	r3, [pc, #360]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	4b56      	ldr	r3, [pc, #344]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	4a55      	ldr	r2, [pc, #340]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 8001184:	f043 0302 	orr.w	r3, r3, #2
 8001188:	6313      	str	r3, [r2, #48]	@ 0x30
 800118a:	4b53      	ldr	r3, [pc, #332]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	4b4f      	ldr	r3, [pc, #316]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	4a4e      	ldr	r2, [pc, #312]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 80011a0:	f043 0308 	orr.w	r3, r3, #8
 80011a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a6:	4b4c      	ldr	r3, [pc, #304]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	f003 0308 	and.w	r3, r3, #8
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2108      	movs	r1, #8
 80011b6:	4849      	ldr	r0, [pc, #292]	@ (80012dc <MX_GPIO_Init+0x1e8>)
 80011b8:	f001 f91c 	bl	80023f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80011bc:	2201      	movs	r2, #1
 80011be:	2101      	movs	r1, #1
 80011c0:	4847      	ldr	r0, [pc, #284]	@ (80012e0 <MX_GPIO_Init+0x1ec>)
 80011c2:	f001 f917 	bl	80023f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80011c6:	2200      	movs	r2, #0
 80011c8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80011cc:	4845      	ldr	r0, [pc, #276]	@ (80012e4 <MX_GPIO_Init+0x1f0>)
 80011ce:	f001 f911 	bl	80023f4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80011d2:	2308      	movs	r3, #8
 80011d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d6:	2301      	movs	r3, #1
 80011d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011de:	2300      	movs	r3, #0
 80011e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80011e2:	f107 031c 	add.w	r3, r7, #28
 80011e6:	4619      	mov	r1, r3
 80011e8:	483c      	ldr	r0, [pc, #240]	@ (80012dc <MX_GPIO_Init+0x1e8>)
 80011ea:	f000 ff67 	bl	80020bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80011ee:	2301      	movs	r3, #1
 80011f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f2:	2301      	movs	r3, #1
 80011f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fa:	2300      	movs	r3, #0
 80011fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80011fe:	f107 031c 	add.w	r3, r7, #28
 8001202:	4619      	mov	r1, r3
 8001204:	4836      	ldr	r0, [pc, #216]	@ (80012e0 <MX_GPIO_Init+0x1ec>)
 8001206:	f000 ff59 	bl	80020bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800120a:	2308      	movs	r3, #8
 800120c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120e:	2302      	movs	r3, #2
 8001210:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001216:	2300      	movs	r3, #0
 8001218:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800121a:	2305      	movs	r3, #5
 800121c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800121e:	f107 031c 	add.w	r3, r7, #28
 8001222:	4619      	mov	r1, r3
 8001224:	482e      	ldr	r0, [pc, #184]	@ (80012e0 <MX_GPIO_Init+0x1ec>)
 8001226:	f000 ff49 	bl	80020bc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800122a:	2301      	movs	r3, #1
 800122c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800122e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001232:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001238:	f107 031c 	add.w	r3, r7, #28
 800123c:	4619      	mov	r1, r3
 800123e:	482a      	ldr	r0, [pc, #168]	@ (80012e8 <MX_GPIO_Init+0x1f4>)
 8001240:	f000 ff3c 	bl	80020bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001244:	2304      	movs	r3, #4
 8001246:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001248:	2300      	movs	r3, #0
 800124a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001250:	f107 031c 	add.w	r3, r7, #28
 8001254:	4619      	mov	r1, r3
 8001256:	4825      	ldr	r0, [pc, #148]	@ (80012ec <MX_GPIO_Init+0x1f8>)
 8001258:	f000 ff30 	bl	80020bc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800125c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001260:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001262:	2302      	movs	r3, #2
 8001264:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126a:	2300      	movs	r3, #0
 800126c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800126e:	2305      	movs	r3, #5
 8001270:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001272:	f107 031c 	add.w	r3, r7, #28
 8001276:	4619      	mov	r1, r3
 8001278:	481c      	ldr	r0, [pc, #112]	@ (80012ec <MX_GPIO_Init+0x1f8>)
 800127a:	f000 ff1f 	bl	80020bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800127e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001282:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001284:	2301      	movs	r3, #1
 8001286:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128c:	2300      	movs	r3, #0
 800128e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001290:	f107 031c 	add.w	r3, r7, #28
 8001294:	4619      	mov	r1, r3
 8001296:	4813      	ldr	r0, [pc, #76]	@ (80012e4 <MX_GPIO_Init+0x1f0>)
 8001298:	f000 ff10 	bl	80020bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800129c:	2320      	movs	r3, #32
 800129e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a0:	2300      	movs	r3, #0
 80012a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80012a8:	f107 031c 	add.w	r3, r7, #28
 80012ac:	4619      	mov	r1, r3
 80012ae:	480d      	ldr	r0, [pc, #52]	@ (80012e4 <MX_GPIO_Init+0x1f0>)
 80012b0:	f000 ff04 	bl	80020bc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80012b4:	2302      	movs	r3, #2
 80012b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012b8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80012bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80012c2:	f107 031c 	add.w	r3, r7, #28
 80012c6:	4619      	mov	r1, r3
 80012c8:	4804      	ldr	r0, [pc, #16]	@ (80012dc <MX_GPIO_Init+0x1e8>)
 80012ca:	f000 fef7 	bl	80020bc <HAL_GPIO_Init>

}
 80012ce:	bf00      	nop
 80012d0:	3730      	adds	r7, #48	@ 0x30
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40020800 	.word	0x40020800
 80012e4:	40020c00 	.word	0x40020c00
 80012e8:	40020000 	.word	0x40020000
 80012ec:	40020400 	.word	0x40020400

080012f0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012f4:	4b12      	ldr	r3, [pc, #72]	@ (8001340 <MX_I2C1_Init+0x50>)
 80012f6:	4a13      	ldr	r2, [pc, #76]	@ (8001344 <MX_I2C1_Init+0x54>)
 80012f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012fa:	4b11      	ldr	r3, [pc, #68]	@ (8001340 <MX_I2C1_Init+0x50>)
 80012fc:	4a12      	ldr	r2, [pc, #72]	@ (8001348 <MX_I2C1_Init+0x58>)
 80012fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001300:	4b0f      	ldr	r3, [pc, #60]	@ (8001340 <MX_I2C1_Init+0x50>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001306:	4b0e      	ldr	r3, [pc, #56]	@ (8001340 <MX_I2C1_Init+0x50>)
 8001308:	2200      	movs	r2, #0
 800130a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800130c:	4b0c      	ldr	r3, [pc, #48]	@ (8001340 <MX_I2C1_Init+0x50>)
 800130e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001312:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001314:	4b0a      	ldr	r3, [pc, #40]	@ (8001340 <MX_I2C1_Init+0x50>)
 8001316:	2200      	movs	r2, #0
 8001318:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800131a:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <MX_I2C1_Init+0x50>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001320:	4b07      	ldr	r3, [pc, #28]	@ (8001340 <MX_I2C1_Init+0x50>)
 8001322:	2200      	movs	r2, #0
 8001324:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001326:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <MX_I2C1_Init+0x50>)
 8001328:	2200      	movs	r2, #0
 800132a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800132c:	4804      	ldr	r0, [pc, #16]	@ (8001340 <MX_I2C1_Init+0x50>)
 800132e:	f003 f9c9 	bl	80046c4 <HAL_I2C_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001338:	f000 fab4 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}
 8001340:	200000a4 	.word	0x200000a4
 8001344:	40005400 	.word	0x40005400
 8001348:	000186a0 	.word	0x000186a0

0800134c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	@ 0x28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a19      	ldr	r2, [pc, #100]	@ (80013d0 <HAL_I2C_MspInit+0x84>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d12c      	bne.n	80013c8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	4b18      	ldr	r3, [pc, #96]	@ (80013d4 <HAL_I2C_MspInit+0x88>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	4a17      	ldr	r2, [pc, #92]	@ (80013d4 <HAL_I2C_MspInit+0x88>)
 8001378:	f043 0302 	orr.w	r3, r3, #2
 800137c:	6313      	str	r3, [r2, #48]	@ 0x30
 800137e:	4b15      	ldr	r3, [pc, #84]	@ (80013d4 <HAL_I2C_MspInit+0x88>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800138a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800138e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001390:	2312      	movs	r3, #18
 8001392:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001394:	2301      	movs	r3, #1
 8001396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2300      	movs	r3, #0
 800139a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800139c:	2304      	movs	r3, #4
 800139e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	4619      	mov	r1, r3
 80013a6:	480c      	ldr	r0, [pc, #48]	@ (80013d8 <HAL_I2C_MspInit+0x8c>)
 80013a8:	f000 fe88 	bl	80020bc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	4b08      	ldr	r3, [pc, #32]	@ (80013d4 <HAL_I2C_MspInit+0x88>)
 80013b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b4:	4a07      	ldr	r2, [pc, #28]	@ (80013d4 <HAL_I2C_MspInit+0x88>)
 80013b6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80013bc:	4b05      	ldr	r3, [pc, #20]	@ (80013d4 <HAL_I2C_MspInit+0x88>)
 80013be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80013c8:	bf00      	nop
 80013ca:	3728      	adds	r7, #40	@ 0x28
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40005400 	.word	0x40005400
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40020400 	.word	0x40020400

080013dc <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80013e0:	4b13      	ldr	r3, [pc, #76]	@ (8001430 <MX_I2S3_Init+0x54>)
 80013e2:	4a14      	ldr	r2, [pc, #80]	@ (8001434 <MX_I2S3_Init+0x58>)
 80013e4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80013e6:	4b12      	ldr	r3, [pc, #72]	@ (8001430 <MX_I2S3_Init+0x54>)
 80013e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013ec:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80013ee:	4b10      	ldr	r3, [pc, #64]	@ (8001430 <MX_I2S3_Init+0x54>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80013f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001430 <MX_I2S3_Init+0x54>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80013fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001430 <MX_I2S3_Init+0x54>)
 80013fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001400:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001402:	4b0b      	ldr	r3, [pc, #44]	@ (8001430 <MX_I2S3_Init+0x54>)
 8001404:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8001408:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800140a:	4b09      	ldr	r3, [pc, #36]	@ (8001430 <MX_I2S3_Init+0x54>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001410:	4b07      	ldr	r3, [pc, #28]	@ (8001430 <MX_I2S3_Init+0x54>)
 8001412:	2200      	movs	r2, #0
 8001414:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001416:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <MX_I2S3_Init+0x54>)
 8001418:	2200      	movs	r2, #0
 800141a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800141c:	4804      	ldr	r0, [pc, #16]	@ (8001430 <MX_I2S3_Init+0x54>)
 800141e:	f003 fdef 	bl	8005000 <HAL_I2S_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8001428:	f000 fa3c 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	200000f8 	.word	0x200000f8
 8001434:	40003c00 	.word	0x40003c00

08001438 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08e      	sub	sp, #56	@ 0x38
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a31      	ldr	r2, [pc, #196]	@ (8001528 <HAL_I2S_MspInit+0xf0>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d15a      	bne.n	800151e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001468:	2301      	movs	r3, #1
 800146a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800146c:	23c0      	movs	r3, #192	@ 0xc0
 800146e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001470:	2302      	movs	r3, #2
 8001472:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	4618      	mov	r0, r3
 800147a:	f004 ff47 	bl	800630c <HAL_RCCEx_PeriphCLKConfig>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001484:	f000 fa0e 	bl	80018a4 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001488:	2300      	movs	r3, #0
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	4b27      	ldr	r3, [pc, #156]	@ (800152c <HAL_I2S_MspInit+0xf4>)
 800148e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001490:	4a26      	ldr	r2, [pc, #152]	@ (800152c <HAL_I2S_MspInit+0xf4>)
 8001492:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001496:	6413      	str	r3, [r2, #64]	@ 0x40
 8001498:	4b24      	ldr	r3, [pc, #144]	@ (800152c <HAL_I2S_MspInit+0xf4>)
 800149a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	4b20      	ldr	r3, [pc, #128]	@ (800152c <HAL_I2S_MspInit+0xf4>)
 80014aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ac:	4a1f      	ldr	r2, [pc, #124]	@ (800152c <HAL_I2S_MspInit+0xf4>)
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b4:	4b1d      	ldr	r3, [pc, #116]	@ (800152c <HAL_I2S_MspInit+0xf4>)
 80014b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c0:	2300      	movs	r3, #0
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	4b19      	ldr	r3, [pc, #100]	@ (800152c <HAL_I2S_MspInit+0xf4>)
 80014c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c8:	4a18      	ldr	r2, [pc, #96]	@ (800152c <HAL_I2S_MspInit+0xf4>)
 80014ca:	f043 0304 	orr.w	r3, r3, #4
 80014ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d0:	4b16      	ldr	r3, [pc, #88]	@ (800152c <HAL_I2S_MspInit+0xf4>)
 80014d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80014dc:	2310      	movs	r3, #16
 80014de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e0:	2302      	movs	r3, #2
 80014e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e8:	2300      	movs	r3, #0
 80014ea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014ec:	2306      	movs	r3, #6
 80014ee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80014f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014f4:	4619      	mov	r1, r3
 80014f6:	480e      	ldr	r0, [pc, #56]	@ (8001530 <HAL_I2S_MspInit+0xf8>)
 80014f8:	f000 fde0 	bl	80020bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80014fc:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001500:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	2302      	movs	r3, #2
 8001504:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150a:	2300      	movs	r3, #0
 800150c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800150e:	2306      	movs	r3, #6
 8001510:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001512:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001516:	4619      	mov	r1, r3
 8001518:	4806      	ldr	r0, [pc, #24]	@ (8001534 <HAL_I2S_MspInit+0xfc>)
 800151a:	f000 fdcf 	bl	80020bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800151e:	bf00      	nop
 8001520:	3738      	adds	r7, #56	@ 0x38
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40003c00 	.word	0x40003c00
 800152c:	40023800 	.word	0x40023800
 8001530:	40020000 	.word	0x40020000
 8001534:	40020800 	.word	0x40020800

08001538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800153c:	f000 fc16 	bl	8001d6c <HAL_Init>

  /* USER CODE BEGIN Init */
  last_systick = HAL_GetTick();
 8001540:	f000 fc7a 	bl	8001e38 <HAL_GetTick>
 8001544:	4603      	mov	r3, r0
 8001546:	4a11      	ldr	r2, [pc, #68]	@ (800158c <main+0x54>)
 8001548:	6013      	str	r3, [r2, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800154a:	f000 f827 	bl	800159c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800154e:	f7ff fdd1 	bl	80010f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001552:	f7ff fecd 	bl	80012f0 <MX_I2C1_Init>
  MX_I2S3_Init();
 8001556:	f7ff ff41 	bl	80013dc <MX_I2S3_Init>
  MX_SPI1_Init();
 800155a:	f000 f9a9 	bl	80018b0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800155e:	f008 ff03 	bl	800a368 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 8001562:	f000 fb67 	bl	8001c34 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001566:	480a      	ldr	r0, [pc, #40]	@ (8001590 <main+0x58>)
 8001568:	f005 f8ea 	bl	8006740 <HAL_TIM_Base_Start_IT>
  configAudio();
 800156c:	f7ff fcd2 	bl	8000f14 <configAudio>
  last_systick = HAL_GetTick(); //traje 5 milisekundi
 8001570:	f000 fc62 	bl	8001e38 <HAL_GetTick>
 8001574:	4603      	mov	r3, r0
 8001576:	4a05      	ldr	r2, [pc, #20]	@ (800158c <main+0x54>)
 8001578:	6013      	str	r3, [r2, #0]
//  generate_fake_signal(&fake_signal, BUFFER_SIZE); //traje 1 milisekundu
//  last_systick = HAL_GetTick();

  HAL_I2S_Transmit_IT(&hi2s3, fake_signal, BUFFER_SIZE);
 800157a:	222c      	movs	r2, #44	@ 0x2c
 800157c:	4905      	ldr	r1, [pc, #20]	@ (8001594 <main+0x5c>)
 800157e:	4806      	ldr	r0, [pc, #24]	@ (8001598 <main+0x60>)
 8001580:	f003 fe7e 	bl	8005280 <HAL_I2S_Transmit_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001584:	f008 ff16 	bl	800a3b4 <MX_USB_HOST_Process>
 8001588:	e7fc      	b.n	8001584 <main+0x4c>
 800158a:	bf00      	nop
 800158c:	2000019c 	.word	0x2000019c
 8001590:	200002ac 	.word	0x200002ac
 8001594:	20000140 	.word	0x20000140
 8001598:	200000f8 	.word	0x200000f8

0800159c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b094      	sub	sp, #80	@ 0x50
 80015a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015a2:	f107 0320 	add.w	r3, r7, #32
 80015a6:	2230      	movs	r2, #48	@ 0x30
 80015a8:	2100      	movs	r1, #0
 80015aa:	4618      	mov	r0, r3
 80015ac:	f009 fbe7 	bl	800ad7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b0:	f107 030c 	add.w	r3, r7, #12
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015c0:	2300      	movs	r3, #0
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	4b28      	ldr	r3, [pc, #160]	@ (8001668 <SystemClock_Config+0xcc>)
 80015c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c8:	4a27      	ldr	r2, [pc, #156]	@ (8001668 <SystemClock_Config+0xcc>)
 80015ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80015d0:	4b25      	ldr	r3, [pc, #148]	@ (8001668 <SystemClock_Config+0xcc>)
 80015d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015d8:	60bb      	str	r3, [r7, #8]
 80015da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015dc:	2300      	movs	r3, #0
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	4b22      	ldr	r3, [pc, #136]	@ (800166c <SystemClock_Config+0xd0>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a21      	ldr	r2, [pc, #132]	@ (800166c <SystemClock_Config+0xd0>)
 80015e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015ea:	6013      	str	r3, [r2, #0]
 80015ec:	4b1f      	ldr	r3, [pc, #124]	@ (800166c <SystemClock_Config+0xd0>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015f4:	607b      	str	r3, [r7, #4]
 80015f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015f8:	2301      	movs	r3, #1
 80015fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001600:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001602:	2302      	movs	r3, #2
 8001604:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001606:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800160a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800160c:	2304      	movs	r3, #4
 800160e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001610:	23a8      	movs	r3, #168	@ 0xa8
 8001612:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001614:	2302      	movs	r3, #2
 8001616:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001618:	2307      	movs	r3, #7
 800161a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800161c:	f107 0320 	add.w	r3, r7, #32
 8001620:	4618      	mov	r0, r3
 8001622:	f004 f9ef 	bl	8005a04 <HAL_RCC_OscConfig>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800162c:	f000 f93a 	bl	80018a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001630:	230f      	movs	r3, #15
 8001632:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001634:	2302      	movs	r3, #2
 8001636:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800163c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001640:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001642:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001646:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001648:	f107 030c 	add.w	r3, r7, #12
 800164c:	2105      	movs	r1, #5
 800164e:	4618      	mov	r0, r3
 8001650:	f004 fc50 	bl	8005ef4 <HAL_RCC_ClockConfig>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800165a:	f000 f923 	bl	80018a4 <Error_Handler>
  }
}
 800165e:	bf00      	nop
 8001660:	3750      	adds	r7, #80	@ 0x50
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40023800 	.word	0x40023800
 800166c:	40007000 	.word	0x40007000

08001670 <generate_fake_signal>:

/* USER CODE BEGIN 4 */
void generate_fake_signal(uint16_t *buffer, int size) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < size; i++) {
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	e061      	b.n	8001744 <generate_fake_signal+0xd4>
        float sine_wave = sin(2 * M_PI * SIGNAL_FREQ * i / SAMPLE_FREQ);
 8001680:	6978      	ldr	r0, [r7, #20]
 8001682:	f7fe ff47 	bl	8000514 <__aeabi_i2d>
 8001686:	a33b      	add	r3, pc, #236	@ (adr r3, 8001774 <generate_fake_signal+0x104>)
 8001688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168c:	f7fe ffac 	bl	80005e8 <__aeabi_dmul>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4610      	mov	r0, r2
 8001696:	4619      	mov	r1, r3
 8001698:	a338      	add	r3, pc, #224	@ (adr r3, 800177c <generate_fake_signal+0x10c>)
 800169a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169e:	f7ff f8cd 	bl	800083c <__aeabi_ddiv>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	ec43 2b17 	vmov	d7, r2, r3
 80016aa:	eeb0 0a47 	vmov.f32	s0, s14
 80016ae:	eef0 0a67 	vmov.f32	s1, s15
 80016b2:	f00a f949 	bl	800b948 <sin>
 80016b6:	ec53 2b10 	vmov	r2, r3, d0
 80016ba:	4610      	mov	r0, r2
 80016bc:	4619      	mov	r1, r3
 80016be:	f7ff fa55 	bl	8000b6c <__aeabi_d2f>
 80016c2:	4603      	mov	r3, r0
 80016c4:	613b      	str	r3, [r7, #16]
        float noise = ((float)rand() / RAND_MAX) * 0.1 - 0.05; // Šum [-0.05, 0.05]
 80016c6:	f009 fa17 	bl	800aaf8 <rand>
 80016ca:	ee07 0a90 	vmov	s15, r0
 80016ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016d2:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001768 <generate_fake_signal+0xf8>
 80016d6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80016da:	ee16 0a90 	vmov	r0, s13
 80016de:	f7fe ff2b 	bl	8000538 <__aeabi_f2d>
 80016e2:	a31d      	add	r3, pc, #116	@ (adr r3, 8001758 <generate_fake_signal+0xe8>)
 80016e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e8:	f7fe ff7e 	bl	80005e8 <__aeabi_dmul>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4610      	mov	r0, r2
 80016f2:	4619      	mov	r1, r3
 80016f4:	a31a      	add	r3, pc, #104	@ (adr r3, 8001760 <generate_fake_signal+0xf0>)
 80016f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fa:	f7fe fdbd 	bl	8000278 <__aeabi_dsub>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	4610      	mov	r0, r2
 8001704:	4619      	mov	r1, r3
 8001706:	f7ff fa31 	bl	8000b6c <__aeabi_d2f>
 800170a:	4603      	mov	r3, r0
 800170c:	60fb      	str	r3, [r7, #12]
        buffer[i] = (uint16_t)((sine_wave + noise) * 32767 + 32768); // Prebaci u unsigned 16-bitni format
 800170e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001712:	edd7 7a03 	vldr	s15, [r7, #12]
 8001716:	ee77 7a27 	vadd.f32	s15, s14, s15
 800171a:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800176c <generate_fake_signal+0xfc>
 800171e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001722:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001770 <generate_fake_signal+0x100>
 8001726:	ee77 7a87 	vadd.f32	s15, s15, s14
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001736:	ee17 2a90 	vmov	r2, s15
 800173a:	b292      	uxth	r2, r2
 800173c:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	3301      	adds	r3, #1
 8001742:	617b      	str	r3, [r7, #20]
 8001744:	697a      	ldr	r2, [r7, #20]
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	429a      	cmp	r2, r3
 800174a:	db99      	blt.n	8001680 <generate_fake_signal+0x10>
    }

}
 800174c:	bf00      	nop
 800174e:	bf00      	nop
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	9999999a 	.word	0x9999999a
 800175c:	3fb99999 	.word	0x3fb99999
 8001760:	9999999a 	.word	0x9999999a
 8001764:	3fa99999 	.word	0x3fa99999
 8001768:	4f000000 	.word	0x4f000000
 800176c:	46fffe00 	.word	0x46fffe00
 8001770:	47000000 	.word	0x47000000
 8001774:	fc6a96c1 	.word	0xfc6a96c1
 8001778:	40a59933 	.word	0x40a59933
 800177c:	00000000 	.word	0x00000000
 8001780:	40e57c00 	.word	0x40e57c00

08001784 <echo_effect>:
void echo_effect(uint16_t *buffer, int size, float echo_strength, int delay) {
 8001784:	b480      	push	{r7}
 8001786:	b087      	sub	sp, #28
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001792:	603a      	str	r2, [r7, #0]
    static uint16_t echo_buffer[BUFFER_SIZE * 2] = {0}; // Povećan buffer za "delay"
    for (int i = 0; i < size; i++) {
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	e02f      	b.n	80017fa <echo_effect+0x76>
        int delayed_index = i - delay;
 800179a:	697a      	ldr	r2, [r7, #20]
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	613b      	str	r3, [r7, #16]
        if (delayed_index >= 0) {
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	db1c      	blt.n	80017e2 <echo_effect+0x5e>
            buffer[i] += (uint16_t)(echo_strength * echo_buffer[delayed_index]);
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	4413      	add	r3, r2
 80017b0:	8819      	ldrh	r1, [r3, #0]
 80017b2:	4a17      	ldr	r2, [pc, #92]	@ (8001810 <echo_effect+0x8c>)
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017ba:	ee07 3a90 	vmov	s15, r3
 80017be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80017c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017ce:	ee17 3a90 	vmov	r3, s15
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	68f8      	ldr	r0, [r7, #12]
 80017da:	4403      	add	r3, r0
 80017dc:	440a      	add	r2, r1
 80017de:	b292      	uxth	r2, r2
 80017e0:	801a      	strh	r2, [r3, #0]
        }
        echo_buffer[i] = buffer[i];
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	4413      	add	r3, r2
 80017ea:	8819      	ldrh	r1, [r3, #0]
 80017ec:	4a08      	ldr	r2, [pc, #32]	@ (8001810 <echo_effect+0x8c>)
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < size; i++) {
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	3301      	adds	r3, #1
 80017f8:	617b      	str	r3, [r7, #20]
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	429a      	cmp	r2, r3
 8001800:	dbcb      	blt.n	800179a <echo_effect+0x16>
    }
}
 8001802:	bf00      	nop
 8001804:	bf00      	nop
 8001806:	371c      	adds	r7, #28
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	200001a0 	.word	0x200001a0

08001814 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001824:	d108      	bne.n	8001838 <HAL_TIM_PeriodElapsedCallback+0x24>
        // Generiraj dummy signal i simuliraj DMA prijenos - sada je generate fake signal napunio

            HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8001826:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800182a:	4805      	ldr	r0, [pc, #20]	@ (8001840 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800182c:	f000 fdfb 	bl	8002426 <HAL_GPIO_TogglePin>
            dma_simulation(fake_signal, BUFFER_SIZE);
 8001830:	212c      	movs	r1, #44	@ 0x2c
 8001832:	4804      	ldr	r0, [pc, #16]	@ (8001844 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001834:	f000 f808 	bl	8001848 <dma_simulation>

    }
}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40020c00 	.word	0x40020c00
 8001844:	20000140 	.word	0x20000140

08001848 <dma_simulation>:

void dma_simulation(uint16_t *buffer, uint16_t size) {
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	807b      	strh	r3, [r7, #2]
    //simuliramo punjenje buffera. interrupt traje točno 1 ms
    generate_fake_signal(fake_signal, BUFFER_SIZE);
 8001854:	212c      	movs	r1, #44	@ 0x2c
 8001856:	4807      	ldr	r0, [pc, #28]	@ (8001874 <dma_simulation+0x2c>)
 8001858:	f7ff ff0a 	bl	8001670 <generate_fake_signal>
	//sada je naš fake buffer pun fake signala pomoću fake funkcije
	echo_effect(buffer, size, 0.5, 10);
 800185c:	887b      	ldrh	r3, [r7, #2]
 800185e:	220a      	movs	r2, #10
 8001860:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8001864:	4619      	mov	r1, r3
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f7ff ff8c 	bl	8001784 <echo_effect>


}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20000140 	.word	0x20000140

08001878 <HAL_I2S_TxCpltCallback>:
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
    if (hi2s->Instance == SPI3) { // Provjeri je li I2S3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a05      	ldr	r2, [pc, #20]	@ (800189c <HAL_I2S_TxCpltCallback+0x24>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d102      	bne.n	8001890 <HAL_I2S_TxCpltCallback+0x18>
    	i2s_gotov = 1; // Ponovno generiraj i pošal
 800188a:	4b05      	ldr	r3, [pc, #20]	@ (80018a0 <HAL_I2S_TxCpltCallback+0x28>)
 800188c:	2201      	movs	r2, #1
 800188e:	601a      	str	r2, [r3, #0]
    }
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	40003c00 	.word	0x40003c00
 80018a0:	20000198 	.word	0x20000198

080018a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018a8:	b672      	cpsid	i
}
 80018aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018ac:	bf00      	nop
 80018ae:	e7fd      	b.n	80018ac <Error_Handler+0x8>

080018b0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80018b4:	4b17      	ldr	r3, [pc, #92]	@ (8001914 <MX_SPI1_Init+0x64>)
 80018b6:	4a18      	ldr	r2, [pc, #96]	@ (8001918 <MX_SPI1_Init+0x68>)
 80018b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018ba:	4b16      	ldr	r3, [pc, #88]	@ (8001914 <MX_SPI1_Init+0x64>)
 80018bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80018c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018c2:	4b14      	ldr	r3, [pc, #80]	@ (8001914 <MX_SPI1_Init+0x64>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018c8:	4b12      	ldr	r3, [pc, #72]	@ (8001914 <MX_SPI1_Init+0x64>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018ce:	4b11      	ldr	r3, [pc, #68]	@ (8001914 <MX_SPI1_Init+0x64>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001914 <MX_SPI1_Init+0x64>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018da:	4b0e      	ldr	r3, [pc, #56]	@ (8001914 <MX_SPI1_Init+0x64>)
 80018dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001914 <MX_SPI1_Init+0x64>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001914 <MX_SPI1_Init+0x64>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018ee:	4b09      	ldr	r3, [pc, #36]	@ (8001914 <MX_SPI1_Init+0x64>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018f4:	4b07      	ldr	r3, [pc, #28]	@ (8001914 <MX_SPI1_Init+0x64>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018fa:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <MX_SPI1_Init+0x64>)
 80018fc:	220a      	movs	r2, #10
 80018fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001900:	4804      	ldr	r0, [pc, #16]	@ (8001914 <MX_SPI1_Init+0x64>)
 8001902:	f004 fe45 	bl	8006590 <HAL_SPI_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800190c:	f7ff ffca 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001910:	bf00      	nop
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20000250 	.word	0x20000250
 8001918:	40013000 	.word	0x40013000

0800191c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08a      	sub	sp, #40	@ 0x28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a19      	ldr	r2, [pc, #100]	@ (80019a0 <HAL_SPI_MspInit+0x84>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d12b      	bne.n	8001996 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	4b18      	ldr	r3, [pc, #96]	@ (80019a4 <HAL_SPI_MspInit+0x88>)
 8001944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001946:	4a17      	ldr	r2, [pc, #92]	@ (80019a4 <HAL_SPI_MspInit+0x88>)
 8001948:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800194c:	6453      	str	r3, [r2, #68]	@ 0x44
 800194e:	4b15      	ldr	r3, [pc, #84]	@ (80019a4 <HAL_SPI_MspInit+0x88>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001952:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	4b11      	ldr	r3, [pc, #68]	@ (80019a4 <HAL_SPI_MspInit+0x88>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001962:	4a10      	ldr	r2, [pc, #64]	@ (80019a4 <HAL_SPI_MspInit+0x88>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	6313      	str	r3, [r2, #48]	@ 0x30
 800196a:	4b0e      	ldr	r3, [pc, #56]	@ (80019a4 <HAL_SPI_MspInit+0x88>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001976:	23e0      	movs	r3, #224	@ 0xe0
 8001978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197a:	2302      	movs	r3, #2
 800197c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001982:	2300      	movs	r3, #0
 8001984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001986:	2305      	movs	r3, #5
 8001988:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198a:	f107 0314 	add.w	r3, r7, #20
 800198e:	4619      	mov	r1, r3
 8001990:	4805      	ldr	r0, [pc, #20]	@ (80019a8 <HAL_SPI_MspInit+0x8c>)
 8001992:	f000 fb93 	bl	80020bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001996:	bf00      	nop
 8001998:	3728      	adds	r7, #40	@ 0x28
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40013000 	.word	0x40013000
 80019a4:	40023800 	.word	0x40023800
 80019a8:	40020000 	.word	0x40020000

080019ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	607b      	str	r3, [r7, #4]
 80019b6:	4b10      	ldr	r3, [pc, #64]	@ (80019f8 <HAL_MspInit+0x4c>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ba:	4a0f      	ldr	r2, [pc, #60]	@ (80019f8 <HAL_MspInit+0x4c>)
 80019bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019c2:	4b0d      	ldr	r3, [pc, #52]	@ (80019f8 <HAL_MspInit+0x4c>)
 80019c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019ca:	607b      	str	r3, [r7, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	603b      	str	r3, [r7, #0]
 80019d2:	4b09      	ldr	r3, [pc, #36]	@ (80019f8 <HAL_MspInit+0x4c>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d6:	4a08      	ldr	r2, [pc, #32]	@ (80019f8 <HAL_MspInit+0x4c>)
 80019d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80019de:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <HAL_MspInit+0x4c>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019e6:	603b      	str	r3, [r7, #0]
 80019e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019ea:	2007      	movs	r0, #7
 80019ec:	f000 fb24 	bl	8002038 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019f0:	bf00      	nop
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40023800 	.word	0x40023800

080019fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a00:	bf00      	nop
 8001a02:	e7fd      	b.n	8001a00 <NMI_Handler+0x4>

08001a04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a08:	bf00      	nop
 8001a0a:	e7fd      	b.n	8001a08 <HardFault_Handler+0x4>

08001a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a10:	bf00      	nop
 8001a12:	e7fd      	b.n	8001a10 <MemManage_Handler+0x4>

08001a14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a18:	bf00      	nop
 8001a1a:	e7fd      	b.n	8001a18 <BusFault_Handler+0x4>

08001a1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a20:	bf00      	nop
 8001a22:	e7fd      	b.n	8001a20 <UsageFault_Handler+0x4>

08001a24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a52:	f000 f9dd 	bl	8001e10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
	...

08001a5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a60:	4802      	ldr	r0, [pc, #8]	@ (8001a6c <TIM2_IRQHandler+0x10>)
 8001a62:	f004 fedd 	bl	8006820 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	200002ac 	.word	0x200002ac

08001a70 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001a74:	4802      	ldr	r0, [pc, #8]	@ (8001a80 <OTG_FS_IRQHandler+0x10>)
 8001a76:	f000 ffd1 	bl	8002a1c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	200006d4 	.word	0x200006d4

08001a84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return 1;
 8001a88:	2301      	movs	r3, #1
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <_kill>:

int _kill(int pid, int sig)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a9e:	f009 f9cd 	bl	800ae3c <__errno>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2216      	movs	r2, #22
 8001aa6:	601a      	str	r2, [r3, #0]
  return -1;
 8001aa8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <_exit>:

void _exit (int status)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001abc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f7ff ffe7 	bl	8001a94 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ac6:	bf00      	nop
 8001ac8:	e7fd      	b.n	8001ac6 <_exit+0x12>

08001aca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b086      	sub	sp, #24
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	60f8      	str	r0, [r7, #12]
 8001ad2:	60b9      	str	r1, [r7, #8]
 8001ad4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
 8001ada:	e00a      	b.n	8001af2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001adc:	f3af 8000 	nop.w
 8001ae0:	4601      	mov	r1, r0
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	1c5a      	adds	r2, r3, #1
 8001ae6:	60ba      	str	r2, [r7, #8]
 8001ae8:	b2ca      	uxtb	r2, r1
 8001aea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	3301      	adds	r3, #1
 8001af0:	617b      	str	r3, [r7, #20]
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	dbf0      	blt.n	8001adc <_read+0x12>
  }

  return len;
 8001afa:	687b      	ldr	r3, [r7, #4]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3718      	adds	r7, #24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	e009      	b.n	8001b2a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	1c5a      	adds	r2, r3, #1
 8001b1a:	60ba      	str	r2, [r7, #8]
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	3301      	adds	r3, #1
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	dbf1      	blt.n	8001b16 <_write+0x12>
  }
  return len;
 8001b32:	687b      	ldr	r3, [r7, #4]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3718      	adds	r7, #24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <_close>:

int _close(int file)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b64:	605a      	str	r2, [r3, #4]
  return 0;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <_isatty>:

int _isatty(int file)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b7c:	2301      	movs	r3, #1
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b085      	sub	sp, #20
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	60f8      	str	r0, [r7, #12]
 8001b92:	60b9      	str	r1, [r7, #8]
 8001b94:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bac:	4a14      	ldr	r2, [pc, #80]	@ (8001c00 <_sbrk+0x5c>)
 8001bae:	4b15      	ldr	r3, [pc, #84]	@ (8001c04 <_sbrk+0x60>)
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bb8:	4b13      	ldr	r3, [pc, #76]	@ (8001c08 <_sbrk+0x64>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d102      	bne.n	8001bc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bc0:	4b11      	ldr	r3, [pc, #68]	@ (8001c08 <_sbrk+0x64>)
 8001bc2:	4a12      	ldr	r2, [pc, #72]	@ (8001c0c <_sbrk+0x68>)
 8001bc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bc6:	4b10      	ldr	r3, [pc, #64]	@ (8001c08 <_sbrk+0x64>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4413      	add	r3, r2
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d207      	bcs.n	8001be4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bd4:	f009 f932 	bl	800ae3c <__errno>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	220c      	movs	r2, #12
 8001bdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bde:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001be2:	e009      	b.n	8001bf8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001be4:	4b08      	ldr	r3, [pc, #32]	@ (8001c08 <_sbrk+0x64>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bea:	4b07      	ldr	r3, [pc, #28]	@ (8001c08 <_sbrk+0x64>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	4a05      	ldr	r2, [pc, #20]	@ (8001c08 <_sbrk+0x64>)
 8001bf4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3718      	adds	r7, #24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20020000 	.word	0x20020000
 8001c04:	00000400 	.word	0x00000400
 8001c08:	200002a8 	.word	0x200002a8
 8001c0c:	20000c00 	.word	0x20000c00

08001c10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c14:	4b06      	ldr	r3, [pc, #24]	@ (8001c30 <SystemInit+0x20>)
 8001c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c1a:	4a05      	ldr	r2, [pc, #20]	@ (8001c30 <SystemInit+0x20>)
 8001c1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c3a:	f107 0308 	add.w	r3, r7, #8
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	605a      	str	r2, [r3, #4]
 8001c44:	609a      	str	r2, [r3, #8]
 8001c46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c48:	463b      	mov	r3, r7
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c50:	4b1d      	ldr	r3, [pc, #116]	@ (8001cc8 <MX_TIM2_Init+0x94>)
 8001c52:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c56:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42;
 8001c58:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc8 <MX_TIM2_Init+0x94>)
 8001c5a:	222a      	movs	r2, #42	@ 0x2a
 8001c5c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c5e:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc8 <MX_TIM2_Init+0x94>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001c64:	4b18      	ldr	r3, [pc, #96]	@ (8001cc8 <MX_TIM2_Init+0x94>)
 8001c66:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c6a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c6c:	4b16      	ldr	r3, [pc, #88]	@ (8001cc8 <MX_TIM2_Init+0x94>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c72:	4b15      	ldr	r3, [pc, #84]	@ (8001cc8 <MX_TIM2_Init+0x94>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c78:	4813      	ldr	r0, [pc, #76]	@ (8001cc8 <MX_TIM2_Init+0x94>)
 8001c7a:	f004 fd12 	bl	80066a2 <HAL_TIM_Base_Init>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001c84:	f7ff fe0e 	bl	80018a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c8e:	f107 0308 	add.w	r3, r7, #8
 8001c92:	4619      	mov	r1, r3
 8001c94:	480c      	ldr	r0, [pc, #48]	@ (8001cc8 <MX_TIM2_Init+0x94>)
 8001c96:	f004 feb3 	bl	8006a00 <HAL_TIM_ConfigClockSource>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001ca0:	f7ff fe00 	bl	80018a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cac:	463b      	mov	r3, r7
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4805      	ldr	r0, [pc, #20]	@ (8001cc8 <MX_TIM2_Init+0x94>)
 8001cb2:	f005 f8db 	bl	8006e6c <HAL_TIMEx_MasterConfigSynchronization>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001cbc:	f7ff fdf2 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001cc0:	bf00      	nop
 8001cc2:	3718      	adds	r7, #24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	200002ac 	.word	0x200002ac

08001ccc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cdc:	d115      	bne.n	8001d0a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8001d14 <HAL_TIM_Base_MspInit+0x48>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce6:	4a0b      	ldr	r2, [pc, #44]	@ (8001d14 <HAL_TIM_Base_MspInit+0x48>)
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cee:	4b09      	ldr	r3, [pc, #36]	@ (8001d14 <HAL_TIM_Base_MspInit+0x48>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	201c      	movs	r0, #28
 8001d00:	f000 f9a5 	bl	800204e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d04:	201c      	movs	r0, #28
 8001d06:	f000 f9be 	bl	8002086 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001d0a:	bf00      	nop
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40023800 	.word	0x40023800

08001d18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d50 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d1c:	f7ff ff78 	bl	8001c10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d20:	480c      	ldr	r0, [pc, #48]	@ (8001d54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d22:	490d      	ldr	r1, [pc, #52]	@ (8001d58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d24:	4a0d      	ldr	r2, [pc, #52]	@ (8001d5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d28:	e002      	b.n	8001d30 <LoopCopyDataInit>

08001d2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d2e:	3304      	adds	r3, #4

08001d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d34:	d3f9      	bcc.n	8001d2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d36:	4a0a      	ldr	r2, [pc, #40]	@ (8001d60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d38:	4c0a      	ldr	r4, [pc, #40]	@ (8001d64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d3c:	e001      	b.n	8001d42 <LoopFillZerobss>

08001d3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d40:	3204      	adds	r2, #4

08001d42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d44:	d3fb      	bcc.n	8001d3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d46:	f009 f87f 	bl	800ae48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d4a:	f7ff fbf5 	bl	8001538 <main>
  bx  lr    
 8001d4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d58:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001d5c:	0800cca8 	.word	0x0800cca8
  ldr r2, =_sbss
 8001d60:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001d64:	20000c00 	.word	0x20000c00

08001d68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d68:	e7fe      	b.n	8001d68 <ADC_IRQHandler>
	...

08001d6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d70:	4b0e      	ldr	r3, [pc, #56]	@ (8001dac <HAL_Init+0x40>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a0d      	ldr	r2, [pc, #52]	@ (8001dac <HAL_Init+0x40>)
 8001d76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001dac <HAL_Init+0x40>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a0a      	ldr	r2, [pc, #40]	@ (8001dac <HAL_Init+0x40>)
 8001d82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d88:	4b08      	ldr	r3, [pc, #32]	@ (8001dac <HAL_Init+0x40>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a07      	ldr	r2, [pc, #28]	@ (8001dac <HAL_Init+0x40>)
 8001d8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d94:	2003      	movs	r0, #3
 8001d96:	f000 f94f 	bl	8002038 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d9a:	2000      	movs	r0, #0
 8001d9c:	f000 f808 	bl	8001db0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001da0:	f7ff fe04 	bl	80019ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40023c00 	.word	0x40023c00

08001db0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001db8:	4b12      	ldr	r3, [pc, #72]	@ (8001e04 <HAL_InitTick+0x54>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4b12      	ldr	r3, [pc, #72]	@ (8001e08 <HAL_InitTick+0x58>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 f967 	bl	80020a2 <HAL_SYSTICK_Config>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e00e      	b.n	8001dfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b0f      	cmp	r3, #15
 8001de2:	d80a      	bhi.n	8001dfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001de4:	2200      	movs	r2, #0
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001dec:	f000 f92f 	bl	800204e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001df0:	4a06      	ldr	r2, [pc, #24]	@ (8001e0c <HAL_InitTick+0x5c>)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
 8001df8:	e000      	b.n	8001dfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20000000 	.word	0x20000000
 8001e08:	20000008 	.word	0x20000008
 8001e0c:	20000004 	.word	0x20000004

08001e10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e14:	4b06      	ldr	r3, [pc, #24]	@ (8001e30 <HAL_IncTick+0x20>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4b06      	ldr	r3, [pc, #24]	@ (8001e34 <HAL_IncTick+0x24>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4413      	add	r3, r2
 8001e20:	4a04      	ldr	r2, [pc, #16]	@ (8001e34 <HAL_IncTick+0x24>)
 8001e22:	6013      	str	r3, [r2, #0]
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	20000008 	.word	0x20000008
 8001e34:	200002f4 	.word	0x200002f4

08001e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e3c:	4b03      	ldr	r3, [pc, #12]	@ (8001e4c <HAL_GetTick+0x14>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	200002f4 	.word	0x200002f4

08001e50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e58:	f7ff ffee 	bl	8001e38 <HAL_GetTick>
 8001e5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e68:	d005      	beq.n	8001e76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e94 <HAL_Delay+0x44>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4413      	add	r3, r2
 8001e74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e76:	bf00      	nop
 8001e78:	f7ff ffde 	bl	8001e38 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d8f7      	bhi.n	8001e78 <HAL_Delay+0x28>
  {
  }
}
 8001e88:	bf00      	nop
 8001e8a:	bf00      	nop
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000008 	.word	0x20000008

08001e98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8001edc <__NVIC_SetPriorityGrouping+0x44>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eae:	68ba      	ldr	r2, [r7, #8]
 8001eb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ec0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ec4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ec8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eca:	4a04      	ldr	r2, [pc, #16]	@ (8001edc <__NVIC_SetPriorityGrouping+0x44>)
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	60d3      	str	r3, [r2, #12]
}
 8001ed0:	bf00      	nop
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	e000ed00 	.word	0xe000ed00

08001ee0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee4:	4b04      	ldr	r3, [pc, #16]	@ (8001ef8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	0a1b      	lsrs	r3, r3, #8
 8001eea:	f003 0307 	and.w	r3, r3, #7
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	db0b      	blt.n	8001f26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f0e:	79fb      	ldrb	r3, [r7, #7]
 8001f10:	f003 021f 	and.w	r2, r3, #31
 8001f14:	4907      	ldr	r1, [pc, #28]	@ (8001f34 <__NVIC_EnableIRQ+0x38>)
 8001f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1a:	095b      	lsrs	r3, r3, #5
 8001f1c:	2001      	movs	r0, #1
 8001f1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	e000e100 	.word	0xe000e100

08001f38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	6039      	str	r1, [r7, #0]
 8001f42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	db0a      	blt.n	8001f62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	490c      	ldr	r1, [pc, #48]	@ (8001f84 <__NVIC_SetPriority+0x4c>)
 8001f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f56:	0112      	lsls	r2, r2, #4
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	440b      	add	r3, r1
 8001f5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f60:	e00a      	b.n	8001f78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	4908      	ldr	r1, [pc, #32]	@ (8001f88 <__NVIC_SetPriority+0x50>)
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	f003 030f 	and.w	r3, r3, #15
 8001f6e:	3b04      	subs	r3, #4
 8001f70:	0112      	lsls	r2, r2, #4
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	440b      	add	r3, r1
 8001f76:	761a      	strb	r2, [r3, #24]
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	e000e100 	.word	0xe000e100
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b089      	sub	sp, #36	@ 0x24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	f1c3 0307 	rsb	r3, r3, #7
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	bf28      	it	cs
 8001faa:	2304      	movcs	r3, #4
 8001fac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	2b06      	cmp	r3, #6
 8001fb4:	d902      	bls.n	8001fbc <NVIC_EncodePriority+0x30>
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	3b03      	subs	r3, #3
 8001fba:	e000      	b.n	8001fbe <NVIC_EncodePriority+0x32>
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43da      	mvns	r2, r3
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	401a      	ands	r2, r3
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fd4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	fa01 f303 	lsl.w	r3, r1, r3
 8001fde:	43d9      	mvns	r1, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe4:	4313      	orrs	r3, r2
         );
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3724      	adds	r7, #36	@ 0x24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
	...

08001ff4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3b01      	subs	r3, #1
 8002000:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002004:	d301      	bcc.n	800200a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002006:	2301      	movs	r3, #1
 8002008:	e00f      	b.n	800202a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800200a:	4a0a      	ldr	r2, [pc, #40]	@ (8002034 <SysTick_Config+0x40>)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3b01      	subs	r3, #1
 8002010:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002012:	210f      	movs	r1, #15
 8002014:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002018:	f7ff ff8e 	bl	8001f38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800201c:	4b05      	ldr	r3, [pc, #20]	@ (8002034 <SysTick_Config+0x40>)
 800201e:	2200      	movs	r2, #0
 8002020:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002022:	4b04      	ldr	r3, [pc, #16]	@ (8002034 <SysTick_Config+0x40>)
 8002024:	2207      	movs	r2, #7
 8002026:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	e000e010 	.word	0xe000e010

08002038 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f7ff ff29 	bl	8001e98 <__NVIC_SetPriorityGrouping>
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800204e:	b580      	push	{r7, lr}
 8002050:	b086      	sub	sp, #24
 8002052:	af00      	add	r7, sp, #0
 8002054:	4603      	mov	r3, r0
 8002056:	60b9      	str	r1, [r7, #8]
 8002058:	607a      	str	r2, [r7, #4]
 800205a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002060:	f7ff ff3e 	bl	8001ee0 <__NVIC_GetPriorityGrouping>
 8002064:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	68b9      	ldr	r1, [r7, #8]
 800206a:	6978      	ldr	r0, [r7, #20]
 800206c:	f7ff ff8e 	bl	8001f8c <NVIC_EncodePriority>
 8002070:	4602      	mov	r2, r0
 8002072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002076:	4611      	mov	r1, r2
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff ff5d 	bl	8001f38 <__NVIC_SetPriority>
}
 800207e:	bf00      	nop
 8002080:	3718      	adds	r7, #24
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b082      	sub	sp, #8
 800208a:	af00      	add	r7, sp, #0
 800208c:	4603      	mov	r3, r0
 800208e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff ff31 	bl	8001efc <__NVIC_EnableIRQ>
}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b082      	sub	sp, #8
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7ff ffa2 	bl	8001ff4 <SysTick_Config>
 80020b0:	4603      	mov	r3, r0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
	...

080020bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020bc:	b480      	push	{r7}
 80020be:	b089      	sub	sp, #36	@ 0x24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020d2:	2300      	movs	r3, #0
 80020d4:	61fb      	str	r3, [r7, #28]
 80020d6:	e16b      	b.n	80023b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020d8:	2201      	movs	r2, #1
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	4013      	ands	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	f040 815a 	bne.w	80023aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f003 0303 	and.w	r3, r3, #3
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d005      	beq.n	800210e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800210a:	2b02      	cmp	r3, #2
 800210c:	d130      	bne.n	8002170 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	2203      	movs	r2, #3
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	43db      	mvns	r3, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4013      	ands	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	68da      	ldr	r2, [r3, #12]
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4313      	orrs	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002144:	2201      	movs	r2, #1
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43db      	mvns	r3, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4013      	ands	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	091b      	lsrs	r3, r3, #4
 800215a:	f003 0201 	and.w	r2, r3, #1
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4313      	orrs	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 0303 	and.w	r3, r3, #3
 8002178:	2b03      	cmp	r3, #3
 800217a:	d017      	beq.n	80021ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	2203      	movs	r2, #3
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 0303 	and.w	r3, r3, #3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d123      	bne.n	8002200 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	08da      	lsrs	r2, r3, #3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3208      	adds	r2, #8
 80021c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	220f      	movs	r2, #15
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4013      	ands	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	691a      	ldr	r2, [r3, #16]
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	08da      	lsrs	r2, r3, #3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	3208      	adds	r2, #8
 80021fa:	69b9      	ldr	r1, [r7, #24]
 80021fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	2203      	movs	r2, #3
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	43db      	mvns	r3, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4013      	ands	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 0203 	and.w	r2, r3, #3
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4313      	orrs	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 80b4 	beq.w	80023aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	4b60      	ldr	r3, [pc, #384]	@ (80023c8 <HAL_GPIO_Init+0x30c>)
 8002248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224a:	4a5f      	ldr	r2, [pc, #380]	@ (80023c8 <HAL_GPIO_Init+0x30c>)
 800224c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002250:	6453      	str	r3, [r2, #68]	@ 0x44
 8002252:	4b5d      	ldr	r3, [pc, #372]	@ (80023c8 <HAL_GPIO_Init+0x30c>)
 8002254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002256:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800225e:	4a5b      	ldr	r2, [pc, #364]	@ (80023cc <HAL_GPIO_Init+0x310>)
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	089b      	lsrs	r3, r3, #2
 8002264:	3302      	adds	r3, #2
 8002266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800226a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	220f      	movs	r2, #15
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43db      	mvns	r3, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4013      	ands	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a52      	ldr	r2, [pc, #328]	@ (80023d0 <HAL_GPIO_Init+0x314>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d02b      	beq.n	80022e2 <HAL_GPIO_Init+0x226>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a51      	ldr	r2, [pc, #324]	@ (80023d4 <HAL_GPIO_Init+0x318>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d025      	beq.n	80022de <HAL_GPIO_Init+0x222>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a50      	ldr	r2, [pc, #320]	@ (80023d8 <HAL_GPIO_Init+0x31c>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d01f      	beq.n	80022da <HAL_GPIO_Init+0x21e>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a4f      	ldr	r2, [pc, #316]	@ (80023dc <HAL_GPIO_Init+0x320>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d019      	beq.n	80022d6 <HAL_GPIO_Init+0x21a>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a4e      	ldr	r2, [pc, #312]	@ (80023e0 <HAL_GPIO_Init+0x324>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d013      	beq.n	80022d2 <HAL_GPIO_Init+0x216>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a4d      	ldr	r2, [pc, #308]	@ (80023e4 <HAL_GPIO_Init+0x328>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d00d      	beq.n	80022ce <HAL_GPIO_Init+0x212>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a4c      	ldr	r2, [pc, #304]	@ (80023e8 <HAL_GPIO_Init+0x32c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d007      	beq.n	80022ca <HAL_GPIO_Init+0x20e>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a4b      	ldr	r2, [pc, #300]	@ (80023ec <HAL_GPIO_Init+0x330>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d101      	bne.n	80022c6 <HAL_GPIO_Init+0x20a>
 80022c2:	2307      	movs	r3, #7
 80022c4:	e00e      	b.n	80022e4 <HAL_GPIO_Init+0x228>
 80022c6:	2308      	movs	r3, #8
 80022c8:	e00c      	b.n	80022e4 <HAL_GPIO_Init+0x228>
 80022ca:	2306      	movs	r3, #6
 80022cc:	e00a      	b.n	80022e4 <HAL_GPIO_Init+0x228>
 80022ce:	2305      	movs	r3, #5
 80022d0:	e008      	b.n	80022e4 <HAL_GPIO_Init+0x228>
 80022d2:	2304      	movs	r3, #4
 80022d4:	e006      	b.n	80022e4 <HAL_GPIO_Init+0x228>
 80022d6:	2303      	movs	r3, #3
 80022d8:	e004      	b.n	80022e4 <HAL_GPIO_Init+0x228>
 80022da:	2302      	movs	r3, #2
 80022dc:	e002      	b.n	80022e4 <HAL_GPIO_Init+0x228>
 80022de:	2301      	movs	r3, #1
 80022e0:	e000      	b.n	80022e4 <HAL_GPIO_Init+0x228>
 80022e2:	2300      	movs	r3, #0
 80022e4:	69fa      	ldr	r2, [r7, #28]
 80022e6:	f002 0203 	and.w	r2, r2, #3
 80022ea:	0092      	lsls	r2, r2, #2
 80022ec:	4093      	lsls	r3, r2
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022f4:	4935      	ldr	r1, [pc, #212]	@ (80023cc <HAL_GPIO_Init+0x310>)
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	089b      	lsrs	r3, r3, #2
 80022fa:	3302      	adds	r3, #2
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002302:	4b3b      	ldr	r3, [pc, #236]	@ (80023f0 <HAL_GPIO_Init+0x334>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	43db      	mvns	r3, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4013      	ands	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	4313      	orrs	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002326:	4a32      	ldr	r2, [pc, #200]	@ (80023f0 <HAL_GPIO_Init+0x334>)
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800232c:	4b30      	ldr	r3, [pc, #192]	@ (80023f0 <HAL_GPIO_Init+0x334>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	43db      	mvns	r3, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4013      	ands	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d003      	beq.n	8002350 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	4313      	orrs	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002350:	4a27      	ldr	r2, [pc, #156]	@ (80023f0 <HAL_GPIO_Init+0x334>)
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002356:	4b26      	ldr	r3, [pc, #152]	@ (80023f0 <HAL_GPIO_Init+0x334>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	43db      	mvns	r3, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4013      	ands	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	4313      	orrs	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800237a:	4a1d      	ldr	r2, [pc, #116]	@ (80023f0 <HAL_GPIO_Init+0x334>)
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002380:	4b1b      	ldr	r3, [pc, #108]	@ (80023f0 <HAL_GPIO_Init+0x334>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d003      	beq.n	80023a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023a4:	4a12      	ldr	r2, [pc, #72]	@ (80023f0 <HAL_GPIO_Init+0x334>)
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	3301      	adds	r3, #1
 80023ae:	61fb      	str	r3, [r7, #28]
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	2b0f      	cmp	r3, #15
 80023b4:	f67f ae90 	bls.w	80020d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023b8:	bf00      	nop
 80023ba:	bf00      	nop
 80023bc:	3724      	adds	r7, #36	@ 0x24
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	40023800 	.word	0x40023800
 80023cc:	40013800 	.word	0x40013800
 80023d0:	40020000 	.word	0x40020000
 80023d4:	40020400 	.word	0x40020400
 80023d8:	40020800 	.word	0x40020800
 80023dc:	40020c00 	.word	0x40020c00
 80023e0:	40021000 	.word	0x40021000
 80023e4:	40021400 	.word	0x40021400
 80023e8:	40021800 	.word	0x40021800
 80023ec:	40021c00 	.word	0x40021c00
 80023f0:	40013c00 	.word	0x40013c00

080023f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	460b      	mov	r3, r1
 80023fe:	807b      	strh	r3, [r7, #2]
 8002400:	4613      	mov	r3, r2
 8002402:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002404:	787b      	ldrb	r3, [r7, #1]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800240a:	887a      	ldrh	r2, [r7, #2]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002410:	e003      	b.n	800241a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002412:	887b      	ldrh	r3, [r7, #2]
 8002414:	041a      	lsls	r2, r3, #16
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	619a      	str	r2, [r3, #24]
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002426:	b480      	push	{r7}
 8002428:	b085      	sub	sp, #20
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
 800242e:	460b      	mov	r3, r1
 8002430:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002438:	887a      	ldrh	r2, [r7, #2]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	4013      	ands	r3, r2
 800243e:	041a      	lsls	r2, r3, #16
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	43d9      	mvns	r1, r3
 8002444:	887b      	ldrh	r3, [r7, #2]
 8002446:	400b      	ands	r3, r1
 8002448:	431a      	orrs	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	619a      	str	r2, [r3, #24]
}
 800244e:	bf00      	nop
 8002450:	3714      	adds	r7, #20
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b086      	sub	sp, #24
 800245e:	af02      	add	r7, sp, #8
 8002460:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d101      	bne.n	800246c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e059      	b.n	8002520 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f007 ffcc 	bl	800a424 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2203      	movs	r2, #3
 8002490:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800249a:	d102      	bne.n	80024a2 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f004 fde5 	bl	8007076 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6818      	ldr	r0, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	7c1a      	ldrb	r2, [r3, #16]
 80024b4:	f88d 2000 	strb.w	r2, [sp]
 80024b8:	3304      	adds	r3, #4
 80024ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024bc:	f004 fd66 	bl	8006f8c <USB_CoreInit>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d005      	beq.n	80024d2 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2202      	movs	r2, #2
 80024ca:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e026      	b.n	8002520 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2101      	movs	r1, #1
 80024d8:	4618      	mov	r0, r3
 80024da:	f004 fddd 	bl	8007098 <USB_SetCurrentMode>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d005      	beq.n	80024f0 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2202      	movs	r2, #2
 80024e8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e017      	b.n	8002520 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6818      	ldr	r0, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	7c1a      	ldrb	r2, [r3, #16]
 80024f8:	f88d 2000 	strb.w	r2, [sp]
 80024fc:	3304      	adds	r3, #4
 80024fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002500:	f004 ff80 	bl	8007404 <USB_HostInit>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d005      	beq.n	8002516 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2202      	movs	r2, #2
 800250e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e004      	b.n	8002520 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002528:	b590      	push	{r4, r7, lr}
 800252a:	b08b      	sub	sp, #44	@ 0x2c
 800252c:	af04      	add	r7, sp, #16
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	4608      	mov	r0, r1
 8002532:	4611      	mov	r1, r2
 8002534:	461a      	mov	r2, r3
 8002536:	4603      	mov	r3, r0
 8002538:	70fb      	strb	r3, [r7, #3]
 800253a:	460b      	mov	r3, r1
 800253c:	70bb      	strb	r3, [r7, #2]
 800253e:	4613      	mov	r3, r2
 8002540:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002542:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002544:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800254c:	2b01      	cmp	r3, #1
 800254e:	d101      	bne.n	8002554 <HAL_HCD_HC_Init+0x2c>
 8002550:	2302      	movs	r3, #2
 8002552:	e09d      	b.n	8002690 <HAL_HCD_HC_Init+0x168>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800255c:	78fa      	ldrb	r2, [r7, #3]
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	4613      	mov	r3, r2
 8002562:	011b      	lsls	r3, r3, #4
 8002564:	1a9b      	subs	r3, r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	440b      	add	r3, r1
 800256a:	3319      	adds	r3, #25
 800256c:	2200      	movs	r2, #0
 800256e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002570:	78fa      	ldrb	r2, [r7, #3]
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	4613      	mov	r3, r2
 8002576:	011b      	lsls	r3, r3, #4
 8002578:	1a9b      	subs	r3, r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	3314      	adds	r3, #20
 8002580:	787a      	ldrb	r2, [r7, #1]
 8002582:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002584:	78fa      	ldrb	r2, [r7, #3]
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	4613      	mov	r3, r2
 800258a:	011b      	lsls	r3, r3, #4
 800258c:	1a9b      	subs	r3, r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	3315      	adds	r3, #21
 8002594:	78fa      	ldrb	r2, [r7, #3]
 8002596:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002598:	78fa      	ldrb	r2, [r7, #3]
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	1a9b      	subs	r3, r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	3326      	adds	r3, #38	@ 0x26
 80025a8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80025ac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80025ae:	78fa      	ldrb	r2, [r7, #3]
 80025b0:	78bb      	ldrb	r3, [r7, #2]
 80025b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80025b6:	b2d8      	uxtb	r0, r3
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	011b      	lsls	r3, r3, #4
 80025be:	1a9b      	subs	r3, r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	3316      	adds	r3, #22
 80025c6:	4602      	mov	r2, r0
 80025c8:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80025ca:	78fb      	ldrb	r3, [r7, #3]
 80025cc:	4619      	mov	r1, r3
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 fbc8 	bl	8002d64 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80025d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	da0a      	bge.n	80025f2 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80025dc:	78fa      	ldrb	r2, [r7, #3]
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	4613      	mov	r3, r2
 80025e2:	011b      	lsls	r3, r3, #4
 80025e4:	1a9b      	subs	r3, r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	440b      	add	r3, r1
 80025ea:	3317      	adds	r3, #23
 80025ec:	2201      	movs	r2, #1
 80025ee:	701a      	strb	r2, [r3, #0]
 80025f0:	e009      	b.n	8002606 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80025f2:	78fa      	ldrb	r2, [r7, #3]
 80025f4:	6879      	ldr	r1, [r7, #4]
 80025f6:	4613      	mov	r3, r2
 80025f8:	011b      	lsls	r3, r3, #4
 80025fa:	1a9b      	subs	r3, r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	440b      	add	r3, r1
 8002600:	3317      	adds	r3, #23
 8002602:	2200      	movs	r2, #0
 8002604:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f005 f85e 	bl	80076cc <USB_GetHostSpeed>
 8002610:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002612:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002616:	2b01      	cmp	r3, #1
 8002618:	d10b      	bne.n	8002632 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800261a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800261e:	2b01      	cmp	r3, #1
 8002620:	d107      	bne.n	8002632 <HAL_HCD_HC_Init+0x10a>
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d104      	bne.n	8002632 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	2bbc      	cmp	r3, #188	@ 0xbc
 800262c:	d901      	bls.n	8002632 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800262e:	23bc      	movs	r3, #188	@ 0xbc
 8002630:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002632:	78fa      	ldrb	r2, [r7, #3]
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	4613      	mov	r3, r2
 8002638:	011b      	lsls	r3, r3, #4
 800263a:	1a9b      	subs	r3, r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	440b      	add	r3, r1
 8002640:	3318      	adds	r3, #24
 8002642:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002646:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002648:	78fa      	ldrb	r2, [r7, #3]
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	b298      	uxth	r0, r3
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	4613      	mov	r3, r2
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	1a9b      	subs	r3, r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	3328      	adds	r3, #40	@ 0x28
 800265c:	4602      	mov	r2, r0
 800265e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6818      	ldr	r0, [r3, #0]
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	b29b      	uxth	r3, r3
 8002668:	787c      	ldrb	r4, [r7, #1]
 800266a:	78ba      	ldrb	r2, [r7, #2]
 800266c:	78f9      	ldrb	r1, [r7, #3]
 800266e:	9302      	str	r3, [sp, #8]
 8002670:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002674:	9301      	str	r3, [sp, #4]
 8002676:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800267a:	9300      	str	r3, [sp, #0]
 800267c:	4623      	mov	r3, r4
 800267e:	f005 f84d 	bl	800771c <USB_HC_Init>
 8002682:	4603      	mov	r3, r0
 8002684:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800268e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002690:	4618      	mov	r0, r3
 8002692:	371c      	adds	r7, #28
 8002694:	46bd      	mov	sp, r7
 8002696:	bd90      	pop	{r4, r7, pc}

08002698 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	460b      	mov	r3, r1
 80026a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80026a4:	2300      	movs	r3, #0
 80026a6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d101      	bne.n	80026b6 <HAL_HCD_HC_Halt+0x1e>
 80026b2:	2302      	movs	r3, #2
 80026b4:	e00f      	b.n	80026d6 <HAL_HCD_HC_Halt+0x3e>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	78fa      	ldrb	r2, [r7, #3]
 80026c4:	4611      	mov	r1, r2
 80026c6:	4618      	mov	r0, r3
 80026c8:	f005 fbdf 	bl	8007e8a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
	...

080026e0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	4608      	mov	r0, r1
 80026ea:	4611      	mov	r1, r2
 80026ec:	461a      	mov	r2, r3
 80026ee:	4603      	mov	r3, r0
 80026f0:	70fb      	strb	r3, [r7, #3]
 80026f2:	460b      	mov	r3, r1
 80026f4:	70bb      	strb	r3, [r7, #2]
 80026f6:	4613      	mov	r3, r2
 80026f8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80026fa:	78fa      	ldrb	r2, [r7, #3]
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	4613      	mov	r3, r2
 8002700:	011b      	lsls	r3, r3, #4
 8002702:	1a9b      	subs	r3, r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	440b      	add	r3, r1
 8002708:	3317      	adds	r3, #23
 800270a:	78ba      	ldrb	r2, [r7, #2]
 800270c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800270e:	78fa      	ldrb	r2, [r7, #3]
 8002710:	6879      	ldr	r1, [r7, #4]
 8002712:	4613      	mov	r3, r2
 8002714:	011b      	lsls	r3, r3, #4
 8002716:	1a9b      	subs	r3, r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	440b      	add	r3, r1
 800271c:	3326      	adds	r3, #38	@ 0x26
 800271e:	787a      	ldrb	r2, [r7, #1]
 8002720:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002722:	7c3b      	ldrb	r3, [r7, #16]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d114      	bne.n	8002752 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002728:	78fa      	ldrb	r2, [r7, #3]
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	4613      	mov	r3, r2
 800272e:	011b      	lsls	r3, r3, #4
 8002730:	1a9b      	subs	r3, r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	440b      	add	r3, r1
 8002736:	332a      	adds	r3, #42	@ 0x2a
 8002738:	2203      	movs	r2, #3
 800273a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800273c:	78fa      	ldrb	r2, [r7, #3]
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	4613      	mov	r3, r2
 8002742:	011b      	lsls	r3, r3, #4
 8002744:	1a9b      	subs	r3, r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	440b      	add	r3, r1
 800274a:	3319      	adds	r3, #25
 800274c:	7f3a      	ldrb	r2, [r7, #28]
 800274e:	701a      	strb	r2, [r3, #0]
 8002750:	e009      	b.n	8002766 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002752:	78fa      	ldrb	r2, [r7, #3]
 8002754:	6879      	ldr	r1, [r7, #4]
 8002756:	4613      	mov	r3, r2
 8002758:	011b      	lsls	r3, r3, #4
 800275a:	1a9b      	subs	r3, r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	440b      	add	r3, r1
 8002760:	332a      	adds	r3, #42	@ 0x2a
 8002762:	2202      	movs	r2, #2
 8002764:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002766:	787b      	ldrb	r3, [r7, #1]
 8002768:	2b03      	cmp	r3, #3
 800276a:	f200 8102 	bhi.w	8002972 <HAL_HCD_HC_SubmitRequest+0x292>
 800276e:	a201      	add	r2, pc, #4	@ (adr r2, 8002774 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002774:	08002785 	.word	0x08002785
 8002778:	0800295d 	.word	0x0800295d
 800277c:	08002849 	.word	0x08002849
 8002780:	080028d3 	.word	0x080028d3
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002784:	7c3b      	ldrb	r3, [r7, #16]
 8002786:	2b01      	cmp	r3, #1
 8002788:	f040 80f5 	bne.w	8002976 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 800278c:	78bb      	ldrb	r3, [r7, #2]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d12d      	bne.n	80027ee <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002792:	8b3b      	ldrh	r3, [r7, #24]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d109      	bne.n	80027ac <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002798:	78fa      	ldrb	r2, [r7, #3]
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	4613      	mov	r3, r2
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	1a9b      	subs	r3, r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	440b      	add	r3, r1
 80027a6:	333d      	adds	r3, #61	@ 0x3d
 80027a8:	2201      	movs	r2, #1
 80027aa:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80027ac:	78fa      	ldrb	r2, [r7, #3]
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	4613      	mov	r3, r2
 80027b2:	011b      	lsls	r3, r3, #4
 80027b4:	1a9b      	subs	r3, r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	333d      	adds	r3, #61	@ 0x3d
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10a      	bne.n	80027d8 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027c2:	78fa      	ldrb	r2, [r7, #3]
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	4613      	mov	r3, r2
 80027c8:	011b      	lsls	r3, r3, #4
 80027ca:	1a9b      	subs	r3, r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	440b      	add	r3, r1
 80027d0:	332a      	adds	r3, #42	@ 0x2a
 80027d2:	2200      	movs	r2, #0
 80027d4:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80027d6:	e0ce      	b.n	8002976 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027d8:	78fa      	ldrb	r2, [r7, #3]
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	4613      	mov	r3, r2
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	1a9b      	subs	r3, r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	332a      	adds	r3, #42	@ 0x2a
 80027e8:	2202      	movs	r2, #2
 80027ea:	701a      	strb	r2, [r3, #0]
      break;
 80027ec:	e0c3      	b.n	8002976 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80027ee:	78fa      	ldrb	r2, [r7, #3]
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	4613      	mov	r3, r2
 80027f4:	011b      	lsls	r3, r3, #4
 80027f6:	1a9b      	subs	r3, r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	440b      	add	r3, r1
 80027fc:	331a      	adds	r3, #26
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b01      	cmp	r3, #1
 8002802:	f040 80b8 	bne.w	8002976 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002806:	78fa      	ldrb	r2, [r7, #3]
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	4613      	mov	r3, r2
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	1a9b      	subs	r3, r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	440b      	add	r3, r1
 8002814:	333c      	adds	r3, #60	@ 0x3c
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d10a      	bne.n	8002832 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800281c:	78fa      	ldrb	r2, [r7, #3]
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	4613      	mov	r3, r2
 8002822:	011b      	lsls	r3, r3, #4
 8002824:	1a9b      	subs	r3, r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	440b      	add	r3, r1
 800282a:	332a      	adds	r3, #42	@ 0x2a
 800282c:	2200      	movs	r2, #0
 800282e:	701a      	strb	r2, [r3, #0]
      break;
 8002830:	e0a1      	b.n	8002976 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002832:	78fa      	ldrb	r2, [r7, #3]
 8002834:	6879      	ldr	r1, [r7, #4]
 8002836:	4613      	mov	r3, r2
 8002838:	011b      	lsls	r3, r3, #4
 800283a:	1a9b      	subs	r3, r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	440b      	add	r3, r1
 8002840:	332a      	adds	r3, #42	@ 0x2a
 8002842:	2202      	movs	r2, #2
 8002844:	701a      	strb	r2, [r3, #0]
      break;
 8002846:	e096      	b.n	8002976 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002848:	78bb      	ldrb	r3, [r7, #2]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d120      	bne.n	8002890 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800284e:	78fa      	ldrb	r2, [r7, #3]
 8002850:	6879      	ldr	r1, [r7, #4]
 8002852:	4613      	mov	r3, r2
 8002854:	011b      	lsls	r3, r3, #4
 8002856:	1a9b      	subs	r3, r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	440b      	add	r3, r1
 800285c:	333d      	adds	r3, #61	@ 0x3d
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10a      	bne.n	800287a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002864:	78fa      	ldrb	r2, [r7, #3]
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	4613      	mov	r3, r2
 800286a:	011b      	lsls	r3, r3, #4
 800286c:	1a9b      	subs	r3, r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	332a      	adds	r3, #42	@ 0x2a
 8002874:	2200      	movs	r2, #0
 8002876:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002878:	e07e      	b.n	8002978 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800287a:	78fa      	ldrb	r2, [r7, #3]
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	4613      	mov	r3, r2
 8002880:	011b      	lsls	r3, r3, #4
 8002882:	1a9b      	subs	r3, r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	440b      	add	r3, r1
 8002888:	332a      	adds	r3, #42	@ 0x2a
 800288a:	2202      	movs	r2, #2
 800288c:	701a      	strb	r2, [r3, #0]
      break;
 800288e:	e073      	b.n	8002978 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002890:	78fa      	ldrb	r2, [r7, #3]
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	4613      	mov	r3, r2
 8002896:	011b      	lsls	r3, r3, #4
 8002898:	1a9b      	subs	r3, r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	440b      	add	r3, r1
 800289e:	333c      	adds	r3, #60	@ 0x3c
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10a      	bne.n	80028bc <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028a6:	78fa      	ldrb	r2, [r7, #3]
 80028a8:	6879      	ldr	r1, [r7, #4]
 80028aa:	4613      	mov	r3, r2
 80028ac:	011b      	lsls	r3, r3, #4
 80028ae:	1a9b      	subs	r3, r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	440b      	add	r3, r1
 80028b4:	332a      	adds	r3, #42	@ 0x2a
 80028b6:	2200      	movs	r2, #0
 80028b8:	701a      	strb	r2, [r3, #0]
      break;
 80028ba:	e05d      	b.n	8002978 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028bc:	78fa      	ldrb	r2, [r7, #3]
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	011b      	lsls	r3, r3, #4
 80028c4:	1a9b      	subs	r3, r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	332a      	adds	r3, #42	@ 0x2a
 80028cc:	2202      	movs	r2, #2
 80028ce:	701a      	strb	r2, [r3, #0]
      break;
 80028d0:	e052      	b.n	8002978 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80028d2:	78bb      	ldrb	r3, [r7, #2]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d120      	bne.n	800291a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80028d8:	78fa      	ldrb	r2, [r7, #3]
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	4613      	mov	r3, r2
 80028de:	011b      	lsls	r3, r3, #4
 80028e0:	1a9b      	subs	r3, r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	333d      	adds	r3, #61	@ 0x3d
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10a      	bne.n	8002904 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028ee:	78fa      	ldrb	r2, [r7, #3]
 80028f0:	6879      	ldr	r1, [r7, #4]
 80028f2:	4613      	mov	r3, r2
 80028f4:	011b      	lsls	r3, r3, #4
 80028f6:	1a9b      	subs	r3, r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	440b      	add	r3, r1
 80028fc:	332a      	adds	r3, #42	@ 0x2a
 80028fe:	2200      	movs	r2, #0
 8002900:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002902:	e039      	b.n	8002978 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002904:	78fa      	ldrb	r2, [r7, #3]
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	4613      	mov	r3, r2
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	1a9b      	subs	r3, r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	332a      	adds	r3, #42	@ 0x2a
 8002914:	2202      	movs	r2, #2
 8002916:	701a      	strb	r2, [r3, #0]
      break;
 8002918:	e02e      	b.n	8002978 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800291a:	78fa      	ldrb	r2, [r7, #3]
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	4613      	mov	r3, r2
 8002920:	011b      	lsls	r3, r3, #4
 8002922:	1a9b      	subs	r3, r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	440b      	add	r3, r1
 8002928:	333c      	adds	r3, #60	@ 0x3c
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10a      	bne.n	8002946 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002930:	78fa      	ldrb	r2, [r7, #3]
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	4613      	mov	r3, r2
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	1a9b      	subs	r3, r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	332a      	adds	r3, #42	@ 0x2a
 8002940:	2200      	movs	r2, #0
 8002942:	701a      	strb	r2, [r3, #0]
      break;
 8002944:	e018      	b.n	8002978 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002946:	78fa      	ldrb	r2, [r7, #3]
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	011b      	lsls	r3, r3, #4
 800294e:	1a9b      	subs	r3, r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	440b      	add	r3, r1
 8002954:	332a      	adds	r3, #42	@ 0x2a
 8002956:	2202      	movs	r2, #2
 8002958:	701a      	strb	r2, [r3, #0]
      break;
 800295a:	e00d      	b.n	8002978 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800295c:	78fa      	ldrb	r2, [r7, #3]
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	4613      	mov	r3, r2
 8002962:	011b      	lsls	r3, r3, #4
 8002964:	1a9b      	subs	r3, r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	332a      	adds	r3, #42	@ 0x2a
 800296c:	2200      	movs	r2, #0
 800296e:	701a      	strb	r2, [r3, #0]
      break;
 8002970:	e002      	b.n	8002978 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002972:	bf00      	nop
 8002974:	e000      	b.n	8002978 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002976:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002978:	78fa      	ldrb	r2, [r7, #3]
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	4613      	mov	r3, r2
 800297e:	011b      	lsls	r3, r3, #4
 8002980:	1a9b      	subs	r3, r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	332c      	adds	r3, #44	@ 0x2c
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800298c:	78fa      	ldrb	r2, [r7, #3]
 800298e:	8b39      	ldrh	r1, [r7, #24]
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	4613      	mov	r3, r2
 8002994:	011b      	lsls	r3, r3, #4
 8002996:	1a9b      	subs	r3, r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4403      	add	r3, r0
 800299c:	3334      	adds	r3, #52	@ 0x34
 800299e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80029a0:	78fa      	ldrb	r2, [r7, #3]
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	4613      	mov	r3, r2
 80029a6:	011b      	lsls	r3, r3, #4
 80029a8:	1a9b      	subs	r3, r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	334c      	adds	r3, #76	@ 0x4c
 80029b0:	2200      	movs	r2, #0
 80029b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80029b4:	78fa      	ldrb	r2, [r7, #3]
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	4613      	mov	r3, r2
 80029ba:	011b      	lsls	r3, r3, #4
 80029bc:	1a9b      	subs	r3, r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	440b      	add	r3, r1
 80029c2:	3338      	adds	r3, #56	@ 0x38
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80029c8:	78fa      	ldrb	r2, [r7, #3]
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	4613      	mov	r3, r2
 80029ce:	011b      	lsls	r3, r3, #4
 80029d0:	1a9b      	subs	r3, r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	3315      	adds	r3, #21
 80029d8:	78fa      	ldrb	r2, [r7, #3]
 80029da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80029dc:	78fa      	ldrb	r2, [r7, #3]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	011b      	lsls	r3, r3, #4
 80029e4:	1a9b      	subs	r3, r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	334d      	adds	r3, #77	@ 0x4d
 80029ec:	2200      	movs	r2, #0
 80029ee:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6818      	ldr	r0, [r3, #0]
 80029f4:	78fa      	ldrb	r2, [r7, #3]
 80029f6:	4613      	mov	r3, r2
 80029f8:	011b      	lsls	r3, r3, #4
 80029fa:	1a9b      	subs	r3, r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	3310      	adds	r3, #16
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	4413      	add	r3, r2
 8002a04:	1d19      	adds	r1, r3, #4
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	799b      	ldrb	r3, [r3, #6]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	f004 ffb2 	bl	8007974 <USB_HC_StartXfer>
 8002a10:	4603      	mov	r3, r0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop

08002a1c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f004 fca6 	bl	8007384 <USB_GetMode>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	f040 80fb 	bne.w	8002c36 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f004 fc69 	bl	800731c <USB_ReadInterrupts>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 80f1 	beq.w	8002c34 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f004 fc60 	bl	800731c <USB_ReadInterrupts>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a66:	d104      	bne.n	8002a72 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002a70:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f004 fc50 	bl	800731c <USB_ReadInterrupts>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a86:	d104      	bne.n	8002a92 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002a90:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f004 fc40 	bl	800731c <USB_ReadInterrupts>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002aa2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002aa6:	d104      	bne.n	8002ab2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002ab0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f004 fc30 	bl	800731c <USB_ReadInterrupts>
 8002abc:	4603      	mov	r3, r0
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d103      	bne.n	8002ace <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2202      	movs	r2, #2
 8002acc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f004 fc22 	bl	800731c <USB_ReadInterrupts>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ade:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ae2:	d120      	bne.n	8002b26 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002aec:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d113      	bne.n	8002b26 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002afe:	2110      	movs	r1, #16
 8002b00:	6938      	ldr	r0, [r7, #16]
 8002b02:	f004 fb15 	bl	8007130 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002b06:	6938      	ldr	r0, [r7, #16]
 8002b08:	f004 fb44 	bl	8007194 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	7a5b      	ldrb	r3, [r3, #9]
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d105      	bne.n	8002b20 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2101      	movs	r1, #1
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f004 fd36 	bl	800758c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f007 fcfd 	bl	800a520 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f004 fbf6 	bl	800731c <USB_ReadInterrupts>
 8002b30:	4603      	mov	r3, r0
 8002b32:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b3a:	d102      	bne.n	8002b42 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f001 fd4d 	bl	80045dc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f004 fbe8 	bl	800731c <USB_ReadInterrupts>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	2b08      	cmp	r3, #8
 8002b54:	d106      	bne.n	8002b64 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f007 fcc6 	bl	800a4e8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2208      	movs	r2, #8
 8002b62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f004 fbd7 	bl	800731c <USB_ReadInterrupts>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b74:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b78:	d139      	bne.n	8002bee <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f005 f972 	bl	8007e68 <USB_HC_ReadInterrupt>
 8002b84:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b86:	2300      	movs	r3, #0
 8002b88:	617b      	str	r3, [r7, #20]
 8002b8a:	e025      	b.n	8002bd8 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	fa22 f303 	lsr.w	r3, r2, r3
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d018      	beq.n	8002bd2 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	015a      	lsls	r2, r3, #5
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bb6:	d106      	bne.n	8002bc6 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f905 	bl	8002dce <HCD_HC_IN_IRQHandler>
 8002bc4:	e005      	b.n	8002bd2 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	4619      	mov	r1, r3
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 ff67 	bl	8003aa0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	617b      	str	r3, [r7, #20]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	795b      	ldrb	r3, [r3, #5]
 8002bdc:	461a      	mov	r2, r3
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d3d3      	bcc.n	8002b8c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002bec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f004 fb92 	bl	800731c <USB_ReadInterrupts>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	f003 0310 	and.w	r3, r3, #16
 8002bfe:	2b10      	cmp	r3, #16
 8002c00:	d101      	bne.n	8002c06 <HAL_HCD_IRQHandler+0x1ea>
 8002c02:	2301      	movs	r3, #1
 8002c04:	e000      	b.n	8002c08 <HAL_HCD_IRQHandler+0x1ec>
 8002c06:	2300      	movs	r3, #0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d014      	beq.n	8002c36 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	699a      	ldr	r2, [r3, #24]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 0210 	bic.w	r2, r2, #16
 8002c1a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f001 fbfe 	bl	800441e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	699a      	ldr	r2, [r3, #24]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f042 0210 	orr.w	r2, r2, #16
 8002c30:	619a      	str	r2, [r3, #24]
 8002c32:	e000      	b.n	8002c36 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002c34:	bf00      	nop
    }
  }
}
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d101      	bne.n	8002c52 <HAL_HCD_Start+0x16>
 8002c4e:	2302      	movs	r3, #2
 8002c50:	e013      	b.n	8002c7a <HAL_HCD_Start+0x3e>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2101      	movs	r1, #1
 8002c60:	4618      	mov	r0, r3
 8002c62:	f004 fcfa 	bl	800765a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f004 f9f2 	bl	8007054 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b082      	sub	sp, #8
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d101      	bne.n	8002c98 <HAL_HCD_Stop+0x16>
 8002c94:	2302      	movs	r3, #2
 8002c96:	e00d      	b.n	8002cb4 <HAL_HCD_Stop+0x32>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f005 fa4d 	bl	8008144 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f004 fc9c 	bl	8007606 <USB_ResetPort>
 8002cce:	4603      	mov	r3, r0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002ce4:	78fa      	ldrb	r2, [r7, #3]
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	011b      	lsls	r3, r3, #4
 8002cec:	1a9b      	subs	r3, r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	334c      	adds	r3, #76	@ 0x4c
 8002cf4:	781b      	ldrb	r3, [r3, #0]
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002d0e:	78fa      	ldrb	r2, [r7, #3]
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	4613      	mov	r3, r2
 8002d14:	011b      	lsls	r3, r3, #4
 8002d16:	1a9b      	subs	r3, r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	440b      	add	r3, r1
 8002d1c:	3338      	adds	r3, #56	@ 0x38
 8002d1e:	681b      	ldr	r3, [r3, #0]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f004 fcde 	bl	80076fa <USB_GetCurrentFrame>
 8002d3e:	4603      	mov	r3, r0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f004 fcb9 	bl	80076cc <USB_GetHostSpeed>
 8002d5a:	4603      	mov	r3, r0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002d70:	78fa      	ldrb	r2, [r7, #3]
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	4613      	mov	r3, r2
 8002d76:	011b      	lsls	r3, r3, #4
 8002d78:	1a9b      	subs	r3, r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	331a      	adds	r3, #26
 8002d80:	2200      	movs	r2, #0
 8002d82:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002d84:	78fa      	ldrb	r2, [r7, #3]
 8002d86:	6879      	ldr	r1, [r7, #4]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	011b      	lsls	r3, r3, #4
 8002d8c:	1a9b      	subs	r3, r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	440b      	add	r3, r1
 8002d92:	331b      	adds	r3, #27
 8002d94:	2200      	movs	r2, #0
 8002d96:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002d98:	78fa      	ldrb	r2, [r7, #3]
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	011b      	lsls	r3, r3, #4
 8002da0:	1a9b      	subs	r3, r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	3325      	adds	r3, #37	@ 0x25
 8002da8:	2200      	movs	r2, #0
 8002daa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002dac:	78fa      	ldrb	r2, [r7, #3]
 8002dae:	6879      	ldr	r1, [r7, #4]
 8002db0:	4613      	mov	r3, r2
 8002db2:	011b      	lsls	r3, r3, #4
 8002db4:	1a9b      	subs	r3, r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	440b      	add	r3, r1
 8002dba:	3324      	adds	r3, #36	@ 0x24
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b086      	sub	sp, #24
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	78fa      	ldrb	r2, [r7, #3]
 8002dea:	4611      	mov	r1, r2
 8002dec:	4618      	mov	r0, r3
 8002dee:	f004 faa8 	bl	8007342 <USB_ReadChInterrupts>
 8002df2:	4603      	mov	r3, r0
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b04      	cmp	r3, #4
 8002dfa:	d11a      	bne.n	8002e32 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002dfc:	78fb      	ldrb	r3, [r7, #3]
 8002dfe:	015a      	lsls	r2, r3, #5
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	4413      	add	r3, r2
 8002e04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e08:	461a      	mov	r2, r3
 8002e0a:	2304      	movs	r3, #4
 8002e0c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002e0e:	78fa      	ldrb	r2, [r7, #3]
 8002e10:	6879      	ldr	r1, [r7, #4]
 8002e12:	4613      	mov	r3, r2
 8002e14:	011b      	lsls	r3, r3, #4
 8002e16:	1a9b      	subs	r3, r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	440b      	add	r3, r1
 8002e1c:	334d      	adds	r3, #77	@ 0x4d
 8002e1e:	2207      	movs	r2, #7
 8002e20:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	78fa      	ldrb	r2, [r7, #3]
 8002e28:	4611      	mov	r1, r2
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f005 f82d 	bl	8007e8a <USB_HC_Halt>
 8002e30:	e09e      	b.n	8002f70 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	78fa      	ldrb	r2, [r7, #3]
 8002e38:	4611      	mov	r1, r2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f004 fa81 	bl	8007342 <USB_ReadChInterrupts>
 8002e40:	4603      	mov	r3, r0
 8002e42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e4a:	d11b      	bne.n	8002e84 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002e4c:	78fb      	ldrb	r3, [r7, #3]
 8002e4e:	015a      	lsls	r2, r3, #5
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	4413      	add	r3, r2
 8002e54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e58:	461a      	mov	r2, r3
 8002e5a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e5e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002e60:	78fa      	ldrb	r2, [r7, #3]
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	4613      	mov	r3, r2
 8002e66:	011b      	lsls	r3, r3, #4
 8002e68:	1a9b      	subs	r3, r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	334d      	adds	r3, #77	@ 0x4d
 8002e70:	2208      	movs	r2, #8
 8002e72:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	78fa      	ldrb	r2, [r7, #3]
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f005 f804 	bl	8007e8a <USB_HC_Halt>
 8002e82:	e075      	b.n	8002f70 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	78fa      	ldrb	r2, [r7, #3]
 8002e8a:	4611      	mov	r1, r2
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f004 fa58 	bl	8007342 <USB_ReadChInterrupts>
 8002e92:	4603      	mov	r3, r0
 8002e94:	f003 0308 	and.w	r3, r3, #8
 8002e98:	2b08      	cmp	r3, #8
 8002e9a:	d11a      	bne.n	8002ed2 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002e9c:	78fb      	ldrb	r3, [r7, #3]
 8002e9e:	015a      	lsls	r2, r3, #5
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	2308      	movs	r3, #8
 8002eac:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002eae:	78fa      	ldrb	r2, [r7, #3]
 8002eb0:	6879      	ldr	r1, [r7, #4]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	011b      	lsls	r3, r3, #4
 8002eb6:	1a9b      	subs	r3, r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	440b      	add	r3, r1
 8002ebc:	334d      	adds	r3, #77	@ 0x4d
 8002ebe:	2206      	movs	r2, #6
 8002ec0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	78fa      	ldrb	r2, [r7, #3]
 8002ec8:	4611      	mov	r1, r2
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f004 ffdd 	bl	8007e8a <USB_HC_Halt>
 8002ed0:	e04e      	b.n	8002f70 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	78fa      	ldrb	r2, [r7, #3]
 8002ed8:	4611      	mov	r1, r2
 8002eda:	4618      	mov	r0, r3
 8002edc:	f004 fa31 	bl	8007342 <USB_ReadChInterrupts>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ee6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eea:	d11b      	bne.n	8002f24 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002eec:	78fb      	ldrb	r3, [r7, #3]
 8002eee:	015a      	lsls	r2, r3, #5
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ef8:	461a      	mov	r2, r3
 8002efa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002efe:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002f00:	78fa      	ldrb	r2, [r7, #3]
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	4613      	mov	r3, r2
 8002f06:	011b      	lsls	r3, r3, #4
 8002f08:	1a9b      	subs	r3, r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	334d      	adds	r3, #77	@ 0x4d
 8002f10:	2209      	movs	r2, #9
 8002f12:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	78fa      	ldrb	r2, [r7, #3]
 8002f1a:	4611      	mov	r1, r2
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f004 ffb4 	bl	8007e8a <USB_HC_Halt>
 8002f22:	e025      	b.n	8002f70 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	78fa      	ldrb	r2, [r7, #3]
 8002f2a:	4611      	mov	r1, r2
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f004 fa08 	bl	8007342 <USB_ReadChInterrupts>
 8002f32:	4603      	mov	r3, r0
 8002f34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f38:	2b80      	cmp	r3, #128	@ 0x80
 8002f3a:	d119      	bne.n	8002f70 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002f3c:	78fb      	ldrb	r3, [r7, #3]
 8002f3e:	015a      	lsls	r2, r3, #5
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	4413      	add	r3, r2
 8002f44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f48:	461a      	mov	r2, r3
 8002f4a:	2380      	movs	r3, #128	@ 0x80
 8002f4c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002f4e:	78fa      	ldrb	r2, [r7, #3]
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	4613      	mov	r3, r2
 8002f54:	011b      	lsls	r3, r3, #4
 8002f56:	1a9b      	subs	r3, r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	334d      	adds	r3, #77	@ 0x4d
 8002f5e:	2207      	movs	r2, #7
 8002f60:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	78fa      	ldrb	r2, [r7, #3]
 8002f68:	4611      	mov	r1, r2
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f004 ff8d 	bl	8007e8a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	78fa      	ldrb	r2, [r7, #3]
 8002f76:	4611      	mov	r1, r2
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f004 f9e2 	bl	8007342 <USB_ReadChInterrupts>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f88:	d112      	bne.n	8002fb0 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	78fa      	ldrb	r2, [r7, #3]
 8002f90:	4611      	mov	r1, r2
 8002f92:	4618      	mov	r0, r3
 8002f94:	f004 ff79 	bl	8007e8a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002f98:	78fb      	ldrb	r3, [r7, #3]
 8002f9a:	015a      	lsls	r2, r3, #5
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002faa:	6093      	str	r3, [r2, #8]
 8002fac:	f000 bd75 	b.w	8003a9a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	78fa      	ldrb	r2, [r7, #3]
 8002fb6:	4611      	mov	r1, r2
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f004 f9c2 	bl	8007342 <USB_ReadChInterrupts>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	f040 8128 	bne.w	800321a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002fca:	78fb      	ldrb	r3, [r7, #3]
 8002fcc:	015a      	lsls	r2, r3, #5
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	2320      	movs	r3, #32
 8002fda:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002fdc:	78fa      	ldrb	r2, [r7, #3]
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	011b      	lsls	r3, r3, #4
 8002fe4:	1a9b      	subs	r3, r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	440b      	add	r3, r1
 8002fea:	331b      	adds	r3, #27
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d119      	bne.n	8003026 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002ff2:	78fa      	ldrb	r2, [r7, #3]
 8002ff4:	6879      	ldr	r1, [r7, #4]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	011b      	lsls	r3, r3, #4
 8002ffa:	1a9b      	subs	r3, r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	440b      	add	r3, r1
 8003000:	331b      	adds	r3, #27
 8003002:	2200      	movs	r2, #0
 8003004:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003006:	78fb      	ldrb	r3, [r7, #3]
 8003008:	015a      	lsls	r2, r3, #5
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	4413      	add	r3, r2
 800300e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	78fa      	ldrb	r2, [r7, #3]
 8003016:	0151      	lsls	r1, r2, #5
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	440a      	add	r2, r1
 800301c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003020:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003024:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	799b      	ldrb	r3, [r3, #6]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d01b      	beq.n	8003066 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800302e:	78fa      	ldrb	r2, [r7, #3]
 8003030:	6879      	ldr	r1, [r7, #4]
 8003032:	4613      	mov	r3, r2
 8003034:	011b      	lsls	r3, r3, #4
 8003036:	1a9b      	subs	r3, r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	440b      	add	r3, r1
 800303c:	3330      	adds	r3, #48	@ 0x30
 800303e:	6819      	ldr	r1, [r3, #0]
 8003040:	78fb      	ldrb	r3, [r7, #3]
 8003042:	015a      	lsls	r2, r3, #5
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	4413      	add	r3, r2
 8003048:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003052:	78fa      	ldrb	r2, [r7, #3]
 8003054:	1ac9      	subs	r1, r1, r3
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	4613      	mov	r3, r2
 800305a:	011b      	lsls	r3, r3, #4
 800305c:	1a9b      	subs	r3, r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4403      	add	r3, r0
 8003062:	3338      	adds	r3, #56	@ 0x38
 8003064:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003066:	78fa      	ldrb	r2, [r7, #3]
 8003068:	6879      	ldr	r1, [r7, #4]
 800306a:	4613      	mov	r3, r2
 800306c:	011b      	lsls	r3, r3, #4
 800306e:	1a9b      	subs	r3, r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	440b      	add	r3, r1
 8003074:	334d      	adds	r3, #77	@ 0x4d
 8003076:	2201      	movs	r2, #1
 8003078:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800307a:	78fa      	ldrb	r2, [r7, #3]
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	4613      	mov	r3, r2
 8003080:	011b      	lsls	r3, r3, #4
 8003082:	1a9b      	subs	r3, r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	440b      	add	r3, r1
 8003088:	3344      	adds	r3, #68	@ 0x44
 800308a:	2200      	movs	r2, #0
 800308c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800308e:	78fb      	ldrb	r3, [r7, #3]
 8003090:	015a      	lsls	r2, r3, #5
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	4413      	add	r3, r2
 8003096:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800309a:	461a      	mov	r2, r3
 800309c:	2301      	movs	r3, #1
 800309e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030a0:	78fa      	ldrb	r2, [r7, #3]
 80030a2:	6879      	ldr	r1, [r7, #4]
 80030a4:	4613      	mov	r3, r2
 80030a6:	011b      	lsls	r3, r3, #4
 80030a8:	1a9b      	subs	r3, r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	440b      	add	r3, r1
 80030ae:	3326      	adds	r3, #38	@ 0x26
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00a      	beq.n	80030cc <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80030b6:	78fa      	ldrb	r2, [r7, #3]
 80030b8:	6879      	ldr	r1, [r7, #4]
 80030ba:	4613      	mov	r3, r2
 80030bc:	011b      	lsls	r3, r3, #4
 80030be:	1a9b      	subs	r3, r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	440b      	add	r3, r1
 80030c4:	3326      	adds	r3, #38	@ 0x26
 80030c6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d110      	bne.n	80030ee <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	78fa      	ldrb	r2, [r7, #3]
 80030d2:	4611      	mov	r1, r2
 80030d4:	4618      	mov	r0, r3
 80030d6:	f004 fed8 	bl	8007e8a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80030da:	78fb      	ldrb	r3, [r7, #3]
 80030dc:	015a      	lsls	r2, r3, #5
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	4413      	add	r3, r2
 80030e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030e6:	461a      	mov	r2, r3
 80030e8:	2310      	movs	r3, #16
 80030ea:	6093      	str	r3, [r2, #8]
 80030ec:	e03d      	b.n	800316a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80030ee:	78fa      	ldrb	r2, [r7, #3]
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	4613      	mov	r3, r2
 80030f4:	011b      	lsls	r3, r3, #4
 80030f6:	1a9b      	subs	r3, r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	440b      	add	r3, r1
 80030fc:	3326      	adds	r3, #38	@ 0x26
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	2b03      	cmp	r3, #3
 8003102:	d00a      	beq.n	800311a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003104:	78fa      	ldrb	r2, [r7, #3]
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	4613      	mov	r3, r2
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	1a9b      	subs	r3, r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	3326      	adds	r3, #38	@ 0x26
 8003114:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003116:	2b01      	cmp	r3, #1
 8003118:	d127      	bne.n	800316a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800311a:	78fb      	ldrb	r3, [r7, #3]
 800311c:	015a      	lsls	r2, r3, #5
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	4413      	add	r3, r2
 8003122:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	78fa      	ldrb	r2, [r7, #3]
 800312a:	0151      	lsls	r1, r2, #5
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	440a      	add	r2, r1
 8003130:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003134:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003138:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800313a:	78fa      	ldrb	r2, [r7, #3]
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	4613      	mov	r3, r2
 8003140:	011b      	lsls	r3, r3, #4
 8003142:	1a9b      	subs	r3, r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	440b      	add	r3, r1
 8003148:	334c      	adds	r3, #76	@ 0x4c
 800314a:	2201      	movs	r2, #1
 800314c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800314e:	78fa      	ldrb	r2, [r7, #3]
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	4613      	mov	r3, r2
 8003154:	011b      	lsls	r3, r3, #4
 8003156:	1a9b      	subs	r3, r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	440b      	add	r3, r1
 800315c:	334c      	adds	r3, #76	@ 0x4c
 800315e:	781a      	ldrb	r2, [r3, #0]
 8003160:	78fb      	ldrb	r3, [r7, #3]
 8003162:	4619      	mov	r1, r3
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f007 f9e9 	bl	800a53c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	799b      	ldrb	r3, [r3, #6]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d13b      	bne.n	80031ea <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003172:	78fa      	ldrb	r2, [r7, #3]
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	4613      	mov	r3, r2
 8003178:	011b      	lsls	r3, r3, #4
 800317a:	1a9b      	subs	r3, r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	440b      	add	r3, r1
 8003180:	3338      	adds	r3, #56	@ 0x38
 8003182:	6819      	ldr	r1, [r3, #0]
 8003184:	78fa      	ldrb	r2, [r7, #3]
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	4613      	mov	r3, r2
 800318a:	011b      	lsls	r3, r3, #4
 800318c:	1a9b      	subs	r3, r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4403      	add	r3, r0
 8003192:	3328      	adds	r3, #40	@ 0x28
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	440b      	add	r3, r1
 8003198:	1e59      	subs	r1, r3, #1
 800319a:	78fa      	ldrb	r2, [r7, #3]
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	4613      	mov	r3, r2
 80031a0:	011b      	lsls	r3, r3, #4
 80031a2:	1a9b      	subs	r3, r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	4403      	add	r3, r0
 80031a8:	3328      	adds	r3, #40	@ 0x28
 80031aa:	881b      	ldrh	r3, [r3, #0]
 80031ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f000 8470 	beq.w	8003a9a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80031ba:	78fa      	ldrb	r2, [r7, #3]
 80031bc:	6879      	ldr	r1, [r7, #4]
 80031be:	4613      	mov	r3, r2
 80031c0:	011b      	lsls	r3, r3, #4
 80031c2:	1a9b      	subs	r3, r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	440b      	add	r3, r1
 80031c8:	333c      	adds	r3, #60	@ 0x3c
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	78fa      	ldrb	r2, [r7, #3]
 80031ce:	f083 0301 	eor.w	r3, r3, #1
 80031d2:	b2d8      	uxtb	r0, r3
 80031d4:	6879      	ldr	r1, [r7, #4]
 80031d6:	4613      	mov	r3, r2
 80031d8:	011b      	lsls	r3, r3, #4
 80031da:	1a9b      	subs	r3, r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	440b      	add	r3, r1
 80031e0:	333c      	adds	r3, #60	@ 0x3c
 80031e2:	4602      	mov	r2, r0
 80031e4:	701a      	strb	r2, [r3, #0]
 80031e6:	f000 bc58 	b.w	8003a9a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80031ea:	78fa      	ldrb	r2, [r7, #3]
 80031ec:	6879      	ldr	r1, [r7, #4]
 80031ee:	4613      	mov	r3, r2
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	1a9b      	subs	r3, r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	440b      	add	r3, r1
 80031f8:	333c      	adds	r3, #60	@ 0x3c
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	78fa      	ldrb	r2, [r7, #3]
 80031fe:	f083 0301 	eor.w	r3, r3, #1
 8003202:	b2d8      	uxtb	r0, r3
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	1a9b      	subs	r3, r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	440b      	add	r3, r1
 8003210:	333c      	adds	r3, #60	@ 0x3c
 8003212:	4602      	mov	r2, r0
 8003214:	701a      	strb	r2, [r3, #0]
 8003216:	f000 bc40 	b.w	8003a9a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	78fa      	ldrb	r2, [r7, #3]
 8003220:	4611      	mov	r1, r2
 8003222:	4618      	mov	r0, r3
 8003224:	f004 f88d 	bl	8007342 <USB_ReadChInterrupts>
 8003228:	4603      	mov	r3, r0
 800322a:	f003 0320 	and.w	r3, r3, #32
 800322e:	2b20      	cmp	r3, #32
 8003230:	d131      	bne.n	8003296 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003232:	78fb      	ldrb	r3, [r7, #3]
 8003234:	015a      	lsls	r2, r3, #5
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	4413      	add	r3, r2
 800323a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800323e:	461a      	mov	r2, r3
 8003240:	2320      	movs	r3, #32
 8003242:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003244:	78fa      	ldrb	r2, [r7, #3]
 8003246:	6879      	ldr	r1, [r7, #4]
 8003248:	4613      	mov	r3, r2
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	1a9b      	subs	r3, r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	440b      	add	r3, r1
 8003252:	331a      	adds	r3, #26
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	2b01      	cmp	r3, #1
 8003258:	f040 841f 	bne.w	8003a9a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800325c:	78fa      	ldrb	r2, [r7, #3]
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	4613      	mov	r3, r2
 8003262:	011b      	lsls	r3, r3, #4
 8003264:	1a9b      	subs	r3, r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	440b      	add	r3, r1
 800326a:	331b      	adds	r3, #27
 800326c:	2201      	movs	r2, #1
 800326e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003270:	78fa      	ldrb	r2, [r7, #3]
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	4613      	mov	r3, r2
 8003276:	011b      	lsls	r3, r3, #4
 8003278:	1a9b      	subs	r3, r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	440b      	add	r3, r1
 800327e:	334d      	adds	r3, #77	@ 0x4d
 8003280:	2203      	movs	r2, #3
 8003282:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	78fa      	ldrb	r2, [r7, #3]
 800328a:	4611      	mov	r1, r2
 800328c:	4618      	mov	r0, r3
 800328e:	f004 fdfc 	bl	8007e8a <USB_HC_Halt>
 8003292:	f000 bc02 	b.w	8003a9a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	78fa      	ldrb	r2, [r7, #3]
 800329c:	4611      	mov	r1, r2
 800329e:	4618      	mov	r0, r3
 80032a0:	f004 f84f 	bl	8007342 <USB_ReadChInterrupts>
 80032a4:	4603      	mov	r3, r0
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	f040 8305 	bne.w	80038ba <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80032b0:	78fb      	ldrb	r3, [r7, #3]
 80032b2:	015a      	lsls	r2, r3, #5
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	4413      	add	r3, r2
 80032b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032bc:	461a      	mov	r2, r3
 80032be:	2302      	movs	r3, #2
 80032c0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80032c2:	78fa      	ldrb	r2, [r7, #3]
 80032c4:	6879      	ldr	r1, [r7, #4]
 80032c6:	4613      	mov	r3, r2
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	1a9b      	subs	r3, r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	440b      	add	r3, r1
 80032d0:	334d      	adds	r3, #77	@ 0x4d
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d114      	bne.n	8003302 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032d8:	78fa      	ldrb	r2, [r7, #3]
 80032da:	6879      	ldr	r1, [r7, #4]
 80032dc:	4613      	mov	r3, r2
 80032de:	011b      	lsls	r3, r3, #4
 80032e0:	1a9b      	subs	r3, r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	440b      	add	r3, r1
 80032e6:	334d      	adds	r3, #77	@ 0x4d
 80032e8:	2202      	movs	r2, #2
 80032ea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80032ec:	78fa      	ldrb	r2, [r7, #3]
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	4613      	mov	r3, r2
 80032f2:	011b      	lsls	r3, r3, #4
 80032f4:	1a9b      	subs	r3, r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	334c      	adds	r3, #76	@ 0x4c
 80032fc:	2201      	movs	r2, #1
 80032fe:	701a      	strb	r2, [r3, #0]
 8003300:	e2cc      	b.n	800389c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003302:	78fa      	ldrb	r2, [r7, #3]
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	4613      	mov	r3, r2
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	1a9b      	subs	r3, r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	440b      	add	r3, r1
 8003310:	334d      	adds	r3, #77	@ 0x4d
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	2b06      	cmp	r3, #6
 8003316:	d114      	bne.n	8003342 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003318:	78fa      	ldrb	r2, [r7, #3]
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	4613      	mov	r3, r2
 800331e:	011b      	lsls	r3, r3, #4
 8003320:	1a9b      	subs	r3, r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	440b      	add	r3, r1
 8003326:	334d      	adds	r3, #77	@ 0x4d
 8003328:	2202      	movs	r2, #2
 800332a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800332c:	78fa      	ldrb	r2, [r7, #3]
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	4613      	mov	r3, r2
 8003332:	011b      	lsls	r3, r3, #4
 8003334:	1a9b      	subs	r3, r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	334c      	adds	r3, #76	@ 0x4c
 800333c:	2205      	movs	r2, #5
 800333e:	701a      	strb	r2, [r3, #0]
 8003340:	e2ac      	b.n	800389c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003342:	78fa      	ldrb	r2, [r7, #3]
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	4613      	mov	r3, r2
 8003348:	011b      	lsls	r3, r3, #4
 800334a:	1a9b      	subs	r3, r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	440b      	add	r3, r1
 8003350:	334d      	adds	r3, #77	@ 0x4d
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	2b07      	cmp	r3, #7
 8003356:	d00b      	beq.n	8003370 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003358:	78fa      	ldrb	r2, [r7, #3]
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	4613      	mov	r3, r2
 800335e:	011b      	lsls	r3, r3, #4
 8003360:	1a9b      	subs	r3, r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	334d      	adds	r3, #77	@ 0x4d
 8003368:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800336a:	2b09      	cmp	r3, #9
 800336c:	f040 80a6 	bne.w	80034bc <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003370:	78fa      	ldrb	r2, [r7, #3]
 8003372:	6879      	ldr	r1, [r7, #4]
 8003374:	4613      	mov	r3, r2
 8003376:	011b      	lsls	r3, r3, #4
 8003378:	1a9b      	subs	r3, r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	440b      	add	r3, r1
 800337e:	334d      	adds	r3, #77	@ 0x4d
 8003380:	2202      	movs	r2, #2
 8003382:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003384:	78fa      	ldrb	r2, [r7, #3]
 8003386:	6879      	ldr	r1, [r7, #4]
 8003388:	4613      	mov	r3, r2
 800338a:	011b      	lsls	r3, r3, #4
 800338c:	1a9b      	subs	r3, r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	3344      	adds	r3, #68	@ 0x44
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	1c59      	adds	r1, r3, #1
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	4613      	mov	r3, r2
 800339c:	011b      	lsls	r3, r3, #4
 800339e:	1a9b      	subs	r3, r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4403      	add	r3, r0
 80033a4:	3344      	adds	r3, #68	@ 0x44
 80033a6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033a8:	78fa      	ldrb	r2, [r7, #3]
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	4613      	mov	r3, r2
 80033ae:	011b      	lsls	r3, r3, #4
 80033b0:	1a9b      	subs	r3, r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	440b      	add	r3, r1
 80033b6:	3344      	adds	r3, #68	@ 0x44
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d943      	bls.n	8003446 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80033be:	78fa      	ldrb	r2, [r7, #3]
 80033c0:	6879      	ldr	r1, [r7, #4]
 80033c2:	4613      	mov	r3, r2
 80033c4:	011b      	lsls	r3, r3, #4
 80033c6:	1a9b      	subs	r3, r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	440b      	add	r3, r1
 80033cc:	3344      	adds	r3, #68	@ 0x44
 80033ce:	2200      	movs	r2, #0
 80033d0:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80033d2:	78fa      	ldrb	r2, [r7, #3]
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	4613      	mov	r3, r2
 80033d8:	011b      	lsls	r3, r3, #4
 80033da:	1a9b      	subs	r3, r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	440b      	add	r3, r1
 80033e0:	331a      	adds	r3, #26
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d123      	bne.n	8003430 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80033e8:	78fa      	ldrb	r2, [r7, #3]
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	1a9b      	subs	r3, r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	331b      	adds	r3, #27
 80033f8:	2200      	movs	r2, #0
 80033fa:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80033fc:	78fa      	ldrb	r2, [r7, #3]
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	1a9b      	subs	r3, r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	331c      	adds	r3, #28
 800340c:	2200      	movs	r2, #0
 800340e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003410:	78fb      	ldrb	r3, [r7, #3]
 8003412:	015a      	lsls	r2, r3, #5
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	4413      	add	r3, r2
 8003418:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	78fa      	ldrb	r2, [r7, #3]
 8003420:	0151      	lsls	r1, r2, #5
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	440a      	add	r2, r1
 8003426:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800342a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800342e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003430:	78fa      	ldrb	r2, [r7, #3]
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	4613      	mov	r3, r2
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	1a9b      	subs	r3, r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	440b      	add	r3, r1
 800343e:	334c      	adds	r3, #76	@ 0x4c
 8003440:	2204      	movs	r2, #4
 8003442:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003444:	e229      	b.n	800389a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003446:	78fa      	ldrb	r2, [r7, #3]
 8003448:	6879      	ldr	r1, [r7, #4]
 800344a:	4613      	mov	r3, r2
 800344c:	011b      	lsls	r3, r3, #4
 800344e:	1a9b      	subs	r3, r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	440b      	add	r3, r1
 8003454:	334c      	adds	r3, #76	@ 0x4c
 8003456:	2202      	movs	r2, #2
 8003458:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800345a:	78fa      	ldrb	r2, [r7, #3]
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	4613      	mov	r3, r2
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	1a9b      	subs	r3, r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	440b      	add	r3, r1
 8003468:	3326      	adds	r3, #38	@ 0x26
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00b      	beq.n	8003488 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003470:	78fa      	ldrb	r2, [r7, #3]
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	4613      	mov	r3, r2
 8003476:	011b      	lsls	r3, r3, #4
 8003478:	1a9b      	subs	r3, r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	3326      	adds	r3, #38	@ 0x26
 8003480:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003482:	2b02      	cmp	r3, #2
 8003484:	f040 8209 	bne.w	800389a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003488:	78fb      	ldrb	r3, [r7, #3]
 800348a:	015a      	lsls	r2, r3, #5
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	4413      	add	r3, r2
 8003490:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800349e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80034a6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80034a8:	78fb      	ldrb	r3, [r7, #3]
 80034aa:	015a      	lsls	r2, r3, #5
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	4413      	add	r3, r2
 80034b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034b4:	461a      	mov	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80034ba:	e1ee      	b.n	800389a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80034bc:	78fa      	ldrb	r2, [r7, #3]
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	4613      	mov	r3, r2
 80034c2:	011b      	lsls	r3, r3, #4
 80034c4:	1a9b      	subs	r3, r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	440b      	add	r3, r1
 80034ca:	334d      	adds	r3, #77	@ 0x4d
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	2b05      	cmp	r3, #5
 80034d0:	f040 80c8 	bne.w	8003664 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80034d4:	78fa      	ldrb	r2, [r7, #3]
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	4613      	mov	r3, r2
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	1a9b      	subs	r3, r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	334d      	adds	r3, #77	@ 0x4d
 80034e4:	2202      	movs	r2, #2
 80034e6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80034e8:	78fa      	ldrb	r2, [r7, #3]
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	4613      	mov	r3, r2
 80034ee:	011b      	lsls	r3, r3, #4
 80034f0:	1a9b      	subs	r3, r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	331b      	adds	r3, #27
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	f040 81ce 	bne.w	800389c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003500:	78fa      	ldrb	r2, [r7, #3]
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	1a9b      	subs	r3, r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	3326      	adds	r3, #38	@ 0x26
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	2b03      	cmp	r3, #3
 8003514:	d16b      	bne.n	80035ee <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003516:	78fa      	ldrb	r2, [r7, #3]
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	4613      	mov	r3, r2
 800351c:	011b      	lsls	r3, r3, #4
 800351e:	1a9b      	subs	r3, r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	440b      	add	r3, r1
 8003524:	3348      	adds	r3, #72	@ 0x48
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	1c59      	adds	r1, r3, #1
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	4613      	mov	r3, r2
 800352e:	011b      	lsls	r3, r3, #4
 8003530:	1a9b      	subs	r3, r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4403      	add	r3, r0
 8003536:	3348      	adds	r3, #72	@ 0x48
 8003538:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800353a:	78fa      	ldrb	r2, [r7, #3]
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	4613      	mov	r3, r2
 8003540:	011b      	lsls	r3, r3, #4
 8003542:	1a9b      	subs	r3, r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	440b      	add	r3, r1
 8003548:	3348      	adds	r3, #72	@ 0x48
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2b02      	cmp	r3, #2
 800354e:	d943      	bls.n	80035d8 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003550:	78fa      	ldrb	r2, [r7, #3]
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	4613      	mov	r3, r2
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	1a9b      	subs	r3, r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	440b      	add	r3, r1
 800355e:	3348      	adds	r3, #72	@ 0x48
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003564:	78fa      	ldrb	r2, [r7, #3]
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	4613      	mov	r3, r2
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	1a9b      	subs	r3, r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	331b      	adds	r3, #27
 8003574:	2200      	movs	r2, #0
 8003576:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003578:	78fa      	ldrb	r2, [r7, #3]
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	4613      	mov	r3, r2
 800357e:	011b      	lsls	r3, r3, #4
 8003580:	1a9b      	subs	r3, r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	440b      	add	r3, r1
 8003586:	3344      	adds	r3, #68	@ 0x44
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2b02      	cmp	r3, #2
 800358c:	d809      	bhi.n	80035a2 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800358e:	78fa      	ldrb	r2, [r7, #3]
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	4613      	mov	r3, r2
 8003594:	011b      	lsls	r3, r3, #4
 8003596:	1a9b      	subs	r3, r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	440b      	add	r3, r1
 800359c:	331c      	adds	r3, #28
 800359e:	2201      	movs	r2, #1
 80035a0:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80035a2:	78fb      	ldrb	r3, [r7, #3]
 80035a4:	015a      	lsls	r2, r3, #5
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	4413      	add	r3, r2
 80035aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	78fa      	ldrb	r2, [r7, #3]
 80035b2:	0151      	lsls	r1, r2, #5
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	440a      	add	r2, r1
 80035b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80035bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035c0:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80035c2:	78fa      	ldrb	r2, [r7, #3]
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	4613      	mov	r3, r2
 80035c8:	011b      	lsls	r3, r3, #4
 80035ca:	1a9b      	subs	r3, r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	440b      	add	r3, r1
 80035d0:	334c      	adds	r3, #76	@ 0x4c
 80035d2:	2204      	movs	r2, #4
 80035d4:	701a      	strb	r2, [r3, #0]
 80035d6:	e014      	b.n	8003602 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035d8:	78fa      	ldrb	r2, [r7, #3]
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	4613      	mov	r3, r2
 80035de:	011b      	lsls	r3, r3, #4
 80035e0:	1a9b      	subs	r3, r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	334c      	adds	r3, #76	@ 0x4c
 80035e8:	2202      	movs	r2, #2
 80035ea:	701a      	strb	r2, [r3, #0]
 80035ec:	e009      	b.n	8003602 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035ee:	78fa      	ldrb	r2, [r7, #3]
 80035f0:	6879      	ldr	r1, [r7, #4]
 80035f2:	4613      	mov	r3, r2
 80035f4:	011b      	lsls	r3, r3, #4
 80035f6:	1a9b      	subs	r3, r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	440b      	add	r3, r1
 80035fc:	334c      	adds	r3, #76	@ 0x4c
 80035fe:	2202      	movs	r2, #2
 8003600:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003602:	78fa      	ldrb	r2, [r7, #3]
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	4613      	mov	r3, r2
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	1a9b      	subs	r3, r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	440b      	add	r3, r1
 8003610:	3326      	adds	r3, #38	@ 0x26
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00b      	beq.n	8003630 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003618:	78fa      	ldrb	r2, [r7, #3]
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	4613      	mov	r3, r2
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	1a9b      	subs	r3, r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	3326      	adds	r3, #38	@ 0x26
 8003628:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800362a:	2b02      	cmp	r3, #2
 800362c:	f040 8136 	bne.w	800389c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003630:	78fb      	ldrb	r3, [r7, #3]
 8003632:	015a      	lsls	r2, r3, #5
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	4413      	add	r3, r2
 8003638:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003646:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800364e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003650:	78fb      	ldrb	r3, [r7, #3]
 8003652:	015a      	lsls	r2, r3, #5
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	4413      	add	r3, r2
 8003658:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800365c:	461a      	mov	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6013      	str	r3, [r2, #0]
 8003662:	e11b      	b.n	800389c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003664:	78fa      	ldrb	r2, [r7, #3]
 8003666:	6879      	ldr	r1, [r7, #4]
 8003668:	4613      	mov	r3, r2
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	1a9b      	subs	r3, r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	440b      	add	r3, r1
 8003672:	334d      	adds	r3, #77	@ 0x4d
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	2b03      	cmp	r3, #3
 8003678:	f040 8081 	bne.w	800377e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800367c:	78fa      	ldrb	r2, [r7, #3]
 800367e:	6879      	ldr	r1, [r7, #4]
 8003680:	4613      	mov	r3, r2
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	1a9b      	subs	r3, r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	440b      	add	r3, r1
 800368a:	334d      	adds	r3, #77	@ 0x4d
 800368c:	2202      	movs	r2, #2
 800368e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003690:	78fa      	ldrb	r2, [r7, #3]
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	4613      	mov	r3, r2
 8003696:	011b      	lsls	r3, r3, #4
 8003698:	1a9b      	subs	r3, r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	440b      	add	r3, r1
 800369e:	331b      	adds	r3, #27
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	f040 80fa 	bne.w	800389c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80036a8:	78fa      	ldrb	r2, [r7, #3]
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	4613      	mov	r3, r2
 80036ae:	011b      	lsls	r3, r3, #4
 80036b0:	1a9b      	subs	r3, r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	334c      	adds	r3, #76	@ 0x4c
 80036b8:	2202      	movs	r2, #2
 80036ba:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80036bc:	78fb      	ldrb	r3, [r7, #3]
 80036be:	015a      	lsls	r2, r3, #5
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	4413      	add	r3, r2
 80036c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	78fa      	ldrb	r2, [r7, #3]
 80036cc:	0151      	lsls	r1, r2, #5
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	440a      	add	r2, r1
 80036d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80036d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036da:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80036dc:	78fb      	ldrb	r3, [r7, #3]
 80036de:	015a      	lsls	r2, r3, #5
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	4413      	add	r3, r2
 80036e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	78fa      	ldrb	r2, [r7, #3]
 80036ec:	0151      	lsls	r1, r2, #5
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	440a      	add	r2, r1
 80036f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80036f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036fa:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80036fc:	78fb      	ldrb	r3, [r7, #3]
 80036fe:	015a      	lsls	r2, r3, #5
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	4413      	add	r3, r2
 8003704:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	78fa      	ldrb	r2, [r7, #3]
 800370c:	0151      	lsls	r1, r2, #5
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	440a      	add	r2, r1
 8003712:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003716:	f023 0320 	bic.w	r3, r3, #32
 800371a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800371c:	78fa      	ldrb	r2, [r7, #3]
 800371e:	6879      	ldr	r1, [r7, #4]
 8003720:	4613      	mov	r3, r2
 8003722:	011b      	lsls	r3, r3, #4
 8003724:	1a9b      	subs	r3, r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	440b      	add	r3, r1
 800372a:	3326      	adds	r3, #38	@ 0x26
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00b      	beq.n	800374a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003732:	78fa      	ldrb	r2, [r7, #3]
 8003734:	6879      	ldr	r1, [r7, #4]
 8003736:	4613      	mov	r3, r2
 8003738:	011b      	lsls	r3, r3, #4
 800373a:	1a9b      	subs	r3, r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	440b      	add	r3, r1
 8003740:	3326      	adds	r3, #38	@ 0x26
 8003742:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003744:	2b02      	cmp	r3, #2
 8003746:	f040 80a9 	bne.w	800389c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800374a:	78fb      	ldrb	r3, [r7, #3]
 800374c:	015a      	lsls	r2, r3, #5
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	4413      	add	r3, r2
 8003752:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003760:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003768:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800376a:	78fb      	ldrb	r3, [r7, #3]
 800376c:	015a      	lsls	r2, r3, #5
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	4413      	add	r3, r2
 8003772:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003776:	461a      	mov	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6013      	str	r3, [r2, #0]
 800377c:	e08e      	b.n	800389c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800377e:	78fa      	ldrb	r2, [r7, #3]
 8003780:	6879      	ldr	r1, [r7, #4]
 8003782:	4613      	mov	r3, r2
 8003784:	011b      	lsls	r3, r3, #4
 8003786:	1a9b      	subs	r3, r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	440b      	add	r3, r1
 800378c:	334d      	adds	r3, #77	@ 0x4d
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	2b04      	cmp	r3, #4
 8003792:	d143      	bne.n	800381c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003794:	78fa      	ldrb	r2, [r7, #3]
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	4613      	mov	r3, r2
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	1a9b      	subs	r3, r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	440b      	add	r3, r1
 80037a2:	334d      	adds	r3, #77	@ 0x4d
 80037a4:	2202      	movs	r2, #2
 80037a6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80037a8:	78fa      	ldrb	r2, [r7, #3]
 80037aa:	6879      	ldr	r1, [r7, #4]
 80037ac:	4613      	mov	r3, r2
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	1a9b      	subs	r3, r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	440b      	add	r3, r1
 80037b6:	334c      	adds	r3, #76	@ 0x4c
 80037b8:	2202      	movs	r2, #2
 80037ba:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80037bc:	78fa      	ldrb	r2, [r7, #3]
 80037be:	6879      	ldr	r1, [r7, #4]
 80037c0:	4613      	mov	r3, r2
 80037c2:	011b      	lsls	r3, r3, #4
 80037c4:	1a9b      	subs	r3, r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	440b      	add	r3, r1
 80037ca:	3326      	adds	r3, #38	@ 0x26
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00a      	beq.n	80037e8 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80037d2:	78fa      	ldrb	r2, [r7, #3]
 80037d4:	6879      	ldr	r1, [r7, #4]
 80037d6:	4613      	mov	r3, r2
 80037d8:	011b      	lsls	r3, r3, #4
 80037da:	1a9b      	subs	r3, r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	440b      	add	r3, r1
 80037e0:	3326      	adds	r3, #38	@ 0x26
 80037e2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d159      	bne.n	800389c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80037e8:	78fb      	ldrb	r3, [r7, #3]
 80037ea:	015a      	lsls	r2, r3, #5
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	4413      	add	r3, r2
 80037f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80037fe:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003806:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003808:	78fb      	ldrb	r3, [r7, #3]
 800380a:	015a      	lsls	r2, r3, #5
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	4413      	add	r3, r2
 8003810:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003814:	461a      	mov	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6013      	str	r3, [r2, #0]
 800381a:	e03f      	b.n	800389c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800381c:	78fa      	ldrb	r2, [r7, #3]
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	4613      	mov	r3, r2
 8003822:	011b      	lsls	r3, r3, #4
 8003824:	1a9b      	subs	r3, r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	440b      	add	r3, r1
 800382a:	334d      	adds	r3, #77	@ 0x4d
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	2b08      	cmp	r3, #8
 8003830:	d126      	bne.n	8003880 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003832:	78fa      	ldrb	r2, [r7, #3]
 8003834:	6879      	ldr	r1, [r7, #4]
 8003836:	4613      	mov	r3, r2
 8003838:	011b      	lsls	r3, r3, #4
 800383a:	1a9b      	subs	r3, r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	440b      	add	r3, r1
 8003840:	334d      	adds	r3, #77	@ 0x4d
 8003842:	2202      	movs	r2, #2
 8003844:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003846:	78fa      	ldrb	r2, [r7, #3]
 8003848:	6879      	ldr	r1, [r7, #4]
 800384a:	4613      	mov	r3, r2
 800384c:	011b      	lsls	r3, r3, #4
 800384e:	1a9b      	subs	r3, r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	440b      	add	r3, r1
 8003854:	3344      	adds	r3, #68	@ 0x44
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	1c59      	adds	r1, r3, #1
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	4613      	mov	r3, r2
 800385e:	011b      	lsls	r3, r3, #4
 8003860:	1a9b      	subs	r3, r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	4403      	add	r3, r0
 8003866:	3344      	adds	r3, #68	@ 0x44
 8003868:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800386a:	78fa      	ldrb	r2, [r7, #3]
 800386c:	6879      	ldr	r1, [r7, #4]
 800386e:	4613      	mov	r3, r2
 8003870:	011b      	lsls	r3, r3, #4
 8003872:	1a9b      	subs	r3, r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	440b      	add	r3, r1
 8003878:	334c      	adds	r3, #76	@ 0x4c
 800387a:	2204      	movs	r2, #4
 800387c:	701a      	strb	r2, [r3, #0]
 800387e:	e00d      	b.n	800389c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003880:	78fa      	ldrb	r2, [r7, #3]
 8003882:	6879      	ldr	r1, [r7, #4]
 8003884:	4613      	mov	r3, r2
 8003886:	011b      	lsls	r3, r3, #4
 8003888:	1a9b      	subs	r3, r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	440b      	add	r3, r1
 800388e:	334d      	adds	r3, #77	@ 0x4d
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	2b02      	cmp	r3, #2
 8003894:	f000 8100 	beq.w	8003a98 <HCD_HC_IN_IRQHandler+0xcca>
 8003898:	e000      	b.n	800389c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800389a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800389c:	78fa      	ldrb	r2, [r7, #3]
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	4613      	mov	r3, r2
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	1a9b      	subs	r3, r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	334c      	adds	r3, #76	@ 0x4c
 80038ac:	781a      	ldrb	r2, [r3, #0]
 80038ae:	78fb      	ldrb	r3, [r7, #3]
 80038b0:	4619      	mov	r1, r3
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f006 fe42 	bl	800a53c <HAL_HCD_HC_NotifyURBChange_Callback>
 80038b8:	e0ef      	b.n	8003a9a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	78fa      	ldrb	r2, [r7, #3]
 80038c0:	4611      	mov	r1, r2
 80038c2:	4618      	mov	r0, r3
 80038c4:	f003 fd3d 	bl	8007342 <USB_ReadChInterrupts>
 80038c8:	4603      	mov	r3, r0
 80038ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038ce:	2b40      	cmp	r3, #64	@ 0x40
 80038d0:	d12f      	bne.n	8003932 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80038d2:	78fb      	ldrb	r3, [r7, #3]
 80038d4:	015a      	lsls	r2, r3, #5
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	4413      	add	r3, r2
 80038da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038de:	461a      	mov	r2, r3
 80038e0:	2340      	movs	r3, #64	@ 0x40
 80038e2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80038e4:	78fa      	ldrb	r2, [r7, #3]
 80038e6:	6879      	ldr	r1, [r7, #4]
 80038e8:	4613      	mov	r3, r2
 80038ea:	011b      	lsls	r3, r3, #4
 80038ec:	1a9b      	subs	r3, r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	440b      	add	r3, r1
 80038f2:	334d      	adds	r3, #77	@ 0x4d
 80038f4:	2205      	movs	r2, #5
 80038f6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80038f8:	78fa      	ldrb	r2, [r7, #3]
 80038fa:	6879      	ldr	r1, [r7, #4]
 80038fc:	4613      	mov	r3, r2
 80038fe:	011b      	lsls	r3, r3, #4
 8003900:	1a9b      	subs	r3, r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	440b      	add	r3, r1
 8003906:	331a      	adds	r3, #26
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d109      	bne.n	8003922 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800390e:	78fa      	ldrb	r2, [r7, #3]
 8003910:	6879      	ldr	r1, [r7, #4]
 8003912:	4613      	mov	r3, r2
 8003914:	011b      	lsls	r3, r3, #4
 8003916:	1a9b      	subs	r3, r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	440b      	add	r3, r1
 800391c:	3344      	adds	r3, #68	@ 0x44
 800391e:	2200      	movs	r2, #0
 8003920:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	78fa      	ldrb	r2, [r7, #3]
 8003928:	4611      	mov	r1, r2
 800392a:	4618      	mov	r0, r3
 800392c:	f004 faad 	bl	8007e8a <USB_HC_Halt>
 8003930:	e0b3      	b.n	8003a9a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	78fa      	ldrb	r2, [r7, #3]
 8003938:	4611      	mov	r1, r2
 800393a:	4618      	mov	r0, r3
 800393c:	f003 fd01 	bl	8007342 <USB_ReadChInterrupts>
 8003940:	4603      	mov	r3, r0
 8003942:	f003 0310 	and.w	r3, r3, #16
 8003946:	2b10      	cmp	r3, #16
 8003948:	f040 80a7 	bne.w	8003a9a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800394c:	78fa      	ldrb	r2, [r7, #3]
 800394e:	6879      	ldr	r1, [r7, #4]
 8003950:	4613      	mov	r3, r2
 8003952:	011b      	lsls	r3, r3, #4
 8003954:	1a9b      	subs	r3, r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	440b      	add	r3, r1
 800395a:	3326      	adds	r3, #38	@ 0x26
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	2b03      	cmp	r3, #3
 8003960:	d11b      	bne.n	800399a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003962:	78fa      	ldrb	r2, [r7, #3]
 8003964:	6879      	ldr	r1, [r7, #4]
 8003966:	4613      	mov	r3, r2
 8003968:	011b      	lsls	r3, r3, #4
 800396a:	1a9b      	subs	r3, r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	440b      	add	r3, r1
 8003970:	3344      	adds	r3, #68	@ 0x44
 8003972:	2200      	movs	r2, #0
 8003974:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003976:	78fa      	ldrb	r2, [r7, #3]
 8003978:	6879      	ldr	r1, [r7, #4]
 800397a:	4613      	mov	r3, r2
 800397c:	011b      	lsls	r3, r3, #4
 800397e:	1a9b      	subs	r3, r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	440b      	add	r3, r1
 8003984:	334d      	adds	r3, #77	@ 0x4d
 8003986:	2204      	movs	r2, #4
 8003988:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	78fa      	ldrb	r2, [r7, #3]
 8003990:	4611      	mov	r1, r2
 8003992:	4618      	mov	r0, r3
 8003994:	f004 fa79 	bl	8007e8a <USB_HC_Halt>
 8003998:	e03f      	b.n	8003a1a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800399a:	78fa      	ldrb	r2, [r7, #3]
 800399c:	6879      	ldr	r1, [r7, #4]
 800399e:	4613      	mov	r3, r2
 80039a0:	011b      	lsls	r3, r3, #4
 80039a2:	1a9b      	subs	r3, r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	440b      	add	r3, r1
 80039a8:	3326      	adds	r3, #38	@ 0x26
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00a      	beq.n	80039c6 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80039b0:	78fa      	ldrb	r2, [r7, #3]
 80039b2:	6879      	ldr	r1, [r7, #4]
 80039b4:	4613      	mov	r3, r2
 80039b6:	011b      	lsls	r3, r3, #4
 80039b8:	1a9b      	subs	r3, r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	3326      	adds	r3, #38	@ 0x26
 80039c0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d129      	bne.n	8003a1a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80039c6:	78fa      	ldrb	r2, [r7, #3]
 80039c8:	6879      	ldr	r1, [r7, #4]
 80039ca:	4613      	mov	r3, r2
 80039cc:	011b      	lsls	r3, r3, #4
 80039ce:	1a9b      	subs	r3, r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	440b      	add	r3, r1
 80039d4:	3344      	adds	r3, #68	@ 0x44
 80039d6:	2200      	movs	r2, #0
 80039d8:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	799b      	ldrb	r3, [r3, #6]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00a      	beq.n	80039f8 <HCD_HC_IN_IRQHandler+0xc2a>
 80039e2:	78fa      	ldrb	r2, [r7, #3]
 80039e4:	6879      	ldr	r1, [r7, #4]
 80039e6:	4613      	mov	r3, r2
 80039e8:	011b      	lsls	r3, r3, #4
 80039ea:	1a9b      	subs	r3, r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	440b      	add	r3, r1
 80039f0:	331b      	adds	r3, #27
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d110      	bne.n	8003a1a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80039f8:	78fa      	ldrb	r2, [r7, #3]
 80039fa:	6879      	ldr	r1, [r7, #4]
 80039fc:	4613      	mov	r3, r2
 80039fe:	011b      	lsls	r3, r3, #4
 8003a00:	1a9b      	subs	r3, r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	440b      	add	r3, r1
 8003a06:	334d      	adds	r3, #77	@ 0x4d
 8003a08:	2204      	movs	r2, #4
 8003a0a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	78fa      	ldrb	r2, [r7, #3]
 8003a12:	4611      	mov	r1, r2
 8003a14:	4618      	mov	r0, r3
 8003a16:	f004 fa38 	bl	8007e8a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003a1a:	78fa      	ldrb	r2, [r7, #3]
 8003a1c:	6879      	ldr	r1, [r7, #4]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	011b      	lsls	r3, r3, #4
 8003a22:	1a9b      	subs	r3, r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	440b      	add	r3, r1
 8003a28:	331b      	adds	r3, #27
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d129      	bne.n	8003a84 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003a30:	78fa      	ldrb	r2, [r7, #3]
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	4613      	mov	r3, r2
 8003a36:	011b      	lsls	r3, r3, #4
 8003a38:	1a9b      	subs	r3, r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	440b      	add	r3, r1
 8003a3e:	331b      	adds	r3, #27
 8003a40:	2200      	movs	r2, #0
 8003a42:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003a44:	78fb      	ldrb	r3, [r7, #3]
 8003a46:	015a      	lsls	r2, r3, #5
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	78fa      	ldrb	r2, [r7, #3]
 8003a54:	0151      	lsls	r1, r2, #5
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	440a      	add	r2, r1
 8003a5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a62:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003a64:	78fb      	ldrb	r3, [r7, #3]
 8003a66:	015a      	lsls	r2, r3, #5
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	78fa      	ldrb	r2, [r7, #3]
 8003a74:	0151      	lsls	r1, r2, #5
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	440a      	add	r2, r1
 8003a7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a7e:	f043 0320 	orr.w	r3, r3, #32
 8003a82:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003a84:	78fb      	ldrb	r3, [r7, #3]
 8003a86:	015a      	lsls	r2, r3, #5
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a90:	461a      	mov	r2, r3
 8003a92:	2310      	movs	r3, #16
 8003a94:	6093      	str	r3, [r2, #8]
 8003a96:	e000      	b.n	8003a9a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003a98:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003a9a:	3718      	adds	r7, #24
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	78fa      	ldrb	r2, [r7, #3]
 8003abc:	4611      	mov	r1, r2
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f003 fc3f 	bl	8007342 <USB_ReadChInterrupts>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	f003 0304 	and.w	r3, r3, #4
 8003aca:	2b04      	cmp	r3, #4
 8003acc:	d11b      	bne.n	8003b06 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003ace:	78fb      	ldrb	r3, [r7, #3]
 8003ad0:	015a      	lsls	r2, r3, #5
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ada:	461a      	mov	r2, r3
 8003adc:	2304      	movs	r3, #4
 8003ade:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003ae0:	78fa      	ldrb	r2, [r7, #3]
 8003ae2:	6879      	ldr	r1, [r7, #4]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	011b      	lsls	r3, r3, #4
 8003ae8:	1a9b      	subs	r3, r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	440b      	add	r3, r1
 8003aee:	334d      	adds	r3, #77	@ 0x4d
 8003af0:	2207      	movs	r2, #7
 8003af2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	78fa      	ldrb	r2, [r7, #3]
 8003afa:	4611      	mov	r1, r2
 8003afc:	4618      	mov	r0, r3
 8003afe:	f004 f9c4 	bl	8007e8a <USB_HC_Halt>
 8003b02:	f000 bc89 	b.w	8004418 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	78fa      	ldrb	r2, [r7, #3]
 8003b0c:	4611      	mov	r1, r2
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f003 fc17 	bl	8007342 <USB_ReadChInterrupts>
 8003b14:	4603      	mov	r3, r0
 8003b16:	f003 0320 	and.w	r3, r3, #32
 8003b1a:	2b20      	cmp	r3, #32
 8003b1c:	f040 8082 	bne.w	8003c24 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003b20:	78fb      	ldrb	r3, [r7, #3]
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	2320      	movs	r3, #32
 8003b30:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003b32:	78fa      	ldrb	r2, [r7, #3]
 8003b34:	6879      	ldr	r1, [r7, #4]
 8003b36:	4613      	mov	r3, r2
 8003b38:	011b      	lsls	r3, r3, #4
 8003b3a:	1a9b      	subs	r3, r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	440b      	add	r3, r1
 8003b40:	3319      	adds	r3, #25
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d124      	bne.n	8003b92 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003b48:	78fa      	ldrb	r2, [r7, #3]
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	011b      	lsls	r3, r3, #4
 8003b50:	1a9b      	subs	r3, r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	440b      	add	r3, r1
 8003b56:	3319      	adds	r3, #25
 8003b58:	2200      	movs	r2, #0
 8003b5a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b5c:	78fa      	ldrb	r2, [r7, #3]
 8003b5e:	6879      	ldr	r1, [r7, #4]
 8003b60:	4613      	mov	r3, r2
 8003b62:	011b      	lsls	r3, r3, #4
 8003b64:	1a9b      	subs	r3, r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	440b      	add	r3, r1
 8003b6a:	334c      	adds	r3, #76	@ 0x4c
 8003b6c:	2202      	movs	r2, #2
 8003b6e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003b70:	78fa      	ldrb	r2, [r7, #3]
 8003b72:	6879      	ldr	r1, [r7, #4]
 8003b74:	4613      	mov	r3, r2
 8003b76:	011b      	lsls	r3, r3, #4
 8003b78:	1a9b      	subs	r3, r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	440b      	add	r3, r1
 8003b7e:	334d      	adds	r3, #77	@ 0x4d
 8003b80:	2203      	movs	r2, #3
 8003b82:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	78fa      	ldrb	r2, [r7, #3]
 8003b8a:	4611      	mov	r1, r2
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f004 f97c 	bl	8007e8a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003b92:	78fa      	ldrb	r2, [r7, #3]
 8003b94:	6879      	ldr	r1, [r7, #4]
 8003b96:	4613      	mov	r3, r2
 8003b98:	011b      	lsls	r3, r3, #4
 8003b9a:	1a9b      	subs	r3, r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	440b      	add	r3, r1
 8003ba0:	331a      	adds	r3, #26
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	f040 8437 	bne.w	8004418 <HCD_HC_OUT_IRQHandler+0x978>
 8003baa:	78fa      	ldrb	r2, [r7, #3]
 8003bac:	6879      	ldr	r1, [r7, #4]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	1a9b      	subs	r3, r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	440b      	add	r3, r1
 8003bb8:	331b      	adds	r3, #27
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f040 842b 	bne.w	8004418 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003bc2:	78fa      	ldrb	r2, [r7, #3]
 8003bc4:	6879      	ldr	r1, [r7, #4]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	011b      	lsls	r3, r3, #4
 8003bca:	1a9b      	subs	r3, r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	440b      	add	r3, r1
 8003bd0:	3326      	adds	r3, #38	@ 0x26
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d009      	beq.n	8003bec <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003bd8:	78fa      	ldrb	r2, [r7, #3]
 8003bda:	6879      	ldr	r1, [r7, #4]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	011b      	lsls	r3, r3, #4
 8003be0:	1a9b      	subs	r3, r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	331b      	adds	r3, #27
 8003be8:	2201      	movs	r2, #1
 8003bea:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003bec:	78fa      	ldrb	r2, [r7, #3]
 8003bee:	6879      	ldr	r1, [r7, #4]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	011b      	lsls	r3, r3, #4
 8003bf4:	1a9b      	subs	r3, r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	440b      	add	r3, r1
 8003bfa:	334d      	adds	r3, #77	@ 0x4d
 8003bfc:	2203      	movs	r2, #3
 8003bfe:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	78fa      	ldrb	r2, [r7, #3]
 8003c06:	4611      	mov	r1, r2
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f004 f93e 	bl	8007e8a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003c0e:	78fa      	ldrb	r2, [r7, #3]
 8003c10:	6879      	ldr	r1, [r7, #4]
 8003c12:	4613      	mov	r3, r2
 8003c14:	011b      	lsls	r3, r3, #4
 8003c16:	1a9b      	subs	r3, r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	440b      	add	r3, r1
 8003c1c:	3344      	adds	r3, #68	@ 0x44
 8003c1e:	2200      	movs	r2, #0
 8003c20:	601a      	str	r2, [r3, #0]
 8003c22:	e3f9      	b.n	8004418 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	78fa      	ldrb	r2, [r7, #3]
 8003c2a:	4611      	mov	r1, r2
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f003 fb88 	bl	8007342 <USB_ReadChInterrupts>
 8003c32:	4603      	mov	r3, r0
 8003c34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c3c:	d111      	bne.n	8003c62 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003c3e:	78fb      	ldrb	r3, [r7, #3]
 8003c40:	015a      	lsls	r2, r3, #5
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	4413      	add	r3, r2
 8003c46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c50:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	78fa      	ldrb	r2, [r7, #3]
 8003c58:	4611      	mov	r1, r2
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f004 f915 	bl	8007e8a <USB_HC_Halt>
 8003c60:	e3da      	b.n	8004418 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	78fa      	ldrb	r2, [r7, #3]
 8003c68:	4611      	mov	r1, r2
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f003 fb69 	bl	8007342 <USB_ReadChInterrupts>
 8003c70:	4603      	mov	r3, r0
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d168      	bne.n	8003d4c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003c7a:	78fa      	ldrb	r2, [r7, #3]
 8003c7c:	6879      	ldr	r1, [r7, #4]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	011b      	lsls	r3, r3, #4
 8003c82:	1a9b      	subs	r3, r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	440b      	add	r3, r1
 8003c88:	3344      	adds	r3, #68	@ 0x44
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	78fa      	ldrb	r2, [r7, #3]
 8003c94:	4611      	mov	r1, r2
 8003c96:	4618      	mov	r0, r3
 8003c98:	f003 fb53 	bl	8007342 <USB_ReadChInterrupts>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ca2:	2b40      	cmp	r3, #64	@ 0x40
 8003ca4:	d112      	bne.n	8003ccc <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003ca6:	78fa      	ldrb	r2, [r7, #3]
 8003ca8:	6879      	ldr	r1, [r7, #4]
 8003caa:	4613      	mov	r3, r2
 8003cac:	011b      	lsls	r3, r3, #4
 8003cae:	1a9b      	subs	r3, r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	440b      	add	r3, r1
 8003cb4:	3319      	adds	r3, #25
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003cba:	78fb      	ldrb	r3, [r7, #3]
 8003cbc:	015a      	lsls	r2, r3, #5
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	2340      	movs	r3, #64	@ 0x40
 8003cca:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003ccc:	78fa      	ldrb	r2, [r7, #3]
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	011b      	lsls	r3, r3, #4
 8003cd4:	1a9b      	subs	r3, r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	440b      	add	r3, r1
 8003cda:	331b      	adds	r3, #27
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d019      	beq.n	8003d16 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003ce2:	78fa      	ldrb	r2, [r7, #3]
 8003ce4:	6879      	ldr	r1, [r7, #4]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	011b      	lsls	r3, r3, #4
 8003cea:	1a9b      	subs	r3, r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	440b      	add	r3, r1
 8003cf0:	331b      	adds	r3, #27
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003cf6:	78fb      	ldrb	r3, [r7, #3]
 8003cf8:	015a      	lsls	r2, r3, #5
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	78fa      	ldrb	r2, [r7, #3]
 8003d06:	0151      	lsls	r1, r2, #5
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	440a      	add	r2, r1
 8003d0c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003d10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d14:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003d16:	78fb      	ldrb	r3, [r7, #3]
 8003d18:	015a      	lsls	r2, r3, #5
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d22:	461a      	mov	r2, r3
 8003d24:	2301      	movs	r3, #1
 8003d26:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003d28:	78fa      	ldrb	r2, [r7, #3]
 8003d2a:	6879      	ldr	r1, [r7, #4]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	011b      	lsls	r3, r3, #4
 8003d30:	1a9b      	subs	r3, r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	440b      	add	r3, r1
 8003d36:	334d      	adds	r3, #77	@ 0x4d
 8003d38:	2201      	movs	r2, #1
 8003d3a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	78fa      	ldrb	r2, [r7, #3]
 8003d42:	4611      	mov	r1, r2
 8003d44:	4618      	mov	r0, r3
 8003d46:	f004 f8a0 	bl	8007e8a <USB_HC_Halt>
 8003d4a:	e365      	b.n	8004418 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	78fa      	ldrb	r2, [r7, #3]
 8003d52:	4611      	mov	r1, r2
 8003d54:	4618      	mov	r0, r3
 8003d56:	f003 faf4 	bl	8007342 <USB_ReadChInterrupts>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d60:	2b40      	cmp	r3, #64	@ 0x40
 8003d62:	d139      	bne.n	8003dd8 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003d64:	78fa      	ldrb	r2, [r7, #3]
 8003d66:	6879      	ldr	r1, [r7, #4]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	011b      	lsls	r3, r3, #4
 8003d6c:	1a9b      	subs	r3, r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	334d      	adds	r3, #77	@ 0x4d
 8003d74:	2205      	movs	r2, #5
 8003d76:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003d78:	78fa      	ldrb	r2, [r7, #3]
 8003d7a:	6879      	ldr	r1, [r7, #4]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	011b      	lsls	r3, r3, #4
 8003d80:	1a9b      	subs	r3, r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	440b      	add	r3, r1
 8003d86:	331a      	adds	r3, #26
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d109      	bne.n	8003da2 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003d8e:	78fa      	ldrb	r2, [r7, #3]
 8003d90:	6879      	ldr	r1, [r7, #4]
 8003d92:	4613      	mov	r3, r2
 8003d94:	011b      	lsls	r3, r3, #4
 8003d96:	1a9b      	subs	r3, r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	440b      	add	r3, r1
 8003d9c:	3319      	adds	r3, #25
 8003d9e:	2201      	movs	r2, #1
 8003da0:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003da2:	78fa      	ldrb	r2, [r7, #3]
 8003da4:	6879      	ldr	r1, [r7, #4]
 8003da6:	4613      	mov	r3, r2
 8003da8:	011b      	lsls	r3, r3, #4
 8003daa:	1a9b      	subs	r3, r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	440b      	add	r3, r1
 8003db0:	3344      	adds	r3, #68	@ 0x44
 8003db2:	2200      	movs	r2, #0
 8003db4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	78fa      	ldrb	r2, [r7, #3]
 8003dbc:	4611      	mov	r1, r2
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f004 f863 	bl	8007e8a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003dc4:	78fb      	ldrb	r3, [r7, #3]
 8003dc6:	015a      	lsls	r2, r3, #5
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	4413      	add	r3, r2
 8003dcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	2340      	movs	r3, #64	@ 0x40
 8003dd4:	6093      	str	r3, [r2, #8]
 8003dd6:	e31f      	b.n	8004418 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	78fa      	ldrb	r2, [r7, #3]
 8003dde:	4611      	mov	r1, r2
 8003de0:	4618      	mov	r0, r3
 8003de2:	f003 faae 	bl	8007342 <USB_ReadChInterrupts>
 8003de6:	4603      	mov	r3, r0
 8003de8:	f003 0308 	and.w	r3, r3, #8
 8003dec:	2b08      	cmp	r3, #8
 8003dee:	d11a      	bne.n	8003e26 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003df0:	78fb      	ldrb	r3, [r7, #3]
 8003df2:	015a      	lsls	r2, r3, #5
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	4413      	add	r3, r2
 8003df8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	2308      	movs	r3, #8
 8003e00:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003e02:	78fa      	ldrb	r2, [r7, #3]
 8003e04:	6879      	ldr	r1, [r7, #4]
 8003e06:	4613      	mov	r3, r2
 8003e08:	011b      	lsls	r3, r3, #4
 8003e0a:	1a9b      	subs	r3, r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	440b      	add	r3, r1
 8003e10:	334d      	adds	r3, #77	@ 0x4d
 8003e12:	2206      	movs	r2, #6
 8003e14:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	78fa      	ldrb	r2, [r7, #3]
 8003e1c:	4611      	mov	r1, r2
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f004 f833 	bl	8007e8a <USB_HC_Halt>
 8003e24:	e2f8      	b.n	8004418 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	78fa      	ldrb	r2, [r7, #3]
 8003e2c:	4611      	mov	r1, r2
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f003 fa87 	bl	8007342 <USB_ReadChInterrupts>
 8003e34:	4603      	mov	r3, r0
 8003e36:	f003 0310 	and.w	r3, r3, #16
 8003e3a:	2b10      	cmp	r3, #16
 8003e3c:	d144      	bne.n	8003ec8 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003e3e:	78fa      	ldrb	r2, [r7, #3]
 8003e40:	6879      	ldr	r1, [r7, #4]
 8003e42:	4613      	mov	r3, r2
 8003e44:	011b      	lsls	r3, r3, #4
 8003e46:	1a9b      	subs	r3, r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	440b      	add	r3, r1
 8003e4c:	3344      	adds	r3, #68	@ 0x44
 8003e4e:	2200      	movs	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003e52:	78fa      	ldrb	r2, [r7, #3]
 8003e54:	6879      	ldr	r1, [r7, #4]
 8003e56:	4613      	mov	r3, r2
 8003e58:	011b      	lsls	r3, r3, #4
 8003e5a:	1a9b      	subs	r3, r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	440b      	add	r3, r1
 8003e60:	334d      	adds	r3, #77	@ 0x4d
 8003e62:	2204      	movs	r2, #4
 8003e64:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003e66:	78fa      	ldrb	r2, [r7, #3]
 8003e68:	6879      	ldr	r1, [r7, #4]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	011b      	lsls	r3, r3, #4
 8003e6e:	1a9b      	subs	r3, r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	440b      	add	r3, r1
 8003e74:	3319      	adds	r3, #25
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d114      	bne.n	8003ea6 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003e7c:	78fa      	ldrb	r2, [r7, #3]
 8003e7e:	6879      	ldr	r1, [r7, #4]
 8003e80:	4613      	mov	r3, r2
 8003e82:	011b      	lsls	r3, r3, #4
 8003e84:	1a9b      	subs	r3, r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	440b      	add	r3, r1
 8003e8a:	3318      	adds	r3, #24
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d109      	bne.n	8003ea6 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003e92:	78fa      	ldrb	r2, [r7, #3]
 8003e94:	6879      	ldr	r1, [r7, #4]
 8003e96:	4613      	mov	r3, r2
 8003e98:	011b      	lsls	r3, r3, #4
 8003e9a:	1a9b      	subs	r3, r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	440b      	add	r3, r1
 8003ea0:	3319      	adds	r3, #25
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	78fa      	ldrb	r2, [r7, #3]
 8003eac:	4611      	mov	r1, r2
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f003 ffeb 	bl	8007e8a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003eb4:	78fb      	ldrb	r3, [r7, #3]
 8003eb6:	015a      	lsls	r2, r3, #5
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	4413      	add	r3, r2
 8003ebc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	2310      	movs	r3, #16
 8003ec4:	6093      	str	r3, [r2, #8]
 8003ec6:	e2a7      	b.n	8004418 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	78fa      	ldrb	r2, [r7, #3]
 8003ece:	4611      	mov	r1, r2
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f003 fa36 	bl	8007342 <USB_ReadChInterrupts>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003edc:	2b80      	cmp	r3, #128	@ 0x80
 8003ede:	f040 8083 	bne.w	8003fe8 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	799b      	ldrb	r3, [r3, #6]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d111      	bne.n	8003f0e <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003eea:	78fa      	ldrb	r2, [r7, #3]
 8003eec:	6879      	ldr	r1, [r7, #4]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	011b      	lsls	r3, r3, #4
 8003ef2:	1a9b      	subs	r3, r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	440b      	add	r3, r1
 8003ef8:	334d      	adds	r3, #77	@ 0x4d
 8003efa:	2207      	movs	r2, #7
 8003efc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	78fa      	ldrb	r2, [r7, #3]
 8003f04:	4611      	mov	r1, r2
 8003f06:	4618      	mov	r0, r3
 8003f08:	f003 ffbf 	bl	8007e8a <USB_HC_Halt>
 8003f0c:	e062      	b.n	8003fd4 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003f0e:	78fa      	ldrb	r2, [r7, #3]
 8003f10:	6879      	ldr	r1, [r7, #4]
 8003f12:	4613      	mov	r3, r2
 8003f14:	011b      	lsls	r3, r3, #4
 8003f16:	1a9b      	subs	r3, r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	440b      	add	r3, r1
 8003f1c:	3344      	adds	r3, #68	@ 0x44
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	1c59      	adds	r1, r3, #1
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	4613      	mov	r3, r2
 8003f26:	011b      	lsls	r3, r3, #4
 8003f28:	1a9b      	subs	r3, r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	4403      	add	r3, r0
 8003f2e:	3344      	adds	r3, #68	@ 0x44
 8003f30:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003f32:	78fa      	ldrb	r2, [r7, #3]
 8003f34:	6879      	ldr	r1, [r7, #4]
 8003f36:	4613      	mov	r3, r2
 8003f38:	011b      	lsls	r3, r3, #4
 8003f3a:	1a9b      	subs	r3, r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	440b      	add	r3, r1
 8003f40:	3344      	adds	r3, #68	@ 0x44
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d922      	bls.n	8003f8e <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003f48:	78fa      	ldrb	r2, [r7, #3]
 8003f4a:	6879      	ldr	r1, [r7, #4]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	011b      	lsls	r3, r3, #4
 8003f50:	1a9b      	subs	r3, r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	440b      	add	r3, r1
 8003f56:	3344      	adds	r3, #68	@ 0x44
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003f5c:	78fa      	ldrb	r2, [r7, #3]
 8003f5e:	6879      	ldr	r1, [r7, #4]
 8003f60:	4613      	mov	r3, r2
 8003f62:	011b      	lsls	r3, r3, #4
 8003f64:	1a9b      	subs	r3, r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	440b      	add	r3, r1
 8003f6a:	334c      	adds	r3, #76	@ 0x4c
 8003f6c:	2204      	movs	r2, #4
 8003f6e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003f70:	78fa      	ldrb	r2, [r7, #3]
 8003f72:	6879      	ldr	r1, [r7, #4]
 8003f74:	4613      	mov	r3, r2
 8003f76:	011b      	lsls	r3, r3, #4
 8003f78:	1a9b      	subs	r3, r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	440b      	add	r3, r1
 8003f7e:	334c      	adds	r3, #76	@ 0x4c
 8003f80:	781a      	ldrb	r2, [r3, #0]
 8003f82:	78fb      	ldrb	r3, [r7, #3]
 8003f84:	4619      	mov	r1, r3
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f006 fad8 	bl	800a53c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003f8c:	e022      	b.n	8003fd4 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003f8e:	78fa      	ldrb	r2, [r7, #3]
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	4613      	mov	r3, r2
 8003f94:	011b      	lsls	r3, r3, #4
 8003f96:	1a9b      	subs	r3, r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	440b      	add	r3, r1
 8003f9c:	334c      	adds	r3, #76	@ 0x4c
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003fa2:	78fb      	ldrb	r3, [r7, #3]
 8003fa4:	015a      	lsls	r2, r3, #5
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	4413      	add	r3, r2
 8003faa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003fb8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003fc0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003fc2:	78fb      	ldrb	r3, [r7, #3]
 8003fc4:	015a      	lsls	r2, r3, #5
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	4413      	add	r3, r2
 8003fca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fce:	461a      	mov	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003fd4:	78fb      	ldrb	r3, [r7, #3]
 8003fd6:	015a      	lsls	r2, r3, #5
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	4413      	add	r3, r2
 8003fdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	2380      	movs	r3, #128	@ 0x80
 8003fe4:	6093      	str	r3, [r2, #8]
 8003fe6:	e217      	b.n	8004418 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	78fa      	ldrb	r2, [r7, #3]
 8003fee:	4611      	mov	r1, r2
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f003 f9a6 	bl	8007342 <USB_ReadChInterrupts>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ffc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004000:	d11b      	bne.n	800403a <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004002:	78fa      	ldrb	r2, [r7, #3]
 8004004:	6879      	ldr	r1, [r7, #4]
 8004006:	4613      	mov	r3, r2
 8004008:	011b      	lsls	r3, r3, #4
 800400a:	1a9b      	subs	r3, r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	440b      	add	r3, r1
 8004010:	334d      	adds	r3, #77	@ 0x4d
 8004012:	2209      	movs	r2, #9
 8004014:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	78fa      	ldrb	r2, [r7, #3]
 800401c:	4611      	mov	r1, r2
 800401e:	4618      	mov	r0, r3
 8004020:	f003 ff33 	bl	8007e8a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004024:	78fb      	ldrb	r3, [r7, #3]
 8004026:	015a      	lsls	r2, r3, #5
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	4413      	add	r3, r2
 800402c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004030:	461a      	mov	r2, r3
 8004032:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004036:	6093      	str	r3, [r2, #8]
 8004038:	e1ee      	b.n	8004418 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	78fa      	ldrb	r2, [r7, #3]
 8004040:	4611      	mov	r1, r2
 8004042:	4618      	mov	r0, r3
 8004044:	f003 f97d 	bl	8007342 <USB_ReadChInterrupts>
 8004048:	4603      	mov	r3, r0
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b02      	cmp	r3, #2
 8004050:	f040 81df 	bne.w	8004412 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004054:	78fb      	ldrb	r3, [r7, #3]
 8004056:	015a      	lsls	r2, r3, #5
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	4413      	add	r3, r2
 800405c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004060:	461a      	mov	r2, r3
 8004062:	2302      	movs	r3, #2
 8004064:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004066:	78fa      	ldrb	r2, [r7, #3]
 8004068:	6879      	ldr	r1, [r7, #4]
 800406a:	4613      	mov	r3, r2
 800406c:	011b      	lsls	r3, r3, #4
 800406e:	1a9b      	subs	r3, r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	440b      	add	r3, r1
 8004074:	334d      	adds	r3, #77	@ 0x4d
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	2b01      	cmp	r3, #1
 800407a:	f040 8093 	bne.w	80041a4 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800407e:	78fa      	ldrb	r2, [r7, #3]
 8004080:	6879      	ldr	r1, [r7, #4]
 8004082:	4613      	mov	r3, r2
 8004084:	011b      	lsls	r3, r3, #4
 8004086:	1a9b      	subs	r3, r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	440b      	add	r3, r1
 800408c:	334d      	adds	r3, #77	@ 0x4d
 800408e:	2202      	movs	r2, #2
 8004090:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004092:	78fa      	ldrb	r2, [r7, #3]
 8004094:	6879      	ldr	r1, [r7, #4]
 8004096:	4613      	mov	r3, r2
 8004098:	011b      	lsls	r3, r3, #4
 800409a:	1a9b      	subs	r3, r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	440b      	add	r3, r1
 80040a0:	334c      	adds	r3, #76	@ 0x4c
 80040a2:	2201      	movs	r2, #1
 80040a4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80040a6:	78fa      	ldrb	r2, [r7, #3]
 80040a8:	6879      	ldr	r1, [r7, #4]
 80040aa:	4613      	mov	r3, r2
 80040ac:	011b      	lsls	r3, r3, #4
 80040ae:	1a9b      	subs	r3, r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	440b      	add	r3, r1
 80040b4:	3326      	adds	r3, #38	@ 0x26
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d00b      	beq.n	80040d4 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80040bc:	78fa      	ldrb	r2, [r7, #3]
 80040be:	6879      	ldr	r1, [r7, #4]
 80040c0:	4613      	mov	r3, r2
 80040c2:	011b      	lsls	r3, r3, #4
 80040c4:	1a9b      	subs	r3, r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	440b      	add	r3, r1
 80040ca:	3326      	adds	r3, #38	@ 0x26
 80040cc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80040ce:	2b03      	cmp	r3, #3
 80040d0:	f040 8190 	bne.w	80043f4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	799b      	ldrb	r3, [r3, #6]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d115      	bne.n	8004108 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80040dc:	78fa      	ldrb	r2, [r7, #3]
 80040de:	6879      	ldr	r1, [r7, #4]
 80040e0:	4613      	mov	r3, r2
 80040e2:	011b      	lsls	r3, r3, #4
 80040e4:	1a9b      	subs	r3, r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	440b      	add	r3, r1
 80040ea:	333d      	adds	r3, #61	@ 0x3d
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	78fa      	ldrb	r2, [r7, #3]
 80040f0:	f083 0301 	eor.w	r3, r3, #1
 80040f4:	b2d8      	uxtb	r0, r3
 80040f6:	6879      	ldr	r1, [r7, #4]
 80040f8:	4613      	mov	r3, r2
 80040fa:	011b      	lsls	r3, r3, #4
 80040fc:	1a9b      	subs	r3, r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	440b      	add	r3, r1
 8004102:	333d      	adds	r3, #61	@ 0x3d
 8004104:	4602      	mov	r2, r0
 8004106:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	799b      	ldrb	r3, [r3, #6]
 800410c:	2b01      	cmp	r3, #1
 800410e:	f040 8171 	bne.w	80043f4 <HCD_HC_OUT_IRQHandler+0x954>
 8004112:	78fa      	ldrb	r2, [r7, #3]
 8004114:	6879      	ldr	r1, [r7, #4]
 8004116:	4613      	mov	r3, r2
 8004118:	011b      	lsls	r3, r3, #4
 800411a:	1a9b      	subs	r3, r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	440b      	add	r3, r1
 8004120:	3334      	adds	r3, #52	@ 0x34
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 8165 	beq.w	80043f4 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800412a:	78fa      	ldrb	r2, [r7, #3]
 800412c:	6879      	ldr	r1, [r7, #4]
 800412e:	4613      	mov	r3, r2
 8004130:	011b      	lsls	r3, r3, #4
 8004132:	1a9b      	subs	r3, r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	440b      	add	r3, r1
 8004138:	3334      	adds	r3, #52	@ 0x34
 800413a:	6819      	ldr	r1, [r3, #0]
 800413c:	78fa      	ldrb	r2, [r7, #3]
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	4613      	mov	r3, r2
 8004142:	011b      	lsls	r3, r3, #4
 8004144:	1a9b      	subs	r3, r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4403      	add	r3, r0
 800414a:	3328      	adds	r3, #40	@ 0x28
 800414c:	881b      	ldrh	r3, [r3, #0]
 800414e:	440b      	add	r3, r1
 8004150:	1e59      	subs	r1, r3, #1
 8004152:	78fa      	ldrb	r2, [r7, #3]
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	4613      	mov	r3, r2
 8004158:	011b      	lsls	r3, r3, #4
 800415a:	1a9b      	subs	r3, r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	4403      	add	r3, r0
 8004160:	3328      	adds	r3, #40	@ 0x28
 8004162:	881b      	ldrh	r3, [r3, #0]
 8004164:	fbb1 f3f3 	udiv	r3, r1, r3
 8004168:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 813f 	beq.w	80043f4 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004176:	78fa      	ldrb	r2, [r7, #3]
 8004178:	6879      	ldr	r1, [r7, #4]
 800417a:	4613      	mov	r3, r2
 800417c:	011b      	lsls	r3, r3, #4
 800417e:	1a9b      	subs	r3, r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	440b      	add	r3, r1
 8004184:	333d      	adds	r3, #61	@ 0x3d
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	78fa      	ldrb	r2, [r7, #3]
 800418a:	f083 0301 	eor.w	r3, r3, #1
 800418e:	b2d8      	uxtb	r0, r3
 8004190:	6879      	ldr	r1, [r7, #4]
 8004192:	4613      	mov	r3, r2
 8004194:	011b      	lsls	r3, r3, #4
 8004196:	1a9b      	subs	r3, r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	440b      	add	r3, r1
 800419c:	333d      	adds	r3, #61	@ 0x3d
 800419e:	4602      	mov	r2, r0
 80041a0:	701a      	strb	r2, [r3, #0]
 80041a2:	e127      	b.n	80043f4 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80041a4:	78fa      	ldrb	r2, [r7, #3]
 80041a6:	6879      	ldr	r1, [r7, #4]
 80041a8:	4613      	mov	r3, r2
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	1a9b      	subs	r3, r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	440b      	add	r3, r1
 80041b2:	334d      	adds	r3, #77	@ 0x4d
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	2b03      	cmp	r3, #3
 80041b8:	d120      	bne.n	80041fc <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80041ba:	78fa      	ldrb	r2, [r7, #3]
 80041bc:	6879      	ldr	r1, [r7, #4]
 80041be:	4613      	mov	r3, r2
 80041c0:	011b      	lsls	r3, r3, #4
 80041c2:	1a9b      	subs	r3, r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	440b      	add	r3, r1
 80041c8:	334d      	adds	r3, #77	@ 0x4d
 80041ca:	2202      	movs	r2, #2
 80041cc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80041ce:	78fa      	ldrb	r2, [r7, #3]
 80041d0:	6879      	ldr	r1, [r7, #4]
 80041d2:	4613      	mov	r3, r2
 80041d4:	011b      	lsls	r3, r3, #4
 80041d6:	1a9b      	subs	r3, r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	440b      	add	r3, r1
 80041dc:	331b      	adds	r3, #27
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	f040 8107 	bne.w	80043f4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80041e6:	78fa      	ldrb	r2, [r7, #3]
 80041e8:	6879      	ldr	r1, [r7, #4]
 80041ea:	4613      	mov	r3, r2
 80041ec:	011b      	lsls	r3, r3, #4
 80041ee:	1a9b      	subs	r3, r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	440b      	add	r3, r1
 80041f4:	334c      	adds	r3, #76	@ 0x4c
 80041f6:	2202      	movs	r2, #2
 80041f8:	701a      	strb	r2, [r3, #0]
 80041fa:	e0fb      	b.n	80043f4 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80041fc:	78fa      	ldrb	r2, [r7, #3]
 80041fe:	6879      	ldr	r1, [r7, #4]
 8004200:	4613      	mov	r3, r2
 8004202:	011b      	lsls	r3, r3, #4
 8004204:	1a9b      	subs	r3, r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	440b      	add	r3, r1
 800420a:	334d      	adds	r3, #77	@ 0x4d
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	2b04      	cmp	r3, #4
 8004210:	d13a      	bne.n	8004288 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004212:	78fa      	ldrb	r2, [r7, #3]
 8004214:	6879      	ldr	r1, [r7, #4]
 8004216:	4613      	mov	r3, r2
 8004218:	011b      	lsls	r3, r3, #4
 800421a:	1a9b      	subs	r3, r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	440b      	add	r3, r1
 8004220:	334d      	adds	r3, #77	@ 0x4d
 8004222:	2202      	movs	r2, #2
 8004224:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004226:	78fa      	ldrb	r2, [r7, #3]
 8004228:	6879      	ldr	r1, [r7, #4]
 800422a:	4613      	mov	r3, r2
 800422c:	011b      	lsls	r3, r3, #4
 800422e:	1a9b      	subs	r3, r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	440b      	add	r3, r1
 8004234:	334c      	adds	r3, #76	@ 0x4c
 8004236:	2202      	movs	r2, #2
 8004238:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800423a:	78fa      	ldrb	r2, [r7, #3]
 800423c:	6879      	ldr	r1, [r7, #4]
 800423e:	4613      	mov	r3, r2
 8004240:	011b      	lsls	r3, r3, #4
 8004242:	1a9b      	subs	r3, r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	440b      	add	r3, r1
 8004248:	331b      	adds	r3, #27
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	2b01      	cmp	r3, #1
 800424e:	f040 80d1 	bne.w	80043f4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004252:	78fa      	ldrb	r2, [r7, #3]
 8004254:	6879      	ldr	r1, [r7, #4]
 8004256:	4613      	mov	r3, r2
 8004258:	011b      	lsls	r3, r3, #4
 800425a:	1a9b      	subs	r3, r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	440b      	add	r3, r1
 8004260:	331b      	adds	r3, #27
 8004262:	2200      	movs	r2, #0
 8004264:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004266:	78fb      	ldrb	r3, [r7, #3]
 8004268:	015a      	lsls	r2, r3, #5
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	4413      	add	r3, r2
 800426e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	78fa      	ldrb	r2, [r7, #3]
 8004276:	0151      	lsls	r1, r2, #5
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	440a      	add	r2, r1
 800427c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004280:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004284:	6053      	str	r3, [r2, #4]
 8004286:	e0b5      	b.n	80043f4 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004288:	78fa      	ldrb	r2, [r7, #3]
 800428a:	6879      	ldr	r1, [r7, #4]
 800428c:	4613      	mov	r3, r2
 800428e:	011b      	lsls	r3, r3, #4
 8004290:	1a9b      	subs	r3, r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	440b      	add	r3, r1
 8004296:	334d      	adds	r3, #77	@ 0x4d
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	2b05      	cmp	r3, #5
 800429c:	d114      	bne.n	80042c8 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800429e:	78fa      	ldrb	r2, [r7, #3]
 80042a0:	6879      	ldr	r1, [r7, #4]
 80042a2:	4613      	mov	r3, r2
 80042a4:	011b      	lsls	r3, r3, #4
 80042a6:	1a9b      	subs	r3, r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	440b      	add	r3, r1
 80042ac:	334d      	adds	r3, #77	@ 0x4d
 80042ae:	2202      	movs	r2, #2
 80042b0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80042b2:	78fa      	ldrb	r2, [r7, #3]
 80042b4:	6879      	ldr	r1, [r7, #4]
 80042b6:	4613      	mov	r3, r2
 80042b8:	011b      	lsls	r3, r3, #4
 80042ba:	1a9b      	subs	r3, r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	440b      	add	r3, r1
 80042c0:	334c      	adds	r3, #76	@ 0x4c
 80042c2:	2202      	movs	r2, #2
 80042c4:	701a      	strb	r2, [r3, #0]
 80042c6:	e095      	b.n	80043f4 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80042c8:	78fa      	ldrb	r2, [r7, #3]
 80042ca:	6879      	ldr	r1, [r7, #4]
 80042cc:	4613      	mov	r3, r2
 80042ce:	011b      	lsls	r3, r3, #4
 80042d0:	1a9b      	subs	r3, r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	440b      	add	r3, r1
 80042d6:	334d      	adds	r3, #77	@ 0x4d
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	2b06      	cmp	r3, #6
 80042dc:	d114      	bne.n	8004308 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80042de:	78fa      	ldrb	r2, [r7, #3]
 80042e0:	6879      	ldr	r1, [r7, #4]
 80042e2:	4613      	mov	r3, r2
 80042e4:	011b      	lsls	r3, r3, #4
 80042e6:	1a9b      	subs	r3, r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	440b      	add	r3, r1
 80042ec:	334d      	adds	r3, #77	@ 0x4d
 80042ee:	2202      	movs	r2, #2
 80042f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80042f2:	78fa      	ldrb	r2, [r7, #3]
 80042f4:	6879      	ldr	r1, [r7, #4]
 80042f6:	4613      	mov	r3, r2
 80042f8:	011b      	lsls	r3, r3, #4
 80042fa:	1a9b      	subs	r3, r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	440b      	add	r3, r1
 8004300:	334c      	adds	r3, #76	@ 0x4c
 8004302:	2205      	movs	r2, #5
 8004304:	701a      	strb	r2, [r3, #0]
 8004306:	e075      	b.n	80043f4 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004308:	78fa      	ldrb	r2, [r7, #3]
 800430a:	6879      	ldr	r1, [r7, #4]
 800430c:	4613      	mov	r3, r2
 800430e:	011b      	lsls	r3, r3, #4
 8004310:	1a9b      	subs	r3, r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	440b      	add	r3, r1
 8004316:	334d      	adds	r3, #77	@ 0x4d
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	2b07      	cmp	r3, #7
 800431c:	d00a      	beq.n	8004334 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800431e:	78fa      	ldrb	r2, [r7, #3]
 8004320:	6879      	ldr	r1, [r7, #4]
 8004322:	4613      	mov	r3, r2
 8004324:	011b      	lsls	r3, r3, #4
 8004326:	1a9b      	subs	r3, r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	440b      	add	r3, r1
 800432c:	334d      	adds	r3, #77	@ 0x4d
 800432e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004330:	2b09      	cmp	r3, #9
 8004332:	d170      	bne.n	8004416 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004334:	78fa      	ldrb	r2, [r7, #3]
 8004336:	6879      	ldr	r1, [r7, #4]
 8004338:	4613      	mov	r3, r2
 800433a:	011b      	lsls	r3, r3, #4
 800433c:	1a9b      	subs	r3, r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	440b      	add	r3, r1
 8004342:	334d      	adds	r3, #77	@ 0x4d
 8004344:	2202      	movs	r2, #2
 8004346:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004348:	78fa      	ldrb	r2, [r7, #3]
 800434a:	6879      	ldr	r1, [r7, #4]
 800434c:	4613      	mov	r3, r2
 800434e:	011b      	lsls	r3, r3, #4
 8004350:	1a9b      	subs	r3, r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	440b      	add	r3, r1
 8004356:	3344      	adds	r3, #68	@ 0x44
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	1c59      	adds	r1, r3, #1
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	4613      	mov	r3, r2
 8004360:	011b      	lsls	r3, r3, #4
 8004362:	1a9b      	subs	r3, r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	4403      	add	r3, r0
 8004368:	3344      	adds	r3, #68	@ 0x44
 800436a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800436c:	78fa      	ldrb	r2, [r7, #3]
 800436e:	6879      	ldr	r1, [r7, #4]
 8004370:	4613      	mov	r3, r2
 8004372:	011b      	lsls	r3, r3, #4
 8004374:	1a9b      	subs	r3, r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	440b      	add	r3, r1
 800437a:	3344      	adds	r3, #68	@ 0x44
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2b02      	cmp	r3, #2
 8004380:	d914      	bls.n	80043ac <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004382:	78fa      	ldrb	r2, [r7, #3]
 8004384:	6879      	ldr	r1, [r7, #4]
 8004386:	4613      	mov	r3, r2
 8004388:	011b      	lsls	r3, r3, #4
 800438a:	1a9b      	subs	r3, r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	440b      	add	r3, r1
 8004390:	3344      	adds	r3, #68	@ 0x44
 8004392:	2200      	movs	r2, #0
 8004394:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004396:	78fa      	ldrb	r2, [r7, #3]
 8004398:	6879      	ldr	r1, [r7, #4]
 800439a:	4613      	mov	r3, r2
 800439c:	011b      	lsls	r3, r3, #4
 800439e:	1a9b      	subs	r3, r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	440b      	add	r3, r1
 80043a4:	334c      	adds	r3, #76	@ 0x4c
 80043a6:	2204      	movs	r2, #4
 80043a8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80043aa:	e022      	b.n	80043f2 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80043ac:	78fa      	ldrb	r2, [r7, #3]
 80043ae:	6879      	ldr	r1, [r7, #4]
 80043b0:	4613      	mov	r3, r2
 80043b2:	011b      	lsls	r3, r3, #4
 80043b4:	1a9b      	subs	r3, r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	440b      	add	r3, r1
 80043ba:	334c      	adds	r3, #76	@ 0x4c
 80043bc:	2202      	movs	r2, #2
 80043be:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80043c0:	78fb      	ldrb	r3, [r7, #3]
 80043c2:	015a      	lsls	r2, r3, #5
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	4413      	add	r3, r2
 80043c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80043d6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80043de:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80043e0:	78fb      	ldrb	r3, [r7, #3]
 80043e2:	015a      	lsls	r2, r3, #5
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	4413      	add	r3, r2
 80043e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043ec:	461a      	mov	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80043f2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80043f4:	78fa      	ldrb	r2, [r7, #3]
 80043f6:	6879      	ldr	r1, [r7, #4]
 80043f8:	4613      	mov	r3, r2
 80043fa:	011b      	lsls	r3, r3, #4
 80043fc:	1a9b      	subs	r3, r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	440b      	add	r3, r1
 8004402:	334c      	adds	r3, #76	@ 0x4c
 8004404:	781a      	ldrb	r2, [r3, #0]
 8004406:	78fb      	ldrb	r3, [r7, #3]
 8004408:	4619      	mov	r1, r3
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f006 f896 	bl	800a53c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004410:	e002      	b.n	8004418 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004412:	bf00      	nop
 8004414:	e000      	b.n	8004418 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8004416:	bf00      	nop
  }
}
 8004418:	3718      	adds	r7, #24
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b08a      	sub	sp, #40	@ 0x28
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800442c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800442e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	f003 030f 	and.w	r3, r3, #15
 800443e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	0c5b      	lsrs	r3, r3, #17
 8004444:	f003 030f 	and.w	r3, r3, #15
 8004448:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	091b      	lsrs	r3, r3, #4
 800444e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004452:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	2b02      	cmp	r3, #2
 8004458:	d004      	beq.n	8004464 <HCD_RXQLVL_IRQHandler+0x46>
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	2b05      	cmp	r3, #5
 800445e:	f000 80b6 	beq.w	80045ce <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004462:	e0b7      	b.n	80045d4 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	2b00      	cmp	r3, #0
 8004468:	f000 80b3 	beq.w	80045d2 <HCD_RXQLVL_IRQHandler+0x1b4>
 800446c:	6879      	ldr	r1, [r7, #4]
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	4613      	mov	r3, r2
 8004472:	011b      	lsls	r3, r3, #4
 8004474:	1a9b      	subs	r3, r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	440b      	add	r3, r1
 800447a:	332c      	adds	r3, #44	@ 0x2c
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	f000 80a7 	beq.w	80045d2 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004484:	6879      	ldr	r1, [r7, #4]
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	4613      	mov	r3, r2
 800448a:	011b      	lsls	r3, r3, #4
 800448c:	1a9b      	subs	r3, r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	440b      	add	r3, r1
 8004492:	3338      	adds	r3, #56	@ 0x38
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	18d1      	adds	r1, r2, r3
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	4613      	mov	r3, r2
 80044a0:	011b      	lsls	r3, r3, #4
 80044a2:	1a9b      	subs	r3, r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	4403      	add	r3, r0
 80044a8:	3334      	adds	r3, #52	@ 0x34
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4299      	cmp	r1, r3
 80044ae:	f200 8083 	bhi.w	80045b8 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6818      	ldr	r0, [r3, #0]
 80044b6:	6879      	ldr	r1, [r7, #4]
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	4613      	mov	r3, r2
 80044bc:	011b      	lsls	r3, r3, #4
 80044be:	1a9b      	subs	r3, r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	440b      	add	r3, r1
 80044c4:	332c      	adds	r3, #44	@ 0x2c
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	b292      	uxth	r2, r2
 80044cc:	4619      	mov	r1, r3
 80044ce:	f002 fecd 	bl	800726c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80044d2:	6879      	ldr	r1, [r7, #4]
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	4613      	mov	r3, r2
 80044d8:	011b      	lsls	r3, r3, #4
 80044da:	1a9b      	subs	r3, r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	440b      	add	r3, r1
 80044e0:	332c      	adds	r3, #44	@ 0x2c
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	18d1      	adds	r1, r2, r3
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	69ba      	ldr	r2, [r7, #24]
 80044ec:	4613      	mov	r3, r2
 80044ee:	011b      	lsls	r3, r3, #4
 80044f0:	1a9b      	subs	r3, r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4403      	add	r3, r0
 80044f6:	332c      	adds	r3, #44	@ 0x2c
 80044f8:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80044fa:	6879      	ldr	r1, [r7, #4]
 80044fc:	69ba      	ldr	r2, [r7, #24]
 80044fe:	4613      	mov	r3, r2
 8004500:	011b      	lsls	r3, r3, #4
 8004502:	1a9b      	subs	r3, r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	440b      	add	r3, r1
 8004508:	3338      	adds	r3, #56	@ 0x38
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	18d1      	adds	r1, r2, r3
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	4613      	mov	r3, r2
 8004516:	011b      	lsls	r3, r3, #4
 8004518:	1a9b      	subs	r3, r3, r2
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	4403      	add	r3, r0
 800451e:	3338      	adds	r3, #56	@ 0x38
 8004520:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	015a      	lsls	r2, r3, #5
 8004526:	6a3b      	ldr	r3, [r7, #32]
 8004528:	4413      	add	r3, r2
 800452a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	0cdb      	lsrs	r3, r3, #19
 8004532:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004536:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004538:	6879      	ldr	r1, [r7, #4]
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	4613      	mov	r3, r2
 800453e:	011b      	lsls	r3, r3, #4
 8004540:	1a9b      	subs	r3, r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	440b      	add	r3, r1
 8004546:	3328      	adds	r3, #40	@ 0x28
 8004548:	881b      	ldrh	r3, [r3, #0]
 800454a:	461a      	mov	r2, r3
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	4293      	cmp	r3, r2
 8004550:	d13f      	bne.n	80045d2 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d03c      	beq.n	80045d2 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	015a      	lsls	r2, r3, #5
 800455c:	6a3b      	ldr	r3, [r7, #32]
 800455e:	4413      	add	r3, r2
 8004560:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800456e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004576:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	015a      	lsls	r2, r3, #5
 800457c:	6a3b      	ldr	r3, [r7, #32]
 800457e:	4413      	add	r3, r2
 8004580:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004584:	461a      	mov	r2, r3
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800458a:	6879      	ldr	r1, [r7, #4]
 800458c:	69ba      	ldr	r2, [r7, #24]
 800458e:	4613      	mov	r3, r2
 8004590:	011b      	lsls	r3, r3, #4
 8004592:	1a9b      	subs	r3, r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	440b      	add	r3, r1
 8004598:	333c      	adds	r3, #60	@ 0x3c
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	f083 0301 	eor.w	r3, r3, #1
 80045a0:	b2d8      	uxtb	r0, r3
 80045a2:	6879      	ldr	r1, [r7, #4]
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	4613      	mov	r3, r2
 80045a8:	011b      	lsls	r3, r3, #4
 80045aa:	1a9b      	subs	r3, r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	440b      	add	r3, r1
 80045b0:	333c      	adds	r3, #60	@ 0x3c
 80045b2:	4602      	mov	r2, r0
 80045b4:	701a      	strb	r2, [r3, #0]
      break;
 80045b6:	e00c      	b.n	80045d2 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80045b8:	6879      	ldr	r1, [r7, #4]
 80045ba:	69ba      	ldr	r2, [r7, #24]
 80045bc:	4613      	mov	r3, r2
 80045be:	011b      	lsls	r3, r3, #4
 80045c0:	1a9b      	subs	r3, r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	440b      	add	r3, r1
 80045c6:	334c      	adds	r3, #76	@ 0x4c
 80045c8:	2204      	movs	r2, #4
 80045ca:	701a      	strb	r2, [r3, #0]
      break;
 80045cc:	e001      	b.n	80045d2 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80045ce:	bf00      	nop
 80045d0:	e000      	b.n	80045d4 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80045d2:	bf00      	nop
  }
}
 80045d4:	bf00      	nop
 80045d6:	3728      	adds	r7, #40	@ 0x28
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b086      	sub	sp, #24
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004608:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b02      	cmp	r3, #2
 8004612:	d10b      	bne.n	800462c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b01      	cmp	r3, #1
 800461c:	d102      	bne.n	8004624 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f005 ff70 	bl	800a504 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	f043 0302 	orr.w	r3, r3, #2
 800462a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f003 0308 	and.w	r3, r3, #8
 8004632:	2b08      	cmp	r3, #8
 8004634:	d132      	bne.n	800469c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	f043 0308 	orr.w	r3, r3, #8
 800463c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f003 0304 	and.w	r3, r3, #4
 8004644:	2b04      	cmp	r3, #4
 8004646:	d126      	bne.n	8004696 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	7a5b      	ldrb	r3, [r3, #9]
 800464c:	2b02      	cmp	r3, #2
 800464e:	d113      	bne.n	8004678 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004656:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800465a:	d106      	bne.n	800466a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2102      	movs	r1, #2
 8004662:	4618      	mov	r0, r3
 8004664:	f002 ff92 	bl	800758c <USB_InitFSLSPClkSel>
 8004668:	e011      	b.n	800468e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2101      	movs	r1, #1
 8004670:	4618      	mov	r0, r3
 8004672:	f002 ff8b 	bl	800758c <USB_InitFSLSPClkSel>
 8004676:	e00a      	b.n	800468e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	79db      	ldrb	r3, [r3, #7]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d106      	bne.n	800468e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004686:	461a      	mov	r2, r3
 8004688:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800468c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f005 ff62 	bl	800a558 <HAL_HCD_PortEnabled_Callback>
 8004694:	e002      	b.n	800469c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f005 ff6c 	bl	800a574 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f003 0320 	and.w	r3, r3, #32
 80046a2:	2b20      	cmp	r3, #32
 80046a4:	d103      	bne.n	80046ae <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	f043 0320 	orr.w	r3, r3, #32
 80046ac:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80046b4:	461a      	mov	r2, r3
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	6013      	str	r3, [r2, #0]
}
 80046ba:	bf00      	nop
 80046bc:	3718      	adds	r7, #24
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
	...

080046c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e12b      	b.n	800492e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d106      	bne.n	80046f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7fc fe2e 	bl	800134c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2224      	movs	r2, #36	@ 0x24
 80046f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f022 0201 	bic.w	r2, r2, #1
 8004706:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004716:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004726:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004728:	f001 fddc 	bl	80062e4 <HAL_RCC_GetPCLK1Freq>
 800472c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	4a81      	ldr	r2, [pc, #516]	@ (8004938 <HAL_I2C_Init+0x274>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d807      	bhi.n	8004748 <HAL_I2C_Init+0x84>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4a80      	ldr	r2, [pc, #512]	@ (800493c <HAL_I2C_Init+0x278>)
 800473c:	4293      	cmp	r3, r2
 800473e:	bf94      	ite	ls
 8004740:	2301      	movls	r3, #1
 8004742:	2300      	movhi	r3, #0
 8004744:	b2db      	uxtb	r3, r3
 8004746:	e006      	b.n	8004756 <HAL_I2C_Init+0x92>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	4a7d      	ldr	r2, [pc, #500]	@ (8004940 <HAL_I2C_Init+0x27c>)
 800474c:	4293      	cmp	r3, r2
 800474e:	bf94      	ite	ls
 8004750:	2301      	movls	r3, #1
 8004752:	2300      	movhi	r3, #0
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e0e7      	b.n	800492e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	4a78      	ldr	r2, [pc, #480]	@ (8004944 <HAL_I2C_Init+0x280>)
 8004762:	fba2 2303 	umull	r2, r3, r2, r3
 8004766:	0c9b      	lsrs	r3, r3, #18
 8004768:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68ba      	ldr	r2, [r7, #8]
 800477a:	430a      	orrs	r2, r1
 800477c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	6a1b      	ldr	r3, [r3, #32]
 8004784:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	4a6a      	ldr	r2, [pc, #424]	@ (8004938 <HAL_I2C_Init+0x274>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d802      	bhi.n	8004798 <HAL_I2C_Init+0xd4>
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	3301      	adds	r3, #1
 8004796:	e009      	b.n	80047ac <HAL_I2C_Init+0xe8>
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800479e:	fb02 f303 	mul.w	r3, r2, r3
 80047a2:	4a69      	ldr	r2, [pc, #420]	@ (8004948 <HAL_I2C_Init+0x284>)
 80047a4:	fba2 2303 	umull	r2, r3, r2, r3
 80047a8:	099b      	lsrs	r3, r3, #6
 80047aa:	3301      	adds	r3, #1
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	6812      	ldr	r2, [r2, #0]
 80047b0:	430b      	orrs	r3, r1
 80047b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80047be:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	495c      	ldr	r1, [pc, #368]	@ (8004938 <HAL_I2C_Init+0x274>)
 80047c8:	428b      	cmp	r3, r1
 80047ca:	d819      	bhi.n	8004800 <HAL_I2C_Init+0x13c>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	1e59      	subs	r1, r3, #1
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	005b      	lsls	r3, r3, #1
 80047d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80047da:	1c59      	adds	r1, r3, #1
 80047dc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80047e0:	400b      	ands	r3, r1
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00a      	beq.n	80047fc <HAL_I2C_Init+0x138>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	1e59      	subs	r1, r3, #1
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	005b      	lsls	r3, r3, #1
 80047f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80047f4:	3301      	adds	r3, #1
 80047f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047fa:	e051      	b.n	80048a0 <HAL_I2C_Init+0x1dc>
 80047fc:	2304      	movs	r3, #4
 80047fe:	e04f      	b.n	80048a0 <HAL_I2C_Init+0x1dc>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d111      	bne.n	800482c <HAL_I2C_Init+0x168>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	1e58      	subs	r0, r3, #1
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6859      	ldr	r1, [r3, #4]
 8004810:	460b      	mov	r3, r1
 8004812:	005b      	lsls	r3, r3, #1
 8004814:	440b      	add	r3, r1
 8004816:	fbb0 f3f3 	udiv	r3, r0, r3
 800481a:	3301      	adds	r3, #1
 800481c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004820:	2b00      	cmp	r3, #0
 8004822:	bf0c      	ite	eq
 8004824:	2301      	moveq	r3, #1
 8004826:	2300      	movne	r3, #0
 8004828:	b2db      	uxtb	r3, r3
 800482a:	e012      	b.n	8004852 <HAL_I2C_Init+0x18e>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	1e58      	subs	r0, r3, #1
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6859      	ldr	r1, [r3, #4]
 8004834:	460b      	mov	r3, r1
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	440b      	add	r3, r1
 800483a:	0099      	lsls	r1, r3, #2
 800483c:	440b      	add	r3, r1
 800483e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004842:	3301      	adds	r3, #1
 8004844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004848:	2b00      	cmp	r3, #0
 800484a:	bf0c      	ite	eq
 800484c:	2301      	moveq	r3, #1
 800484e:	2300      	movne	r3, #0
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <HAL_I2C_Init+0x196>
 8004856:	2301      	movs	r3, #1
 8004858:	e022      	b.n	80048a0 <HAL_I2C_Init+0x1dc>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10e      	bne.n	8004880 <HAL_I2C_Init+0x1bc>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	1e58      	subs	r0, r3, #1
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6859      	ldr	r1, [r3, #4]
 800486a:	460b      	mov	r3, r1
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	440b      	add	r3, r1
 8004870:	fbb0 f3f3 	udiv	r3, r0, r3
 8004874:	3301      	adds	r3, #1
 8004876:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800487a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800487e:	e00f      	b.n	80048a0 <HAL_I2C_Init+0x1dc>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	1e58      	subs	r0, r3, #1
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6859      	ldr	r1, [r3, #4]
 8004888:	460b      	mov	r3, r1
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	440b      	add	r3, r1
 800488e:	0099      	lsls	r1, r3, #2
 8004890:	440b      	add	r3, r1
 8004892:	fbb0 f3f3 	udiv	r3, r0, r3
 8004896:	3301      	adds	r3, #1
 8004898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800489c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80048a0:	6879      	ldr	r1, [r7, #4]
 80048a2:	6809      	ldr	r1, [r1, #0]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	69da      	ldr	r2, [r3, #28]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	430a      	orrs	r2, r1
 80048c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80048ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	6911      	ldr	r1, [r2, #16]
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	68d2      	ldr	r2, [r2, #12]
 80048da:	4311      	orrs	r1, r2
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	6812      	ldr	r2, [r2, #0]
 80048e0:	430b      	orrs	r3, r1
 80048e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	695a      	ldr	r2, [r3, #20]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	431a      	orrs	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	430a      	orrs	r2, r1
 80048fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f042 0201 	orr.w	r2, r2, #1
 800490e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2220      	movs	r2, #32
 800491a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	000186a0 	.word	0x000186a0
 800493c:	001e847f 	.word	0x001e847f
 8004940:	003d08ff 	.word	0x003d08ff
 8004944:	431bde83 	.word	0x431bde83
 8004948:	10624dd3 	.word	0x10624dd3

0800494c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b088      	sub	sp, #32
 8004950:	af02      	add	r7, sp, #8
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	607a      	str	r2, [r7, #4]
 8004956:	461a      	mov	r2, r3
 8004958:	460b      	mov	r3, r1
 800495a:	817b      	strh	r3, [r7, #10]
 800495c:	4613      	mov	r3, r2
 800495e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004960:	f7fd fa6a 	bl	8001e38 <HAL_GetTick>
 8004964:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b20      	cmp	r3, #32
 8004970:	f040 80e0 	bne.w	8004b34 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	2319      	movs	r3, #25
 800497a:	2201      	movs	r2, #1
 800497c:	4970      	ldr	r1, [pc, #448]	@ (8004b40 <HAL_I2C_Master_Transmit+0x1f4>)
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f000 f964 	bl	8004c4c <I2C_WaitOnFlagUntilTimeout>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800498a:	2302      	movs	r3, #2
 800498c:	e0d3      	b.n	8004b36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004994:	2b01      	cmp	r3, #1
 8004996:	d101      	bne.n	800499c <HAL_I2C_Master_Transmit+0x50>
 8004998:	2302      	movs	r3, #2
 800499a:	e0cc      	b.n	8004b36 <HAL_I2C_Master_Transmit+0x1ea>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d007      	beq.n	80049c2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f042 0201 	orr.w	r2, r2, #1
 80049c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2221      	movs	r2, #33	@ 0x21
 80049d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2210      	movs	r2, #16
 80049de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	893a      	ldrh	r2, [r7, #8]
 80049f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	4a50      	ldr	r2, [pc, #320]	@ (8004b44 <HAL_I2C_Master_Transmit+0x1f8>)
 8004a02:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004a04:	8979      	ldrh	r1, [r7, #10]
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	6a3a      	ldr	r2, [r7, #32]
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f000 f89c 	bl	8004b48 <I2C_MasterRequestWrite>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d001      	beq.n	8004a1a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e08d      	b.n	8004b36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	613b      	str	r3, [r7, #16]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	613b      	str	r3, [r7, #16]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	613b      	str	r3, [r7, #16]
 8004a2e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004a30:	e066      	b.n	8004b00 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	6a39      	ldr	r1, [r7, #32]
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	f000 fa22 	bl	8004e80 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00d      	beq.n	8004a5e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a46:	2b04      	cmp	r3, #4
 8004a48:	d107      	bne.n	8004a5a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e06b      	b.n	8004b36 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a62:	781a      	ldrb	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6e:	1c5a      	adds	r2, r3, #1
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a86:	3b01      	subs	r3, #1
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	f003 0304 	and.w	r3, r3, #4
 8004a98:	2b04      	cmp	r3, #4
 8004a9a:	d11b      	bne.n	8004ad4 <HAL_I2C_Master_Transmit+0x188>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d017      	beq.n	8004ad4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa8:	781a      	ldrb	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab4:	1c5a      	adds	r2, r3, #1
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004acc:	3b01      	subs	r3, #1
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	6a39      	ldr	r1, [r7, #32]
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f000 fa19 	bl	8004f10 <I2C_WaitOnBTFFlagUntilTimeout>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00d      	beq.n	8004b00 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae8:	2b04      	cmp	r3, #4
 8004aea:	d107      	bne.n	8004afc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004afa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e01a      	b.n	8004b36 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d194      	bne.n	8004a32 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004b30:	2300      	movs	r3, #0
 8004b32:	e000      	b.n	8004b36 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004b34:	2302      	movs	r3, #2
  }
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3718      	adds	r7, #24
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	00100002 	.word	0x00100002
 8004b44:	ffff0000 	.word	0xffff0000

08004b48 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b088      	sub	sp, #32
 8004b4c:	af02      	add	r7, sp, #8
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	607a      	str	r2, [r7, #4]
 8004b52:	603b      	str	r3, [r7, #0]
 8004b54:	460b      	mov	r3, r1
 8004b56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b5c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	2b08      	cmp	r3, #8
 8004b62:	d006      	beq.n	8004b72 <I2C_MasterRequestWrite+0x2a>
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d003      	beq.n	8004b72 <I2C_MasterRequestWrite+0x2a>
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b70:	d108      	bne.n	8004b84 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b80:	601a      	str	r2, [r3, #0]
 8004b82:	e00b      	b.n	8004b9c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b88:	2b12      	cmp	r3, #18
 8004b8a:	d107      	bne.n	8004b9c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f000 f84f 	bl	8004c4c <I2C_WaitOnFlagUntilTimeout>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00d      	beq.n	8004bd0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bc2:	d103      	bne.n	8004bcc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e035      	b.n	8004c3c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bd8:	d108      	bne.n	8004bec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004bda:	897b      	ldrh	r3, [r7, #10]
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	461a      	mov	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004be8:	611a      	str	r2, [r3, #16]
 8004bea:	e01b      	b.n	8004c24 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004bec:	897b      	ldrh	r3, [r7, #10]
 8004bee:	11db      	asrs	r3, r3, #7
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	f003 0306 	and.w	r3, r3, #6
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	f063 030f 	orn	r3, r3, #15
 8004bfc:	b2da      	uxtb	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	490e      	ldr	r1, [pc, #56]	@ (8004c44 <I2C_MasterRequestWrite+0xfc>)
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f000 f898 	bl	8004d40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e010      	b.n	8004c3c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004c1a:	897b      	ldrh	r3, [r7, #10]
 8004c1c:	b2da      	uxtb	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	4907      	ldr	r1, [pc, #28]	@ (8004c48 <I2C_MasterRequestWrite+0x100>)
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f000 f888 	bl	8004d40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d001      	beq.n	8004c3a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e000      	b.n	8004c3c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3718      	adds	r7, #24
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	00010008 	.word	0x00010008
 8004c48:	00010002 	.word	0x00010002

08004c4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	603b      	str	r3, [r7, #0]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c5c:	e048      	b.n	8004cf0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c64:	d044      	beq.n	8004cf0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c66:	f7fd f8e7 	bl	8001e38 <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	683a      	ldr	r2, [r7, #0]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d302      	bcc.n	8004c7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d139      	bne.n	8004cf0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	0c1b      	lsrs	r3, r3, #16
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d10d      	bne.n	8004ca2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	43da      	mvns	r2, r3
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	4013      	ands	r3, r2
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	bf0c      	ite	eq
 8004c98:	2301      	moveq	r3, #1
 8004c9a:	2300      	movne	r3, #0
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	e00c      	b.n	8004cbc <I2C_WaitOnFlagUntilTimeout+0x70>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	43da      	mvns	r2, r3
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	4013      	ands	r3, r2
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	bf0c      	ite	eq
 8004cb4:	2301      	moveq	r3, #1
 8004cb6:	2300      	movne	r3, #0
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	461a      	mov	r2, r3
 8004cbc:	79fb      	ldrb	r3, [r7, #7]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d116      	bne.n	8004cf0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cdc:	f043 0220 	orr.w	r2, r3, #32
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e023      	b.n	8004d38 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	0c1b      	lsrs	r3, r3, #16
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d10d      	bne.n	8004d16 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	695b      	ldr	r3, [r3, #20]
 8004d00:	43da      	mvns	r2, r3
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	4013      	ands	r3, r2
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	bf0c      	ite	eq
 8004d0c:	2301      	moveq	r3, #1
 8004d0e:	2300      	movne	r3, #0
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	461a      	mov	r2, r3
 8004d14:	e00c      	b.n	8004d30 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	43da      	mvns	r2, r3
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	4013      	ands	r3, r2
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	bf0c      	ite	eq
 8004d28:	2301      	moveq	r3, #1
 8004d2a:	2300      	movne	r3, #0
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	461a      	mov	r2, r3
 8004d30:	79fb      	ldrb	r3, [r7, #7]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d093      	beq.n	8004c5e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3710      	adds	r7, #16
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
 8004d4c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d4e:	e071      	b.n	8004e34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	695b      	ldr	r3, [r3, #20]
 8004d56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d5e:	d123      	bne.n	8004da8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d6e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2220      	movs	r2, #32
 8004d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d94:	f043 0204 	orr.w	r2, r3, #4
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e067      	b.n	8004e78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004dae:	d041      	beq.n	8004e34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004db0:	f7fd f842 	bl	8001e38 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d302      	bcc.n	8004dc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d136      	bne.n	8004e34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	0c1b      	lsrs	r3, r3, #16
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d10c      	bne.n	8004dea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	43da      	mvns	r2, r3
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	4013      	ands	r3, r2
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	bf14      	ite	ne
 8004de2:	2301      	movne	r3, #1
 8004de4:	2300      	moveq	r3, #0
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	e00b      	b.n	8004e02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	43da      	mvns	r2, r3
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	4013      	ands	r3, r2
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	bf14      	ite	ne
 8004dfc:	2301      	movne	r3, #1
 8004dfe:	2300      	moveq	r3, #0
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d016      	beq.n	8004e34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e20:	f043 0220 	orr.w	r2, r3, #32
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e021      	b.n	8004e78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	0c1b      	lsrs	r3, r3, #16
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d10c      	bne.n	8004e58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	695b      	ldr	r3, [r3, #20]
 8004e44:	43da      	mvns	r2, r3
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	4013      	ands	r3, r2
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	bf14      	ite	ne
 8004e50:	2301      	movne	r3, #1
 8004e52:	2300      	moveq	r3, #0
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	e00b      	b.n	8004e70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	43da      	mvns	r2, r3
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	4013      	ands	r3, r2
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	bf14      	ite	ne
 8004e6a:	2301      	movne	r3, #1
 8004e6c:	2300      	moveq	r3, #0
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f47f af6d 	bne.w	8004d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e8c:	e034      	b.n	8004ef8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f000 f886 	bl	8004fa0 <I2C_IsAcknowledgeFailed>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e034      	b.n	8004f08 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ea4:	d028      	beq.n	8004ef8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ea6:	f7fc ffc7 	bl	8001e38 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d302      	bcc.n	8004ebc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d11d      	bne.n	8004ef8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ec6:	2b80      	cmp	r3, #128	@ 0x80
 8004ec8:	d016      	beq.n	8004ef8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee4:	f043 0220 	orr.w	r2, r3, #32
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e007      	b.n	8004f08 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f02:	2b80      	cmp	r3, #128	@ 0x80
 8004f04:	d1c3      	bne.n	8004e8e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f1c:	e034      	b.n	8004f88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f000 f83e 	bl	8004fa0 <I2C_IsAcknowledgeFailed>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d001      	beq.n	8004f2e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e034      	b.n	8004f98 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f34:	d028      	beq.n	8004f88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f36:	f7fc ff7f 	bl	8001e38 <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d302      	bcc.n	8004f4c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d11d      	bne.n	8004f88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	f003 0304 	and.w	r3, r3, #4
 8004f56:	2b04      	cmp	r3, #4
 8004f58:	d016      	beq.n	8004f88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2220      	movs	r2, #32
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f74:	f043 0220 	orr.w	r2, r3, #32
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e007      	b.n	8004f98 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	f003 0304 	and.w	r3, r3, #4
 8004f92:	2b04      	cmp	r3, #4
 8004f94:	d1c3      	bne.n	8004f1e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fb6:	d11b      	bne.n	8004ff0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004fc0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2220      	movs	r2, #32
 8004fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fdc:	f043 0204 	orr.w	r2, r3, #4
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e000      	b.n	8004ff2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
	...

08005000 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b088      	sub	sp, #32
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d101      	bne.n	8005012 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e128      	b.n	8005264 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d109      	bne.n	8005032 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a90      	ldr	r2, [pc, #576]	@ (800526c <HAL_I2S_Init+0x26c>)
 800502a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f7fc fa03 	bl	8001438 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2202      	movs	r2, #2
 8005036:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	69db      	ldr	r3, [r3, #28]
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	6812      	ldr	r2, [r2, #0]
 8005044:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005048:	f023 030f 	bic.w	r3, r3, #15
 800504c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2202      	movs	r2, #2
 8005054:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	2b02      	cmp	r3, #2
 800505c:	d060      	beq.n	8005120 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d102      	bne.n	800506c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005066:	2310      	movs	r3, #16
 8005068:	617b      	str	r3, [r7, #20]
 800506a:	e001      	b.n	8005070 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800506c:	2320      	movs	r3, #32
 800506e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	2b20      	cmp	r3, #32
 8005076:	d802      	bhi.n	800507e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	005b      	lsls	r3, r3, #1
 800507c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800507e:	2001      	movs	r0, #1
 8005080:	f001 fa26 	bl	80064d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8005084:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800508e:	d125      	bne.n	80050dc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d010      	beq.n	80050ba <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	fbb2 f2f3 	udiv	r2, r2, r3
 80050a2:	4613      	mov	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	005b      	lsls	r3, r3, #1
 80050aa:	461a      	mov	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	695b      	ldr	r3, [r3, #20]
 80050b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b4:	3305      	adds	r3, #5
 80050b6:	613b      	str	r3, [r7, #16]
 80050b8:	e01f      	b.n	80050fa <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	00db      	lsls	r3, r3, #3
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80050c4:	4613      	mov	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	4413      	add	r3, r2
 80050ca:	005b      	lsls	r3, r3, #1
 80050cc:	461a      	mov	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d6:	3305      	adds	r3, #5
 80050d8:	613b      	str	r3, [r7, #16]
 80050da:	e00e      	b.n	80050fa <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80050e4:	4613      	mov	r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4413      	add	r3, r2
 80050ea:	005b      	lsls	r3, r3, #1
 80050ec:	461a      	mov	r2, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f6:	3305      	adds	r3, #5
 80050f8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	4a5c      	ldr	r2, [pc, #368]	@ (8005270 <HAL_I2S_Init+0x270>)
 80050fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005102:	08db      	lsrs	r3, r3, #3
 8005104:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	f003 0301 	and.w	r3, r3, #1
 800510c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	085b      	lsrs	r3, r3, #1
 8005116:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	021b      	lsls	r3, r3, #8
 800511c:	61bb      	str	r3, [r7, #24]
 800511e:	e003      	b.n	8005128 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005120:	2302      	movs	r3, #2
 8005122:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005124:	2300      	movs	r3, #0
 8005126:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d902      	bls.n	8005134 <HAL_I2S_Init+0x134>
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	2bff      	cmp	r3, #255	@ 0xff
 8005132:	d907      	bls.n	8005144 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005138:	f043 0210 	orr.w	r2, r3, #16
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e08f      	b.n	8005264 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	691a      	ldr	r2, [r3, #16]
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	ea42 0103 	orr.w	r1, r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	69fa      	ldr	r2, [r7, #28]
 8005154:	430a      	orrs	r2, r1
 8005156:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005162:	f023 030f 	bic.w	r3, r3, #15
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	6851      	ldr	r1, [r2, #4]
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	6892      	ldr	r2, [r2, #8]
 800516e:	4311      	orrs	r1, r2
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	68d2      	ldr	r2, [r2, #12]
 8005174:	4311      	orrs	r1, r2
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	6992      	ldr	r2, [r2, #24]
 800517a:	430a      	orrs	r2, r1
 800517c:	431a      	orrs	r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005186:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a1b      	ldr	r3, [r3, #32]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d161      	bne.n	8005254 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a38      	ldr	r2, [pc, #224]	@ (8005274 <HAL_I2S_Init+0x274>)
 8005194:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a37      	ldr	r2, [pc, #220]	@ (8005278 <HAL_I2S_Init+0x278>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d101      	bne.n	80051a4 <HAL_I2S_Init+0x1a4>
 80051a0:	4b36      	ldr	r3, [pc, #216]	@ (800527c <HAL_I2S_Init+0x27c>)
 80051a2:	e001      	b.n	80051a8 <HAL_I2S_Init+0x1a8>
 80051a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80051a8:	69db      	ldr	r3, [r3, #28]
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	6812      	ldr	r2, [r2, #0]
 80051ae:	4932      	ldr	r1, [pc, #200]	@ (8005278 <HAL_I2S_Init+0x278>)
 80051b0:	428a      	cmp	r2, r1
 80051b2:	d101      	bne.n	80051b8 <HAL_I2S_Init+0x1b8>
 80051b4:	4a31      	ldr	r2, [pc, #196]	@ (800527c <HAL_I2S_Init+0x27c>)
 80051b6:	e001      	b.n	80051bc <HAL_I2S_Init+0x1bc>
 80051b8:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80051bc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80051c0:	f023 030f 	bic.w	r3, r3, #15
 80051c4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a2b      	ldr	r2, [pc, #172]	@ (8005278 <HAL_I2S_Init+0x278>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d101      	bne.n	80051d4 <HAL_I2S_Init+0x1d4>
 80051d0:	4b2a      	ldr	r3, [pc, #168]	@ (800527c <HAL_I2S_Init+0x27c>)
 80051d2:	e001      	b.n	80051d8 <HAL_I2S_Init+0x1d8>
 80051d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80051d8:	2202      	movs	r2, #2
 80051da:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a25      	ldr	r2, [pc, #148]	@ (8005278 <HAL_I2S_Init+0x278>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d101      	bne.n	80051ea <HAL_I2S_Init+0x1ea>
 80051e6:	4b25      	ldr	r3, [pc, #148]	@ (800527c <HAL_I2S_Init+0x27c>)
 80051e8:	e001      	b.n	80051ee <HAL_I2S_Init+0x1ee>
 80051ea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80051ee:	69db      	ldr	r3, [r3, #28]
 80051f0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051fa:	d003      	beq.n	8005204 <HAL_I2S_Init+0x204>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d103      	bne.n	800520c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005204:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005208:	613b      	str	r3, [r7, #16]
 800520a:	e001      	b.n	8005210 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800520c:	2300      	movs	r3, #0
 800520e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800521a:	4313      	orrs	r3, r2
 800521c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005224:	4313      	orrs	r3, r2
 8005226:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800522e:	4313      	orrs	r3, r2
 8005230:	b29a      	uxth	r2, r3
 8005232:	897b      	ldrh	r3, [r7, #10]
 8005234:	4313      	orrs	r3, r2
 8005236:	b29b      	uxth	r3, r3
 8005238:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800523c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a0d      	ldr	r2, [pc, #52]	@ (8005278 <HAL_I2S_Init+0x278>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d101      	bne.n	800524c <HAL_I2S_Init+0x24c>
 8005248:	4b0c      	ldr	r3, [pc, #48]	@ (800527c <HAL_I2S_Init+0x27c>)
 800524a:	e001      	b.n	8005250 <HAL_I2S_Init+0x250>
 800524c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005250:	897a      	ldrh	r2, [r7, #10]
 8005252:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	3720      	adds	r7, #32
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	0800543d 	.word	0x0800543d
 8005270:	cccccccd 	.word	0xcccccccd
 8005274:	08005551 	.word	0x08005551
 8005278:	40003800 	.word	0x40003800
 800527c:	40003400 	.word	0x40003400

08005280 <HAL_I2S_Transmit_IT>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_IT(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005280:	b480      	push	{r7}
 8005282:	b087      	sub	sp, #28
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	4613      	mov	r3, r2
 800528c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d002      	beq.n	800529a <HAL_I2S_Transmit_IT+0x1a>
 8005294:	88fb      	ldrh	r3, [r7, #6]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d101      	bne.n	800529e <HAL_I2S_Transmit_IT+0x1e>
  {
    return  HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e057      	b.n	800534e <HAL_I2S_Transmit_IT+0xce>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d001      	beq.n	80052ae <HAL_I2S_Transmit_IT+0x2e>
  {
    return HAL_BUSY;
 80052aa:	2302      	movs	r3, #2
 80052ac:	e04f      	b.n	800534e <HAL_I2S_Transmit_IT+0xce>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d101      	bne.n	80052be <HAL_I2S_Transmit_IT+0x3e>
 80052ba:	2302      	movs	r3, #2
 80052bc:	e047      	b.n	800534e <HAL_I2S_Transmit_IT+0xce>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2203      	movs	r2, #3
 80052ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	69db      	ldr	r3, [r3, #28]
 80052e0:	f003 0307 	and.w	r3, r3, #7
 80052e4:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	2b03      	cmp	r3, #3
 80052ea:	d002      	beq.n	80052f2 <HAL_I2S_Transmit_IT+0x72>
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	2b05      	cmp	r3, #5
 80052f0:	d10a      	bne.n	8005308 <HAL_I2S_Transmit_IT+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 80052f2:	88fb      	ldrh	r3, [r7, #6]
 80052f4:	005b      	lsls	r3, r3, #1
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 80052fc:	88fb      	ldrh	r3, [r7, #6]
 80052fe:	005b      	lsls	r3, r3, #1
 8005300:	b29a      	uxth	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005306:	e005      	b.n	8005314 <HAL_I2S_Transmit_IT+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	88fa      	ldrh	r2, [r7, #6]
 800530c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	88fa      	ldrh	r2, [r7, #6]
 8005312:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  __HAL_UNLOCK(hi2s);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Enable TXE and ERR interrupt */
  __HAL_I2S_ENABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 800532a:	605a      	str	r2, [r3, #4]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005336:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800533a:	d007      	beq.n	800534c <HAL_I2S_Transmit_IT+0xcc>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	69da      	ldr	r2, [r3, #28]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800534a:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	371c      	adds	r7, #28
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800535a:	b480      	push	{r7}
 800535c:	b083      	sub	sp, #12
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005362:	bf00      	nop
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr

0800536e <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800536e:	b480      	push	{r7}
 8005370:	b083      	sub	sp, #12
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005376:	bf00      	nop
 8005378:	370c      	adds	r7, #12
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b082      	sub	sp, #8
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800538e:	881a      	ldrh	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800539a:	1c9a      	adds	r2, r3, #2
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	3b01      	subs	r3, #1
 80053a8:	b29a      	uxth	r2, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d10e      	bne.n	80053d6 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	685a      	ldr	r2, [r3, #4]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80053c6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f7fc fa51 	bl	8001878 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80053d6:	bf00      	nop
 80053d8:	3708      	adds	r7, #8
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80053de:	b580      	push	{r7, lr}
 80053e0:	b082      	sub	sp, #8
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68da      	ldr	r2, [r3, #12]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f0:	b292      	uxth	r2, r2
 80053f2:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f8:	1c9a      	adds	r2, r3, #2
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005402:	b29b      	uxth	r3, r3
 8005404:	3b01      	subs	r3, #1
 8005406:	b29a      	uxth	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005410:	b29b      	uxth	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d10e      	bne.n	8005434 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005424:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f7ff ff93 	bl	800535a <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005434:	bf00      	nop
 8005436:	3708      	adds	r7, #8
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b086      	sub	sp, #24
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005452:	b2db      	uxtb	r3, r3
 8005454:	2b04      	cmp	r3, #4
 8005456:	d13a      	bne.n	80054ce <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	2b01      	cmp	r3, #1
 8005460:	d109      	bne.n	8005476 <I2S_IRQHandler+0x3a>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800546c:	2b40      	cmp	r3, #64	@ 0x40
 800546e:	d102      	bne.n	8005476 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f7ff ffb4 	bl	80053de <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800547c:	2b40      	cmp	r3, #64	@ 0x40
 800547e:	d126      	bne.n	80054ce <I2S_IRQHandler+0x92>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f003 0320 	and.w	r3, r3, #32
 800548a:	2b20      	cmp	r3, #32
 800548c:	d11f      	bne.n	80054ce <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	685a      	ldr	r2, [r3, #4]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800549c:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800549e:	2300      	movs	r3, #0
 80054a0:	613b      	str	r3, [r7, #16]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	613b      	str	r3, [r7, #16]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	613b      	str	r3, [r7, #16]
 80054b2:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054c0:	f043 0202 	orr.w	r2, r3, #2
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f7ff ff50 	bl	800536e <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b03      	cmp	r3, #3
 80054d8:	d136      	bne.n	8005548 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	f003 0302 	and.w	r3, r3, #2
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d109      	bne.n	80054f8 <I2S_IRQHandler+0xbc>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054ee:	2b80      	cmp	r3, #128	@ 0x80
 80054f0:	d102      	bne.n	80054f8 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f7ff ff45 	bl	8005382 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	f003 0308 	and.w	r3, r3, #8
 80054fe:	2b08      	cmp	r3, #8
 8005500:	d122      	bne.n	8005548 <I2S_IRQHandler+0x10c>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f003 0320 	and.w	r3, r3, #32
 800550c:	2b20      	cmp	r3, #32
 800550e:	d11b      	bne.n	8005548 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	685a      	ldr	r2, [r3, #4]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800551e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005520:	2300      	movs	r3, #0
 8005522:	60fb      	str	r3, [r7, #12]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	60fb      	str	r3, [r7, #12]
 800552c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2201      	movs	r2, #1
 8005532:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800553a:	f043 0204 	orr.w	r2, r3, #4
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f7ff ff13 	bl	800536e <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005548:	bf00      	nop
 800554a:	3718      	adds	r7, #24
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b088      	sub	sp, #32
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a92      	ldr	r2, [pc, #584]	@ (80057b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d101      	bne.n	800556e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800556a:	4b92      	ldr	r3, [pc, #584]	@ (80057b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800556c:	e001      	b.n	8005572 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800556e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a8b      	ldr	r2, [pc, #556]	@ (80057b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d101      	bne.n	800558c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005588:	4b8a      	ldr	r3, [pc, #552]	@ (80057b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800558a:	e001      	b.n	8005590 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800558c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800559c:	d004      	beq.n	80055a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f040 8099 	bne.w	80056da <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d107      	bne.n	80055c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d002      	beq.n	80055c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 f925 	bl	800580c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	f003 0301 	and.w	r3, r3, #1
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d107      	bne.n	80055dc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d002      	beq.n	80055dc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f9c8 	bl	800596c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055e2:	2b40      	cmp	r3, #64	@ 0x40
 80055e4:	d13a      	bne.n	800565c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	f003 0320 	and.w	r3, r3, #32
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d035      	beq.n	800565c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a6e      	ldr	r2, [pc, #440]	@ (80057b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d101      	bne.n	80055fe <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80055fa:	4b6e      	ldr	r3, [pc, #440]	@ (80057b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80055fc:	e001      	b.n	8005602 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80055fe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005602:	685a      	ldr	r2, [r3, #4]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4969      	ldr	r1, [pc, #420]	@ (80057b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800560a:	428b      	cmp	r3, r1
 800560c:	d101      	bne.n	8005612 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800560e:	4b69      	ldr	r3, [pc, #420]	@ (80057b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005610:	e001      	b.n	8005616 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005612:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005616:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800561a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	685a      	ldr	r2, [r3, #4]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800562a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800562c:	2300      	movs	r3, #0
 800562e:	60fb      	str	r3, [r7, #12]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	60fb      	str	r3, [r7, #12]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	60fb      	str	r3, [r7, #12]
 8005640:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800564e:	f043 0202 	orr.w	r2, r3, #2
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f7ff fe89 	bl	800536e <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	f003 0308 	and.w	r3, r3, #8
 8005662:	2b08      	cmp	r3, #8
 8005664:	f040 80c3 	bne.w	80057ee <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	f003 0320 	and.w	r3, r3, #32
 800566e:	2b00      	cmp	r3, #0
 8005670:	f000 80bd 	beq.w	80057ee <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	685a      	ldr	r2, [r3, #4]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005682:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a49      	ldr	r2, [pc, #292]	@ (80057b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d101      	bne.n	8005692 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800568e:	4b49      	ldr	r3, [pc, #292]	@ (80057b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005690:	e001      	b.n	8005696 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005692:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005696:	685a      	ldr	r2, [r3, #4]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4944      	ldr	r1, [pc, #272]	@ (80057b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800569e:	428b      	cmp	r3, r1
 80056a0:	d101      	bne.n	80056a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80056a2:	4b44      	ldr	r3, [pc, #272]	@ (80057b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80056a4:	e001      	b.n	80056aa <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80056a6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80056aa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80056ae:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80056b0:	2300      	movs	r3, #0
 80056b2:	60bb      	str	r3, [r7, #8]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	60bb      	str	r3, [r7, #8]
 80056bc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ca:	f043 0204 	orr.w	r2, r3, #4
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f7ff fe4b 	bl	800536e <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80056d8:	e089      	b.n	80057ee <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	f003 0302 	and.w	r3, r3, #2
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d107      	bne.n	80056f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d002      	beq.n	80056f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f8be 	bl	8005870 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d107      	bne.n	800570e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005704:	2b00      	cmp	r3, #0
 8005706:	d002      	beq.n	800570e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 f8fd 	bl	8005908 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005714:	2b40      	cmp	r3, #64	@ 0x40
 8005716:	d12f      	bne.n	8005778 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	f003 0320 	and.w	r3, r3, #32
 800571e:	2b00      	cmp	r3, #0
 8005720:	d02a      	beq.n	8005778 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	685a      	ldr	r2, [r3, #4]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005730:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a1e      	ldr	r2, [pc, #120]	@ (80057b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d101      	bne.n	8005740 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800573c:	4b1d      	ldr	r3, [pc, #116]	@ (80057b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800573e:	e001      	b.n	8005744 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005740:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005744:	685a      	ldr	r2, [r3, #4]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4919      	ldr	r1, [pc, #100]	@ (80057b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800574c:	428b      	cmp	r3, r1
 800574e:	d101      	bne.n	8005754 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005750:	4b18      	ldr	r3, [pc, #96]	@ (80057b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005752:	e001      	b.n	8005758 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005754:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005758:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800575c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800576a:	f043 0202 	orr.w	r2, r3, #2
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f7ff fdfb 	bl	800536e <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	f003 0308 	and.w	r3, r3, #8
 800577e:	2b08      	cmp	r3, #8
 8005780:	d136      	bne.n	80057f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	f003 0320 	and.w	r3, r3, #32
 8005788:	2b00      	cmp	r3, #0
 800578a:	d031      	beq.n	80057f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a07      	ldr	r2, [pc, #28]	@ (80057b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d101      	bne.n	800579a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005796:	4b07      	ldr	r3, [pc, #28]	@ (80057b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005798:	e001      	b.n	800579e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800579a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4902      	ldr	r1, [pc, #8]	@ (80057b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80057a6:	428b      	cmp	r3, r1
 80057a8:	d106      	bne.n	80057b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80057aa:	4b02      	ldr	r3, [pc, #8]	@ (80057b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80057ac:	e006      	b.n	80057bc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80057ae:	bf00      	nop
 80057b0:	40003800 	.word	0x40003800
 80057b4:	40003400 	.word	0x40003400
 80057b8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80057bc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80057c0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80057d0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057de:	f043 0204 	orr.w	r2, r3, #4
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f7ff fdc1 	bl	800536e <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80057ec:	e000      	b.n	80057f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80057ee:	bf00      	nop
}
 80057f0:	bf00      	nop
 80057f2:	3720      	adds	r7, #32
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005818:	1c99      	adds	r1, r3, #2
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	6251      	str	r1, [r2, #36]	@ 0x24
 800581e:	881a      	ldrh	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800582a:	b29b      	uxth	r3, r3
 800582c:	3b01      	subs	r3, #1
 800582e:	b29a      	uxth	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005838:	b29b      	uxth	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d113      	bne.n	8005866 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	685a      	ldr	r2, [r3, #4]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800584c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005852:	b29b      	uxth	r3, r3
 8005854:	2b00      	cmp	r3, #0
 8005856:	d106      	bne.n	8005866 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f7ff ffc9 	bl	80057f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005866:	bf00      	nop
 8005868:	3708      	adds	r7, #8
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
	...

08005870 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800587c:	1c99      	adds	r1, r3, #2
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	6251      	str	r1, [r2, #36]	@ 0x24
 8005882:	8819      	ldrh	r1, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a1d      	ldr	r2, [pc, #116]	@ (8005900 <I2SEx_TxISR_I2SExt+0x90>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d101      	bne.n	8005892 <I2SEx_TxISR_I2SExt+0x22>
 800588e:	4b1d      	ldr	r3, [pc, #116]	@ (8005904 <I2SEx_TxISR_I2SExt+0x94>)
 8005890:	e001      	b.n	8005896 <I2SEx_TxISR_I2SExt+0x26>
 8005892:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005896:	460a      	mov	r2, r1
 8005898:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800589e:	b29b      	uxth	r3, r3
 80058a0:	3b01      	subs	r3, #1
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d121      	bne.n	80058f6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a12      	ldr	r2, [pc, #72]	@ (8005900 <I2SEx_TxISR_I2SExt+0x90>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d101      	bne.n	80058c0 <I2SEx_TxISR_I2SExt+0x50>
 80058bc:	4b11      	ldr	r3, [pc, #68]	@ (8005904 <I2SEx_TxISR_I2SExt+0x94>)
 80058be:	e001      	b.n	80058c4 <I2SEx_TxISR_I2SExt+0x54>
 80058c0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058c4:	685a      	ldr	r2, [r3, #4]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	490d      	ldr	r1, [pc, #52]	@ (8005900 <I2SEx_TxISR_I2SExt+0x90>)
 80058cc:	428b      	cmp	r3, r1
 80058ce:	d101      	bne.n	80058d4 <I2SEx_TxISR_I2SExt+0x64>
 80058d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005904 <I2SEx_TxISR_I2SExt+0x94>)
 80058d2:	e001      	b.n	80058d8 <I2SEx_TxISR_I2SExt+0x68>
 80058d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058d8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80058dc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d106      	bne.n	80058f6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f7ff ff81 	bl	80057f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80058f6:	bf00      	nop
 80058f8:	3708      	adds	r7, #8
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	40003800 	.word	0x40003800
 8005904:	40003400 	.word	0x40003400

08005908 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68d8      	ldr	r0, [r3, #12]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800591a:	1c99      	adds	r1, r3, #2
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005920:	b282      	uxth	r2, r0
 8005922:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005928:	b29b      	uxth	r3, r3
 800592a:	3b01      	subs	r3, #1
 800592c:	b29a      	uxth	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005936:	b29b      	uxth	r3, r3
 8005938:	2b00      	cmp	r3, #0
 800593a:	d113      	bne.n	8005964 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	685a      	ldr	r2, [r3, #4]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800594a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005950:	b29b      	uxth	r3, r3
 8005952:	2b00      	cmp	r3, #0
 8005954:	d106      	bne.n	8005964 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f7ff ff4a 	bl	80057f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005964:	bf00      	nop
 8005966:	3708      	adds	r7, #8
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a20      	ldr	r2, [pc, #128]	@ (80059fc <I2SEx_RxISR_I2SExt+0x90>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d101      	bne.n	8005982 <I2SEx_RxISR_I2SExt+0x16>
 800597e:	4b20      	ldr	r3, [pc, #128]	@ (8005a00 <I2SEx_RxISR_I2SExt+0x94>)
 8005980:	e001      	b.n	8005986 <I2SEx_RxISR_I2SExt+0x1a>
 8005982:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005986:	68d8      	ldr	r0, [r3, #12]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800598c:	1c99      	adds	r1, r3, #2
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005992:	b282      	uxth	r2, r0
 8005994:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800599a:	b29b      	uxth	r3, r3
 800599c:	3b01      	subs	r3, #1
 800599e:	b29a      	uxth	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d121      	bne.n	80059f2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a12      	ldr	r2, [pc, #72]	@ (80059fc <I2SEx_RxISR_I2SExt+0x90>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d101      	bne.n	80059bc <I2SEx_RxISR_I2SExt+0x50>
 80059b8:	4b11      	ldr	r3, [pc, #68]	@ (8005a00 <I2SEx_RxISR_I2SExt+0x94>)
 80059ba:	e001      	b.n	80059c0 <I2SEx_RxISR_I2SExt+0x54>
 80059bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80059c0:	685a      	ldr	r2, [r3, #4]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	490d      	ldr	r1, [pc, #52]	@ (80059fc <I2SEx_RxISR_I2SExt+0x90>)
 80059c8:	428b      	cmp	r3, r1
 80059ca:	d101      	bne.n	80059d0 <I2SEx_RxISR_I2SExt+0x64>
 80059cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005a00 <I2SEx_RxISR_I2SExt+0x94>)
 80059ce:	e001      	b.n	80059d4 <I2SEx_RxISR_I2SExt+0x68>
 80059d0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80059d4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80059d8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059de:	b29b      	uxth	r3, r3
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d106      	bne.n	80059f2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f7ff ff03 	bl	80057f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80059f2:	bf00      	nop
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	40003800 	.word	0x40003800
 8005a00:	40003400 	.word	0x40003400

08005a04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b086      	sub	sp, #24
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e267      	b.n	8005ee6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d075      	beq.n	8005b0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005a22:	4b88      	ldr	r3, [pc, #544]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f003 030c 	and.w	r3, r3, #12
 8005a2a:	2b04      	cmp	r3, #4
 8005a2c:	d00c      	beq.n	8005a48 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a2e:	4b85      	ldr	r3, [pc, #532]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005a36:	2b08      	cmp	r3, #8
 8005a38:	d112      	bne.n	8005a60 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a3a:	4b82      	ldr	r3, [pc, #520]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a46:	d10b      	bne.n	8005a60 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a48:	4b7e      	ldr	r3, [pc, #504]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d05b      	beq.n	8005b0c <HAL_RCC_OscConfig+0x108>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d157      	bne.n	8005b0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e242      	b.n	8005ee6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a68:	d106      	bne.n	8005a78 <HAL_RCC_OscConfig+0x74>
 8005a6a:	4b76      	ldr	r3, [pc, #472]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a75      	ldr	r2, [pc, #468]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005a70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a74:	6013      	str	r3, [r2, #0]
 8005a76:	e01d      	b.n	8005ab4 <HAL_RCC_OscConfig+0xb0>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a80:	d10c      	bne.n	8005a9c <HAL_RCC_OscConfig+0x98>
 8005a82:	4b70      	ldr	r3, [pc, #448]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a6f      	ldr	r2, [pc, #444]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005a88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a8c:	6013      	str	r3, [r2, #0]
 8005a8e:	4b6d      	ldr	r3, [pc, #436]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a6c      	ldr	r2, [pc, #432]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005a94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a98:	6013      	str	r3, [r2, #0]
 8005a9a:	e00b      	b.n	8005ab4 <HAL_RCC_OscConfig+0xb0>
 8005a9c:	4b69      	ldr	r3, [pc, #420]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a68      	ldr	r2, [pc, #416]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005aa2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005aa6:	6013      	str	r3, [r2, #0]
 8005aa8:	4b66      	ldr	r3, [pc, #408]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a65      	ldr	r2, [pc, #404]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005aae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ab2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d013      	beq.n	8005ae4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005abc:	f7fc f9bc 	bl	8001e38 <HAL_GetTick>
 8005ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ac2:	e008      	b.n	8005ad6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ac4:	f7fc f9b8 	bl	8001e38 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	2b64      	cmp	r3, #100	@ 0x64
 8005ad0:	d901      	bls.n	8005ad6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e207      	b.n	8005ee6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ad6:	4b5b      	ldr	r3, [pc, #364]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d0f0      	beq.n	8005ac4 <HAL_RCC_OscConfig+0xc0>
 8005ae2:	e014      	b.n	8005b0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ae4:	f7fc f9a8 	bl	8001e38 <HAL_GetTick>
 8005ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005aea:	e008      	b.n	8005afe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005aec:	f7fc f9a4 	bl	8001e38 <HAL_GetTick>
 8005af0:	4602      	mov	r2, r0
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	2b64      	cmp	r3, #100	@ 0x64
 8005af8:	d901      	bls.n	8005afe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e1f3      	b.n	8005ee6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005afe:	4b51      	ldr	r3, [pc, #324]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1f0      	bne.n	8005aec <HAL_RCC_OscConfig+0xe8>
 8005b0a:	e000      	b.n	8005b0e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 0302 	and.w	r3, r3, #2
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d063      	beq.n	8005be2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005b1a:	4b4a      	ldr	r3, [pc, #296]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f003 030c 	and.w	r3, r3, #12
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00b      	beq.n	8005b3e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b26:	4b47      	ldr	r3, [pc, #284]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005b2e:	2b08      	cmp	r3, #8
 8005b30:	d11c      	bne.n	8005b6c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b32:	4b44      	ldr	r3, [pc, #272]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d116      	bne.n	8005b6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b3e:	4b41      	ldr	r3, [pc, #260]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0302 	and.w	r3, r3, #2
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d005      	beq.n	8005b56 <HAL_RCC_OscConfig+0x152>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d001      	beq.n	8005b56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e1c7      	b.n	8005ee6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b56:	4b3b      	ldr	r3, [pc, #236]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	00db      	lsls	r3, r3, #3
 8005b64:	4937      	ldr	r1, [pc, #220]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b6a:	e03a      	b.n	8005be2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d020      	beq.n	8005bb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b74:	4b34      	ldr	r3, [pc, #208]	@ (8005c48 <HAL_RCC_OscConfig+0x244>)
 8005b76:	2201      	movs	r2, #1
 8005b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b7a:	f7fc f95d 	bl	8001e38 <HAL_GetTick>
 8005b7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b80:	e008      	b.n	8005b94 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b82:	f7fc f959 	bl	8001e38 <HAL_GetTick>
 8005b86:	4602      	mov	r2, r0
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d901      	bls.n	8005b94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	e1a8      	b.n	8005ee6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b94:	4b2b      	ldr	r3, [pc, #172]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0302 	and.w	r3, r3, #2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d0f0      	beq.n	8005b82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ba0:	4b28      	ldr	r3, [pc, #160]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	00db      	lsls	r3, r3, #3
 8005bae:	4925      	ldr	r1, [pc, #148]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	600b      	str	r3, [r1, #0]
 8005bb4:	e015      	b.n	8005be2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bb6:	4b24      	ldr	r3, [pc, #144]	@ (8005c48 <HAL_RCC_OscConfig+0x244>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bbc:	f7fc f93c 	bl	8001e38 <HAL_GetTick>
 8005bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bc2:	e008      	b.n	8005bd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bc4:	f7fc f938 	bl	8001e38 <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d901      	bls.n	8005bd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e187      	b.n	8005ee6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bd6:	4b1b      	ldr	r3, [pc, #108]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0302 	and.w	r3, r3, #2
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1f0      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0308 	and.w	r3, r3, #8
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d036      	beq.n	8005c5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d016      	beq.n	8005c24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bf6:	4b15      	ldr	r3, [pc, #84]	@ (8005c4c <HAL_RCC_OscConfig+0x248>)
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bfc:	f7fc f91c 	bl	8001e38 <HAL_GetTick>
 8005c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c02:	e008      	b.n	8005c16 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c04:	f7fc f918 	bl	8001e38 <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d901      	bls.n	8005c16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e167      	b.n	8005ee6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c16:	4b0b      	ldr	r3, [pc, #44]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005c18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d0f0      	beq.n	8005c04 <HAL_RCC_OscConfig+0x200>
 8005c22:	e01b      	b.n	8005c5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c24:	4b09      	ldr	r3, [pc, #36]	@ (8005c4c <HAL_RCC_OscConfig+0x248>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c2a:	f7fc f905 	bl	8001e38 <HAL_GetTick>
 8005c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c30:	e00e      	b.n	8005c50 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c32:	f7fc f901 	bl	8001e38 <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d907      	bls.n	8005c50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e150      	b.n	8005ee6 <HAL_RCC_OscConfig+0x4e2>
 8005c44:	40023800 	.word	0x40023800
 8005c48:	42470000 	.word	0x42470000
 8005c4c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c50:	4b88      	ldr	r3, [pc, #544]	@ (8005e74 <HAL_RCC_OscConfig+0x470>)
 8005c52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c54:	f003 0302 	and.w	r3, r3, #2
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d1ea      	bne.n	8005c32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0304 	and.w	r3, r3, #4
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f000 8097 	beq.w	8005d98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c6e:	4b81      	ldr	r3, [pc, #516]	@ (8005e74 <HAL_RCC_OscConfig+0x470>)
 8005c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10f      	bne.n	8005c9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	60bb      	str	r3, [r7, #8]
 8005c7e:	4b7d      	ldr	r3, [pc, #500]	@ (8005e74 <HAL_RCC_OscConfig+0x470>)
 8005c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c82:	4a7c      	ldr	r2, [pc, #496]	@ (8005e74 <HAL_RCC_OscConfig+0x470>)
 8005c84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c88:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c8a:	4b7a      	ldr	r3, [pc, #488]	@ (8005e74 <HAL_RCC_OscConfig+0x470>)
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c92:	60bb      	str	r3, [r7, #8]
 8005c94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c96:	2301      	movs	r3, #1
 8005c98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c9a:	4b77      	ldr	r3, [pc, #476]	@ (8005e78 <HAL_RCC_OscConfig+0x474>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d118      	bne.n	8005cd8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ca6:	4b74      	ldr	r3, [pc, #464]	@ (8005e78 <HAL_RCC_OscConfig+0x474>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a73      	ldr	r2, [pc, #460]	@ (8005e78 <HAL_RCC_OscConfig+0x474>)
 8005cac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cb2:	f7fc f8c1 	bl	8001e38 <HAL_GetTick>
 8005cb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cb8:	e008      	b.n	8005ccc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cba:	f7fc f8bd 	bl	8001e38 <HAL_GetTick>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d901      	bls.n	8005ccc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e10c      	b.n	8005ee6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ccc:	4b6a      	ldr	r3, [pc, #424]	@ (8005e78 <HAL_RCC_OscConfig+0x474>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d0f0      	beq.n	8005cba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d106      	bne.n	8005cee <HAL_RCC_OscConfig+0x2ea>
 8005ce0:	4b64      	ldr	r3, [pc, #400]	@ (8005e74 <HAL_RCC_OscConfig+0x470>)
 8005ce2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ce4:	4a63      	ldr	r2, [pc, #396]	@ (8005e74 <HAL_RCC_OscConfig+0x470>)
 8005ce6:	f043 0301 	orr.w	r3, r3, #1
 8005cea:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cec:	e01c      	b.n	8005d28 <HAL_RCC_OscConfig+0x324>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	2b05      	cmp	r3, #5
 8005cf4:	d10c      	bne.n	8005d10 <HAL_RCC_OscConfig+0x30c>
 8005cf6:	4b5f      	ldr	r3, [pc, #380]	@ (8005e74 <HAL_RCC_OscConfig+0x470>)
 8005cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cfa:	4a5e      	ldr	r2, [pc, #376]	@ (8005e74 <HAL_RCC_OscConfig+0x470>)
 8005cfc:	f043 0304 	orr.w	r3, r3, #4
 8005d00:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d02:	4b5c      	ldr	r3, [pc, #368]	@ (8005e74 <HAL_RCC_OscConfig+0x470>)
 8005d04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d06:	4a5b      	ldr	r2, [pc, #364]	@ (8005e74 <HAL_RCC_OscConfig+0x470>)
 8005d08:	f043 0301 	orr.w	r3, r3, #1
 8005d0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d0e:	e00b      	b.n	8005d28 <HAL_RCC_OscConfig+0x324>
 8005d10:	4b58      	ldr	r3, [pc, #352]	@ (8005e74 <HAL_RCC_OscConfig+0x470>)
 8005d12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d14:	4a57      	ldr	r2, [pc, #348]	@ (8005e74 <HAL_RCC_OscConfig+0x470>)
 8005d16:	f023 0301 	bic.w	r3, r3, #1
 8005d1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d1c:	4b55      	ldr	r3, [pc, #340]	@ (8005e74 <HAL_RCC_OscConfig+0x470>)
 8005d1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d20:	4a54      	ldr	r2, [pc, #336]	@ (8005e74 <HAL_RCC_OscConfig+0x470>)
 8005d22:	f023 0304 	bic.w	r3, r3, #4
 8005d26:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d015      	beq.n	8005d5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d30:	f7fc f882 	bl	8001e38 <HAL_GetTick>
 8005d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d36:	e00a      	b.n	8005d4e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d38:	f7fc f87e 	bl	8001e38 <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d901      	bls.n	8005d4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e0cb      	b.n	8005ee6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d4e:	4b49      	ldr	r3, [pc, #292]	@ (8005e74 <HAL_RCC_OscConfig+0x470>)
 8005d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d52:	f003 0302 	and.w	r3, r3, #2
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d0ee      	beq.n	8005d38 <HAL_RCC_OscConfig+0x334>
 8005d5a:	e014      	b.n	8005d86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d5c:	f7fc f86c 	bl	8001e38 <HAL_GetTick>
 8005d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d62:	e00a      	b.n	8005d7a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d64:	f7fc f868 	bl	8001e38 <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d901      	bls.n	8005d7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e0b5      	b.n	8005ee6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d7a:	4b3e      	ldr	r3, [pc, #248]	@ (8005e74 <HAL_RCC_OscConfig+0x470>)
 8005d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d7e:	f003 0302 	and.w	r3, r3, #2
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d1ee      	bne.n	8005d64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005d86:	7dfb      	ldrb	r3, [r7, #23]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d105      	bne.n	8005d98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d8c:	4b39      	ldr	r3, [pc, #228]	@ (8005e74 <HAL_RCC_OscConfig+0x470>)
 8005d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d90:	4a38      	ldr	r2, [pc, #224]	@ (8005e74 <HAL_RCC_OscConfig+0x470>)
 8005d92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d96:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f000 80a1 	beq.w	8005ee4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005da2:	4b34      	ldr	r3, [pc, #208]	@ (8005e74 <HAL_RCC_OscConfig+0x470>)
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f003 030c 	and.w	r3, r3, #12
 8005daa:	2b08      	cmp	r3, #8
 8005dac:	d05c      	beq.n	8005e68 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d141      	bne.n	8005e3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005db6:	4b31      	ldr	r3, [pc, #196]	@ (8005e7c <HAL_RCC_OscConfig+0x478>)
 8005db8:	2200      	movs	r2, #0
 8005dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dbc:	f7fc f83c 	bl	8001e38 <HAL_GetTick>
 8005dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dc2:	e008      	b.n	8005dd6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dc4:	f7fc f838 	bl	8001e38 <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d901      	bls.n	8005dd6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e087      	b.n	8005ee6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dd6:	4b27      	ldr	r3, [pc, #156]	@ (8005e74 <HAL_RCC_OscConfig+0x470>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1f0      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	69da      	ldr	r2, [r3, #28]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	431a      	orrs	r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df0:	019b      	lsls	r3, r3, #6
 8005df2:	431a      	orrs	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df8:	085b      	lsrs	r3, r3, #1
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	041b      	lsls	r3, r3, #16
 8005dfe:	431a      	orrs	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e04:	061b      	lsls	r3, r3, #24
 8005e06:	491b      	ldr	r1, [pc, #108]	@ (8005e74 <HAL_RCC_OscConfig+0x470>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8005e7c <HAL_RCC_OscConfig+0x478>)
 8005e0e:	2201      	movs	r2, #1
 8005e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e12:	f7fc f811 	bl	8001e38 <HAL_GetTick>
 8005e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e18:	e008      	b.n	8005e2c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e1a:	f7fc f80d 	bl	8001e38 <HAL_GetTick>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	d901      	bls.n	8005e2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005e28:	2303      	movs	r3, #3
 8005e2a:	e05c      	b.n	8005ee6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e2c:	4b11      	ldr	r3, [pc, #68]	@ (8005e74 <HAL_RCC_OscConfig+0x470>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d0f0      	beq.n	8005e1a <HAL_RCC_OscConfig+0x416>
 8005e38:	e054      	b.n	8005ee4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e3a:	4b10      	ldr	r3, [pc, #64]	@ (8005e7c <HAL_RCC_OscConfig+0x478>)
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e40:	f7fb fffa 	bl	8001e38 <HAL_GetTick>
 8005e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e46:	e008      	b.n	8005e5a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e48:	f7fb fff6 	bl	8001e38 <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d901      	bls.n	8005e5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e045      	b.n	8005ee6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e5a:	4b06      	ldr	r3, [pc, #24]	@ (8005e74 <HAL_RCC_OscConfig+0x470>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d1f0      	bne.n	8005e48 <HAL_RCC_OscConfig+0x444>
 8005e66:	e03d      	b.n	8005ee4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d107      	bne.n	8005e80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e038      	b.n	8005ee6 <HAL_RCC_OscConfig+0x4e2>
 8005e74:	40023800 	.word	0x40023800
 8005e78:	40007000 	.word	0x40007000
 8005e7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e80:	4b1b      	ldr	r3, [pc, #108]	@ (8005ef0 <HAL_RCC_OscConfig+0x4ec>)
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	699b      	ldr	r3, [r3, #24]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d028      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d121      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d11a      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005eb6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d111      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ec6:	085b      	lsrs	r3, r3, #1
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d107      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d001      	beq.n	8005ee4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e000      	b.n	8005ee6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3718      	adds	r7, #24
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	40023800 	.word	0x40023800

08005ef4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d101      	bne.n	8005f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e0cc      	b.n	80060a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f08:	4b68      	ldr	r3, [pc, #416]	@ (80060ac <HAL_RCC_ClockConfig+0x1b8>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0307 	and.w	r3, r3, #7
 8005f10:	683a      	ldr	r2, [r7, #0]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d90c      	bls.n	8005f30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f16:	4b65      	ldr	r3, [pc, #404]	@ (80060ac <HAL_RCC_ClockConfig+0x1b8>)
 8005f18:	683a      	ldr	r2, [r7, #0]
 8005f1a:	b2d2      	uxtb	r2, r2
 8005f1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f1e:	4b63      	ldr	r3, [pc, #396]	@ (80060ac <HAL_RCC_ClockConfig+0x1b8>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 0307 	and.w	r3, r3, #7
 8005f26:	683a      	ldr	r2, [r7, #0]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d001      	beq.n	8005f30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e0b8      	b.n	80060a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0302 	and.w	r3, r3, #2
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d020      	beq.n	8005f7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0304 	and.w	r3, r3, #4
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d005      	beq.n	8005f54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f48:	4b59      	ldr	r3, [pc, #356]	@ (80060b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	4a58      	ldr	r2, [pc, #352]	@ (80060b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f4e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005f52:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0308 	and.w	r3, r3, #8
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d005      	beq.n	8005f6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f60:	4b53      	ldr	r3, [pc, #332]	@ (80060b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	4a52      	ldr	r2, [pc, #328]	@ (80060b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f66:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005f6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f6c:	4b50      	ldr	r3, [pc, #320]	@ (80060b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	494d      	ldr	r1, [pc, #308]	@ (80060b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0301 	and.w	r3, r3, #1
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d044      	beq.n	8006014 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d107      	bne.n	8005fa2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f92:	4b47      	ldr	r3, [pc, #284]	@ (80060b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d119      	bne.n	8005fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e07f      	b.n	80060a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d003      	beq.n	8005fb2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fae:	2b03      	cmp	r3, #3
 8005fb0:	d107      	bne.n	8005fc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fb2:	4b3f      	ldr	r3, [pc, #252]	@ (80060b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d109      	bne.n	8005fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e06f      	b.n	80060a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fc2:	4b3b      	ldr	r3, [pc, #236]	@ (80060b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0302 	and.w	r3, r3, #2
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d101      	bne.n	8005fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e067      	b.n	80060a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fd2:	4b37      	ldr	r3, [pc, #220]	@ (80060b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	f023 0203 	bic.w	r2, r3, #3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	4934      	ldr	r1, [pc, #208]	@ (80060b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fe4:	f7fb ff28 	bl	8001e38 <HAL_GetTick>
 8005fe8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fea:	e00a      	b.n	8006002 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fec:	f7fb ff24 	bl	8001e38 <HAL_GetTick>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d901      	bls.n	8006002 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e04f      	b.n	80060a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006002:	4b2b      	ldr	r3, [pc, #172]	@ (80060b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f003 020c 	and.w	r2, r3, #12
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	429a      	cmp	r2, r3
 8006012:	d1eb      	bne.n	8005fec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006014:	4b25      	ldr	r3, [pc, #148]	@ (80060ac <HAL_RCC_ClockConfig+0x1b8>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 0307 	and.w	r3, r3, #7
 800601c:	683a      	ldr	r2, [r7, #0]
 800601e:	429a      	cmp	r2, r3
 8006020:	d20c      	bcs.n	800603c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006022:	4b22      	ldr	r3, [pc, #136]	@ (80060ac <HAL_RCC_ClockConfig+0x1b8>)
 8006024:	683a      	ldr	r2, [r7, #0]
 8006026:	b2d2      	uxtb	r2, r2
 8006028:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800602a:	4b20      	ldr	r3, [pc, #128]	@ (80060ac <HAL_RCC_ClockConfig+0x1b8>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0307 	and.w	r3, r3, #7
 8006032:	683a      	ldr	r2, [r7, #0]
 8006034:	429a      	cmp	r2, r3
 8006036:	d001      	beq.n	800603c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e032      	b.n	80060a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0304 	and.w	r3, r3, #4
 8006044:	2b00      	cmp	r3, #0
 8006046:	d008      	beq.n	800605a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006048:	4b19      	ldr	r3, [pc, #100]	@ (80060b0 <HAL_RCC_ClockConfig+0x1bc>)
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	4916      	ldr	r1, [pc, #88]	@ (80060b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006056:	4313      	orrs	r3, r2
 8006058:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0308 	and.w	r3, r3, #8
 8006062:	2b00      	cmp	r3, #0
 8006064:	d009      	beq.n	800607a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006066:	4b12      	ldr	r3, [pc, #72]	@ (80060b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	00db      	lsls	r3, r3, #3
 8006074:	490e      	ldr	r1, [pc, #56]	@ (80060b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006076:	4313      	orrs	r3, r2
 8006078:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800607a:	f000 f821 	bl	80060c0 <HAL_RCC_GetSysClockFreq>
 800607e:	4602      	mov	r2, r0
 8006080:	4b0b      	ldr	r3, [pc, #44]	@ (80060b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	091b      	lsrs	r3, r3, #4
 8006086:	f003 030f 	and.w	r3, r3, #15
 800608a:	490a      	ldr	r1, [pc, #40]	@ (80060b4 <HAL_RCC_ClockConfig+0x1c0>)
 800608c:	5ccb      	ldrb	r3, [r1, r3]
 800608e:	fa22 f303 	lsr.w	r3, r2, r3
 8006092:	4a09      	ldr	r2, [pc, #36]	@ (80060b8 <HAL_RCC_ClockConfig+0x1c4>)
 8006094:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006096:	4b09      	ldr	r3, [pc, #36]	@ (80060bc <HAL_RCC_ClockConfig+0x1c8>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4618      	mov	r0, r3
 800609c:	f7fb fe88 	bl	8001db0 <HAL_InitTick>

  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	40023c00 	.word	0x40023c00
 80060b0:	40023800 	.word	0x40023800
 80060b4:	0800c9c4 	.word	0x0800c9c4
 80060b8:	20000000 	.word	0x20000000
 80060bc:	20000004 	.word	0x20000004

080060c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060c4:	b094      	sub	sp, #80	@ 0x50
 80060c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80060c8:	2300      	movs	r3, #0
 80060ca:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80060cc:	2300      	movs	r3, #0
 80060ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80060d0:	2300      	movs	r3, #0
 80060d2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80060d4:	2300      	movs	r3, #0
 80060d6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80060d8:	4b79      	ldr	r3, [pc, #484]	@ (80062c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f003 030c 	and.w	r3, r3, #12
 80060e0:	2b08      	cmp	r3, #8
 80060e2:	d00d      	beq.n	8006100 <HAL_RCC_GetSysClockFreq+0x40>
 80060e4:	2b08      	cmp	r3, #8
 80060e6:	f200 80e1 	bhi.w	80062ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d002      	beq.n	80060f4 <HAL_RCC_GetSysClockFreq+0x34>
 80060ee:	2b04      	cmp	r3, #4
 80060f0:	d003      	beq.n	80060fa <HAL_RCC_GetSysClockFreq+0x3a>
 80060f2:	e0db      	b.n	80062ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80060f4:	4b73      	ldr	r3, [pc, #460]	@ (80062c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80060f6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80060f8:	e0db      	b.n	80062b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80060fa:	4b73      	ldr	r3, [pc, #460]	@ (80062c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80060fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80060fe:	e0d8      	b.n	80062b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006100:	4b6f      	ldr	r3, [pc, #444]	@ (80062c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006108:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800610a:	4b6d      	ldr	r3, [pc, #436]	@ (80062c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006112:	2b00      	cmp	r3, #0
 8006114:	d063      	beq.n	80061de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006116:	4b6a      	ldr	r3, [pc, #424]	@ (80062c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	099b      	lsrs	r3, r3, #6
 800611c:	2200      	movs	r2, #0
 800611e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006120:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006128:	633b      	str	r3, [r7, #48]	@ 0x30
 800612a:	2300      	movs	r3, #0
 800612c:	637b      	str	r3, [r7, #52]	@ 0x34
 800612e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006132:	4622      	mov	r2, r4
 8006134:	462b      	mov	r3, r5
 8006136:	f04f 0000 	mov.w	r0, #0
 800613a:	f04f 0100 	mov.w	r1, #0
 800613e:	0159      	lsls	r1, r3, #5
 8006140:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006144:	0150      	lsls	r0, r2, #5
 8006146:	4602      	mov	r2, r0
 8006148:	460b      	mov	r3, r1
 800614a:	4621      	mov	r1, r4
 800614c:	1a51      	subs	r1, r2, r1
 800614e:	6139      	str	r1, [r7, #16]
 8006150:	4629      	mov	r1, r5
 8006152:	eb63 0301 	sbc.w	r3, r3, r1
 8006156:	617b      	str	r3, [r7, #20]
 8006158:	f04f 0200 	mov.w	r2, #0
 800615c:	f04f 0300 	mov.w	r3, #0
 8006160:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006164:	4659      	mov	r1, fp
 8006166:	018b      	lsls	r3, r1, #6
 8006168:	4651      	mov	r1, sl
 800616a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800616e:	4651      	mov	r1, sl
 8006170:	018a      	lsls	r2, r1, #6
 8006172:	4651      	mov	r1, sl
 8006174:	ebb2 0801 	subs.w	r8, r2, r1
 8006178:	4659      	mov	r1, fp
 800617a:	eb63 0901 	sbc.w	r9, r3, r1
 800617e:	f04f 0200 	mov.w	r2, #0
 8006182:	f04f 0300 	mov.w	r3, #0
 8006186:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800618a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800618e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006192:	4690      	mov	r8, r2
 8006194:	4699      	mov	r9, r3
 8006196:	4623      	mov	r3, r4
 8006198:	eb18 0303 	adds.w	r3, r8, r3
 800619c:	60bb      	str	r3, [r7, #8]
 800619e:	462b      	mov	r3, r5
 80061a0:	eb49 0303 	adc.w	r3, r9, r3
 80061a4:	60fb      	str	r3, [r7, #12]
 80061a6:	f04f 0200 	mov.w	r2, #0
 80061aa:	f04f 0300 	mov.w	r3, #0
 80061ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80061b2:	4629      	mov	r1, r5
 80061b4:	024b      	lsls	r3, r1, #9
 80061b6:	4621      	mov	r1, r4
 80061b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80061bc:	4621      	mov	r1, r4
 80061be:	024a      	lsls	r2, r1, #9
 80061c0:	4610      	mov	r0, r2
 80061c2:	4619      	mov	r1, r3
 80061c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061c6:	2200      	movs	r2, #0
 80061c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80061d0:	f7fa fd1c 	bl	8000c0c <__aeabi_uldivmod>
 80061d4:	4602      	mov	r2, r0
 80061d6:	460b      	mov	r3, r1
 80061d8:	4613      	mov	r3, r2
 80061da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061dc:	e058      	b.n	8006290 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061de:	4b38      	ldr	r3, [pc, #224]	@ (80062c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	099b      	lsrs	r3, r3, #6
 80061e4:	2200      	movs	r2, #0
 80061e6:	4618      	mov	r0, r3
 80061e8:	4611      	mov	r1, r2
 80061ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80061ee:	623b      	str	r3, [r7, #32]
 80061f0:	2300      	movs	r3, #0
 80061f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80061f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80061f8:	4642      	mov	r2, r8
 80061fa:	464b      	mov	r3, r9
 80061fc:	f04f 0000 	mov.w	r0, #0
 8006200:	f04f 0100 	mov.w	r1, #0
 8006204:	0159      	lsls	r1, r3, #5
 8006206:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800620a:	0150      	lsls	r0, r2, #5
 800620c:	4602      	mov	r2, r0
 800620e:	460b      	mov	r3, r1
 8006210:	4641      	mov	r1, r8
 8006212:	ebb2 0a01 	subs.w	sl, r2, r1
 8006216:	4649      	mov	r1, r9
 8006218:	eb63 0b01 	sbc.w	fp, r3, r1
 800621c:	f04f 0200 	mov.w	r2, #0
 8006220:	f04f 0300 	mov.w	r3, #0
 8006224:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006228:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800622c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006230:	ebb2 040a 	subs.w	r4, r2, sl
 8006234:	eb63 050b 	sbc.w	r5, r3, fp
 8006238:	f04f 0200 	mov.w	r2, #0
 800623c:	f04f 0300 	mov.w	r3, #0
 8006240:	00eb      	lsls	r3, r5, #3
 8006242:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006246:	00e2      	lsls	r2, r4, #3
 8006248:	4614      	mov	r4, r2
 800624a:	461d      	mov	r5, r3
 800624c:	4643      	mov	r3, r8
 800624e:	18e3      	adds	r3, r4, r3
 8006250:	603b      	str	r3, [r7, #0]
 8006252:	464b      	mov	r3, r9
 8006254:	eb45 0303 	adc.w	r3, r5, r3
 8006258:	607b      	str	r3, [r7, #4]
 800625a:	f04f 0200 	mov.w	r2, #0
 800625e:	f04f 0300 	mov.w	r3, #0
 8006262:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006266:	4629      	mov	r1, r5
 8006268:	028b      	lsls	r3, r1, #10
 800626a:	4621      	mov	r1, r4
 800626c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006270:	4621      	mov	r1, r4
 8006272:	028a      	lsls	r2, r1, #10
 8006274:	4610      	mov	r0, r2
 8006276:	4619      	mov	r1, r3
 8006278:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800627a:	2200      	movs	r2, #0
 800627c:	61bb      	str	r3, [r7, #24]
 800627e:	61fa      	str	r2, [r7, #28]
 8006280:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006284:	f7fa fcc2 	bl	8000c0c <__aeabi_uldivmod>
 8006288:	4602      	mov	r2, r0
 800628a:	460b      	mov	r3, r1
 800628c:	4613      	mov	r3, r2
 800628e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006290:	4b0b      	ldr	r3, [pc, #44]	@ (80062c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	0c1b      	lsrs	r3, r3, #16
 8006296:	f003 0303 	and.w	r3, r3, #3
 800629a:	3301      	adds	r3, #1
 800629c:	005b      	lsls	r3, r3, #1
 800629e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80062a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80062a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80062aa:	e002      	b.n	80062b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80062ac:	4b05      	ldr	r3, [pc, #20]	@ (80062c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80062ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80062b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3750      	adds	r7, #80	@ 0x50
 80062b8:	46bd      	mov	sp, r7
 80062ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062be:	bf00      	nop
 80062c0:	40023800 	.word	0x40023800
 80062c4:	00f42400 	.word	0x00f42400
 80062c8:	007a1200 	.word	0x007a1200

080062cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062cc:	b480      	push	{r7}
 80062ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062d0:	4b03      	ldr	r3, [pc, #12]	@ (80062e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80062d2:	681b      	ldr	r3, [r3, #0]
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	20000000 	.word	0x20000000

080062e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80062e8:	f7ff fff0 	bl	80062cc <HAL_RCC_GetHCLKFreq>
 80062ec:	4602      	mov	r2, r0
 80062ee:	4b05      	ldr	r3, [pc, #20]	@ (8006304 <HAL_RCC_GetPCLK1Freq+0x20>)
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	0a9b      	lsrs	r3, r3, #10
 80062f4:	f003 0307 	and.w	r3, r3, #7
 80062f8:	4903      	ldr	r1, [pc, #12]	@ (8006308 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062fa:	5ccb      	ldrb	r3, [r1, r3]
 80062fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006300:	4618      	mov	r0, r3
 8006302:	bd80      	pop	{r7, pc}
 8006304:	40023800 	.word	0x40023800
 8006308:	0800c9d4 	.word	0x0800c9d4

0800630c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b086      	sub	sp, #24
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006314:	2300      	movs	r3, #0
 8006316:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006318:	2300      	movs	r3, #0
 800631a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 0301 	and.w	r3, r3, #1
 8006324:	2b00      	cmp	r3, #0
 8006326:	d105      	bne.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006330:	2b00      	cmp	r3, #0
 8006332:	d035      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006334:	4b62      	ldr	r3, [pc, #392]	@ (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006336:	2200      	movs	r2, #0
 8006338:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800633a:	f7fb fd7d 	bl	8001e38 <HAL_GetTick>
 800633e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006340:	e008      	b.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006342:	f7fb fd79 	bl	8001e38 <HAL_GetTick>
 8006346:	4602      	mov	r2, r0
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	2b02      	cmp	r3, #2
 800634e:	d901      	bls.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006350:	2303      	movs	r3, #3
 8006352:	e0b0      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006354:	4b5b      	ldr	r3, [pc, #364]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d1f0      	bne.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	019a      	lsls	r2, r3, #6
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	071b      	lsls	r3, r3, #28
 800636c:	4955      	ldr	r1, [pc, #340]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800636e:	4313      	orrs	r3, r2
 8006370:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006374:	4b52      	ldr	r3, [pc, #328]	@ (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006376:	2201      	movs	r2, #1
 8006378:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800637a:	f7fb fd5d 	bl	8001e38 <HAL_GetTick>
 800637e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006380:	e008      	b.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006382:	f7fb fd59 	bl	8001e38 <HAL_GetTick>
 8006386:	4602      	mov	r2, r0
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	2b02      	cmp	r3, #2
 800638e:	d901      	bls.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	e090      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006394:	4b4b      	ldr	r3, [pc, #300]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d0f0      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 0302 	and.w	r3, r3, #2
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f000 8083 	beq.w	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80063ae:	2300      	movs	r3, #0
 80063b0:	60fb      	str	r3, [r7, #12]
 80063b2:	4b44      	ldr	r3, [pc, #272]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063b6:	4a43      	ldr	r2, [pc, #268]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80063be:	4b41      	ldr	r3, [pc, #260]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063c6:	60fb      	str	r3, [r7, #12]
 80063c8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80063ca:	4b3f      	ldr	r3, [pc, #252]	@ (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a3e      	ldr	r2, [pc, #248]	@ (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80063d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063d4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80063d6:	f7fb fd2f 	bl	8001e38 <HAL_GetTick>
 80063da:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80063dc:	e008      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063de:	f7fb fd2b 	bl	8001e38 <HAL_GetTick>
 80063e2:	4602      	mov	r2, r0
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	1ad3      	subs	r3, r2, r3
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d901      	bls.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e062      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80063f0:	4b35      	ldr	r3, [pc, #212]	@ (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d0f0      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80063fc:	4b31      	ldr	r3, [pc, #196]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006400:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006404:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d02f      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	429a      	cmp	r2, r3
 8006418:	d028      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800641a:	4b2a      	ldr	r3, [pc, #168]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800641c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800641e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006422:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006424:	4b29      	ldr	r3, [pc, #164]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006426:	2201      	movs	r2, #1
 8006428:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800642a:	4b28      	ldr	r3, [pc, #160]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800642c:	2200      	movs	r2, #0
 800642e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006430:	4a24      	ldr	r2, [pc, #144]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006436:	4b23      	ldr	r3, [pc, #140]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800643a:	f003 0301 	and.w	r3, r3, #1
 800643e:	2b01      	cmp	r3, #1
 8006440:	d114      	bne.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006442:	f7fb fcf9 	bl	8001e38 <HAL_GetTick>
 8006446:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006448:	e00a      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800644a:	f7fb fcf5 	bl	8001e38 <HAL_GetTick>
 800644e:	4602      	mov	r2, r0
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006458:	4293      	cmp	r3, r2
 800645a:	d901      	bls.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800645c:	2303      	movs	r3, #3
 800645e:	e02a      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006460:	4b18      	ldr	r3, [pc, #96]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006464:	f003 0302 	and.w	r3, r3, #2
 8006468:	2b00      	cmp	r3, #0
 800646a:	d0ee      	beq.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006474:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006478:	d10d      	bne.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800647a:	4b12      	ldr	r3, [pc, #72]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800648a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800648e:	490d      	ldr	r1, [pc, #52]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006490:	4313      	orrs	r3, r2
 8006492:	608b      	str	r3, [r1, #8]
 8006494:	e005      	b.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006496:	4b0b      	ldr	r3, [pc, #44]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	4a0a      	ldr	r2, [pc, #40]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800649c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80064a0:	6093      	str	r3, [r2, #8]
 80064a2:	4b08      	ldr	r3, [pc, #32]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064a4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064ae:	4905      	ldr	r1, [pc, #20]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064b0:	4313      	orrs	r3, r2
 80064b2:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3718      	adds	r7, #24
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	42470068 	.word	0x42470068
 80064c4:	40023800 	.word	0x40023800
 80064c8:	40007000 	.word	0x40007000
 80064cc:	42470e40 	.word	0x42470e40

080064d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b087      	sub	sp, #28
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80064d8:	2300      	movs	r3, #0
 80064da:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80064dc:	2300      	movs	r3, #0
 80064de:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80064e0:	2300      	movs	r3, #0
 80064e2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80064e4:	2300      	movs	r3, #0
 80064e6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d13f      	bne.n	800656e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80064ee:	4b24      	ldr	r3, [pc, #144]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80064f6:	60fb      	str	r3, [r7, #12]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d006      	beq.n	800650c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006504:	d12f      	bne.n	8006566 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006506:	4b1f      	ldr	r3, [pc, #124]	@ (8006584 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006508:	617b      	str	r3, [r7, #20]
          break;
 800650a:	e02f      	b.n	800656c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800650c:	4b1c      	ldr	r3, [pc, #112]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006514:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006518:	d108      	bne.n	800652c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800651a:	4b19      	ldr	r3, [pc, #100]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006522:	4a19      	ldr	r2, [pc, #100]	@ (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006524:	fbb2 f3f3 	udiv	r3, r2, r3
 8006528:	613b      	str	r3, [r7, #16]
 800652a:	e007      	b.n	800653c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800652c:	4b14      	ldr	r3, [pc, #80]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006534:	4a15      	ldr	r2, [pc, #84]	@ (800658c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006536:	fbb2 f3f3 	udiv	r3, r2, r3
 800653a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800653c:	4b10      	ldr	r3, [pc, #64]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800653e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006542:	099b      	lsrs	r3, r3, #6
 8006544:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	fb02 f303 	mul.w	r3, r2, r3
 800654e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006550:	4b0b      	ldr	r3, [pc, #44]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006552:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006556:	0f1b      	lsrs	r3, r3, #28
 8006558:	f003 0307 	and.w	r3, r3, #7
 800655c:	68ba      	ldr	r2, [r7, #8]
 800655e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006562:	617b      	str	r3, [r7, #20]
          break;
 8006564:	e002      	b.n	800656c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8006566:	2300      	movs	r3, #0
 8006568:	617b      	str	r3, [r7, #20]
          break;
 800656a:	bf00      	nop
        }
      }
      break;
 800656c:	e000      	b.n	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 800656e:	bf00      	nop
    }
  }
  return frequency;
 8006570:	697b      	ldr	r3, [r7, #20]
}
 8006572:	4618      	mov	r0, r3
 8006574:	371c      	adds	r7, #28
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	40023800 	.word	0x40023800
 8006584:	00bb8000 	.word	0x00bb8000
 8006588:	007a1200 	.word	0x007a1200
 800658c:	00f42400 	.word	0x00f42400

08006590 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b082      	sub	sp, #8
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d101      	bne.n	80065a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e07b      	b.n	800669a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d108      	bne.n	80065bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80065b2:	d009      	beq.n	80065c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	61da      	str	r2, [r3, #28]
 80065ba:	e005      	b.n	80065c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d106      	bne.n	80065e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f7fb f99a 	bl	800191c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2202      	movs	r2, #2
 80065ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006610:	431a      	orrs	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800661a:	431a      	orrs	r2, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	f003 0302 	and.w	r3, r3, #2
 8006624:	431a      	orrs	r2, r3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	f003 0301 	and.w	r3, r3, #1
 800662e:	431a      	orrs	r2, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	699b      	ldr	r3, [r3, #24]
 8006634:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006638:	431a      	orrs	r2, r3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	69db      	ldr	r3, [r3, #28]
 800663e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006642:	431a      	orrs	r2, r3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6a1b      	ldr	r3, [r3, #32]
 8006648:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800664c:	ea42 0103 	orr.w	r1, r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006654:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	430a      	orrs	r2, r1
 800665e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	699b      	ldr	r3, [r3, #24]
 8006664:	0c1b      	lsrs	r3, r3, #16
 8006666:	f003 0104 	and.w	r1, r3, #4
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800666e:	f003 0210 	and.w	r2, r3, #16
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	430a      	orrs	r2, r1
 8006678:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	69da      	ldr	r2, [r3, #28]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006688:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	3708      	adds	r7, #8
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}

080066a2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066a2:	b580      	push	{r7, lr}
 80066a4:	b082      	sub	sp, #8
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d101      	bne.n	80066b4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e041      	b.n	8006738 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d106      	bne.n	80066ce <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f7fb faff 	bl	8001ccc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2202      	movs	r2, #2
 80066d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	3304      	adds	r3, #4
 80066de:	4619      	mov	r1, r3
 80066e0:	4610      	mov	r0, r2
 80066e2:	f000 fa7d 	bl	8006be0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2201      	movs	r2, #1
 80066ea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2201      	movs	r2, #1
 80066f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2201      	movs	r2, #1
 800670a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2201      	movs	r2, #1
 8006712:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2201      	movs	r2, #1
 800672a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2201      	movs	r2, #1
 8006732:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3708      	adds	r7, #8
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006740:	b480      	push	{r7}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800674e:	b2db      	uxtb	r3, r3
 8006750:	2b01      	cmp	r3, #1
 8006752:	d001      	beq.n	8006758 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e04e      	b.n	80067f6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2202      	movs	r2, #2
 800675c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68da      	ldr	r2, [r3, #12]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f042 0201 	orr.w	r2, r2, #1
 800676e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a23      	ldr	r2, [pc, #140]	@ (8006804 <HAL_TIM_Base_Start_IT+0xc4>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d022      	beq.n	80067c0 <HAL_TIM_Base_Start_IT+0x80>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006782:	d01d      	beq.n	80067c0 <HAL_TIM_Base_Start_IT+0x80>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a1f      	ldr	r2, [pc, #124]	@ (8006808 <HAL_TIM_Base_Start_IT+0xc8>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d018      	beq.n	80067c0 <HAL_TIM_Base_Start_IT+0x80>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a1e      	ldr	r2, [pc, #120]	@ (800680c <HAL_TIM_Base_Start_IT+0xcc>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d013      	beq.n	80067c0 <HAL_TIM_Base_Start_IT+0x80>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a1c      	ldr	r2, [pc, #112]	@ (8006810 <HAL_TIM_Base_Start_IT+0xd0>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d00e      	beq.n	80067c0 <HAL_TIM_Base_Start_IT+0x80>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a1b      	ldr	r2, [pc, #108]	@ (8006814 <HAL_TIM_Base_Start_IT+0xd4>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d009      	beq.n	80067c0 <HAL_TIM_Base_Start_IT+0x80>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a19      	ldr	r2, [pc, #100]	@ (8006818 <HAL_TIM_Base_Start_IT+0xd8>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d004      	beq.n	80067c0 <HAL_TIM_Base_Start_IT+0x80>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a18      	ldr	r2, [pc, #96]	@ (800681c <HAL_TIM_Base_Start_IT+0xdc>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d111      	bne.n	80067e4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	f003 0307 	and.w	r3, r3, #7
 80067ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2b06      	cmp	r3, #6
 80067d0:	d010      	beq.n	80067f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f042 0201 	orr.w	r2, r2, #1
 80067e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067e2:	e007      	b.n	80067f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f042 0201 	orr.w	r2, r2, #1
 80067f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3714      	adds	r7, #20
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	40010000 	.word	0x40010000
 8006808:	40000400 	.word	0x40000400
 800680c:	40000800 	.word	0x40000800
 8006810:	40000c00 	.word	0x40000c00
 8006814:	40010400 	.word	0x40010400
 8006818:	40014000 	.word	0x40014000
 800681c:	40001800 	.word	0x40001800

08006820 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	f003 0302 	and.w	r3, r3, #2
 800683e:	2b00      	cmp	r3, #0
 8006840:	d020      	beq.n	8006884 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f003 0302 	and.w	r3, r3, #2
 8006848:	2b00      	cmp	r3, #0
 800684a:	d01b      	beq.n	8006884 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f06f 0202 	mvn.w	r2, #2
 8006854:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2201      	movs	r2, #1
 800685a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	f003 0303 	and.w	r3, r3, #3
 8006866:	2b00      	cmp	r3, #0
 8006868:	d003      	beq.n	8006872 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 f999 	bl	8006ba2 <HAL_TIM_IC_CaptureCallback>
 8006870:	e005      	b.n	800687e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 f98b 	bl	8006b8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 f99c 	bl	8006bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	f003 0304 	and.w	r3, r3, #4
 800688a:	2b00      	cmp	r3, #0
 800688c:	d020      	beq.n	80068d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f003 0304 	and.w	r3, r3, #4
 8006894:	2b00      	cmp	r3, #0
 8006896:	d01b      	beq.n	80068d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f06f 0204 	mvn.w	r2, #4
 80068a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2202      	movs	r2, #2
 80068a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	699b      	ldr	r3, [r3, #24]
 80068ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d003      	beq.n	80068be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 f973 	bl	8006ba2 <HAL_TIM_IC_CaptureCallback>
 80068bc:	e005      	b.n	80068ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 f965 	bl	8006b8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 f976 	bl	8006bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	f003 0308 	and.w	r3, r3, #8
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d020      	beq.n	800691c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f003 0308 	and.w	r3, r3, #8
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d01b      	beq.n	800691c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f06f 0208 	mvn.w	r2, #8
 80068ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2204      	movs	r2, #4
 80068f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	69db      	ldr	r3, [r3, #28]
 80068fa:	f003 0303 	and.w	r3, r3, #3
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d003      	beq.n	800690a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 f94d 	bl	8006ba2 <HAL_TIM_IC_CaptureCallback>
 8006908:	e005      	b.n	8006916 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 f93f 	bl	8006b8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 f950 	bl	8006bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	f003 0310 	and.w	r3, r3, #16
 8006922:	2b00      	cmp	r3, #0
 8006924:	d020      	beq.n	8006968 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f003 0310 	and.w	r3, r3, #16
 800692c:	2b00      	cmp	r3, #0
 800692e:	d01b      	beq.n	8006968 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f06f 0210 	mvn.w	r2, #16
 8006938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2208      	movs	r2, #8
 800693e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	69db      	ldr	r3, [r3, #28]
 8006946:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800694a:	2b00      	cmp	r3, #0
 800694c:	d003      	beq.n	8006956 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f927 	bl	8006ba2 <HAL_TIM_IC_CaptureCallback>
 8006954:	e005      	b.n	8006962 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 f919 	bl	8006b8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 f92a 	bl	8006bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00c      	beq.n	800698c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f003 0301 	and.w	r3, r3, #1
 8006978:	2b00      	cmp	r3, #0
 800697a:	d007      	beq.n	800698c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f06f 0201 	mvn.w	r2, #1
 8006984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f7fa ff44 	bl	8001814 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00c      	beq.n	80069b0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800699c:	2b00      	cmp	r3, #0
 800699e:	d007      	beq.n	80069b0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80069a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 fae4 	bl	8006f78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00c      	beq.n	80069d4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d007      	beq.n	80069d4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80069cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 f8fb 	bl	8006bca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	f003 0320 	and.w	r3, r3, #32
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00c      	beq.n	80069f8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f003 0320 	and.w	r3, r3, #32
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d007      	beq.n	80069f8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f06f 0220 	mvn.w	r2, #32
 80069f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 fab6 	bl	8006f64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069f8:	bf00      	nop
 80069fa:	3710      	adds	r7, #16
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d101      	bne.n	8006a1c <HAL_TIM_ConfigClockSource+0x1c>
 8006a18:	2302      	movs	r3, #2
 8006a1a:	e0b4      	b.n	8006b86 <HAL_TIM_ConfigClockSource+0x186>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2202      	movs	r2, #2
 8006a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006a3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68ba      	ldr	r2, [r7, #8]
 8006a4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a54:	d03e      	beq.n	8006ad4 <HAL_TIM_ConfigClockSource+0xd4>
 8006a56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a5a:	f200 8087 	bhi.w	8006b6c <HAL_TIM_ConfigClockSource+0x16c>
 8006a5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a62:	f000 8086 	beq.w	8006b72 <HAL_TIM_ConfigClockSource+0x172>
 8006a66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a6a:	d87f      	bhi.n	8006b6c <HAL_TIM_ConfigClockSource+0x16c>
 8006a6c:	2b70      	cmp	r3, #112	@ 0x70
 8006a6e:	d01a      	beq.n	8006aa6 <HAL_TIM_ConfigClockSource+0xa6>
 8006a70:	2b70      	cmp	r3, #112	@ 0x70
 8006a72:	d87b      	bhi.n	8006b6c <HAL_TIM_ConfigClockSource+0x16c>
 8006a74:	2b60      	cmp	r3, #96	@ 0x60
 8006a76:	d050      	beq.n	8006b1a <HAL_TIM_ConfigClockSource+0x11a>
 8006a78:	2b60      	cmp	r3, #96	@ 0x60
 8006a7a:	d877      	bhi.n	8006b6c <HAL_TIM_ConfigClockSource+0x16c>
 8006a7c:	2b50      	cmp	r3, #80	@ 0x50
 8006a7e:	d03c      	beq.n	8006afa <HAL_TIM_ConfigClockSource+0xfa>
 8006a80:	2b50      	cmp	r3, #80	@ 0x50
 8006a82:	d873      	bhi.n	8006b6c <HAL_TIM_ConfigClockSource+0x16c>
 8006a84:	2b40      	cmp	r3, #64	@ 0x40
 8006a86:	d058      	beq.n	8006b3a <HAL_TIM_ConfigClockSource+0x13a>
 8006a88:	2b40      	cmp	r3, #64	@ 0x40
 8006a8a:	d86f      	bhi.n	8006b6c <HAL_TIM_ConfigClockSource+0x16c>
 8006a8c:	2b30      	cmp	r3, #48	@ 0x30
 8006a8e:	d064      	beq.n	8006b5a <HAL_TIM_ConfigClockSource+0x15a>
 8006a90:	2b30      	cmp	r3, #48	@ 0x30
 8006a92:	d86b      	bhi.n	8006b6c <HAL_TIM_ConfigClockSource+0x16c>
 8006a94:	2b20      	cmp	r3, #32
 8006a96:	d060      	beq.n	8006b5a <HAL_TIM_ConfigClockSource+0x15a>
 8006a98:	2b20      	cmp	r3, #32
 8006a9a:	d867      	bhi.n	8006b6c <HAL_TIM_ConfigClockSource+0x16c>
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d05c      	beq.n	8006b5a <HAL_TIM_ConfigClockSource+0x15a>
 8006aa0:	2b10      	cmp	r3, #16
 8006aa2:	d05a      	beq.n	8006b5a <HAL_TIM_ConfigClockSource+0x15a>
 8006aa4:	e062      	b.n	8006b6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ab6:	f000 f9b9 	bl	8006e2c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006ac8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	609a      	str	r2, [r3, #8]
      break;
 8006ad2:	e04f      	b.n	8006b74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ae4:	f000 f9a2 	bl	8006e2c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	689a      	ldr	r2, [r3, #8]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006af6:	609a      	str	r2, [r3, #8]
      break;
 8006af8:	e03c      	b.n	8006b74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b06:	461a      	mov	r2, r3
 8006b08:	f000 f916 	bl	8006d38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2150      	movs	r1, #80	@ 0x50
 8006b12:	4618      	mov	r0, r3
 8006b14:	f000 f96f 	bl	8006df6 <TIM_ITRx_SetConfig>
      break;
 8006b18:	e02c      	b.n	8006b74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b26:	461a      	mov	r2, r3
 8006b28:	f000 f935 	bl	8006d96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2160      	movs	r1, #96	@ 0x60
 8006b32:	4618      	mov	r0, r3
 8006b34:	f000 f95f 	bl	8006df6 <TIM_ITRx_SetConfig>
      break;
 8006b38:	e01c      	b.n	8006b74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b46:	461a      	mov	r2, r3
 8006b48:	f000 f8f6 	bl	8006d38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2140      	movs	r1, #64	@ 0x40
 8006b52:	4618      	mov	r0, r3
 8006b54:	f000 f94f 	bl	8006df6 <TIM_ITRx_SetConfig>
      break;
 8006b58:	e00c      	b.n	8006b74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4619      	mov	r1, r3
 8006b64:	4610      	mov	r0, r2
 8006b66:	f000 f946 	bl	8006df6 <TIM_ITRx_SetConfig>
      break;
 8006b6a:	e003      	b.n	8006b74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b70:	e000      	b.n	8006b74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006b72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3710      	adds	r7, #16
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b8e:	b480      	push	{r7}
 8006b90:	b083      	sub	sp, #12
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b96:	bf00      	nop
 8006b98:	370c      	adds	r7, #12
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr

08006ba2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ba2:	b480      	push	{r7}
 8006ba4:	b083      	sub	sp, #12
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006baa:	bf00      	nop
 8006bac:	370c      	adds	r7, #12
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr

08006bb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	b083      	sub	sp, #12
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006bbe:	bf00      	nop
 8006bc0:	370c      	adds	r7, #12
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr

08006bca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006bca:	b480      	push	{r7}
 8006bcc:	b083      	sub	sp, #12
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006bd2:	bf00      	nop
 8006bd4:	370c      	adds	r7, #12
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr
	...

08006be0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4a46      	ldr	r2, [pc, #280]	@ (8006d0c <TIM_Base_SetConfig+0x12c>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d013      	beq.n	8006c20 <TIM_Base_SetConfig+0x40>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bfe:	d00f      	beq.n	8006c20 <TIM_Base_SetConfig+0x40>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a43      	ldr	r2, [pc, #268]	@ (8006d10 <TIM_Base_SetConfig+0x130>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d00b      	beq.n	8006c20 <TIM_Base_SetConfig+0x40>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a42      	ldr	r2, [pc, #264]	@ (8006d14 <TIM_Base_SetConfig+0x134>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d007      	beq.n	8006c20 <TIM_Base_SetConfig+0x40>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a41      	ldr	r2, [pc, #260]	@ (8006d18 <TIM_Base_SetConfig+0x138>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d003      	beq.n	8006c20 <TIM_Base_SetConfig+0x40>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a40      	ldr	r2, [pc, #256]	@ (8006d1c <TIM_Base_SetConfig+0x13c>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d108      	bne.n	8006c32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4a35      	ldr	r2, [pc, #212]	@ (8006d0c <TIM_Base_SetConfig+0x12c>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d02b      	beq.n	8006c92 <TIM_Base_SetConfig+0xb2>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c40:	d027      	beq.n	8006c92 <TIM_Base_SetConfig+0xb2>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a32      	ldr	r2, [pc, #200]	@ (8006d10 <TIM_Base_SetConfig+0x130>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d023      	beq.n	8006c92 <TIM_Base_SetConfig+0xb2>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a31      	ldr	r2, [pc, #196]	@ (8006d14 <TIM_Base_SetConfig+0x134>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d01f      	beq.n	8006c92 <TIM_Base_SetConfig+0xb2>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a30      	ldr	r2, [pc, #192]	@ (8006d18 <TIM_Base_SetConfig+0x138>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d01b      	beq.n	8006c92 <TIM_Base_SetConfig+0xb2>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a2f      	ldr	r2, [pc, #188]	@ (8006d1c <TIM_Base_SetConfig+0x13c>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d017      	beq.n	8006c92 <TIM_Base_SetConfig+0xb2>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a2e      	ldr	r2, [pc, #184]	@ (8006d20 <TIM_Base_SetConfig+0x140>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d013      	beq.n	8006c92 <TIM_Base_SetConfig+0xb2>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a2d      	ldr	r2, [pc, #180]	@ (8006d24 <TIM_Base_SetConfig+0x144>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d00f      	beq.n	8006c92 <TIM_Base_SetConfig+0xb2>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a2c      	ldr	r2, [pc, #176]	@ (8006d28 <TIM_Base_SetConfig+0x148>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d00b      	beq.n	8006c92 <TIM_Base_SetConfig+0xb2>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a2b      	ldr	r2, [pc, #172]	@ (8006d2c <TIM_Base_SetConfig+0x14c>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d007      	beq.n	8006c92 <TIM_Base_SetConfig+0xb2>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a2a      	ldr	r2, [pc, #168]	@ (8006d30 <TIM_Base_SetConfig+0x150>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d003      	beq.n	8006c92 <TIM_Base_SetConfig+0xb2>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a29      	ldr	r2, [pc, #164]	@ (8006d34 <TIM_Base_SetConfig+0x154>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d108      	bne.n	8006ca4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	695b      	ldr	r3, [r3, #20]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	689a      	ldr	r2, [r3, #8]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a10      	ldr	r2, [pc, #64]	@ (8006d0c <TIM_Base_SetConfig+0x12c>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d003      	beq.n	8006cd8 <TIM_Base_SetConfig+0xf8>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a12      	ldr	r2, [pc, #72]	@ (8006d1c <TIM_Base_SetConfig+0x13c>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d103      	bne.n	8006ce0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	691a      	ldr	r2, [r3, #16]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	691b      	ldr	r3, [r3, #16]
 8006cea:	f003 0301 	and.w	r3, r3, #1
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d105      	bne.n	8006cfe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	f023 0201 	bic.w	r2, r3, #1
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	611a      	str	r2, [r3, #16]
  }
}
 8006cfe:	bf00      	nop
 8006d00:	3714      	adds	r7, #20
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	40010000 	.word	0x40010000
 8006d10:	40000400 	.word	0x40000400
 8006d14:	40000800 	.word	0x40000800
 8006d18:	40000c00 	.word	0x40000c00
 8006d1c:	40010400 	.word	0x40010400
 8006d20:	40014000 	.word	0x40014000
 8006d24:	40014400 	.word	0x40014400
 8006d28:	40014800 	.word	0x40014800
 8006d2c:	40001800 	.word	0x40001800
 8006d30:	40001c00 	.word	0x40001c00
 8006d34:	40002000 	.word	0x40002000

08006d38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b087      	sub	sp, #28
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6a1b      	ldr	r3, [r3, #32]
 8006d48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6a1b      	ldr	r3, [r3, #32]
 8006d4e:	f023 0201 	bic.w	r2, r3, #1
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	011b      	lsls	r3, r3, #4
 8006d68:	693a      	ldr	r2, [r7, #16]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	f023 030a 	bic.w	r3, r3, #10
 8006d74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d76:	697a      	ldr	r2, [r7, #20]
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	693a      	ldr	r2, [r7, #16]
 8006d82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	621a      	str	r2, [r3, #32]
}
 8006d8a:	bf00      	nop
 8006d8c:	371c      	adds	r7, #28
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr

08006d96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d96:	b480      	push	{r7}
 8006d98:	b087      	sub	sp, #28
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	60f8      	str	r0, [r7, #12]
 8006d9e:	60b9      	str	r1, [r7, #8]
 8006da0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6a1b      	ldr	r3, [r3, #32]
 8006da6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6a1b      	ldr	r3, [r3, #32]
 8006dac:	f023 0210 	bic.w	r2, r3, #16
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	699b      	ldr	r3, [r3, #24]
 8006db8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006dc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	031b      	lsls	r3, r3, #12
 8006dc6:	693a      	ldr	r2, [r7, #16]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006dd2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	011b      	lsls	r3, r3, #4
 8006dd8:	697a      	ldr	r2, [r7, #20]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	693a      	ldr	r2, [r7, #16]
 8006de2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	697a      	ldr	r2, [r7, #20]
 8006de8:	621a      	str	r2, [r3, #32]
}
 8006dea:	bf00      	nop
 8006dec:	371c      	adds	r7, #28
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr

08006df6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006df6:	b480      	push	{r7}
 8006df8:	b085      	sub	sp, #20
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
 8006dfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e0e:	683a      	ldr	r2, [r7, #0]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	f043 0307 	orr.w	r3, r3, #7
 8006e18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	609a      	str	r2, [r3, #8]
}
 8006e20:	bf00      	nop
 8006e22:	3714      	adds	r7, #20
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b087      	sub	sp, #28
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	607a      	str	r2, [r7, #4]
 8006e38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006e46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	021a      	lsls	r2, r3, #8
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	431a      	orrs	r2, r3
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	697a      	ldr	r2, [r7, #20]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	697a      	ldr	r2, [r7, #20]
 8006e5e:	609a      	str	r2, [r3, #8]
}
 8006e60:	bf00      	nop
 8006e62:	371c      	adds	r7, #28
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d101      	bne.n	8006e84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e80:	2302      	movs	r3, #2
 8006e82:	e05a      	b.n	8006f3a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2202      	movs	r2, #2
 8006e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eaa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a21      	ldr	r2, [pc, #132]	@ (8006f48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d022      	beq.n	8006f0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ed0:	d01d      	beq.n	8006f0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a1d      	ldr	r2, [pc, #116]	@ (8006f4c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d018      	beq.n	8006f0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a1b      	ldr	r2, [pc, #108]	@ (8006f50 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d013      	beq.n	8006f0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a1a      	ldr	r2, [pc, #104]	@ (8006f54 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d00e      	beq.n	8006f0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a18      	ldr	r2, [pc, #96]	@ (8006f58 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d009      	beq.n	8006f0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a17      	ldr	r2, [pc, #92]	@ (8006f5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d004      	beq.n	8006f0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a15      	ldr	r2, [pc, #84]	@ (8006f60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d10c      	bne.n	8006f28 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	68ba      	ldr	r2, [r7, #8]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	68ba      	ldr	r2, [r7, #8]
 8006f26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3714      	adds	r7, #20
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr
 8006f46:	bf00      	nop
 8006f48:	40010000 	.word	0x40010000
 8006f4c:	40000400 	.word	0x40000400
 8006f50:	40000800 	.word	0x40000800
 8006f54:	40000c00 	.word	0x40000c00
 8006f58:	40010400 	.word	0x40010400
 8006f5c:	40014000 	.word	0x40014000
 8006f60:	40001800 	.word	0x40001800

08006f64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f6c:	bf00      	nop
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f80:	bf00      	nop
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f8c:	b084      	sub	sp, #16
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b084      	sub	sp, #16
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
 8006f96:	f107 001c 	add.w	r0, r7, #28
 8006f9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f9e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d123      	bne.n	8006fee <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006faa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006fba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006fce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d105      	bne.n	8006fe2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 f9dc 	bl	80073a0 <USB_CoreReset>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	73fb      	strb	r3, [r7, #15]
 8006fec:	e01b      	b.n	8007026 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 f9d0 	bl	80073a0 <USB_CoreReset>
 8007000:	4603      	mov	r3, r0
 8007002:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007004:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007008:	2b00      	cmp	r3, #0
 800700a:	d106      	bne.n	800701a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007010:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	639a      	str	r2, [r3, #56]	@ 0x38
 8007018:	e005      	b.n	8007026 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800701e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007026:	7fbb      	ldrb	r3, [r7, #30]
 8007028:	2b01      	cmp	r3, #1
 800702a:	d10b      	bne.n	8007044 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	f043 0206 	orr.w	r2, r3, #6
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	f043 0220 	orr.w	r2, r3, #32
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007044:	7bfb      	ldrb	r3, [r7, #15]
}
 8007046:	4618      	mov	r0, r3
 8007048:	3710      	adds	r7, #16
 800704a:	46bd      	mov	sp, r7
 800704c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007050:	b004      	add	sp, #16
 8007052:	4770      	bx	lr

08007054 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	f043 0201 	orr.w	r2, r3, #1
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	370c      	adds	r7, #12
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr

08007076 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007076:	b480      	push	{r7}
 8007078:	b083      	sub	sp, #12
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	f023 0201 	bic.w	r2, r3, #1
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	460b      	mov	r3, r1
 80070a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80070a4:	2300      	movs	r3, #0
 80070a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80070b4:	78fb      	ldrb	r3, [r7, #3]
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d115      	bne.n	80070e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	68db      	ldr	r3, [r3, #12]
 80070be:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80070c6:	200a      	movs	r0, #10
 80070c8:	f7fa fec2 	bl	8001e50 <HAL_Delay>
      ms += 10U;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	330a      	adds	r3, #10
 80070d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 f956 	bl	8007384 <USB_GetMode>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d01e      	beq.n	800711c <USB_SetCurrentMode+0x84>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2bc7      	cmp	r3, #199	@ 0xc7
 80070e2:	d9f0      	bls.n	80070c6 <USB_SetCurrentMode+0x2e>
 80070e4:	e01a      	b.n	800711c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80070e6:	78fb      	ldrb	r3, [r7, #3]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d115      	bne.n	8007118 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80070f8:	200a      	movs	r0, #10
 80070fa:	f7fa fea9 	bl	8001e50 <HAL_Delay>
      ms += 10U;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	330a      	adds	r3, #10
 8007102:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 f93d 	bl	8007384 <USB_GetMode>
 800710a:	4603      	mov	r3, r0
 800710c:	2b00      	cmp	r3, #0
 800710e:	d005      	beq.n	800711c <USB_SetCurrentMode+0x84>
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2bc7      	cmp	r3, #199	@ 0xc7
 8007114:	d9f0      	bls.n	80070f8 <USB_SetCurrentMode+0x60>
 8007116:	e001      	b.n	800711c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	e005      	b.n	8007128 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2bc8      	cmp	r3, #200	@ 0xc8
 8007120:	d101      	bne.n	8007126 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	e000      	b.n	8007128 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007126:	2300      	movs	r3, #0
}
 8007128:	4618      	mov	r0, r3
 800712a:	3710      	adds	r7, #16
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007130:	b480      	push	{r7}
 8007132:	b085      	sub	sp, #20
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800713a:	2300      	movs	r3, #0
 800713c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	3301      	adds	r3, #1
 8007142:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800714a:	d901      	bls.n	8007150 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800714c:	2303      	movs	r3, #3
 800714e:	e01b      	b.n	8007188 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	2b00      	cmp	r3, #0
 8007156:	daf2      	bge.n	800713e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007158:	2300      	movs	r3, #0
 800715a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	019b      	lsls	r3, r3, #6
 8007160:	f043 0220 	orr.w	r2, r3, #32
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	3301      	adds	r3, #1
 800716c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007174:	d901      	bls.n	800717a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007176:	2303      	movs	r3, #3
 8007178:	e006      	b.n	8007188 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	f003 0320 	and.w	r3, r3, #32
 8007182:	2b20      	cmp	r3, #32
 8007184:	d0f0      	beq.n	8007168 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007186:	2300      	movs	r3, #0
}
 8007188:	4618      	mov	r0, r3
 800718a:	3714      	adds	r7, #20
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007194:	b480      	push	{r7}
 8007196:	b085      	sub	sp, #20
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800719c:	2300      	movs	r3, #0
 800719e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	3301      	adds	r3, #1
 80071a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071ac:	d901      	bls.n	80071b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80071ae:	2303      	movs	r3, #3
 80071b0:	e018      	b.n	80071e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	daf2      	bge.n	80071a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80071ba:	2300      	movs	r3, #0
 80071bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2210      	movs	r2, #16
 80071c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	3301      	adds	r3, #1
 80071c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071d0:	d901      	bls.n	80071d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80071d2:	2303      	movs	r3, #3
 80071d4:	e006      	b.n	80071e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	f003 0310 	and.w	r3, r3, #16
 80071de:	2b10      	cmp	r3, #16
 80071e0:	d0f0      	beq.n	80071c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3714      	adds	r7, #20
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr

080071f0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b089      	sub	sp, #36	@ 0x24
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	4611      	mov	r1, r2
 80071fc:	461a      	mov	r2, r3
 80071fe:	460b      	mov	r3, r1
 8007200:	71fb      	strb	r3, [r7, #7]
 8007202:	4613      	mov	r3, r2
 8007204:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800720e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007212:	2b00      	cmp	r3, #0
 8007214:	d123      	bne.n	800725e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007216:	88bb      	ldrh	r3, [r7, #4]
 8007218:	3303      	adds	r3, #3
 800721a:	089b      	lsrs	r3, r3, #2
 800721c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800721e:	2300      	movs	r3, #0
 8007220:	61bb      	str	r3, [r7, #24]
 8007222:	e018      	b.n	8007256 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007224:	79fb      	ldrb	r3, [r7, #7]
 8007226:	031a      	lsls	r2, r3, #12
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	4413      	add	r3, r2
 800722c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007230:	461a      	mov	r2, r3
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	3301      	adds	r3, #1
 800723c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800723e:	69fb      	ldr	r3, [r7, #28]
 8007240:	3301      	adds	r3, #1
 8007242:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	3301      	adds	r3, #1
 8007248:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	3301      	adds	r3, #1
 800724e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	3301      	adds	r3, #1
 8007254:	61bb      	str	r3, [r7, #24]
 8007256:	69ba      	ldr	r2, [r7, #24]
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	429a      	cmp	r2, r3
 800725c:	d3e2      	bcc.n	8007224 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800725e:	2300      	movs	r3, #0
}
 8007260:	4618      	mov	r0, r3
 8007262:	3724      	adds	r7, #36	@ 0x24
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800726c:	b480      	push	{r7}
 800726e:	b08b      	sub	sp, #44	@ 0x2c
 8007270:	af00      	add	r7, sp, #0
 8007272:	60f8      	str	r0, [r7, #12]
 8007274:	60b9      	str	r1, [r7, #8]
 8007276:	4613      	mov	r3, r2
 8007278:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007282:	88fb      	ldrh	r3, [r7, #6]
 8007284:	089b      	lsrs	r3, r3, #2
 8007286:	b29b      	uxth	r3, r3
 8007288:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800728a:	88fb      	ldrh	r3, [r7, #6]
 800728c:	f003 0303 	and.w	r3, r3, #3
 8007290:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007292:	2300      	movs	r3, #0
 8007294:	623b      	str	r3, [r7, #32]
 8007296:	e014      	b.n	80072c2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a2:	601a      	str	r2, [r3, #0]
    pDest++;
 80072a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a6:	3301      	adds	r3, #1
 80072a8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80072aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ac:	3301      	adds	r3, #1
 80072ae:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80072b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b2:	3301      	adds	r3, #1
 80072b4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80072b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b8:	3301      	adds	r3, #1
 80072ba:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80072bc:	6a3b      	ldr	r3, [r7, #32]
 80072be:	3301      	adds	r3, #1
 80072c0:	623b      	str	r3, [r7, #32]
 80072c2:	6a3a      	ldr	r2, [r7, #32]
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d3e6      	bcc.n	8007298 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80072ca:	8bfb      	ldrh	r3, [r7, #30]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d01e      	beq.n	800730e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80072d0:	2300      	movs	r3, #0
 80072d2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072da:	461a      	mov	r2, r3
 80072dc:	f107 0310 	add.w	r3, r7, #16
 80072e0:	6812      	ldr	r2, [r2, #0]
 80072e2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80072e4:	693a      	ldr	r2, [r7, #16]
 80072e6:	6a3b      	ldr	r3, [r7, #32]
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	00db      	lsls	r3, r3, #3
 80072ec:	fa22 f303 	lsr.w	r3, r2, r3
 80072f0:	b2da      	uxtb	r2, r3
 80072f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f4:	701a      	strb	r2, [r3, #0]
      i++;
 80072f6:	6a3b      	ldr	r3, [r7, #32]
 80072f8:	3301      	adds	r3, #1
 80072fa:	623b      	str	r3, [r7, #32]
      pDest++;
 80072fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072fe:	3301      	adds	r3, #1
 8007300:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007302:	8bfb      	ldrh	r3, [r7, #30]
 8007304:	3b01      	subs	r3, #1
 8007306:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007308:	8bfb      	ldrh	r3, [r7, #30]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d1ea      	bne.n	80072e4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800730e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007310:	4618      	mov	r0, r3
 8007312:	372c      	adds	r7, #44	@ 0x2c
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800731c:	b480      	push	{r7}
 800731e:	b085      	sub	sp, #20
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	695b      	ldr	r3, [r3, #20]
 8007328:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	699b      	ldr	r3, [r3, #24]
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	4013      	ands	r3, r2
 8007332:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007334:	68fb      	ldr	r3, [r7, #12]
}
 8007336:	4618      	mov	r0, r3
 8007338:	3714      	adds	r7, #20
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr

08007342 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007342:	b480      	push	{r7}
 8007344:	b085      	sub	sp, #20
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
 800734a:	460b      	mov	r3, r1
 800734c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007352:	78fb      	ldrb	r3, [r7, #3]
 8007354:	015a      	lsls	r2, r3, #5
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	4413      	add	r3, r2
 800735a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007362:	78fb      	ldrb	r3, [r7, #3]
 8007364:	015a      	lsls	r2, r3, #5
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	4413      	add	r3, r2
 800736a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	68ba      	ldr	r2, [r7, #8]
 8007372:	4013      	ands	r3, r2
 8007374:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007376:	68bb      	ldr	r3, [r7, #8]
}
 8007378:	4618      	mov	r0, r3
 800737a:	3714      	adds	r7, #20
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	695b      	ldr	r3, [r3, #20]
 8007390:	f003 0301 	and.w	r3, r3, #1
}
 8007394:	4618      	mov	r0, r3
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80073a8:	2300      	movs	r3, #0
 80073aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	3301      	adds	r3, #1
 80073b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80073b8:	d901      	bls.n	80073be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80073ba:	2303      	movs	r3, #3
 80073bc:	e01b      	b.n	80073f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	daf2      	bge.n	80073ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80073c6:	2300      	movs	r3, #0
 80073c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	f043 0201 	orr.w	r2, r3, #1
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	3301      	adds	r3, #1
 80073da:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80073e2:	d901      	bls.n	80073e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80073e4:	2303      	movs	r3, #3
 80073e6:	e006      	b.n	80073f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	691b      	ldr	r3, [r3, #16]
 80073ec:	f003 0301 	and.w	r3, r3, #1
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d0f0      	beq.n	80073d6 <USB_CoreReset+0x36>

  return HAL_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3714      	adds	r7, #20
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr
	...

08007404 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007404:	b084      	sub	sp, #16
 8007406:	b580      	push	{r7, lr}
 8007408:	b086      	sub	sp, #24
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
 800740e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007412:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007416:	2300      	movs	r3, #0
 8007418:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007424:	461a      	mov	r2, r3
 8007426:	2300      	movs	r3, #0
 8007428:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800742e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800743a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007446:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007456:	2b00      	cmp	r3, #0
 8007458:	d119      	bne.n	800748e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800745a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800745e:	2b01      	cmp	r3, #1
 8007460:	d10a      	bne.n	8007478 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007470:	f043 0304 	orr.w	r3, r3, #4
 8007474:	6013      	str	r3, [r2, #0]
 8007476:	e014      	b.n	80074a2 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007486:	f023 0304 	bic.w	r3, r3, #4
 800748a:	6013      	str	r3, [r2, #0]
 800748c:	e009      	b.n	80074a2 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	68fa      	ldr	r2, [r7, #12]
 8007498:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800749c:	f023 0304 	bic.w	r3, r3, #4
 80074a0:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80074a2:	2110      	movs	r1, #16
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f7ff fe43 	bl	8007130 <USB_FlushTxFifo>
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d001      	beq.n	80074b4 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f7ff fe6d 	bl	8007194 <USB_FlushRxFifo>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d001      	beq.n	80074c4 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80074c4:	2300      	movs	r3, #0
 80074c6:	613b      	str	r3, [r7, #16]
 80074c8:	e015      	b.n	80074f6 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	015a      	lsls	r2, r3, #5
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	4413      	add	r3, r2
 80074d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074d6:	461a      	mov	r2, r3
 80074d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80074dc:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	015a      	lsls	r2, r3, #5
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	4413      	add	r3, r2
 80074e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074ea:	461a      	mov	r2, r3
 80074ec:	2300      	movs	r3, #0
 80074ee:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	3301      	adds	r3, #1
 80074f4:	613b      	str	r3, [r7, #16]
 80074f6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80074fa:	461a      	mov	r2, r3
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	4293      	cmp	r3, r2
 8007500:	d3e3      	bcc.n	80074ca <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800750e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a18      	ldr	r2, [pc, #96]	@ (8007574 <USB_HostInit+0x170>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d10b      	bne.n	8007530 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800751e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4a15      	ldr	r2, [pc, #84]	@ (8007578 <USB_HostInit+0x174>)
 8007524:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4a14      	ldr	r2, [pc, #80]	@ (800757c <USB_HostInit+0x178>)
 800752a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800752e:	e009      	b.n	8007544 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2280      	movs	r2, #128	@ 0x80
 8007534:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4a11      	ldr	r2, [pc, #68]	@ (8007580 <USB_HostInit+0x17c>)
 800753a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	4a11      	ldr	r2, [pc, #68]	@ (8007584 <USB_HostInit+0x180>)
 8007540:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007544:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007548:	2b00      	cmp	r3, #0
 800754a:	d105      	bne.n	8007558 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	699b      	ldr	r3, [r3, #24]
 8007550:	f043 0210 	orr.w	r2, r3, #16
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	699a      	ldr	r2, [r3, #24]
 800755c:	4b0a      	ldr	r3, [pc, #40]	@ (8007588 <USB_HostInit+0x184>)
 800755e:	4313      	orrs	r3, r2
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007564:	7dfb      	ldrb	r3, [r7, #23]
}
 8007566:	4618      	mov	r0, r3
 8007568:	3718      	adds	r7, #24
 800756a:	46bd      	mov	sp, r7
 800756c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007570:	b004      	add	sp, #16
 8007572:	4770      	bx	lr
 8007574:	40040000 	.word	0x40040000
 8007578:	01000200 	.word	0x01000200
 800757c:	00e00300 	.word	0x00e00300
 8007580:	00600080 	.word	0x00600080
 8007584:	004000e0 	.word	0x004000e0
 8007588:	a3200008 	.word	0xa3200008

0800758c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800758c:	b480      	push	{r7}
 800758e:	b085      	sub	sp, #20
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	460b      	mov	r3, r1
 8007596:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80075aa:	f023 0303 	bic.w	r3, r3, #3
 80075ae:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	78fb      	ldrb	r3, [r7, #3]
 80075ba:	f003 0303 	and.w	r3, r3, #3
 80075be:	68f9      	ldr	r1, [r7, #12]
 80075c0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80075c4:	4313      	orrs	r3, r2
 80075c6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80075c8:	78fb      	ldrb	r3, [r7, #3]
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d107      	bne.n	80075de <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80075d4:	461a      	mov	r2, r3
 80075d6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80075da:	6053      	str	r3, [r2, #4]
 80075dc:	e00c      	b.n	80075f8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80075de:	78fb      	ldrb	r3, [r7, #3]
 80075e0:	2b02      	cmp	r3, #2
 80075e2:	d107      	bne.n	80075f4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80075ea:	461a      	mov	r2, r3
 80075ec:	f241 7370 	movw	r3, #6000	@ 0x1770
 80075f0:	6053      	str	r3, [r2, #4]
 80075f2:	e001      	b.n	80075f8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	e000      	b.n	80075fa <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3714      	adds	r7, #20
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr

08007606 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8007606:	b580      	push	{r7, lr}
 8007608:	b084      	sub	sp, #16
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007612:	2300      	movs	r3, #0
 8007614:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007626:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007630:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007634:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007636:	2064      	movs	r0, #100	@ 0x64
 8007638:	f7fa fc0a 	bl	8001e50 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007644:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007648:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800764a:	200a      	movs	r0, #10
 800764c:	f7fa fc00 	bl	8001e50 <HAL_Delay>

  return HAL_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	3710      	adds	r7, #16
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}

0800765a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800765a:	b480      	push	{r7}
 800765c:	b085      	sub	sp, #20
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
 8007662:	460b      	mov	r3, r1
 8007664:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800766a:	2300      	movs	r3, #0
 800766c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800767e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007686:	2b00      	cmp	r3, #0
 8007688:	d109      	bne.n	800769e <USB_DriveVbus+0x44>
 800768a:	78fb      	ldrb	r3, [r7, #3]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d106      	bne.n	800769e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007698:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800769c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80076a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076a8:	d109      	bne.n	80076be <USB_DriveVbus+0x64>
 80076aa:	78fb      	ldrb	r3, [r7, #3]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d106      	bne.n	80076be <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	68fa      	ldr	r2, [r7, #12]
 80076b4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80076b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80076bc:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80076be:	2300      	movs	r3, #0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3714      	adds	r7, #20
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b085      	sub	sp, #20
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80076d8:	2300      	movs	r3, #0
 80076da:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	0c5b      	lsrs	r3, r3, #17
 80076ea:	f003 0303 	and.w	r3, r3, #3
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3714      	adds	r7, #20
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr

080076fa <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80076fa:	b480      	push	{r7}
 80076fc:	b085      	sub	sp, #20
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	b29b      	uxth	r3, r3
}
 8007710:	4618      	mov	r0, r3
 8007712:	3714      	adds	r7, #20
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b088      	sub	sp, #32
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	4608      	mov	r0, r1
 8007726:	4611      	mov	r1, r2
 8007728:	461a      	mov	r2, r3
 800772a:	4603      	mov	r3, r0
 800772c:	70fb      	strb	r3, [r7, #3]
 800772e:	460b      	mov	r3, r1
 8007730:	70bb      	strb	r3, [r7, #2]
 8007732:	4613      	mov	r3, r2
 8007734:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007736:	2300      	movs	r3, #0
 8007738:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800773e:	78fb      	ldrb	r3, [r7, #3]
 8007740:	015a      	lsls	r2, r3, #5
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	4413      	add	r3, r2
 8007746:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800774a:	461a      	mov	r2, r3
 800774c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007750:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007752:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007756:	2b03      	cmp	r3, #3
 8007758:	d87c      	bhi.n	8007854 <USB_HC_Init+0x138>
 800775a:	a201      	add	r2, pc, #4	@ (adr r2, 8007760 <USB_HC_Init+0x44>)
 800775c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007760:	08007771 	.word	0x08007771
 8007764:	08007817 	.word	0x08007817
 8007768:	08007771 	.word	0x08007771
 800776c:	080077d9 	.word	0x080077d9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007770:	78fb      	ldrb	r3, [r7, #3]
 8007772:	015a      	lsls	r2, r3, #5
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	4413      	add	r3, r2
 8007778:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800777c:	461a      	mov	r2, r3
 800777e:	f240 439d 	movw	r3, #1181	@ 0x49d
 8007782:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007784:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007788:	2b00      	cmp	r3, #0
 800778a:	da10      	bge.n	80077ae <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800778c:	78fb      	ldrb	r3, [r7, #3]
 800778e:	015a      	lsls	r2, r3, #5
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	4413      	add	r3, r2
 8007794:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	78fa      	ldrb	r2, [r7, #3]
 800779c:	0151      	lsls	r1, r2, #5
 800779e:	693a      	ldr	r2, [r7, #16]
 80077a0:	440a      	add	r2, r1
 80077a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077aa:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80077ac:	e055      	b.n	800785a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4a6f      	ldr	r2, [pc, #444]	@ (8007970 <USB_HC_Init+0x254>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d151      	bne.n	800785a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80077b6:	78fb      	ldrb	r3, [r7, #3]
 80077b8:	015a      	lsls	r2, r3, #5
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	4413      	add	r3, r2
 80077be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	78fa      	ldrb	r2, [r7, #3]
 80077c6:	0151      	lsls	r1, r2, #5
 80077c8:	693a      	ldr	r2, [r7, #16]
 80077ca:	440a      	add	r2, r1
 80077cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077d0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80077d4:	60d3      	str	r3, [r2, #12]
      break;
 80077d6:	e040      	b.n	800785a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80077d8:	78fb      	ldrb	r3, [r7, #3]
 80077da:	015a      	lsls	r2, r3, #5
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	4413      	add	r3, r2
 80077e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077e4:	461a      	mov	r2, r3
 80077e6:	f240 639d 	movw	r3, #1693	@ 0x69d
 80077ea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80077ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	da34      	bge.n	800785e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80077f4:	78fb      	ldrb	r3, [r7, #3]
 80077f6:	015a      	lsls	r2, r3, #5
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	4413      	add	r3, r2
 80077fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	78fa      	ldrb	r2, [r7, #3]
 8007804:	0151      	lsls	r1, r2, #5
 8007806:	693a      	ldr	r2, [r7, #16]
 8007808:	440a      	add	r2, r1
 800780a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800780e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007812:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007814:	e023      	b.n	800785e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007816:	78fb      	ldrb	r3, [r7, #3]
 8007818:	015a      	lsls	r2, r3, #5
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	4413      	add	r3, r2
 800781e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007822:	461a      	mov	r2, r3
 8007824:	f240 2325 	movw	r3, #549	@ 0x225
 8007828:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800782a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800782e:	2b00      	cmp	r3, #0
 8007830:	da17      	bge.n	8007862 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007832:	78fb      	ldrb	r3, [r7, #3]
 8007834:	015a      	lsls	r2, r3, #5
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	4413      	add	r3, r2
 800783a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	78fa      	ldrb	r2, [r7, #3]
 8007842:	0151      	lsls	r1, r2, #5
 8007844:	693a      	ldr	r2, [r7, #16]
 8007846:	440a      	add	r2, r1
 8007848:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800784c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8007850:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007852:	e006      	b.n	8007862 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	77fb      	strb	r3, [r7, #31]
      break;
 8007858:	e004      	b.n	8007864 <USB_HC_Init+0x148>
      break;
 800785a:	bf00      	nop
 800785c:	e002      	b.n	8007864 <USB_HC_Init+0x148>
      break;
 800785e:	bf00      	nop
 8007860:	e000      	b.n	8007864 <USB_HC_Init+0x148>
      break;
 8007862:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007864:	78fb      	ldrb	r3, [r7, #3]
 8007866:	015a      	lsls	r2, r3, #5
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	4413      	add	r3, r2
 800786c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007870:	461a      	mov	r2, r3
 8007872:	2300      	movs	r3, #0
 8007874:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007876:	78fb      	ldrb	r3, [r7, #3]
 8007878:	015a      	lsls	r2, r3, #5
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	4413      	add	r3, r2
 800787e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	78fa      	ldrb	r2, [r7, #3]
 8007886:	0151      	lsls	r1, r2, #5
 8007888:	693a      	ldr	r2, [r7, #16]
 800788a:	440a      	add	r2, r1
 800788c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007890:	f043 0302 	orr.w	r3, r3, #2
 8007894:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800789c:	699a      	ldr	r2, [r3, #24]
 800789e:	78fb      	ldrb	r3, [r7, #3]
 80078a0:	f003 030f 	and.w	r3, r3, #15
 80078a4:	2101      	movs	r1, #1
 80078a6:	fa01 f303 	lsl.w	r3, r1, r3
 80078aa:	6939      	ldr	r1, [r7, #16]
 80078ac:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80078b0:	4313      	orrs	r3, r2
 80078b2:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	699b      	ldr	r3, [r3, #24]
 80078b8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80078c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	da03      	bge.n	80078d0 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80078c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078cc:	61bb      	str	r3, [r7, #24]
 80078ce:	e001      	b.n	80078d4 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80078d0:	2300      	movs	r3, #0
 80078d2:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f7ff fef9 	bl	80076cc <USB_GetHostSpeed>
 80078da:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80078dc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80078e0:	2b02      	cmp	r3, #2
 80078e2:	d106      	bne.n	80078f2 <USB_HC_Init+0x1d6>
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2b02      	cmp	r3, #2
 80078e8:	d003      	beq.n	80078f2 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80078ea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80078ee:	617b      	str	r3, [r7, #20]
 80078f0:	e001      	b.n	80078f6 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80078f2:	2300      	movs	r3, #0
 80078f4:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80078f6:	787b      	ldrb	r3, [r7, #1]
 80078f8:	059b      	lsls	r3, r3, #22
 80078fa:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80078fe:	78bb      	ldrb	r3, [r7, #2]
 8007900:	02db      	lsls	r3, r3, #11
 8007902:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007906:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007908:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800790c:	049b      	lsls	r3, r3, #18
 800790e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007912:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8007914:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007916:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800791a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	431a      	orrs	r2, r3
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007924:	78fa      	ldrb	r2, [r7, #3]
 8007926:	0151      	lsls	r1, r2, #5
 8007928:	693a      	ldr	r2, [r7, #16]
 800792a:	440a      	add	r2, r1
 800792c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007930:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007934:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007936:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800793a:	2b03      	cmp	r3, #3
 800793c:	d003      	beq.n	8007946 <USB_HC_Init+0x22a>
 800793e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007942:	2b01      	cmp	r3, #1
 8007944:	d10f      	bne.n	8007966 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007946:	78fb      	ldrb	r3, [r7, #3]
 8007948:	015a      	lsls	r2, r3, #5
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	4413      	add	r3, r2
 800794e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	78fa      	ldrb	r2, [r7, #3]
 8007956:	0151      	lsls	r1, r2, #5
 8007958:	693a      	ldr	r2, [r7, #16]
 800795a:	440a      	add	r2, r1
 800795c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007960:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007964:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007966:	7ffb      	ldrb	r3, [r7, #31]
}
 8007968:	4618      	mov	r0, r3
 800796a:	3720      	adds	r7, #32
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}
 8007970:	40040000 	.word	0x40040000

08007974 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b08c      	sub	sp, #48	@ 0x30
 8007978:	af02      	add	r7, sp, #8
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	4613      	mov	r3, r2
 8007980:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	785b      	ldrb	r3, [r3, #1]
 800798a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800798c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007990:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	4a5d      	ldr	r2, [pc, #372]	@ (8007b0c <USB_HC_StartXfer+0x198>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d12f      	bne.n	80079fa <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800799a:	79fb      	ldrb	r3, [r7, #7]
 800799c:	2b01      	cmp	r3, #1
 800799e:	d11c      	bne.n	80079da <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	7c9b      	ldrb	r3, [r3, #18]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d003      	beq.n	80079b0 <USB_HC_StartXfer+0x3c>
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	7c9b      	ldrb	r3, [r3, #18]
 80079ac:	2b02      	cmp	r3, #2
 80079ae:	d124      	bne.n	80079fa <USB_HC_StartXfer+0x86>
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	799b      	ldrb	r3, [r3, #6]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d120      	bne.n	80079fa <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	015a      	lsls	r2, r3, #5
 80079bc:	6a3b      	ldr	r3, [r7, #32]
 80079be:	4413      	add	r3, r2
 80079c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	69fa      	ldr	r2, [r7, #28]
 80079c8:	0151      	lsls	r1, r2, #5
 80079ca:	6a3a      	ldr	r2, [r7, #32]
 80079cc:	440a      	add	r2, r1
 80079ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80079d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079d6:	60d3      	str	r3, [r2, #12]
 80079d8:	e00f      	b.n	80079fa <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	791b      	ldrb	r3, [r3, #4]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d10b      	bne.n	80079fa <USB_HC_StartXfer+0x86>
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	795b      	ldrb	r3, [r3, #5]
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d107      	bne.n	80079fa <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	785b      	ldrb	r3, [r3, #1]
 80079ee:	4619      	mov	r1, r3
 80079f0:	68f8      	ldr	r0, [r7, #12]
 80079f2:	f000 fb6b 	bl	80080cc <USB_DoPing>
        return HAL_OK;
 80079f6:	2300      	movs	r3, #0
 80079f8:	e232      	b.n	8007e60 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	799b      	ldrb	r3, [r3, #6]
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d158      	bne.n	8007ab4 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8007a02:	2301      	movs	r3, #1
 8007a04:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	78db      	ldrb	r3, [r3, #3]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d007      	beq.n	8007a1e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007a0e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007a10:	68ba      	ldr	r2, [r7, #8]
 8007a12:	8a92      	ldrh	r2, [r2, #20]
 8007a14:	fb03 f202 	mul.w	r2, r3, r2
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	61da      	str	r2, [r3, #28]
 8007a1c:	e07c      	b.n	8007b18 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	7c9b      	ldrb	r3, [r3, #18]
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d130      	bne.n	8007a88 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	6a1b      	ldr	r3, [r3, #32]
 8007a2a:	2bbc      	cmp	r3, #188	@ 0xbc
 8007a2c:	d918      	bls.n	8007a60 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	8a9b      	ldrh	r3, [r3, #20]
 8007a32:	461a      	mov	r2, r3
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	69da      	ldr	r2, [r3, #28]
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d003      	beq.n	8007a50 <USB_HC_StartXfer+0xdc>
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	2b02      	cmp	r3, #2
 8007a4e:	d103      	bne.n	8007a58 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	2202      	movs	r2, #2
 8007a54:	60da      	str	r2, [r3, #12]
 8007a56:	e05f      	b.n	8007b18 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	60da      	str	r2, [r3, #12]
 8007a5e:	e05b      	b.n	8007b18 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	6a1a      	ldr	r2, [r3, #32]
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d007      	beq.n	8007a80 <USB_HC_StartXfer+0x10c>
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	68db      	ldr	r3, [r3, #12]
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	d003      	beq.n	8007a80 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	2204      	movs	r2, #4
 8007a7c:	60da      	str	r2, [r3, #12]
 8007a7e:	e04b      	b.n	8007b18 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	2203      	movs	r2, #3
 8007a84:	60da      	str	r2, [r3, #12]
 8007a86:	e047      	b.n	8007b18 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007a88:	79fb      	ldrb	r3, [r7, #7]
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d10d      	bne.n	8007aaa <USB_HC_StartXfer+0x136>
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	6a1b      	ldr	r3, [r3, #32]
 8007a92:	68ba      	ldr	r2, [r7, #8]
 8007a94:	8a92      	ldrh	r2, [r2, #20]
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d907      	bls.n	8007aaa <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007a9a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007a9c:	68ba      	ldr	r2, [r7, #8]
 8007a9e:	8a92      	ldrh	r2, [r2, #20]
 8007aa0:	fb03 f202 	mul.w	r2, r3, r2
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	61da      	str	r2, [r3, #28]
 8007aa8:	e036      	b.n	8007b18 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	6a1a      	ldr	r2, [r3, #32]
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	61da      	str	r2, [r3, #28]
 8007ab2:	e031      	b.n	8007b18 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	6a1b      	ldr	r3, [r3, #32]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d018      	beq.n	8007aee <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	6a1b      	ldr	r3, [r3, #32]
 8007ac0:	68ba      	ldr	r2, [r7, #8]
 8007ac2:	8a92      	ldrh	r2, [r2, #20]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	68ba      	ldr	r2, [r7, #8]
 8007aca:	8a92      	ldrh	r2, [r2, #20]
 8007acc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ad0:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8007ad2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007ad4:	8b7b      	ldrh	r3, [r7, #26]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d90b      	bls.n	8007af2 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8007ada:	8b7b      	ldrh	r3, [r7, #26]
 8007adc:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007ade:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007ae0:	68ba      	ldr	r2, [r7, #8]
 8007ae2:	8a92      	ldrh	r2, [r2, #20]
 8007ae4:	fb03 f202 	mul.w	r2, r3, r2
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	61da      	str	r2, [r3, #28]
 8007aec:	e001      	b.n	8007af2 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8007aee:	2301      	movs	r3, #1
 8007af0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	78db      	ldrb	r3, [r3, #3]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00a      	beq.n	8007b10 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007afa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007afc:	68ba      	ldr	r2, [r7, #8]
 8007afe:	8a92      	ldrh	r2, [r2, #20]
 8007b00:	fb03 f202 	mul.w	r2, r3, r2
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	61da      	str	r2, [r3, #28]
 8007b08:	e006      	b.n	8007b18 <USB_HC_StartXfer+0x1a4>
 8007b0a:	bf00      	nop
 8007b0c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	6a1a      	ldr	r2, [r3, #32]
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	69db      	ldr	r3, [r3, #28]
 8007b1c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007b20:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007b22:	04d9      	lsls	r1, r3, #19
 8007b24:	4ba3      	ldr	r3, [pc, #652]	@ (8007db4 <USB_HC_StartXfer+0x440>)
 8007b26:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b28:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	7d9b      	ldrb	r3, [r3, #22]
 8007b2e:	075b      	lsls	r3, r3, #29
 8007b30:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b34:	69f9      	ldr	r1, [r7, #28]
 8007b36:	0148      	lsls	r0, r1, #5
 8007b38:	6a39      	ldr	r1, [r7, #32]
 8007b3a:	4401      	add	r1, r0
 8007b3c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007b40:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b42:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007b44:	79fb      	ldrb	r3, [r7, #7]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d009      	beq.n	8007b5e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	6999      	ldr	r1, [r3, #24]
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	015a      	lsls	r2, r3, #5
 8007b52:	6a3b      	ldr	r3, [r7, #32]
 8007b54:	4413      	add	r3, r2
 8007b56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b5a:	460a      	mov	r2, r1
 8007b5c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007b5e:	6a3b      	ldr	r3, [r7, #32]
 8007b60:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	f003 0301 	and.w	r3, r3, #1
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	bf0c      	ite	eq
 8007b6e:	2301      	moveq	r3, #1
 8007b70:	2300      	movne	r3, #0
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007b76:	69fb      	ldr	r3, [r7, #28]
 8007b78:	015a      	lsls	r2, r3, #5
 8007b7a:	6a3b      	ldr	r3, [r7, #32]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	69fa      	ldr	r2, [r7, #28]
 8007b86:	0151      	lsls	r1, r2, #5
 8007b88:	6a3a      	ldr	r2, [r7, #32]
 8007b8a:	440a      	add	r2, r1
 8007b8c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b90:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007b94:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	015a      	lsls	r2, r3, #5
 8007b9a:	6a3b      	ldr	r3, [r7, #32]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	7e7b      	ldrb	r3, [r7, #25]
 8007ba6:	075b      	lsls	r3, r3, #29
 8007ba8:	69f9      	ldr	r1, [r7, #28]
 8007baa:	0148      	lsls	r0, r1, #5
 8007bac:	6a39      	ldr	r1, [r7, #32]
 8007bae:	4401      	add	r1, r0
 8007bb0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	799b      	ldrb	r3, [r3, #6]
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	f040 80c3 	bne.w	8007d48 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	7c5b      	ldrb	r3, [r3, #17]
 8007bc6:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007bc8:	68ba      	ldr	r2, [r7, #8]
 8007bca:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	69fa      	ldr	r2, [r7, #28]
 8007bd0:	0151      	lsls	r1, r2, #5
 8007bd2:	6a3a      	ldr	r2, [r7, #32]
 8007bd4:	440a      	add	r2, r1
 8007bd6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007bda:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007bde:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	015a      	lsls	r2, r3, #5
 8007be4:	6a3b      	ldr	r3, [r7, #32]
 8007be6:	4413      	add	r3, r2
 8007be8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	69fa      	ldr	r2, [r7, #28]
 8007bf0:	0151      	lsls	r1, r2, #5
 8007bf2:	6a3a      	ldr	r2, [r7, #32]
 8007bf4:	440a      	add	r2, r1
 8007bf6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007bfa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007bfe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	79db      	ldrb	r3, [r3, #7]
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d123      	bne.n	8007c50 <USB_HC_StartXfer+0x2dc>
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	78db      	ldrb	r3, [r3, #3]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d11f      	bne.n	8007c50 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007c10:	69fb      	ldr	r3, [r7, #28]
 8007c12:	015a      	lsls	r2, r3, #5
 8007c14:	6a3b      	ldr	r3, [r7, #32]
 8007c16:	4413      	add	r3, r2
 8007c18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	69fa      	ldr	r2, [r7, #28]
 8007c20:	0151      	lsls	r1, r2, #5
 8007c22:	6a3a      	ldr	r2, [r7, #32]
 8007c24:	440a      	add	r2, r1
 8007c26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c2e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007c30:	69fb      	ldr	r3, [r7, #28]
 8007c32:	015a      	lsls	r2, r3, #5
 8007c34:	6a3b      	ldr	r3, [r7, #32]
 8007c36:	4413      	add	r3, r2
 8007c38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	69fa      	ldr	r2, [r7, #28]
 8007c40:	0151      	lsls	r1, r2, #5
 8007c42:	6a3a      	ldr	r2, [r7, #32]
 8007c44:	440a      	add	r2, r1
 8007c46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c4e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	7c9b      	ldrb	r3, [r3, #18]
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d003      	beq.n	8007c60 <USB_HC_StartXfer+0x2ec>
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	7c9b      	ldrb	r3, [r3, #18]
 8007c5c:	2b03      	cmp	r3, #3
 8007c5e:	d117      	bne.n	8007c90 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d113      	bne.n	8007c90 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	78db      	ldrb	r3, [r3, #3]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d10f      	bne.n	8007c90 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	015a      	lsls	r2, r3, #5
 8007c74:	6a3b      	ldr	r3, [r7, #32]
 8007c76:	4413      	add	r3, r2
 8007c78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	69fa      	ldr	r2, [r7, #28]
 8007c80:	0151      	lsls	r1, r2, #5
 8007c82:	6a3a      	ldr	r2, [r7, #32]
 8007c84:	440a      	add	r2, r1
 8007c86:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c8e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	7c9b      	ldrb	r3, [r3, #18]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d162      	bne.n	8007d5e <USB_HC_StartXfer+0x3ea>
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	78db      	ldrb	r3, [r3, #3]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d15e      	bne.n	8007d5e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	3b01      	subs	r3, #1
 8007ca6:	2b03      	cmp	r3, #3
 8007ca8:	d858      	bhi.n	8007d5c <USB_HC_StartXfer+0x3e8>
 8007caa:	a201      	add	r2, pc, #4	@ (adr r2, 8007cb0 <USB_HC_StartXfer+0x33c>)
 8007cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb0:	08007cc1 	.word	0x08007cc1
 8007cb4:	08007ce3 	.word	0x08007ce3
 8007cb8:	08007d05 	.word	0x08007d05
 8007cbc:	08007d27 	.word	0x08007d27
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	015a      	lsls	r2, r3, #5
 8007cc4:	6a3b      	ldr	r3, [r7, #32]
 8007cc6:	4413      	add	r3, r2
 8007cc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	69fa      	ldr	r2, [r7, #28]
 8007cd0:	0151      	lsls	r1, r2, #5
 8007cd2:	6a3a      	ldr	r2, [r7, #32]
 8007cd4:	440a      	add	r2, r1
 8007cd6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007cda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007cde:	6053      	str	r3, [r2, #4]
          break;
 8007ce0:	e03d      	b.n	8007d5e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8007ce2:	69fb      	ldr	r3, [r7, #28]
 8007ce4:	015a      	lsls	r2, r3, #5
 8007ce6:	6a3b      	ldr	r3, [r7, #32]
 8007ce8:	4413      	add	r3, r2
 8007cea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	69fa      	ldr	r2, [r7, #28]
 8007cf2:	0151      	lsls	r1, r2, #5
 8007cf4:	6a3a      	ldr	r2, [r7, #32]
 8007cf6:	440a      	add	r2, r1
 8007cf8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007cfc:	f043 030e 	orr.w	r3, r3, #14
 8007d00:	6053      	str	r3, [r2, #4]
          break;
 8007d02:	e02c      	b.n	8007d5e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	015a      	lsls	r2, r3, #5
 8007d08:	6a3b      	ldr	r3, [r7, #32]
 8007d0a:	4413      	add	r3, r2
 8007d0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	69fa      	ldr	r2, [r7, #28]
 8007d14:	0151      	lsls	r1, r2, #5
 8007d16:	6a3a      	ldr	r2, [r7, #32]
 8007d18:	440a      	add	r2, r1
 8007d1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007d22:	6053      	str	r3, [r2, #4]
          break;
 8007d24:	e01b      	b.n	8007d5e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	015a      	lsls	r2, r3, #5
 8007d2a:	6a3b      	ldr	r3, [r7, #32]
 8007d2c:	4413      	add	r3, r2
 8007d2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	69fa      	ldr	r2, [r7, #28]
 8007d36:	0151      	lsls	r1, r2, #5
 8007d38:	6a3a      	ldr	r2, [r7, #32]
 8007d3a:	440a      	add	r2, r1
 8007d3c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d40:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007d44:	6053      	str	r3, [r2, #4]
          break;
 8007d46:	e00a      	b.n	8007d5e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	015a      	lsls	r2, r3, #5
 8007d4c:	6a3b      	ldr	r3, [r7, #32]
 8007d4e:	4413      	add	r3, r2
 8007d50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d54:	461a      	mov	r2, r3
 8007d56:	2300      	movs	r3, #0
 8007d58:	6053      	str	r3, [r2, #4]
 8007d5a:	e000      	b.n	8007d5e <USB_HC_StartXfer+0x3ea>
          break;
 8007d5c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007d5e:	69fb      	ldr	r3, [r7, #28]
 8007d60:	015a      	lsls	r2, r3, #5
 8007d62:	6a3b      	ldr	r3, [r7, #32]
 8007d64:	4413      	add	r3, r2
 8007d66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007d74:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	78db      	ldrb	r3, [r3, #3]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d004      	beq.n	8007d88 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d84:	613b      	str	r3, [r7, #16]
 8007d86:	e003      	b.n	8007d90 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007d8e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007d96:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007d98:	69fb      	ldr	r3, [r7, #28]
 8007d9a:	015a      	lsls	r2, r3, #5
 8007d9c:	6a3b      	ldr	r3, [r7, #32]
 8007d9e:	4413      	add	r3, r2
 8007da0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007da4:	461a      	mov	r2, r3
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007daa:	79fb      	ldrb	r3, [r7, #7]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d003      	beq.n	8007db8 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8007db0:	2300      	movs	r3, #0
 8007db2:	e055      	b.n	8007e60 <USB_HC_StartXfer+0x4ec>
 8007db4:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	78db      	ldrb	r3, [r3, #3]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d14e      	bne.n	8007e5e <USB_HC_StartXfer+0x4ea>
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	6a1b      	ldr	r3, [r3, #32]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d04a      	beq.n	8007e5e <USB_HC_StartXfer+0x4ea>
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	79db      	ldrb	r3, [r3, #7]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d146      	bne.n	8007e5e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	7c9b      	ldrb	r3, [r3, #18]
 8007dd4:	2b03      	cmp	r3, #3
 8007dd6:	d831      	bhi.n	8007e3c <USB_HC_StartXfer+0x4c8>
 8007dd8:	a201      	add	r2, pc, #4	@ (adr r2, 8007de0 <USB_HC_StartXfer+0x46c>)
 8007dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dde:	bf00      	nop
 8007de0:	08007df1 	.word	0x08007df1
 8007de4:	08007e15 	.word	0x08007e15
 8007de8:	08007df1 	.word	0x08007df1
 8007dec:	08007e15 	.word	0x08007e15
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	6a1b      	ldr	r3, [r3, #32]
 8007df4:	3303      	adds	r3, #3
 8007df6:	089b      	lsrs	r3, r3, #2
 8007df8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007dfa:	8afa      	ldrh	r2, [r7, #22]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d91c      	bls.n	8007e40 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	699b      	ldr	r3, [r3, #24]
 8007e0a:	f043 0220 	orr.w	r2, r3, #32
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	619a      	str	r2, [r3, #24]
        }
        break;
 8007e12:	e015      	b.n	8007e40 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	6a1b      	ldr	r3, [r3, #32]
 8007e18:	3303      	adds	r3, #3
 8007e1a:	089b      	lsrs	r3, r3, #2
 8007e1c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007e1e:	8afa      	ldrh	r2, [r7, #22]
 8007e20:	6a3b      	ldr	r3, [r7, #32]
 8007e22:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d90a      	bls.n	8007e44 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	699b      	ldr	r3, [r3, #24]
 8007e32:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	619a      	str	r2, [r3, #24]
        }
        break;
 8007e3a:	e003      	b.n	8007e44 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8007e3c:	bf00      	nop
 8007e3e:	e002      	b.n	8007e46 <USB_HC_StartXfer+0x4d2>
        break;
 8007e40:	bf00      	nop
 8007e42:	e000      	b.n	8007e46 <USB_HC_StartXfer+0x4d2>
        break;
 8007e44:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	6999      	ldr	r1, [r3, #24]
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	785a      	ldrb	r2, [r3, #1]
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	6a1b      	ldr	r3, [r3, #32]
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	2000      	movs	r0, #0
 8007e56:	9000      	str	r0, [sp, #0]
 8007e58:	68f8      	ldr	r0, [r7, #12]
 8007e5a:	f7ff f9c9 	bl	80071f0 <USB_WritePacket>
  }

  return HAL_OK;
 8007e5e:	2300      	movs	r3, #0
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3728      	adds	r7, #40	@ 0x28
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e7a:	695b      	ldr	r3, [r3, #20]
 8007e7c:	b29b      	uxth	r3, r3
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3714      	adds	r7, #20
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr

08007e8a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007e8a:	b480      	push	{r7}
 8007e8c:	b089      	sub	sp, #36	@ 0x24
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
 8007e92:	460b      	mov	r3, r1
 8007e94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007e9a:	78fb      	ldrb	r3, [r7, #3]
 8007e9c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007ea2:	69bb      	ldr	r3, [r7, #24]
 8007ea4:	015a      	lsls	r2, r3, #5
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	0c9b      	lsrs	r3, r3, #18
 8007eb2:	f003 0303 	and.w	r3, r3, #3
 8007eb6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	015a      	lsls	r2, r3, #5
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	0fdb      	lsrs	r3, r3, #31
 8007ec8:	f003 0301 	and.w	r3, r3, #1
 8007ecc:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007ece:	69bb      	ldr	r3, [r7, #24]
 8007ed0:	015a      	lsls	r2, r3, #5
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	0fdb      	lsrs	r3, r3, #31
 8007ede:	f003 0301 	and.w	r3, r3, #1
 8007ee2:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	f003 0320 	and.w	r3, r3, #32
 8007eec:	2b20      	cmp	r3, #32
 8007eee:	d10d      	bne.n	8007f0c <USB_HC_Halt+0x82>
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d10a      	bne.n	8007f0c <USB_HC_Halt+0x82>
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d005      	beq.n	8007f08 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d002      	beq.n	8007f08 <USB_HC_Halt+0x7e>
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	2b03      	cmp	r3, #3
 8007f06:	d101      	bne.n	8007f0c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	e0d8      	b.n	80080be <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d002      	beq.n	8007f18 <USB_HC_Halt+0x8e>
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	2b02      	cmp	r3, #2
 8007f16:	d173      	bne.n	8008000 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007f18:	69bb      	ldr	r3, [r7, #24]
 8007f1a:	015a      	lsls	r2, r3, #5
 8007f1c:	69fb      	ldr	r3, [r7, #28]
 8007f1e:	4413      	add	r3, r2
 8007f20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	69ba      	ldr	r2, [r7, #24]
 8007f28:	0151      	lsls	r1, r2, #5
 8007f2a:	69fa      	ldr	r2, [r7, #28]
 8007f2c:	440a      	add	r2, r1
 8007f2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f32:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007f36:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	f003 0320 	and.w	r3, r3, #32
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d14a      	bne.n	8007fda <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f48:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d133      	bne.n	8007fb8 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	015a      	lsls	r2, r3, #5
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	4413      	add	r3, r2
 8007f58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	69ba      	ldr	r2, [r7, #24]
 8007f60:	0151      	lsls	r1, r2, #5
 8007f62:	69fa      	ldr	r2, [r7, #28]
 8007f64:	440a      	add	r2, r1
 8007f66:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f6a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007f6e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f70:	69bb      	ldr	r3, [r7, #24]
 8007f72:	015a      	lsls	r2, r3, #5
 8007f74:	69fb      	ldr	r3, [r7, #28]
 8007f76:	4413      	add	r3, r2
 8007f78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	69ba      	ldr	r2, [r7, #24]
 8007f80:	0151      	lsls	r1, r2, #5
 8007f82:	69fa      	ldr	r2, [r7, #28]
 8007f84:	440a      	add	r2, r1
 8007f86:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f8a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007f8e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	3301      	adds	r3, #1
 8007f94:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007f9c:	d82e      	bhi.n	8007ffc <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	015a      	lsls	r2, r3, #5
 8007fa2:	69fb      	ldr	r3, [r7, #28]
 8007fa4:	4413      	add	r3, r2
 8007fa6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007fb0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007fb4:	d0ec      	beq.n	8007f90 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007fb6:	e081      	b.n	80080bc <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	015a      	lsls	r2, r3, #5
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	69ba      	ldr	r2, [r7, #24]
 8007fc8:	0151      	lsls	r1, r2, #5
 8007fca:	69fa      	ldr	r2, [r7, #28]
 8007fcc:	440a      	add	r2, r1
 8007fce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007fd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007fd6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007fd8:	e070      	b.n	80080bc <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	015a      	lsls	r2, r3, #5
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	69ba      	ldr	r2, [r7, #24]
 8007fea:	0151      	lsls	r1, r2, #5
 8007fec:	69fa      	ldr	r2, [r7, #28]
 8007fee:	440a      	add	r2, r1
 8007ff0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ff4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007ff8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007ffa:	e05f      	b.n	80080bc <USB_HC_Halt+0x232>
            break;
 8007ffc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007ffe:	e05d      	b.n	80080bc <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008000:	69bb      	ldr	r3, [r7, #24]
 8008002:	015a      	lsls	r2, r3, #5
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	4413      	add	r3, r2
 8008008:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	69ba      	ldr	r2, [r7, #24]
 8008010:	0151      	lsls	r1, r2, #5
 8008012:	69fa      	ldr	r2, [r7, #28]
 8008014:	440a      	add	r2, r1
 8008016:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800801a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800801e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008020:	69fb      	ldr	r3, [r7, #28]
 8008022:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008026:	691b      	ldr	r3, [r3, #16]
 8008028:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800802c:	2b00      	cmp	r3, #0
 800802e:	d133      	bne.n	8008098 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008030:	69bb      	ldr	r3, [r7, #24]
 8008032:	015a      	lsls	r2, r3, #5
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	4413      	add	r3, r2
 8008038:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	69ba      	ldr	r2, [r7, #24]
 8008040:	0151      	lsls	r1, r2, #5
 8008042:	69fa      	ldr	r2, [r7, #28]
 8008044:	440a      	add	r2, r1
 8008046:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800804a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800804e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008050:	69bb      	ldr	r3, [r7, #24]
 8008052:	015a      	lsls	r2, r3, #5
 8008054:	69fb      	ldr	r3, [r7, #28]
 8008056:	4413      	add	r3, r2
 8008058:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	69ba      	ldr	r2, [r7, #24]
 8008060:	0151      	lsls	r1, r2, #5
 8008062:	69fa      	ldr	r2, [r7, #28]
 8008064:	440a      	add	r2, r1
 8008066:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800806a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800806e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	3301      	adds	r3, #1
 8008074:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800807c:	d81d      	bhi.n	80080ba <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	015a      	lsls	r2, r3, #5
 8008082:	69fb      	ldr	r3, [r7, #28]
 8008084:	4413      	add	r3, r2
 8008086:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008090:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008094:	d0ec      	beq.n	8008070 <USB_HC_Halt+0x1e6>
 8008096:	e011      	b.n	80080bc <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	015a      	lsls	r2, r3, #5
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	4413      	add	r3, r2
 80080a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	69ba      	ldr	r2, [r7, #24]
 80080a8:	0151      	lsls	r1, r2, #5
 80080aa:	69fa      	ldr	r2, [r7, #28]
 80080ac:	440a      	add	r2, r1
 80080ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80080b6:	6013      	str	r3, [r2, #0]
 80080b8:	e000      	b.n	80080bc <USB_HC_Halt+0x232>
          break;
 80080ba:	bf00      	nop
    }
  }

  return HAL_OK;
 80080bc:	2300      	movs	r3, #0
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3724      	adds	r7, #36	@ 0x24
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr
	...

080080cc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b087      	sub	sp, #28
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	460b      	mov	r3, r1
 80080d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80080dc:	78fb      	ldrb	r3, [r7, #3]
 80080de:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80080e0:	2301      	movs	r3, #1
 80080e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	04da      	lsls	r2, r3, #19
 80080e8:	4b15      	ldr	r3, [pc, #84]	@ (8008140 <USB_DoPing+0x74>)
 80080ea:	4013      	ands	r3, r2
 80080ec:	693a      	ldr	r2, [r7, #16]
 80080ee:	0151      	lsls	r1, r2, #5
 80080f0:	697a      	ldr	r2, [r7, #20]
 80080f2:	440a      	add	r2, r1
 80080f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80080fc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	015a      	lsls	r2, r3, #5
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	4413      	add	r3, r2
 8008106:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008114:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800811c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	015a      	lsls	r2, r3, #5
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	4413      	add	r3, r2
 8008126:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800812a:	461a      	mov	r2, r3
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008130:	2300      	movs	r3, #0
}
 8008132:	4618      	mov	r0, r3
 8008134:	371c      	adds	r7, #28
 8008136:	46bd      	mov	sp, r7
 8008138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813c:	4770      	bx	lr
 800813e:	bf00      	nop
 8008140:	1ff80000 	.word	0x1ff80000

08008144 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b088      	sub	sp, #32
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800814c:	2300      	movs	r3, #0
 800814e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008154:	2300      	movs	r3, #0
 8008156:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f7fe ff8c 	bl	8007076 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800815e:	2110      	movs	r1, #16
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f7fe ffe5 	bl	8007130 <USB_FlushTxFifo>
 8008166:	4603      	mov	r3, r0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d001      	beq.n	8008170 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f7ff f80f 	bl	8007194 <USB_FlushRxFifo>
 8008176:	4603      	mov	r3, r0
 8008178:	2b00      	cmp	r3, #0
 800817a:	d001      	beq.n	8008180 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008180:	2300      	movs	r3, #0
 8008182:	61bb      	str	r3, [r7, #24]
 8008184:	e01f      	b.n	80081c6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008186:	69bb      	ldr	r3, [r7, #24]
 8008188:	015a      	lsls	r2, r3, #5
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	4413      	add	r3, r2
 800818e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800819c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80081a4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80081ac:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80081ae:	69bb      	ldr	r3, [r7, #24]
 80081b0:	015a      	lsls	r2, r3, #5
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	4413      	add	r3, r2
 80081b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081ba:	461a      	mov	r2, r3
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	3301      	adds	r3, #1
 80081c4:	61bb      	str	r3, [r7, #24]
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	2b0f      	cmp	r3, #15
 80081ca:	d9dc      	bls.n	8008186 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80081cc:	2300      	movs	r3, #0
 80081ce:	61bb      	str	r3, [r7, #24]
 80081d0:	e034      	b.n	800823c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80081d2:	69bb      	ldr	r3, [r7, #24]
 80081d4:	015a      	lsls	r2, r3, #5
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	4413      	add	r3, r2
 80081da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80081e8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80081f0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80081f8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	015a      	lsls	r2, r3, #5
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	4413      	add	r3, r2
 8008202:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008206:	461a      	mov	r2, r3
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	3301      	adds	r3, #1
 8008210:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008218:	d80c      	bhi.n	8008234 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	015a      	lsls	r2, r3, #5
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	4413      	add	r3, r2
 8008222:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800822c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008230:	d0ec      	beq.n	800820c <USB_StopHost+0xc8>
 8008232:	e000      	b.n	8008236 <USB_StopHost+0xf2>
        break;
 8008234:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008236:	69bb      	ldr	r3, [r7, #24]
 8008238:	3301      	adds	r3, #1
 800823a:	61bb      	str	r3, [r7, #24]
 800823c:	69bb      	ldr	r3, [r7, #24]
 800823e:	2b0f      	cmp	r3, #15
 8008240:	d9c7      	bls.n	80081d2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008248:	461a      	mov	r2, r3
 800824a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800824e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008256:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f7fe fefb 	bl	8007054 <USB_EnableGlobalInt>

  return ret;
 800825e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008260:	4618      	mov	r0, r3
 8008262:	3720      	adds	r7, #32
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008268:	b590      	push	{r4, r7, lr}
 800826a:	b089      	sub	sp, #36	@ 0x24
 800826c:	af04      	add	r7, sp, #16
 800826e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008270:	2301      	movs	r3, #1
 8008272:	2202      	movs	r2, #2
 8008274:	2102      	movs	r1, #2
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 fc85 	bl	8008b86 <USBH_FindInterface>
 800827c:	4603      	mov	r3, r0
 800827e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008280:	7bfb      	ldrb	r3, [r7, #15]
 8008282:	2bff      	cmp	r3, #255	@ 0xff
 8008284:	d002      	beq.n	800828c <USBH_CDC_InterfaceInit+0x24>
 8008286:	7bfb      	ldrb	r3, [r7, #15]
 8008288:	2b01      	cmp	r3, #1
 800828a:	d901      	bls.n	8008290 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800828c:	2302      	movs	r3, #2
 800828e:	e13d      	b.n	800850c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008290:	7bfb      	ldrb	r3, [r7, #15]
 8008292:	4619      	mov	r1, r3
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 fc5a 	bl	8008b4e <USBH_SelectInterface>
 800829a:	4603      	mov	r3, r0
 800829c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800829e:	7bbb      	ldrb	r3, [r7, #14]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d001      	beq.n	80082a8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80082a4:	2302      	movs	r3, #2
 80082a6:	e131      	b.n	800850c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80082ae:	2050      	movs	r0, #80	@ 0x50
 80082b0:	f002 fb64 	bl	800a97c <malloc>
 80082b4:	4603      	mov	r3, r0
 80082b6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80082be:	69db      	ldr	r3, [r3, #28]
 80082c0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d101      	bne.n	80082cc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80082c8:	2302      	movs	r3, #2
 80082ca:	e11f      	b.n	800850c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80082cc:	2250      	movs	r2, #80	@ 0x50
 80082ce:	2100      	movs	r1, #0
 80082d0:	68b8      	ldr	r0, [r7, #8]
 80082d2:	f002 fd54 	bl	800ad7e <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80082d6:	7bfb      	ldrb	r3, [r7, #15]
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	211a      	movs	r1, #26
 80082dc:	fb01 f303 	mul.w	r3, r1, r3
 80082e0:	4413      	add	r3, r2
 80082e2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	b25b      	sxtb	r3, r3
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	da15      	bge.n	800831a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80082ee:	7bfb      	ldrb	r3, [r7, #15]
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	211a      	movs	r1, #26
 80082f4:	fb01 f303 	mul.w	r3, r1, r3
 80082f8:	4413      	add	r3, r2
 80082fa:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80082fe:	781a      	ldrb	r2, [r3, #0]
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008304:	7bfb      	ldrb	r3, [r7, #15]
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	211a      	movs	r1, #26
 800830a:	fb01 f303 	mul.w	r3, r1, r3
 800830e:	4413      	add	r3, r2
 8008310:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008314:	881a      	ldrh	r2, [r3, #0]
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	785b      	ldrb	r3, [r3, #1]
 800831e:	4619      	mov	r1, r3
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f001 ffbe 	bl	800a2a2 <USBH_AllocPipe>
 8008326:	4603      	mov	r3, r0
 8008328:	461a      	mov	r2, r3
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	7819      	ldrb	r1, [r3, #0]
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	7858      	ldrb	r0, [r3, #1]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008342:	68ba      	ldr	r2, [r7, #8]
 8008344:	8952      	ldrh	r2, [r2, #10]
 8008346:	9202      	str	r2, [sp, #8]
 8008348:	2203      	movs	r2, #3
 800834a:	9201      	str	r2, [sp, #4]
 800834c:	9300      	str	r3, [sp, #0]
 800834e:	4623      	mov	r3, r4
 8008350:	4602      	mov	r2, r0
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f001 ff76 	bl	800a244 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	2200      	movs	r2, #0
 800835e:	4619      	mov	r1, r3
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f002 fa85 	bl	800a870 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008366:	2300      	movs	r3, #0
 8008368:	2200      	movs	r2, #0
 800836a:	210a      	movs	r1, #10
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 fc0a 	bl	8008b86 <USBH_FindInterface>
 8008372:	4603      	mov	r3, r0
 8008374:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008376:	7bfb      	ldrb	r3, [r7, #15]
 8008378:	2bff      	cmp	r3, #255	@ 0xff
 800837a:	d002      	beq.n	8008382 <USBH_CDC_InterfaceInit+0x11a>
 800837c:	7bfb      	ldrb	r3, [r7, #15]
 800837e:	2b01      	cmp	r3, #1
 8008380:	d901      	bls.n	8008386 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008382:	2302      	movs	r3, #2
 8008384:	e0c2      	b.n	800850c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008386:	7bfb      	ldrb	r3, [r7, #15]
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	211a      	movs	r1, #26
 800838c:	fb01 f303 	mul.w	r3, r1, r3
 8008390:	4413      	add	r3, r2
 8008392:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	b25b      	sxtb	r3, r3
 800839a:	2b00      	cmp	r3, #0
 800839c:	da16      	bge.n	80083cc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800839e:	7bfb      	ldrb	r3, [r7, #15]
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	211a      	movs	r1, #26
 80083a4:	fb01 f303 	mul.w	r3, r1, r3
 80083a8:	4413      	add	r3, r2
 80083aa:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80083ae:	781a      	ldrb	r2, [r3, #0]
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80083b4:	7bfb      	ldrb	r3, [r7, #15]
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	211a      	movs	r1, #26
 80083ba:	fb01 f303 	mul.w	r3, r1, r3
 80083be:	4413      	add	r3, r2
 80083c0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80083c4:	881a      	ldrh	r2, [r3, #0]
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	835a      	strh	r2, [r3, #26]
 80083ca:	e015      	b.n	80083f8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80083cc:	7bfb      	ldrb	r3, [r7, #15]
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	211a      	movs	r1, #26
 80083d2:	fb01 f303 	mul.w	r3, r1, r3
 80083d6:	4413      	add	r3, r2
 80083d8:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80083dc:	781a      	ldrb	r2, [r3, #0]
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80083e2:	7bfb      	ldrb	r3, [r7, #15]
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	211a      	movs	r1, #26
 80083e8:	fb01 f303 	mul.w	r3, r1, r3
 80083ec:	4413      	add	r3, r2
 80083ee:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80083f2:	881a      	ldrh	r2, [r3, #0]
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80083f8:	7bfb      	ldrb	r3, [r7, #15]
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	211a      	movs	r1, #26
 80083fe:	fb01 f303 	mul.w	r3, r1, r3
 8008402:	4413      	add	r3, r2
 8008404:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	b25b      	sxtb	r3, r3
 800840c:	2b00      	cmp	r3, #0
 800840e:	da16      	bge.n	800843e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008410:	7bfb      	ldrb	r3, [r7, #15]
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	211a      	movs	r1, #26
 8008416:	fb01 f303 	mul.w	r3, r1, r3
 800841a:	4413      	add	r3, r2
 800841c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008420:	781a      	ldrb	r2, [r3, #0]
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008426:	7bfb      	ldrb	r3, [r7, #15]
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	211a      	movs	r1, #26
 800842c:	fb01 f303 	mul.w	r3, r1, r3
 8008430:	4413      	add	r3, r2
 8008432:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008436:	881a      	ldrh	r2, [r3, #0]
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	835a      	strh	r2, [r3, #26]
 800843c:	e015      	b.n	800846a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800843e:	7bfb      	ldrb	r3, [r7, #15]
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	211a      	movs	r1, #26
 8008444:	fb01 f303 	mul.w	r3, r1, r3
 8008448:	4413      	add	r3, r2
 800844a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800844e:	781a      	ldrb	r2, [r3, #0]
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008454:	7bfb      	ldrb	r3, [r7, #15]
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	211a      	movs	r1, #26
 800845a:	fb01 f303 	mul.w	r3, r1, r3
 800845e:	4413      	add	r3, r2
 8008460:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008464:	881a      	ldrh	r2, [r3, #0]
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	7b9b      	ldrb	r3, [r3, #14]
 800846e:	4619      	mov	r1, r3
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f001 ff16 	bl	800a2a2 <USBH_AllocPipe>
 8008476:	4603      	mov	r3, r0
 8008478:	461a      	mov	r2, r3
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	7bdb      	ldrb	r3, [r3, #15]
 8008482:	4619      	mov	r1, r3
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f001 ff0c 	bl	800a2a2 <USBH_AllocPipe>
 800848a:	4603      	mov	r3, r0
 800848c:	461a      	mov	r2, r3
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	7b59      	ldrb	r1, [r3, #13]
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	7b98      	ldrb	r0, [r3, #14]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80084a6:	68ba      	ldr	r2, [r7, #8]
 80084a8:	8b12      	ldrh	r2, [r2, #24]
 80084aa:	9202      	str	r2, [sp, #8]
 80084ac:	2202      	movs	r2, #2
 80084ae:	9201      	str	r2, [sp, #4]
 80084b0:	9300      	str	r3, [sp, #0]
 80084b2:	4623      	mov	r3, r4
 80084b4:	4602      	mov	r2, r0
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f001 fec4 	bl	800a244 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	7b19      	ldrb	r1, [r3, #12]
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	7bd8      	ldrb	r0, [r3, #15]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80084d0:	68ba      	ldr	r2, [r7, #8]
 80084d2:	8b52      	ldrh	r2, [r2, #26]
 80084d4:	9202      	str	r2, [sp, #8]
 80084d6:	2202      	movs	r2, #2
 80084d8:	9201      	str	r2, [sp, #4]
 80084da:	9300      	str	r3, [sp, #0]
 80084dc:	4623      	mov	r3, r4
 80084de:	4602      	mov	r2, r0
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f001 feaf 	bl	800a244 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	7b5b      	ldrb	r3, [r3, #13]
 80084f2:	2200      	movs	r2, #0
 80084f4:	4619      	mov	r1, r3
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f002 f9ba 	bl	800a870 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	7b1b      	ldrb	r3, [r3, #12]
 8008500:	2200      	movs	r2, #0
 8008502:	4619      	mov	r1, r3
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f002 f9b3 	bl	800a870 <USBH_LL_SetToggle>

  return USBH_OK;
 800850a:	2300      	movs	r3, #0
}
 800850c:	4618      	mov	r0, r3
 800850e:	3714      	adds	r7, #20
 8008510:	46bd      	mov	sp, r7
 8008512:	bd90      	pop	{r4, r7, pc}

08008514 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b084      	sub	sp, #16
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008522:	69db      	ldr	r3, [r3, #28]
 8008524:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d00e      	beq.n	800854c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	4619      	mov	r1, r3
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f001 fea4 	bl	800a282 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	4619      	mov	r1, r3
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f001 fecf 	bl	800a2e4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2200      	movs	r2, #0
 800854a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	7b1b      	ldrb	r3, [r3, #12]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d00e      	beq.n	8008572 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	7b1b      	ldrb	r3, [r3, #12]
 8008558:	4619      	mov	r1, r3
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f001 fe91 	bl	800a282 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	7b1b      	ldrb	r3, [r3, #12]
 8008564:	4619      	mov	r1, r3
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f001 febc 	bl	800a2e4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2200      	movs	r2, #0
 8008570:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	7b5b      	ldrb	r3, [r3, #13]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d00e      	beq.n	8008598 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	7b5b      	ldrb	r3, [r3, #13]
 800857e:	4619      	mov	r1, r3
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f001 fe7e 	bl	800a282 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	7b5b      	ldrb	r3, [r3, #13]
 800858a:	4619      	mov	r1, r3
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f001 fea9 	bl	800a2e4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2200      	movs	r2, #0
 8008596:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800859e:	69db      	ldr	r3, [r3, #28]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00b      	beq.n	80085bc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80085aa:	69db      	ldr	r3, [r3, #28]
 80085ac:	4618      	mov	r0, r3
 80085ae:	f002 f9ed 	bl	800a98c <free>
    phost->pActiveClass->pData = 0U;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80085b8:	2200      	movs	r2, #0
 80085ba:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80085bc:	2300      	movs	r3, #0
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3710      	adds	r7, #16
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b084      	sub	sp, #16
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80085d4:	69db      	ldr	r3, [r3, #28]
 80085d6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	3340      	adds	r3, #64	@ 0x40
 80085dc:	4619      	mov	r1, r3
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 f8b1 	bl	8008746 <GetLineCoding>
 80085e4:	4603      	mov	r3, r0
 80085e6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80085e8:	7afb      	ldrb	r3, [r7, #11]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d105      	bne.n	80085fa <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80085f4:	2102      	movs	r1, #2
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80085fa:	7afb      	ldrb	r3, [r7, #11]
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3710      	adds	r7, #16
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b084      	sub	sp, #16
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800860c:	2301      	movs	r3, #1
 800860e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008610:	2300      	movs	r3, #0
 8008612:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800861a:	69db      	ldr	r3, [r3, #28]
 800861c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008624:	2b04      	cmp	r3, #4
 8008626:	d877      	bhi.n	8008718 <USBH_CDC_Process+0x114>
 8008628:	a201      	add	r2, pc, #4	@ (adr r2, 8008630 <USBH_CDC_Process+0x2c>)
 800862a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800862e:	bf00      	nop
 8008630:	08008645 	.word	0x08008645
 8008634:	0800864b 	.word	0x0800864b
 8008638:	0800867b 	.word	0x0800867b
 800863c:	080086ef 	.word	0x080086ef
 8008640:	080086fd 	.word	0x080086fd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008644:	2300      	movs	r3, #0
 8008646:	73fb      	strb	r3, [r7, #15]
      break;
 8008648:	e06d      	b.n	8008726 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800864e:	4619      	mov	r1, r3
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 f897 	bl	8008784 <SetLineCoding>
 8008656:	4603      	mov	r3, r0
 8008658:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800865a:	7bbb      	ldrb	r3, [r7, #14]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d104      	bne.n	800866a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	2202      	movs	r2, #2
 8008664:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008668:	e058      	b.n	800871c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800866a:	7bbb      	ldrb	r3, [r7, #14]
 800866c:	2b01      	cmp	r3, #1
 800866e:	d055      	beq.n	800871c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	2204      	movs	r2, #4
 8008674:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008678:	e050      	b.n	800871c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	3340      	adds	r3, #64	@ 0x40
 800867e:	4619      	mov	r1, r3
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 f860 	bl	8008746 <GetLineCoding>
 8008686:	4603      	mov	r3, r0
 8008688:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800868a:	7bbb      	ldrb	r3, [r7, #14]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d126      	bne.n	80086de <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	2200      	movs	r2, #0
 8008694:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80086a2:	791b      	ldrb	r3, [r3, #4]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d13b      	bne.n	8008720 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80086b2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d133      	bne.n	8008720 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80086c2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d12b      	bne.n	8008720 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80086d0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d124      	bne.n	8008720 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 f958 	bl	800898c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80086dc:	e020      	b.n	8008720 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80086de:	7bbb      	ldrb	r3, [r7, #14]
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d01d      	beq.n	8008720 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	2204      	movs	r2, #4
 80086e8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80086ec:	e018      	b.n	8008720 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 f867 	bl	80087c2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 f8da 	bl	80088ae <CDC_ProcessReception>
      break;
 80086fa:	e014      	b.n	8008726 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80086fc:	2100      	movs	r1, #0
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f001 f81a 	bl	8009738 <USBH_ClrFeature>
 8008704:	4603      	mov	r3, r0
 8008706:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008708:	7bbb      	ldrb	r3, [r7, #14]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d10a      	bne.n	8008724 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	2200      	movs	r2, #0
 8008712:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8008716:	e005      	b.n	8008724 <USBH_CDC_Process+0x120>

    default:
      break;
 8008718:	bf00      	nop
 800871a:	e004      	b.n	8008726 <USBH_CDC_Process+0x122>
      break;
 800871c:	bf00      	nop
 800871e:	e002      	b.n	8008726 <USBH_CDC_Process+0x122>
      break;
 8008720:	bf00      	nop
 8008722:	e000      	b.n	8008726 <USBH_CDC_Process+0x122>
      break;
 8008724:	bf00      	nop

  }

  return status;
 8008726:	7bfb      	ldrb	r3, [r7, #15]
}
 8008728:	4618      	mov	r0, r3
 800872a:	3710      	adds	r7, #16
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008730:	b480      	push	{r7}
 8008732:	b083      	sub	sp, #12
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008738:	2300      	movs	r3, #0
}
 800873a:	4618      	mov	r0, r3
 800873c:	370c      	adds	r7, #12
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr

08008746 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008746:	b580      	push	{r7, lr}
 8008748:	b082      	sub	sp, #8
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
 800874e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	22a1      	movs	r2, #161	@ 0xa1
 8008754:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2221      	movs	r2, #33	@ 0x21
 800875a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2200      	movs	r2, #0
 8008760:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2207      	movs	r2, #7
 800876c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	2207      	movs	r2, #7
 8008772:	4619      	mov	r1, r3
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f001 fb14 	bl	8009da2 <USBH_CtlReq>
 800877a:	4603      	mov	r3, r0
}
 800877c:	4618      	mov	r0, r3
 800877e:	3708      	adds	r7, #8
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2221      	movs	r2, #33	@ 0x21
 8008792:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2220      	movs	r2, #32
 8008798:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2200      	movs	r2, #0
 800879e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2207      	movs	r2, #7
 80087aa:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	2207      	movs	r2, #7
 80087b0:	4619      	mov	r1, r3
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f001 faf5 	bl	8009da2 <USBH_CtlReq>
 80087b8:	4603      	mov	r3, r0
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3708      	adds	r7, #8
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}

080087c2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80087c2:	b580      	push	{r7, lr}
 80087c4:	b086      	sub	sp, #24
 80087c6:	af02      	add	r7, sp, #8
 80087c8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80087d0:	69db      	ldr	r3, [r3, #28]
 80087d2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80087d4:	2300      	movs	r3, #0
 80087d6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d002      	beq.n	80087e8 <CDC_ProcessTransmission+0x26>
 80087e2:	2b02      	cmp	r3, #2
 80087e4:	d023      	beq.n	800882e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80087e6:	e05e      	b.n	80088a6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ec:	68fa      	ldr	r2, [r7, #12]
 80087ee:	8b12      	ldrh	r2, [r2, #24]
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d90b      	bls.n	800880c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	69d9      	ldr	r1, [r3, #28]
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	8b1a      	ldrh	r2, [r3, #24]
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	7b5b      	ldrb	r3, [r3, #13]
 8008800:	2001      	movs	r0, #1
 8008802:	9000      	str	r0, [sp, #0]
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f001 fcda 	bl	800a1be <USBH_BulkSendData>
 800880a:	e00b      	b.n	8008824 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8008814:	b29a      	uxth	r2, r3
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	7b5b      	ldrb	r3, [r3, #13]
 800881a:	2001      	movs	r0, #1
 800881c:	9000      	str	r0, [sp, #0]
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f001 fccd 	bl	800a1be <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2202      	movs	r2, #2
 8008828:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800882c:	e03b      	b.n	80088a6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	7b5b      	ldrb	r3, [r3, #13]
 8008832:	4619      	mov	r1, r3
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f001 fff1 	bl	800a81c <USBH_LL_GetURBState>
 800883a:	4603      	mov	r3, r0
 800883c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800883e:	7afb      	ldrb	r3, [r7, #11]
 8008840:	2b01      	cmp	r3, #1
 8008842:	d128      	bne.n	8008896 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008848:	68fa      	ldr	r2, [r7, #12]
 800884a:	8b12      	ldrh	r2, [r2, #24]
 800884c:	4293      	cmp	r3, r2
 800884e:	d90e      	bls.n	800886e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008854:	68fa      	ldr	r2, [r7, #12]
 8008856:	8b12      	ldrh	r2, [r2, #24]
 8008858:	1a9a      	subs	r2, r3, r2
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	69db      	ldr	r3, [r3, #28]
 8008862:	68fa      	ldr	r2, [r7, #12]
 8008864:	8b12      	ldrh	r2, [r2, #24]
 8008866:	441a      	add	r2, r3
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	61da      	str	r2, [r3, #28]
 800886c:	e002      	b.n	8008874 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2200      	movs	r2, #0
 8008872:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008878:	2b00      	cmp	r3, #0
 800887a:	d004      	beq.n	8008886 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008884:	e00e      	b.n	80088a4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2200      	movs	r2, #0
 800888a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 f868 	bl	8008964 <USBH_CDC_TransmitCallback>
      break;
 8008894:	e006      	b.n	80088a4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008896:	7afb      	ldrb	r3, [r7, #11]
 8008898:	2b02      	cmp	r3, #2
 800889a:	d103      	bne.n	80088a4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2201      	movs	r2, #1
 80088a0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80088a4:	bf00      	nop
  }
}
 80088a6:	bf00      	nop
 80088a8:	3710      	adds	r7, #16
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b086      	sub	sp, #24
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80088bc:	69db      	ldr	r3, [r3, #28]
 80088be:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80088c0:	2300      	movs	r3, #0
 80088c2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80088ca:	2b03      	cmp	r3, #3
 80088cc:	d002      	beq.n	80088d4 <CDC_ProcessReception+0x26>
 80088ce:	2b04      	cmp	r3, #4
 80088d0:	d00e      	beq.n	80088f0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80088d2:	e043      	b.n	800895c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	6a19      	ldr	r1, [r3, #32]
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	8b5a      	ldrh	r2, [r3, #26]
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	7b1b      	ldrb	r3, [r3, #12]
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f001 fc91 	bl	800a208 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	2204      	movs	r2, #4
 80088ea:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80088ee:	e035      	b.n	800895c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	7b1b      	ldrb	r3, [r3, #12]
 80088f4:	4619      	mov	r1, r3
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f001 ff90 	bl	800a81c <USBH_LL_GetURBState>
 80088fc:	4603      	mov	r3, r0
 80088fe:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008900:	7cfb      	ldrb	r3, [r7, #19]
 8008902:	2b01      	cmp	r3, #1
 8008904:	d129      	bne.n	800895a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	7b1b      	ldrb	r3, [r3, #12]
 800890a:	4619      	mov	r1, r3
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f001 fef3 	bl	800a6f8 <USBH_LL_GetLastXferSize>
 8008912:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008918:	68fa      	ldr	r2, [r7, #12]
 800891a:	429a      	cmp	r2, r3
 800891c:	d016      	beq.n	800894c <CDC_ProcessReception+0x9e>
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	8b5b      	ldrh	r3, [r3, #26]
 8008922:	461a      	mov	r2, r3
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	4293      	cmp	r3, r2
 8008928:	d110      	bne.n	800894c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	1ad2      	subs	r2, r2, r3
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	6a1a      	ldr	r2, [r3, #32]
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	441a      	add	r2, r3
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	2203      	movs	r2, #3
 8008946:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800894a:	e006      	b.n	800895a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	2200      	movs	r2, #0
 8008950:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 f80f 	bl	8008978 <USBH_CDC_ReceiveCallback>
      break;
 800895a:	bf00      	nop
  }
}
 800895c:	bf00      	nop
 800895e:	3718      	adds	r7, #24
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800896c:	bf00      	nop
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008978:	b480      	push	{r7}
 800897a:	b083      	sub	sp, #12
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008980:	bf00      	nop
 8008982:	370c      	adds	r7, #12
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800898c:	b480      	push	{r7}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008994:	bf00      	nop
 8008996:	370c      	adds	r7, #12
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	60f8      	str	r0, [r7, #12]
 80089a8:	60b9      	str	r1, [r7, #8]
 80089aa:	4613      	mov	r3, r2
 80089ac:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d101      	bne.n	80089b8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80089b4:	2302      	movs	r3, #2
 80089b6:	e029      	b.n	8008a0c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	79fa      	ldrb	r2, [r7, #7]
 80089bc:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2200      	movs	r2, #0
 80089c4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80089d0:	68f8      	ldr	r0, [r7, #12]
 80089d2:	f000 f81f 	bl	8008a14 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2200      	movs	r2, #0
 80089da:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2200      	movs	r2, #0
 80089e2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2200      	movs	r2, #0
 80089ea:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2200      	movs	r2, #0
 80089f2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d003      	beq.n	8008a04 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	68ba      	ldr	r2, [r7, #8]
 8008a00:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008a04:	68f8      	ldr	r0, [r7, #12]
 8008a06:	f001 fdc3 	bl	800a590 <USBH_LL_Init>

  return USBH_OK;
 8008a0a:	2300      	movs	r3, #0
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3710      	adds	r7, #16
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008a20:	2300      	movs	r3, #0
 8008a22:	60fb      	str	r3, [r7, #12]
 8008a24:	e009      	b.n	8008a3a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	33e0      	adds	r3, #224	@ 0xe0
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	4413      	add	r3, r2
 8008a30:	2200      	movs	r2, #0
 8008a32:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	3301      	adds	r3, #1
 8008a38:	60fb      	str	r3, [r7, #12]
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2b0f      	cmp	r3, #15
 8008a3e:	d9f2      	bls.n	8008a26 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008a40:	2300      	movs	r3, #0
 8008a42:	60fb      	str	r3, [r7, #12]
 8008a44:	e009      	b.n	8008a5a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	4413      	add	r3, r2
 8008a4c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008a50:	2200      	movs	r2, #0
 8008a52:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	3301      	adds	r3, #1
 8008a58:	60fb      	str	r3, [r7, #12]
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a60:	d3f1      	bcc.n	8008a46 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2200      	movs	r2, #0
 8008a66:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2201      	movs	r2, #1
 8008a72:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2240      	movs	r2, #64	@ 0x40
 8008a86:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2200      	movs	r2, #0
 8008a92:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2201      	movs	r2, #1
 8008a9a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	331c      	adds	r3, #28
 8008ab2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008ab6:	2100      	movs	r1, #0
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f002 f960 	bl	800ad7e <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008ac4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008ac8:	2100      	movs	r1, #0
 8008aca:	4618      	mov	r0, r3
 8008acc:	f002 f957 	bl	800ad7e <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008ad6:	2212      	movs	r2, #18
 8008ad8:	2100      	movs	r1, #0
 8008ada:	4618      	mov	r0, r3
 8008adc:	f002 f94f 	bl	800ad7e <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008ae6:	223e      	movs	r2, #62	@ 0x3e
 8008ae8:	2100      	movs	r1, #0
 8008aea:	4618      	mov	r0, r3
 8008aec:	f002 f947 	bl	800ad7e <memset>

  return USBH_OK;
 8008af0:	2300      	movs	r3, #0
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3710      	adds	r7, #16
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}

08008afa <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008afa:	b480      	push	{r7}
 8008afc:	b085      	sub	sp, #20
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
 8008b02:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008b04:	2300      	movs	r3, #0
 8008b06:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d016      	beq.n	8008b3c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d10e      	bne.n	8008b36 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008b1e:	1c59      	adds	r1, r3, #1
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	33de      	adds	r3, #222	@ 0xde
 8008b2a:	6839      	ldr	r1, [r7, #0]
 8008b2c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008b30:	2300      	movs	r3, #0
 8008b32:	73fb      	strb	r3, [r7, #15]
 8008b34:	e004      	b.n	8008b40 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008b36:	2302      	movs	r3, #2
 8008b38:	73fb      	strb	r3, [r7, #15]
 8008b3a:	e001      	b.n	8008b40 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008b3c:	2302      	movs	r3, #2
 8008b3e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3714      	adds	r7, #20
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr

08008b4e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008b4e:	b480      	push	{r7}
 8008b50:	b085      	sub	sp, #20
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
 8008b56:	460b      	mov	r3, r1
 8008b58:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8008b64:	78fa      	ldrb	r2, [r7, #3]
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d204      	bcs.n	8008b74 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	78fa      	ldrb	r2, [r7, #3]
 8008b6e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8008b72:	e001      	b.n	8008b78 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008b74:	2302      	movs	r3, #2
 8008b76:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3714      	adds	r7, #20
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr

08008b86 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008b86:	b480      	push	{r7}
 8008b88:	b087      	sub	sp, #28
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
 8008b8e:	4608      	mov	r0, r1
 8008b90:	4611      	mov	r1, r2
 8008b92:	461a      	mov	r2, r3
 8008b94:	4603      	mov	r3, r0
 8008b96:	70fb      	strb	r3, [r7, #3]
 8008b98:	460b      	mov	r3, r1
 8008b9a:	70bb      	strb	r3, [r7, #2]
 8008b9c:	4613      	mov	r3, r2
 8008b9e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008bae:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008bb0:	e025      	b.n	8008bfe <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008bb2:	7dfb      	ldrb	r3, [r7, #23]
 8008bb4:	221a      	movs	r2, #26
 8008bb6:	fb02 f303 	mul.w	r3, r2, r3
 8008bba:	3308      	adds	r3, #8
 8008bbc:	68fa      	ldr	r2, [r7, #12]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	3302      	adds	r3, #2
 8008bc2:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	795b      	ldrb	r3, [r3, #5]
 8008bc8:	78fa      	ldrb	r2, [r7, #3]
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d002      	beq.n	8008bd4 <USBH_FindInterface+0x4e>
 8008bce:	78fb      	ldrb	r3, [r7, #3]
 8008bd0:	2bff      	cmp	r3, #255	@ 0xff
 8008bd2:	d111      	bne.n	8008bf8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008bd8:	78ba      	ldrb	r2, [r7, #2]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d002      	beq.n	8008be4 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008bde:	78bb      	ldrb	r3, [r7, #2]
 8008be0:	2bff      	cmp	r3, #255	@ 0xff
 8008be2:	d109      	bne.n	8008bf8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008be8:	787a      	ldrb	r2, [r7, #1]
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d002      	beq.n	8008bf4 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008bee:	787b      	ldrb	r3, [r7, #1]
 8008bf0:	2bff      	cmp	r3, #255	@ 0xff
 8008bf2:	d101      	bne.n	8008bf8 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008bf4:	7dfb      	ldrb	r3, [r7, #23]
 8008bf6:	e006      	b.n	8008c06 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008bf8:	7dfb      	ldrb	r3, [r7, #23]
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008bfe:	7dfb      	ldrb	r3, [r7, #23]
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d9d6      	bls.n	8008bb2 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008c04:	23ff      	movs	r3, #255	@ 0xff
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	371c      	adds	r7, #28
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr

08008c12 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8008c12:	b580      	push	{r7, lr}
 8008c14:	b082      	sub	sp, #8
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f001 fcf4 	bl	800a608 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008c20:	2101      	movs	r1, #1
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f001 fe0d 	bl	800a842 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008c28:	2300      	movs	r3, #0
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3708      	adds	r7, #8
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
	...

08008c34 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b088      	sub	sp, #32
 8008c38:	af04      	add	r7, sp, #16
 8008c3a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008c3c:	2302      	movs	r3, #2
 8008c3e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008c40:	2300      	movs	r3, #0
 8008c42:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8008c4a:	b2db      	uxtb	r3, r3
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d102      	bne.n	8008c56 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2203      	movs	r2, #3
 8008c54:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	2b0b      	cmp	r3, #11
 8008c5e:	f200 81bb 	bhi.w	8008fd8 <USBH_Process+0x3a4>
 8008c62:	a201      	add	r2, pc, #4	@ (adr r2, 8008c68 <USBH_Process+0x34>)
 8008c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c68:	08008c99 	.word	0x08008c99
 8008c6c:	08008ccb 	.word	0x08008ccb
 8008c70:	08008d33 	.word	0x08008d33
 8008c74:	08008f73 	.word	0x08008f73
 8008c78:	08008fd9 	.word	0x08008fd9
 8008c7c:	08008dd3 	.word	0x08008dd3
 8008c80:	08008f19 	.word	0x08008f19
 8008c84:	08008e09 	.word	0x08008e09
 8008c88:	08008e29 	.word	0x08008e29
 8008c8c:	08008e47 	.word	0x08008e47
 8008c90:	08008e8b 	.word	0x08008e8b
 8008c94:	08008f5b 	.word	0x08008f5b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	f000 819b 	beq.w	8008fdc <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2201      	movs	r2, #1
 8008caa:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008cac:	20c8      	movs	r0, #200	@ 0xc8
 8008cae:	f001 fe12 	bl	800a8d6 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f001 fd05 	bl	800a6c2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008cc8:	e188      	b.n	8008fdc <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d107      	bne.n	8008ce4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2202      	movs	r2, #2
 8008ce0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008ce2:	e18a      	b.n	8008ffa <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008cea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008cee:	d914      	bls.n	8008d1a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	b2da      	uxtb	r2, r3
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008d06:	2b03      	cmp	r3, #3
 8008d08:	d903      	bls.n	8008d12 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	220d      	movs	r2, #13
 8008d0e:	701a      	strb	r2, [r3, #0]
      break;
 8008d10:	e173      	b.n	8008ffa <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	701a      	strb	r2, [r3, #0]
      break;
 8008d18:	e16f      	b.n	8008ffa <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008d20:	f103 020a 	add.w	r2, r3, #10
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8008d2a:	200a      	movs	r0, #10
 8008d2c:	f001 fdd3 	bl	800a8d6 <USBH_Delay>
      break;
 8008d30:	e163      	b.n	8008ffa <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d005      	beq.n	8008d48 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008d42:	2104      	movs	r1, #4
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008d48:	2064      	movs	r0, #100	@ 0x64
 8008d4a:	f001 fdc4 	bl	800a8d6 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f001 fc90 	bl	800a674 <USBH_LL_GetSpeed>
 8008d54:	4603      	mov	r3, r0
 8008d56:	461a      	mov	r2, r3
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2205      	movs	r2, #5
 8008d62:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008d64:	2100      	movs	r1, #0
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f001 fa9b 	bl	800a2a2 <USBH_AllocPipe>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	461a      	mov	r2, r3
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008d74:	2180      	movs	r1, #128	@ 0x80
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f001 fa93 	bl	800a2a2 <USBH_AllocPipe>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	461a      	mov	r2, r3
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	7919      	ldrb	r1, [r3, #4]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008d98:	9202      	str	r2, [sp, #8]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	9201      	str	r2, [sp, #4]
 8008d9e:	9300      	str	r3, [sp, #0]
 8008da0:	4603      	mov	r3, r0
 8008da2:	2280      	movs	r2, #128	@ 0x80
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f001 fa4d 	bl	800a244 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	7959      	ldrb	r1, [r3, #5]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008dbe:	9202      	str	r2, [sp, #8]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	9201      	str	r2, [sp, #4]
 8008dc4:	9300      	str	r3, [sp, #0]
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	2200      	movs	r2, #0
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f001 fa3a 	bl	800a244 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008dd0:	e113      	b.n	8008ffa <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 f916 	bl	8009004 <USBH_HandleEnum>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008ddc:	7bbb      	ldrb	r3, [r7, #14]
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	f040 80fd 	bne.w	8008fe0 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2200      	movs	r2, #0
 8008dea:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d103      	bne.n	8008e00 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2208      	movs	r2, #8
 8008dfc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008dfe:	e0ef      	b.n	8008fe0 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2207      	movs	r2, #7
 8008e04:	701a      	strb	r2, [r3, #0]
      break;
 8008e06:	e0eb      	b.n	8008fe0 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	f000 80e8 	beq.w	8008fe4 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008e1a:	2101      	movs	r1, #1
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2208      	movs	r2, #8
 8008e24:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008e26:	e0dd      	b.n	8008fe4 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8008e2e:	4619      	mov	r1, r3
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 fc3a 	bl	80096aa <USBH_SetCfg>
 8008e36:	4603      	mov	r3, r0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	f040 80d5 	bne.w	8008fe8 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2209      	movs	r2, #9
 8008e42:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008e44:	e0d0      	b.n	8008fe8 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8008e4c:	f003 0320 	and.w	r3, r3, #32
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d016      	beq.n	8008e82 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008e54:	2101      	movs	r1, #1
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 fc4a 	bl	80096f0 <USBH_SetFeature>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008e60:	7bbb      	ldrb	r3, [r7, #14]
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d103      	bne.n	8008e70 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	220a      	movs	r2, #10
 8008e6c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008e6e:	e0bd      	b.n	8008fec <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8008e70:	7bbb      	ldrb	r3, [r7, #14]
 8008e72:	b2db      	uxtb	r3, r3
 8008e74:	2b03      	cmp	r3, #3
 8008e76:	f040 80b9 	bne.w	8008fec <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	220a      	movs	r2, #10
 8008e7e:	701a      	strb	r2, [r3, #0]
      break;
 8008e80:	e0b4      	b.n	8008fec <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	220a      	movs	r2, #10
 8008e86:	701a      	strb	r2, [r3, #0]
      break;
 8008e88:	e0b0      	b.n	8008fec <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	f000 80ad 	beq.w	8008ff0 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	73fb      	strb	r3, [r7, #15]
 8008ea2:	e016      	b.n	8008ed2 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008ea4:	7bfa      	ldrb	r2, [r7, #15]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	32de      	adds	r2, #222	@ 0xde
 8008eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eae:	791a      	ldrb	r2, [r3, #4]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d108      	bne.n	8008ecc <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008eba:	7bfa      	ldrb	r2, [r7, #15]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	32de      	adds	r2, #222	@ 0xde
 8008ec0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8008eca:	e005      	b.n	8008ed8 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008ecc:	7bfb      	ldrb	r3, [r7, #15]
 8008ece:	3301      	adds	r3, #1
 8008ed0:	73fb      	strb	r3, [r7, #15]
 8008ed2:	7bfb      	ldrb	r3, [r7, #15]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d0e5      	beq.n	8008ea4 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d016      	beq.n	8008f10 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008ee8:	689b      	ldr	r3, [r3, #8]
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	4798      	blx	r3
 8008eee:	4603      	mov	r3, r0
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d109      	bne.n	8008f08 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2206      	movs	r2, #6
 8008ef8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008f00:	2103      	movs	r1, #3
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008f06:	e073      	b.n	8008ff0 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	220d      	movs	r2, #13
 8008f0c:	701a      	strb	r2, [r3, #0]
      break;
 8008f0e:	e06f      	b.n	8008ff0 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	220d      	movs	r2, #13
 8008f14:	701a      	strb	r2, [r3, #0]
      break;
 8008f16:	e06b      	b.n	8008ff0 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d017      	beq.n	8008f52 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008f28:	691b      	ldr	r3, [r3, #16]
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	4798      	blx	r3
 8008f2e:	4603      	mov	r3, r0
 8008f30:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008f32:	7bbb      	ldrb	r3, [r7, #14]
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d103      	bne.n	8008f42 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	220b      	movs	r2, #11
 8008f3e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008f40:	e058      	b.n	8008ff4 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8008f42:	7bbb      	ldrb	r3, [r7, #14]
 8008f44:	b2db      	uxtb	r3, r3
 8008f46:	2b02      	cmp	r3, #2
 8008f48:	d154      	bne.n	8008ff4 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	220d      	movs	r2, #13
 8008f4e:	701a      	strb	r2, [r3, #0]
      break;
 8008f50:	e050      	b.n	8008ff4 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	220d      	movs	r2, #13
 8008f56:	701a      	strb	r2, [r3, #0]
      break;
 8008f58:	e04c      	b.n	8008ff4 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d049      	beq.n	8008ff8 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008f6a:	695b      	ldr	r3, [r3, #20]
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	4798      	blx	r3
      }
      break;
 8008f70:	e042      	b.n	8008ff8 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2200      	movs	r2, #0
 8008f76:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f7ff fd4a 	bl	8008a14 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d009      	beq.n	8008f9e <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008f90:	68db      	ldr	r3, [r3, #12]
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d005      	beq.n	8008fb4 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008fae:	2105      	movs	r1, #5
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	d107      	bne.n	8008fd0 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f7ff fe22 	bl	8008c12 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008fce:	e014      	b.n	8008ffa <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f001 fb19 	bl	800a608 <USBH_LL_Start>
      break;
 8008fd6:	e010      	b.n	8008ffa <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008fd8:	bf00      	nop
 8008fda:	e00e      	b.n	8008ffa <USBH_Process+0x3c6>
      break;
 8008fdc:	bf00      	nop
 8008fde:	e00c      	b.n	8008ffa <USBH_Process+0x3c6>
      break;
 8008fe0:	bf00      	nop
 8008fe2:	e00a      	b.n	8008ffa <USBH_Process+0x3c6>
    break;
 8008fe4:	bf00      	nop
 8008fe6:	e008      	b.n	8008ffa <USBH_Process+0x3c6>
      break;
 8008fe8:	bf00      	nop
 8008fea:	e006      	b.n	8008ffa <USBH_Process+0x3c6>
      break;
 8008fec:	bf00      	nop
 8008fee:	e004      	b.n	8008ffa <USBH_Process+0x3c6>
      break;
 8008ff0:	bf00      	nop
 8008ff2:	e002      	b.n	8008ffa <USBH_Process+0x3c6>
      break;
 8008ff4:	bf00      	nop
 8008ff6:	e000      	b.n	8008ffa <USBH_Process+0x3c6>
      break;
 8008ff8:	bf00      	nop
  }
  return USBH_OK;
 8008ffa:	2300      	movs	r3, #0
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3710      	adds	r7, #16
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b088      	sub	sp, #32
 8009008:	af04      	add	r7, sp, #16
 800900a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800900c:	2301      	movs	r3, #1
 800900e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009010:	2301      	movs	r3, #1
 8009012:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	785b      	ldrb	r3, [r3, #1]
 8009018:	2b07      	cmp	r3, #7
 800901a:	f200 81bd 	bhi.w	8009398 <USBH_HandleEnum+0x394>
 800901e:	a201      	add	r2, pc, #4	@ (adr r2, 8009024 <USBH_HandleEnum+0x20>)
 8009020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009024:	08009045 	.word	0x08009045
 8009028:	080090ff 	.word	0x080090ff
 800902c:	08009169 	.word	0x08009169
 8009030:	080091f3 	.word	0x080091f3
 8009034:	0800925d 	.word	0x0800925d
 8009038:	080092cd 	.word	0x080092cd
 800903c:	08009313 	.word	0x08009313
 8009040:	08009359 	.word	0x08009359
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009044:	2108      	movs	r1, #8
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 fa4c 	bl	80094e4 <USBH_Get_DevDesc>
 800904c:	4603      	mov	r3, r0
 800904e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009050:	7bbb      	ldrb	r3, [r7, #14]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d12e      	bne.n	80090b4 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2201      	movs	r2, #1
 8009064:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	7919      	ldrb	r1, [r3, #4]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800907a:	9202      	str	r2, [sp, #8]
 800907c:	2200      	movs	r2, #0
 800907e:	9201      	str	r2, [sp, #4]
 8009080:	9300      	str	r3, [sp, #0]
 8009082:	4603      	mov	r3, r0
 8009084:	2280      	movs	r2, #128	@ 0x80
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f001 f8dc 	bl	800a244 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	7959      	ldrb	r1, [r3, #5]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80090a0:	9202      	str	r2, [sp, #8]
 80090a2:	2200      	movs	r2, #0
 80090a4:	9201      	str	r2, [sp, #4]
 80090a6:	9300      	str	r3, [sp, #0]
 80090a8:	4603      	mov	r3, r0
 80090aa:	2200      	movs	r2, #0
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f001 f8c9 	bl	800a244 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80090b2:	e173      	b.n	800939c <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80090b4:	7bbb      	ldrb	r3, [r7, #14]
 80090b6:	2b03      	cmp	r3, #3
 80090b8:	f040 8170 	bne.w	800939c <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80090c2:	3301      	adds	r3, #1
 80090c4:	b2da      	uxtb	r2, r3
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80090d2:	2b03      	cmp	r3, #3
 80090d4:	d903      	bls.n	80090de <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	220d      	movs	r2, #13
 80090da:	701a      	strb	r2, [r3, #0]
      break;
 80090dc:	e15e      	b.n	800939c <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	795b      	ldrb	r3, [r3, #5]
 80090e2:	4619      	mov	r1, r3
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f001 f8fd 	bl	800a2e4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	791b      	ldrb	r3, [r3, #4]
 80090ee:	4619      	mov	r1, r3
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f001 f8f7 	bl	800a2e4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2200      	movs	r2, #0
 80090fa:	701a      	strb	r2, [r3, #0]
      break;
 80090fc:	e14e      	b.n	800939c <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80090fe:	2112      	movs	r1, #18
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 f9ef 	bl	80094e4 <USBH_Get_DevDesc>
 8009106:	4603      	mov	r3, r0
 8009108:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800910a:	7bbb      	ldrb	r3, [r7, #14]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d103      	bne.n	8009118 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2202      	movs	r2, #2
 8009114:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009116:	e143      	b.n	80093a0 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009118:	7bbb      	ldrb	r3, [r7, #14]
 800911a:	2b03      	cmp	r3, #3
 800911c:	f040 8140 	bne.w	80093a0 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009126:	3301      	adds	r3, #1
 8009128:	b2da      	uxtb	r2, r3
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009136:	2b03      	cmp	r3, #3
 8009138:	d903      	bls.n	8009142 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	220d      	movs	r2, #13
 800913e:	701a      	strb	r2, [r3, #0]
      break;
 8009140:	e12e      	b.n	80093a0 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	795b      	ldrb	r3, [r3, #5]
 8009146:	4619      	mov	r1, r3
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f001 f8cb 	bl	800a2e4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	791b      	ldrb	r3, [r3, #4]
 8009152:	4619      	mov	r1, r3
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f001 f8c5 	bl	800a2e4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2200      	movs	r2, #0
 800915e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	701a      	strb	r2, [r3, #0]
      break;
 8009166:	e11b      	b.n	80093a0 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009168:	2101      	movs	r1, #1
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f000 fa79 	bl	8009662 <USBH_SetAddress>
 8009170:	4603      	mov	r3, r0
 8009172:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009174:	7bbb      	ldrb	r3, [r7, #14]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d130      	bne.n	80091dc <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800917a:	2002      	movs	r0, #2
 800917c:	f001 fbab 	bl	800a8d6 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2201      	movs	r2, #1
 8009184:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2203      	movs	r2, #3
 800918c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	7919      	ldrb	r1, [r3, #4]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80091a2:	9202      	str	r2, [sp, #8]
 80091a4:	2200      	movs	r2, #0
 80091a6:	9201      	str	r2, [sp, #4]
 80091a8:	9300      	str	r3, [sp, #0]
 80091aa:	4603      	mov	r3, r0
 80091ac:	2280      	movs	r2, #128	@ 0x80
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f001 f848 	bl	800a244 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	7959      	ldrb	r1, [r3, #5]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80091c8:	9202      	str	r2, [sp, #8]
 80091ca:	2200      	movs	r2, #0
 80091cc:	9201      	str	r2, [sp, #4]
 80091ce:	9300      	str	r3, [sp, #0]
 80091d0:	4603      	mov	r3, r0
 80091d2:	2200      	movs	r2, #0
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f001 f835 	bl	800a244 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80091da:	e0e3      	b.n	80093a4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80091dc:	7bbb      	ldrb	r3, [r7, #14]
 80091de:	2b03      	cmp	r3, #3
 80091e0:	f040 80e0 	bne.w	80093a4 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	220d      	movs	r2, #13
 80091e8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	705a      	strb	r2, [r3, #1]
      break;
 80091f0:	e0d8      	b.n	80093a4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80091f2:	2109      	movs	r1, #9
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 f9a1 	bl	800953c <USBH_Get_CfgDesc>
 80091fa:	4603      	mov	r3, r0
 80091fc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80091fe:	7bbb      	ldrb	r3, [r7, #14]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d103      	bne.n	800920c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2204      	movs	r2, #4
 8009208:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800920a:	e0cd      	b.n	80093a8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800920c:	7bbb      	ldrb	r3, [r7, #14]
 800920e:	2b03      	cmp	r3, #3
 8009210:	f040 80ca 	bne.w	80093a8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800921a:	3301      	adds	r3, #1
 800921c:	b2da      	uxtb	r2, r3
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800922a:	2b03      	cmp	r3, #3
 800922c:	d903      	bls.n	8009236 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	220d      	movs	r2, #13
 8009232:	701a      	strb	r2, [r3, #0]
      break;
 8009234:	e0b8      	b.n	80093a8 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	795b      	ldrb	r3, [r3, #5]
 800923a:	4619      	mov	r1, r3
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f001 f851 	bl	800a2e4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	791b      	ldrb	r3, [r3, #4]
 8009246:	4619      	mov	r1, r3
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f001 f84b 	bl	800a2e4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2200      	movs	r2, #0
 8009252:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2200      	movs	r2, #0
 8009258:	701a      	strb	r2, [r3, #0]
      break;
 800925a:	e0a5      	b.n	80093a8 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8009262:	4619      	mov	r1, r3
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f000 f969 	bl	800953c <USBH_Get_CfgDesc>
 800926a:	4603      	mov	r3, r0
 800926c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800926e:	7bbb      	ldrb	r3, [r7, #14]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d103      	bne.n	800927c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2205      	movs	r2, #5
 8009278:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800927a:	e097      	b.n	80093ac <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800927c:	7bbb      	ldrb	r3, [r7, #14]
 800927e:	2b03      	cmp	r3, #3
 8009280:	f040 8094 	bne.w	80093ac <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800928a:	3301      	adds	r3, #1
 800928c:	b2da      	uxtb	r2, r3
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800929a:	2b03      	cmp	r3, #3
 800929c:	d903      	bls.n	80092a6 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	220d      	movs	r2, #13
 80092a2:	701a      	strb	r2, [r3, #0]
      break;
 80092a4:	e082      	b.n	80093ac <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	795b      	ldrb	r3, [r3, #5]
 80092aa:	4619      	mov	r1, r3
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f001 f819 	bl	800a2e4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	791b      	ldrb	r3, [r3, #4]
 80092b6:	4619      	mov	r1, r3
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f001 f813 	bl	800a2e4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2200      	movs	r2, #0
 80092c2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2200      	movs	r2, #0
 80092c8:	701a      	strb	r2, [r3, #0]
      break;
 80092ca:	e06f      	b.n	80093ac <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d019      	beq.n	800930a <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80092e2:	23ff      	movs	r3, #255	@ 0xff
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 f953 	bl	8009590 <USBH_Get_StringDesc>
 80092ea:	4603      	mov	r3, r0
 80092ec:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80092ee:	7bbb      	ldrb	r3, [r7, #14]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d103      	bne.n	80092fc <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2206      	movs	r2, #6
 80092f8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80092fa:	e059      	b.n	80093b0 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80092fc:	7bbb      	ldrb	r3, [r7, #14]
 80092fe:	2b03      	cmp	r3, #3
 8009300:	d156      	bne.n	80093b0 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2206      	movs	r2, #6
 8009306:	705a      	strb	r2, [r3, #1]
      break;
 8009308:	e052      	b.n	80093b0 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2206      	movs	r2, #6
 800930e:	705a      	strb	r2, [r3, #1]
      break;
 8009310:	e04e      	b.n	80093b0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8009318:	2b00      	cmp	r3, #0
 800931a:	d019      	beq.n	8009350 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009328:	23ff      	movs	r3, #255	@ 0xff
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 f930 	bl	8009590 <USBH_Get_StringDesc>
 8009330:	4603      	mov	r3, r0
 8009332:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009334:	7bbb      	ldrb	r3, [r7, #14]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d103      	bne.n	8009342 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2207      	movs	r2, #7
 800933e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009340:	e038      	b.n	80093b4 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009342:	7bbb      	ldrb	r3, [r7, #14]
 8009344:	2b03      	cmp	r3, #3
 8009346:	d135      	bne.n	80093b4 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2207      	movs	r2, #7
 800934c:	705a      	strb	r2, [r3, #1]
      break;
 800934e:	e031      	b.n	80093b4 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2207      	movs	r2, #7
 8009354:	705a      	strb	r2, [r3, #1]
      break;
 8009356:	e02d      	b.n	80093b4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800935e:	2b00      	cmp	r3, #0
 8009360:	d017      	beq.n	8009392 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800936e:	23ff      	movs	r3, #255	@ 0xff
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 f90d 	bl	8009590 <USBH_Get_StringDesc>
 8009376:	4603      	mov	r3, r0
 8009378:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800937a:	7bbb      	ldrb	r3, [r7, #14]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d102      	bne.n	8009386 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009380:	2300      	movs	r3, #0
 8009382:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009384:	e018      	b.n	80093b8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009386:	7bbb      	ldrb	r3, [r7, #14]
 8009388:	2b03      	cmp	r3, #3
 800938a:	d115      	bne.n	80093b8 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800938c:	2300      	movs	r3, #0
 800938e:	73fb      	strb	r3, [r7, #15]
      break;
 8009390:	e012      	b.n	80093b8 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8009392:	2300      	movs	r3, #0
 8009394:	73fb      	strb	r3, [r7, #15]
      break;
 8009396:	e00f      	b.n	80093b8 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8009398:	bf00      	nop
 800939a:	e00e      	b.n	80093ba <USBH_HandleEnum+0x3b6>
      break;
 800939c:	bf00      	nop
 800939e:	e00c      	b.n	80093ba <USBH_HandleEnum+0x3b6>
      break;
 80093a0:	bf00      	nop
 80093a2:	e00a      	b.n	80093ba <USBH_HandleEnum+0x3b6>
      break;
 80093a4:	bf00      	nop
 80093a6:	e008      	b.n	80093ba <USBH_HandleEnum+0x3b6>
      break;
 80093a8:	bf00      	nop
 80093aa:	e006      	b.n	80093ba <USBH_HandleEnum+0x3b6>
      break;
 80093ac:	bf00      	nop
 80093ae:	e004      	b.n	80093ba <USBH_HandleEnum+0x3b6>
      break;
 80093b0:	bf00      	nop
 80093b2:	e002      	b.n	80093ba <USBH_HandleEnum+0x3b6>
      break;
 80093b4:	bf00      	nop
 80093b6:	e000      	b.n	80093ba <USBH_HandleEnum+0x3b6>
      break;
 80093b8:	bf00      	nop
  }
  return Status;
 80093ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3710      	adds	r7, #16
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b083      	sub	sp, #12
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	683a      	ldr	r2, [r7, #0]
 80093d2:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80093d6:	bf00      	nop
 80093d8:	370c      	adds	r7, #12
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr

080093e2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80093e2:	b580      	push	{r7, lr}
 80093e4:	b082      	sub	sp, #8
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80093f0:	1c5a      	adds	r2, r3, #1
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 f804 	bl	8009406 <USBH_HandleSof>
}
 80093fe:	bf00      	nop
 8009400:	3708      	adds	r7, #8
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}

08009406 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009406:	b580      	push	{r7, lr}
 8009408:	b082      	sub	sp, #8
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	781b      	ldrb	r3, [r3, #0]
 8009412:	b2db      	uxtb	r3, r3
 8009414:	2b0b      	cmp	r3, #11
 8009416:	d10a      	bne.n	800942e <USBH_HandleSof+0x28>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800941e:	2b00      	cmp	r3, #0
 8009420:	d005      	beq.n	800942e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009428:	699b      	ldr	r3, [r3, #24]
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	4798      	blx	r3
  }
}
 800942e:	bf00      	nop
 8009430:	3708      	adds	r7, #8
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009436:	b480      	push	{r7}
 8009438:	b083      	sub	sp, #12
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2201      	movs	r2, #1
 8009442:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009446:	bf00      	nop
}
 8009448:	370c      	adds	r7, #12
 800944a:	46bd      	mov	sp, r7
 800944c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009450:	4770      	bx	lr

08009452 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009452:	b480      	push	{r7}
 8009454:	b083      	sub	sp, #12
 8009456:	af00      	add	r7, sp, #0
 8009458:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2200      	movs	r2, #0
 800945e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8009462:	bf00      	nop
}
 8009464:	370c      	adds	r7, #12
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr

0800946e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800946e:	b480      	push	{r7}
 8009470:	b083      	sub	sp, #12
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2201      	movs	r2, #1
 800947a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2200      	movs	r2, #0
 8009482:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2200      	movs	r2, #0
 800948a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800948e:	2300      	movs	r3, #0
}
 8009490:	4618      	mov	r0, r3
 8009492:	370c      	adds	r7, #12
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr

0800949c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b082      	sub	sp, #8
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2201      	movs	r2, #1
 80094a8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2200      	movs	r2, #0
 80094b0:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2200      	movs	r2, #0
 80094b8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f001 f8be 	bl	800a63e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	791b      	ldrb	r3, [r3, #4]
 80094c6:	4619      	mov	r1, r3
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f000 ff0b 	bl	800a2e4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	795b      	ldrb	r3, [r3, #5]
 80094d2:	4619      	mov	r1, r3
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 ff05 	bl	800a2e4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80094da:	2300      	movs	r3, #0
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3708      	adds	r7, #8
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}

080094e4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b086      	sub	sp, #24
 80094e8:	af02      	add	r7, sp, #8
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	460b      	mov	r3, r1
 80094ee:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80094f0:	887b      	ldrh	r3, [r7, #2]
 80094f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094f6:	d901      	bls.n	80094fc <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80094f8:	2303      	movs	r3, #3
 80094fa:	e01b      	b.n	8009534 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009502:	887b      	ldrh	r3, [r7, #2]
 8009504:	9300      	str	r3, [sp, #0]
 8009506:	4613      	mov	r3, r2
 8009508:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800950c:	2100      	movs	r1, #0
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 f872 	bl	80095f8 <USBH_GetDescriptor>
 8009514:	4603      	mov	r3, r0
 8009516:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8009518:	7bfb      	ldrb	r3, [r7, #15]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d109      	bne.n	8009532 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009524:	887a      	ldrh	r2, [r7, #2]
 8009526:	4619      	mov	r1, r3
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 f929 	bl	8009780 <USBH_ParseDevDesc>
 800952e:	4603      	mov	r3, r0
 8009530:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009532:	7bfb      	ldrb	r3, [r7, #15]
}
 8009534:	4618      	mov	r0, r3
 8009536:	3710      	adds	r7, #16
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b086      	sub	sp, #24
 8009540:	af02      	add	r7, sp, #8
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	460b      	mov	r3, r1
 8009546:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	331c      	adds	r3, #28
 800954c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800954e:	887b      	ldrh	r3, [r7, #2]
 8009550:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009554:	d901      	bls.n	800955a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009556:	2303      	movs	r3, #3
 8009558:	e016      	b.n	8009588 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800955a:	887b      	ldrh	r3, [r7, #2]
 800955c:	9300      	str	r3, [sp, #0]
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009564:	2100      	movs	r1, #0
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 f846 	bl	80095f8 <USBH_GetDescriptor>
 800956c:	4603      	mov	r3, r0
 800956e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009570:	7bfb      	ldrb	r3, [r7, #15]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d107      	bne.n	8009586 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009576:	887b      	ldrh	r3, [r7, #2]
 8009578:	461a      	mov	r2, r3
 800957a:	68b9      	ldr	r1, [r7, #8]
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 f9af 	bl	80098e0 <USBH_ParseCfgDesc>
 8009582:	4603      	mov	r3, r0
 8009584:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009586:	7bfb      	ldrb	r3, [r7, #15]
}
 8009588:	4618      	mov	r0, r3
 800958a:	3710      	adds	r7, #16
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b088      	sub	sp, #32
 8009594:	af02      	add	r7, sp, #8
 8009596:	60f8      	str	r0, [r7, #12]
 8009598:	607a      	str	r2, [r7, #4]
 800959a:	461a      	mov	r2, r3
 800959c:	460b      	mov	r3, r1
 800959e:	72fb      	strb	r3, [r7, #11]
 80095a0:	4613      	mov	r3, r2
 80095a2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80095a4:	893b      	ldrh	r3, [r7, #8]
 80095a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095aa:	d802      	bhi.n	80095b2 <USBH_Get_StringDesc+0x22>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d101      	bne.n	80095b6 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80095b2:	2303      	movs	r3, #3
 80095b4:	e01c      	b.n	80095f0 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80095b6:	7afb      	ldrb	r3, [r7, #11]
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80095be:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80095c6:	893b      	ldrh	r3, [r7, #8]
 80095c8:	9300      	str	r3, [sp, #0]
 80095ca:	460b      	mov	r3, r1
 80095cc:	2100      	movs	r1, #0
 80095ce:	68f8      	ldr	r0, [r7, #12]
 80095d0:	f000 f812 	bl	80095f8 <USBH_GetDescriptor>
 80095d4:	4603      	mov	r3, r0
 80095d6:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80095d8:	7dfb      	ldrb	r3, [r7, #23]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d107      	bne.n	80095ee <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80095e4:	893a      	ldrh	r2, [r7, #8]
 80095e6:	6879      	ldr	r1, [r7, #4]
 80095e8:	4618      	mov	r0, r3
 80095ea:	f000 fb8d 	bl	8009d08 <USBH_ParseStringDesc>
  }

  return status;
 80095ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3718      	adds	r7, #24
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	607b      	str	r3, [r7, #4]
 8009602:	460b      	mov	r3, r1
 8009604:	72fb      	strb	r3, [r7, #11]
 8009606:	4613      	mov	r3, r2
 8009608:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	789b      	ldrb	r3, [r3, #2]
 800960e:	2b01      	cmp	r3, #1
 8009610:	d11c      	bne.n	800964c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009612:	7afb      	ldrb	r3, [r7, #11]
 8009614:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009618:	b2da      	uxtb	r2, r3
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2206      	movs	r2, #6
 8009622:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	893a      	ldrh	r2, [r7, #8]
 8009628:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800962a:	893b      	ldrh	r3, [r7, #8]
 800962c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009630:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009634:	d104      	bne.n	8009640 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	f240 4209 	movw	r2, #1033	@ 0x409
 800963c:	829a      	strh	r2, [r3, #20]
 800963e:	e002      	b.n	8009646 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2200      	movs	r2, #0
 8009644:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	8b3a      	ldrh	r2, [r7, #24]
 800964a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800964c:	8b3b      	ldrh	r3, [r7, #24]
 800964e:	461a      	mov	r2, r3
 8009650:	6879      	ldr	r1, [r7, #4]
 8009652:	68f8      	ldr	r0, [r7, #12]
 8009654:	f000 fba5 	bl	8009da2 <USBH_CtlReq>
 8009658:	4603      	mov	r3, r0
}
 800965a:	4618      	mov	r0, r3
 800965c:	3710      	adds	r7, #16
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}

08009662 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009662:	b580      	push	{r7, lr}
 8009664:	b082      	sub	sp, #8
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
 800966a:	460b      	mov	r3, r1
 800966c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	789b      	ldrb	r3, [r3, #2]
 8009672:	2b01      	cmp	r3, #1
 8009674:	d10f      	bne.n	8009696 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2200      	movs	r2, #0
 800967a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2205      	movs	r2, #5
 8009680:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009682:	78fb      	ldrb	r3, [r7, #3]
 8009684:	b29a      	uxth	r2, r3
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2200      	movs	r2, #0
 800968e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009696:	2200      	movs	r2, #0
 8009698:	2100      	movs	r1, #0
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 fb81 	bl	8009da2 <USBH_CtlReq>
 80096a0:	4603      	mov	r3, r0
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3708      	adds	r7, #8
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}

080096aa <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b082      	sub	sp, #8
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
 80096b2:	460b      	mov	r3, r1
 80096b4:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	789b      	ldrb	r3, [r3, #2]
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d10e      	bne.n	80096dc <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2200      	movs	r2, #0
 80096c2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2209      	movs	r2, #9
 80096c8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	887a      	ldrh	r2, [r7, #2]
 80096ce:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2200      	movs	r2, #0
 80096da:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80096dc:	2200      	movs	r2, #0
 80096de:	2100      	movs	r1, #0
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f000 fb5e 	bl	8009da2 <USBH_CtlReq>
 80096e6:	4603      	mov	r3, r0
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3708      	adds	r7, #8
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b082      	sub	sp, #8
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	460b      	mov	r3, r1
 80096fa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	789b      	ldrb	r3, [r3, #2]
 8009700:	2b01      	cmp	r3, #1
 8009702:	d10f      	bne.n	8009724 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2200      	movs	r2, #0
 8009708:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2203      	movs	r2, #3
 800970e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009710:	78fb      	ldrb	r3, [r7, #3]
 8009712:	b29a      	uxth	r2, r3
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2200      	movs	r2, #0
 800971c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2200      	movs	r2, #0
 8009722:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009724:	2200      	movs	r2, #0
 8009726:	2100      	movs	r1, #0
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 fb3a 	bl	8009da2 <USBH_CtlReq>
 800972e:	4603      	mov	r3, r0
}
 8009730:	4618      	mov	r0, r3
 8009732:	3708      	adds	r7, #8
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	460b      	mov	r3, r1
 8009742:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	789b      	ldrb	r3, [r3, #2]
 8009748:	2b01      	cmp	r3, #1
 800974a:	d10f      	bne.n	800976c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2202      	movs	r2, #2
 8009750:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2201      	movs	r2, #1
 8009756:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2200      	movs	r2, #0
 800975c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800975e:	78fb      	ldrb	r3, [r7, #3]
 8009760:	b29a      	uxth	r2, r3
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2200      	movs	r2, #0
 800976a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800976c:	2200      	movs	r2, #0
 800976e:	2100      	movs	r1, #0
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 fb16 	bl	8009da2 <USBH_CtlReq>
 8009776:	4603      	mov	r3, r0
}
 8009778:	4618      	mov	r0, r3
 800977a:	3708      	adds	r7, #8
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009780:	b480      	push	{r7}
 8009782:	b087      	sub	sp, #28
 8009784:	af00      	add	r7, sp, #0
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	60b9      	str	r1, [r7, #8]
 800978a:	4613      	mov	r3, r2
 800978c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009794:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8009796:	2300      	movs	r3, #0
 8009798:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d101      	bne.n	80097a4 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80097a0:	2302      	movs	r3, #2
 80097a2:	e094      	b.n	80098ce <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	781a      	ldrb	r2, [r3, #0]
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	785a      	ldrb	r2, [r3, #1]
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	3302      	adds	r3, #2
 80097b8:	781b      	ldrb	r3, [r3, #0]
 80097ba:	461a      	mov	r2, r3
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	3303      	adds	r3, #3
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	021b      	lsls	r3, r3, #8
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	4313      	orrs	r3, r2
 80097c8:	b29a      	uxth	r2, r3
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	791a      	ldrb	r2, [r3, #4]
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	795a      	ldrb	r2, [r3, #5]
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	799a      	ldrb	r2, [r3, #6]
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	79da      	ldrb	r2, [r3, #7]
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d004      	beq.n	8009802 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d11b      	bne.n	800983a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	79db      	ldrb	r3, [r3, #7]
 8009806:	2b20      	cmp	r3, #32
 8009808:	dc0f      	bgt.n	800982a <USBH_ParseDevDesc+0xaa>
 800980a:	2b08      	cmp	r3, #8
 800980c:	db0f      	blt.n	800982e <USBH_ParseDevDesc+0xae>
 800980e:	3b08      	subs	r3, #8
 8009810:	4a32      	ldr	r2, [pc, #200]	@ (80098dc <USBH_ParseDevDesc+0x15c>)
 8009812:	fa22 f303 	lsr.w	r3, r2, r3
 8009816:	f003 0301 	and.w	r3, r3, #1
 800981a:	2b00      	cmp	r3, #0
 800981c:	bf14      	ite	ne
 800981e:	2301      	movne	r3, #1
 8009820:	2300      	moveq	r3, #0
 8009822:	b2db      	uxtb	r3, r3
 8009824:	2b00      	cmp	r3, #0
 8009826:	d106      	bne.n	8009836 <USBH_ParseDevDesc+0xb6>
 8009828:	e001      	b.n	800982e <USBH_ParseDevDesc+0xae>
 800982a:	2b40      	cmp	r3, #64	@ 0x40
 800982c:	d003      	beq.n	8009836 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	2208      	movs	r2, #8
 8009832:	71da      	strb	r2, [r3, #7]
        break;
 8009834:	e000      	b.n	8009838 <USBH_ParseDevDesc+0xb8>
        break;
 8009836:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8009838:	e00e      	b.n	8009858 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009840:	2b02      	cmp	r3, #2
 8009842:	d107      	bne.n	8009854 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	79db      	ldrb	r3, [r3, #7]
 8009848:	2b08      	cmp	r3, #8
 800984a:	d005      	beq.n	8009858 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	2208      	movs	r2, #8
 8009850:	71da      	strb	r2, [r3, #7]
 8009852:	e001      	b.n	8009858 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009854:	2303      	movs	r3, #3
 8009856:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009858:	88fb      	ldrh	r3, [r7, #6]
 800985a:	2b08      	cmp	r3, #8
 800985c:	d936      	bls.n	80098cc <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	3308      	adds	r3, #8
 8009862:	781b      	ldrb	r3, [r3, #0]
 8009864:	461a      	mov	r2, r3
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	3309      	adds	r3, #9
 800986a:	781b      	ldrb	r3, [r3, #0]
 800986c:	021b      	lsls	r3, r3, #8
 800986e:	b29b      	uxth	r3, r3
 8009870:	4313      	orrs	r3, r2
 8009872:	b29a      	uxth	r2, r3
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	330a      	adds	r3, #10
 800987c:	781b      	ldrb	r3, [r3, #0]
 800987e:	461a      	mov	r2, r3
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	330b      	adds	r3, #11
 8009884:	781b      	ldrb	r3, [r3, #0]
 8009886:	021b      	lsls	r3, r3, #8
 8009888:	b29b      	uxth	r3, r3
 800988a:	4313      	orrs	r3, r2
 800988c:	b29a      	uxth	r2, r3
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	330c      	adds	r3, #12
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	461a      	mov	r2, r3
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	330d      	adds	r3, #13
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	021b      	lsls	r3, r3, #8
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	4313      	orrs	r3, r2
 80098a6:	b29a      	uxth	r2, r3
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	7b9a      	ldrb	r2, [r3, #14]
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	7bda      	ldrb	r2, [r3, #15]
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	7c1a      	ldrb	r2, [r3, #16]
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	7c5a      	ldrb	r2, [r3, #17]
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80098cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	371c      	adds	r7, #28
 80098d2:	46bd      	mov	sp, r7
 80098d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d8:	4770      	bx	lr
 80098da:	bf00      	nop
 80098dc:	01000101 	.word	0x01000101

080098e0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b08c      	sub	sp, #48	@ 0x30
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	60f8      	str	r0, [r7, #12]
 80098e8:	60b9      	str	r1, [r7, #8]
 80098ea:	4613      	mov	r3, r2
 80098ec:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80098f4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80098f6:	2300      	movs	r3, #0
 80098f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80098fc:	2300      	movs	r3, #0
 80098fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8009902:	2300      	movs	r3, #0
 8009904:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d101      	bne.n	8009912 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800990e:	2302      	movs	r3, #2
 8009910:	e0da      	b.n	8009ac8 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8009916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	2b09      	cmp	r3, #9
 800991c:	d002      	beq.n	8009924 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800991e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009920:	2209      	movs	r2, #9
 8009922:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	781a      	ldrb	r2, [r3, #0]
 8009928:	6a3b      	ldr	r3, [r7, #32]
 800992a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	785a      	ldrb	r2, [r3, #1]
 8009930:	6a3b      	ldr	r3, [r7, #32]
 8009932:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	3302      	adds	r3, #2
 8009938:	781b      	ldrb	r3, [r3, #0]
 800993a:	461a      	mov	r2, r3
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	3303      	adds	r3, #3
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	021b      	lsls	r3, r3, #8
 8009944:	b29b      	uxth	r3, r3
 8009946:	4313      	orrs	r3, r2
 8009948:	b29b      	uxth	r3, r3
 800994a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800994e:	bf28      	it	cs
 8009950:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8009954:	b29a      	uxth	r2, r3
 8009956:	6a3b      	ldr	r3, [r7, #32]
 8009958:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	791a      	ldrb	r2, [r3, #4]
 800995e:	6a3b      	ldr	r3, [r7, #32]
 8009960:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	795a      	ldrb	r2, [r3, #5]
 8009966:	6a3b      	ldr	r3, [r7, #32]
 8009968:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	799a      	ldrb	r2, [r3, #6]
 800996e:	6a3b      	ldr	r3, [r7, #32]
 8009970:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	79da      	ldrb	r2, [r3, #7]
 8009976:	6a3b      	ldr	r3, [r7, #32]
 8009978:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	7a1a      	ldrb	r2, [r3, #8]
 800997e:	6a3b      	ldr	r3, [r7, #32]
 8009980:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009982:	88fb      	ldrh	r3, [r7, #6]
 8009984:	2b09      	cmp	r3, #9
 8009986:	f240 809d 	bls.w	8009ac4 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800998a:	2309      	movs	r3, #9
 800998c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800998e:	2300      	movs	r3, #0
 8009990:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009992:	e081      	b.n	8009a98 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009994:	f107 0316 	add.w	r3, r7, #22
 8009998:	4619      	mov	r1, r3
 800999a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800999c:	f000 f9e7 	bl	8009d6e <USBH_GetNextDesc>
 80099a0:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80099a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099a4:	785b      	ldrb	r3, [r3, #1]
 80099a6:	2b04      	cmp	r3, #4
 80099a8:	d176      	bne.n	8009a98 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80099aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ac:	781b      	ldrb	r3, [r3, #0]
 80099ae:	2b09      	cmp	r3, #9
 80099b0:	d002      	beq.n	80099b8 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80099b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099b4:	2209      	movs	r2, #9
 80099b6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80099b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80099bc:	221a      	movs	r2, #26
 80099be:	fb02 f303 	mul.w	r3, r2, r3
 80099c2:	3308      	adds	r3, #8
 80099c4:	6a3a      	ldr	r2, [r7, #32]
 80099c6:	4413      	add	r3, r2
 80099c8:	3302      	adds	r3, #2
 80099ca:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80099cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80099ce:	69f8      	ldr	r0, [r7, #28]
 80099d0:	f000 f87e 	bl	8009ad0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80099d4:	2300      	movs	r3, #0
 80099d6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80099da:	2300      	movs	r3, #0
 80099dc:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80099de:	e043      	b.n	8009a68 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80099e0:	f107 0316 	add.w	r3, r7, #22
 80099e4:	4619      	mov	r1, r3
 80099e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80099e8:	f000 f9c1 	bl	8009d6e <USBH_GetNextDesc>
 80099ec:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80099ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099f0:	785b      	ldrb	r3, [r3, #1]
 80099f2:	2b05      	cmp	r3, #5
 80099f4:	d138      	bne.n	8009a68 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80099f6:	69fb      	ldr	r3, [r7, #28]
 80099f8:	795b      	ldrb	r3, [r3, #5]
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d113      	bne.n	8009a26 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80099fe:	69fb      	ldr	r3, [r7, #28]
 8009a00:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8009a02:	2b02      	cmp	r3, #2
 8009a04:	d003      	beq.n	8009a0e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009a06:	69fb      	ldr	r3, [r7, #28]
 8009a08:	799b      	ldrb	r3, [r3, #6]
 8009a0a:	2b03      	cmp	r3, #3
 8009a0c:	d10b      	bne.n	8009a26 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009a0e:	69fb      	ldr	r3, [r7, #28]
 8009a10:	79db      	ldrb	r3, [r3, #7]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d10b      	bne.n	8009a2e <USBH_ParseCfgDesc+0x14e>
 8009a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a18:	781b      	ldrb	r3, [r3, #0]
 8009a1a:	2b09      	cmp	r3, #9
 8009a1c:	d007      	beq.n	8009a2e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8009a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a20:	2209      	movs	r2, #9
 8009a22:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009a24:	e003      	b.n	8009a2e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a28:	2207      	movs	r2, #7
 8009a2a:	701a      	strb	r2, [r3, #0]
 8009a2c:	e000      	b.n	8009a30 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009a2e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009a30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a34:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009a38:	3201      	adds	r2, #1
 8009a3a:	00d2      	lsls	r2, r2, #3
 8009a3c:	211a      	movs	r1, #26
 8009a3e:	fb01 f303 	mul.w	r3, r1, r3
 8009a42:	4413      	add	r3, r2
 8009a44:	3308      	adds	r3, #8
 8009a46:	6a3a      	ldr	r2, [r7, #32]
 8009a48:	4413      	add	r3, r2
 8009a4a:	3304      	adds	r3, #4
 8009a4c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009a4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009a50:	69b9      	ldr	r1, [r7, #24]
 8009a52:	68f8      	ldr	r0, [r7, #12]
 8009a54:	f000 f870 	bl	8009b38 <USBH_ParseEPDesc>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8009a5e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009a62:	3301      	adds	r3, #1
 8009a64:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009a68:	69fb      	ldr	r3, [r7, #28]
 8009a6a:	791b      	ldrb	r3, [r3, #4]
 8009a6c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d204      	bcs.n	8009a7e <USBH_ParseCfgDesc+0x19e>
 8009a74:	6a3b      	ldr	r3, [r7, #32]
 8009a76:	885a      	ldrh	r2, [r3, #2]
 8009a78:	8afb      	ldrh	r3, [r7, #22]
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d8b0      	bhi.n	80099e0 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009a7e:	69fb      	ldr	r3, [r7, #28]
 8009a80:	791b      	ldrb	r3, [r3, #4]
 8009a82:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d201      	bcs.n	8009a8e <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8009a8a:	2303      	movs	r3, #3
 8009a8c:	e01c      	b.n	8009ac8 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8009a8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a92:	3301      	adds	r3, #1
 8009a94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009a98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	d805      	bhi.n	8009aac <USBH_ParseCfgDesc+0x1cc>
 8009aa0:	6a3b      	ldr	r3, [r7, #32]
 8009aa2:	885a      	ldrh	r2, [r3, #2]
 8009aa4:	8afb      	ldrh	r3, [r7, #22]
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	f63f af74 	bhi.w	8009994 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009aac:	6a3b      	ldr	r3, [r7, #32]
 8009aae:	791b      	ldrb	r3, [r3, #4]
 8009ab0:	2b02      	cmp	r3, #2
 8009ab2:	bf28      	it	cs
 8009ab4:	2302      	movcs	r3, #2
 8009ab6:	b2db      	uxtb	r3, r3
 8009ab8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d201      	bcs.n	8009ac4 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8009ac0:	2303      	movs	r3, #3
 8009ac2:	e001      	b.n	8009ac8 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8009ac4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3730      	adds	r7, #48	@ 0x30
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b083      	sub	sp, #12
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
 8009ad8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	781a      	ldrb	r2, [r3, #0]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	785a      	ldrb	r2, [r3, #1]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	789a      	ldrb	r2, [r3, #2]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	78da      	ldrb	r2, [r3, #3]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	3304      	adds	r3, #4
 8009afe:	781b      	ldrb	r3, [r3, #0]
 8009b00:	2b02      	cmp	r3, #2
 8009b02:	bf28      	it	cs
 8009b04:	2302      	movcs	r3, #2
 8009b06:	b2da      	uxtb	r2, r3
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	795a      	ldrb	r2, [r3, #5]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	799a      	ldrb	r2, [r3, #6]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	79da      	ldrb	r2, [r3, #7]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	7a1a      	ldrb	r2, [r3, #8]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	721a      	strb	r2, [r3, #8]
}
 8009b2c:	bf00      	nop
 8009b2e:	370c      	adds	r7, #12
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr

08009b38 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b087      	sub	sp, #28
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	60f8      	str	r0, [r7, #12]
 8009b40:	60b9      	str	r1, [r7, #8]
 8009b42:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009b44:	2300      	movs	r3, #0
 8009b46:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	781a      	ldrb	r2, [r3, #0]
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	785a      	ldrb	r2, [r3, #1]
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	789a      	ldrb	r2, [r3, #2]
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	78da      	ldrb	r2, [r3, #3]
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	3304      	adds	r3, #4
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	461a      	mov	r2, r3
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	3305      	adds	r3, #5
 8009b74:	781b      	ldrb	r3, [r3, #0]
 8009b76:	021b      	lsls	r3, r3, #8
 8009b78:	b29b      	uxth	r3, r3
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	b29a      	uxth	r2, r3
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	799a      	ldrb	r2, [r3, #6]
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	889b      	ldrh	r3, [r3, #4]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d009      	beq.n	8009ba6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009b96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b9a:	d804      	bhi.n	8009ba6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009ba0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ba4:	d901      	bls.n	8009baa <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8009ba6:	2303      	movs	r3, #3
 8009ba8:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d136      	bne.n	8009c22 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	78db      	ldrb	r3, [r3, #3]
 8009bb8:	f003 0303 	and.w	r3, r3, #3
 8009bbc:	2b02      	cmp	r3, #2
 8009bbe:	d108      	bne.n	8009bd2 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	889b      	ldrh	r3, [r3, #4]
 8009bc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009bc8:	f240 8097 	bls.w	8009cfa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009bcc:	2303      	movs	r3, #3
 8009bce:	75fb      	strb	r3, [r7, #23]
 8009bd0:	e093      	b.n	8009cfa <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	78db      	ldrb	r3, [r3, #3]
 8009bd6:	f003 0303 	and.w	r3, r3, #3
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d107      	bne.n	8009bee <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	889b      	ldrh	r3, [r3, #4]
 8009be2:	2b40      	cmp	r3, #64	@ 0x40
 8009be4:	f240 8089 	bls.w	8009cfa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009be8:	2303      	movs	r3, #3
 8009bea:	75fb      	strb	r3, [r7, #23]
 8009bec:	e085      	b.n	8009cfa <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	78db      	ldrb	r3, [r3, #3]
 8009bf2:	f003 0303 	and.w	r3, r3, #3
 8009bf6:	2b01      	cmp	r3, #1
 8009bf8:	d005      	beq.n	8009c06 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	78db      	ldrb	r3, [r3, #3]
 8009bfe:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009c02:	2b03      	cmp	r3, #3
 8009c04:	d10a      	bne.n	8009c1c <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	799b      	ldrb	r3, [r3, #6]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d003      	beq.n	8009c16 <USBH_ParseEPDesc+0xde>
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	799b      	ldrb	r3, [r3, #6]
 8009c12:	2b10      	cmp	r3, #16
 8009c14:	d970      	bls.n	8009cf8 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8009c16:	2303      	movs	r3, #3
 8009c18:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009c1a:	e06d      	b.n	8009cf8 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009c1c:	2303      	movs	r3, #3
 8009c1e:	75fb      	strb	r3, [r7, #23]
 8009c20:	e06b      	b.n	8009cfa <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009c28:	2b01      	cmp	r3, #1
 8009c2a:	d13c      	bne.n	8009ca6 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	78db      	ldrb	r3, [r3, #3]
 8009c30:	f003 0303 	and.w	r3, r3, #3
 8009c34:	2b02      	cmp	r3, #2
 8009c36:	d005      	beq.n	8009c44 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	78db      	ldrb	r3, [r3, #3]
 8009c3c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d106      	bne.n	8009c52 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	889b      	ldrh	r3, [r3, #4]
 8009c48:	2b40      	cmp	r3, #64	@ 0x40
 8009c4a:	d956      	bls.n	8009cfa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009c4c:	2303      	movs	r3, #3
 8009c4e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009c50:	e053      	b.n	8009cfa <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	78db      	ldrb	r3, [r3, #3]
 8009c56:	f003 0303 	and.w	r3, r3, #3
 8009c5a:	2b01      	cmp	r3, #1
 8009c5c:	d10e      	bne.n	8009c7c <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	799b      	ldrb	r3, [r3, #6]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d007      	beq.n	8009c76 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009c6a:	2b10      	cmp	r3, #16
 8009c6c:	d803      	bhi.n	8009c76 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8009c72:	2b40      	cmp	r3, #64	@ 0x40
 8009c74:	d941      	bls.n	8009cfa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009c76:	2303      	movs	r3, #3
 8009c78:	75fb      	strb	r3, [r7, #23]
 8009c7a:	e03e      	b.n	8009cfa <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	78db      	ldrb	r3, [r3, #3]
 8009c80:	f003 0303 	and.w	r3, r3, #3
 8009c84:	2b03      	cmp	r3, #3
 8009c86:	d10b      	bne.n	8009ca0 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	799b      	ldrb	r3, [r3, #6]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d004      	beq.n	8009c9a <USBH_ParseEPDesc+0x162>
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	889b      	ldrh	r3, [r3, #4]
 8009c94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c98:	d32f      	bcc.n	8009cfa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009c9a:	2303      	movs	r3, #3
 8009c9c:	75fb      	strb	r3, [r7, #23]
 8009c9e:	e02c      	b.n	8009cfa <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009ca0:	2303      	movs	r3, #3
 8009ca2:	75fb      	strb	r3, [r7, #23]
 8009ca4:	e029      	b.n	8009cfa <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009cac:	2b02      	cmp	r3, #2
 8009cae:	d120      	bne.n	8009cf2 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	78db      	ldrb	r3, [r3, #3]
 8009cb4:	f003 0303 	and.w	r3, r3, #3
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d106      	bne.n	8009cca <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	889b      	ldrh	r3, [r3, #4]
 8009cc0:	2b08      	cmp	r3, #8
 8009cc2:	d01a      	beq.n	8009cfa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009cc4:	2303      	movs	r3, #3
 8009cc6:	75fb      	strb	r3, [r7, #23]
 8009cc8:	e017      	b.n	8009cfa <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	78db      	ldrb	r3, [r3, #3]
 8009cce:	f003 0303 	and.w	r3, r3, #3
 8009cd2:	2b03      	cmp	r3, #3
 8009cd4:	d10a      	bne.n	8009cec <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	799b      	ldrb	r3, [r3, #6]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d003      	beq.n	8009ce6 <USBH_ParseEPDesc+0x1ae>
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	889b      	ldrh	r3, [r3, #4]
 8009ce2:	2b08      	cmp	r3, #8
 8009ce4:	d909      	bls.n	8009cfa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009ce6:	2303      	movs	r3, #3
 8009ce8:	75fb      	strb	r3, [r7, #23]
 8009cea:	e006      	b.n	8009cfa <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009cec:	2303      	movs	r3, #3
 8009cee:	75fb      	strb	r3, [r7, #23]
 8009cf0:	e003      	b.n	8009cfa <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009cf2:	2303      	movs	r3, #3
 8009cf4:	75fb      	strb	r3, [r7, #23]
 8009cf6:	e000      	b.n	8009cfa <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009cf8:	bf00      	nop
  }

  return status;
 8009cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	371c      	adds	r7, #28
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr

08009d08 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b087      	sub	sp, #28
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	60b9      	str	r1, [r7, #8]
 8009d12:	4613      	mov	r3, r2
 8009d14:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	3301      	adds	r3, #1
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	2b03      	cmp	r3, #3
 8009d1e:	d120      	bne.n	8009d62 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	781b      	ldrb	r3, [r3, #0]
 8009d24:	1e9a      	subs	r2, r3, #2
 8009d26:	88fb      	ldrh	r3, [r7, #6]
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	bf28      	it	cs
 8009d2c:	4613      	movcs	r3, r2
 8009d2e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	3302      	adds	r3, #2
 8009d34:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009d36:	2300      	movs	r3, #0
 8009d38:	82fb      	strh	r3, [r7, #22]
 8009d3a:	e00b      	b.n	8009d54 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009d3c:	8afb      	ldrh	r3, [r7, #22]
 8009d3e:	68fa      	ldr	r2, [r7, #12]
 8009d40:	4413      	add	r3, r2
 8009d42:	781a      	ldrb	r2, [r3, #0]
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009d4e:	8afb      	ldrh	r3, [r7, #22]
 8009d50:	3302      	adds	r3, #2
 8009d52:	82fb      	strh	r3, [r7, #22]
 8009d54:	8afa      	ldrh	r2, [r7, #22]
 8009d56:	8abb      	ldrh	r3, [r7, #20]
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d3ef      	bcc.n	8009d3c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	701a      	strb	r2, [r3, #0]
  }
}
 8009d62:	bf00      	nop
 8009d64:	371c      	adds	r7, #28
 8009d66:	46bd      	mov	sp, r7
 8009d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6c:	4770      	bx	lr

08009d6e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009d6e:	b480      	push	{r7}
 8009d70:	b085      	sub	sp, #20
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
 8009d76:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	881b      	ldrh	r3, [r3, #0]
 8009d7c:	687a      	ldr	r2, [r7, #4]
 8009d7e:	7812      	ldrb	r2, [r2, #0]
 8009d80:	4413      	add	r3, r2
 8009d82:	b29a      	uxth	r2, r3
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	4413      	add	r3, r2
 8009d92:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009d94:	68fb      	ldr	r3, [r7, #12]
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3714      	adds	r7, #20
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr

08009da2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009da2:	b580      	push	{r7, lr}
 8009da4:	b086      	sub	sp, #24
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	60f8      	str	r0, [r7, #12]
 8009daa:	60b9      	str	r1, [r7, #8]
 8009dac:	4613      	mov	r3, r2
 8009dae:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009db0:	2301      	movs	r3, #1
 8009db2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	789b      	ldrb	r3, [r3, #2]
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d002      	beq.n	8009dc2 <USBH_CtlReq+0x20>
 8009dbc:	2b02      	cmp	r3, #2
 8009dbe:	d00f      	beq.n	8009de0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009dc0:	e027      	b.n	8009e12 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	68ba      	ldr	r2, [r7, #8]
 8009dc6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	88fa      	ldrh	r2, [r7, #6]
 8009dcc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2202      	movs	r2, #2
 8009dd8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	75fb      	strb	r3, [r7, #23]
      break;
 8009dde:	e018      	b.n	8009e12 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009de0:	68f8      	ldr	r0, [r7, #12]
 8009de2:	f000 f81b 	bl	8009e1c <USBH_HandleControl>
 8009de6:	4603      	mov	r3, r0
 8009de8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009dea:	7dfb      	ldrb	r3, [r7, #23]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d002      	beq.n	8009df6 <USBH_CtlReq+0x54>
 8009df0:	7dfb      	ldrb	r3, [r7, #23]
 8009df2:	2b03      	cmp	r3, #3
 8009df4:	d106      	bne.n	8009e04 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2201      	movs	r2, #1
 8009dfa:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	761a      	strb	r2, [r3, #24]
      break;
 8009e02:	e005      	b.n	8009e10 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009e04:	7dfb      	ldrb	r3, [r7, #23]
 8009e06:	2b02      	cmp	r3, #2
 8009e08:	d102      	bne.n	8009e10 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	709a      	strb	r2, [r3, #2]
      break;
 8009e10:	bf00      	nop
  }
  return status;
 8009e12:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3718      	adds	r7, #24
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}

08009e1c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b086      	sub	sp, #24
 8009e20:	af02      	add	r7, sp, #8
 8009e22:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009e24:	2301      	movs	r3, #1
 8009e26:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	7e1b      	ldrb	r3, [r3, #24]
 8009e30:	3b01      	subs	r3, #1
 8009e32:	2b0a      	cmp	r3, #10
 8009e34:	f200 8156 	bhi.w	800a0e4 <USBH_HandleControl+0x2c8>
 8009e38:	a201      	add	r2, pc, #4	@ (adr r2, 8009e40 <USBH_HandleControl+0x24>)
 8009e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e3e:	bf00      	nop
 8009e40:	08009e6d 	.word	0x08009e6d
 8009e44:	08009e87 	.word	0x08009e87
 8009e48:	08009ef1 	.word	0x08009ef1
 8009e4c:	08009f17 	.word	0x08009f17
 8009e50:	08009f4f 	.word	0x08009f4f
 8009e54:	08009f79 	.word	0x08009f79
 8009e58:	08009fcb 	.word	0x08009fcb
 8009e5c:	08009fed 	.word	0x08009fed
 8009e60:	0800a029 	.word	0x0800a029
 8009e64:	0800a04f 	.word	0x0800a04f
 8009e68:	0800a08d 	.word	0x0800a08d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f103 0110 	add.w	r1, r3, #16
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	795b      	ldrb	r3, [r3, #5]
 8009e76:	461a      	mov	r2, r3
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f000 f943 	bl	800a104 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2202      	movs	r2, #2
 8009e82:	761a      	strb	r2, [r3, #24]
      break;
 8009e84:	e139      	b.n	800a0fa <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	795b      	ldrb	r3, [r3, #5]
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f000 fcc5 	bl	800a81c <USBH_LL_GetURBState>
 8009e92:	4603      	mov	r3, r0
 8009e94:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009e96:	7bbb      	ldrb	r3, [r7, #14]
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d11e      	bne.n	8009eda <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	7c1b      	ldrb	r3, [r3, #16]
 8009ea0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009ea4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	8adb      	ldrh	r3, [r3, #22]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d00a      	beq.n	8009ec4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009eae:	7b7b      	ldrb	r3, [r7, #13]
 8009eb0:	2b80      	cmp	r3, #128	@ 0x80
 8009eb2:	d103      	bne.n	8009ebc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2203      	movs	r2, #3
 8009eb8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009eba:	e115      	b.n	800a0e8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2205      	movs	r2, #5
 8009ec0:	761a      	strb	r2, [r3, #24]
      break;
 8009ec2:	e111      	b.n	800a0e8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009ec4:	7b7b      	ldrb	r3, [r7, #13]
 8009ec6:	2b80      	cmp	r3, #128	@ 0x80
 8009ec8:	d103      	bne.n	8009ed2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2209      	movs	r2, #9
 8009ece:	761a      	strb	r2, [r3, #24]
      break;
 8009ed0:	e10a      	b.n	800a0e8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2207      	movs	r2, #7
 8009ed6:	761a      	strb	r2, [r3, #24]
      break;
 8009ed8:	e106      	b.n	800a0e8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009eda:	7bbb      	ldrb	r3, [r7, #14]
 8009edc:	2b04      	cmp	r3, #4
 8009ede:	d003      	beq.n	8009ee8 <USBH_HandleControl+0xcc>
 8009ee0:	7bbb      	ldrb	r3, [r7, #14]
 8009ee2:	2b02      	cmp	r3, #2
 8009ee4:	f040 8100 	bne.w	800a0e8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	220b      	movs	r2, #11
 8009eec:	761a      	strb	r2, [r3, #24]
      break;
 8009eee:	e0fb      	b.n	800a0e8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009ef6:	b29a      	uxth	r2, r3
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6899      	ldr	r1, [r3, #8]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	899a      	ldrh	r2, [r3, #12]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	791b      	ldrb	r3, [r3, #4]
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f000 f93a 	bl	800a182 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2204      	movs	r2, #4
 8009f12:	761a      	strb	r2, [r3, #24]
      break;
 8009f14:	e0f1      	b.n	800a0fa <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	791b      	ldrb	r3, [r3, #4]
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f000 fc7d 	bl	800a81c <USBH_LL_GetURBState>
 8009f22:	4603      	mov	r3, r0
 8009f24:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009f26:	7bbb      	ldrb	r3, [r7, #14]
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	d102      	bne.n	8009f32 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2209      	movs	r2, #9
 8009f30:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009f32:	7bbb      	ldrb	r3, [r7, #14]
 8009f34:	2b05      	cmp	r3, #5
 8009f36:	d102      	bne.n	8009f3e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009f38:	2303      	movs	r3, #3
 8009f3a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009f3c:	e0d6      	b.n	800a0ec <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009f3e:	7bbb      	ldrb	r3, [r7, #14]
 8009f40:	2b04      	cmp	r3, #4
 8009f42:	f040 80d3 	bne.w	800a0ec <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	220b      	movs	r2, #11
 8009f4a:	761a      	strb	r2, [r3, #24]
      break;
 8009f4c:	e0ce      	b.n	800a0ec <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6899      	ldr	r1, [r3, #8]
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	899a      	ldrh	r2, [r3, #12]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	795b      	ldrb	r3, [r3, #5]
 8009f5a:	2001      	movs	r0, #1
 8009f5c:	9000      	str	r0, [sp, #0]
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f000 f8ea 	bl	800a138 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009f6a:	b29a      	uxth	r2, r3
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2206      	movs	r2, #6
 8009f74:	761a      	strb	r2, [r3, #24]
      break;
 8009f76:	e0c0      	b.n	800a0fa <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	795b      	ldrb	r3, [r3, #5]
 8009f7c:	4619      	mov	r1, r3
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f000 fc4c 	bl	800a81c <USBH_LL_GetURBState>
 8009f84:	4603      	mov	r3, r0
 8009f86:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009f88:	7bbb      	ldrb	r3, [r7, #14]
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	d103      	bne.n	8009f96 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2207      	movs	r2, #7
 8009f92:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009f94:	e0ac      	b.n	800a0f0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009f96:	7bbb      	ldrb	r3, [r7, #14]
 8009f98:	2b05      	cmp	r3, #5
 8009f9a:	d105      	bne.n	8009fa8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	220c      	movs	r2, #12
 8009fa0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009fa2:	2303      	movs	r3, #3
 8009fa4:	73fb      	strb	r3, [r7, #15]
      break;
 8009fa6:	e0a3      	b.n	800a0f0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009fa8:	7bbb      	ldrb	r3, [r7, #14]
 8009faa:	2b02      	cmp	r3, #2
 8009fac:	d103      	bne.n	8009fb6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2205      	movs	r2, #5
 8009fb2:	761a      	strb	r2, [r3, #24]
      break;
 8009fb4:	e09c      	b.n	800a0f0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009fb6:	7bbb      	ldrb	r3, [r7, #14]
 8009fb8:	2b04      	cmp	r3, #4
 8009fba:	f040 8099 	bne.w	800a0f0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	220b      	movs	r2, #11
 8009fc2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009fc4:	2302      	movs	r3, #2
 8009fc6:	73fb      	strb	r3, [r7, #15]
      break;
 8009fc8:	e092      	b.n	800a0f0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	791b      	ldrb	r3, [r3, #4]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	2100      	movs	r1, #0
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f000 f8d5 	bl	800a182 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009fde:	b29a      	uxth	r2, r3
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2208      	movs	r2, #8
 8009fe8:	761a      	strb	r2, [r3, #24]

      break;
 8009fea:	e086      	b.n	800a0fa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	791b      	ldrb	r3, [r3, #4]
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f000 fc12 	bl	800a81c <USBH_LL_GetURBState>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009ffc:	7bbb      	ldrb	r3, [r7, #14]
 8009ffe:	2b01      	cmp	r3, #1
 800a000:	d105      	bne.n	800a00e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	220d      	movs	r2, #13
 800a006:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a008:	2300      	movs	r3, #0
 800a00a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a00c:	e072      	b.n	800a0f4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a00e:	7bbb      	ldrb	r3, [r7, #14]
 800a010:	2b04      	cmp	r3, #4
 800a012:	d103      	bne.n	800a01c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	220b      	movs	r2, #11
 800a018:	761a      	strb	r2, [r3, #24]
      break;
 800a01a:	e06b      	b.n	800a0f4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a01c:	7bbb      	ldrb	r3, [r7, #14]
 800a01e:	2b05      	cmp	r3, #5
 800a020:	d168      	bne.n	800a0f4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a022:	2303      	movs	r3, #3
 800a024:	73fb      	strb	r3, [r7, #15]
      break;
 800a026:	e065      	b.n	800a0f4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	795b      	ldrb	r3, [r3, #5]
 800a02c:	2201      	movs	r2, #1
 800a02e:	9200      	str	r2, [sp, #0]
 800a030:	2200      	movs	r2, #0
 800a032:	2100      	movs	r1, #0
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f000 f87f 	bl	800a138 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a040:	b29a      	uxth	r2, r3
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	220a      	movs	r2, #10
 800a04a:	761a      	strb	r2, [r3, #24]
      break;
 800a04c:	e055      	b.n	800a0fa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	795b      	ldrb	r3, [r3, #5]
 800a052:	4619      	mov	r1, r3
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f000 fbe1 	bl	800a81c <USBH_LL_GetURBState>
 800a05a:	4603      	mov	r3, r0
 800a05c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a05e:	7bbb      	ldrb	r3, [r7, #14]
 800a060:	2b01      	cmp	r3, #1
 800a062:	d105      	bne.n	800a070 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a064:	2300      	movs	r3, #0
 800a066:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	220d      	movs	r2, #13
 800a06c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a06e:	e043      	b.n	800a0f8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a070:	7bbb      	ldrb	r3, [r7, #14]
 800a072:	2b02      	cmp	r3, #2
 800a074:	d103      	bne.n	800a07e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2209      	movs	r2, #9
 800a07a:	761a      	strb	r2, [r3, #24]
      break;
 800a07c:	e03c      	b.n	800a0f8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a07e:	7bbb      	ldrb	r3, [r7, #14]
 800a080:	2b04      	cmp	r3, #4
 800a082:	d139      	bne.n	800a0f8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	220b      	movs	r2, #11
 800a088:	761a      	strb	r2, [r3, #24]
      break;
 800a08a:	e035      	b.n	800a0f8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	7e5b      	ldrb	r3, [r3, #25]
 800a090:	3301      	adds	r3, #1
 800a092:	b2da      	uxtb	r2, r3
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	765a      	strb	r2, [r3, #25]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	7e5b      	ldrb	r3, [r3, #25]
 800a09c:	2b02      	cmp	r3, #2
 800a09e:	d806      	bhi.n	800a0ae <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a0ac:	e025      	b.n	800a0fa <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a0b4:	2106      	movs	r1, #6
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	795b      	ldrb	r3, [r3, #5]
 800a0c4:	4619      	mov	r1, r3
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f000 f90c 	bl	800a2e4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	791b      	ldrb	r3, [r3, #4]
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 f906 	bl	800a2e4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a0de:	2302      	movs	r3, #2
 800a0e0:	73fb      	strb	r3, [r7, #15]
      break;
 800a0e2:	e00a      	b.n	800a0fa <USBH_HandleControl+0x2de>

    default:
      break;
 800a0e4:	bf00      	nop
 800a0e6:	e008      	b.n	800a0fa <USBH_HandleControl+0x2de>
      break;
 800a0e8:	bf00      	nop
 800a0ea:	e006      	b.n	800a0fa <USBH_HandleControl+0x2de>
      break;
 800a0ec:	bf00      	nop
 800a0ee:	e004      	b.n	800a0fa <USBH_HandleControl+0x2de>
      break;
 800a0f0:	bf00      	nop
 800a0f2:	e002      	b.n	800a0fa <USBH_HandleControl+0x2de>
      break;
 800a0f4:	bf00      	nop
 800a0f6:	e000      	b.n	800a0fa <USBH_HandleControl+0x2de>
      break;
 800a0f8:	bf00      	nop
  }

  return status;
 800a0fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3710      	adds	r7, #16
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b088      	sub	sp, #32
 800a108:	af04      	add	r7, sp, #16
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	60b9      	str	r1, [r7, #8]
 800a10e:	4613      	mov	r3, r2
 800a110:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a112:	79f9      	ldrb	r1, [r7, #7]
 800a114:	2300      	movs	r3, #0
 800a116:	9303      	str	r3, [sp, #12]
 800a118:	2308      	movs	r3, #8
 800a11a:	9302      	str	r3, [sp, #8]
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	9301      	str	r3, [sp, #4]
 800a120:	2300      	movs	r3, #0
 800a122:	9300      	str	r3, [sp, #0]
 800a124:	2300      	movs	r3, #0
 800a126:	2200      	movs	r2, #0
 800a128:	68f8      	ldr	r0, [r7, #12]
 800a12a:	f000 fb46 	bl	800a7ba <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a12e:	2300      	movs	r3, #0
}
 800a130:	4618      	mov	r0, r3
 800a132:	3710      	adds	r7, #16
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}

0800a138 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b088      	sub	sp, #32
 800a13c:	af04      	add	r7, sp, #16
 800a13e:	60f8      	str	r0, [r7, #12]
 800a140:	60b9      	str	r1, [r7, #8]
 800a142:	4611      	mov	r1, r2
 800a144:	461a      	mov	r2, r3
 800a146:	460b      	mov	r3, r1
 800a148:	80fb      	strh	r3, [r7, #6]
 800a14a:	4613      	mov	r3, r2
 800a14c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a154:	2b00      	cmp	r3, #0
 800a156:	d001      	beq.n	800a15c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a158:	2300      	movs	r3, #0
 800a15a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a15c:	7979      	ldrb	r1, [r7, #5]
 800a15e:	7e3b      	ldrb	r3, [r7, #24]
 800a160:	9303      	str	r3, [sp, #12]
 800a162:	88fb      	ldrh	r3, [r7, #6]
 800a164:	9302      	str	r3, [sp, #8]
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	9301      	str	r3, [sp, #4]
 800a16a:	2301      	movs	r3, #1
 800a16c:	9300      	str	r3, [sp, #0]
 800a16e:	2300      	movs	r3, #0
 800a170:	2200      	movs	r2, #0
 800a172:	68f8      	ldr	r0, [r7, #12]
 800a174:	f000 fb21 	bl	800a7ba <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a178:	2300      	movs	r3, #0
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3710      	adds	r7, #16
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}

0800a182 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a182:	b580      	push	{r7, lr}
 800a184:	b088      	sub	sp, #32
 800a186:	af04      	add	r7, sp, #16
 800a188:	60f8      	str	r0, [r7, #12]
 800a18a:	60b9      	str	r1, [r7, #8]
 800a18c:	4611      	mov	r1, r2
 800a18e:	461a      	mov	r2, r3
 800a190:	460b      	mov	r3, r1
 800a192:	80fb      	strh	r3, [r7, #6]
 800a194:	4613      	mov	r3, r2
 800a196:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a198:	7979      	ldrb	r1, [r7, #5]
 800a19a:	2300      	movs	r3, #0
 800a19c:	9303      	str	r3, [sp, #12]
 800a19e:	88fb      	ldrh	r3, [r7, #6]
 800a1a0:	9302      	str	r3, [sp, #8]
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	9301      	str	r3, [sp, #4]
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	9300      	str	r3, [sp, #0]
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	2201      	movs	r2, #1
 800a1ae:	68f8      	ldr	r0, [r7, #12]
 800a1b0:	f000 fb03 	bl	800a7ba <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a1b4:	2300      	movs	r3, #0

}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3710      	adds	r7, #16
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}

0800a1be <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a1be:	b580      	push	{r7, lr}
 800a1c0:	b088      	sub	sp, #32
 800a1c2:	af04      	add	r7, sp, #16
 800a1c4:	60f8      	str	r0, [r7, #12]
 800a1c6:	60b9      	str	r1, [r7, #8]
 800a1c8:	4611      	mov	r1, r2
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	80fb      	strh	r3, [r7, #6]
 800a1d0:	4613      	mov	r3, r2
 800a1d2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d001      	beq.n	800a1e2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a1e2:	7979      	ldrb	r1, [r7, #5]
 800a1e4:	7e3b      	ldrb	r3, [r7, #24]
 800a1e6:	9303      	str	r3, [sp, #12]
 800a1e8:	88fb      	ldrh	r3, [r7, #6]
 800a1ea:	9302      	str	r3, [sp, #8]
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	9301      	str	r3, [sp, #4]
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	9300      	str	r3, [sp, #0]
 800a1f4:	2302      	movs	r3, #2
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	f000 fade 	bl	800a7ba <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a1fe:	2300      	movs	r3, #0
}
 800a200:	4618      	mov	r0, r3
 800a202:	3710      	adds	r7, #16
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}

0800a208 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b088      	sub	sp, #32
 800a20c:	af04      	add	r7, sp, #16
 800a20e:	60f8      	str	r0, [r7, #12]
 800a210:	60b9      	str	r1, [r7, #8]
 800a212:	4611      	mov	r1, r2
 800a214:	461a      	mov	r2, r3
 800a216:	460b      	mov	r3, r1
 800a218:	80fb      	strh	r3, [r7, #6]
 800a21a:	4613      	mov	r3, r2
 800a21c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a21e:	7979      	ldrb	r1, [r7, #5]
 800a220:	2300      	movs	r3, #0
 800a222:	9303      	str	r3, [sp, #12]
 800a224:	88fb      	ldrh	r3, [r7, #6]
 800a226:	9302      	str	r3, [sp, #8]
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	9301      	str	r3, [sp, #4]
 800a22c:	2301      	movs	r3, #1
 800a22e:	9300      	str	r3, [sp, #0]
 800a230:	2302      	movs	r3, #2
 800a232:	2201      	movs	r2, #1
 800a234:	68f8      	ldr	r0, [r7, #12]
 800a236:	f000 fac0 	bl	800a7ba <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a23a:	2300      	movs	r3, #0
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3710      	adds	r7, #16
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}

0800a244 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b086      	sub	sp, #24
 800a248:	af04      	add	r7, sp, #16
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	4608      	mov	r0, r1
 800a24e:	4611      	mov	r1, r2
 800a250:	461a      	mov	r2, r3
 800a252:	4603      	mov	r3, r0
 800a254:	70fb      	strb	r3, [r7, #3]
 800a256:	460b      	mov	r3, r1
 800a258:	70bb      	strb	r3, [r7, #2]
 800a25a:	4613      	mov	r3, r2
 800a25c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a25e:	7878      	ldrb	r0, [r7, #1]
 800a260:	78ba      	ldrb	r2, [r7, #2]
 800a262:	78f9      	ldrb	r1, [r7, #3]
 800a264:	8b3b      	ldrh	r3, [r7, #24]
 800a266:	9302      	str	r3, [sp, #8]
 800a268:	7d3b      	ldrb	r3, [r7, #20]
 800a26a:	9301      	str	r3, [sp, #4]
 800a26c:	7c3b      	ldrb	r3, [r7, #16]
 800a26e:	9300      	str	r3, [sp, #0]
 800a270:	4603      	mov	r3, r0
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 fa53 	bl	800a71e <USBH_LL_OpenPipe>

  return USBH_OK;
 800a278:	2300      	movs	r3, #0
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3708      	adds	r7, #8
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}

0800a282 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a282:	b580      	push	{r7, lr}
 800a284:	b082      	sub	sp, #8
 800a286:	af00      	add	r7, sp, #0
 800a288:	6078      	str	r0, [r7, #4]
 800a28a:	460b      	mov	r3, r1
 800a28c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a28e:	78fb      	ldrb	r3, [r7, #3]
 800a290:	4619      	mov	r1, r3
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 fa72 	bl	800a77c <USBH_LL_ClosePipe>

  return USBH_OK;
 800a298:	2300      	movs	r3, #0
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3708      	adds	r7, #8
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}

0800a2a2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a2a2:	b580      	push	{r7, lr}
 800a2a4:	b084      	sub	sp, #16
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
 800a2aa:	460b      	mov	r3, r1
 800a2ac:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f000 f836 	bl	800a320 <USBH_GetFreePipe>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a2b8:	89fb      	ldrh	r3, [r7, #14]
 800a2ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d00a      	beq.n	800a2d8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a2c2:	78fa      	ldrb	r2, [r7, #3]
 800a2c4:	89fb      	ldrh	r3, [r7, #14]
 800a2c6:	f003 030f 	and.w	r3, r3, #15
 800a2ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a2ce:	6879      	ldr	r1, [r7, #4]
 800a2d0:	33e0      	adds	r3, #224	@ 0xe0
 800a2d2:	009b      	lsls	r3, r3, #2
 800a2d4:	440b      	add	r3, r1
 800a2d6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a2d8:	89fb      	ldrh	r3, [r7, #14]
 800a2da:	b2db      	uxtb	r3, r3
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3710      	adds	r7, #16
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b083      	sub	sp, #12
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	460b      	mov	r3, r1
 800a2ee:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a2f0:	78fb      	ldrb	r3, [r7, #3]
 800a2f2:	2b0f      	cmp	r3, #15
 800a2f4:	d80d      	bhi.n	800a312 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a2f6:	78fb      	ldrb	r3, [r7, #3]
 800a2f8:	687a      	ldr	r2, [r7, #4]
 800a2fa:	33e0      	adds	r3, #224	@ 0xe0
 800a2fc:	009b      	lsls	r3, r3, #2
 800a2fe:	4413      	add	r3, r2
 800a300:	685a      	ldr	r2, [r3, #4]
 800a302:	78fb      	ldrb	r3, [r7, #3]
 800a304:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a308:	6879      	ldr	r1, [r7, #4]
 800a30a:	33e0      	adds	r3, #224	@ 0xe0
 800a30c:	009b      	lsls	r3, r3, #2
 800a30e:	440b      	add	r3, r1
 800a310:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a312:	2300      	movs	r3, #0
}
 800a314:	4618      	mov	r0, r3
 800a316:	370c      	adds	r7, #12
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr

0800a320 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a320:	b480      	push	{r7}
 800a322:	b085      	sub	sp, #20
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a328:	2300      	movs	r3, #0
 800a32a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a32c:	2300      	movs	r3, #0
 800a32e:	73fb      	strb	r3, [r7, #15]
 800a330:	e00f      	b.n	800a352 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a332:	7bfb      	ldrb	r3, [r7, #15]
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	33e0      	adds	r3, #224	@ 0xe0
 800a338:	009b      	lsls	r3, r3, #2
 800a33a:	4413      	add	r3, r2
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a342:	2b00      	cmp	r3, #0
 800a344:	d102      	bne.n	800a34c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a346:	7bfb      	ldrb	r3, [r7, #15]
 800a348:	b29b      	uxth	r3, r3
 800a34a:	e007      	b.n	800a35c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a34c:	7bfb      	ldrb	r3, [r7, #15]
 800a34e:	3301      	adds	r3, #1
 800a350:	73fb      	strb	r3, [r7, #15]
 800a352:	7bfb      	ldrb	r3, [r7, #15]
 800a354:	2b0f      	cmp	r3, #15
 800a356:	d9ec      	bls.n	800a332 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a358:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3714      	adds	r7, #20
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr

0800a368 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a36c:	2201      	movs	r2, #1
 800a36e:	490e      	ldr	r1, [pc, #56]	@ (800a3a8 <MX_USB_HOST_Init+0x40>)
 800a370:	480e      	ldr	r0, [pc, #56]	@ (800a3ac <MX_USB_HOST_Init+0x44>)
 800a372:	f7fe fb15 	bl	80089a0 <USBH_Init>
 800a376:	4603      	mov	r3, r0
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d001      	beq.n	800a380 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a37c:	f7f7 fa92 	bl	80018a4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a380:	490b      	ldr	r1, [pc, #44]	@ (800a3b0 <MX_USB_HOST_Init+0x48>)
 800a382:	480a      	ldr	r0, [pc, #40]	@ (800a3ac <MX_USB_HOST_Init+0x44>)
 800a384:	f7fe fbb9 	bl	8008afa <USBH_RegisterClass>
 800a388:	4603      	mov	r3, r0
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d001      	beq.n	800a392 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a38e:	f7f7 fa89 	bl	80018a4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a392:	4806      	ldr	r0, [pc, #24]	@ (800a3ac <MX_USB_HOST_Init+0x44>)
 800a394:	f7fe fc3d 	bl	8008c12 <USBH_Start>
 800a398:	4603      	mov	r3, r0
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d001      	beq.n	800a3a2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a39e:	f7f7 fa81 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a3a2:	bf00      	nop
 800a3a4:	bd80      	pop	{r7, pc}
 800a3a6:	bf00      	nop
 800a3a8:	0800a3c9 	.word	0x0800a3c9
 800a3ac:	200002f8 	.word	0x200002f8
 800a3b0:	2000000c 	.word	0x2000000c

0800a3b4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a3b8:	4802      	ldr	r0, [pc, #8]	@ (800a3c4 <MX_USB_HOST_Process+0x10>)
 800a3ba:	f7fe fc3b 	bl	8008c34 <USBH_Process>
}
 800a3be:	bf00      	nop
 800a3c0:	bd80      	pop	{r7, pc}
 800a3c2:	bf00      	nop
 800a3c4:	200002f8 	.word	0x200002f8

0800a3c8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b083      	sub	sp, #12
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	460b      	mov	r3, r1
 800a3d2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a3d4:	78fb      	ldrb	r3, [r7, #3]
 800a3d6:	3b01      	subs	r3, #1
 800a3d8:	2b04      	cmp	r3, #4
 800a3da:	d819      	bhi.n	800a410 <USBH_UserProcess+0x48>
 800a3dc:	a201      	add	r2, pc, #4	@ (adr r2, 800a3e4 <USBH_UserProcess+0x1c>)
 800a3de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3e2:	bf00      	nop
 800a3e4:	0800a411 	.word	0x0800a411
 800a3e8:	0800a401 	.word	0x0800a401
 800a3ec:	0800a411 	.word	0x0800a411
 800a3f0:	0800a409 	.word	0x0800a409
 800a3f4:	0800a3f9 	.word	0x0800a3f9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a3f8:	4b09      	ldr	r3, [pc, #36]	@ (800a420 <USBH_UserProcess+0x58>)
 800a3fa:	2203      	movs	r2, #3
 800a3fc:	701a      	strb	r2, [r3, #0]
  break;
 800a3fe:	e008      	b.n	800a412 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a400:	4b07      	ldr	r3, [pc, #28]	@ (800a420 <USBH_UserProcess+0x58>)
 800a402:	2202      	movs	r2, #2
 800a404:	701a      	strb	r2, [r3, #0]
  break;
 800a406:	e004      	b.n	800a412 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a408:	4b05      	ldr	r3, [pc, #20]	@ (800a420 <USBH_UserProcess+0x58>)
 800a40a:	2201      	movs	r2, #1
 800a40c:	701a      	strb	r2, [r3, #0]
  break;
 800a40e:	e000      	b.n	800a412 <USBH_UserProcess+0x4a>

  default:
  break;
 800a410:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a412:	bf00      	nop
 800a414:	370c      	adds	r7, #12
 800a416:	46bd      	mov	sp, r7
 800a418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41c:	4770      	bx	lr
 800a41e:	bf00      	nop
 800a420:	200006d0 	.word	0x200006d0

0800a424 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b08a      	sub	sp, #40	@ 0x28
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a42c:	f107 0314 	add.w	r3, r7, #20
 800a430:	2200      	movs	r2, #0
 800a432:	601a      	str	r2, [r3, #0]
 800a434:	605a      	str	r2, [r3, #4]
 800a436:	609a      	str	r2, [r3, #8]
 800a438:	60da      	str	r2, [r3, #12]
 800a43a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a444:	d147      	bne.n	800a4d6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a446:	2300      	movs	r3, #0
 800a448:	613b      	str	r3, [r7, #16]
 800a44a:	4b25      	ldr	r3, [pc, #148]	@ (800a4e0 <HAL_HCD_MspInit+0xbc>)
 800a44c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a44e:	4a24      	ldr	r2, [pc, #144]	@ (800a4e0 <HAL_HCD_MspInit+0xbc>)
 800a450:	f043 0301 	orr.w	r3, r3, #1
 800a454:	6313      	str	r3, [r2, #48]	@ 0x30
 800a456:	4b22      	ldr	r3, [pc, #136]	@ (800a4e0 <HAL_HCD_MspInit+0xbc>)
 800a458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a45a:	f003 0301 	and.w	r3, r3, #1
 800a45e:	613b      	str	r3, [r7, #16]
 800a460:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a462:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a468:	2300      	movs	r3, #0
 800a46a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a46c:	2300      	movs	r3, #0
 800a46e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a470:	f107 0314 	add.w	r3, r7, #20
 800a474:	4619      	mov	r1, r3
 800a476:	481b      	ldr	r0, [pc, #108]	@ (800a4e4 <HAL_HCD_MspInit+0xc0>)
 800a478:	f7f7 fe20 	bl	80020bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a47c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800a480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a482:	2302      	movs	r3, #2
 800a484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a486:	2300      	movs	r3, #0
 800a488:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a48a:	2300      	movs	r3, #0
 800a48c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a48e:	230a      	movs	r3, #10
 800a490:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a492:	f107 0314 	add.w	r3, r7, #20
 800a496:	4619      	mov	r1, r3
 800a498:	4812      	ldr	r0, [pc, #72]	@ (800a4e4 <HAL_HCD_MspInit+0xc0>)
 800a49a:	f7f7 fe0f 	bl	80020bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a49e:	4b10      	ldr	r3, [pc, #64]	@ (800a4e0 <HAL_HCD_MspInit+0xbc>)
 800a4a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4a2:	4a0f      	ldr	r2, [pc, #60]	@ (800a4e0 <HAL_HCD_MspInit+0xbc>)
 800a4a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a4a8:	6353      	str	r3, [r2, #52]	@ 0x34
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	60fb      	str	r3, [r7, #12]
 800a4ae:	4b0c      	ldr	r3, [pc, #48]	@ (800a4e0 <HAL_HCD_MspInit+0xbc>)
 800a4b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4b2:	4a0b      	ldr	r2, [pc, #44]	@ (800a4e0 <HAL_HCD_MspInit+0xbc>)
 800a4b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a4b8:	6453      	str	r3, [r2, #68]	@ 0x44
 800a4ba:	4b09      	ldr	r3, [pc, #36]	@ (800a4e0 <HAL_HCD_MspInit+0xbc>)
 800a4bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a4c2:	60fb      	str	r3, [r7, #12]
 800a4c4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	2100      	movs	r1, #0
 800a4ca:	2043      	movs	r0, #67	@ 0x43
 800a4cc:	f7f7 fdbf 	bl	800204e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a4d0:	2043      	movs	r0, #67	@ 0x43
 800a4d2:	f7f7 fdd8 	bl	8002086 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a4d6:	bf00      	nop
 800a4d8:	3728      	adds	r7, #40	@ 0x28
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
 800a4de:	bf00      	nop
 800a4e0:	40023800 	.word	0x40023800
 800a4e4:	40020000 	.word	0x40020000

0800a4e8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b082      	sub	sp, #8
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f7fe ff73 	bl	80093e2 <USBH_LL_IncTimer>
}
 800a4fc:	bf00      	nop
 800a4fe:	3708      	adds	r7, #8
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}

0800a504 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b082      	sub	sp, #8
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a512:	4618      	mov	r0, r3
 800a514:	f7fe ffab 	bl	800946e <USBH_LL_Connect>
}
 800a518:	bf00      	nop
 800a51a:	3708      	adds	r7, #8
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}

0800a520 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b082      	sub	sp, #8
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a52e:	4618      	mov	r0, r3
 800a530:	f7fe ffb4 	bl	800949c <USBH_LL_Disconnect>
}
 800a534:	bf00      	nop
 800a536:	3708      	adds	r7, #8
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}

0800a53c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b083      	sub	sp, #12
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	460b      	mov	r3, r1
 800a546:	70fb      	strb	r3, [r7, #3]
 800a548:	4613      	mov	r3, r2
 800a54a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a54c:	bf00      	nop
 800a54e:	370c      	adds	r7, #12
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr

0800a558 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b082      	sub	sp, #8
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a566:	4618      	mov	r0, r3
 800a568:	f7fe ff65 	bl	8009436 <USBH_LL_PortEnabled>
}
 800a56c:	bf00      	nop
 800a56e:	3708      	adds	r7, #8
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}

0800a574 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b082      	sub	sp, #8
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a582:	4618      	mov	r0, r3
 800a584:	f7fe ff65 	bl	8009452 <USBH_LL_PortDisabled>
}
 800a588:	bf00      	nop
 800a58a:	3708      	adds	r7, #8
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}

0800a590 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b082      	sub	sp, #8
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a59e:	2b01      	cmp	r3, #1
 800a5a0:	d12a      	bne.n	800a5f8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a5a2:	4a18      	ldr	r2, [pc, #96]	@ (800a604 <USBH_LL_Init+0x74>)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	4a15      	ldr	r2, [pc, #84]	@ (800a604 <USBH_LL_Init+0x74>)
 800a5ae:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a5b2:	4b14      	ldr	r3, [pc, #80]	@ (800a604 <USBH_LL_Init+0x74>)
 800a5b4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a5b8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a5ba:	4b12      	ldr	r3, [pc, #72]	@ (800a604 <USBH_LL_Init+0x74>)
 800a5bc:	2208      	movs	r2, #8
 800a5be:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a5c0:	4b10      	ldr	r3, [pc, #64]	@ (800a604 <USBH_LL_Init+0x74>)
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a5c6:	4b0f      	ldr	r3, [pc, #60]	@ (800a604 <USBH_LL_Init+0x74>)
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a5cc:	4b0d      	ldr	r3, [pc, #52]	@ (800a604 <USBH_LL_Init+0x74>)
 800a5ce:	2202      	movs	r2, #2
 800a5d0:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a5d2:	4b0c      	ldr	r3, [pc, #48]	@ (800a604 <USBH_LL_Init+0x74>)
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a5d8:	480a      	ldr	r0, [pc, #40]	@ (800a604 <USBH_LL_Init+0x74>)
 800a5da:	f7f7 ff3e 	bl	800245a <HAL_HCD_Init>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d001      	beq.n	800a5e8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a5e4:	f7f7 f95e 	bl	80018a4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a5e8:	4806      	ldr	r0, [pc, #24]	@ (800a604 <USBH_LL_Init+0x74>)
 800a5ea:	f7f8 fb9f 	bl	8002d2c <HAL_HCD_GetCurrentFrame>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f7fe fee6 	bl	80093c4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a5f8:	2300      	movs	r3, #0
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3708      	adds	r7, #8
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}
 800a602:	bf00      	nop
 800a604:	200006d4 	.word	0x200006d4

0800a608 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a610:	2300      	movs	r3, #0
 800a612:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a614:	2300      	movs	r3, #0
 800a616:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a61e:	4618      	mov	r0, r3
 800a620:	f7f8 fb0c 	bl	8002c3c <HAL_HCD_Start>
 800a624:	4603      	mov	r3, r0
 800a626:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a628:	7bfb      	ldrb	r3, [r7, #15]
 800a62a:	4618      	mov	r0, r3
 800a62c:	f000 f95e 	bl	800a8ec <USBH_Get_USB_Status>
 800a630:	4603      	mov	r3, r0
 800a632:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a634:	7bbb      	ldrb	r3, [r7, #14]
}
 800a636:	4618      	mov	r0, r3
 800a638:	3710      	adds	r7, #16
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}

0800a63e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a63e:	b580      	push	{r7, lr}
 800a640:	b084      	sub	sp, #16
 800a642:	af00      	add	r7, sp, #0
 800a644:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a646:	2300      	movs	r3, #0
 800a648:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a64a:	2300      	movs	r3, #0
 800a64c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a654:	4618      	mov	r0, r3
 800a656:	f7f8 fb14 	bl	8002c82 <HAL_HCD_Stop>
 800a65a:	4603      	mov	r3, r0
 800a65c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a65e:	7bfb      	ldrb	r3, [r7, #15]
 800a660:	4618      	mov	r0, r3
 800a662:	f000 f943 	bl	800a8ec <USBH_Get_USB_Status>
 800a666:	4603      	mov	r3, r0
 800a668:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a66a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3710      	adds	r7, #16
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}

0800a674 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b084      	sub	sp, #16
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a67c:	2301      	movs	r3, #1
 800a67e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a686:	4618      	mov	r0, r3
 800a688:	f7f8 fb5e 	bl	8002d48 <HAL_HCD_GetCurrentSpeed>
 800a68c:	4603      	mov	r3, r0
 800a68e:	2b02      	cmp	r3, #2
 800a690:	d00c      	beq.n	800a6ac <USBH_LL_GetSpeed+0x38>
 800a692:	2b02      	cmp	r3, #2
 800a694:	d80d      	bhi.n	800a6b2 <USBH_LL_GetSpeed+0x3e>
 800a696:	2b00      	cmp	r3, #0
 800a698:	d002      	beq.n	800a6a0 <USBH_LL_GetSpeed+0x2c>
 800a69a:	2b01      	cmp	r3, #1
 800a69c:	d003      	beq.n	800a6a6 <USBH_LL_GetSpeed+0x32>
 800a69e:	e008      	b.n	800a6b2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	73fb      	strb	r3, [r7, #15]
    break;
 800a6a4:	e008      	b.n	800a6b8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	73fb      	strb	r3, [r7, #15]
    break;
 800a6aa:	e005      	b.n	800a6b8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a6ac:	2302      	movs	r3, #2
 800a6ae:	73fb      	strb	r3, [r7, #15]
    break;
 800a6b0:	e002      	b.n	800a6b8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	73fb      	strb	r3, [r7, #15]
    break;
 800a6b6:	bf00      	nop
  }
  return  speed;
 800a6b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3710      	adds	r7, #16
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}

0800a6c2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a6c2:	b580      	push	{r7, lr}
 800a6c4:	b084      	sub	sp, #16
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f7f8 faef 	bl	8002cbc <HAL_HCD_ResetPort>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a6e2:	7bfb      	ldrb	r3, [r7, #15]
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f000 f901 	bl	800a8ec <USBH_Get_USB_Status>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3710      	adds	r7, #16
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}

0800a6f8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b082      	sub	sp, #8
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	460b      	mov	r3, r1
 800a702:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a70a:	78fa      	ldrb	r2, [r7, #3]
 800a70c:	4611      	mov	r1, r2
 800a70e:	4618      	mov	r0, r3
 800a710:	f7f8 faf7 	bl	8002d02 <HAL_HCD_HC_GetXferCount>
 800a714:	4603      	mov	r3, r0
}
 800a716:	4618      	mov	r0, r3
 800a718:	3708      	adds	r7, #8
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}

0800a71e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a71e:	b590      	push	{r4, r7, lr}
 800a720:	b089      	sub	sp, #36	@ 0x24
 800a722:	af04      	add	r7, sp, #16
 800a724:	6078      	str	r0, [r7, #4]
 800a726:	4608      	mov	r0, r1
 800a728:	4611      	mov	r1, r2
 800a72a:	461a      	mov	r2, r3
 800a72c:	4603      	mov	r3, r0
 800a72e:	70fb      	strb	r3, [r7, #3]
 800a730:	460b      	mov	r3, r1
 800a732:	70bb      	strb	r3, [r7, #2]
 800a734:	4613      	mov	r3, r2
 800a736:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a738:	2300      	movs	r3, #0
 800a73a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a73c:	2300      	movs	r3, #0
 800a73e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a746:	787c      	ldrb	r4, [r7, #1]
 800a748:	78ba      	ldrb	r2, [r7, #2]
 800a74a:	78f9      	ldrb	r1, [r7, #3]
 800a74c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a74e:	9302      	str	r3, [sp, #8]
 800a750:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a754:	9301      	str	r3, [sp, #4]
 800a756:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a75a:	9300      	str	r3, [sp, #0]
 800a75c:	4623      	mov	r3, r4
 800a75e:	f7f7 fee3 	bl	8002528 <HAL_HCD_HC_Init>
 800a762:	4603      	mov	r3, r0
 800a764:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a766:	7bfb      	ldrb	r3, [r7, #15]
 800a768:	4618      	mov	r0, r3
 800a76a:	f000 f8bf 	bl	800a8ec <USBH_Get_USB_Status>
 800a76e:	4603      	mov	r3, r0
 800a770:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a772:	7bbb      	ldrb	r3, [r7, #14]
}
 800a774:	4618      	mov	r0, r3
 800a776:	3714      	adds	r7, #20
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd90      	pop	{r4, r7, pc}

0800a77c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b084      	sub	sp, #16
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	460b      	mov	r3, r1
 800a786:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a788:	2300      	movs	r3, #0
 800a78a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a78c:	2300      	movs	r3, #0
 800a78e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a796:	78fa      	ldrb	r2, [r7, #3]
 800a798:	4611      	mov	r1, r2
 800a79a:	4618      	mov	r0, r3
 800a79c:	f7f7 ff7c 	bl	8002698 <HAL_HCD_HC_Halt>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a7a4:	7bfb      	ldrb	r3, [r7, #15]
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f000 f8a0 	bl	800a8ec <USBH_Get_USB_Status>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3710      	adds	r7, #16
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}

0800a7ba <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a7ba:	b590      	push	{r4, r7, lr}
 800a7bc:	b089      	sub	sp, #36	@ 0x24
 800a7be:	af04      	add	r7, sp, #16
 800a7c0:	6078      	str	r0, [r7, #4]
 800a7c2:	4608      	mov	r0, r1
 800a7c4:	4611      	mov	r1, r2
 800a7c6:	461a      	mov	r2, r3
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	70fb      	strb	r3, [r7, #3]
 800a7cc:	460b      	mov	r3, r1
 800a7ce:	70bb      	strb	r3, [r7, #2]
 800a7d0:	4613      	mov	r3, r2
 800a7d2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a7e2:	787c      	ldrb	r4, [r7, #1]
 800a7e4:	78ba      	ldrb	r2, [r7, #2]
 800a7e6:	78f9      	ldrb	r1, [r7, #3]
 800a7e8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a7ec:	9303      	str	r3, [sp, #12]
 800a7ee:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a7f0:	9302      	str	r3, [sp, #8]
 800a7f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7f4:	9301      	str	r3, [sp, #4]
 800a7f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a7fa:	9300      	str	r3, [sp, #0]
 800a7fc:	4623      	mov	r3, r4
 800a7fe:	f7f7 ff6f 	bl	80026e0 <HAL_HCD_HC_SubmitRequest>
 800a802:	4603      	mov	r3, r0
 800a804:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a806:	7bfb      	ldrb	r3, [r7, #15]
 800a808:	4618      	mov	r0, r3
 800a80a:	f000 f86f 	bl	800a8ec <USBH_Get_USB_Status>
 800a80e:	4603      	mov	r3, r0
 800a810:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a812:	7bbb      	ldrb	r3, [r7, #14]
}
 800a814:	4618      	mov	r0, r3
 800a816:	3714      	adds	r7, #20
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd90      	pop	{r4, r7, pc}

0800a81c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b082      	sub	sp, #8
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
 800a824:	460b      	mov	r3, r1
 800a826:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a82e:	78fa      	ldrb	r2, [r7, #3]
 800a830:	4611      	mov	r1, r2
 800a832:	4618      	mov	r0, r3
 800a834:	f7f8 fa50 	bl	8002cd8 <HAL_HCD_HC_GetURBState>
 800a838:	4603      	mov	r3, r0
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3708      	adds	r7, #8
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}

0800a842 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a842:	b580      	push	{r7, lr}
 800a844:	b082      	sub	sp, #8
 800a846:	af00      	add	r7, sp, #0
 800a848:	6078      	str	r0, [r7, #4]
 800a84a:	460b      	mov	r3, r1
 800a84c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a854:	2b01      	cmp	r3, #1
 800a856:	d103      	bne.n	800a860 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a858:	78fb      	ldrb	r3, [r7, #3]
 800a85a:	4618      	mov	r0, r3
 800a85c:	f000 f872 	bl	800a944 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a860:	20c8      	movs	r0, #200	@ 0xc8
 800a862:	f7f7 faf5 	bl	8001e50 <HAL_Delay>
  return USBH_OK;
 800a866:	2300      	movs	r3, #0
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3708      	adds	r7, #8
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a870:	b480      	push	{r7}
 800a872:	b085      	sub	sp, #20
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	460b      	mov	r3, r1
 800a87a:	70fb      	strb	r3, [r7, #3]
 800a87c:	4613      	mov	r3, r2
 800a87e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a886:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a888:	78fa      	ldrb	r2, [r7, #3]
 800a88a:	68f9      	ldr	r1, [r7, #12]
 800a88c:	4613      	mov	r3, r2
 800a88e:	011b      	lsls	r3, r3, #4
 800a890:	1a9b      	subs	r3, r3, r2
 800a892:	009b      	lsls	r3, r3, #2
 800a894:	440b      	add	r3, r1
 800a896:	3317      	adds	r3, #23
 800a898:	781b      	ldrb	r3, [r3, #0]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d00a      	beq.n	800a8b4 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a89e:	78fa      	ldrb	r2, [r7, #3]
 800a8a0:	68f9      	ldr	r1, [r7, #12]
 800a8a2:	4613      	mov	r3, r2
 800a8a4:	011b      	lsls	r3, r3, #4
 800a8a6:	1a9b      	subs	r3, r3, r2
 800a8a8:	009b      	lsls	r3, r3, #2
 800a8aa:	440b      	add	r3, r1
 800a8ac:	333c      	adds	r3, #60	@ 0x3c
 800a8ae:	78ba      	ldrb	r2, [r7, #2]
 800a8b0:	701a      	strb	r2, [r3, #0]
 800a8b2:	e009      	b.n	800a8c8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a8b4:	78fa      	ldrb	r2, [r7, #3]
 800a8b6:	68f9      	ldr	r1, [r7, #12]
 800a8b8:	4613      	mov	r3, r2
 800a8ba:	011b      	lsls	r3, r3, #4
 800a8bc:	1a9b      	subs	r3, r3, r2
 800a8be:	009b      	lsls	r3, r3, #2
 800a8c0:	440b      	add	r3, r1
 800a8c2:	333d      	adds	r3, #61	@ 0x3d
 800a8c4:	78ba      	ldrb	r2, [r7, #2]
 800a8c6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a8c8:	2300      	movs	r3, #0
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3714      	adds	r7, #20
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d4:	4770      	bx	lr

0800a8d6 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a8d6:	b580      	push	{r7, lr}
 800a8d8:	b082      	sub	sp, #8
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f7f7 fab6 	bl	8001e50 <HAL_Delay>
}
 800a8e4:	bf00      	nop
 800a8e6:	3708      	adds	r7, #8
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}

0800a8ec <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b085      	sub	sp, #20
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a8fa:	79fb      	ldrb	r3, [r7, #7]
 800a8fc:	2b03      	cmp	r3, #3
 800a8fe:	d817      	bhi.n	800a930 <USBH_Get_USB_Status+0x44>
 800a900:	a201      	add	r2, pc, #4	@ (adr r2, 800a908 <USBH_Get_USB_Status+0x1c>)
 800a902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a906:	bf00      	nop
 800a908:	0800a919 	.word	0x0800a919
 800a90c:	0800a91f 	.word	0x0800a91f
 800a910:	0800a925 	.word	0x0800a925
 800a914:	0800a92b 	.word	0x0800a92b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a918:	2300      	movs	r3, #0
 800a91a:	73fb      	strb	r3, [r7, #15]
    break;
 800a91c:	e00b      	b.n	800a936 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a91e:	2302      	movs	r3, #2
 800a920:	73fb      	strb	r3, [r7, #15]
    break;
 800a922:	e008      	b.n	800a936 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a924:	2301      	movs	r3, #1
 800a926:	73fb      	strb	r3, [r7, #15]
    break;
 800a928:	e005      	b.n	800a936 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a92a:	2302      	movs	r3, #2
 800a92c:	73fb      	strb	r3, [r7, #15]
    break;
 800a92e:	e002      	b.n	800a936 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a930:	2302      	movs	r3, #2
 800a932:	73fb      	strb	r3, [r7, #15]
    break;
 800a934:	bf00      	nop
  }
  return usb_status;
 800a936:	7bfb      	ldrb	r3, [r7, #15]
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3714      	adds	r7, #20
 800a93c:	46bd      	mov	sp, r7
 800a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a942:	4770      	bx	lr

0800a944 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b084      	sub	sp, #16
 800a948:	af00      	add	r7, sp, #0
 800a94a:	4603      	mov	r3, r0
 800a94c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a94e:	79fb      	ldrb	r3, [r7, #7]
 800a950:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a952:	79fb      	ldrb	r3, [r7, #7]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d102      	bne.n	800a95e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a958:	2300      	movs	r3, #0
 800a95a:	73fb      	strb	r3, [r7, #15]
 800a95c:	e001      	b.n	800a962 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a95e:	2301      	movs	r3, #1
 800a960:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a962:	7bfb      	ldrb	r3, [r7, #15]
 800a964:	461a      	mov	r2, r3
 800a966:	2101      	movs	r1, #1
 800a968:	4803      	ldr	r0, [pc, #12]	@ (800a978 <MX_DriverVbusFS+0x34>)
 800a96a:	f7f7 fd43 	bl	80023f4 <HAL_GPIO_WritePin>
}
 800a96e:	bf00      	nop
 800a970:	3710      	adds	r7, #16
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop
 800a978:	40020800 	.word	0x40020800

0800a97c <malloc>:
 800a97c:	4b02      	ldr	r3, [pc, #8]	@ (800a988 <malloc+0xc>)
 800a97e:	4601      	mov	r1, r0
 800a980:	6818      	ldr	r0, [r3, #0]
 800a982:	f000 b82d 	b.w	800a9e0 <_malloc_r>
 800a986:	bf00      	nop
 800a988:	20000038 	.word	0x20000038

0800a98c <free>:
 800a98c:	4b02      	ldr	r3, [pc, #8]	@ (800a998 <free+0xc>)
 800a98e:	4601      	mov	r1, r0
 800a990:	6818      	ldr	r0, [r3, #0]
 800a992:	f000 ba9f 	b.w	800aed4 <_free_r>
 800a996:	bf00      	nop
 800a998:	20000038 	.word	0x20000038

0800a99c <sbrk_aligned>:
 800a99c:	b570      	push	{r4, r5, r6, lr}
 800a99e:	4e0f      	ldr	r6, [pc, #60]	@ (800a9dc <sbrk_aligned+0x40>)
 800a9a0:	460c      	mov	r4, r1
 800a9a2:	6831      	ldr	r1, [r6, #0]
 800a9a4:	4605      	mov	r5, r0
 800a9a6:	b911      	cbnz	r1, 800a9ae <sbrk_aligned+0x12>
 800a9a8:	f000 fa26 	bl	800adf8 <_sbrk_r>
 800a9ac:	6030      	str	r0, [r6, #0]
 800a9ae:	4621      	mov	r1, r4
 800a9b0:	4628      	mov	r0, r5
 800a9b2:	f000 fa21 	bl	800adf8 <_sbrk_r>
 800a9b6:	1c43      	adds	r3, r0, #1
 800a9b8:	d103      	bne.n	800a9c2 <sbrk_aligned+0x26>
 800a9ba:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a9be:	4620      	mov	r0, r4
 800a9c0:	bd70      	pop	{r4, r5, r6, pc}
 800a9c2:	1cc4      	adds	r4, r0, #3
 800a9c4:	f024 0403 	bic.w	r4, r4, #3
 800a9c8:	42a0      	cmp	r0, r4
 800a9ca:	d0f8      	beq.n	800a9be <sbrk_aligned+0x22>
 800a9cc:	1a21      	subs	r1, r4, r0
 800a9ce:	4628      	mov	r0, r5
 800a9d0:	f000 fa12 	bl	800adf8 <_sbrk_r>
 800a9d4:	3001      	adds	r0, #1
 800a9d6:	d1f2      	bne.n	800a9be <sbrk_aligned+0x22>
 800a9d8:	e7ef      	b.n	800a9ba <sbrk_aligned+0x1e>
 800a9da:	bf00      	nop
 800a9dc:	20000ab4 	.word	0x20000ab4

0800a9e0 <_malloc_r>:
 800a9e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9e4:	1ccd      	adds	r5, r1, #3
 800a9e6:	f025 0503 	bic.w	r5, r5, #3
 800a9ea:	3508      	adds	r5, #8
 800a9ec:	2d0c      	cmp	r5, #12
 800a9ee:	bf38      	it	cc
 800a9f0:	250c      	movcc	r5, #12
 800a9f2:	2d00      	cmp	r5, #0
 800a9f4:	4606      	mov	r6, r0
 800a9f6:	db01      	blt.n	800a9fc <_malloc_r+0x1c>
 800a9f8:	42a9      	cmp	r1, r5
 800a9fa:	d904      	bls.n	800aa06 <_malloc_r+0x26>
 800a9fc:	230c      	movs	r3, #12
 800a9fe:	6033      	str	r3, [r6, #0]
 800aa00:	2000      	movs	r0, #0
 800aa02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aadc <_malloc_r+0xfc>
 800aa0a:	f000 f869 	bl	800aae0 <__malloc_lock>
 800aa0e:	f8d8 3000 	ldr.w	r3, [r8]
 800aa12:	461c      	mov	r4, r3
 800aa14:	bb44      	cbnz	r4, 800aa68 <_malloc_r+0x88>
 800aa16:	4629      	mov	r1, r5
 800aa18:	4630      	mov	r0, r6
 800aa1a:	f7ff ffbf 	bl	800a99c <sbrk_aligned>
 800aa1e:	1c43      	adds	r3, r0, #1
 800aa20:	4604      	mov	r4, r0
 800aa22:	d158      	bne.n	800aad6 <_malloc_r+0xf6>
 800aa24:	f8d8 4000 	ldr.w	r4, [r8]
 800aa28:	4627      	mov	r7, r4
 800aa2a:	2f00      	cmp	r7, #0
 800aa2c:	d143      	bne.n	800aab6 <_malloc_r+0xd6>
 800aa2e:	2c00      	cmp	r4, #0
 800aa30:	d04b      	beq.n	800aaca <_malloc_r+0xea>
 800aa32:	6823      	ldr	r3, [r4, #0]
 800aa34:	4639      	mov	r1, r7
 800aa36:	4630      	mov	r0, r6
 800aa38:	eb04 0903 	add.w	r9, r4, r3
 800aa3c:	f000 f9dc 	bl	800adf8 <_sbrk_r>
 800aa40:	4581      	cmp	r9, r0
 800aa42:	d142      	bne.n	800aaca <_malloc_r+0xea>
 800aa44:	6821      	ldr	r1, [r4, #0]
 800aa46:	1a6d      	subs	r5, r5, r1
 800aa48:	4629      	mov	r1, r5
 800aa4a:	4630      	mov	r0, r6
 800aa4c:	f7ff ffa6 	bl	800a99c <sbrk_aligned>
 800aa50:	3001      	adds	r0, #1
 800aa52:	d03a      	beq.n	800aaca <_malloc_r+0xea>
 800aa54:	6823      	ldr	r3, [r4, #0]
 800aa56:	442b      	add	r3, r5
 800aa58:	6023      	str	r3, [r4, #0]
 800aa5a:	f8d8 3000 	ldr.w	r3, [r8]
 800aa5e:	685a      	ldr	r2, [r3, #4]
 800aa60:	bb62      	cbnz	r2, 800aabc <_malloc_r+0xdc>
 800aa62:	f8c8 7000 	str.w	r7, [r8]
 800aa66:	e00f      	b.n	800aa88 <_malloc_r+0xa8>
 800aa68:	6822      	ldr	r2, [r4, #0]
 800aa6a:	1b52      	subs	r2, r2, r5
 800aa6c:	d420      	bmi.n	800aab0 <_malloc_r+0xd0>
 800aa6e:	2a0b      	cmp	r2, #11
 800aa70:	d917      	bls.n	800aaa2 <_malloc_r+0xc2>
 800aa72:	1961      	adds	r1, r4, r5
 800aa74:	42a3      	cmp	r3, r4
 800aa76:	6025      	str	r5, [r4, #0]
 800aa78:	bf18      	it	ne
 800aa7a:	6059      	strne	r1, [r3, #4]
 800aa7c:	6863      	ldr	r3, [r4, #4]
 800aa7e:	bf08      	it	eq
 800aa80:	f8c8 1000 	streq.w	r1, [r8]
 800aa84:	5162      	str	r2, [r4, r5]
 800aa86:	604b      	str	r3, [r1, #4]
 800aa88:	4630      	mov	r0, r6
 800aa8a:	f000 f82f 	bl	800aaec <__malloc_unlock>
 800aa8e:	f104 000b 	add.w	r0, r4, #11
 800aa92:	1d23      	adds	r3, r4, #4
 800aa94:	f020 0007 	bic.w	r0, r0, #7
 800aa98:	1ac2      	subs	r2, r0, r3
 800aa9a:	bf1c      	itt	ne
 800aa9c:	1a1b      	subne	r3, r3, r0
 800aa9e:	50a3      	strne	r3, [r4, r2]
 800aaa0:	e7af      	b.n	800aa02 <_malloc_r+0x22>
 800aaa2:	6862      	ldr	r2, [r4, #4]
 800aaa4:	42a3      	cmp	r3, r4
 800aaa6:	bf0c      	ite	eq
 800aaa8:	f8c8 2000 	streq.w	r2, [r8]
 800aaac:	605a      	strne	r2, [r3, #4]
 800aaae:	e7eb      	b.n	800aa88 <_malloc_r+0xa8>
 800aab0:	4623      	mov	r3, r4
 800aab2:	6864      	ldr	r4, [r4, #4]
 800aab4:	e7ae      	b.n	800aa14 <_malloc_r+0x34>
 800aab6:	463c      	mov	r4, r7
 800aab8:	687f      	ldr	r7, [r7, #4]
 800aaba:	e7b6      	b.n	800aa2a <_malloc_r+0x4a>
 800aabc:	461a      	mov	r2, r3
 800aabe:	685b      	ldr	r3, [r3, #4]
 800aac0:	42a3      	cmp	r3, r4
 800aac2:	d1fb      	bne.n	800aabc <_malloc_r+0xdc>
 800aac4:	2300      	movs	r3, #0
 800aac6:	6053      	str	r3, [r2, #4]
 800aac8:	e7de      	b.n	800aa88 <_malloc_r+0xa8>
 800aaca:	230c      	movs	r3, #12
 800aacc:	6033      	str	r3, [r6, #0]
 800aace:	4630      	mov	r0, r6
 800aad0:	f000 f80c 	bl	800aaec <__malloc_unlock>
 800aad4:	e794      	b.n	800aa00 <_malloc_r+0x20>
 800aad6:	6005      	str	r5, [r0, #0]
 800aad8:	e7d6      	b.n	800aa88 <_malloc_r+0xa8>
 800aada:	bf00      	nop
 800aadc:	20000ab8 	.word	0x20000ab8

0800aae0 <__malloc_lock>:
 800aae0:	4801      	ldr	r0, [pc, #4]	@ (800aae8 <__malloc_lock+0x8>)
 800aae2:	f000 b9d6 	b.w	800ae92 <__retarget_lock_acquire_recursive>
 800aae6:	bf00      	nop
 800aae8:	20000bfc 	.word	0x20000bfc

0800aaec <__malloc_unlock>:
 800aaec:	4801      	ldr	r0, [pc, #4]	@ (800aaf4 <__malloc_unlock+0x8>)
 800aaee:	f000 b9d1 	b.w	800ae94 <__retarget_lock_release_recursive>
 800aaf2:	bf00      	nop
 800aaf4:	20000bfc 	.word	0x20000bfc

0800aaf8 <rand>:
 800aaf8:	4b16      	ldr	r3, [pc, #88]	@ (800ab54 <rand+0x5c>)
 800aafa:	b510      	push	{r4, lr}
 800aafc:	681c      	ldr	r4, [r3, #0]
 800aafe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ab00:	b9b3      	cbnz	r3, 800ab30 <rand+0x38>
 800ab02:	2018      	movs	r0, #24
 800ab04:	f7ff ff3a 	bl	800a97c <malloc>
 800ab08:	4602      	mov	r2, r0
 800ab0a:	6320      	str	r0, [r4, #48]	@ 0x30
 800ab0c:	b920      	cbnz	r0, 800ab18 <rand+0x20>
 800ab0e:	4b12      	ldr	r3, [pc, #72]	@ (800ab58 <rand+0x60>)
 800ab10:	4812      	ldr	r0, [pc, #72]	@ (800ab5c <rand+0x64>)
 800ab12:	2152      	movs	r1, #82	@ 0x52
 800ab14:	f000 f9c0 	bl	800ae98 <__assert_func>
 800ab18:	4911      	ldr	r1, [pc, #68]	@ (800ab60 <rand+0x68>)
 800ab1a:	4b12      	ldr	r3, [pc, #72]	@ (800ab64 <rand+0x6c>)
 800ab1c:	e9c0 1300 	strd	r1, r3, [r0]
 800ab20:	4b11      	ldr	r3, [pc, #68]	@ (800ab68 <rand+0x70>)
 800ab22:	6083      	str	r3, [r0, #8]
 800ab24:	230b      	movs	r3, #11
 800ab26:	8183      	strh	r3, [r0, #12]
 800ab28:	2100      	movs	r1, #0
 800ab2a:	2001      	movs	r0, #1
 800ab2c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800ab30:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ab32:	480e      	ldr	r0, [pc, #56]	@ (800ab6c <rand+0x74>)
 800ab34:	690b      	ldr	r3, [r1, #16]
 800ab36:	694c      	ldr	r4, [r1, #20]
 800ab38:	4a0d      	ldr	r2, [pc, #52]	@ (800ab70 <rand+0x78>)
 800ab3a:	4358      	muls	r0, r3
 800ab3c:	fb02 0004 	mla	r0, r2, r4, r0
 800ab40:	fba3 3202 	umull	r3, r2, r3, r2
 800ab44:	3301      	adds	r3, #1
 800ab46:	eb40 0002 	adc.w	r0, r0, r2
 800ab4a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800ab4e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800ab52:	bd10      	pop	{r4, pc}
 800ab54:	20000038 	.word	0x20000038
 800ab58:	0800c9dc 	.word	0x0800c9dc
 800ab5c:	0800c9f3 	.word	0x0800c9f3
 800ab60:	abcd330e 	.word	0xabcd330e
 800ab64:	e66d1234 	.word	0xe66d1234
 800ab68:	0005deec 	.word	0x0005deec
 800ab6c:	5851f42d 	.word	0x5851f42d
 800ab70:	4c957f2d 	.word	0x4c957f2d

0800ab74 <std>:
 800ab74:	2300      	movs	r3, #0
 800ab76:	b510      	push	{r4, lr}
 800ab78:	4604      	mov	r4, r0
 800ab7a:	e9c0 3300 	strd	r3, r3, [r0]
 800ab7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab82:	6083      	str	r3, [r0, #8]
 800ab84:	8181      	strh	r1, [r0, #12]
 800ab86:	6643      	str	r3, [r0, #100]	@ 0x64
 800ab88:	81c2      	strh	r2, [r0, #14]
 800ab8a:	6183      	str	r3, [r0, #24]
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	2208      	movs	r2, #8
 800ab90:	305c      	adds	r0, #92	@ 0x5c
 800ab92:	f000 f8f4 	bl	800ad7e <memset>
 800ab96:	4b0d      	ldr	r3, [pc, #52]	@ (800abcc <std+0x58>)
 800ab98:	6263      	str	r3, [r4, #36]	@ 0x24
 800ab9a:	4b0d      	ldr	r3, [pc, #52]	@ (800abd0 <std+0x5c>)
 800ab9c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ab9e:	4b0d      	ldr	r3, [pc, #52]	@ (800abd4 <std+0x60>)
 800aba0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800aba2:	4b0d      	ldr	r3, [pc, #52]	@ (800abd8 <std+0x64>)
 800aba4:	6323      	str	r3, [r4, #48]	@ 0x30
 800aba6:	4b0d      	ldr	r3, [pc, #52]	@ (800abdc <std+0x68>)
 800aba8:	6224      	str	r4, [r4, #32]
 800abaa:	429c      	cmp	r4, r3
 800abac:	d006      	beq.n	800abbc <std+0x48>
 800abae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800abb2:	4294      	cmp	r4, r2
 800abb4:	d002      	beq.n	800abbc <std+0x48>
 800abb6:	33d0      	adds	r3, #208	@ 0xd0
 800abb8:	429c      	cmp	r4, r3
 800abba:	d105      	bne.n	800abc8 <std+0x54>
 800abbc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800abc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abc4:	f000 b964 	b.w	800ae90 <__retarget_lock_init_recursive>
 800abc8:	bd10      	pop	{r4, pc}
 800abca:	bf00      	nop
 800abcc:	0800acf9 	.word	0x0800acf9
 800abd0:	0800ad1b 	.word	0x0800ad1b
 800abd4:	0800ad53 	.word	0x0800ad53
 800abd8:	0800ad77 	.word	0x0800ad77
 800abdc:	20000abc 	.word	0x20000abc

0800abe0 <stdio_exit_handler>:
 800abe0:	4a02      	ldr	r2, [pc, #8]	@ (800abec <stdio_exit_handler+0xc>)
 800abe2:	4903      	ldr	r1, [pc, #12]	@ (800abf0 <stdio_exit_handler+0x10>)
 800abe4:	4803      	ldr	r0, [pc, #12]	@ (800abf4 <stdio_exit_handler+0x14>)
 800abe6:	f000 b869 	b.w	800acbc <_fwalk_sglue>
 800abea:	bf00      	nop
 800abec:	2000002c 	.word	0x2000002c
 800abf0:	0800b071 	.word	0x0800b071
 800abf4:	2000003c 	.word	0x2000003c

0800abf8 <cleanup_stdio>:
 800abf8:	6841      	ldr	r1, [r0, #4]
 800abfa:	4b0c      	ldr	r3, [pc, #48]	@ (800ac2c <cleanup_stdio+0x34>)
 800abfc:	4299      	cmp	r1, r3
 800abfe:	b510      	push	{r4, lr}
 800ac00:	4604      	mov	r4, r0
 800ac02:	d001      	beq.n	800ac08 <cleanup_stdio+0x10>
 800ac04:	f000 fa34 	bl	800b070 <_fflush_r>
 800ac08:	68a1      	ldr	r1, [r4, #8]
 800ac0a:	4b09      	ldr	r3, [pc, #36]	@ (800ac30 <cleanup_stdio+0x38>)
 800ac0c:	4299      	cmp	r1, r3
 800ac0e:	d002      	beq.n	800ac16 <cleanup_stdio+0x1e>
 800ac10:	4620      	mov	r0, r4
 800ac12:	f000 fa2d 	bl	800b070 <_fflush_r>
 800ac16:	68e1      	ldr	r1, [r4, #12]
 800ac18:	4b06      	ldr	r3, [pc, #24]	@ (800ac34 <cleanup_stdio+0x3c>)
 800ac1a:	4299      	cmp	r1, r3
 800ac1c:	d004      	beq.n	800ac28 <cleanup_stdio+0x30>
 800ac1e:	4620      	mov	r0, r4
 800ac20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac24:	f000 ba24 	b.w	800b070 <_fflush_r>
 800ac28:	bd10      	pop	{r4, pc}
 800ac2a:	bf00      	nop
 800ac2c:	20000abc 	.word	0x20000abc
 800ac30:	20000b24 	.word	0x20000b24
 800ac34:	20000b8c 	.word	0x20000b8c

0800ac38 <global_stdio_init.part.0>:
 800ac38:	b510      	push	{r4, lr}
 800ac3a:	4b0b      	ldr	r3, [pc, #44]	@ (800ac68 <global_stdio_init.part.0+0x30>)
 800ac3c:	4c0b      	ldr	r4, [pc, #44]	@ (800ac6c <global_stdio_init.part.0+0x34>)
 800ac3e:	4a0c      	ldr	r2, [pc, #48]	@ (800ac70 <global_stdio_init.part.0+0x38>)
 800ac40:	601a      	str	r2, [r3, #0]
 800ac42:	4620      	mov	r0, r4
 800ac44:	2200      	movs	r2, #0
 800ac46:	2104      	movs	r1, #4
 800ac48:	f7ff ff94 	bl	800ab74 <std>
 800ac4c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ac50:	2201      	movs	r2, #1
 800ac52:	2109      	movs	r1, #9
 800ac54:	f7ff ff8e 	bl	800ab74 <std>
 800ac58:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ac5c:	2202      	movs	r2, #2
 800ac5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac62:	2112      	movs	r1, #18
 800ac64:	f7ff bf86 	b.w	800ab74 <std>
 800ac68:	20000bf4 	.word	0x20000bf4
 800ac6c:	20000abc 	.word	0x20000abc
 800ac70:	0800abe1 	.word	0x0800abe1

0800ac74 <__sfp_lock_acquire>:
 800ac74:	4801      	ldr	r0, [pc, #4]	@ (800ac7c <__sfp_lock_acquire+0x8>)
 800ac76:	f000 b90c 	b.w	800ae92 <__retarget_lock_acquire_recursive>
 800ac7a:	bf00      	nop
 800ac7c:	20000bfd 	.word	0x20000bfd

0800ac80 <__sfp_lock_release>:
 800ac80:	4801      	ldr	r0, [pc, #4]	@ (800ac88 <__sfp_lock_release+0x8>)
 800ac82:	f000 b907 	b.w	800ae94 <__retarget_lock_release_recursive>
 800ac86:	bf00      	nop
 800ac88:	20000bfd 	.word	0x20000bfd

0800ac8c <__sinit>:
 800ac8c:	b510      	push	{r4, lr}
 800ac8e:	4604      	mov	r4, r0
 800ac90:	f7ff fff0 	bl	800ac74 <__sfp_lock_acquire>
 800ac94:	6a23      	ldr	r3, [r4, #32]
 800ac96:	b11b      	cbz	r3, 800aca0 <__sinit+0x14>
 800ac98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac9c:	f7ff bff0 	b.w	800ac80 <__sfp_lock_release>
 800aca0:	4b04      	ldr	r3, [pc, #16]	@ (800acb4 <__sinit+0x28>)
 800aca2:	6223      	str	r3, [r4, #32]
 800aca4:	4b04      	ldr	r3, [pc, #16]	@ (800acb8 <__sinit+0x2c>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d1f5      	bne.n	800ac98 <__sinit+0xc>
 800acac:	f7ff ffc4 	bl	800ac38 <global_stdio_init.part.0>
 800acb0:	e7f2      	b.n	800ac98 <__sinit+0xc>
 800acb2:	bf00      	nop
 800acb4:	0800abf9 	.word	0x0800abf9
 800acb8:	20000bf4 	.word	0x20000bf4

0800acbc <_fwalk_sglue>:
 800acbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acc0:	4607      	mov	r7, r0
 800acc2:	4688      	mov	r8, r1
 800acc4:	4614      	mov	r4, r2
 800acc6:	2600      	movs	r6, #0
 800acc8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800accc:	f1b9 0901 	subs.w	r9, r9, #1
 800acd0:	d505      	bpl.n	800acde <_fwalk_sglue+0x22>
 800acd2:	6824      	ldr	r4, [r4, #0]
 800acd4:	2c00      	cmp	r4, #0
 800acd6:	d1f7      	bne.n	800acc8 <_fwalk_sglue+0xc>
 800acd8:	4630      	mov	r0, r6
 800acda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acde:	89ab      	ldrh	r3, [r5, #12]
 800ace0:	2b01      	cmp	r3, #1
 800ace2:	d907      	bls.n	800acf4 <_fwalk_sglue+0x38>
 800ace4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ace8:	3301      	adds	r3, #1
 800acea:	d003      	beq.n	800acf4 <_fwalk_sglue+0x38>
 800acec:	4629      	mov	r1, r5
 800acee:	4638      	mov	r0, r7
 800acf0:	47c0      	blx	r8
 800acf2:	4306      	orrs	r6, r0
 800acf4:	3568      	adds	r5, #104	@ 0x68
 800acf6:	e7e9      	b.n	800accc <_fwalk_sglue+0x10>

0800acf8 <__sread>:
 800acf8:	b510      	push	{r4, lr}
 800acfa:	460c      	mov	r4, r1
 800acfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad00:	f000 f868 	bl	800add4 <_read_r>
 800ad04:	2800      	cmp	r0, #0
 800ad06:	bfab      	itete	ge
 800ad08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ad0a:	89a3      	ldrhlt	r3, [r4, #12]
 800ad0c:	181b      	addge	r3, r3, r0
 800ad0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ad12:	bfac      	ite	ge
 800ad14:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ad16:	81a3      	strhlt	r3, [r4, #12]
 800ad18:	bd10      	pop	{r4, pc}

0800ad1a <__swrite>:
 800ad1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad1e:	461f      	mov	r7, r3
 800ad20:	898b      	ldrh	r3, [r1, #12]
 800ad22:	05db      	lsls	r3, r3, #23
 800ad24:	4605      	mov	r5, r0
 800ad26:	460c      	mov	r4, r1
 800ad28:	4616      	mov	r6, r2
 800ad2a:	d505      	bpl.n	800ad38 <__swrite+0x1e>
 800ad2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad30:	2302      	movs	r3, #2
 800ad32:	2200      	movs	r2, #0
 800ad34:	f000 f83c 	bl	800adb0 <_lseek_r>
 800ad38:	89a3      	ldrh	r3, [r4, #12]
 800ad3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ad42:	81a3      	strh	r3, [r4, #12]
 800ad44:	4632      	mov	r2, r6
 800ad46:	463b      	mov	r3, r7
 800ad48:	4628      	mov	r0, r5
 800ad4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad4e:	f000 b863 	b.w	800ae18 <_write_r>

0800ad52 <__sseek>:
 800ad52:	b510      	push	{r4, lr}
 800ad54:	460c      	mov	r4, r1
 800ad56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad5a:	f000 f829 	bl	800adb0 <_lseek_r>
 800ad5e:	1c43      	adds	r3, r0, #1
 800ad60:	89a3      	ldrh	r3, [r4, #12]
 800ad62:	bf15      	itete	ne
 800ad64:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ad66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ad6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ad6e:	81a3      	strheq	r3, [r4, #12]
 800ad70:	bf18      	it	ne
 800ad72:	81a3      	strhne	r3, [r4, #12]
 800ad74:	bd10      	pop	{r4, pc}

0800ad76 <__sclose>:
 800ad76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad7a:	f000 b809 	b.w	800ad90 <_close_r>

0800ad7e <memset>:
 800ad7e:	4402      	add	r2, r0
 800ad80:	4603      	mov	r3, r0
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d100      	bne.n	800ad88 <memset+0xa>
 800ad86:	4770      	bx	lr
 800ad88:	f803 1b01 	strb.w	r1, [r3], #1
 800ad8c:	e7f9      	b.n	800ad82 <memset+0x4>
	...

0800ad90 <_close_r>:
 800ad90:	b538      	push	{r3, r4, r5, lr}
 800ad92:	4d06      	ldr	r5, [pc, #24]	@ (800adac <_close_r+0x1c>)
 800ad94:	2300      	movs	r3, #0
 800ad96:	4604      	mov	r4, r0
 800ad98:	4608      	mov	r0, r1
 800ad9a:	602b      	str	r3, [r5, #0]
 800ad9c:	f7f6 fece 	bl	8001b3c <_close>
 800ada0:	1c43      	adds	r3, r0, #1
 800ada2:	d102      	bne.n	800adaa <_close_r+0x1a>
 800ada4:	682b      	ldr	r3, [r5, #0]
 800ada6:	b103      	cbz	r3, 800adaa <_close_r+0x1a>
 800ada8:	6023      	str	r3, [r4, #0]
 800adaa:	bd38      	pop	{r3, r4, r5, pc}
 800adac:	20000bf8 	.word	0x20000bf8

0800adb0 <_lseek_r>:
 800adb0:	b538      	push	{r3, r4, r5, lr}
 800adb2:	4d07      	ldr	r5, [pc, #28]	@ (800add0 <_lseek_r+0x20>)
 800adb4:	4604      	mov	r4, r0
 800adb6:	4608      	mov	r0, r1
 800adb8:	4611      	mov	r1, r2
 800adba:	2200      	movs	r2, #0
 800adbc:	602a      	str	r2, [r5, #0]
 800adbe:	461a      	mov	r2, r3
 800adc0:	f7f6 fee3 	bl	8001b8a <_lseek>
 800adc4:	1c43      	adds	r3, r0, #1
 800adc6:	d102      	bne.n	800adce <_lseek_r+0x1e>
 800adc8:	682b      	ldr	r3, [r5, #0]
 800adca:	b103      	cbz	r3, 800adce <_lseek_r+0x1e>
 800adcc:	6023      	str	r3, [r4, #0]
 800adce:	bd38      	pop	{r3, r4, r5, pc}
 800add0:	20000bf8 	.word	0x20000bf8

0800add4 <_read_r>:
 800add4:	b538      	push	{r3, r4, r5, lr}
 800add6:	4d07      	ldr	r5, [pc, #28]	@ (800adf4 <_read_r+0x20>)
 800add8:	4604      	mov	r4, r0
 800adda:	4608      	mov	r0, r1
 800addc:	4611      	mov	r1, r2
 800adde:	2200      	movs	r2, #0
 800ade0:	602a      	str	r2, [r5, #0]
 800ade2:	461a      	mov	r2, r3
 800ade4:	f7f6 fe71 	bl	8001aca <_read>
 800ade8:	1c43      	adds	r3, r0, #1
 800adea:	d102      	bne.n	800adf2 <_read_r+0x1e>
 800adec:	682b      	ldr	r3, [r5, #0]
 800adee:	b103      	cbz	r3, 800adf2 <_read_r+0x1e>
 800adf0:	6023      	str	r3, [r4, #0]
 800adf2:	bd38      	pop	{r3, r4, r5, pc}
 800adf4:	20000bf8 	.word	0x20000bf8

0800adf8 <_sbrk_r>:
 800adf8:	b538      	push	{r3, r4, r5, lr}
 800adfa:	4d06      	ldr	r5, [pc, #24]	@ (800ae14 <_sbrk_r+0x1c>)
 800adfc:	2300      	movs	r3, #0
 800adfe:	4604      	mov	r4, r0
 800ae00:	4608      	mov	r0, r1
 800ae02:	602b      	str	r3, [r5, #0]
 800ae04:	f7f6 fece 	bl	8001ba4 <_sbrk>
 800ae08:	1c43      	adds	r3, r0, #1
 800ae0a:	d102      	bne.n	800ae12 <_sbrk_r+0x1a>
 800ae0c:	682b      	ldr	r3, [r5, #0]
 800ae0e:	b103      	cbz	r3, 800ae12 <_sbrk_r+0x1a>
 800ae10:	6023      	str	r3, [r4, #0]
 800ae12:	bd38      	pop	{r3, r4, r5, pc}
 800ae14:	20000bf8 	.word	0x20000bf8

0800ae18 <_write_r>:
 800ae18:	b538      	push	{r3, r4, r5, lr}
 800ae1a:	4d07      	ldr	r5, [pc, #28]	@ (800ae38 <_write_r+0x20>)
 800ae1c:	4604      	mov	r4, r0
 800ae1e:	4608      	mov	r0, r1
 800ae20:	4611      	mov	r1, r2
 800ae22:	2200      	movs	r2, #0
 800ae24:	602a      	str	r2, [r5, #0]
 800ae26:	461a      	mov	r2, r3
 800ae28:	f7f6 fe6c 	bl	8001b04 <_write>
 800ae2c:	1c43      	adds	r3, r0, #1
 800ae2e:	d102      	bne.n	800ae36 <_write_r+0x1e>
 800ae30:	682b      	ldr	r3, [r5, #0]
 800ae32:	b103      	cbz	r3, 800ae36 <_write_r+0x1e>
 800ae34:	6023      	str	r3, [r4, #0]
 800ae36:	bd38      	pop	{r3, r4, r5, pc}
 800ae38:	20000bf8 	.word	0x20000bf8

0800ae3c <__errno>:
 800ae3c:	4b01      	ldr	r3, [pc, #4]	@ (800ae44 <__errno+0x8>)
 800ae3e:	6818      	ldr	r0, [r3, #0]
 800ae40:	4770      	bx	lr
 800ae42:	bf00      	nop
 800ae44:	20000038 	.word	0x20000038

0800ae48 <__libc_init_array>:
 800ae48:	b570      	push	{r4, r5, r6, lr}
 800ae4a:	4d0d      	ldr	r5, [pc, #52]	@ (800ae80 <__libc_init_array+0x38>)
 800ae4c:	4c0d      	ldr	r4, [pc, #52]	@ (800ae84 <__libc_init_array+0x3c>)
 800ae4e:	1b64      	subs	r4, r4, r5
 800ae50:	10a4      	asrs	r4, r4, #2
 800ae52:	2600      	movs	r6, #0
 800ae54:	42a6      	cmp	r6, r4
 800ae56:	d109      	bne.n	800ae6c <__libc_init_array+0x24>
 800ae58:	4d0b      	ldr	r5, [pc, #44]	@ (800ae88 <__libc_init_array+0x40>)
 800ae5a:	4c0c      	ldr	r4, [pc, #48]	@ (800ae8c <__libc_init_array+0x44>)
 800ae5c:	f001 fda4 	bl	800c9a8 <_init>
 800ae60:	1b64      	subs	r4, r4, r5
 800ae62:	10a4      	asrs	r4, r4, #2
 800ae64:	2600      	movs	r6, #0
 800ae66:	42a6      	cmp	r6, r4
 800ae68:	d105      	bne.n	800ae76 <__libc_init_array+0x2e>
 800ae6a:	bd70      	pop	{r4, r5, r6, pc}
 800ae6c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae70:	4798      	blx	r3
 800ae72:	3601      	adds	r6, #1
 800ae74:	e7ee      	b.n	800ae54 <__libc_init_array+0xc>
 800ae76:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae7a:	4798      	blx	r3
 800ae7c:	3601      	adds	r6, #1
 800ae7e:	e7f2      	b.n	800ae66 <__libc_init_array+0x1e>
 800ae80:	0800cca0 	.word	0x0800cca0
 800ae84:	0800cca0 	.word	0x0800cca0
 800ae88:	0800cca0 	.word	0x0800cca0
 800ae8c:	0800cca4 	.word	0x0800cca4

0800ae90 <__retarget_lock_init_recursive>:
 800ae90:	4770      	bx	lr

0800ae92 <__retarget_lock_acquire_recursive>:
 800ae92:	4770      	bx	lr

0800ae94 <__retarget_lock_release_recursive>:
 800ae94:	4770      	bx	lr
	...

0800ae98 <__assert_func>:
 800ae98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae9a:	4614      	mov	r4, r2
 800ae9c:	461a      	mov	r2, r3
 800ae9e:	4b09      	ldr	r3, [pc, #36]	@ (800aec4 <__assert_func+0x2c>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	4605      	mov	r5, r0
 800aea4:	68d8      	ldr	r0, [r3, #12]
 800aea6:	b954      	cbnz	r4, 800aebe <__assert_func+0x26>
 800aea8:	4b07      	ldr	r3, [pc, #28]	@ (800aec8 <__assert_func+0x30>)
 800aeaa:	461c      	mov	r4, r3
 800aeac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aeb0:	9100      	str	r1, [sp, #0]
 800aeb2:	462b      	mov	r3, r5
 800aeb4:	4905      	ldr	r1, [pc, #20]	@ (800aecc <__assert_func+0x34>)
 800aeb6:	f000 f903 	bl	800b0c0 <fiprintf>
 800aeba:	f000 f913 	bl	800b0e4 <abort>
 800aebe:	4b04      	ldr	r3, [pc, #16]	@ (800aed0 <__assert_func+0x38>)
 800aec0:	e7f4      	b.n	800aeac <__assert_func+0x14>
 800aec2:	bf00      	nop
 800aec4:	20000038 	.word	0x20000038
 800aec8:	0800ca86 	.word	0x0800ca86
 800aecc:	0800ca58 	.word	0x0800ca58
 800aed0:	0800ca4b 	.word	0x0800ca4b

0800aed4 <_free_r>:
 800aed4:	b538      	push	{r3, r4, r5, lr}
 800aed6:	4605      	mov	r5, r0
 800aed8:	2900      	cmp	r1, #0
 800aeda:	d041      	beq.n	800af60 <_free_r+0x8c>
 800aedc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aee0:	1f0c      	subs	r4, r1, #4
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	bfb8      	it	lt
 800aee6:	18e4      	addlt	r4, r4, r3
 800aee8:	f7ff fdfa 	bl	800aae0 <__malloc_lock>
 800aeec:	4a1d      	ldr	r2, [pc, #116]	@ (800af64 <_free_r+0x90>)
 800aeee:	6813      	ldr	r3, [r2, #0]
 800aef0:	b933      	cbnz	r3, 800af00 <_free_r+0x2c>
 800aef2:	6063      	str	r3, [r4, #4]
 800aef4:	6014      	str	r4, [r2, #0]
 800aef6:	4628      	mov	r0, r5
 800aef8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aefc:	f7ff bdf6 	b.w	800aaec <__malloc_unlock>
 800af00:	42a3      	cmp	r3, r4
 800af02:	d908      	bls.n	800af16 <_free_r+0x42>
 800af04:	6820      	ldr	r0, [r4, #0]
 800af06:	1821      	adds	r1, r4, r0
 800af08:	428b      	cmp	r3, r1
 800af0a:	bf01      	itttt	eq
 800af0c:	6819      	ldreq	r1, [r3, #0]
 800af0e:	685b      	ldreq	r3, [r3, #4]
 800af10:	1809      	addeq	r1, r1, r0
 800af12:	6021      	streq	r1, [r4, #0]
 800af14:	e7ed      	b.n	800aef2 <_free_r+0x1e>
 800af16:	461a      	mov	r2, r3
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	b10b      	cbz	r3, 800af20 <_free_r+0x4c>
 800af1c:	42a3      	cmp	r3, r4
 800af1e:	d9fa      	bls.n	800af16 <_free_r+0x42>
 800af20:	6811      	ldr	r1, [r2, #0]
 800af22:	1850      	adds	r0, r2, r1
 800af24:	42a0      	cmp	r0, r4
 800af26:	d10b      	bne.n	800af40 <_free_r+0x6c>
 800af28:	6820      	ldr	r0, [r4, #0]
 800af2a:	4401      	add	r1, r0
 800af2c:	1850      	adds	r0, r2, r1
 800af2e:	4283      	cmp	r3, r0
 800af30:	6011      	str	r1, [r2, #0]
 800af32:	d1e0      	bne.n	800aef6 <_free_r+0x22>
 800af34:	6818      	ldr	r0, [r3, #0]
 800af36:	685b      	ldr	r3, [r3, #4]
 800af38:	6053      	str	r3, [r2, #4]
 800af3a:	4408      	add	r0, r1
 800af3c:	6010      	str	r0, [r2, #0]
 800af3e:	e7da      	b.n	800aef6 <_free_r+0x22>
 800af40:	d902      	bls.n	800af48 <_free_r+0x74>
 800af42:	230c      	movs	r3, #12
 800af44:	602b      	str	r3, [r5, #0]
 800af46:	e7d6      	b.n	800aef6 <_free_r+0x22>
 800af48:	6820      	ldr	r0, [r4, #0]
 800af4a:	1821      	adds	r1, r4, r0
 800af4c:	428b      	cmp	r3, r1
 800af4e:	bf04      	itt	eq
 800af50:	6819      	ldreq	r1, [r3, #0]
 800af52:	685b      	ldreq	r3, [r3, #4]
 800af54:	6063      	str	r3, [r4, #4]
 800af56:	bf04      	itt	eq
 800af58:	1809      	addeq	r1, r1, r0
 800af5a:	6021      	streq	r1, [r4, #0]
 800af5c:	6054      	str	r4, [r2, #4]
 800af5e:	e7ca      	b.n	800aef6 <_free_r+0x22>
 800af60:	bd38      	pop	{r3, r4, r5, pc}
 800af62:	bf00      	nop
 800af64:	20000ab8 	.word	0x20000ab8

0800af68 <__sflush_r>:
 800af68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800af6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af70:	0716      	lsls	r6, r2, #28
 800af72:	4605      	mov	r5, r0
 800af74:	460c      	mov	r4, r1
 800af76:	d454      	bmi.n	800b022 <__sflush_r+0xba>
 800af78:	684b      	ldr	r3, [r1, #4]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	dc02      	bgt.n	800af84 <__sflush_r+0x1c>
 800af7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800af80:	2b00      	cmp	r3, #0
 800af82:	dd48      	ble.n	800b016 <__sflush_r+0xae>
 800af84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800af86:	2e00      	cmp	r6, #0
 800af88:	d045      	beq.n	800b016 <__sflush_r+0xae>
 800af8a:	2300      	movs	r3, #0
 800af8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800af90:	682f      	ldr	r7, [r5, #0]
 800af92:	6a21      	ldr	r1, [r4, #32]
 800af94:	602b      	str	r3, [r5, #0]
 800af96:	d030      	beq.n	800affa <__sflush_r+0x92>
 800af98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800af9a:	89a3      	ldrh	r3, [r4, #12]
 800af9c:	0759      	lsls	r1, r3, #29
 800af9e:	d505      	bpl.n	800afac <__sflush_r+0x44>
 800afa0:	6863      	ldr	r3, [r4, #4]
 800afa2:	1ad2      	subs	r2, r2, r3
 800afa4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800afa6:	b10b      	cbz	r3, 800afac <__sflush_r+0x44>
 800afa8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800afaa:	1ad2      	subs	r2, r2, r3
 800afac:	2300      	movs	r3, #0
 800afae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800afb0:	6a21      	ldr	r1, [r4, #32]
 800afb2:	4628      	mov	r0, r5
 800afb4:	47b0      	blx	r6
 800afb6:	1c43      	adds	r3, r0, #1
 800afb8:	89a3      	ldrh	r3, [r4, #12]
 800afba:	d106      	bne.n	800afca <__sflush_r+0x62>
 800afbc:	6829      	ldr	r1, [r5, #0]
 800afbe:	291d      	cmp	r1, #29
 800afc0:	d82b      	bhi.n	800b01a <__sflush_r+0xb2>
 800afc2:	4a2a      	ldr	r2, [pc, #168]	@ (800b06c <__sflush_r+0x104>)
 800afc4:	410a      	asrs	r2, r1
 800afc6:	07d6      	lsls	r6, r2, #31
 800afc8:	d427      	bmi.n	800b01a <__sflush_r+0xb2>
 800afca:	2200      	movs	r2, #0
 800afcc:	6062      	str	r2, [r4, #4]
 800afce:	04d9      	lsls	r1, r3, #19
 800afd0:	6922      	ldr	r2, [r4, #16]
 800afd2:	6022      	str	r2, [r4, #0]
 800afd4:	d504      	bpl.n	800afe0 <__sflush_r+0x78>
 800afd6:	1c42      	adds	r2, r0, #1
 800afd8:	d101      	bne.n	800afde <__sflush_r+0x76>
 800afda:	682b      	ldr	r3, [r5, #0]
 800afdc:	b903      	cbnz	r3, 800afe0 <__sflush_r+0x78>
 800afde:	6560      	str	r0, [r4, #84]	@ 0x54
 800afe0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800afe2:	602f      	str	r7, [r5, #0]
 800afe4:	b1b9      	cbz	r1, 800b016 <__sflush_r+0xae>
 800afe6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800afea:	4299      	cmp	r1, r3
 800afec:	d002      	beq.n	800aff4 <__sflush_r+0x8c>
 800afee:	4628      	mov	r0, r5
 800aff0:	f7ff ff70 	bl	800aed4 <_free_r>
 800aff4:	2300      	movs	r3, #0
 800aff6:	6363      	str	r3, [r4, #52]	@ 0x34
 800aff8:	e00d      	b.n	800b016 <__sflush_r+0xae>
 800affa:	2301      	movs	r3, #1
 800affc:	4628      	mov	r0, r5
 800affe:	47b0      	blx	r6
 800b000:	4602      	mov	r2, r0
 800b002:	1c50      	adds	r0, r2, #1
 800b004:	d1c9      	bne.n	800af9a <__sflush_r+0x32>
 800b006:	682b      	ldr	r3, [r5, #0]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d0c6      	beq.n	800af9a <__sflush_r+0x32>
 800b00c:	2b1d      	cmp	r3, #29
 800b00e:	d001      	beq.n	800b014 <__sflush_r+0xac>
 800b010:	2b16      	cmp	r3, #22
 800b012:	d11e      	bne.n	800b052 <__sflush_r+0xea>
 800b014:	602f      	str	r7, [r5, #0]
 800b016:	2000      	movs	r0, #0
 800b018:	e022      	b.n	800b060 <__sflush_r+0xf8>
 800b01a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b01e:	b21b      	sxth	r3, r3
 800b020:	e01b      	b.n	800b05a <__sflush_r+0xf2>
 800b022:	690f      	ldr	r7, [r1, #16]
 800b024:	2f00      	cmp	r7, #0
 800b026:	d0f6      	beq.n	800b016 <__sflush_r+0xae>
 800b028:	0793      	lsls	r3, r2, #30
 800b02a:	680e      	ldr	r6, [r1, #0]
 800b02c:	bf08      	it	eq
 800b02e:	694b      	ldreq	r3, [r1, #20]
 800b030:	600f      	str	r7, [r1, #0]
 800b032:	bf18      	it	ne
 800b034:	2300      	movne	r3, #0
 800b036:	eba6 0807 	sub.w	r8, r6, r7
 800b03a:	608b      	str	r3, [r1, #8]
 800b03c:	f1b8 0f00 	cmp.w	r8, #0
 800b040:	dde9      	ble.n	800b016 <__sflush_r+0xae>
 800b042:	6a21      	ldr	r1, [r4, #32]
 800b044:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b046:	4643      	mov	r3, r8
 800b048:	463a      	mov	r2, r7
 800b04a:	4628      	mov	r0, r5
 800b04c:	47b0      	blx	r6
 800b04e:	2800      	cmp	r0, #0
 800b050:	dc08      	bgt.n	800b064 <__sflush_r+0xfc>
 800b052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b056:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b05a:	81a3      	strh	r3, [r4, #12]
 800b05c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b064:	4407      	add	r7, r0
 800b066:	eba8 0800 	sub.w	r8, r8, r0
 800b06a:	e7e7      	b.n	800b03c <__sflush_r+0xd4>
 800b06c:	dfbffffe 	.word	0xdfbffffe

0800b070 <_fflush_r>:
 800b070:	b538      	push	{r3, r4, r5, lr}
 800b072:	690b      	ldr	r3, [r1, #16]
 800b074:	4605      	mov	r5, r0
 800b076:	460c      	mov	r4, r1
 800b078:	b913      	cbnz	r3, 800b080 <_fflush_r+0x10>
 800b07a:	2500      	movs	r5, #0
 800b07c:	4628      	mov	r0, r5
 800b07e:	bd38      	pop	{r3, r4, r5, pc}
 800b080:	b118      	cbz	r0, 800b08a <_fflush_r+0x1a>
 800b082:	6a03      	ldr	r3, [r0, #32]
 800b084:	b90b      	cbnz	r3, 800b08a <_fflush_r+0x1a>
 800b086:	f7ff fe01 	bl	800ac8c <__sinit>
 800b08a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d0f3      	beq.n	800b07a <_fflush_r+0xa>
 800b092:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b094:	07d0      	lsls	r0, r2, #31
 800b096:	d404      	bmi.n	800b0a2 <_fflush_r+0x32>
 800b098:	0599      	lsls	r1, r3, #22
 800b09a:	d402      	bmi.n	800b0a2 <_fflush_r+0x32>
 800b09c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b09e:	f7ff fef8 	bl	800ae92 <__retarget_lock_acquire_recursive>
 800b0a2:	4628      	mov	r0, r5
 800b0a4:	4621      	mov	r1, r4
 800b0a6:	f7ff ff5f 	bl	800af68 <__sflush_r>
 800b0aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b0ac:	07da      	lsls	r2, r3, #31
 800b0ae:	4605      	mov	r5, r0
 800b0b0:	d4e4      	bmi.n	800b07c <_fflush_r+0xc>
 800b0b2:	89a3      	ldrh	r3, [r4, #12]
 800b0b4:	059b      	lsls	r3, r3, #22
 800b0b6:	d4e1      	bmi.n	800b07c <_fflush_r+0xc>
 800b0b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b0ba:	f7ff feeb 	bl	800ae94 <__retarget_lock_release_recursive>
 800b0be:	e7dd      	b.n	800b07c <_fflush_r+0xc>

0800b0c0 <fiprintf>:
 800b0c0:	b40e      	push	{r1, r2, r3}
 800b0c2:	b503      	push	{r0, r1, lr}
 800b0c4:	4601      	mov	r1, r0
 800b0c6:	ab03      	add	r3, sp, #12
 800b0c8:	4805      	ldr	r0, [pc, #20]	@ (800b0e0 <fiprintf+0x20>)
 800b0ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0ce:	6800      	ldr	r0, [r0, #0]
 800b0d0:	9301      	str	r3, [sp, #4]
 800b0d2:	f000 f837 	bl	800b144 <_vfiprintf_r>
 800b0d6:	b002      	add	sp, #8
 800b0d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0dc:	b003      	add	sp, #12
 800b0de:	4770      	bx	lr
 800b0e0:	20000038 	.word	0x20000038

0800b0e4 <abort>:
 800b0e4:	b508      	push	{r3, lr}
 800b0e6:	2006      	movs	r0, #6
 800b0e8:	f000 fb8e 	bl	800b808 <raise>
 800b0ec:	2001      	movs	r0, #1
 800b0ee:	f7f6 fce1 	bl	8001ab4 <_exit>

0800b0f2 <__sfputc_r>:
 800b0f2:	6893      	ldr	r3, [r2, #8]
 800b0f4:	3b01      	subs	r3, #1
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	b410      	push	{r4}
 800b0fa:	6093      	str	r3, [r2, #8]
 800b0fc:	da08      	bge.n	800b110 <__sfputc_r+0x1e>
 800b0fe:	6994      	ldr	r4, [r2, #24]
 800b100:	42a3      	cmp	r3, r4
 800b102:	db01      	blt.n	800b108 <__sfputc_r+0x16>
 800b104:	290a      	cmp	r1, #10
 800b106:	d103      	bne.n	800b110 <__sfputc_r+0x1e>
 800b108:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b10c:	f000 bac0 	b.w	800b690 <__swbuf_r>
 800b110:	6813      	ldr	r3, [r2, #0]
 800b112:	1c58      	adds	r0, r3, #1
 800b114:	6010      	str	r0, [r2, #0]
 800b116:	7019      	strb	r1, [r3, #0]
 800b118:	4608      	mov	r0, r1
 800b11a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b11e:	4770      	bx	lr

0800b120 <__sfputs_r>:
 800b120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b122:	4606      	mov	r6, r0
 800b124:	460f      	mov	r7, r1
 800b126:	4614      	mov	r4, r2
 800b128:	18d5      	adds	r5, r2, r3
 800b12a:	42ac      	cmp	r4, r5
 800b12c:	d101      	bne.n	800b132 <__sfputs_r+0x12>
 800b12e:	2000      	movs	r0, #0
 800b130:	e007      	b.n	800b142 <__sfputs_r+0x22>
 800b132:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b136:	463a      	mov	r2, r7
 800b138:	4630      	mov	r0, r6
 800b13a:	f7ff ffda 	bl	800b0f2 <__sfputc_r>
 800b13e:	1c43      	adds	r3, r0, #1
 800b140:	d1f3      	bne.n	800b12a <__sfputs_r+0xa>
 800b142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b144 <_vfiprintf_r>:
 800b144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b148:	460d      	mov	r5, r1
 800b14a:	b09d      	sub	sp, #116	@ 0x74
 800b14c:	4614      	mov	r4, r2
 800b14e:	4698      	mov	r8, r3
 800b150:	4606      	mov	r6, r0
 800b152:	b118      	cbz	r0, 800b15c <_vfiprintf_r+0x18>
 800b154:	6a03      	ldr	r3, [r0, #32]
 800b156:	b90b      	cbnz	r3, 800b15c <_vfiprintf_r+0x18>
 800b158:	f7ff fd98 	bl	800ac8c <__sinit>
 800b15c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b15e:	07d9      	lsls	r1, r3, #31
 800b160:	d405      	bmi.n	800b16e <_vfiprintf_r+0x2a>
 800b162:	89ab      	ldrh	r3, [r5, #12]
 800b164:	059a      	lsls	r2, r3, #22
 800b166:	d402      	bmi.n	800b16e <_vfiprintf_r+0x2a>
 800b168:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b16a:	f7ff fe92 	bl	800ae92 <__retarget_lock_acquire_recursive>
 800b16e:	89ab      	ldrh	r3, [r5, #12]
 800b170:	071b      	lsls	r3, r3, #28
 800b172:	d501      	bpl.n	800b178 <_vfiprintf_r+0x34>
 800b174:	692b      	ldr	r3, [r5, #16]
 800b176:	b99b      	cbnz	r3, 800b1a0 <_vfiprintf_r+0x5c>
 800b178:	4629      	mov	r1, r5
 800b17a:	4630      	mov	r0, r6
 800b17c:	f000 fac6 	bl	800b70c <__swsetup_r>
 800b180:	b170      	cbz	r0, 800b1a0 <_vfiprintf_r+0x5c>
 800b182:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b184:	07dc      	lsls	r4, r3, #31
 800b186:	d504      	bpl.n	800b192 <_vfiprintf_r+0x4e>
 800b188:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b18c:	b01d      	add	sp, #116	@ 0x74
 800b18e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b192:	89ab      	ldrh	r3, [r5, #12]
 800b194:	0598      	lsls	r0, r3, #22
 800b196:	d4f7      	bmi.n	800b188 <_vfiprintf_r+0x44>
 800b198:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b19a:	f7ff fe7b 	bl	800ae94 <__retarget_lock_release_recursive>
 800b19e:	e7f3      	b.n	800b188 <_vfiprintf_r+0x44>
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1a4:	2320      	movs	r3, #32
 800b1a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b1aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1ae:	2330      	movs	r3, #48	@ 0x30
 800b1b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b360 <_vfiprintf_r+0x21c>
 800b1b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b1b8:	f04f 0901 	mov.w	r9, #1
 800b1bc:	4623      	mov	r3, r4
 800b1be:	469a      	mov	sl, r3
 800b1c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1c4:	b10a      	cbz	r2, 800b1ca <_vfiprintf_r+0x86>
 800b1c6:	2a25      	cmp	r2, #37	@ 0x25
 800b1c8:	d1f9      	bne.n	800b1be <_vfiprintf_r+0x7a>
 800b1ca:	ebba 0b04 	subs.w	fp, sl, r4
 800b1ce:	d00b      	beq.n	800b1e8 <_vfiprintf_r+0xa4>
 800b1d0:	465b      	mov	r3, fp
 800b1d2:	4622      	mov	r2, r4
 800b1d4:	4629      	mov	r1, r5
 800b1d6:	4630      	mov	r0, r6
 800b1d8:	f7ff ffa2 	bl	800b120 <__sfputs_r>
 800b1dc:	3001      	adds	r0, #1
 800b1de:	f000 80a7 	beq.w	800b330 <_vfiprintf_r+0x1ec>
 800b1e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1e4:	445a      	add	r2, fp
 800b1e6:	9209      	str	r2, [sp, #36]	@ 0x24
 800b1e8:	f89a 3000 	ldrb.w	r3, [sl]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	f000 809f 	beq.w	800b330 <_vfiprintf_r+0x1ec>
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b1f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b1fc:	f10a 0a01 	add.w	sl, sl, #1
 800b200:	9304      	str	r3, [sp, #16]
 800b202:	9307      	str	r3, [sp, #28]
 800b204:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b208:	931a      	str	r3, [sp, #104]	@ 0x68
 800b20a:	4654      	mov	r4, sl
 800b20c:	2205      	movs	r2, #5
 800b20e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b212:	4853      	ldr	r0, [pc, #332]	@ (800b360 <_vfiprintf_r+0x21c>)
 800b214:	f7f4 ffdc 	bl	80001d0 <memchr>
 800b218:	9a04      	ldr	r2, [sp, #16]
 800b21a:	b9d8      	cbnz	r0, 800b254 <_vfiprintf_r+0x110>
 800b21c:	06d1      	lsls	r1, r2, #27
 800b21e:	bf44      	itt	mi
 800b220:	2320      	movmi	r3, #32
 800b222:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b226:	0713      	lsls	r3, r2, #28
 800b228:	bf44      	itt	mi
 800b22a:	232b      	movmi	r3, #43	@ 0x2b
 800b22c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b230:	f89a 3000 	ldrb.w	r3, [sl]
 800b234:	2b2a      	cmp	r3, #42	@ 0x2a
 800b236:	d015      	beq.n	800b264 <_vfiprintf_r+0x120>
 800b238:	9a07      	ldr	r2, [sp, #28]
 800b23a:	4654      	mov	r4, sl
 800b23c:	2000      	movs	r0, #0
 800b23e:	f04f 0c0a 	mov.w	ip, #10
 800b242:	4621      	mov	r1, r4
 800b244:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b248:	3b30      	subs	r3, #48	@ 0x30
 800b24a:	2b09      	cmp	r3, #9
 800b24c:	d94b      	bls.n	800b2e6 <_vfiprintf_r+0x1a2>
 800b24e:	b1b0      	cbz	r0, 800b27e <_vfiprintf_r+0x13a>
 800b250:	9207      	str	r2, [sp, #28]
 800b252:	e014      	b.n	800b27e <_vfiprintf_r+0x13a>
 800b254:	eba0 0308 	sub.w	r3, r0, r8
 800b258:	fa09 f303 	lsl.w	r3, r9, r3
 800b25c:	4313      	orrs	r3, r2
 800b25e:	9304      	str	r3, [sp, #16]
 800b260:	46a2      	mov	sl, r4
 800b262:	e7d2      	b.n	800b20a <_vfiprintf_r+0xc6>
 800b264:	9b03      	ldr	r3, [sp, #12]
 800b266:	1d19      	adds	r1, r3, #4
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	9103      	str	r1, [sp, #12]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	bfbb      	ittet	lt
 800b270:	425b      	neglt	r3, r3
 800b272:	f042 0202 	orrlt.w	r2, r2, #2
 800b276:	9307      	strge	r3, [sp, #28]
 800b278:	9307      	strlt	r3, [sp, #28]
 800b27a:	bfb8      	it	lt
 800b27c:	9204      	strlt	r2, [sp, #16]
 800b27e:	7823      	ldrb	r3, [r4, #0]
 800b280:	2b2e      	cmp	r3, #46	@ 0x2e
 800b282:	d10a      	bne.n	800b29a <_vfiprintf_r+0x156>
 800b284:	7863      	ldrb	r3, [r4, #1]
 800b286:	2b2a      	cmp	r3, #42	@ 0x2a
 800b288:	d132      	bne.n	800b2f0 <_vfiprintf_r+0x1ac>
 800b28a:	9b03      	ldr	r3, [sp, #12]
 800b28c:	1d1a      	adds	r2, r3, #4
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	9203      	str	r2, [sp, #12]
 800b292:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b296:	3402      	adds	r4, #2
 800b298:	9305      	str	r3, [sp, #20]
 800b29a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b370 <_vfiprintf_r+0x22c>
 800b29e:	7821      	ldrb	r1, [r4, #0]
 800b2a0:	2203      	movs	r2, #3
 800b2a2:	4650      	mov	r0, sl
 800b2a4:	f7f4 ff94 	bl	80001d0 <memchr>
 800b2a8:	b138      	cbz	r0, 800b2ba <_vfiprintf_r+0x176>
 800b2aa:	9b04      	ldr	r3, [sp, #16]
 800b2ac:	eba0 000a 	sub.w	r0, r0, sl
 800b2b0:	2240      	movs	r2, #64	@ 0x40
 800b2b2:	4082      	lsls	r2, r0
 800b2b4:	4313      	orrs	r3, r2
 800b2b6:	3401      	adds	r4, #1
 800b2b8:	9304      	str	r3, [sp, #16]
 800b2ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2be:	4829      	ldr	r0, [pc, #164]	@ (800b364 <_vfiprintf_r+0x220>)
 800b2c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b2c4:	2206      	movs	r2, #6
 800b2c6:	f7f4 ff83 	bl	80001d0 <memchr>
 800b2ca:	2800      	cmp	r0, #0
 800b2cc:	d03f      	beq.n	800b34e <_vfiprintf_r+0x20a>
 800b2ce:	4b26      	ldr	r3, [pc, #152]	@ (800b368 <_vfiprintf_r+0x224>)
 800b2d0:	bb1b      	cbnz	r3, 800b31a <_vfiprintf_r+0x1d6>
 800b2d2:	9b03      	ldr	r3, [sp, #12]
 800b2d4:	3307      	adds	r3, #7
 800b2d6:	f023 0307 	bic.w	r3, r3, #7
 800b2da:	3308      	adds	r3, #8
 800b2dc:	9303      	str	r3, [sp, #12]
 800b2de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2e0:	443b      	add	r3, r7
 800b2e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2e4:	e76a      	b.n	800b1bc <_vfiprintf_r+0x78>
 800b2e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2ea:	460c      	mov	r4, r1
 800b2ec:	2001      	movs	r0, #1
 800b2ee:	e7a8      	b.n	800b242 <_vfiprintf_r+0xfe>
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	3401      	adds	r4, #1
 800b2f4:	9305      	str	r3, [sp, #20]
 800b2f6:	4619      	mov	r1, r3
 800b2f8:	f04f 0c0a 	mov.w	ip, #10
 800b2fc:	4620      	mov	r0, r4
 800b2fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b302:	3a30      	subs	r2, #48	@ 0x30
 800b304:	2a09      	cmp	r2, #9
 800b306:	d903      	bls.n	800b310 <_vfiprintf_r+0x1cc>
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d0c6      	beq.n	800b29a <_vfiprintf_r+0x156>
 800b30c:	9105      	str	r1, [sp, #20]
 800b30e:	e7c4      	b.n	800b29a <_vfiprintf_r+0x156>
 800b310:	fb0c 2101 	mla	r1, ip, r1, r2
 800b314:	4604      	mov	r4, r0
 800b316:	2301      	movs	r3, #1
 800b318:	e7f0      	b.n	800b2fc <_vfiprintf_r+0x1b8>
 800b31a:	ab03      	add	r3, sp, #12
 800b31c:	9300      	str	r3, [sp, #0]
 800b31e:	462a      	mov	r2, r5
 800b320:	4b12      	ldr	r3, [pc, #72]	@ (800b36c <_vfiprintf_r+0x228>)
 800b322:	a904      	add	r1, sp, #16
 800b324:	4630      	mov	r0, r6
 800b326:	f3af 8000 	nop.w
 800b32a:	4607      	mov	r7, r0
 800b32c:	1c78      	adds	r0, r7, #1
 800b32e:	d1d6      	bne.n	800b2de <_vfiprintf_r+0x19a>
 800b330:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b332:	07d9      	lsls	r1, r3, #31
 800b334:	d405      	bmi.n	800b342 <_vfiprintf_r+0x1fe>
 800b336:	89ab      	ldrh	r3, [r5, #12]
 800b338:	059a      	lsls	r2, r3, #22
 800b33a:	d402      	bmi.n	800b342 <_vfiprintf_r+0x1fe>
 800b33c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b33e:	f7ff fda9 	bl	800ae94 <__retarget_lock_release_recursive>
 800b342:	89ab      	ldrh	r3, [r5, #12]
 800b344:	065b      	lsls	r3, r3, #25
 800b346:	f53f af1f 	bmi.w	800b188 <_vfiprintf_r+0x44>
 800b34a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b34c:	e71e      	b.n	800b18c <_vfiprintf_r+0x48>
 800b34e:	ab03      	add	r3, sp, #12
 800b350:	9300      	str	r3, [sp, #0]
 800b352:	462a      	mov	r2, r5
 800b354:	4b05      	ldr	r3, [pc, #20]	@ (800b36c <_vfiprintf_r+0x228>)
 800b356:	a904      	add	r1, sp, #16
 800b358:	4630      	mov	r0, r6
 800b35a:	f000 f879 	bl	800b450 <_printf_i>
 800b35e:	e7e4      	b.n	800b32a <_vfiprintf_r+0x1e6>
 800b360:	0800ca87 	.word	0x0800ca87
 800b364:	0800ca91 	.word	0x0800ca91
 800b368:	00000000 	.word	0x00000000
 800b36c:	0800b121 	.word	0x0800b121
 800b370:	0800ca8d 	.word	0x0800ca8d

0800b374 <_printf_common>:
 800b374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b378:	4616      	mov	r6, r2
 800b37a:	4698      	mov	r8, r3
 800b37c:	688a      	ldr	r2, [r1, #8]
 800b37e:	690b      	ldr	r3, [r1, #16]
 800b380:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b384:	4293      	cmp	r3, r2
 800b386:	bfb8      	it	lt
 800b388:	4613      	movlt	r3, r2
 800b38a:	6033      	str	r3, [r6, #0]
 800b38c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b390:	4607      	mov	r7, r0
 800b392:	460c      	mov	r4, r1
 800b394:	b10a      	cbz	r2, 800b39a <_printf_common+0x26>
 800b396:	3301      	adds	r3, #1
 800b398:	6033      	str	r3, [r6, #0]
 800b39a:	6823      	ldr	r3, [r4, #0]
 800b39c:	0699      	lsls	r1, r3, #26
 800b39e:	bf42      	ittt	mi
 800b3a0:	6833      	ldrmi	r3, [r6, #0]
 800b3a2:	3302      	addmi	r3, #2
 800b3a4:	6033      	strmi	r3, [r6, #0]
 800b3a6:	6825      	ldr	r5, [r4, #0]
 800b3a8:	f015 0506 	ands.w	r5, r5, #6
 800b3ac:	d106      	bne.n	800b3bc <_printf_common+0x48>
 800b3ae:	f104 0a19 	add.w	sl, r4, #25
 800b3b2:	68e3      	ldr	r3, [r4, #12]
 800b3b4:	6832      	ldr	r2, [r6, #0]
 800b3b6:	1a9b      	subs	r3, r3, r2
 800b3b8:	42ab      	cmp	r3, r5
 800b3ba:	dc26      	bgt.n	800b40a <_printf_common+0x96>
 800b3bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b3c0:	6822      	ldr	r2, [r4, #0]
 800b3c2:	3b00      	subs	r3, #0
 800b3c4:	bf18      	it	ne
 800b3c6:	2301      	movne	r3, #1
 800b3c8:	0692      	lsls	r2, r2, #26
 800b3ca:	d42b      	bmi.n	800b424 <_printf_common+0xb0>
 800b3cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b3d0:	4641      	mov	r1, r8
 800b3d2:	4638      	mov	r0, r7
 800b3d4:	47c8      	blx	r9
 800b3d6:	3001      	adds	r0, #1
 800b3d8:	d01e      	beq.n	800b418 <_printf_common+0xa4>
 800b3da:	6823      	ldr	r3, [r4, #0]
 800b3dc:	6922      	ldr	r2, [r4, #16]
 800b3de:	f003 0306 	and.w	r3, r3, #6
 800b3e2:	2b04      	cmp	r3, #4
 800b3e4:	bf02      	ittt	eq
 800b3e6:	68e5      	ldreq	r5, [r4, #12]
 800b3e8:	6833      	ldreq	r3, [r6, #0]
 800b3ea:	1aed      	subeq	r5, r5, r3
 800b3ec:	68a3      	ldr	r3, [r4, #8]
 800b3ee:	bf0c      	ite	eq
 800b3f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b3f4:	2500      	movne	r5, #0
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	bfc4      	itt	gt
 800b3fa:	1a9b      	subgt	r3, r3, r2
 800b3fc:	18ed      	addgt	r5, r5, r3
 800b3fe:	2600      	movs	r6, #0
 800b400:	341a      	adds	r4, #26
 800b402:	42b5      	cmp	r5, r6
 800b404:	d11a      	bne.n	800b43c <_printf_common+0xc8>
 800b406:	2000      	movs	r0, #0
 800b408:	e008      	b.n	800b41c <_printf_common+0xa8>
 800b40a:	2301      	movs	r3, #1
 800b40c:	4652      	mov	r2, sl
 800b40e:	4641      	mov	r1, r8
 800b410:	4638      	mov	r0, r7
 800b412:	47c8      	blx	r9
 800b414:	3001      	adds	r0, #1
 800b416:	d103      	bne.n	800b420 <_printf_common+0xac>
 800b418:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b41c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b420:	3501      	adds	r5, #1
 800b422:	e7c6      	b.n	800b3b2 <_printf_common+0x3e>
 800b424:	18e1      	adds	r1, r4, r3
 800b426:	1c5a      	adds	r2, r3, #1
 800b428:	2030      	movs	r0, #48	@ 0x30
 800b42a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b42e:	4422      	add	r2, r4
 800b430:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b434:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b438:	3302      	adds	r3, #2
 800b43a:	e7c7      	b.n	800b3cc <_printf_common+0x58>
 800b43c:	2301      	movs	r3, #1
 800b43e:	4622      	mov	r2, r4
 800b440:	4641      	mov	r1, r8
 800b442:	4638      	mov	r0, r7
 800b444:	47c8      	blx	r9
 800b446:	3001      	adds	r0, #1
 800b448:	d0e6      	beq.n	800b418 <_printf_common+0xa4>
 800b44a:	3601      	adds	r6, #1
 800b44c:	e7d9      	b.n	800b402 <_printf_common+0x8e>
	...

0800b450 <_printf_i>:
 800b450:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b454:	7e0f      	ldrb	r7, [r1, #24]
 800b456:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b458:	2f78      	cmp	r7, #120	@ 0x78
 800b45a:	4691      	mov	r9, r2
 800b45c:	4680      	mov	r8, r0
 800b45e:	460c      	mov	r4, r1
 800b460:	469a      	mov	sl, r3
 800b462:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b466:	d807      	bhi.n	800b478 <_printf_i+0x28>
 800b468:	2f62      	cmp	r7, #98	@ 0x62
 800b46a:	d80a      	bhi.n	800b482 <_printf_i+0x32>
 800b46c:	2f00      	cmp	r7, #0
 800b46e:	f000 80d2 	beq.w	800b616 <_printf_i+0x1c6>
 800b472:	2f58      	cmp	r7, #88	@ 0x58
 800b474:	f000 80b9 	beq.w	800b5ea <_printf_i+0x19a>
 800b478:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b47c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b480:	e03a      	b.n	800b4f8 <_printf_i+0xa8>
 800b482:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b486:	2b15      	cmp	r3, #21
 800b488:	d8f6      	bhi.n	800b478 <_printf_i+0x28>
 800b48a:	a101      	add	r1, pc, #4	@ (adr r1, 800b490 <_printf_i+0x40>)
 800b48c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b490:	0800b4e9 	.word	0x0800b4e9
 800b494:	0800b4fd 	.word	0x0800b4fd
 800b498:	0800b479 	.word	0x0800b479
 800b49c:	0800b479 	.word	0x0800b479
 800b4a0:	0800b479 	.word	0x0800b479
 800b4a4:	0800b479 	.word	0x0800b479
 800b4a8:	0800b4fd 	.word	0x0800b4fd
 800b4ac:	0800b479 	.word	0x0800b479
 800b4b0:	0800b479 	.word	0x0800b479
 800b4b4:	0800b479 	.word	0x0800b479
 800b4b8:	0800b479 	.word	0x0800b479
 800b4bc:	0800b5fd 	.word	0x0800b5fd
 800b4c0:	0800b527 	.word	0x0800b527
 800b4c4:	0800b5b7 	.word	0x0800b5b7
 800b4c8:	0800b479 	.word	0x0800b479
 800b4cc:	0800b479 	.word	0x0800b479
 800b4d0:	0800b61f 	.word	0x0800b61f
 800b4d4:	0800b479 	.word	0x0800b479
 800b4d8:	0800b527 	.word	0x0800b527
 800b4dc:	0800b479 	.word	0x0800b479
 800b4e0:	0800b479 	.word	0x0800b479
 800b4e4:	0800b5bf 	.word	0x0800b5bf
 800b4e8:	6833      	ldr	r3, [r6, #0]
 800b4ea:	1d1a      	adds	r2, r3, #4
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	6032      	str	r2, [r6, #0]
 800b4f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b4f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	e09d      	b.n	800b638 <_printf_i+0x1e8>
 800b4fc:	6833      	ldr	r3, [r6, #0]
 800b4fe:	6820      	ldr	r0, [r4, #0]
 800b500:	1d19      	adds	r1, r3, #4
 800b502:	6031      	str	r1, [r6, #0]
 800b504:	0606      	lsls	r6, r0, #24
 800b506:	d501      	bpl.n	800b50c <_printf_i+0xbc>
 800b508:	681d      	ldr	r5, [r3, #0]
 800b50a:	e003      	b.n	800b514 <_printf_i+0xc4>
 800b50c:	0645      	lsls	r5, r0, #25
 800b50e:	d5fb      	bpl.n	800b508 <_printf_i+0xb8>
 800b510:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b514:	2d00      	cmp	r5, #0
 800b516:	da03      	bge.n	800b520 <_printf_i+0xd0>
 800b518:	232d      	movs	r3, #45	@ 0x2d
 800b51a:	426d      	negs	r5, r5
 800b51c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b520:	4859      	ldr	r0, [pc, #356]	@ (800b688 <_printf_i+0x238>)
 800b522:	230a      	movs	r3, #10
 800b524:	e011      	b.n	800b54a <_printf_i+0xfa>
 800b526:	6821      	ldr	r1, [r4, #0]
 800b528:	6833      	ldr	r3, [r6, #0]
 800b52a:	0608      	lsls	r0, r1, #24
 800b52c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b530:	d402      	bmi.n	800b538 <_printf_i+0xe8>
 800b532:	0649      	lsls	r1, r1, #25
 800b534:	bf48      	it	mi
 800b536:	b2ad      	uxthmi	r5, r5
 800b538:	2f6f      	cmp	r7, #111	@ 0x6f
 800b53a:	4853      	ldr	r0, [pc, #332]	@ (800b688 <_printf_i+0x238>)
 800b53c:	6033      	str	r3, [r6, #0]
 800b53e:	bf14      	ite	ne
 800b540:	230a      	movne	r3, #10
 800b542:	2308      	moveq	r3, #8
 800b544:	2100      	movs	r1, #0
 800b546:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b54a:	6866      	ldr	r6, [r4, #4]
 800b54c:	60a6      	str	r6, [r4, #8]
 800b54e:	2e00      	cmp	r6, #0
 800b550:	bfa2      	ittt	ge
 800b552:	6821      	ldrge	r1, [r4, #0]
 800b554:	f021 0104 	bicge.w	r1, r1, #4
 800b558:	6021      	strge	r1, [r4, #0]
 800b55a:	b90d      	cbnz	r5, 800b560 <_printf_i+0x110>
 800b55c:	2e00      	cmp	r6, #0
 800b55e:	d04b      	beq.n	800b5f8 <_printf_i+0x1a8>
 800b560:	4616      	mov	r6, r2
 800b562:	fbb5 f1f3 	udiv	r1, r5, r3
 800b566:	fb03 5711 	mls	r7, r3, r1, r5
 800b56a:	5dc7      	ldrb	r7, [r0, r7]
 800b56c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b570:	462f      	mov	r7, r5
 800b572:	42bb      	cmp	r3, r7
 800b574:	460d      	mov	r5, r1
 800b576:	d9f4      	bls.n	800b562 <_printf_i+0x112>
 800b578:	2b08      	cmp	r3, #8
 800b57a:	d10b      	bne.n	800b594 <_printf_i+0x144>
 800b57c:	6823      	ldr	r3, [r4, #0]
 800b57e:	07df      	lsls	r7, r3, #31
 800b580:	d508      	bpl.n	800b594 <_printf_i+0x144>
 800b582:	6923      	ldr	r3, [r4, #16]
 800b584:	6861      	ldr	r1, [r4, #4]
 800b586:	4299      	cmp	r1, r3
 800b588:	bfde      	ittt	le
 800b58a:	2330      	movle	r3, #48	@ 0x30
 800b58c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b590:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b594:	1b92      	subs	r2, r2, r6
 800b596:	6122      	str	r2, [r4, #16]
 800b598:	f8cd a000 	str.w	sl, [sp]
 800b59c:	464b      	mov	r3, r9
 800b59e:	aa03      	add	r2, sp, #12
 800b5a0:	4621      	mov	r1, r4
 800b5a2:	4640      	mov	r0, r8
 800b5a4:	f7ff fee6 	bl	800b374 <_printf_common>
 800b5a8:	3001      	adds	r0, #1
 800b5aa:	d14a      	bne.n	800b642 <_printf_i+0x1f2>
 800b5ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b5b0:	b004      	add	sp, #16
 800b5b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5b6:	6823      	ldr	r3, [r4, #0]
 800b5b8:	f043 0320 	orr.w	r3, r3, #32
 800b5bc:	6023      	str	r3, [r4, #0]
 800b5be:	4833      	ldr	r0, [pc, #204]	@ (800b68c <_printf_i+0x23c>)
 800b5c0:	2778      	movs	r7, #120	@ 0x78
 800b5c2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b5c6:	6823      	ldr	r3, [r4, #0]
 800b5c8:	6831      	ldr	r1, [r6, #0]
 800b5ca:	061f      	lsls	r7, r3, #24
 800b5cc:	f851 5b04 	ldr.w	r5, [r1], #4
 800b5d0:	d402      	bmi.n	800b5d8 <_printf_i+0x188>
 800b5d2:	065f      	lsls	r7, r3, #25
 800b5d4:	bf48      	it	mi
 800b5d6:	b2ad      	uxthmi	r5, r5
 800b5d8:	6031      	str	r1, [r6, #0]
 800b5da:	07d9      	lsls	r1, r3, #31
 800b5dc:	bf44      	itt	mi
 800b5de:	f043 0320 	orrmi.w	r3, r3, #32
 800b5e2:	6023      	strmi	r3, [r4, #0]
 800b5e4:	b11d      	cbz	r5, 800b5ee <_printf_i+0x19e>
 800b5e6:	2310      	movs	r3, #16
 800b5e8:	e7ac      	b.n	800b544 <_printf_i+0xf4>
 800b5ea:	4827      	ldr	r0, [pc, #156]	@ (800b688 <_printf_i+0x238>)
 800b5ec:	e7e9      	b.n	800b5c2 <_printf_i+0x172>
 800b5ee:	6823      	ldr	r3, [r4, #0]
 800b5f0:	f023 0320 	bic.w	r3, r3, #32
 800b5f4:	6023      	str	r3, [r4, #0]
 800b5f6:	e7f6      	b.n	800b5e6 <_printf_i+0x196>
 800b5f8:	4616      	mov	r6, r2
 800b5fa:	e7bd      	b.n	800b578 <_printf_i+0x128>
 800b5fc:	6833      	ldr	r3, [r6, #0]
 800b5fe:	6825      	ldr	r5, [r4, #0]
 800b600:	6961      	ldr	r1, [r4, #20]
 800b602:	1d18      	adds	r0, r3, #4
 800b604:	6030      	str	r0, [r6, #0]
 800b606:	062e      	lsls	r6, r5, #24
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	d501      	bpl.n	800b610 <_printf_i+0x1c0>
 800b60c:	6019      	str	r1, [r3, #0]
 800b60e:	e002      	b.n	800b616 <_printf_i+0x1c6>
 800b610:	0668      	lsls	r0, r5, #25
 800b612:	d5fb      	bpl.n	800b60c <_printf_i+0x1bc>
 800b614:	8019      	strh	r1, [r3, #0]
 800b616:	2300      	movs	r3, #0
 800b618:	6123      	str	r3, [r4, #16]
 800b61a:	4616      	mov	r6, r2
 800b61c:	e7bc      	b.n	800b598 <_printf_i+0x148>
 800b61e:	6833      	ldr	r3, [r6, #0]
 800b620:	1d1a      	adds	r2, r3, #4
 800b622:	6032      	str	r2, [r6, #0]
 800b624:	681e      	ldr	r6, [r3, #0]
 800b626:	6862      	ldr	r2, [r4, #4]
 800b628:	2100      	movs	r1, #0
 800b62a:	4630      	mov	r0, r6
 800b62c:	f7f4 fdd0 	bl	80001d0 <memchr>
 800b630:	b108      	cbz	r0, 800b636 <_printf_i+0x1e6>
 800b632:	1b80      	subs	r0, r0, r6
 800b634:	6060      	str	r0, [r4, #4]
 800b636:	6863      	ldr	r3, [r4, #4]
 800b638:	6123      	str	r3, [r4, #16]
 800b63a:	2300      	movs	r3, #0
 800b63c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b640:	e7aa      	b.n	800b598 <_printf_i+0x148>
 800b642:	6923      	ldr	r3, [r4, #16]
 800b644:	4632      	mov	r2, r6
 800b646:	4649      	mov	r1, r9
 800b648:	4640      	mov	r0, r8
 800b64a:	47d0      	blx	sl
 800b64c:	3001      	adds	r0, #1
 800b64e:	d0ad      	beq.n	800b5ac <_printf_i+0x15c>
 800b650:	6823      	ldr	r3, [r4, #0]
 800b652:	079b      	lsls	r3, r3, #30
 800b654:	d413      	bmi.n	800b67e <_printf_i+0x22e>
 800b656:	68e0      	ldr	r0, [r4, #12]
 800b658:	9b03      	ldr	r3, [sp, #12]
 800b65a:	4298      	cmp	r0, r3
 800b65c:	bfb8      	it	lt
 800b65e:	4618      	movlt	r0, r3
 800b660:	e7a6      	b.n	800b5b0 <_printf_i+0x160>
 800b662:	2301      	movs	r3, #1
 800b664:	4632      	mov	r2, r6
 800b666:	4649      	mov	r1, r9
 800b668:	4640      	mov	r0, r8
 800b66a:	47d0      	blx	sl
 800b66c:	3001      	adds	r0, #1
 800b66e:	d09d      	beq.n	800b5ac <_printf_i+0x15c>
 800b670:	3501      	adds	r5, #1
 800b672:	68e3      	ldr	r3, [r4, #12]
 800b674:	9903      	ldr	r1, [sp, #12]
 800b676:	1a5b      	subs	r3, r3, r1
 800b678:	42ab      	cmp	r3, r5
 800b67a:	dcf2      	bgt.n	800b662 <_printf_i+0x212>
 800b67c:	e7eb      	b.n	800b656 <_printf_i+0x206>
 800b67e:	2500      	movs	r5, #0
 800b680:	f104 0619 	add.w	r6, r4, #25
 800b684:	e7f5      	b.n	800b672 <_printf_i+0x222>
 800b686:	bf00      	nop
 800b688:	0800ca98 	.word	0x0800ca98
 800b68c:	0800caa9 	.word	0x0800caa9

0800b690 <__swbuf_r>:
 800b690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b692:	460e      	mov	r6, r1
 800b694:	4614      	mov	r4, r2
 800b696:	4605      	mov	r5, r0
 800b698:	b118      	cbz	r0, 800b6a2 <__swbuf_r+0x12>
 800b69a:	6a03      	ldr	r3, [r0, #32]
 800b69c:	b90b      	cbnz	r3, 800b6a2 <__swbuf_r+0x12>
 800b69e:	f7ff faf5 	bl	800ac8c <__sinit>
 800b6a2:	69a3      	ldr	r3, [r4, #24]
 800b6a4:	60a3      	str	r3, [r4, #8]
 800b6a6:	89a3      	ldrh	r3, [r4, #12]
 800b6a8:	071a      	lsls	r2, r3, #28
 800b6aa:	d501      	bpl.n	800b6b0 <__swbuf_r+0x20>
 800b6ac:	6923      	ldr	r3, [r4, #16]
 800b6ae:	b943      	cbnz	r3, 800b6c2 <__swbuf_r+0x32>
 800b6b0:	4621      	mov	r1, r4
 800b6b2:	4628      	mov	r0, r5
 800b6b4:	f000 f82a 	bl	800b70c <__swsetup_r>
 800b6b8:	b118      	cbz	r0, 800b6c2 <__swbuf_r+0x32>
 800b6ba:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b6be:	4638      	mov	r0, r7
 800b6c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6c2:	6823      	ldr	r3, [r4, #0]
 800b6c4:	6922      	ldr	r2, [r4, #16]
 800b6c6:	1a98      	subs	r0, r3, r2
 800b6c8:	6963      	ldr	r3, [r4, #20]
 800b6ca:	b2f6      	uxtb	r6, r6
 800b6cc:	4283      	cmp	r3, r0
 800b6ce:	4637      	mov	r7, r6
 800b6d0:	dc05      	bgt.n	800b6de <__swbuf_r+0x4e>
 800b6d2:	4621      	mov	r1, r4
 800b6d4:	4628      	mov	r0, r5
 800b6d6:	f7ff fccb 	bl	800b070 <_fflush_r>
 800b6da:	2800      	cmp	r0, #0
 800b6dc:	d1ed      	bne.n	800b6ba <__swbuf_r+0x2a>
 800b6de:	68a3      	ldr	r3, [r4, #8]
 800b6e0:	3b01      	subs	r3, #1
 800b6e2:	60a3      	str	r3, [r4, #8]
 800b6e4:	6823      	ldr	r3, [r4, #0]
 800b6e6:	1c5a      	adds	r2, r3, #1
 800b6e8:	6022      	str	r2, [r4, #0]
 800b6ea:	701e      	strb	r6, [r3, #0]
 800b6ec:	6962      	ldr	r2, [r4, #20]
 800b6ee:	1c43      	adds	r3, r0, #1
 800b6f0:	429a      	cmp	r2, r3
 800b6f2:	d004      	beq.n	800b6fe <__swbuf_r+0x6e>
 800b6f4:	89a3      	ldrh	r3, [r4, #12]
 800b6f6:	07db      	lsls	r3, r3, #31
 800b6f8:	d5e1      	bpl.n	800b6be <__swbuf_r+0x2e>
 800b6fa:	2e0a      	cmp	r6, #10
 800b6fc:	d1df      	bne.n	800b6be <__swbuf_r+0x2e>
 800b6fe:	4621      	mov	r1, r4
 800b700:	4628      	mov	r0, r5
 800b702:	f7ff fcb5 	bl	800b070 <_fflush_r>
 800b706:	2800      	cmp	r0, #0
 800b708:	d0d9      	beq.n	800b6be <__swbuf_r+0x2e>
 800b70a:	e7d6      	b.n	800b6ba <__swbuf_r+0x2a>

0800b70c <__swsetup_r>:
 800b70c:	b538      	push	{r3, r4, r5, lr}
 800b70e:	4b29      	ldr	r3, [pc, #164]	@ (800b7b4 <__swsetup_r+0xa8>)
 800b710:	4605      	mov	r5, r0
 800b712:	6818      	ldr	r0, [r3, #0]
 800b714:	460c      	mov	r4, r1
 800b716:	b118      	cbz	r0, 800b720 <__swsetup_r+0x14>
 800b718:	6a03      	ldr	r3, [r0, #32]
 800b71a:	b90b      	cbnz	r3, 800b720 <__swsetup_r+0x14>
 800b71c:	f7ff fab6 	bl	800ac8c <__sinit>
 800b720:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b724:	0719      	lsls	r1, r3, #28
 800b726:	d422      	bmi.n	800b76e <__swsetup_r+0x62>
 800b728:	06da      	lsls	r2, r3, #27
 800b72a:	d407      	bmi.n	800b73c <__swsetup_r+0x30>
 800b72c:	2209      	movs	r2, #9
 800b72e:	602a      	str	r2, [r5, #0]
 800b730:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b734:	81a3      	strh	r3, [r4, #12]
 800b736:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b73a:	e033      	b.n	800b7a4 <__swsetup_r+0x98>
 800b73c:	0758      	lsls	r0, r3, #29
 800b73e:	d512      	bpl.n	800b766 <__swsetup_r+0x5a>
 800b740:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b742:	b141      	cbz	r1, 800b756 <__swsetup_r+0x4a>
 800b744:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b748:	4299      	cmp	r1, r3
 800b74a:	d002      	beq.n	800b752 <__swsetup_r+0x46>
 800b74c:	4628      	mov	r0, r5
 800b74e:	f7ff fbc1 	bl	800aed4 <_free_r>
 800b752:	2300      	movs	r3, #0
 800b754:	6363      	str	r3, [r4, #52]	@ 0x34
 800b756:	89a3      	ldrh	r3, [r4, #12]
 800b758:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b75c:	81a3      	strh	r3, [r4, #12]
 800b75e:	2300      	movs	r3, #0
 800b760:	6063      	str	r3, [r4, #4]
 800b762:	6923      	ldr	r3, [r4, #16]
 800b764:	6023      	str	r3, [r4, #0]
 800b766:	89a3      	ldrh	r3, [r4, #12]
 800b768:	f043 0308 	orr.w	r3, r3, #8
 800b76c:	81a3      	strh	r3, [r4, #12]
 800b76e:	6923      	ldr	r3, [r4, #16]
 800b770:	b94b      	cbnz	r3, 800b786 <__swsetup_r+0x7a>
 800b772:	89a3      	ldrh	r3, [r4, #12]
 800b774:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b778:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b77c:	d003      	beq.n	800b786 <__swsetup_r+0x7a>
 800b77e:	4621      	mov	r1, r4
 800b780:	4628      	mov	r0, r5
 800b782:	f000 f883 	bl	800b88c <__smakebuf_r>
 800b786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b78a:	f013 0201 	ands.w	r2, r3, #1
 800b78e:	d00a      	beq.n	800b7a6 <__swsetup_r+0x9a>
 800b790:	2200      	movs	r2, #0
 800b792:	60a2      	str	r2, [r4, #8]
 800b794:	6962      	ldr	r2, [r4, #20]
 800b796:	4252      	negs	r2, r2
 800b798:	61a2      	str	r2, [r4, #24]
 800b79a:	6922      	ldr	r2, [r4, #16]
 800b79c:	b942      	cbnz	r2, 800b7b0 <__swsetup_r+0xa4>
 800b79e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b7a2:	d1c5      	bne.n	800b730 <__swsetup_r+0x24>
 800b7a4:	bd38      	pop	{r3, r4, r5, pc}
 800b7a6:	0799      	lsls	r1, r3, #30
 800b7a8:	bf58      	it	pl
 800b7aa:	6962      	ldrpl	r2, [r4, #20]
 800b7ac:	60a2      	str	r2, [r4, #8]
 800b7ae:	e7f4      	b.n	800b79a <__swsetup_r+0x8e>
 800b7b0:	2000      	movs	r0, #0
 800b7b2:	e7f7      	b.n	800b7a4 <__swsetup_r+0x98>
 800b7b4:	20000038 	.word	0x20000038

0800b7b8 <_raise_r>:
 800b7b8:	291f      	cmp	r1, #31
 800b7ba:	b538      	push	{r3, r4, r5, lr}
 800b7bc:	4605      	mov	r5, r0
 800b7be:	460c      	mov	r4, r1
 800b7c0:	d904      	bls.n	800b7cc <_raise_r+0x14>
 800b7c2:	2316      	movs	r3, #22
 800b7c4:	6003      	str	r3, [r0, #0]
 800b7c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b7ca:	bd38      	pop	{r3, r4, r5, pc}
 800b7cc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b7ce:	b112      	cbz	r2, 800b7d6 <_raise_r+0x1e>
 800b7d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b7d4:	b94b      	cbnz	r3, 800b7ea <_raise_r+0x32>
 800b7d6:	4628      	mov	r0, r5
 800b7d8:	f000 f830 	bl	800b83c <_getpid_r>
 800b7dc:	4622      	mov	r2, r4
 800b7de:	4601      	mov	r1, r0
 800b7e0:	4628      	mov	r0, r5
 800b7e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7e6:	f000 b817 	b.w	800b818 <_kill_r>
 800b7ea:	2b01      	cmp	r3, #1
 800b7ec:	d00a      	beq.n	800b804 <_raise_r+0x4c>
 800b7ee:	1c59      	adds	r1, r3, #1
 800b7f0:	d103      	bne.n	800b7fa <_raise_r+0x42>
 800b7f2:	2316      	movs	r3, #22
 800b7f4:	6003      	str	r3, [r0, #0]
 800b7f6:	2001      	movs	r0, #1
 800b7f8:	e7e7      	b.n	800b7ca <_raise_r+0x12>
 800b7fa:	2100      	movs	r1, #0
 800b7fc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b800:	4620      	mov	r0, r4
 800b802:	4798      	blx	r3
 800b804:	2000      	movs	r0, #0
 800b806:	e7e0      	b.n	800b7ca <_raise_r+0x12>

0800b808 <raise>:
 800b808:	4b02      	ldr	r3, [pc, #8]	@ (800b814 <raise+0xc>)
 800b80a:	4601      	mov	r1, r0
 800b80c:	6818      	ldr	r0, [r3, #0]
 800b80e:	f7ff bfd3 	b.w	800b7b8 <_raise_r>
 800b812:	bf00      	nop
 800b814:	20000038 	.word	0x20000038

0800b818 <_kill_r>:
 800b818:	b538      	push	{r3, r4, r5, lr}
 800b81a:	4d07      	ldr	r5, [pc, #28]	@ (800b838 <_kill_r+0x20>)
 800b81c:	2300      	movs	r3, #0
 800b81e:	4604      	mov	r4, r0
 800b820:	4608      	mov	r0, r1
 800b822:	4611      	mov	r1, r2
 800b824:	602b      	str	r3, [r5, #0]
 800b826:	f7f6 f935 	bl	8001a94 <_kill>
 800b82a:	1c43      	adds	r3, r0, #1
 800b82c:	d102      	bne.n	800b834 <_kill_r+0x1c>
 800b82e:	682b      	ldr	r3, [r5, #0]
 800b830:	b103      	cbz	r3, 800b834 <_kill_r+0x1c>
 800b832:	6023      	str	r3, [r4, #0]
 800b834:	bd38      	pop	{r3, r4, r5, pc}
 800b836:	bf00      	nop
 800b838:	20000bf8 	.word	0x20000bf8

0800b83c <_getpid_r>:
 800b83c:	f7f6 b922 	b.w	8001a84 <_getpid>

0800b840 <__swhatbuf_r>:
 800b840:	b570      	push	{r4, r5, r6, lr}
 800b842:	460c      	mov	r4, r1
 800b844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b848:	2900      	cmp	r1, #0
 800b84a:	b096      	sub	sp, #88	@ 0x58
 800b84c:	4615      	mov	r5, r2
 800b84e:	461e      	mov	r6, r3
 800b850:	da0d      	bge.n	800b86e <__swhatbuf_r+0x2e>
 800b852:	89a3      	ldrh	r3, [r4, #12]
 800b854:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b858:	f04f 0100 	mov.w	r1, #0
 800b85c:	bf14      	ite	ne
 800b85e:	2340      	movne	r3, #64	@ 0x40
 800b860:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b864:	2000      	movs	r0, #0
 800b866:	6031      	str	r1, [r6, #0]
 800b868:	602b      	str	r3, [r5, #0]
 800b86a:	b016      	add	sp, #88	@ 0x58
 800b86c:	bd70      	pop	{r4, r5, r6, pc}
 800b86e:	466a      	mov	r2, sp
 800b870:	f000 f848 	bl	800b904 <_fstat_r>
 800b874:	2800      	cmp	r0, #0
 800b876:	dbec      	blt.n	800b852 <__swhatbuf_r+0x12>
 800b878:	9901      	ldr	r1, [sp, #4]
 800b87a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b87e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b882:	4259      	negs	r1, r3
 800b884:	4159      	adcs	r1, r3
 800b886:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b88a:	e7eb      	b.n	800b864 <__swhatbuf_r+0x24>

0800b88c <__smakebuf_r>:
 800b88c:	898b      	ldrh	r3, [r1, #12]
 800b88e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b890:	079d      	lsls	r5, r3, #30
 800b892:	4606      	mov	r6, r0
 800b894:	460c      	mov	r4, r1
 800b896:	d507      	bpl.n	800b8a8 <__smakebuf_r+0x1c>
 800b898:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b89c:	6023      	str	r3, [r4, #0]
 800b89e:	6123      	str	r3, [r4, #16]
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	6163      	str	r3, [r4, #20]
 800b8a4:	b003      	add	sp, #12
 800b8a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8a8:	ab01      	add	r3, sp, #4
 800b8aa:	466a      	mov	r2, sp
 800b8ac:	f7ff ffc8 	bl	800b840 <__swhatbuf_r>
 800b8b0:	9f00      	ldr	r7, [sp, #0]
 800b8b2:	4605      	mov	r5, r0
 800b8b4:	4639      	mov	r1, r7
 800b8b6:	4630      	mov	r0, r6
 800b8b8:	f7ff f892 	bl	800a9e0 <_malloc_r>
 800b8bc:	b948      	cbnz	r0, 800b8d2 <__smakebuf_r+0x46>
 800b8be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8c2:	059a      	lsls	r2, r3, #22
 800b8c4:	d4ee      	bmi.n	800b8a4 <__smakebuf_r+0x18>
 800b8c6:	f023 0303 	bic.w	r3, r3, #3
 800b8ca:	f043 0302 	orr.w	r3, r3, #2
 800b8ce:	81a3      	strh	r3, [r4, #12]
 800b8d0:	e7e2      	b.n	800b898 <__smakebuf_r+0xc>
 800b8d2:	89a3      	ldrh	r3, [r4, #12]
 800b8d4:	6020      	str	r0, [r4, #0]
 800b8d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8da:	81a3      	strh	r3, [r4, #12]
 800b8dc:	9b01      	ldr	r3, [sp, #4]
 800b8de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b8e2:	b15b      	cbz	r3, 800b8fc <__smakebuf_r+0x70>
 800b8e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8e8:	4630      	mov	r0, r6
 800b8ea:	f000 f81d 	bl	800b928 <_isatty_r>
 800b8ee:	b128      	cbz	r0, 800b8fc <__smakebuf_r+0x70>
 800b8f0:	89a3      	ldrh	r3, [r4, #12]
 800b8f2:	f023 0303 	bic.w	r3, r3, #3
 800b8f6:	f043 0301 	orr.w	r3, r3, #1
 800b8fa:	81a3      	strh	r3, [r4, #12]
 800b8fc:	89a3      	ldrh	r3, [r4, #12]
 800b8fe:	431d      	orrs	r5, r3
 800b900:	81a5      	strh	r5, [r4, #12]
 800b902:	e7cf      	b.n	800b8a4 <__smakebuf_r+0x18>

0800b904 <_fstat_r>:
 800b904:	b538      	push	{r3, r4, r5, lr}
 800b906:	4d07      	ldr	r5, [pc, #28]	@ (800b924 <_fstat_r+0x20>)
 800b908:	2300      	movs	r3, #0
 800b90a:	4604      	mov	r4, r0
 800b90c:	4608      	mov	r0, r1
 800b90e:	4611      	mov	r1, r2
 800b910:	602b      	str	r3, [r5, #0]
 800b912:	f7f6 f91f 	bl	8001b54 <_fstat>
 800b916:	1c43      	adds	r3, r0, #1
 800b918:	d102      	bne.n	800b920 <_fstat_r+0x1c>
 800b91a:	682b      	ldr	r3, [r5, #0]
 800b91c:	b103      	cbz	r3, 800b920 <_fstat_r+0x1c>
 800b91e:	6023      	str	r3, [r4, #0]
 800b920:	bd38      	pop	{r3, r4, r5, pc}
 800b922:	bf00      	nop
 800b924:	20000bf8 	.word	0x20000bf8

0800b928 <_isatty_r>:
 800b928:	b538      	push	{r3, r4, r5, lr}
 800b92a:	4d06      	ldr	r5, [pc, #24]	@ (800b944 <_isatty_r+0x1c>)
 800b92c:	2300      	movs	r3, #0
 800b92e:	4604      	mov	r4, r0
 800b930:	4608      	mov	r0, r1
 800b932:	602b      	str	r3, [r5, #0]
 800b934:	f7f6 f91e 	bl	8001b74 <_isatty>
 800b938:	1c43      	adds	r3, r0, #1
 800b93a:	d102      	bne.n	800b942 <_isatty_r+0x1a>
 800b93c:	682b      	ldr	r3, [r5, #0]
 800b93e:	b103      	cbz	r3, 800b942 <_isatty_r+0x1a>
 800b940:	6023      	str	r3, [r4, #0]
 800b942:	bd38      	pop	{r3, r4, r5, pc}
 800b944:	20000bf8 	.word	0x20000bf8

0800b948 <sin>:
 800b948:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b94a:	ec53 2b10 	vmov	r2, r3, d0
 800b94e:	4826      	ldr	r0, [pc, #152]	@ (800b9e8 <sin+0xa0>)
 800b950:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b954:	4281      	cmp	r1, r0
 800b956:	d807      	bhi.n	800b968 <sin+0x20>
 800b958:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800b9e0 <sin+0x98>
 800b95c:	2000      	movs	r0, #0
 800b95e:	b005      	add	sp, #20
 800b960:	f85d eb04 	ldr.w	lr, [sp], #4
 800b964:	f000 b90c 	b.w	800bb80 <__kernel_sin>
 800b968:	4820      	ldr	r0, [pc, #128]	@ (800b9ec <sin+0xa4>)
 800b96a:	4281      	cmp	r1, r0
 800b96c:	d908      	bls.n	800b980 <sin+0x38>
 800b96e:	4610      	mov	r0, r2
 800b970:	4619      	mov	r1, r3
 800b972:	f7f4 fc81 	bl	8000278 <__aeabi_dsub>
 800b976:	ec41 0b10 	vmov	d0, r0, r1
 800b97a:	b005      	add	sp, #20
 800b97c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b980:	4668      	mov	r0, sp
 800b982:	f000 f9b9 	bl	800bcf8 <__ieee754_rem_pio2>
 800b986:	f000 0003 	and.w	r0, r0, #3
 800b98a:	2801      	cmp	r0, #1
 800b98c:	d00c      	beq.n	800b9a8 <sin+0x60>
 800b98e:	2802      	cmp	r0, #2
 800b990:	d011      	beq.n	800b9b6 <sin+0x6e>
 800b992:	b9e8      	cbnz	r0, 800b9d0 <sin+0x88>
 800b994:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b998:	ed9d 0b00 	vldr	d0, [sp]
 800b99c:	2001      	movs	r0, #1
 800b99e:	f000 f8ef 	bl	800bb80 <__kernel_sin>
 800b9a2:	ec51 0b10 	vmov	r0, r1, d0
 800b9a6:	e7e6      	b.n	800b976 <sin+0x2e>
 800b9a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b9ac:	ed9d 0b00 	vldr	d0, [sp]
 800b9b0:	f000 f81e 	bl	800b9f0 <__kernel_cos>
 800b9b4:	e7f5      	b.n	800b9a2 <sin+0x5a>
 800b9b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b9ba:	ed9d 0b00 	vldr	d0, [sp]
 800b9be:	2001      	movs	r0, #1
 800b9c0:	f000 f8de 	bl	800bb80 <__kernel_sin>
 800b9c4:	ec53 2b10 	vmov	r2, r3, d0
 800b9c8:	4610      	mov	r0, r2
 800b9ca:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800b9ce:	e7d2      	b.n	800b976 <sin+0x2e>
 800b9d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b9d4:	ed9d 0b00 	vldr	d0, [sp]
 800b9d8:	f000 f80a 	bl	800b9f0 <__kernel_cos>
 800b9dc:	e7f2      	b.n	800b9c4 <sin+0x7c>
 800b9de:	bf00      	nop
	...
 800b9e8:	3fe921fb 	.word	0x3fe921fb
 800b9ec:	7fefffff 	.word	0x7fefffff

0800b9f0 <__kernel_cos>:
 800b9f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9f4:	ec57 6b10 	vmov	r6, r7, d0
 800b9f8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800b9fc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800ba00:	ed8d 1b00 	vstr	d1, [sp]
 800ba04:	d206      	bcs.n	800ba14 <__kernel_cos+0x24>
 800ba06:	4630      	mov	r0, r6
 800ba08:	4639      	mov	r1, r7
 800ba0a:	f7f5 f887 	bl	8000b1c <__aeabi_d2iz>
 800ba0e:	2800      	cmp	r0, #0
 800ba10:	f000 8088 	beq.w	800bb24 <__kernel_cos+0x134>
 800ba14:	4632      	mov	r2, r6
 800ba16:	463b      	mov	r3, r7
 800ba18:	4630      	mov	r0, r6
 800ba1a:	4639      	mov	r1, r7
 800ba1c:	f7f4 fde4 	bl	80005e8 <__aeabi_dmul>
 800ba20:	4b51      	ldr	r3, [pc, #324]	@ (800bb68 <__kernel_cos+0x178>)
 800ba22:	2200      	movs	r2, #0
 800ba24:	4604      	mov	r4, r0
 800ba26:	460d      	mov	r5, r1
 800ba28:	f7f4 fdde 	bl	80005e8 <__aeabi_dmul>
 800ba2c:	a340      	add	r3, pc, #256	@ (adr r3, 800bb30 <__kernel_cos+0x140>)
 800ba2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba32:	4682      	mov	sl, r0
 800ba34:	468b      	mov	fp, r1
 800ba36:	4620      	mov	r0, r4
 800ba38:	4629      	mov	r1, r5
 800ba3a:	f7f4 fdd5 	bl	80005e8 <__aeabi_dmul>
 800ba3e:	a33e      	add	r3, pc, #248	@ (adr r3, 800bb38 <__kernel_cos+0x148>)
 800ba40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba44:	f7f4 fc1a 	bl	800027c <__adddf3>
 800ba48:	4622      	mov	r2, r4
 800ba4a:	462b      	mov	r3, r5
 800ba4c:	f7f4 fdcc 	bl	80005e8 <__aeabi_dmul>
 800ba50:	a33b      	add	r3, pc, #236	@ (adr r3, 800bb40 <__kernel_cos+0x150>)
 800ba52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba56:	f7f4 fc0f 	bl	8000278 <__aeabi_dsub>
 800ba5a:	4622      	mov	r2, r4
 800ba5c:	462b      	mov	r3, r5
 800ba5e:	f7f4 fdc3 	bl	80005e8 <__aeabi_dmul>
 800ba62:	a339      	add	r3, pc, #228	@ (adr r3, 800bb48 <__kernel_cos+0x158>)
 800ba64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba68:	f7f4 fc08 	bl	800027c <__adddf3>
 800ba6c:	4622      	mov	r2, r4
 800ba6e:	462b      	mov	r3, r5
 800ba70:	f7f4 fdba 	bl	80005e8 <__aeabi_dmul>
 800ba74:	a336      	add	r3, pc, #216	@ (adr r3, 800bb50 <__kernel_cos+0x160>)
 800ba76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba7a:	f7f4 fbfd 	bl	8000278 <__aeabi_dsub>
 800ba7e:	4622      	mov	r2, r4
 800ba80:	462b      	mov	r3, r5
 800ba82:	f7f4 fdb1 	bl	80005e8 <__aeabi_dmul>
 800ba86:	a334      	add	r3, pc, #208	@ (adr r3, 800bb58 <__kernel_cos+0x168>)
 800ba88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba8c:	f7f4 fbf6 	bl	800027c <__adddf3>
 800ba90:	4622      	mov	r2, r4
 800ba92:	462b      	mov	r3, r5
 800ba94:	f7f4 fda8 	bl	80005e8 <__aeabi_dmul>
 800ba98:	4622      	mov	r2, r4
 800ba9a:	462b      	mov	r3, r5
 800ba9c:	f7f4 fda4 	bl	80005e8 <__aeabi_dmul>
 800baa0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800baa4:	4604      	mov	r4, r0
 800baa6:	460d      	mov	r5, r1
 800baa8:	4630      	mov	r0, r6
 800baaa:	4639      	mov	r1, r7
 800baac:	f7f4 fd9c 	bl	80005e8 <__aeabi_dmul>
 800bab0:	460b      	mov	r3, r1
 800bab2:	4602      	mov	r2, r0
 800bab4:	4629      	mov	r1, r5
 800bab6:	4620      	mov	r0, r4
 800bab8:	f7f4 fbde 	bl	8000278 <__aeabi_dsub>
 800babc:	4b2b      	ldr	r3, [pc, #172]	@ (800bb6c <__kernel_cos+0x17c>)
 800babe:	4598      	cmp	r8, r3
 800bac0:	4606      	mov	r6, r0
 800bac2:	460f      	mov	r7, r1
 800bac4:	d810      	bhi.n	800bae8 <__kernel_cos+0xf8>
 800bac6:	4602      	mov	r2, r0
 800bac8:	460b      	mov	r3, r1
 800baca:	4650      	mov	r0, sl
 800bacc:	4659      	mov	r1, fp
 800bace:	f7f4 fbd3 	bl	8000278 <__aeabi_dsub>
 800bad2:	460b      	mov	r3, r1
 800bad4:	4926      	ldr	r1, [pc, #152]	@ (800bb70 <__kernel_cos+0x180>)
 800bad6:	4602      	mov	r2, r0
 800bad8:	2000      	movs	r0, #0
 800bada:	f7f4 fbcd 	bl	8000278 <__aeabi_dsub>
 800bade:	ec41 0b10 	vmov	d0, r0, r1
 800bae2:	b003      	add	sp, #12
 800bae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bae8:	4b22      	ldr	r3, [pc, #136]	@ (800bb74 <__kernel_cos+0x184>)
 800baea:	4921      	ldr	r1, [pc, #132]	@ (800bb70 <__kernel_cos+0x180>)
 800baec:	4598      	cmp	r8, r3
 800baee:	bf8c      	ite	hi
 800baf0:	4d21      	ldrhi	r5, [pc, #132]	@ (800bb78 <__kernel_cos+0x188>)
 800baf2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800baf6:	2400      	movs	r4, #0
 800baf8:	4622      	mov	r2, r4
 800bafa:	462b      	mov	r3, r5
 800bafc:	2000      	movs	r0, #0
 800bafe:	f7f4 fbbb 	bl	8000278 <__aeabi_dsub>
 800bb02:	4622      	mov	r2, r4
 800bb04:	4680      	mov	r8, r0
 800bb06:	4689      	mov	r9, r1
 800bb08:	462b      	mov	r3, r5
 800bb0a:	4650      	mov	r0, sl
 800bb0c:	4659      	mov	r1, fp
 800bb0e:	f7f4 fbb3 	bl	8000278 <__aeabi_dsub>
 800bb12:	4632      	mov	r2, r6
 800bb14:	463b      	mov	r3, r7
 800bb16:	f7f4 fbaf 	bl	8000278 <__aeabi_dsub>
 800bb1a:	4602      	mov	r2, r0
 800bb1c:	460b      	mov	r3, r1
 800bb1e:	4640      	mov	r0, r8
 800bb20:	4649      	mov	r1, r9
 800bb22:	e7da      	b.n	800bada <__kernel_cos+0xea>
 800bb24:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800bb60 <__kernel_cos+0x170>
 800bb28:	e7db      	b.n	800bae2 <__kernel_cos+0xf2>
 800bb2a:	bf00      	nop
 800bb2c:	f3af 8000 	nop.w
 800bb30:	be8838d4 	.word	0xbe8838d4
 800bb34:	bda8fae9 	.word	0xbda8fae9
 800bb38:	bdb4b1c4 	.word	0xbdb4b1c4
 800bb3c:	3e21ee9e 	.word	0x3e21ee9e
 800bb40:	809c52ad 	.word	0x809c52ad
 800bb44:	3e927e4f 	.word	0x3e927e4f
 800bb48:	19cb1590 	.word	0x19cb1590
 800bb4c:	3efa01a0 	.word	0x3efa01a0
 800bb50:	16c15177 	.word	0x16c15177
 800bb54:	3f56c16c 	.word	0x3f56c16c
 800bb58:	5555554c 	.word	0x5555554c
 800bb5c:	3fa55555 	.word	0x3fa55555
 800bb60:	00000000 	.word	0x00000000
 800bb64:	3ff00000 	.word	0x3ff00000
 800bb68:	3fe00000 	.word	0x3fe00000
 800bb6c:	3fd33332 	.word	0x3fd33332
 800bb70:	3ff00000 	.word	0x3ff00000
 800bb74:	3fe90000 	.word	0x3fe90000
 800bb78:	3fd20000 	.word	0x3fd20000
 800bb7c:	00000000 	.word	0x00000000

0800bb80 <__kernel_sin>:
 800bb80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb84:	ec55 4b10 	vmov	r4, r5, d0
 800bb88:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800bb8c:	b085      	sub	sp, #20
 800bb8e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800bb92:	ed8d 1b02 	vstr	d1, [sp, #8]
 800bb96:	4680      	mov	r8, r0
 800bb98:	d205      	bcs.n	800bba6 <__kernel_sin+0x26>
 800bb9a:	4620      	mov	r0, r4
 800bb9c:	4629      	mov	r1, r5
 800bb9e:	f7f4 ffbd 	bl	8000b1c <__aeabi_d2iz>
 800bba2:	2800      	cmp	r0, #0
 800bba4:	d052      	beq.n	800bc4c <__kernel_sin+0xcc>
 800bba6:	4622      	mov	r2, r4
 800bba8:	462b      	mov	r3, r5
 800bbaa:	4620      	mov	r0, r4
 800bbac:	4629      	mov	r1, r5
 800bbae:	f7f4 fd1b 	bl	80005e8 <__aeabi_dmul>
 800bbb2:	4682      	mov	sl, r0
 800bbb4:	468b      	mov	fp, r1
 800bbb6:	4602      	mov	r2, r0
 800bbb8:	460b      	mov	r3, r1
 800bbba:	4620      	mov	r0, r4
 800bbbc:	4629      	mov	r1, r5
 800bbbe:	f7f4 fd13 	bl	80005e8 <__aeabi_dmul>
 800bbc2:	a342      	add	r3, pc, #264	@ (adr r3, 800bccc <__kernel_sin+0x14c>)
 800bbc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc8:	e9cd 0100 	strd	r0, r1, [sp]
 800bbcc:	4650      	mov	r0, sl
 800bbce:	4659      	mov	r1, fp
 800bbd0:	f7f4 fd0a 	bl	80005e8 <__aeabi_dmul>
 800bbd4:	a33f      	add	r3, pc, #252	@ (adr r3, 800bcd4 <__kernel_sin+0x154>)
 800bbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbda:	f7f4 fb4d 	bl	8000278 <__aeabi_dsub>
 800bbde:	4652      	mov	r2, sl
 800bbe0:	465b      	mov	r3, fp
 800bbe2:	f7f4 fd01 	bl	80005e8 <__aeabi_dmul>
 800bbe6:	a33d      	add	r3, pc, #244	@ (adr r3, 800bcdc <__kernel_sin+0x15c>)
 800bbe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbec:	f7f4 fb46 	bl	800027c <__adddf3>
 800bbf0:	4652      	mov	r2, sl
 800bbf2:	465b      	mov	r3, fp
 800bbf4:	f7f4 fcf8 	bl	80005e8 <__aeabi_dmul>
 800bbf8:	a33a      	add	r3, pc, #232	@ (adr r3, 800bce4 <__kernel_sin+0x164>)
 800bbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbfe:	f7f4 fb3b 	bl	8000278 <__aeabi_dsub>
 800bc02:	4652      	mov	r2, sl
 800bc04:	465b      	mov	r3, fp
 800bc06:	f7f4 fcef 	bl	80005e8 <__aeabi_dmul>
 800bc0a:	a338      	add	r3, pc, #224	@ (adr r3, 800bcec <__kernel_sin+0x16c>)
 800bc0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc10:	f7f4 fb34 	bl	800027c <__adddf3>
 800bc14:	4606      	mov	r6, r0
 800bc16:	460f      	mov	r7, r1
 800bc18:	f1b8 0f00 	cmp.w	r8, #0
 800bc1c:	d11b      	bne.n	800bc56 <__kernel_sin+0xd6>
 800bc1e:	4602      	mov	r2, r0
 800bc20:	460b      	mov	r3, r1
 800bc22:	4650      	mov	r0, sl
 800bc24:	4659      	mov	r1, fp
 800bc26:	f7f4 fcdf 	bl	80005e8 <__aeabi_dmul>
 800bc2a:	a325      	add	r3, pc, #148	@ (adr r3, 800bcc0 <__kernel_sin+0x140>)
 800bc2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc30:	f7f4 fb22 	bl	8000278 <__aeabi_dsub>
 800bc34:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc38:	f7f4 fcd6 	bl	80005e8 <__aeabi_dmul>
 800bc3c:	4602      	mov	r2, r0
 800bc3e:	460b      	mov	r3, r1
 800bc40:	4620      	mov	r0, r4
 800bc42:	4629      	mov	r1, r5
 800bc44:	f7f4 fb1a 	bl	800027c <__adddf3>
 800bc48:	4604      	mov	r4, r0
 800bc4a:	460d      	mov	r5, r1
 800bc4c:	ec45 4b10 	vmov	d0, r4, r5
 800bc50:	b005      	add	sp, #20
 800bc52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc5a:	4b1b      	ldr	r3, [pc, #108]	@ (800bcc8 <__kernel_sin+0x148>)
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	f7f4 fcc3 	bl	80005e8 <__aeabi_dmul>
 800bc62:	4632      	mov	r2, r6
 800bc64:	4680      	mov	r8, r0
 800bc66:	4689      	mov	r9, r1
 800bc68:	463b      	mov	r3, r7
 800bc6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc6e:	f7f4 fcbb 	bl	80005e8 <__aeabi_dmul>
 800bc72:	4602      	mov	r2, r0
 800bc74:	460b      	mov	r3, r1
 800bc76:	4640      	mov	r0, r8
 800bc78:	4649      	mov	r1, r9
 800bc7a:	f7f4 fafd 	bl	8000278 <__aeabi_dsub>
 800bc7e:	4652      	mov	r2, sl
 800bc80:	465b      	mov	r3, fp
 800bc82:	f7f4 fcb1 	bl	80005e8 <__aeabi_dmul>
 800bc86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc8a:	f7f4 faf5 	bl	8000278 <__aeabi_dsub>
 800bc8e:	a30c      	add	r3, pc, #48	@ (adr r3, 800bcc0 <__kernel_sin+0x140>)
 800bc90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc94:	4606      	mov	r6, r0
 800bc96:	460f      	mov	r7, r1
 800bc98:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc9c:	f7f4 fca4 	bl	80005e8 <__aeabi_dmul>
 800bca0:	4602      	mov	r2, r0
 800bca2:	460b      	mov	r3, r1
 800bca4:	4630      	mov	r0, r6
 800bca6:	4639      	mov	r1, r7
 800bca8:	f7f4 fae8 	bl	800027c <__adddf3>
 800bcac:	4602      	mov	r2, r0
 800bcae:	460b      	mov	r3, r1
 800bcb0:	4620      	mov	r0, r4
 800bcb2:	4629      	mov	r1, r5
 800bcb4:	f7f4 fae0 	bl	8000278 <__aeabi_dsub>
 800bcb8:	e7c6      	b.n	800bc48 <__kernel_sin+0xc8>
 800bcba:	bf00      	nop
 800bcbc:	f3af 8000 	nop.w
 800bcc0:	55555549 	.word	0x55555549
 800bcc4:	3fc55555 	.word	0x3fc55555
 800bcc8:	3fe00000 	.word	0x3fe00000
 800bccc:	5acfd57c 	.word	0x5acfd57c
 800bcd0:	3de5d93a 	.word	0x3de5d93a
 800bcd4:	8a2b9ceb 	.word	0x8a2b9ceb
 800bcd8:	3e5ae5e6 	.word	0x3e5ae5e6
 800bcdc:	57b1fe7d 	.word	0x57b1fe7d
 800bce0:	3ec71de3 	.word	0x3ec71de3
 800bce4:	19c161d5 	.word	0x19c161d5
 800bce8:	3f2a01a0 	.word	0x3f2a01a0
 800bcec:	1110f8a6 	.word	0x1110f8a6
 800bcf0:	3f811111 	.word	0x3f811111
 800bcf4:	00000000 	.word	0x00000000

0800bcf8 <__ieee754_rem_pio2>:
 800bcf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcfc:	ec57 6b10 	vmov	r6, r7, d0
 800bd00:	4bc5      	ldr	r3, [pc, #788]	@ (800c018 <__ieee754_rem_pio2+0x320>)
 800bd02:	b08d      	sub	sp, #52	@ 0x34
 800bd04:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800bd08:	4598      	cmp	r8, r3
 800bd0a:	4604      	mov	r4, r0
 800bd0c:	9704      	str	r7, [sp, #16]
 800bd0e:	d807      	bhi.n	800bd20 <__ieee754_rem_pio2+0x28>
 800bd10:	2200      	movs	r2, #0
 800bd12:	2300      	movs	r3, #0
 800bd14:	ed80 0b00 	vstr	d0, [r0]
 800bd18:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800bd1c:	2500      	movs	r5, #0
 800bd1e:	e028      	b.n	800bd72 <__ieee754_rem_pio2+0x7a>
 800bd20:	4bbe      	ldr	r3, [pc, #760]	@ (800c01c <__ieee754_rem_pio2+0x324>)
 800bd22:	4598      	cmp	r8, r3
 800bd24:	d878      	bhi.n	800be18 <__ieee754_rem_pio2+0x120>
 800bd26:	9b04      	ldr	r3, [sp, #16]
 800bd28:	4dbd      	ldr	r5, [pc, #756]	@ (800c020 <__ieee754_rem_pio2+0x328>)
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	4630      	mov	r0, r6
 800bd2e:	a3ac      	add	r3, pc, #688	@ (adr r3, 800bfe0 <__ieee754_rem_pio2+0x2e8>)
 800bd30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd34:	4639      	mov	r1, r7
 800bd36:	dd38      	ble.n	800bdaa <__ieee754_rem_pio2+0xb2>
 800bd38:	f7f4 fa9e 	bl	8000278 <__aeabi_dsub>
 800bd3c:	45a8      	cmp	r8, r5
 800bd3e:	4606      	mov	r6, r0
 800bd40:	460f      	mov	r7, r1
 800bd42:	d01a      	beq.n	800bd7a <__ieee754_rem_pio2+0x82>
 800bd44:	a3a8      	add	r3, pc, #672	@ (adr r3, 800bfe8 <__ieee754_rem_pio2+0x2f0>)
 800bd46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd4a:	f7f4 fa95 	bl	8000278 <__aeabi_dsub>
 800bd4e:	4602      	mov	r2, r0
 800bd50:	460b      	mov	r3, r1
 800bd52:	4680      	mov	r8, r0
 800bd54:	4689      	mov	r9, r1
 800bd56:	4630      	mov	r0, r6
 800bd58:	4639      	mov	r1, r7
 800bd5a:	f7f4 fa8d 	bl	8000278 <__aeabi_dsub>
 800bd5e:	a3a2      	add	r3, pc, #648	@ (adr r3, 800bfe8 <__ieee754_rem_pio2+0x2f0>)
 800bd60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd64:	f7f4 fa88 	bl	8000278 <__aeabi_dsub>
 800bd68:	e9c4 8900 	strd	r8, r9, [r4]
 800bd6c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bd70:	2501      	movs	r5, #1
 800bd72:	4628      	mov	r0, r5
 800bd74:	b00d      	add	sp, #52	@ 0x34
 800bd76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd7a:	a39d      	add	r3, pc, #628	@ (adr r3, 800bff0 <__ieee754_rem_pio2+0x2f8>)
 800bd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd80:	f7f4 fa7a 	bl	8000278 <__aeabi_dsub>
 800bd84:	a39c      	add	r3, pc, #624	@ (adr r3, 800bff8 <__ieee754_rem_pio2+0x300>)
 800bd86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8a:	4606      	mov	r6, r0
 800bd8c:	460f      	mov	r7, r1
 800bd8e:	f7f4 fa73 	bl	8000278 <__aeabi_dsub>
 800bd92:	4602      	mov	r2, r0
 800bd94:	460b      	mov	r3, r1
 800bd96:	4680      	mov	r8, r0
 800bd98:	4689      	mov	r9, r1
 800bd9a:	4630      	mov	r0, r6
 800bd9c:	4639      	mov	r1, r7
 800bd9e:	f7f4 fa6b 	bl	8000278 <__aeabi_dsub>
 800bda2:	a395      	add	r3, pc, #596	@ (adr r3, 800bff8 <__ieee754_rem_pio2+0x300>)
 800bda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda8:	e7dc      	b.n	800bd64 <__ieee754_rem_pio2+0x6c>
 800bdaa:	f7f4 fa67 	bl	800027c <__adddf3>
 800bdae:	45a8      	cmp	r8, r5
 800bdb0:	4606      	mov	r6, r0
 800bdb2:	460f      	mov	r7, r1
 800bdb4:	d018      	beq.n	800bde8 <__ieee754_rem_pio2+0xf0>
 800bdb6:	a38c      	add	r3, pc, #560	@ (adr r3, 800bfe8 <__ieee754_rem_pio2+0x2f0>)
 800bdb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdbc:	f7f4 fa5e 	bl	800027c <__adddf3>
 800bdc0:	4602      	mov	r2, r0
 800bdc2:	460b      	mov	r3, r1
 800bdc4:	4680      	mov	r8, r0
 800bdc6:	4689      	mov	r9, r1
 800bdc8:	4630      	mov	r0, r6
 800bdca:	4639      	mov	r1, r7
 800bdcc:	f7f4 fa54 	bl	8000278 <__aeabi_dsub>
 800bdd0:	a385      	add	r3, pc, #532	@ (adr r3, 800bfe8 <__ieee754_rem_pio2+0x2f0>)
 800bdd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd6:	f7f4 fa51 	bl	800027c <__adddf3>
 800bdda:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800bdde:	e9c4 8900 	strd	r8, r9, [r4]
 800bde2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bde6:	e7c4      	b.n	800bd72 <__ieee754_rem_pio2+0x7a>
 800bde8:	a381      	add	r3, pc, #516	@ (adr r3, 800bff0 <__ieee754_rem_pio2+0x2f8>)
 800bdea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdee:	f7f4 fa45 	bl	800027c <__adddf3>
 800bdf2:	a381      	add	r3, pc, #516	@ (adr r3, 800bff8 <__ieee754_rem_pio2+0x300>)
 800bdf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf8:	4606      	mov	r6, r0
 800bdfa:	460f      	mov	r7, r1
 800bdfc:	f7f4 fa3e 	bl	800027c <__adddf3>
 800be00:	4602      	mov	r2, r0
 800be02:	460b      	mov	r3, r1
 800be04:	4680      	mov	r8, r0
 800be06:	4689      	mov	r9, r1
 800be08:	4630      	mov	r0, r6
 800be0a:	4639      	mov	r1, r7
 800be0c:	f7f4 fa34 	bl	8000278 <__aeabi_dsub>
 800be10:	a379      	add	r3, pc, #484	@ (adr r3, 800bff8 <__ieee754_rem_pio2+0x300>)
 800be12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be16:	e7de      	b.n	800bdd6 <__ieee754_rem_pio2+0xde>
 800be18:	4b82      	ldr	r3, [pc, #520]	@ (800c024 <__ieee754_rem_pio2+0x32c>)
 800be1a:	4598      	cmp	r8, r3
 800be1c:	f200 80d1 	bhi.w	800bfc2 <__ieee754_rem_pio2+0x2ca>
 800be20:	f000 f966 	bl	800c0f0 <fabs>
 800be24:	ec57 6b10 	vmov	r6, r7, d0
 800be28:	a375      	add	r3, pc, #468	@ (adr r3, 800c000 <__ieee754_rem_pio2+0x308>)
 800be2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be2e:	4630      	mov	r0, r6
 800be30:	4639      	mov	r1, r7
 800be32:	f7f4 fbd9 	bl	80005e8 <__aeabi_dmul>
 800be36:	4b7c      	ldr	r3, [pc, #496]	@ (800c028 <__ieee754_rem_pio2+0x330>)
 800be38:	2200      	movs	r2, #0
 800be3a:	f7f4 fa1f 	bl	800027c <__adddf3>
 800be3e:	f7f4 fe6d 	bl	8000b1c <__aeabi_d2iz>
 800be42:	4605      	mov	r5, r0
 800be44:	f7f4 fb66 	bl	8000514 <__aeabi_i2d>
 800be48:	4602      	mov	r2, r0
 800be4a:	460b      	mov	r3, r1
 800be4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800be50:	a363      	add	r3, pc, #396	@ (adr r3, 800bfe0 <__ieee754_rem_pio2+0x2e8>)
 800be52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be56:	f7f4 fbc7 	bl	80005e8 <__aeabi_dmul>
 800be5a:	4602      	mov	r2, r0
 800be5c:	460b      	mov	r3, r1
 800be5e:	4630      	mov	r0, r6
 800be60:	4639      	mov	r1, r7
 800be62:	f7f4 fa09 	bl	8000278 <__aeabi_dsub>
 800be66:	a360      	add	r3, pc, #384	@ (adr r3, 800bfe8 <__ieee754_rem_pio2+0x2f0>)
 800be68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be6c:	4682      	mov	sl, r0
 800be6e:	468b      	mov	fp, r1
 800be70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be74:	f7f4 fbb8 	bl	80005e8 <__aeabi_dmul>
 800be78:	2d1f      	cmp	r5, #31
 800be7a:	4606      	mov	r6, r0
 800be7c:	460f      	mov	r7, r1
 800be7e:	dc0c      	bgt.n	800be9a <__ieee754_rem_pio2+0x1a2>
 800be80:	4b6a      	ldr	r3, [pc, #424]	@ (800c02c <__ieee754_rem_pio2+0x334>)
 800be82:	1e6a      	subs	r2, r5, #1
 800be84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be88:	4543      	cmp	r3, r8
 800be8a:	d006      	beq.n	800be9a <__ieee754_rem_pio2+0x1a2>
 800be8c:	4632      	mov	r2, r6
 800be8e:	463b      	mov	r3, r7
 800be90:	4650      	mov	r0, sl
 800be92:	4659      	mov	r1, fp
 800be94:	f7f4 f9f0 	bl	8000278 <__aeabi_dsub>
 800be98:	e00e      	b.n	800beb8 <__ieee754_rem_pio2+0x1c0>
 800be9a:	463b      	mov	r3, r7
 800be9c:	4632      	mov	r2, r6
 800be9e:	4650      	mov	r0, sl
 800bea0:	4659      	mov	r1, fp
 800bea2:	f7f4 f9e9 	bl	8000278 <__aeabi_dsub>
 800bea6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800beaa:	9305      	str	r3, [sp, #20]
 800beac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800beb0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800beb4:	2b10      	cmp	r3, #16
 800beb6:	dc02      	bgt.n	800bebe <__ieee754_rem_pio2+0x1c6>
 800beb8:	e9c4 0100 	strd	r0, r1, [r4]
 800bebc:	e039      	b.n	800bf32 <__ieee754_rem_pio2+0x23a>
 800bebe:	a34c      	add	r3, pc, #304	@ (adr r3, 800bff0 <__ieee754_rem_pio2+0x2f8>)
 800bec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bec8:	f7f4 fb8e 	bl	80005e8 <__aeabi_dmul>
 800becc:	4606      	mov	r6, r0
 800bece:	460f      	mov	r7, r1
 800bed0:	4602      	mov	r2, r0
 800bed2:	460b      	mov	r3, r1
 800bed4:	4650      	mov	r0, sl
 800bed6:	4659      	mov	r1, fp
 800bed8:	f7f4 f9ce 	bl	8000278 <__aeabi_dsub>
 800bedc:	4602      	mov	r2, r0
 800bede:	460b      	mov	r3, r1
 800bee0:	4680      	mov	r8, r0
 800bee2:	4689      	mov	r9, r1
 800bee4:	4650      	mov	r0, sl
 800bee6:	4659      	mov	r1, fp
 800bee8:	f7f4 f9c6 	bl	8000278 <__aeabi_dsub>
 800beec:	4632      	mov	r2, r6
 800beee:	463b      	mov	r3, r7
 800bef0:	f7f4 f9c2 	bl	8000278 <__aeabi_dsub>
 800bef4:	a340      	add	r3, pc, #256	@ (adr r3, 800bff8 <__ieee754_rem_pio2+0x300>)
 800bef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800befa:	4606      	mov	r6, r0
 800befc:	460f      	mov	r7, r1
 800befe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf02:	f7f4 fb71 	bl	80005e8 <__aeabi_dmul>
 800bf06:	4632      	mov	r2, r6
 800bf08:	463b      	mov	r3, r7
 800bf0a:	f7f4 f9b5 	bl	8000278 <__aeabi_dsub>
 800bf0e:	4602      	mov	r2, r0
 800bf10:	460b      	mov	r3, r1
 800bf12:	4606      	mov	r6, r0
 800bf14:	460f      	mov	r7, r1
 800bf16:	4640      	mov	r0, r8
 800bf18:	4649      	mov	r1, r9
 800bf1a:	f7f4 f9ad 	bl	8000278 <__aeabi_dsub>
 800bf1e:	9a05      	ldr	r2, [sp, #20]
 800bf20:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bf24:	1ad3      	subs	r3, r2, r3
 800bf26:	2b31      	cmp	r3, #49	@ 0x31
 800bf28:	dc20      	bgt.n	800bf6c <__ieee754_rem_pio2+0x274>
 800bf2a:	e9c4 0100 	strd	r0, r1, [r4]
 800bf2e:	46c2      	mov	sl, r8
 800bf30:	46cb      	mov	fp, r9
 800bf32:	e9d4 8900 	ldrd	r8, r9, [r4]
 800bf36:	4650      	mov	r0, sl
 800bf38:	4642      	mov	r2, r8
 800bf3a:	464b      	mov	r3, r9
 800bf3c:	4659      	mov	r1, fp
 800bf3e:	f7f4 f99b 	bl	8000278 <__aeabi_dsub>
 800bf42:	463b      	mov	r3, r7
 800bf44:	4632      	mov	r2, r6
 800bf46:	f7f4 f997 	bl	8000278 <__aeabi_dsub>
 800bf4a:	9b04      	ldr	r3, [sp, #16]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bf52:	f6bf af0e 	bge.w	800bd72 <__ieee754_rem_pio2+0x7a>
 800bf56:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800bf5a:	6063      	str	r3, [r4, #4]
 800bf5c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bf60:	f8c4 8000 	str.w	r8, [r4]
 800bf64:	60a0      	str	r0, [r4, #8]
 800bf66:	60e3      	str	r3, [r4, #12]
 800bf68:	426d      	negs	r5, r5
 800bf6a:	e702      	b.n	800bd72 <__ieee754_rem_pio2+0x7a>
 800bf6c:	a326      	add	r3, pc, #152	@ (adr r3, 800c008 <__ieee754_rem_pio2+0x310>)
 800bf6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf76:	f7f4 fb37 	bl	80005e8 <__aeabi_dmul>
 800bf7a:	4606      	mov	r6, r0
 800bf7c:	460f      	mov	r7, r1
 800bf7e:	4602      	mov	r2, r0
 800bf80:	460b      	mov	r3, r1
 800bf82:	4640      	mov	r0, r8
 800bf84:	4649      	mov	r1, r9
 800bf86:	f7f4 f977 	bl	8000278 <__aeabi_dsub>
 800bf8a:	4602      	mov	r2, r0
 800bf8c:	460b      	mov	r3, r1
 800bf8e:	4682      	mov	sl, r0
 800bf90:	468b      	mov	fp, r1
 800bf92:	4640      	mov	r0, r8
 800bf94:	4649      	mov	r1, r9
 800bf96:	f7f4 f96f 	bl	8000278 <__aeabi_dsub>
 800bf9a:	4632      	mov	r2, r6
 800bf9c:	463b      	mov	r3, r7
 800bf9e:	f7f4 f96b 	bl	8000278 <__aeabi_dsub>
 800bfa2:	a31b      	add	r3, pc, #108	@ (adr r3, 800c010 <__ieee754_rem_pio2+0x318>)
 800bfa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa8:	4606      	mov	r6, r0
 800bfaa:	460f      	mov	r7, r1
 800bfac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfb0:	f7f4 fb1a 	bl	80005e8 <__aeabi_dmul>
 800bfb4:	4632      	mov	r2, r6
 800bfb6:	463b      	mov	r3, r7
 800bfb8:	f7f4 f95e 	bl	8000278 <__aeabi_dsub>
 800bfbc:	4606      	mov	r6, r0
 800bfbe:	460f      	mov	r7, r1
 800bfc0:	e764      	b.n	800be8c <__ieee754_rem_pio2+0x194>
 800bfc2:	4b1b      	ldr	r3, [pc, #108]	@ (800c030 <__ieee754_rem_pio2+0x338>)
 800bfc4:	4598      	cmp	r8, r3
 800bfc6:	d935      	bls.n	800c034 <__ieee754_rem_pio2+0x33c>
 800bfc8:	4632      	mov	r2, r6
 800bfca:	463b      	mov	r3, r7
 800bfcc:	4630      	mov	r0, r6
 800bfce:	4639      	mov	r1, r7
 800bfd0:	f7f4 f952 	bl	8000278 <__aeabi_dsub>
 800bfd4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bfd8:	e9c4 0100 	strd	r0, r1, [r4]
 800bfdc:	e69e      	b.n	800bd1c <__ieee754_rem_pio2+0x24>
 800bfde:	bf00      	nop
 800bfe0:	54400000 	.word	0x54400000
 800bfe4:	3ff921fb 	.word	0x3ff921fb
 800bfe8:	1a626331 	.word	0x1a626331
 800bfec:	3dd0b461 	.word	0x3dd0b461
 800bff0:	1a600000 	.word	0x1a600000
 800bff4:	3dd0b461 	.word	0x3dd0b461
 800bff8:	2e037073 	.word	0x2e037073
 800bffc:	3ba3198a 	.word	0x3ba3198a
 800c000:	6dc9c883 	.word	0x6dc9c883
 800c004:	3fe45f30 	.word	0x3fe45f30
 800c008:	2e000000 	.word	0x2e000000
 800c00c:	3ba3198a 	.word	0x3ba3198a
 800c010:	252049c1 	.word	0x252049c1
 800c014:	397b839a 	.word	0x397b839a
 800c018:	3fe921fb 	.word	0x3fe921fb
 800c01c:	4002d97b 	.word	0x4002d97b
 800c020:	3ff921fb 	.word	0x3ff921fb
 800c024:	413921fb 	.word	0x413921fb
 800c028:	3fe00000 	.word	0x3fe00000
 800c02c:	0800cabc 	.word	0x0800cabc
 800c030:	7fefffff 	.word	0x7fefffff
 800c034:	ea4f 5528 	mov.w	r5, r8, asr #20
 800c038:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800c03c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800c040:	4630      	mov	r0, r6
 800c042:	460f      	mov	r7, r1
 800c044:	f7f4 fd6a 	bl	8000b1c <__aeabi_d2iz>
 800c048:	f7f4 fa64 	bl	8000514 <__aeabi_i2d>
 800c04c:	4602      	mov	r2, r0
 800c04e:	460b      	mov	r3, r1
 800c050:	4630      	mov	r0, r6
 800c052:	4639      	mov	r1, r7
 800c054:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c058:	f7f4 f90e 	bl	8000278 <__aeabi_dsub>
 800c05c:	4b22      	ldr	r3, [pc, #136]	@ (800c0e8 <__ieee754_rem_pio2+0x3f0>)
 800c05e:	2200      	movs	r2, #0
 800c060:	f7f4 fac2 	bl	80005e8 <__aeabi_dmul>
 800c064:	460f      	mov	r7, r1
 800c066:	4606      	mov	r6, r0
 800c068:	f7f4 fd58 	bl	8000b1c <__aeabi_d2iz>
 800c06c:	f7f4 fa52 	bl	8000514 <__aeabi_i2d>
 800c070:	4602      	mov	r2, r0
 800c072:	460b      	mov	r3, r1
 800c074:	4630      	mov	r0, r6
 800c076:	4639      	mov	r1, r7
 800c078:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c07c:	f7f4 f8fc 	bl	8000278 <__aeabi_dsub>
 800c080:	4b19      	ldr	r3, [pc, #100]	@ (800c0e8 <__ieee754_rem_pio2+0x3f0>)
 800c082:	2200      	movs	r2, #0
 800c084:	f7f4 fab0 	bl	80005e8 <__aeabi_dmul>
 800c088:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800c08c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800c090:	f04f 0803 	mov.w	r8, #3
 800c094:	2600      	movs	r6, #0
 800c096:	2700      	movs	r7, #0
 800c098:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800c09c:	4632      	mov	r2, r6
 800c09e:	463b      	mov	r3, r7
 800c0a0:	46c2      	mov	sl, r8
 800c0a2:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800c0a6:	f7f4 fd07 	bl	8000ab8 <__aeabi_dcmpeq>
 800c0aa:	2800      	cmp	r0, #0
 800c0ac:	d1f4      	bne.n	800c098 <__ieee754_rem_pio2+0x3a0>
 800c0ae:	4b0f      	ldr	r3, [pc, #60]	@ (800c0ec <__ieee754_rem_pio2+0x3f4>)
 800c0b0:	9301      	str	r3, [sp, #4]
 800c0b2:	2302      	movs	r3, #2
 800c0b4:	9300      	str	r3, [sp, #0]
 800c0b6:	462a      	mov	r2, r5
 800c0b8:	4653      	mov	r3, sl
 800c0ba:	4621      	mov	r1, r4
 800c0bc:	a806      	add	r0, sp, #24
 800c0be:	f000 f81f 	bl	800c100 <__kernel_rem_pio2>
 800c0c2:	9b04      	ldr	r3, [sp, #16]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	4605      	mov	r5, r0
 800c0c8:	f6bf ae53 	bge.w	800bd72 <__ieee754_rem_pio2+0x7a>
 800c0cc:	e9d4 2100 	ldrd	r2, r1, [r4]
 800c0d0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c0d4:	e9c4 2300 	strd	r2, r3, [r4]
 800c0d8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800c0dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c0e0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800c0e4:	e740      	b.n	800bf68 <__ieee754_rem_pio2+0x270>
 800c0e6:	bf00      	nop
 800c0e8:	41700000 	.word	0x41700000
 800c0ec:	0800cb3c 	.word	0x0800cb3c

0800c0f0 <fabs>:
 800c0f0:	ec51 0b10 	vmov	r0, r1, d0
 800c0f4:	4602      	mov	r2, r0
 800c0f6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c0fa:	ec43 2b10 	vmov	d0, r2, r3
 800c0fe:	4770      	bx	lr

0800c100 <__kernel_rem_pio2>:
 800c100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c104:	ed2d 8b02 	vpush	{d8}
 800c108:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800c10c:	f112 0f14 	cmn.w	r2, #20
 800c110:	9306      	str	r3, [sp, #24]
 800c112:	9104      	str	r1, [sp, #16]
 800c114:	4bbe      	ldr	r3, [pc, #760]	@ (800c410 <__kernel_rem_pio2+0x310>)
 800c116:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800c118:	9008      	str	r0, [sp, #32]
 800c11a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c11e:	9300      	str	r3, [sp, #0]
 800c120:	9b06      	ldr	r3, [sp, #24]
 800c122:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800c126:	bfa8      	it	ge
 800c128:	1ed4      	subge	r4, r2, #3
 800c12a:	9305      	str	r3, [sp, #20]
 800c12c:	bfb2      	itee	lt
 800c12e:	2400      	movlt	r4, #0
 800c130:	2318      	movge	r3, #24
 800c132:	fb94 f4f3 	sdivge	r4, r4, r3
 800c136:	f06f 0317 	mvn.w	r3, #23
 800c13a:	fb04 3303 	mla	r3, r4, r3, r3
 800c13e:	eb03 0b02 	add.w	fp, r3, r2
 800c142:	9b00      	ldr	r3, [sp, #0]
 800c144:	9a05      	ldr	r2, [sp, #20]
 800c146:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800c400 <__kernel_rem_pio2+0x300>
 800c14a:	eb03 0802 	add.w	r8, r3, r2
 800c14e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800c150:	1aa7      	subs	r7, r4, r2
 800c152:	ae20      	add	r6, sp, #128	@ 0x80
 800c154:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c158:	2500      	movs	r5, #0
 800c15a:	4545      	cmp	r5, r8
 800c15c:	dd13      	ble.n	800c186 <__kernel_rem_pio2+0x86>
 800c15e:	9b06      	ldr	r3, [sp, #24]
 800c160:	aa20      	add	r2, sp, #128	@ 0x80
 800c162:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c166:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800c16a:	f04f 0800 	mov.w	r8, #0
 800c16e:	9b00      	ldr	r3, [sp, #0]
 800c170:	4598      	cmp	r8, r3
 800c172:	dc31      	bgt.n	800c1d8 <__kernel_rem_pio2+0xd8>
 800c174:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800c400 <__kernel_rem_pio2+0x300>
 800c178:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c17c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c180:	462f      	mov	r7, r5
 800c182:	2600      	movs	r6, #0
 800c184:	e01b      	b.n	800c1be <__kernel_rem_pio2+0xbe>
 800c186:	42ef      	cmn	r7, r5
 800c188:	d407      	bmi.n	800c19a <__kernel_rem_pio2+0x9a>
 800c18a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c18e:	f7f4 f9c1 	bl	8000514 <__aeabi_i2d>
 800c192:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c196:	3501      	adds	r5, #1
 800c198:	e7df      	b.n	800c15a <__kernel_rem_pio2+0x5a>
 800c19a:	ec51 0b18 	vmov	r0, r1, d8
 800c19e:	e7f8      	b.n	800c192 <__kernel_rem_pio2+0x92>
 800c1a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1a4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c1a8:	f7f4 fa1e 	bl	80005e8 <__aeabi_dmul>
 800c1ac:	4602      	mov	r2, r0
 800c1ae:	460b      	mov	r3, r1
 800c1b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1b4:	f7f4 f862 	bl	800027c <__adddf3>
 800c1b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c1bc:	3601      	adds	r6, #1
 800c1be:	9b05      	ldr	r3, [sp, #20]
 800c1c0:	429e      	cmp	r6, r3
 800c1c2:	f1a7 0708 	sub.w	r7, r7, #8
 800c1c6:	ddeb      	ble.n	800c1a0 <__kernel_rem_pio2+0xa0>
 800c1c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c1cc:	f108 0801 	add.w	r8, r8, #1
 800c1d0:	ecaa 7b02 	vstmia	sl!, {d7}
 800c1d4:	3508      	adds	r5, #8
 800c1d6:	e7ca      	b.n	800c16e <__kernel_rem_pio2+0x6e>
 800c1d8:	9b00      	ldr	r3, [sp, #0]
 800c1da:	f8dd 8000 	ldr.w	r8, [sp]
 800c1de:	aa0c      	add	r2, sp, #48	@ 0x30
 800c1e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c1e4:	930a      	str	r3, [sp, #40]	@ 0x28
 800c1e6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800c1e8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c1ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1ee:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800c1f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c1f4:	ab98      	add	r3, sp, #608	@ 0x260
 800c1f6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c1fa:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800c1fe:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c202:	ac0c      	add	r4, sp, #48	@ 0x30
 800c204:	ab70      	add	r3, sp, #448	@ 0x1c0
 800c206:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800c20a:	46a1      	mov	r9, r4
 800c20c:	46c2      	mov	sl, r8
 800c20e:	f1ba 0f00 	cmp.w	sl, #0
 800c212:	f1a5 0508 	sub.w	r5, r5, #8
 800c216:	dc77      	bgt.n	800c308 <__kernel_rem_pio2+0x208>
 800c218:	4658      	mov	r0, fp
 800c21a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800c21e:	f000 fac7 	bl	800c7b0 <scalbn>
 800c222:	ec57 6b10 	vmov	r6, r7, d0
 800c226:	2200      	movs	r2, #0
 800c228:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800c22c:	4630      	mov	r0, r6
 800c22e:	4639      	mov	r1, r7
 800c230:	f7f4 f9da 	bl	80005e8 <__aeabi_dmul>
 800c234:	ec41 0b10 	vmov	d0, r0, r1
 800c238:	f000 fb3a 	bl	800c8b0 <floor>
 800c23c:	4b75      	ldr	r3, [pc, #468]	@ (800c414 <__kernel_rem_pio2+0x314>)
 800c23e:	ec51 0b10 	vmov	r0, r1, d0
 800c242:	2200      	movs	r2, #0
 800c244:	f7f4 f9d0 	bl	80005e8 <__aeabi_dmul>
 800c248:	4602      	mov	r2, r0
 800c24a:	460b      	mov	r3, r1
 800c24c:	4630      	mov	r0, r6
 800c24e:	4639      	mov	r1, r7
 800c250:	f7f4 f812 	bl	8000278 <__aeabi_dsub>
 800c254:	460f      	mov	r7, r1
 800c256:	4606      	mov	r6, r0
 800c258:	f7f4 fc60 	bl	8000b1c <__aeabi_d2iz>
 800c25c:	9002      	str	r0, [sp, #8]
 800c25e:	f7f4 f959 	bl	8000514 <__aeabi_i2d>
 800c262:	4602      	mov	r2, r0
 800c264:	460b      	mov	r3, r1
 800c266:	4630      	mov	r0, r6
 800c268:	4639      	mov	r1, r7
 800c26a:	f7f4 f805 	bl	8000278 <__aeabi_dsub>
 800c26e:	f1bb 0f00 	cmp.w	fp, #0
 800c272:	4606      	mov	r6, r0
 800c274:	460f      	mov	r7, r1
 800c276:	dd6c      	ble.n	800c352 <__kernel_rem_pio2+0x252>
 800c278:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800c27c:	ab0c      	add	r3, sp, #48	@ 0x30
 800c27e:	9d02      	ldr	r5, [sp, #8]
 800c280:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c284:	f1cb 0018 	rsb	r0, fp, #24
 800c288:	fa43 f200 	asr.w	r2, r3, r0
 800c28c:	4415      	add	r5, r2
 800c28e:	4082      	lsls	r2, r0
 800c290:	1a9b      	subs	r3, r3, r2
 800c292:	aa0c      	add	r2, sp, #48	@ 0x30
 800c294:	9502      	str	r5, [sp, #8]
 800c296:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c29a:	f1cb 0217 	rsb	r2, fp, #23
 800c29e:	fa43 f902 	asr.w	r9, r3, r2
 800c2a2:	f1b9 0f00 	cmp.w	r9, #0
 800c2a6:	dd64      	ble.n	800c372 <__kernel_rem_pio2+0x272>
 800c2a8:	9b02      	ldr	r3, [sp, #8]
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	3301      	adds	r3, #1
 800c2ae:	9302      	str	r3, [sp, #8]
 800c2b0:	4615      	mov	r5, r2
 800c2b2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800c2b6:	4590      	cmp	r8, r2
 800c2b8:	f300 80b8 	bgt.w	800c42c <__kernel_rem_pio2+0x32c>
 800c2bc:	f1bb 0f00 	cmp.w	fp, #0
 800c2c0:	dd07      	ble.n	800c2d2 <__kernel_rem_pio2+0x1d2>
 800c2c2:	f1bb 0f01 	cmp.w	fp, #1
 800c2c6:	f000 80bf 	beq.w	800c448 <__kernel_rem_pio2+0x348>
 800c2ca:	f1bb 0f02 	cmp.w	fp, #2
 800c2ce:	f000 80c6 	beq.w	800c45e <__kernel_rem_pio2+0x35e>
 800c2d2:	f1b9 0f02 	cmp.w	r9, #2
 800c2d6:	d14c      	bne.n	800c372 <__kernel_rem_pio2+0x272>
 800c2d8:	4632      	mov	r2, r6
 800c2da:	463b      	mov	r3, r7
 800c2dc:	494e      	ldr	r1, [pc, #312]	@ (800c418 <__kernel_rem_pio2+0x318>)
 800c2de:	2000      	movs	r0, #0
 800c2e0:	f7f3 ffca 	bl	8000278 <__aeabi_dsub>
 800c2e4:	4606      	mov	r6, r0
 800c2e6:	460f      	mov	r7, r1
 800c2e8:	2d00      	cmp	r5, #0
 800c2ea:	d042      	beq.n	800c372 <__kernel_rem_pio2+0x272>
 800c2ec:	4658      	mov	r0, fp
 800c2ee:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800c408 <__kernel_rem_pio2+0x308>
 800c2f2:	f000 fa5d 	bl	800c7b0 <scalbn>
 800c2f6:	4630      	mov	r0, r6
 800c2f8:	4639      	mov	r1, r7
 800c2fa:	ec53 2b10 	vmov	r2, r3, d0
 800c2fe:	f7f3 ffbb 	bl	8000278 <__aeabi_dsub>
 800c302:	4606      	mov	r6, r0
 800c304:	460f      	mov	r7, r1
 800c306:	e034      	b.n	800c372 <__kernel_rem_pio2+0x272>
 800c308:	4b44      	ldr	r3, [pc, #272]	@ (800c41c <__kernel_rem_pio2+0x31c>)
 800c30a:	2200      	movs	r2, #0
 800c30c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c310:	f7f4 f96a 	bl	80005e8 <__aeabi_dmul>
 800c314:	f7f4 fc02 	bl	8000b1c <__aeabi_d2iz>
 800c318:	f7f4 f8fc 	bl	8000514 <__aeabi_i2d>
 800c31c:	4b40      	ldr	r3, [pc, #256]	@ (800c420 <__kernel_rem_pio2+0x320>)
 800c31e:	2200      	movs	r2, #0
 800c320:	4606      	mov	r6, r0
 800c322:	460f      	mov	r7, r1
 800c324:	f7f4 f960 	bl	80005e8 <__aeabi_dmul>
 800c328:	4602      	mov	r2, r0
 800c32a:	460b      	mov	r3, r1
 800c32c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c330:	f7f3 ffa2 	bl	8000278 <__aeabi_dsub>
 800c334:	f7f4 fbf2 	bl	8000b1c <__aeabi_d2iz>
 800c338:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c33c:	f849 0b04 	str.w	r0, [r9], #4
 800c340:	4639      	mov	r1, r7
 800c342:	4630      	mov	r0, r6
 800c344:	f7f3 ff9a 	bl	800027c <__adddf3>
 800c348:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800c34c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c350:	e75d      	b.n	800c20e <__kernel_rem_pio2+0x10e>
 800c352:	d107      	bne.n	800c364 <__kernel_rem_pio2+0x264>
 800c354:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800c358:	aa0c      	add	r2, sp, #48	@ 0x30
 800c35a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c35e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800c362:	e79e      	b.n	800c2a2 <__kernel_rem_pio2+0x1a2>
 800c364:	4b2f      	ldr	r3, [pc, #188]	@ (800c424 <__kernel_rem_pio2+0x324>)
 800c366:	2200      	movs	r2, #0
 800c368:	f7f4 fbc4 	bl	8000af4 <__aeabi_dcmpge>
 800c36c:	2800      	cmp	r0, #0
 800c36e:	d143      	bne.n	800c3f8 <__kernel_rem_pio2+0x2f8>
 800c370:	4681      	mov	r9, r0
 800c372:	2200      	movs	r2, #0
 800c374:	2300      	movs	r3, #0
 800c376:	4630      	mov	r0, r6
 800c378:	4639      	mov	r1, r7
 800c37a:	f7f4 fb9d 	bl	8000ab8 <__aeabi_dcmpeq>
 800c37e:	2800      	cmp	r0, #0
 800c380:	f000 80bf 	beq.w	800c502 <__kernel_rem_pio2+0x402>
 800c384:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800c388:	2200      	movs	r2, #0
 800c38a:	9900      	ldr	r1, [sp, #0]
 800c38c:	428b      	cmp	r3, r1
 800c38e:	da6e      	bge.n	800c46e <__kernel_rem_pio2+0x36e>
 800c390:	2a00      	cmp	r2, #0
 800c392:	f000 8089 	beq.w	800c4a8 <__kernel_rem_pio2+0x3a8>
 800c396:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800c39a:	ab0c      	add	r3, sp, #48	@ 0x30
 800c39c:	f1ab 0b18 	sub.w	fp, fp, #24
 800c3a0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d0f6      	beq.n	800c396 <__kernel_rem_pio2+0x296>
 800c3a8:	4658      	mov	r0, fp
 800c3aa:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800c408 <__kernel_rem_pio2+0x308>
 800c3ae:	f000 f9ff 	bl	800c7b0 <scalbn>
 800c3b2:	f108 0301 	add.w	r3, r8, #1
 800c3b6:	00da      	lsls	r2, r3, #3
 800c3b8:	9205      	str	r2, [sp, #20]
 800c3ba:	ec55 4b10 	vmov	r4, r5, d0
 800c3be:	aa70      	add	r2, sp, #448	@ 0x1c0
 800c3c0:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800c41c <__kernel_rem_pio2+0x31c>
 800c3c4:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800c3c8:	4646      	mov	r6, r8
 800c3ca:	f04f 0a00 	mov.w	sl, #0
 800c3ce:	2e00      	cmp	r6, #0
 800c3d0:	f280 80cf 	bge.w	800c572 <__kernel_rem_pio2+0x472>
 800c3d4:	4644      	mov	r4, r8
 800c3d6:	2c00      	cmp	r4, #0
 800c3d8:	f2c0 80fd 	blt.w	800c5d6 <__kernel_rem_pio2+0x4d6>
 800c3dc:	4b12      	ldr	r3, [pc, #72]	@ (800c428 <__kernel_rem_pio2+0x328>)
 800c3de:	461f      	mov	r7, r3
 800c3e0:	ab70      	add	r3, sp, #448	@ 0x1c0
 800c3e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c3e6:	9306      	str	r3, [sp, #24]
 800c3e8:	f04f 0a00 	mov.w	sl, #0
 800c3ec:	f04f 0b00 	mov.w	fp, #0
 800c3f0:	2600      	movs	r6, #0
 800c3f2:	eba8 0504 	sub.w	r5, r8, r4
 800c3f6:	e0e2      	b.n	800c5be <__kernel_rem_pio2+0x4be>
 800c3f8:	f04f 0902 	mov.w	r9, #2
 800c3fc:	e754      	b.n	800c2a8 <__kernel_rem_pio2+0x1a8>
 800c3fe:	bf00      	nop
	...
 800c40c:	3ff00000 	.word	0x3ff00000
 800c410:	0800cc88 	.word	0x0800cc88
 800c414:	40200000 	.word	0x40200000
 800c418:	3ff00000 	.word	0x3ff00000
 800c41c:	3e700000 	.word	0x3e700000
 800c420:	41700000 	.word	0x41700000
 800c424:	3fe00000 	.word	0x3fe00000
 800c428:	0800cc48 	.word	0x0800cc48
 800c42c:	f854 3b04 	ldr.w	r3, [r4], #4
 800c430:	b945      	cbnz	r5, 800c444 <__kernel_rem_pio2+0x344>
 800c432:	b123      	cbz	r3, 800c43e <__kernel_rem_pio2+0x33e>
 800c434:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800c438:	f844 3c04 	str.w	r3, [r4, #-4]
 800c43c:	2301      	movs	r3, #1
 800c43e:	3201      	adds	r2, #1
 800c440:	461d      	mov	r5, r3
 800c442:	e738      	b.n	800c2b6 <__kernel_rem_pio2+0x1b6>
 800c444:	1acb      	subs	r3, r1, r3
 800c446:	e7f7      	b.n	800c438 <__kernel_rem_pio2+0x338>
 800c448:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800c44c:	ab0c      	add	r3, sp, #48	@ 0x30
 800c44e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c452:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c456:	a90c      	add	r1, sp, #48	@ 0x30
 800c458:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c45c:	e739      	b.n	800c2d2 <__kernel_rem_pio2+0x1d2>
 800c45e:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800c462:	ab0c      	add	r3, sp, #48	@ 0x30
 800c464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c468:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c46c:	e7f3      	b.n	800c456 <__kernel_rem_pio2+0x356>
 800c46e:	a90c      	add	r1, sp, #48	@ 0x30
 800c470:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c474:	3b01      	subs	r3, #1
 800c476:	430a      	orrs	r2, r1
 800c478:	e787      	b.n	800c38a <__kernel_rem_pio2+0x28a>
 800c47a:	3401      	adds	r4, #1
 800c47c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c480:	2a00      	cmp	r2, #0
 800c482:	d0fa      	beq.n	800c47a <__kernel_rem_pio2+0x37a>
 800c484:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c486:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c48a:	eb0d 0503 	add.w	r5, sp, r3
 800c48e:	9b06      	ldr	r3, [sp, #24]
 800c490:	aa20      	add	r2, sp, #128	@ 0x80
 800c492:	4443      	add	r3, r8
 800c494:	f108 0701 	add.w	r7, r8, #1
 800c498:	3d98      	subs	r5, #152	@ 0x98
 800c49a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800c49e:	4444      	add	r4, r8
 800c4a0:	42bc      	cmp	r4, r7
 800c4a2:	da04      	bge.n	800c4ae <__kernel_rem_pio2+0x3ae>
 800c4a4:	46a0      	mov	r8, r4
 800c4a6:	e6a2      	b.n	800c1ee <__kernel_rem_pio2+0xee>
 800c4a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c4aa:	2401      	movs	r4, #1
 800c4ac:	e7e6      	b.n	800c47c <__kernel_rem_pio2+0x37c>
 800c4ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4b0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800c4b4:	f7f4 f82e 	bl	8000514 <__aeabi_i2d>
 800c4b8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800c780 <__kernel_rem_pio2+0x680>
 800c4bc:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c4c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c4c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c4c8:	46b2      	mov	sl, r6
 800c4ca:	f04f 0800 	mov.w	r8, #0
 800c4ce:	9b05      	ldr	r3, [sp, #20]
 800c4d0:	4598      	cmp	r8, r3
 800c4d2:	dd05      	ble.n	800c4e0 <__kernel_rem_pio2+0x3e0>
 800c4d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c4d8:	3701      	adds	r7, #1
 800c4da:	eca5 7b02 	vstmia	r5!, {d7}
 800c4de:	e7df      	b.n	800c4a0 <__kernel_rem_pio2+0x3a0>
 800c4e0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800c4e4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c4e8:	f7f4 f87e 	bl	80005e8 <__aeabi_dmul>
 800c4ec:	4602      	mov	r2, r0
 800c4ee:	460b      	mov	r3, r1
 800c4f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4f4:	f7f3 fec2 	bl	800027c <__adddf3>
 800c4f8:	f108 0801 	add.w	r8, r8, #1
 800c4fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c500:	e7e5      	b.n	800c4ce <__kernel_rem_pio2+0x3ce>
 800c502:	f1cb 0000 	rsb	r0, fp, #0
 800c506:	ec47 6b10 	vmov	d0, r6, r7
 800c50a:	f000 f951 	bl	800c7b0 <scalbn>
 800c50e:	ec55 4b10 	vmov	r4, r5, d0
 800c512:	4b9d      	ldr	r3, [pc, #628]	@ (800c788 <__kernel_rem_pio2+0x688>)
 800c514:	2200      	movs	r2, #0
 800c516:	4620      	mov	r0, r4
 800c518:	4629      	mov	r1, r5
 800c51a:	f7f4 faeb 	bl	8000af4 <__aeabi_dcmpge>
 800c51e:	b300      	cbz	r0, 800c562 <__kernel_rem_pio2+0x462>
 800c520:	4b9a      	ldr	r3, [pc, #616]	@ (800c78c <__kernel_rem_pio2+0x68c>)
 800c522:	2200      	movs	r2, #0
 800c524:	4620      	mov	r0, r4
 800c526:	4629      	mov	r1, r5
 800c528:	f7f4 f85e 	bl	80005e8 <__aeabi_dmul>
 800c52c:	f7f4 faf6 	bl	8000b1c <__aeabi_d2iz>
 800c530:	4606      	mov	r6, r0
 800c532:	f7f3 ffef 	bl	8000514 <__aeabi_i2d>
 800c536:	4b94      	ldr	r3, [pc, #592]	@ (800c788 <__kernel_rem_pio2+0x688>)
 800c538:	2200      	movs	r2, #0
 800c53a:	f7f4 f855 	bl	80005e8 <__aeabi_dmul>
 800c53e:	460b      	mov	r3, r1
 800c540:	4602      	mov	r2, r0
 800c542:	4629      	mov	r1, r5
 800c544:	4620      	mov	r0, r4
 800c546:	f7f3 fe97 	bl	8000278 <__aeabi_dsub>
 800c54a:	f7f4 fae7 	bl	8000b1c <__aeabi_d2iz>
 800c54e:	ab0c      	add	r3, sp, #48	@ 0x30
 800c550:	f10b 0b18 	add.w	fp, fp, #24
 800c554:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800c558:	f108 0801 	add.w	r8, r8, #1
 800c55c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800c560:	e722      	b.n	800c3a8 <__kernel_rem_pio2+0x2a8>
 800c562:	4620      	mov	r0, r4
 800c564:	4629      	mov	r1, r5
 800c566:	f7f4 fad9 	bl	8000b1c <__aeabi_d2iz>
 800c56a:	ab0c      	add	r3, sp, #48	@ 0x30
 800c56c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800c570:	e71a      	b.n	800c3a8 <__kernel_rem_pio2+0x2a8>
 800c572:	ab0c      	add	r3, sp, #48	@ 0x30
 800c574:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c578:	f7f3 ffcc 	bl	8000514 <__aeabi_i2d>
 800c57c:	4622      	mov	r2, r4
 800c57e:	462b      	mov	r3, r5
 800c580:	f7f4 f832 	bl	80005e8 <__aeabi_dmul>
 800c584:	4652      	mov	r2, sl
 800c586:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800c58a:	465b      	mov	r3, fp
 800c58c:	4620      	mov	r0, r4
 800c58e:	4629      	mov	r1, r5
 800c590:	f7f4 f82a 	bl	80005e8 <__aeabi_dmul>
 800c594:	3e01      	subs	r6, #1
 800c596:	4604      	mov	r4, r0
 800c598:	460d      	mov	r5, r1
 800c59a:	e718      	b.n	800c3ce <__kernel_rem_pio2+0x2ce>
 800c59c:	9906      	ldr	r1, [sp, #24]
 800c59e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800c5a2:	9106      	str	r1, [sp, #24]
 800c5a4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800c5a8:	f7f4 f81e 	bl	80005e8 <__aeabi_dmul>
 800c5ac:	4602      	mov	r2, r0
 800c5ae:	460b      	mov	r3, r1
 800c5b0:	4650      	mov	r0, sl
 800c5b2:	4659      	mov	r1, fp
 800c5b4:	f7f3 fe62 	bl	800027c <__adddf3>
 800c5b8:	3601      	adds	r6, #1
 800c5ba:	4682      	mov	sl, r0
 800c5bc:	468b      	mov	fp, r1
 800c5be:	9b00      	ldr	r3, [sp, #0]
 800c5c0:	429e      	cmp	r6, r3
 800c5c2:	dc01      	bgt.n	800c5c8 <__kernel_rem_pio2+0x4c8>
 800c5c4:	42b5      	cmp	r5, r6
 800c5c6:	dae9      	bge.n	800c59c <__kernel_rem_pio2+0x49c>
 800c5c8:	ab48      	add	r3, sp, #288	@ 0x120
 800c5ca:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c5ce:	e9c5 ab00 	strd	sl, fp, [r5]
 800c5d2:	3c01      	subs	r4, #1
 800c5d4:	e6ff      	b.n	800c3d6 <__kernel_rem_pio2+0x2d6>
 800c5d6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800c5d8:	2b02      	cmp	r3, #2
 800c5da:	dc0b      	bgt.n	800c5f4 <__kernel_rem_pio2+0x4f4>
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	dc39      	bgt.n	800c654 <__kernel_rem_pio2+0x554>
 800c5e0:	d05d      	beq.n	800c69e <__kernel_rem_pio2+0x59e>
 800c5e2:	9b02      	ldr	r3, [sp, #8]
 800c5e4:	f003 0007 	and.w	r0, r3, #7
 800c5e8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800c5ec:	ecbd 8b02 	vpop	{d8}
 800c5f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5f4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800c5f6:	2b03      	cmp	r3, #3
 800c5f8:	d1f3      	bne.n	800c5e2 <__kernel_rem_pio2+0x4e2>
 800c5fa:	9b05      	ldr	r3, [sp, #20]
 800c5fc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c600:	eb0d 0403 	add.w	r4, sp, r3
 800c604:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800c608:	4625      	mov	r5, r4
 800c60a:	46c2      	mov	sl, r8
 800c60c:	f1ba 0f00 	cmp.w	sl, #0
 800c610:	f1a5 0508 	sub.w	r5, r5, #8
 800c614:	dc6b      	bgt.n	800c6ee <__kernel_rem_pio2+0x5ee>
 800c616:	4645      	mov	r5, r8
 800c618:	2d01      	cmp	r5, #1
 800c61a:	f1a4 0408 	sub.w	r4, r4, #8
 800c61e:	f300 8087 	bgt.w	800c730 <__kernel_rem_pio2+0x630>
 800c622:	9c05      	ldr	r4, [sp, #20]
 800c624:	ab48      	add	r3, sp, #288	@ 0x120
 800c626:	441c      	add	r4, r3
 800c628:	2000      	movs	r0, #0
 800c62a:	2100      	movs	r1, #0
 800c62c:	f1b8 0f01 	cmp.w	r8, #1
 800c630:	f300 809c 	bgt.w	800c76c <__kernel_rem_pio2+0x66c>
 800c634:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800c638:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800c63c:	f1b9 0f00 	cmp.w	r9, #0
 800c640:	f040 80a6 	bne.w	800c790 <__kernel_rem_pio2+0x690>
 800c644:	9b04      	ldr	r3, [sp, #16]
 800c646:	e9c3 7800 	strd	r7, r8, [r3]
 800c64a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800c64e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c652:	e7c6      	b.n	800c5e2 <__kernel_rem_pio2+0x4e2>
 800c654:	9d05      	ldr	r5, [sp, #20]
 800c656:	ab48      	add	r3, sp, #288	@ 0x120
 800c658:	441d      	add	r5, r3
 800c65a:	4644      	mov	r4, r8
 800c65c:	2000      	movs	r0, #0
 800c65e:	2100      	movs	r1, #0
 800c660:	2c00      	cmp	r4, #0
 800c662:	da35      	bge.n	800c6d0 <__kernel_rem_pio2+0x5d0>
 800c664:	f1b9 0f00 	cmp.w	r9, #0
 800c668:	d038      	beq.n	800c6dc <__kernel_rem_pio2+0x5dc>
 800c66a:	4602      	mov	r2, r0
 800c66c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c670:	9c04      	ldr	r4, [sp, #16]
 800c672:	e9c4 2300 	strd	r2, r3, [r4]
 800c676:	4602      	mov	r2, r0
 800c678:	460b      	mov	r3, r1
 800c67a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800c67e:	f7f3 fdfb 	bl	8000278 <__aeabi_dsub>
 800c682:	ad4a      	add	r5, sp, #296	@ 0x128
 800c684:	2401      	movs	r4, #1
 800c686:	45a0      	cmp	r8, r4
 800c688:	da2b      	bge.n	800c6e2 <__kernel_rem_pio2+0x5e2>
 800c68a:	f1b9 0f00 	cmp.w	r9, #0
 800c68e:	d002      	beq.n	800c696 <__kernel_rem_pio2+0x596>
 800c690:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c694:	4619      	mov	r1, r3
 800c696:	9b04      	ldr	r3, [sp, #16]
 800c698:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c69c:	e7a1      	b.n	800c5e2 <__kernel_rem_pio2+0x4e2>
 800c69e:	9c05      	ldr	r4, [sp, #20]
 800c6a0:	ab48      	add	r3, sp, #288	@ 0x120
 800c6a2:	441c      	add	r4, r3
 800c6a4:	2000      	movs	r0, #0
 800c6a6:	2100      	movs	r1, #0
 800c6a8:	f1b8 0f00 	cmp.w	r8, #0
 800c6ac:	da09      	bge.n	800c6c2 <__kernel_rem_pio2+0x5c2>
 800c6ae:	f1b9 0f00 	cmp.w	r9, #0
 800c6b2:	d002      	beq.n	800c6ba <__kernel_rem_pio2+0x5ba>
 800c6b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c6b8:	4619      	mov	r1, r3
 800c6ba:	9b04      	ldr	r3, [sp, #16]
 800c6bc:	e9c3 0100 	strd	r0, r1, [r3]
 800c6c0:	e78f      	b.n	800c5e2 <__kernel_rem_pio2+0x4e2>
 800c6c2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c6c6:	f7f3 fdd9 	bl	800027c <__adddf3>
 800c6ca:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800c6ce:	e7eb      	b.n	800c6a8 <__kernel_rem_pio2+0x5a8>
 800c6d0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800c6d4:	f7f3 fdd2 	bl	800027c <__adddf3>
 800c6d8:	3c01      	subs	r4, #1
 800c6da:	e7c1      	b.n	800c660 <__kernel_rem_pio2+0x560>
 800c6dc:	4602      	mov	r2, r0
 800c6de:	460b      	mov	r3, r1
 800c6e0:	e7c6      	b.n	800c670 <__kernel_rem_pio2+0x570>
 800c6e2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800c6e6:	f7f3 fdc9 	bl	800027c <__adddf3>
 800c6ea:	3401      	adds	r4, #1
 800c6ec:	e7cb      	b.n	800c686 <__kernel_rem_pio2+0x586>
 800c6ee:	ed95 7b00 	vldr	d7, [r5]
 800c6f2:	ed8d 7b00 	vstr	d7, [sp]
 800c6f6:	ed95 7b02 	vldr	d7, [r5, #8]
 800c6fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c6fe:	ec53 2b17 	vmov	r2, r3, d7
 800c702:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c706:	f7f3 fdb9 	bl	800027c <__adddf3>
 800c70a:	4602      	mov	r2, r0
 800c70c:	460b      	mov	r3, r1
 800c70e:	4606      	mov	r6, r0
 800c710:	460f      	mov	r7, r1
 800c712:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c716:	f7f3 fdaf 	bl	8000278 <__aeabi_dsub>
 800c71a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c71e:	f7f3 fdad 	bl	800027c <__adddf3>
 800c722:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800c726:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800c72a:	e9c5 6700 	strd	r6, r7, [r5]
 800c72e:	e76d      	b.n	800c60c <__kernel_rem_pio2+0x50c>
 800c730:	ed94 7b00 	vldr	d7, [r4]
 800c734:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800c738:	ec51 0b17 	vmov	r0, r1, d7
 800c73c:	4652      	mov	r2, sl
 800c73e:	465b      	mov	r3, fp
 800c740:	ed8d 7b00 	vstr	d7, [sp]
 800c744:	f7f3 fd9a 	bl	800027c <__adddf3>
 800c748:	4602      	mov	r2, r0
 800c74a:	460b      	mov	r3, r1
 800c74c:	4606      	mov	r6, r0
 800c74e:	460f      	mov	r7, r1
 800c750:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c754:	f7f3 fd90 	bl	8000278 <__aeabi_dsub>
 800c758:	4652      	mov	r2, sl
 800c75a:	465b      	mov	r3, fp
 800c75c:	f7f3 fd8e 	bl	800027c <__adddf3>
 800c760:	3d01      	subs	r5, #1
 800c762:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c766:	e9c4 6700 	strd	r6, r7, [r4]
 800c76a:	e755      	b.n	800c618 <__kernel_rem_pio2+0x518>
 800c76c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c770:	f7f3 fd84 	bl	800027c <__adddf3>
 800c774:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800c778:	e758      	b.n	800c62c <__kernel_rem_pio2+0x52c>
 800c77a:	bf00      	nop
 800c77c:	f3af 8000 	nop.w
	...
 800c788:	41700000 	.word	0x41700000
 800c78c:	3e700000 	.word	0x3e700000
 800c790:	9b04      	ldr	r3, [sp, #16]
 800c792:	9a04      	ldr	r2, [sp, #16]
 800c794:	601f      	str	r7, [r3, #0]
 800c796:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800c79a:	605c      	str	r4, [r3, #4]
 800c79c:	609d      	str	r5, [r3, #8]
 800c79e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c7a2:	60d3      	str	r3, [r2, #12]
 800c7a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c7a8:	6110      	str	r0, [r2, #16]
 800c7aa:	6153      	str	r3, [r2, #20]
 800c7ac:	e719      	b.n	800c5e2 <__kernel_rem_pio2+0x4e2>
 800c7ae:	bf00      	nop

0800c7b0 <scalbn>:
 800c7b0:	b570      	push	{r4, r5, r6, lr}
 800c7b2:	ec55 4b10 	vmov	r4, r5, d0
 800c7b6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c7ba:	4606      	mov	r6, r0
 800c7bc:	462b      	mov	r3, r5
 800c7be:	b991      	cbnz	r1, 800c7e6 <scalbn+0x36>
 800c7c0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c7c4:	4323      	orrs	r3, r4
 800c7c6:	d03d      	beq.n	800c844 <scalbn+0x94>
 800c7c8:	4b35      	ldr	r3, [pc, #212]	@ (800c8a0 <scalbn+0xf0>)
 800c7ca:	4620      	mov	r0, r4
 800c7cc:	4629      	mov	r1, r5
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	f7f3 ff0a 	bl	80005e8 <__aeabi_dmul>
 800c7d4:	4b33      	ldr	r3, [pc, #204]	@ (800c8a4 <scalbn+0xf4>)
 800c7d6:	429e      	cmp	r6, r3
 800c7d8:	4604      	mov	r4, r0
 800c7da:	460d      	mov	r5, r1
 800c7dc:	da0f      	bge.n	800c7fe <scalbn+0x4e>
 800c7de:	a328      	add	r3, pc, #160	@ (adr r3, 800c880 <scalbn+0xd0>)
 800c7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7e4:	e01e      	b.n	800c824 <scalbn+0x74>
 800c7e6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800c7ea:	4291      	cmp	r1, r2
 800c7ec:	d10b      	bne.n	800c806 <scalbn+0x56>
 800c7ee:	4622      	mov	r2, r4
 800c7f0:	4620      	mov	r0, r4
 800c7f2:	4629      	mov	r1, r5
 800c7f4:	f7f3 fd42 	bl	800027c <__adddf3>
 800c7f8:	4604      	mov	r4, r0
 800c7fa:	460d      	mov	r5, r1
 800c7fc:	e022      	b.n	800c844 <scalbn+0x94>
 800c7fe:	460b      	mov	r3, r1
 800c800:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c804:	3936      	subs	r1, #54	@ 0x36
 800c806:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800c80a:	4296      	cmp	r6, r2
 800c80c:	dd0d      	ble.n	800c82a <scalbn+0x7a>
 800c80e:	2d00      	cmp	r5, #0
 800c810:	a11d      	add	r1, pc, #116	@ (adr r1, 800c888 <scalbn+0xd8>)
 800c812:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c816:	da02      	bge.n	800c81e <scalbn+0x6e>
 800c818:	a11d      	add	r1, pc, #116	@ (adr r1, 800c890 <scalbn+0xe0>)
 800c81a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c81e:	a31a      	add	r3, pc, #104	@ (adr r3, 800c888 <scalbn+0xd8>)
 800c820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c824:	f7f3 fee0 	bl	80005e8 <__aeabi_dmul>
 800c828:	e7e6      	b.n	800c7f8 <scalbn+0x48>
 800c82a:	1872      	adds	r2, r6, r1
 800c82c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800c830:	428a      	cmp	r2, r1
 800c832:	dcec      	bgt.n	800c80e <scalbn+0x5e>
 800c834:	2a00      	cmp	r2, #0
 800c836:	dd08      	ble.n	800c84a <scalbn+0x9a>
 800c838:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c83c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c840:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c844:	ec45 4b10 	vmov	d0, r4, r5
 800c848:	bd70      	pop	{r4, r5, r6, pc}
 800c84a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800c84e:	da08      	bge.n	800c862 <scalbn+0xb2>
 800c850:	2d00      	cmp	r5, #0
 800c852:	a10b      	add	r1, pc, #44	@ (adr r1, 800c880 <scalbn+0xd0>)
 800c854:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c858:	dac1      	bge.n	800c7de <scalbn+0x2e>
 800c85a:	a10f      	add	r1, pc, #60	@ (adr r1, 800c898 <scalbn+0xe8>)
 800c85c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c860:	e7bd      	b.n	800c7de <scalbn+0x2e>
 800c862:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c866:	3236      	adds	r2, #54	@ 0x36
 800c868:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c86c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c870:	4620      	mov	r0, r4
 800c872:	4b0d      	ldr	r3, [pc, #52]	@ (800c8a8 <scalbn+0xf8>)
 800c874:	4629      	mov	r1, r5
 800c876:	2200      	movs	r2, #0
 800c878:	e7d4      	b.n	800c824 <scalbn+0x74>
 800c87a:	bf00      	nop
 800c87c:	f3af 8000 	nop.w
 800c880:	c2f8f359 	.word	0xc2f8f359
 800c884:	01a56e1f 	.word	0x01a56e1f
 800c888:	8800759c 	.word	0x8800759c
 800c88c:	7e37e43c 	.word	0x7e37e43c
 800c890:	8800759c 	.word	0x8800759c
 800c894:	fe37e43c 	.word	0xfe37e43c
 800c898:	c2f8f359 	.word	0xc2f8f359
 800c89c:	81a56e1f 	.word	0x81a56e1f
 800c8a0:	43500000 	.word	0x43500000
 800c8a4:	ffff3cb0 	.word	0xffff3cb0
 800c8a8:	3c900000 	.word	0x3c900000
 800c8ac:	00000000 	.word	0x00000000

0800c8b0 <floor>:
 800c8b0:	ec51 0b10 	vmov	r0, r1, d0
 800c8b4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c8b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8bc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800c8c0:	2e13      	cmp	r6, #19
 800c8c2:	460c      	mov	r4, r1
 800c8c4:	4605      	mov	r5, r0
 800c8c6:	4680      	mov	r8, r0
 800c8c8:	dc34      	bgt.n	800c934 <floor+0x84>
 800c8ca:	2e00      	cmp	r6, #0
 800c8cc:	da17      	bge.n	800c8fe <floor+0x4e>
 800c8ce:	a332      	add	r3, pc, #200	@ (adr r3, 800c998 <floor+0xe8>)
 800c8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d4:	f7f3 fcd2 	bl	800027c <__adddf3>
 800c8d8:	2200      	movs	r2, #0
 800c8da:	2300      	movs	r3, #0
 800c8dc:	f7f4 f914 	bl	8000b08 <__aeabi_dcmpgt>
 800c8e0:	b150      	cbz	r0, 800c8f8 <floor+0x48>
 800c8e2:	2c00      	cmp	r4, #0
 800c8e4:	da55      	bge.n	800c992 <floor+0xe2>
 800c8e6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800c8ea:	432c      	orrs	r4, r5
 800c8ec:	2500      	movs	r5, #0
 800c8ee:	42ac      	cmp	r4, r5
 800c8f0:	4c2b      	ldr	r4, [pc, #172]	@ (800c9a0 <floor+0xf0>)
 800c8f2:	bf08      	it	eq
 800c8f4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800c8f8:	4621      	mov	r1, r4
 800c8fa:	4628      	mov	r0, r5
 800c8fc:	e023      	b.n	800c946 <floor+0x96>
 800c8fe:	4f29      	ldr	r7, [pc, #164]	@ (800c9a4 <floor+0xf4>)
 800c900:	4137      	asrs	r7, r6
 800c902:	ea01 0307 	and.w	r3, r1, r7
 800c906:	4303      	orrs	r3, r0
 800c908:	d01d      	beq.n	800c946 <floor+0x96>
 800c90a:	a323      	add	r3, pc, #140	@ (adr r3, 800c998 <floor+0xe8>)
 800c90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c910:	f7f3 fcb4 	bl	800027c <__adddf3>
 800c914:	2200      	movs	r2, #0
 800c916:	2300      	movs	r3, #0
 800c918:	f7f4 f8f6 	bl	8000b08 <__aeabi_dcmpgt>
 800c91c:	2800      	cmp	r0, #0
 800c91e:	d0eb      	beq.n	800c8f8 <floor+0x48>
 800c920:	2c00      	cmp	r4, #0
 800c922:	bfbe      	ittt	lt
 800c924:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800c928:	4133      	asrlt	r3, r6
 800c92a:	18e4      	addlt	r4, r4, r3
 800c92c:	ea24 0407 	bic.w	r4, r4, r7
 800c930:	2500      	movs	r5, #0
 800c932:	e7e1      	b.n	800c8f8 <floor+0x48>
 800c934:	2e33      	cmp	r6, #51	@ 0x33
 800c936:	dd0a      	ble.n	800c94e <floor+0x9e>
 800c938:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800c93c:	d103      	bne.n	800c946 <floor+0x96>
 800c93e:	4602      	mov	r2, r0
 800c940:	460b      	mov	r3, r1
 800c942:	f7f3 fc9b 	bl	800027c <__adddf3>
 800c946:	ec41 0b10 	vmov	d0, r0, r1
 800c94a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c94e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800c952:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c956:	40df      	lsrs	r7, r3
 800c958:	4207      	tst	r7, r0
 800c95a:	d0f4      	beq.n	800c946 <floor+0x96>
 800c95c:	a30e      	add	r3, pc, #56	@ (adr r3, 800c998 <floor+0xe8>)
 800c95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c962:	f7f3 fc8b 	bl	800027c <__adddf3>
 800c966:	2200      	movs	r2, #0
 800c968:	2300      	movs	r3, #0
 800c96a:	f7f4 f8cd 	bl	8000b08 <__aeabi_dcmpgt>
 800c96e:	2800      	cmp	r0, #0
 800c970:	d0c2      	beq.n	800c8f8 <floor+0x48>
 800c972:	2c00      	cmp	r4, #0
 800c974:	da0a      	bge.n	800c98c <floor+0xdc>
 800c976:	2e14      	cmp	r6, #20
 800c978:	d101      	bne.n	800c97e <floor+0xce>
 800c97a:	3401      	adds	r4, #1
 800c97c:	e006      	b.n	800c98c <floor+0xdc>
 800c97e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800c982:	2301      	movs	r3, #1
 800c984:	40b3      	lsls	r3, r6
 800c986:	441d      	add	r5, r3
 800c988:	4545      	cmp	r5, r8
 800c98a:	d3f6      	bcc.n	800c97a <floor+0xca>
 800c98c:	ea25 0507 	bic.w	r5, r5, r7
 800c990:	e7b2      	b.n	800c8f8 <floor+0x48>
 800c992:	2500      	movs	r5, #0
 800c994:	462c      	mov	r4, r5
 800c996:	e7af      	b.n	800c8f8 <floor+0x48>
 800c998:	8800759c 	.word	0x8800759c
 800c99c:	7e37e43c 	.word	0x7e37e43c
 800c9a0:	bff00000 	.word	0xbff00000
 800c9a4:	000fffff 	.word	0x000fffff

0800c9a8 <_init>:
 800c9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9aa:	bf00      	nop
 800c9ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9ae:	bc08      	pop	{r3}
 800c9b0:	469e      	mov	lr, r3
 800c9b2:	4770      	bx	lr

0800c9b4 <_fini>:
 800c9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9b6:	bf00      	nop
 800c9b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9ba:	bc08      	pop	{r3}
 800c9bc:	469e      	mov	lr, r3
 800c9be:	4770      	bx	lr
