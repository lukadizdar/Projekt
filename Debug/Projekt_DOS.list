
Projekt_DOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c164  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  0800c2f4  0800c2f4  0000d2f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7c0  0800c7c0  0000e088  2**0
                  CONTENTS
  4 .ARM          00000008  0800c7c0  0800c7c0  0000d7c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7c8  0800c7c8  0000e088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7c8  0800c7c8  0000d7c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c7cc  0800c7cc  0000d7cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800c7d0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e088  2**0
                  CONTENTS
 10 .bss          00002270  20000088  20000088  0000e088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200022f8  200022f8  0000e088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c2c0  00000000  00000000  0000e0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000049f4  00000000  00000000  0002a378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001820  00000000  00000000  0002ed70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000127e  00000000  00000000  00030590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026d40  00000000  00000000  0003180e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000200d1  00000000  00000000  0005854e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6c58  00000000  00000000  0007861f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014f277  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000706c  00000000  00000000  0014f2bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00156328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c2dc 	.word	0x0800c2dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800c2dc 	.word	0x0800c2dc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ac0:	f000 b96a 	b.w	8000d98 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	460c      	mov	r4, r1
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d14e      	bne.n	8000b86 <__udivmoddi4+0xaa>
 8000ae8:	4694      	mov	ip, r2
 8000aea:	458c      	cmp	ip, r1
 8000aec:	4686      	mov	lr, r0
 8000aee:	fab2 f282 	clz	r2, r2
 8000af2:	d962      	bls.n	8000bba <__udivmoddi4+0xde>
 8000af4:	b14a      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af6:	f1c2 0320 	rsb	r3, r2, #32
 8000afa:	4091      	lsls	r1, r2
 8000afc:	fa20 f303 	lsr.w	r3, r0, r3
 8000b00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b04:	4319      	orrs	r1, r3
 8000b06:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b0e:	fa1f f68c 	uxth.w	r6, ip
 8000b12:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b22:	fb04 f106 	mul.w	r1, r4, r6
 8000b26:	4299      	cmp	r1, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x64>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b32:	f080 8112 	bcs.w	8000d5a <__udivmoddi4+0x27e>
 8000b36:	4299      	cmp	r1, r3
 8000b38:	f240 810f 	bls.w	8000d5a <__udivmoddi4+0x27e>
 8000b3c:	3c02      	subs	r4, #2
 8000b3e:	4463      	add	r3, ip
 8000b40:	1a59      	subs	r1, r3, r1
 8000b42:	fa1f f38e 	uxth.w	r3, lr
 8000b46:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b4a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b52:	fb00 f606 	mul.w	r6, r0, r6
 8000b56:	429e      	cmp	r6, r3
 8000b58:	d90a      	bls.n	8000b70 <__udivmoddi4+0x94>
 8000b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b62:	f080 80fc 	bcs.w	8000d5e <__udivmoddi4+0x282>
 8000b66:	429e      	cmp	r6, r3
 8000b68:	f240 80f9 	bls.w	8000d5e <__udivmoddi4+0x282>
 8000b6c:	4463      	add	r3, ip
 8000b6e:	3802      	subs	r0, #2
 8000b70:	1b9b      	subs	r3, r3, r6
 8000b72:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b76:	2100      	movs	r1, #0
 8000b78:	b11d      	cbz	r5, 8000b82 <__udivmoddi4+0xa6>
 8000b7a:	40d3      	lsrs	r3, r2
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d905      	bls.n	8000b96 <__udivmoddi4+0xba>
 8000b8a:	b10d      	cbz	r5, 8000b90 <__udivmoddi4+0xb4>
 8000b8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b90:	2100      	movs	r1, #0
 8000b92:	4608      	mov	r0, r1
 8000b94:	e7f5      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000b96:	fab3 f183 	clz	r1, r3
 8000b9a:	2900      	cmp	r1, #0
 8000b9c:	d146      	bne.n	8000c2c <__udivmoddi4+0x150>
 8000b9e:	42a3      	cmp	r3, r4
 8000ba0:	d302      	bcc.n	8000ba8 <__udivmoddi4+0xcc>
 8000ba2:	4290      	cmp	r0, r2
 8000ba4:	f0c0 80f0 	bcc.w	8000d88 <__udivmoddi4+0x2ac>
 8000ba8:	1a86      	subs	r6, r0, r2
 8000baa:	eb64 0303 	sbc.w	r3, r4, r3
 8000bae:	2001      	movs	r0, #1
 8000bb0:	2d00      	cmp	r5, #0
 8000bb2:	d0e6      	beq.n	8000b82 <__udivmoddi4+0xa6>
 8000bb4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bb8:	e7e3      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000bba:	2a00      	cmp	r2, #0
 8000bbc:	f040 8090 	bne.w	8000ce0 <__udivmoddi4+0x204>
 8000bc0:	eba1 040c 	sub.w	r4, r1, ip
 8000bc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc8:	fa1f f78c 	uxth.w	r7, ip
 8000bcc:	2101      	movs	r1, #1
 8000bce:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bd6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bde:	fb07 f006 	mul.w	r0, r7, r6
 8000be2:	4298      	cmp	r0, r3
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0x11c>
 8000be6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bea:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x11a>
 8000bf0:	4298      	cmp	r0, r3
 8000bf2:	f200 80cd 	bhi.w	8000d90 <__udivmoddi4+0x2b4>
 8000bf6:	4626      	mov	r6, r4
 8000bf8:	1a1c      	subs	r4, r3, r0
 8000bfa:	fa1f f38e 	uxth.w	r3, lr
 8000bfe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c02:	fb08 4410 	mls	r4, r8, r0, r4
 8000c06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c0a:	fb00 f707 	mul.w	r7, r0, r7
 8000c0e:	429f      	cmp	r7, r3
 8000c10:	d908      	bls.n	8000c24 <__udivmoddi4+0x148>
 8000c12:	eb1c 0303 	adds.w	r3, ip, r3
 8000c16:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c1a:	d202      	bcs.n	8000c22 <__udivmoddi4+0x146>
 8000c1c:	429f      	cmp	r7, r3
 8000c1e:	f200 80b0 	bhi.w	8000d82 <__udivmoddi4+0x2a6>
 8000c22:	4620      	mov	r0, r4
 8000c24:	1bdb      	subs	r3, r3, r7
 8000c26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2a:	e7a5      	b.n	8000b78 <__udivmoddi4+0x9c>
 8000c2c:	f1c1 0620 	rsb	r6, r1, #32
 8000c30:	408b      	lsls	r3, r1
 8000c32:	fa22 f706 	lsr.w	r7, r2, r6
 8000c36:	431f      	orrs	r7, r3
 8000c38:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c3c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c40:	ea43 030c 	orr.w	r3, r3, ip
 8000c44:	40f4      	lsrs	r4, r6
 8000c46:	fa00 f801 	lsl.w	r8, r0, r1
 8000c4a:	0c38      	lsrs	r0, r7, #16
 8000c4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c50:	fbb4 fef0 	udiv	lr, r4, r0
 8000c54:	fa1f fc87 	uxth.w	ip, r7
 8000c58:	fb00 441e 	mls	r4, r0, lr, r4
 8000c5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c60:	fb0e f90c 	mul.w	r9, lr, ip
 8000c64:	45a1      	cmp	r9, r4
 8000c66:	fa02 f201 	lsl.w	r2, r2, r1
 8000c6a:	d90a      	bls.n	8000c82 <__udivmoddi4+0x1a6>
 8000c6c:	193c      	adds	r4, r7, r4
 8000c6e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c72:	f080 8084 	bcs.w	8000d7e <__udivmoddi4+0x2a2>
 8000c76:	45a1      	cmp	r9, r4
 8000c78:	f240 8081 	bls.w	8000d7e <__udivmoddi4+0x2a2>
 8000c7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c80:	443c      	add	r4, r7
 8000c82:	eba4 0409 	sub.w	r4, r4, r9
 8000c86:	fa1f f983 	uxth.w	r9, r3
 8000c8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c8e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c96:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	d907      	bls.n	8000cae <__udivmoddi4+0x1d2>
 8000c9e:	193c      	adds	r4, r7, r4
 8000ca0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ca4:	d267      	bcs.n	8000d76 <__udivmoddi4+0x29a>
 8000ca6:	45a4      	cmp	ip, r4
 8000ca8:	d965      	bls.n	8000d76 <__udivmoddi4+0x29a>
 8000caa:	3b02      	subs	r3, #2
 8000cac:	443c      	add	r4, r7
 8000cae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cb2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cb6:	eba4 040c 	sub.w	r4, r4, ip
 8000cba:	429c      	cmp	r4, r3
 8000cbc:	46ce      	mov	lr, r9
 8000cbe:	469c      	mov	ip, r3
 8000cc0:	d351      	bcc.n	8000d66 <__udivmoddi4+0x28a>
 8000cc2:	d04e      	beq.n	8000d62 <__udivmoddi4+0x286>
 8000cc4:	b155      	cbz	r5, 8000cdc <__udivmoddi4+0x200>
 8000cc6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cca:	eb64 040c 	sbc.w	r4, r4, ip
 8000cce:	fa04 f606 	lsl.w	r6, r4, r6
 8000cd2:	40cb      	lsrs	r3, r1
 8000cd4:	431e      	orrs	r6, r3
 8000cd6:	40cc      	lsrs	r4, r1
 8000cd8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	e750      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000ce0:	f1c2 0320 	rsb	r3, r2, #32
 8000ce4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ce8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cec:	fa24 f303 	lsr.w	r3, r4, r3
 8000cf0:	4094      	lsls	r4, r2
 8000cf2:	430c      	orrs	r4, r1
 8000cf4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cfc:	fa1f f78c 	uxth.w	r7, ip
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3110 	mls	r1, r8, r0, r3
 8000d08:	0c23      	lsrs	r3, r4, #16
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f107 	mul.w	r1, r0, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d908      	bls.n	8000d28 <__udivmoddi4+0x24c>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d1e:	d22c      	bcs.n	8000d7a <__udivmoddi4+0x29e>
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d92a      	bls.n	8000d7a <__udivmoddi4+0x29e>
 8000d24:	3802      	subs	r0, #2
 8000d26:	4463      	add	r3, ip
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d30:	fb08 3311 	mls	r3, r8, r1, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb01 f307 	mul.w	r3, r1, r7
 8000d3c:	42a3      	cmp	r3, r4
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x276>
 8000d40:	eb1c 0404 	adds.w	r4, ip, r4
 8000d44:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d48:	d213      	bcs.n	8000d72 <__udivmoddi4+0x296>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d911      	bls.n	8000d72 <__udivmoddi4+0x296>
 8000d4e:	3902      	subs	r1, #2
 8000d50:	4464      	add	r4, ip
 8000d52:	1ae4      	subs	r4, r4, r3
 8000d54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d58:	e739      	b.n	8000bce <__udivmoddi4+0xf2>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	e6f0      	b.n	8000b40 <__udivmoddi4+0x64>
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e706      	b.n	8000b70 <__udivmoddi4+0x94>
 8000d62:	45c8      	cmp	r8, r9
 8000d64:	d2ae      	bcs.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d66:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d6a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d6e:	3801      	subs	r0, #1
 8000d70:	e7a8      	b.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d72:	4631      	mov	r1, r6
 8000d74:	e7ed      	b.n	8000d52 <__udivmoddi4+0x276>
 8000d76:	4603      	mov	r3, r0
 8000d78:	e799      	b.n	8000cae <__udivmoddi4+0x1d2>
 8000d7a:	4630      	mov	r0, r6
 8000d7c:	e7d4      	b.n	8000d28 <__udivmoddi4+0x24c>
 8000d7e:	46d6      	mov	lr, sl
 8000d80:	e77f      	b.n	8000c82 <__udivmoddi4+0x1a6>
 8000d82:	4463      	add	r3, ip
 8000d84:	3802      	subs	r0, #2
 8000d86:	e74d      	b.n	8000c24 <__udivmoddi4+0x148>
 8000d88:	4606      	mov	r6, r0
 8000d8a:	4623      	mov	r3, r4
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e70f      	b.n	8000bb0 <__udivmoddi4+0xd4>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	4463      	add	r3, ip
 8000d94:	e730      	b.n	8000bf8 <__udivmoddi4+0x11c>
 8000d96:	bf00      	nop

08000d98 <__aeabi_idiv0>:
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <init_AudioReset>:
#include "i2s.h"
#include "spi.h"
#include "usb_host.h"
#include "gpio.h"
#include "audio.h"
void init_AudioReset() {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, AUDIO_RESET_PIN, GPIO_PIN_SET);
 8000da0:	2201      	movs	r2, #1
 8000da2:	2110      	movs	r1, #16
 8000da4:	4802      	ldr	r0, [pc, #8]	@ (8000db0 <init_AudioReset+0x14>)
 8000da6:	f001 fab5 	bl	8002314 <HAL_GPIO_WritePin>
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40020c00 	.word	0x40020c00

08000db4 <configAudio>:
void configAudio() {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af02      	add	r7, sp, #8
    uint8_t bytes[2];
    init_AudioReset();
 8000dba:	f7ff ffef 	bl	8000d9c <init_AudioReset>

    /* Power sequence */
    // Set Power Control Register to "on" state
    bytes[0] = 0x02;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x01;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000dc6:	1d3a      	adds	r2, r7, #4
 8000dc8:	2364      	movs	r3, #100	@ 0x64
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	2302      	movs	r3, #2
 8000dce:	2194      	movs	r1, #148	@ 0x94
 8000dd0:	486f      	ldr	r0, [pc, #444]	@ (8000f90 <configAudio+0x1dc>)
 8000dd2:	f003 fd31 	bl	8004838 <HAL_I2C_Master_Transmit>

    /* Initialization sequence */
    bytes[0] = 0x00;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x99;
 8000dda:	2399      	movs	r3, #153	@ 0x99
 8000ddc:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000dde:	1d3a      	adds	r2, r7, #4
 8000de0:	2364      	movs	r3, #100	@ 0x64
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	2302      	movs	r3, #2
 8000de6:	2194      	movs	r1, #148	@ 0x94
 8000de8:	4869      	ldr	r0, [pc, #420]	@ (8000f90 <configAudio+0x1dc>)
 8000dea:	f003 fd25 	bl	8004838 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x47;
 8000dee:	2347      	movs	r3, #71	@ 0x47
 8000df0:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x80;
 8000df2:	2380      	movs	r3, #128	@ 0x80
 8000df4:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000df6:	1d3a      	adds	r2, r7, #4
 8000df8:	2364      	movs	r3, #100	@ 0x64
 8000dfa:	9300      	str	r3, [sp, #0]
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	2194      	movs	r1, #148	@ 0x94
 8000e00:	4863      	ldr	r0, [pc, #396]	@ (8000f90 <configAudio+0x1dc>)
 8000e02:	f003 fd19 	bl	8004838 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x32;
 8000e06:	2332      	movs	r3, #50	@ 0x32
 8000e08:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x80;
 8000e0a:	2380      	movs	r3, #128	@ 0x80
 8000e0c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000e0e:	1d3a      	adds	r2, r7, #4
 8000e10:	2364      	movs	r3, #100	@ 0x64
 8000e12:	9300      	str	r3, [sp, #0]
 8000e14:	2302      	movs	r3, #2
 8000e16:	2194      	movs	r1, #148	@ 0x94
 8000e18:	485d      	ldr	r0, [pc, #372]	@ (8000f90 <configAudio+0x1dc>)
 8000e1a:	f003 fd0d 	bl	8004838 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x32;
 8000e1e:	2332      	movs	r3, #50	@ 0x32
 8000e20:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x00;
 8000e22:	2300      	movs	r3, #0
 8000e24:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000e26:	1d3a      	adds	r2, r7, #4
 8000e28:	2364      	movs	r3, #100	@ 0x64
 8000e2a:	9300      	str	r3, [sp, #0]
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	2194      	movs	r1, #148	@ 0x94
 8000e30:	4857      	ldr	r0, [pc, #348]	@ (8000f90 <configAudio+0x1dc>)
 8000e32:	f003 fd01 	bl	8004838 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x00;
 8000e36:	2300      	movs	r3, #0
 8000e38:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x00;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000e3e:	1d3a      	adds	r2, r7, #4
 8000e40:	2364      	movs	r3, #100	@ 0x64
 8000e42:	9300      	str	r3, [sp, #0]
 8000e44:	2302      	movs	r3, #2
 8000e46:	2194      	movs	r1, #148	@ 0x94
 8000e48:	4851      	ldr	r0, [pc, #324]	@ (8000f90 <configAudio+0x1dc>)
 8000e4a:	f003 fcf5 	bl	8004838 <HAL_I2C_Master_Transmit>

    /* Ctl registers configuration */
    bytes[0] = 0x04;
 8000e4e:	2304      	movs	r3, #4
 8000e50:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0xAF;
 8000e52:	23af      	movs	r3, #175	@ 0xaf
 8000e54:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000e56:	1d3a      	adds	r2, r7, #4
 8000e58:	2364      	movs	r3, #100	@ 0x64
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	2194      	movs	r1, #148	@ 0x94
 8000e60:	484b      	ldr	r0, [pc, #300]	@ (8000f90 <configAudio+0x1dc>)
 8000e62:	f003 fce9 	bl	8004838 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x0D;
 8000e66:	230d      	movs	r3, #13
 8000e68:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x70;
 8000e6a:	2370      	movs	r3, #112	@ 0x70
 8000e6c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000e6e:	1d3a      	adds	r2, r7, #4
 8000e70:	2364      	movs	r3, #100	@ 0x64
 8000e72:	9300      	str	r3, [sp, #0]
 8000e74:	2302      	movs	r3, #2
 8000e76:	2194      	movs	r1, #148	@ 0x94
 8000e78:	4845      	ldr	r0, [pc, #276]	@ (8000f90 <configAudio+0x1dc>)
 8000e7a:	f003 fcdd 	bl	8004838 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x05;
 8000e7e:	2305      	movs	r3, #5
 8000e80:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x81;
 8000e82:	2381      	movs	r3, #129	@ 0x81
 8000e84:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000e86:	1d3a      	adds	r2, r7, #4
 8000e88:	2364      	movs	r3, #100	@ 0x64
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	2194      	movs	r1, #148	@ 0x94
 8000e90:	483f      	ldr	r0, [pc, #252]	@ (8000f90 <configAudio+0x1dc>)
 8000e92:	f003 fcd1 	bl	8004838 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x06;
 8000e96:	2306      	movs	r3, #6
 8000e98:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x07;
 8000e9a:	2307      	movs	r3, #7
 8000e9c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000e9e:	1d3a      	adds	r2, r7, #4
 8000ea0:	2364      	movs	r3, #100	@ 0x64
 8000ea2:	9300      	str	r3, [sp, #0]
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	2194      	movs	r1, #148	@ 0x94
 8000ea8:	4839      	ldr	r0, [pc, #228]	@ (8000f90 <configAudio+0x1dc>)
 8000eaa:	f003 fcc5 	bl	8004838 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x0A;
 8000eae:	230a      	movs	r3, #10
 8000eb0:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x00;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000eb6:	1d3a      	adds	r2, r7, #4
 8000eb8:	2364      	movs	r3, #100	@ 0x64
 8000eba:	9300      	str	r3, [sp, #0]
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	2194      	movs	r1, #148	@ 0x94
 8000ec0:	4833      	ldr	r0, [pc, #204]	@ (8000f90 <configAudio+0x1dc>)
 8000ec2:	f003 fcb9 	bl	8004838 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x27;
 8000ec6:	2327      	movs	r3, #39	@ 0x27
 8000ec8:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x00;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000ece:	1d3a      	adds	r2, r7, #4
 8000ed0:	2364      	movs	r3, #100	@ 0x64
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	2194      	movs	r1, #148	@ 0x94
 8000ed8:	482d      	ldr	r0, [pc, #180]	@ (8000f90 <configAudio+0x1dc>)
 8000eda:	f003 fcad 	bl	8004838 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x1F;
 8000ede:	231f      	movs	r3, #31
 8000ee0:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x0F;
 8000ee2:	230f      	movs	r3, #15
 8000ee4:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000ee6:	1d3a      	adds	r2, r7, #4
 8000ee8:	2364      	movs	r3, #100	@ 0x64
 8000eea:	9300      	str	r3, [sp, #0]
 8000eec:	2302      	movs	r3, #2
 8000eee:	2194      	movs	r1, #148	@ 0x94
 8000ef0:	4827      	ldr	r0, [pc, #156]	@ (8000f90 <configAudio+0x1dc>)
 8000ef2:	f003 fca1 	bl	8004838 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x22;
 8000ef6:	2322      	movs	r3, #34	@ 0x22
 8000ef8:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0xC0;
 8000efa:	23c0      	movs	r3, #192	@ 0xc0
 8000efc:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000efe:	1d3a      	adds	r2, r7, #4
 8000f00:	2364      	movs	r3, #100	@ 0x64
 8000f02:	9300      	str	r3, [sp, #0]
 8000f04:	2302      	movs	r3, #2
 8000f06:	2194      	movs	r1, #148	@ 0x94
 8000f08:	4821      	ldr	r0, [pc, #132]	@ (8000f90 <configAudio+0x1dc>)
 8000f0a:	f003 fc95 	bl	8004838 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x14;
 8000f0e:	2314      	movs	r3, #20
 8000f10:	713b      	strb	r3, [r7, #4]
    bytes[1] = 2;
 8000f12:	2302      	movs	r3, #2
 8000f14:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000f16:	1d3a      	adds	r2, r7, #4
 8000f18:	2364      	movs	r3, #100	@ 0x64
 8000f1a:	9300      	str	r3, [sp, #0]
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	2194      	movs	r1, #148	@ 0x94
 8000f20:	481b      	ldr	r0, [pc, #108]	@ (8000f90 <configAudio+0x1dc>)
 8000f22:	f003 fc89 	bl	8004838 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x15;
 8000f26:	2315      	movs	r3, #21
 8000f28:	713b      	strb	r3, [r7, #4]
    bytes[1] = 2;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000f2e:	1d3a      	adds	r2, r7, #4
 8000f30:	2364      	movs	r3, #100	@ 0x64
 8000f32:	9300      	str	r3, [sp, #0]
 8000f34:	2302      	movs	r3, #2
 8000f36:	2194      	movs	r1, #148	@ 0x94
 8000f38:	4815      	ldr	r0, [pc, #84]	@ (8000f90 <configAudio+0x1dc>)
 8000f3a:	f003 fc7d 	bl	8004838 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x20;
 8000f3e:	2320      	movs	r3, #32
 8000f40:	713b      	strb	r3, [r7, #4]
    bytes[1] = 24;
 8000f42:	2318      	movs	r3, #24
 8000f44:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000f46:	1d3a      	adds	r2, r7, #4
 8000f48:	2364      	movs	r3, #100	@ 0x64
 8000f4a:	9300      	str	r3, [sp, #0]
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	2194      	movs	r1, #148	@ 0x94
 8000f50:	480f      	ldr	r0, [pc, #60]	@ (8000f90 <configAudio+0x1dc>)
 8000f52:	f003 fc71 	bl	8004838 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x21;
 8000f56:	2321      	movs	r3, #33	@ 0x21
 8000f58:	713b      	strb	r3, [r7, #4]
    bytes[1] = 24;
 8000f5a:	2318      	movs	r3, #24
 8000f5c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000f5e:	1d3a      	adds	r2, r7, #4
 8000f60:	2364      	movs	r3, #100	@ 0x64
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	2302      	movs	r3, #2
 8000f66:	2194      	movs	r1, #148	@ 0x94
 8000f68:	4809      	ldr	r0, [pc, #36]	@ (8000f90 <configAudio+0x1dc>)
 8000f6a:	f003 fc65 	bl	8004838 <HAL_I2C_Master_Transmit>

    /* Power up */
    bytes[0] = 0x02;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x9E;
 8000f72:	239e      	movs	r3, #158	@ 0x9e
 8000f74:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000f76:	1d3a      	adds	r2, r7, #4
 8000f78:	2364      	movs	r3, #100	@ 0x64
 8000f7a:	9300      	str	r3, [sp, #0]
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	2194      	movs	r1, #148	@ 0x94
 8000f80:	4803      	ldr	r0, [pc, #12]	@ (8000f90 <configAudio+0x1dc>)
 8000f82:	f003 fc59 	bl	8004838 <HAL_I2C_Master_Transmit>
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	200000a4 	.word	0x200000a4

08000f94 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08c      	sub	sp, #48	@ 0x30
 8000f98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9a:	f107 031c 	add.w	r3, r7, #28
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]
 8000fa8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	61bb      	str	r3, [r7, #24]
 8000fae:	4b72      	ldr	r3, [pc, #456]	@ (8001178 <MX_GPIO_Init+0x1e4>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb2:	4a71      	ldr	r2, [pc, #452]	@ (8001178 <MX_GPIO_Init+0x1e4>)
 8000fb4:	f043 0310 	orr.w	r3, r3, #16
 8000fb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fba:	4b6f      	ldr	r3, [pc, #444]	@ (8001178 <MX_GPIO_Init+0x1e4>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	f003 0310 	and.w	r3, r3, #16
 8000fc2:	61bb      	str	r3, [r7, #24]
 8000fc4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
 8000fca:	4b6b      	ldr	r3, [pc, #428]	@ (8001178 <MX_GPIO_Init+0x1e4>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	4a6a      	ldr	r2, [pc, #424]	@ (8001178 <MX_GPIO_Init+0x1e4>)
 8000fd0:	f043 0304 	orr.w	r3, r3, #4
 8000fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd6:	4b68      	ldr	r3, [pc, #416]	@ (8001178 <MX_GPIO_Init+0x1e4>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	f003 0304 	and.w	r3, r3, #4
 8000fde:	617b      	str	r3, [r7, #20]
 8000fe0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
 8000fe6:	4b64      	ldr	r3, [pc, #400]	@ (8001178 <MX_GPIO_Init+0x1e4>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fea:	4a63      	ldr	r2, [pc, #396]	@ (8001178 <MX_GPIO_Init+0x1e4>)
 8000fec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff2:	4b61      	ldr	r3, [pc, #388]	@ (8001178 <MX_GPIO_Init+0x1e4>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	4b5d      	ldr	r3, [pc, #372]	@ (8001178 <MX_GPIO_Init+0x1e4>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	4a5c      	ldr	r2, [pc, #368]	@ (8001178 <MX_GPIO_Init+0x1e4>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	6313      	str	r3, [r2, #48]	@ 0x30
 800100e:	4b5a      	ldr	r3, [pc, #360]	@ (8001178 <MX_GPIO_Init+0x1e4>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	4b56      	ldr	r3, [pc, #344]	@ (8001178 <MX_GPIO_Init+0x1e4>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001022:	4a55      	ldr	r2, [pc, #340]	@ (8001178 <MX_GPIO_Init+0x1e4>)
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	6313      	str	r3, [r2, #48]	@ 0x30
 800102a:	4b53      	ldr	r3, [pc, #332]	@ (8001178 <MX_GPIO_Init+0x1e4>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	4b4f      	ldr	r3, [pc, #316]	@ (8001178 <MX_GPIO_Init+0x1e4>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	4a4e      	ldr	r2, [pc, #312]	@ (8001178 <MX_GPIO_Init+0x1e4>)
 8001040:	f043 0308 	orr.w	r3, r3, #8
 8001044:	6313      	str	r3, [r2, #48]	@ 0x30
 8001046:	4b4c      	ldr	r3, [pc, #304]	@ (8001178 <MX_GPIO_Init+0x1e4>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	f003 0308 	and.w	r3, r3, #8
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	2108      	movs	r1, #8
 8001056:	4849      	ldr	r0, [pc, #292]	@ (800117c <MX_GPIO_Init+0x1e8>)
 8001058:	f001 f95c 	bl	8002314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800105c:	2201      	movs	r2, #1
 800105e:	2101      	movs	r1, #1
 8001060:	4847      	ldr	r0, [pc, #284]	@ (8001180 <MX_GPIO_Init+0x1ec>)
 8001062:	f001 f957 	bl	8002314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001066:	2200      	movs	r2, #0
 8001068:	f24f 0110 	movw	r1, #61456	@ 0xf010
 800106c:	4845      	ldr	r0, [pc, #276]	@ (8001184 <MX_GPIO_Init+0x1f0>)
 800106e:	f001 f951 	bl	8002314 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001072:	2308      	movs	r3, #8
 8001074:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001076:	2301      	movs	r3, #1
 8001078:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2300      	movs	r3, #0
 8001080:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001082:	f107 031c 	add.w	r3, r7, #28
 8001086:	4619      	mov	r1, r3
 8001088:	483c      	ldr	r0, [pc, #240]	@ (800117c <MX_GPIO_Init+0x1e8>)
 800108a:	f000 ffa7 	bl	8001fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800108e:	2301      	movs	r3, #1
 8001090:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001092:	2301      	movs	r3, #1
 8001094:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800109e:	f107 031c 	add.w	r3, r7, #28
 80010a2:	4619      	mov	r1, r3
 80010a4:	4836      	ldr	r0, [pc, #216]	@ (8001180 <MX_GPIO_Init+0x1ec>)
 80010a6:	f000 ff99 	bl	8001fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80010aa:	2308      	movs	r3, #8
 80010ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ae:	2302      	movs	r3, #2
 80010b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2300      	movs	r3, #0
 80010b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010ba:	2305      	movs	r3, #5
 80010bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80010be:	f107 031c 	add.w	r3, r7, #28
 80010c2:	4619      	mov	r1, r3
 80010c4:	482e      	ldr	r0, [pc, #184]	@ (8001180 <MX_GPIO_Init+0x1ec>)
 80010c6:	f000 ff89 	bl	8001fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010ca:	2301      	movs	r3, #1
 80010cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80010ce:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80010d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010d8:	f107 031c 	add.w	r3, r7, #28
 80010dc:	4619      	mov	r1, r3
 80010de:	482a      	ldr	r0, [pc, #168]	@ (8001188 <MX_GPIO_Init+0x1f4>)
 80010e0:	f000 ff7c 	bl	8001fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80010e4:	2304      	movs	r3, #4
 80010e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e8:	2300      	movs	r3, #0
 80010ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80010f0:	f107 031c 	add.w	r3, r7, #28
 80010f4:	4619      	mov	r1, r3
 80010f6:	4825      	ldr	r0, [pc, #148]	@ (800118c <MX_GPIO_Init+0x1f8>)
 80010f8:	f000 ff70 	bl	8001fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80010fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001100:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2300      	movs	r3, #0
 800110c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800110e:	2305      	movs	r3, #5
 8001110:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001112:	f107 031c 	add.w	r3, r7, #28
 8001116:	4619      	mov	r1, r3
 8001118:	481c      	ldr	r0, [pc, #112]	@ (800118c <MX_GPIO_Init+0x1f8>)
 800111a:	f000 ff5f 	bl	8001fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800111e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001122:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001124:	2301      	movs	r3, #1
 8001126:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	2300      	movs	r3, #0
 800112e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001130:	f107 031c 	add.w	r3, r7, #28
 8001134:	4619      	mov	r1, r3
 8001136:	4813      	ldr	r0, [pc, #76]	@ (8001184 <MX_GPIO_Init+0x1f0>)
 8001138:	f000 ff50 	bl	8001fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800113c:	2320      	movs	r3, #32
 800113e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001140:	2300      	movs	r3, #0
 8001142:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001148:	f107 031c 	add.w	r3, r7, #28
 800114c:	4619      	mov	r1, r3
 800114e:	480d      	ldr	r0, [pc, #52]	@ (8001184 <MX_GPIO_Init+0x1f0>)
 8001150:	f000 ff44 	bl	8001fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001154:	2302      	movs	r3, #2
 8001156:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001158:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800115c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	4619      	mov	r1, r3
 8001168:	4804      	ldr	r0, [pc, #16]	@ (800117c <MX_GPIO_Init+0x1e8>)
 800116a:	f000 ff37 	bl	8001fdc <HAL_GPIO_Init>

}
 800116e:	bf00      	nop
 8001170:	3730      	adds	r7, #48	@ 0x30
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40023800 	.word	0x40023800
 800117c:	40021000 	.word	0x40021000
 8001180:	40020800 	.word	0x40020800
 8001184:	40020c00 	.word	0x40020c00
 8001188:	40020000 	.word	0x40020000
 800118c:	40020400 	.word	0x40020400

08001190 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001194:	4b12      	ldr	r3, [pc, #72]	@ (80011e0 <MX_I2C1_Init+0x50>)
 8001196:	4a13      	ldr	r2, [pc, #76]	@ (80011e4 <MX_I2C1_Init+0x54>)
 8001198:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800119a:	4b11      	ldr	r3, [pc, #68]	@ (80011e0 <MX_I2C1_Init+0x50>)
 800119c:	4a12      	ldr	r2, [pc, #72]	@ (80011e8 <MX_I2C1_Init+0x58>)
 800119e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	@ (80011e0 <MX_I2C1_Init+0x50>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	@ (80011e0 <MX_I2C1_Init+0x50>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ac:	4b0c      	ldr	r3, [pc, #48]	@ (80011e0 <MX_I2C1_Init+0x50>)
 80011ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011b4:	4b0a      	ldr	r3, [pc, #40]	@ (80011e0 <MX_I2C1_Init+0x50>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011ba:	4b09      	ldr	r3, [pc, #36]	@ (80011e0 <MX_I2C1_Init+0x50>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011c0:	4b07      	ldr	r3, [pc, #28]	@ (80011e0 <MX_I2C1_Init+0x50>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011c6:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <MX_I2C1_Init+0x50>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011cc:	4804      	ldr	r0, [pc, #16]	@ (80011e0 <MX_I2C1_Init+0x50>)
 80011ce:	f003 f9ef 	bl	80045b0 <HAL_I2C_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011d8:	f000 faea 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	200000a4 	.word	0x200000a4
 80011e4:	40005400 	.word	0x40005400
 80011e8:	000186a0 	.word	0x000186a0

080011ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08a      	sub	sp, #40	@ 0x28
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a19      	ldr	r2, [pc, #100]	@ (8001270 <HAL_I2C_MspInit+0x84>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d12c      	bne.n	8001268 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
 8001212:	4b18      	ldr	r3, [pc, #96]	@ (8001274 <HAL_I2C_MspInit+0x88>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	4a17      	ldr	r2, [pc, #92]	@ (8001274 <HAL_I2C_MspInit+0x88>)
 8001218:	f043 0302 	orr.w	r3, r3, #2
 800121c:	6313      	str	r3, [r2, #48]	@ 0x30
 800121e:	4b15      	ldr	r3, [pc, #84]	@ (8001274 <HAL_I2C_MspInit+0x88>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	613b      	str	r3, [r7, #16]
 8001228:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800122a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800122e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001230:	2312      	movs	r3, #18
 8001232:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001234:	2301      	movs	r3, #1
 8001236:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2300      	movs	r3, #0
 800123a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800123c:	2304      	movs	r3, #4
 800123e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	4619      	mov	r1, r3
 8001246:	480c      	ldr	r0, [pc, #48]	@ (8001278 <HAL_I2C_MspInit+0x8c>)
 8001248:	f000 fec8 	bl	8001fdc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800124c:	2300      	movs	r3, #0
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	4b08      	ldr	r3, [pc, #32]	@ (8001274 <HAL_I2C_MspInit+0x88>)
 8001252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001254:	4a07      	ldr	r2, [pc, #28]	@ (8001274 <HAL_I2C_MspInit+0x88>)
 8001256:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800125a:	6413      	str	r3, [r2, #64]	@ 0x40
 800125c:	4b05      	ldr	r3, [pc, #20]	@ (8001274 <HAL_I2C_MspInit+0x88>)
 800125e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001260:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001268:	bf00      	nop
 800126a:	3728      	adds	r7, #40	@ 0x28
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40005400 	.word	0x40005400
 8001274:	40023800 	.word	0x40023800
 8001278:	40020400 	.word	0x40020400

0800127c <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001280:	4b13      	ldr	r3, [pc, #76]	@ (80012d0 <MX_I2S3_Init+0x54>)
 8001282:	4a14      	ldr	r2, [pc, #80]	@ (80012d4 <MX_I2S3_Init+0x58>)
 8001284:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001286:	4b12      	ldr	r3, [pc, #72]	@ (80012d0 <MX_I2S3_Init+0x54>)
 8001288:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800128c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800128e:	4b10      	ldr	r3, [pc, #64]	@ (80012d0 <MX_I2S3_Init+0x54>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001294:	4b0e      	ldr	r3, [pc, #56]	@ (80012d0 <MX_I2S3_Init+0x54>)
 8001296:	2200      	movs	r2, #0
 8001298:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800129a:	4b0d      	ldr	r3, [pc, #52]	@ (80012d0 <MX_I2S3_Init+0x54>)
 800129c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012a0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 80012a2:	4b0b      	ldr	r3, [pc, #44]	@ (80012d0 <MX_I2S3_Init+0x54>)
 80012a4:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80012a8:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80012aa:	4b09      	ldr	r3, [pc, #36]	@ (80012d0 <MX_I2S3_Init+0x54>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80012b0:	4b07      	ldr	r3, [pc, #28]	@ (80012d0 <MX_I2S3_Init+0x54>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80012b6:	4b06      	ldr	r3, [pc, #24]	@ (80012d0 <MX_I2S3_Init+0x54>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80012bc:	4804      	ldr	r0, [pc, #16]	@ (80012d0 <MX_I2S3_Init+0x54>)
 80012be:	f003 fe15 	bl	8004eec <HAL_I2S_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 80012c8:	f000 fa72 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	200000f8 	.word	0x200000f8
 80012d4:	40003c00 	.word	0x40003c00

080012d8 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08e      	sub	sp, #56	@ 0x38
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a35      	ldr	r2, [pc, #212]	@ (80013d8 <HAL_I2S_MspInit+0x100>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d162      	bne.n	80013ce <HAL_I2S_MspInit+0xf6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001308:	2301      	movs	r3, #1
 800130a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800130c:	23c0      	movs	r3, #192	@ 0xc0
 800130e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001310:	2302      	movs	r3, #2
 8001312:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	4618      	mov	r0, r3
 800131a:	f004 ff79 	bl	8006210 <HAL_RCCEx_PeriphCLKConfig>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001324:	f000 fa44 	bl	80017b0 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001328:	2300      	movs	r3, #0
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	4b2b      	ldr	r3, [pc, #172]	@ (80013dc <HAL_I2S_MspInit+0x104>)
 800132e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001330:	4a2a      	ldr	r2, [pc, #168]	@ (80013dc <HAL_I2S_MspInit+0x104>)
 8001332:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001336:	6413      	str	r3, [r2, #64]	@ 0x40
 8001338:	4b28      	ldr	r3, [pc, #160]	@ (80013dc <HAL_I2S_MspInit+0x104>)
 800133a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800133c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001340:	613b      	str	r3, [r7, #16]
 8001342:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	4b24      	ldr	r3, [pc, #144]	@ (80013dc <HAL_I2S_MspInit+0x104>)
 800134a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134c:	4a23      	ldr	r2, [pc, #140]	@ (80013dc <HAL_I2S_MspInit+0x104>)
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	6313      	str	r3, [r2, #48]	@ 0x30
 8001354:	4b21      	ldr	r3, [pc, #132]	@ (80013dc <HAL_I2S_MspInit+0x104>)
 8001356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001360:	2300      	movs	r3, #0
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	4b1d      	ldr	r3, [pc, #116]	@ (80013dc <HAL_I2S_MspInit+0x104>)
 8001366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001368:	4a1c      	ldr	r2, [pc, #112]	@ (80013dc <HAL_I2S_MspInit+0x104>)
 800136a:	f043 0304 	orr.w	r3, r3, #4
 800136e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001370:	4b1a      	ldr	r3, [pc, #104]	@ (80013dc <HAL_I2S_MspInit+0x104>)
 8001372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001374:	f003 0304 	and.w	r3, r3, #4
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800137c:	2310      	movs	r3, #16
 800137e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001380:	2302      	movs	r3, #2
 8001382:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001388:	2300      	movs	r3, #0
 800138a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800138c:	2306      	movs	r3, #6
 800138e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001390:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001394:	4619      	mov	r1, r3
 8001396:	4812      	ldr	r0, [pc, #72]	@ (80013e0 <HAL_I2S_MspInit+0x108>)
 8001398:	f000 fe20 	bl	8001fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800139c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80013a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	2302      	movs	r3, #2
 80013a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013aa:	2300      	movs	r3, #0
 80013ac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013ae:	2306      	movs	r3, #6
 80013b0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013b6:	4619      	mov	r1, r3
 80013b8:	480a      	ldr	r0, [pc, #40]	@ (80013e4 <HAL_I2S_MspInit+0x10c>)
 80013ba:	f000 fe0f 	bl	8001fdc <HAL_GPIO_Init>

    /* I2S3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80013be:	2200      	movs	r2, #0
 80013c0:	2100      	movs	r1, #0
 80013c2:	2033      	movs	r0, #51	@ 0x33
 80013c4:	f000 fdd3 	bl	8001f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80013c8:	2033      	movs	r0, #51	@ 0x33
 80013ca:	f000 fdec 	bl	8001fa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80013ce:	bf00      	nop
 80013d0:	3738      	adds	r7, #56	@ 0x38
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40003c00 	.word	0x40003c00
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40020000 	.word	0x40020000
 80013e4:	40020800 	.word	0x40020800

080013e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ec:	f000 fc4e 	bl	8001c8c <HAL_Init>

  /* USER CODE BEGIN Init */
  last_systick = HAL_GetTick();
 80013f0:	f000 fcb2 	bl	8001d58 <HAL_GetTick>
 80013f4:	4603      	mov	r3, r0
 80013f6:	4a2c      	ldr	r2, [pc, #176]	@ (80014a8 <main+0xc0>)
 80013f8:	6013      	str	r3, [r2, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013fa:	f000 f863 	bl	80014c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013fe:	f7ff fdc9 	bl	8000f94 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001402:	f7ff fec5 	bl	8001190 <MX_I2C1_Init>
  MX_I2S3_Init();
 8001406:	f7ff ff39 	bl	800127c <MX_I2S3_Init>
  MX_SPI1_Init();
 800140a:	f000 f9d7 	bl	80017bc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800140e:	f008 ff2d 	bl	800a26c <MX_USB_HOST_Init>
  MX_TIM2_Init();
 8001412:	f000 fb9f 	bl	8001b54 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  configAudio();
 8001416:	f7ff fccd 	bl	8000db4 <configAudio>
  last_systick = HAL_GetTick(); //traje 5 milisekundi
 800141a:	f000 fc9d 	bl	8001d58 <HAL_GetTick>
 800141e:	4603      	mov	r3, r0
 8001420:	4a21      	ldr	r2, [pc, #132]	@ (80014a8 <main+0xc0>)
 8001422:	6013      	str	r3, [r2, #0]
  generate_test_signal(fake_signal, BUFFER_SIZE); //traje 1 milisekundu
 8001424:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001428:	4820      	ldr	r0, [pc, #128]	@ (80014ac <main+0xc4>)
 800142a:	f000 f8b5 	bl	8001598 <generate_test_signal>
//  last_systick = HAL_GetTick();
  HAL_TIM_Base_Start_IT(&htim2);
 800142e:	4820      	ldr	r0, [pc, #128]	@ (80014b0 <main+0xc8>)
 8001430:	f005 f908 	bl	8006644 <HAL_TIM_Base_Start_IT>

  HAL_I2S_Transmit_IT(&hi2s3, fake_signal, BUFFER_SIZE);
 8001434:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001438:	491c      	ldr	r1, [pc, #112]	@ (80014ac <main+0xc4>)
 800143a:	481e      	ldr	r0, [pc, #120]	@ (80014b4 <main+0xcc>)
 800143c:	f003 fe96 	bl	800516c <HAL_I2S_Transmit_IT>
  last_systick = HAL_GetTick();
 8001440:	f000 fc8a 	bl	8001d58 <HAL_GetTick>
 8001444:	4603      	mov	r3, r0
 8001446:	4a18      	ldr	r2, [pc, #96]	@ (80014a8 <main+0xc0>)
 8001448:	6013      	str	r3, [r2, #0]

  last_systick = HAL_GetTick();
 800144a:	f000 fc85 	bl	8001d58 <HAL_GetTick>
 800144e:	4603      	mov	r3, r0
 8001450:	4a15      	ldr	r2, [pc, #84]	@ (80014a8 <main+0xc0>)
 8001452:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001454:	f008 ff30 	bl	800a2b8 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    last_systick = HAL_GetTick();
 8001458:	f000 fc7e 	bl	8001d58 <HAL_GetTick>
 800145c:	4603      	mov	r3, r0
 800145e:	4a12      	ldr	r2, [pc, #72]	@ (80014a8 <main+0xc0>)
 8001460:	6013      	str	r3, [r2, #0]
    if (fx_ready == 1) {
 8001462:	4b15      	ldr	r3, [pc, #84]	@ (80014b8 <main+0xd0>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	b2db      	uxtb	r3, r3
 8001468:	2b01      	cmp	r3, #1
 800146a:	d1f3      	bne.n	8001454 <main+0x6c>
		fx_ready = 0;
 800146c:	4b12      	ldr	r3, [pc, #72]	@ (80014b8 <main+0xd0>)
 800146e:	2200      	movs	r2, #0
 8001470:	701a      	strb	r2, [r3, #0]
		 last_systick = HAL_GetTick();
 8001472:	f000 fc71 	bl	8001d58 <HAL_GetTick>
 8001476:	4603      	mov	r3, r0
 8001478:	4a0b      	ldr	r2, [pc, #44]	@ (80014a8 <main+0xc0>)
 800147a:	6013      	str	r3, [r2, #0]
		 convert_to_q15(real_signal, convInputSignal, BUFFER_SIZE);
 800147c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001480:	490e      	ldr	r1, [pc, #56]	@ (80014bc <main+0xd4>)
 8001482:	480f      	ldr	r0, [pc, #60]	@ (80014c0 <main+0xd8>)
 8001484:	f000 f92a 	bl	80016dc <convert_to_q15>
		 last_systick = HAL_GetTick();
 8001488:	f000 fc66 	bl	8001d58 <HAL_GetTick>
 800148c:	4603      	mov	r3, r0
 800148e:	4a06      	ldr	r2, [pc, #24]	@ (80014a8 <main+0xc0>)
 8001490:	6013      	str	r3, [r2, #0]

        last_systick = HAL_GetTick();
 8001492:	f000 fc61 	bl	8001d58 <HAL_GetTick>
 8001496:	4603      	mov	r3, r0
 8001498:	4a03      	ldr	r2, [pc, #12]	@ (80014a8 <main+0xc0>)
 800149a:	6013      	str	r3, [r2, #0]
//		echo_effect(convInputSignal, BUFFER_SIZE, 10, 0.5);
		last_systick = HAL_GetTick();
 800149c:	f000 fc5c 	bl	8001d58 <HAL_GetTick>
 80014a0:	4603      	mov	r3, r0
 80014a2:	4a01      	ldr	r2, [pc, #4]	@ (80014a8 <main+0xc0>)
 80014a4:	6013      	str	r3, [r2, #0]
    MX_USB_HOST_Process();
 80014a6:	e7d5      	b.n	8001454 <main+0x6c>
 80014a8:	20001140 	.word	0x20001140
 80014ac:	20000140 	.word	0x20000140
 80014b0:	200019a4 	.word	0x200019a4
 80014b4:	200000f8 	.word	0x200000f8
 80014b8:	20001144 	.word	0x20001144
 80014bc:	20001148 	.word	0x20001148
 80014c0:	20000940 	.word	0x20000940

080014c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b094      	sub	sp, #80	@ 0x50
 80014c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ca:	f107 0320 	add.w	r3, r7, #32
 80014ce:	2230      	movs	r2, #48	@ 0x30
 80014d0:	2100      	movs	r1, #0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f009 fbd5 	bl	800ac82 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d8:	f107 030c 	add.w	r3, r7, #12
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e8:	2300      	movs	r3, #0
 80014ea:	60bb      	str	r3, [r7, #8]
 80014ec:	4b28      	ldr	r3, [pc, #160]	@ (8001590 <SystemClock_Config+0xcc>)
 80014ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f0:	4a27      	ldr	r2, [pc, #156]	@ (8001590 <SystemClock_Config+0xcc>)
 80014f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80014f8:	4b25      	ldr	r3, [pc, #148]	@ (8001590 <SystemClock_Config+0xcc>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001504:	2300      	movs	r3, #0
 8001506:	607b      	str	r3, [r7, #4]
 8001508:	4b22      	ldr	r3, [pc, #136]	@ (8001594 <SystemClock_Config+0xd0>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a21      	ldr	r2, [pc, #132]	@ (8001594 <SystemClock_Config+0xd0>)
 800150e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	4b1f      	ldr	r3, [pc, #124]	@ (8001594 <SystemClock_Config+0xd0>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001520:	2301      	movs	r3, #1
 8001522:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001524:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001528:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800152a:	2302      	movs	r3, #2
 800152c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800152e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001532:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001534:	2304      	movs	r3, #4
 8001536:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001538:	23a8      	movs	r3, #168	@ 0xa8
 800153a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800153c:	2302      	movs	r3, #2
 800153e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001540:	2307      	movs	r3, #7
 8001542:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001544:	f107 0320 	add.w	r3, r7, #32
 8001548:	4618      	mov	r0, r3
 800154a:	f004 f9dd 	bl	8005908 <HAL_RCC_OscConfig>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001554:	f000 f92c 	bl	80017b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001558:	230f      	movs	r3, #15
 800155a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800155c:	2302      	movs	r3, #2
 800155e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001564:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001568:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800156a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800156e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001570:	f107 030c 	add.w	r3, r7, #12
 8001574:	2105      	movs	r1, #5
 8001576:	4618      	mov	r0, r3
 8001578:	f004 fc3e 	bl	8005df8 <HAL_RCC_ClockConfig>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001582:	f000 f915 	bl	80017b0 <Error_Handler>
  }
}
 8001586:	bf00      	nop
 8001588:	3750      	adds	r7, #80	@ 0x50
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40023800 	.word	0x40023800
 8001594:	40007000 	.word	0x40007000

08001598 <generate_test_signal>:

/* USER CODE BEGIN 4 */
void generate_test_signal(uint16_t *buffer, int size) {
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < size; i++) {
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
 80015a6:	e078      	b.n	800169a <generate_test_signal+0x102>
        // Generate a 2 kHz sine wave
        float sine_wave1 = sinf(2 * M_PI * SIGNAL1_FREQ * i / SAMPLE_FREQ);
 80015a8:	69f8      	ldr	r0, [r7, #28]
 80015aa:	f7fe ffb3 	bl	8000514 <__aeabi_i2d>
 80015ae:	a345      	add	r3, pc, #276	@ (adr r3, 80016c4 <generate_test_signal+0x12c>)
 80015b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b4:	f7ff f818 	bl	80005e8 <__aeabi_dmul>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	4610      	mov	r0, r2
 80015be:	4619      	mov	r1, r3
 80015c0:	a342      	add	r3, pc, #264	@ (adr r3, 80016cc <generate_test_signal+0x134>)
 80015c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c6:	f7ff f939 	bl	800083c <__aeabi_ddiv>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	4610      	mov	r0, r2
 80015d0:	4619      	mov	r1, r3
 80015d2:	f7ff fa1b 	bl	8000a0c <__aeabi_d2f>
 80015d6:	4603      	mov	r3, r0
 80015d8:	ee00 3a10 	vmov	s0, r3
 80015dc:	f00a f944 	bl	800b868 <sinf>
 80015e0:	ed87 0a06 	vstr	s0, [r7, #24]

        // Generate a 6 kHz sine wave
        float sine_wave2 = sinf(2 * M_PI * SIGNAL2_FREQ * i / SAMPLE_FREQ);
 80015e4:	69f8      	ldr	r0, [r7, #28]
 80015e6:	f7fe ff95 	bl	8000514 <__aeabi_i2d>
 80015ea:	a33a      	add	r3, pc, #232	@ (adr r3, 80016d4 <generate_test_signal+0x13c>)
 80015ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f0:	f7fe fffa 	bl	80005e8 <__aeabi_dmul>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4610      	mov	r0, r2
 80015fa:	4619      	mov	r1, r3
 80015fc:	a333      	add	r3, pc, #204	@ (adr r3, 80016cc <generate_test_signal+0x134>)
 80015fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001602:	f7ff f91b 	bl	800083c <__aeabi_ddiv>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4610      	mov	r0, r2
 800160c:	4619      	mov	r1, r3
 800160e:	f7ff f9fd 	bl	8000a0c <__aeabi_d2f>
 8001612:	4603      	mov	r3, r0
 8001614:	ee00 3a10 	vmov	s0, r3
 8001618:	f00a f926 	bl	800b868 <sinf>
 800161c:	ed87 0a05 	vstr	s0, [r7, #20]

        // Combine the two sine waves
        float combined_signal = sine_wave1 + sine_wave2;
 8001620:	ed97 7a06 	vldr	s14, [r7, #24]
 8001624:	edd7 7a05 	vldr	s15, [r7, #20]
 8001628:	ee77 7a27 	vadd.f32	s15, s14, s15
 800162c:	edc7 7a04 	vstr	s15, [r7, #16]

        // Add some random noise to simulate MEMS microphone behavior
        float noise = ((float)rand() / RAND_MAX) * 0.1f - 0.05f; // Noise in the range [-0.05, 0.05]
 8001630:	f009 f9e4 	bl	800a9fc <rand>
 8001634:	ee07 0a90 	vmov	s15, r0
 8001638:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800163c:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 80016b0 <generate_test_signal+0x118>
 8001640:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001644:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80016b4 <generate_test_signal+0x11c>
 8001648:	ee67 7a87 	vmul.f32	s15, s15, s14
 800164c:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80016b8 <generate_test_signal+0x120>
 8001650:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001654:	edc7 7a03 	vstr	s15, [r7, #12]

        // Scale the combined signal to uint16_t range [0, 65535]
        buffer[i] = (uint16_t)((combined_signal + noise) * 32767.0f + 32768.0f);
 8001658:	ed97 7a04 	vldr	s14, [r7, #16]
 800165c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001660:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001664:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80016bc <generate_test_signal+0x124>
 8001668:	ee67 7a87 	vmul.f32	s15, s15, s14
 800166c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80016c0 <generate_test_signal+0x128>
 8001670:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	4413      	add	r3, r2
 800167c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001680:	ee17 2a90 	vmov	r2, s15
 8001684:	b292      	uxth	r2, r2
 8001686:	801a      	strh	r2, [r3, #0]
        buffer[i] = 0;
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	4413      	add	r3, r2
 8001690:	2200      	movs	r2, #0
 8001692:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	3301      	adds	r3, #1
 8001698:	61fb      	str	r3, [r7, #28]
 800169a:	69fa      	ldr	r2, [r7, #28]
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	429a      	cmp	r2, r3
 80016a0:	db82      	blt.n	80015a8 <generate_test_signal+0x10>
    }
}
 80016a2:	bf00      	nop
 80016a4:	bf00      	nop
 80016a6:	3720      	adds	r7, #32
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	f3af 8000 	nop.w
 80016b0:	4f000000 	.word	0x4f000000
 80016b4:	3dcccccd 	.word	0x3dcccccd
 80016b8:	3d4ccccd 	.word	0x3d4ccccd
 80016bc:	46fffe00 	.word	0x46fffe00
 80016c0:	47000000 	.word	0x47000000
 80016c4:	704a9409 	.word	0x704a9409
 80016c8:	40c88b2f 	.word	0x40c88b2f
 80016cc:	00000000 	.word	0x00000000
 80016d0:	40e57c00 	.word	0x40e57c00
 80016d4:	9437ef07 	.word	0x9437ef07
 80016d8:	40e26863 	.word	0x40e26863

080016dc <convert_to_q15>:
        }
        echo_buffer[i] = buffer[i];
    }
}
//FIR FILTER
void convert_to_q15(uint16_t *rawInput, q15_t *convertedSignal, int size) {
 80016dc:	b480      	push	{r7}
 80016de:	b087      	sub	sp, #28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++) {
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	e010      	b.n	8001710 <convert_to_q15+0x34>
        // Map uint16_t (0 to 65535) to q15_t (-32768 to 32767)
        convertedSignal[i] = (q15_t)((int16_t)(rawInput[i] - 32768));
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	4413      	add	r3, r2
 80016f6:	881b      	ldrh	r3, [r3, #0]
 80016f8:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80016fc:	b299      	uxth	r1, r3
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	4413      	add	r3, r2
 8001706:	b20a      	sxth	r2, r1
 8001708:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	3301      	adds	r3, #1
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	429a      	cmp	r2, r3
 8001716:	dbea      	blt.n	80016ee <convert_to_q15+0x12>
    }
}
 8001718:	bf00      	nop
 800171a:	bf00      	nop
 800171c:	371c      	adds	r7, #28
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <HAL_TIM_PeriodElapsedCallback>:
    for (int i = 0; i < BUFFER_SIZE; i += BLOCK_SIZE) {
        arm_fir_q15(&S, &convInputSignal[i], &outputSignal[i], BLOCK_SIZE);
    }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001738:	d10e      	bne.n	8001758 <HAL_TIM_PeriodElapsedCallback+0x30>
		//sada je generate fake signal napunio real buffer
    		memcpy(real_signal, fake_signal, BUFFER_SIZE);
 800173a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800173e:	4908      	ldr	r1, [pc, #32]	@ (8001760 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001740:	4808      	ldr	r0, [pc, #32]	@ (8001764 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001742:	f009 fb2a 	bl	800ad9a <memcpy>
    		fx_ready = 1;
 8001746:	4b08      	ldr	r3, [pc, #32]	@ (8001768 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001748:	2201      	movs	r2, #1
 800174a:	701a      	strb	r2, [r3, #0]
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800174c:	2201      	movs	r2, #1
 800174e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001752:	4806      	ldr	r0, [pc, #24]	@ (800176c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001754:	f000 fdde 	bl	8002314 <HAL_GPIO_WritePin>

    }
}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20000140 	.word	0x20000140
 8001764:	20000940 	.word	0x20000940
 8001768:	20001144 	.word	0x20001144
 800176c:	40020c00 	.word	0x40020c00

08001770 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
    if (hi2s->Instance == SPI3) { // Provjeri je li I2S3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a08      	ldr	r2, [pc, #32]	@ (80017a0 <HAL_I2S_TxCpltCallback+0x30>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d10a      	bne.n	8001798 <HAL_I2S_TxCpltCallback+0x28>
    	last_systick = HAL_GetTick();
 8001782:	f000 fae9 	bl	8001d58 <HAL_GetTick>
 8001786:	4603      	mov	r3, r0
 8001788:	4a06      	ldr	r2, [pc, #24]	@ (80017a4 <HAL_I2S_TxCpltCallback+0x34>)
 800178a:	6013      	str	r3, [r2, #0]
    	HAL_I2S_Transmit_IT(&hi2s3, convInputSignal, BUFFER_SIZE);
 800178c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001790:	4905      	ldr	r1, [pc, #20]	@ (80017a8 <HAL_I2S_TxCpltCallback+0x38>)
 8001792:	4806      	ldr	r0, [pc, #24]	@ (80017ac <HAL_I2S_TxCpltCallback+0x3c>)
 8001794:	f003 fcea 	bl	800516c <HAL_I2S_Transmit_IT>
    }
}
 8001798:	bf00      	nop
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40003c00 	.word	0x40003c00
 80017a4:	20001140 	.word	0x20001140
 80017a8:	20001148 	.word	0x20001148
 80017ac:	200000f8 	.word	0x200000f8

080017b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b4:	b672      	cpsid	i
}
 80017b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <Error_Handler+0x8>

080017bc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80017c0:	4b17      	ldr	r3, [pc, #92]	@ (8001820 <MX_SPI1_Init+0x64>)
 80017c2:	4a18      	ldr	r2, [pc, #96]	@ (8001824 <MX_SPI1_Init+0x68>)
 80017c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017c6:	4b16      	ldr	r3, [pc, #88]	@ (8001820 <MX_SPI1_Init+0x64>)
 80017c8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017ce:	4b14      	ldr	r3, [pc, #80]	@ (8001820 <MX_SPI1_Init+0x64>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017d4:	4b12      	ldr	r3, [pc, #72]	@ (8001820 <MX_SPI1_Init+0x64>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017da:	4b11      	ldr	r3, [pc, #68]	@ (8001820 <MX_SPI1_Init+0x64>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001820 <MX_SPI1_Init+0x64>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001820 <MX_SPI1_Init+0x64>)
 80017e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001820 <MX_SPI1_Init+0x64>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001820 <MX_SPI1_Init+0x64>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017fa:	4b09      	ldr	r3, [pc, #36]	@ (8001820 <MX_SPI1_Init+0x64>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001800:	4b07      	ldr	r3, [pc, #28]	@ (8001820 <MX_SPI1_Init+0x64>)
 8001802:	2200      	movs	r2, #0
 8001804:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001806:	4b06      	ldr	r3, [pc, #24]	@ (8001820 <MX_SPI1_Init+0x64>)
 8001808:	220a      	movs	r2, #10
 800180a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800180c:	4804      	ldr	r0, [pc, #16]	@ (8001820 <MX_SPI1_Init+0x64>)
 800180e:	f004 fe41 	bl	8006494 <HAL_SPI_Init>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001818:	f7ff ffca 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800181c:	bf00      	nop
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20001948 	.word	0x20001948
 8001824:	40013000 	.word	0x40013000

08001828 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08a      	sub	sp, #40	@ 0x28
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a19      	ldr	r2, [pc, #100]	@ (80018ac <HAL_SPI_MspInit+0x84>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d12b      	bne.n	80018a2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	613b      	str	r3, [r7, #16]
 800184e:	4b18      	ldr	r3, [pc, #96]	@ (80018b0 <HAL_SPI_MspInit+0x88>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001852:	4a17      	ldr	r2, [pc, #92]	@ (80018b0 <HAL_SPI_MspInit+0x88>)
 8001854:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001858:	6453      	str	r3, [r2, #68]	@ 0x44
 800185a:	4b15      	ldr	r3, [pc, #84]	@ (80018b0 <HAL_SPI_MspInit+0x88>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800185e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	4b11      	ldr	r3, [pc, #68]	@ (80018b0 <HAL_SPI_MspInit+0x88>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186e:	4a10      	ldr	r2, [pc, #64]	@ (80018b0 <HAL_SPI_MspInit+0x88>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	6313      	str	r3, [r2, #48]	@ 0x30
 8001876:	4b0e      	ldr	r3, [pc, #56]	@ (80018b0 <HAL_SPI_MspInit+0x88>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001882:	23e0      	movs	r3, #224	@ 0xe0
 8001884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001886:	2302      	movs	r3, #2
 8001888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188e:	2300      	movs	r3, #0
 8001890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001892:	2305      	movs	r3, #5
 8001894:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001896:	f107 0314 	add.w	r3, r7, #20
 800189a:	4619      	mov	r1, r3
 800189c:	4805      	ldr	r0, [pc, #20]	@ (80018b4 <HAL_SPI_MspInit+0x8c>)
 800189e:	f000 fb9d 	bl	8001fdc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80018a2:	bf00      	nop
 80018a4:	3728      	adds	r7, #40	@ 0x28
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40013000 	.word	0x40013000
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40020000 	.word	0x40020000

080018b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	607b      	str	r3, [r7, #4]
 80018c2:	4b10      	ldr	r3, [pc, #64]	@ (8001904 <HAL_MspInit+0x4c>)
 80018c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c6:	4a0f      	ldr	r2, [pc, #60]	@ (8001904 <HAL_MspInit+0x4c>)
 80018c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001904 <HAL_MspInit+0x4c>)
 80018d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018d6:	607b      	str	r3, [r7, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	603b      	str	r3, [r7, #0]
 80018de:	4b09      	ldr	r3, [pc, #36]	@ (8001904 <HAL_MspInit+0x4c>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e2:	4a08      	ldr	r2, [pc, #32]	@ (8001904 <HAL_MspInit+0x4c>)
 80018e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ea:	4b06      	ldr	r3, [pc, #24]	@ (8001904 <HAL_MspInit+0x4c>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018f2:	603b      	str	r3, [r7, #0]
 80018f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018f6:	2007      	movs	r0, #7
 80018f8:	f000 fb2e 	bl	8001f58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40023800 	.word	0x40023800

08001908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800190c:	bf00      	nop
 800190e:	e7fd      	b.n	800190c <NMI_Handler+0x4>

08001910 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001914:	bf00      	nop
 8001916:	e7fd      	b.n	8001914 <HardFault_Handler+0x4>

08001918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800191c:	bf00      	nop
 800191e:	e7fd      	b.n	800191c <MemManage_Handler+0x4>

08001920 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001924:	bf00      	nop
 8001926:	e7fd      	b.n	8001924 <BusFault_Handler+0x4>

08001928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800192c:	bf00      	nop
 800192e:	e7fd      	b.n	800192c <UsageFault_Handler+0x4>

08001930 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800195e:	f000 f9e7 	bl	8001d30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800196c:	4802      	ldr	r0, [pc, #8]	@ (8001978 <TIM2_IRQHandler+0x10>)
 800196e:	f004 fed9 	bl	8006724 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	200019a4 	.word	0x200019a4

0800197c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 8001980:	4802      	ldr	r0, [pc, #8]	@ (800198c <SPI3_IRQHandler+0x10>)
 8001982:	f003 fc60 	bl	8005246 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	200000f8 	.word	0x200000f8

08001990 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001994:	4802      	ldr	r0, [pc, #8]	@ (80019a0 <OTG_FS_IRQHandler+0x10>)
 8001996:	f000 ffb7 	bl	8002908 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20001dcc 	.word	0x20001dcc

080019a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return 1;
 80019a8:	2301      	movs	r3, #1
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <_kill>:

int _kill(int pid, int sig)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019be:	f009 f9bf 	bl	800ad40 <__errno>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2216      	movs	r2, #22
 80019c6:	601a      	str	r2, [r3, #0]
  return -1;
 80019c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <_exit>:

void _exit (int status)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019dc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff ffe7 	bl	80019b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019e6:	bf00      	nop
 80019e8:	e7fd      	b.n	80019e6 <_exit+0x12>

080019ea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b086      	sub	sp, #24
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	60f8      	str	r0, [r7, #12]
 80019f2:	60b9      	str	r1, [r7, #8]
 80019f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	e00a      	b.n	8001a12 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019fc:	f3af 8000 	nop.w
 8001a00:	4601      	mov	r1, r0
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	1c5a      	adds	r2, r3, #1
 8001a06:	60ba      	str	r2, [r7, #8]
 8001a08:	b2ca      	uxtb	r2, r1
 8001a0a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	617b      	str	r3, [r7, #20]
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	dbf0      	blt.n	80019fc <_read+0x12>
  }

  return len;
 8001a1a:	687b      	ldr	r3, [r7, #4]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	e009      	b.n	8001a4a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	1c5a      	adds	r2, r3, #1
 8001a3a:	60ba      	str	r2, [r7, #8]
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	3301      	adds	r3, #1
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	dbf1      	blt.n	8001a36 <_write+0x12>
  }
  return len;
 8001a52:	687b      	ldr	r3, [r7, #4]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <_close>:

int _close(int file)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a84:	605a      	str	r2, [r3, #4]
  return 0;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <_isatty>:

int _isatty(int file)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a9c:	2301      	movs	r3, #1
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b085      	sub	sp, #20
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	60f8      	str	r0, [r7, #12]
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001acc:	4a14      	ldr	r2, [pc, #80]	@ (8001b20 <_sbrk+0x5c>)
 8001ace:	4b15      	ldr	r3, [pc, #84]	@ (8001b24 <_sbrk+0x60>)
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ad8:	4b13      	ldr	r3, [pc, #76]	@ (8001b28 <_sbrk+0x64>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d102      	bne.n	8001ae6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ae0:	4b11      	ldr	r3, [pc, #68]	@ (8001b28 <_sbrk+0x64>)
 8001ae2:	4a12      	ldr	r2, [pc, #72]	@ (8001b2c <_sbrk+0x68>)
 8001ae4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ae6:	4b10      	ldr	r3, [pc, #64]	@ (8001b28 <_sbrk+0x64>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d207      	bcs.n	8001b04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001af4:	f009 f924 	bl	800ad40 <__errno>
 8001af8:	4603      	mov	r3, r0
 8001afa:	220c      	movs	r2, #12
 8001afc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001afe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b02:	e009      	b.n	8001b18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b04:	4b08      	ldr	r3, [pc, #32]	@ (8001b28 <_sbrk+0x64>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b0a:	4b07      	ldr	r3, [pc, #28]	@ (8001b28 <_sbrk+0x64>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	4a05      	ldr	r2, [pc, #20]	@ (8001b28 <_sbrk+0x64>)
 8001b14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b16:	68fb      	ldr	r3, [r7, #12]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20020000 	.word	0x20020000
 8001b24:	00000400 	.word	0x00000400
 8001b28:	200019a0 	.word	0x200019a0
 8001b2c:	200022f8 	.word	0x200022f8

08001b30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b34:	4b06      	ldr	r3, [pc, #24]	@ (8001b50 <SystemInit+0x20>)
 8001b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b3a:	4a05      	ldr	r2, [pc, #20]	@ (8001b50 <SystemInit+0x20>)
 8001b3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b5a:	f107 0308 	add.w	r3, r7, #8
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]
 8001b64:	609a      	str	r2, [r3, #8]
 8001b66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b68:	463b      	mov	r3, r7
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b70:	4b1d      	ldr	r3, [pc, #116]	@ (8001be8 <MX_TIM2_Init+0x94>)
 8001b72:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 43;
 8001b78:	4b1b      	ldr	r3, [pc, #108]	@ (8001be8 <MX_TIM2_Init+0x94>)
 8001b7a:	222b      	movs	r2, #43	@ 0x2b
 8001b7c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8001be8 <MX_TIM2_Init+0x94>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 199;
 8001b84:	4b18      	ldr	r3, [pc, #96]	@ (8001be8 <MX_TIM2_Init+0x94>)
 8001b86:	22c7      	movs	r2, #199	@ 0xc7
 8001b88:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b8a:	4b17      	ldr	r3, [pc, #92]	@ (8001be8 <MX_TIM2_Init+0x94>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b90:	4b15      	ldr	r3, [pc, #84]	@ (8001be8 <MX_TIM2_Init+0x94>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b96:	4814      	ldr	r0, [pc, #80]	@ (8001be8 <MX_TIM2_Init+0x94>)
 8001b98:	f004 fd05 	bl	80065a6 <HAL_TIM_Base_Init>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001ba2:	f7ff fe05 	bl	80017b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ba6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001baa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bac:	f107 0308 	add.w	r3, r7, #8
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	480d      	ldr	r0, [pc, #52]	@ (8001be8 <MX_TIM2_Init+0x94>)
 8001bb4:	f004 fea6 	bl	8006904 <HAL_TIM_ConfigClockSource>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001bbe:	f7ff fdf7 	bl	80017b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bca:	463b      	mov	r3, r7
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4806      	ldr	r0, [pc, #24]	@ (8001be8 <MX_TIM2_Init+0x94>)
 8001bd0:	f005 f8ce 	bl	8006d70 <HAL_TIMEx_MasterConfigSynchronization>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001bda:	f7ff fde9 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bde:	bf00      	nop
 8001be0:	3718      	adds	r7, #24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	200019a4 	.word	0x200019a4

08001bec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bfc:	d115      	bne.n	8001c2a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	4b0c      	ldr	r3, [pc, #48]	@ (8001c34 <HAL_TIM_Base_MspInit+0x48>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c06:	4a0b      	ldr	r2, [pc, #44]	@ (8001c34 <HAL_TIM_Base_MspInit+0x48>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c0e:	4b09      	ldr	r3, [pc, #36]	@ (8001c34 <HAL_TIM_Base_MspInit+0x48>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	201c      	movs	r0, #28
 8001c20:	f000 f9a5 	bl	8001f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c24:	201c      	movs	r0, #28
 8001c26:	f000 f9be 	bl	8001fa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001c2a:	bf00      	nop
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800

08001c38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c70 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c3c:	f7ff ff78 	bl	8001b30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c40:	480c      	ldr	r0, [pc, #48]	@ (8001c74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c42:	490d      	ldr	r1, [pc, #52]	@ (8001c78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c44:	4a0d      	ldr	r2, [pc, #52]	@ (8001c7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c48:	e002      	b.n	8001c50 <LoopCopyDataInit>

08001c4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c4e:	3304      	adds	r3, #4

08001c50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c54:	d3f9      	bcc.n	8001c4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c56:	4a0a      	ldr	r2, [pc, #40]	@ (8001c80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c58:	4c0a      	ldr	r4, [pc, #40]	@ (8001c84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c5c:	e001      	b.n	8001c62 <LoopFillZerobss>

08001c5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c60:	3204      	adds	r2, #4

08001c62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c64:	d3fb      	bcc.n	8001c5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c66:	f009 f871 	bl	800ad4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c6a:	f7ff fbbd 	bl	80013e8 <main>
  bx  lr    
 8001c6e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c78:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001c7c:	0800c7d0 	.word	0x0800c7d0
  ldr r2, =_sbss
 8001c80:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001c84:	200022f8 	.word	0x200022f8

08001c88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c88:	e7fe      	b.n	8001c88 <ADC_IRQHandler>
	...

08001c8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c90:	4b0e      	ldr	r3, [pc, #56]	@ (8001ccc <HAL_Init+0x40>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a0d      	ldr	r2, [pc, #52]	@ (8001ccc <HAL_Init+0x40>)
 8001c96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ccc <HAL_Init+0x40>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a0a      	ldr	r2, [pc, #40]	@ (8001ccc <HAL_Init+0x40>)
 8001ca2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ca6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ca8:	4b08      	ldr	r3, [pc, #32]	@ (8001ccc <HAL_Init+0x40>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a07      	ldr	r2, [pc, #28]	@ (8001ccc <HAL_Init+0x40>)
 8001cae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cb4:	2003      	movs	r0, #3
 8001cb6:	f000 f94f 	bl	8001f58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cba:	2000      	movs	r0, #0
 8001cbc:	f000 f808 	bl	8001cd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cc0:	f7ff fdfa 	bl	80018b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40023c00 	.word	0x40023c00

08001cd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cd8:	4b12      	ldr	r3, [pc, #72]	@ (8001d24 <HAL_InitTick+0x54>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	4b12      	ldr	r3, [pc, #72]	@ (8001d28 <HAL_InitTick+0x58>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ce6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f000 f967 	bl	8001fc2 <HAL_SYSTICK_Config>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e00e      	b.n	8001d1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2b0f      	cmp	r3, #15
 8001d02:	d80a      	bhi.n	8001d1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d04:	2200      	movs	r2, #0
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d0c:	f000 f92f 	bl	8001f6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d10:	4a06      	ldr	r2, [pc, #24]	@ (8001d2c <HAL_InitTick+0x5c>)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
 8001d18:	e000      	b.n	8001d1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20000000 	.word	0x20000000
 8001d28:	20000008 	.word	0x20000008
 8001d2c:	20000004 	.word	0x20000004

08001d30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d34:	4b06      	ldr	r3, [pc, #24]	@ (8001d50 <HAL_IncTick+0x20>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4b06      	ldr	r3, [pc, #24]	@ (8001d54 <HAL_IncTick+0x24>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4413      	add	r3, r2
 8001d40:	4a04      	ldr	r2, [pc, #16]	@ (8001d54 <HAL_IncTick+0x24>)
 8001d42:	6013      	str	r3, [r2, #0]
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	20000008 	.word	0x20000008
 8001d54:	200019ec 	.word	0x200019ec

08001d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d5c:	4b03      	ldr	r3, [pc, #12]	@ (8001d6c <HAL_GetTick+0x14>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	200019ec 	.word	0x200019ec

08001d70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d78:	f7ff ffee 	bl	8001d58 <HAL_GetTick>
 8001d7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d88:	d005      	beq.n	8001d96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001db4 <HAL_Delay+0x44>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	4413      	add	r3, r2
 8001d94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d96:	bf00      	nop
 8001d98:	f7ff ffde 	bl	8001d58 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d8f7      	bhi.n	8001d98 <HAL_Delay+0x28>
  {
  }
}
 8001da8:	bf00      	nop
 8001daa:	bf00      	nop
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000008 	.word	0x20000008

08001db8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001dfc <__NVIC_SetPriorityGrouping+0x44>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dce:	68ba      	ldr	r2, [r7, #8]
 8001dd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001de0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001de4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dea:	4a04      	ldr	r2, [pc, #16]	@ (8001dfc <__NVIC_SetPriorityGrouping+0x44>)
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	60d3      	str	r3, [r2, #12]
}
 8001df0:	bf00      	nop
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e04:	4b04      	ldr	r3, [pc, #16]	@ (8001e18 <__NVIC_GetPriorityGrouping+0x18>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	0a1b      	lsrs	r3, r3, #8
 8001e0a:	f003 0307 	and.w	r3, r3, #7
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	db0b      	blt.n	8001e46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e2e:	79fb      	ldrb	r3, [r7, #7]
 8001e30:	f003 021f 	and.w	r2, r3, #31
 8001e34:	4907      	ldr	r1, [pc, #28]	@ (8001e54 <__NVIC_EnableIRQ+0x38>)
 8001e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3a:	095b      	lsrs	r3, r3, #5
 8001e3c:	2001      	movs	r0, #1
 8001e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	e000e100 	.word	0xe000e100

08001e58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	6039      	str	r1, [r7, #0]
 8001e62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	db0a      	blt.n	8001e82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	b2da      	uxtb	r2, r3
 8001e70:	490c      	ldr	r1, [pc, #48]	@ (8001ea4 <__NVIC_SetPriority+0x4c>)
 8001e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e76:	0112      	lsls	r2, r2, #4
 8001e78:	b2d2      	uxtb	r2, r2
 8001e7a:	440b      	add	r3, r1
 8001e7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e80:	e00a      	b.n	8001e98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	4908      	ldr	r1, [pc, #32]	@ (8001ea8 <__NVIC_SetPriority+0x50>)
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	f003 030f 	and.w	r3, r3, #15
 8001e8e:	3b04      	subs	r3, #4
 8001e90:	0112      	lsls	r2, r2, #4
 8001e92:	b2d2      	uxtb	r2, r2
 8001e94:	440b      	add	r3, r1
 8001e96:	761a      	strb	r2, [r3, #24]
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	e000e100 	.word	0xe000e100
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b089      	sub	sp, #36	@ 0x24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	f1c3 0307 	rsb	r3, r3, #7
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	bf28      	it	cs
 8001eca:	2304      	movcs	r3, #4
 8001ecc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	2b06      	cmp	r3, #6
 8001ed4:	d902      	bls.n	8001edc <NVIC_EncodePriority+0x30>
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	3b03      	subs	r3, #3
 8001eda:	e000      	b.n	8001ede <NVIC_EncodePriority+0x32>
 8001edc:	2300      	movs	r3, #0
 8001ede:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43da      	mvns	r2, r3
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	401a      	ands	r2, r3
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ef4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	fa01 f303 	lsl.w	r3, r1, r3
 8001efe:	43d9      	mvns	r1, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f04:	4313      	orrs	r3, r2
         );
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3724      	adds	r7, #36	@ 0x24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
	...

08001f14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f24:	d301      	bcc.n	8001f2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f26:	2301      	movs	r3, #1
 8001f28:	e00f      	b.n	8001f4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f54 <SysTick_Config+0x40>)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f32:	210f      	movs	r1, #15
 8001f34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f38:	f7ff ff8e 	bl	8001e58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f3c:	4b05      	ldr	r3, [pc, #20]	@ (8001f54 <SysTick_Config+0x40>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f42:	4b04      	ldr	r3, [pc, #16]	@ (8001f54 <SysTick_Config+0x40>)
 8001f44:	2207      	movs	r2, #7
 8001f46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	e000e010 	.word	0xe000e010

08001f58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f7ff ff29 	bl	8001db8 <__NVIC_SetPriorityGrouping>
}
 8001f66:	bf00      	nop
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b086      	sub	sp, #24
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	4603      	mov	r3, r0
 8001f76:	60b9      	str	r1, [r7, #8]
 8001f78:	607a      	str	r2, [r7, #4]
 8001f7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f80:	f7ff ff3e 	bl	8001e00 <__NVIC_GetPriorityGrouping>
 8001f84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	68b9      	ldr	r1, [r7, #8]
 8001f8a:	6978      	ldr	r0, [r7, #20]
 8001f8c:	f7ff ff8e 	bl	8001eac <NVIC_EncodePriority>
 8001f90:	4602      	mov	r2, r0
 8001f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f96:	4611      	mov	r1, r2
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff ff5d 	bl	8001e58 <__NVIC_SetPriority>
}
 8001f9e:	bf00      	nop
 8001fa0:	3718      	adds	r7, #24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	4603      	mov	r3, r0
 8001fae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff ff31 	bl	8001e1c <__NVIC_EnableIRQ>
}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b082      	sub	sp, #8
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7ff ffa2 	bl	8001f14 <SysTick_Config>
 8001fd0:	4603      	mov	r3, r0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
	...

08001fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b089      	sub	sp, #36	@ 0x24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fea:	2300      	movs	r3, #0
 8001fec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61fb      	str	r3, [r7, #28]
 8001ff6:	e16b      	b.n	80022d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	4013      	ands	r3, r2
 800200a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	429a      	cmp	r2, r3
 8002012:	f040 815a 	bne.w	80022ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	2b01      	cmp	r3, #1
 8002020:	d005      	beq.n	800202e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800202a:	2b02      	cmp	r3, #2
 800202c:	d130      	bne.n	8002090 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	2203      	movs	r2, #3
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43db      	mvns	r3, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4013      	ands	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	68da      	ldr	r2, [r3, #12]
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4313      	orrs	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002064:	2201      	movs	r2, #1
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4013      	ands	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	091b      	lsrs	r3, r3, #4
 800207a:	f003 0201 	and.w	r2, r3, #1
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4313      	orrs	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 0303 	and.w	r3, r3, #3
 8002098:	2b03      	cmp	r3, #3
 800209a:	d017      	beq.n	80020cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	2203      	movs	r2, #3
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	43db      	mvns	r3, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4013      	ands	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 0303 	and.w	r3, r3, #3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d123      	bne.n	8002120 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	08da      	lsrs	r2, r3, #3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3208      	adds	r2, #8
 80020e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	f003 0307 	and.w	r3, r3, #7
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	220f      	movs	r2, #15
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	691a      	ldr	r2, [r3, #16]
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	08da      	lsrs	r2, r3, #3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3208      	adds	r2, #8
 800211a:	69b9      	ldr	r1, [r7, #24]
 800211c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	2203      	movs	r2, #3
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	43db      	mvns	r3, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4013      	ands	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f003 0203 	and.w	r2, r3, #3
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4313      	orrs	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 80b4 	beq.w	80022ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	4b60      	ldr	r3, [pc, #384]	@ (80022e8 <HAL_GPIO_Init+0x30c>)
 8002168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800216a:	4a5f      	ldr	r2, [pc, #380]	@ (80022e8 <HAL_GPIO_Init+0x30c>)
 800216c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002170:	6453      	str	r3, [r2, #68]	@ 0x44
 8002172:	4b5d      	ldr	r3, [pc, #372]	@ (80022e8 <HAL_GPIO_Init+0x30c>)
 8002174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002176:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800217e:	4a5b      	ldr	r2, [pc, #364]	@ (80022ec <HAL_GPIO_Init+0x310>)
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	089b      	lsrs	r3, r3, #2
 8002184:	3302      	adds	r3, #2
 8002186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800218a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	220f      	movs	r2, #15
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	43db      	mvns	r3, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4013      	ands	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a52      	ldr	r2, [pc, #328]	@ (80022f0 <HAL_GPIO_Init+0x314>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d02b      	beq.n	8002202 <HAL_GPIO_Init+0x226>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a51      	ldr	r2, [pc, #324]	@ (80022f4 <HAL_GPIO_Init+0x318>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d025      	beq.n	80021fe <HAL_GPIO_Init+0x222>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a50      	ldr	r2, [pc, #320]	@ (80022f8 <HAL_GPIO_Init+0x31c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d01f      	beq.n	80021fa <HAL_GPIO_Init+0x21e>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a4f      	ldr	r2, [pc, #316]	@ (80022fc <HAL_GPIO_Init+0x320>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d019      	beq.n	80021f6 <HAL_GPIO_Init+0x21a>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a4e      	ldr	r2, [pc, #312]	@ (8002300 <HAL_GPIO_Init+0x324>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d013      	beq.n	80021f2 <HAL_GPIO_Init+0x216>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a4d      	ldr	r2, [pc, #308]	@ (8002304 <HAL_GPIO_Init+0x328>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d00d      	beq.n	80021ee <HAL_GPIO_Init+0x212>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a4c      	ldr	r2, [pc, #304]	@ (8002308 <HAL_GPIO_Init+0x32c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d007      	beq.n	80021ea <HAL_GPIO_Init+0x20e>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a4b      	ldr	r2, [pc, #300]	@ (800230c <HAL_GPIO_Init+0x330>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d101      	bne.n	80021e6 <HAL_GPIO_Init+0x20a>
 80021e2:	2307      	movs	r3, #7
 80021e4:	e00e      	b.n	8002204 <HAL_GPIO_Init+0x228>
 80021e6:	2308      	movs	r3, #8
 80021e8:	e00c      	b.n	8002204 <HAL_GPIO_Init+0x228>
 80021ea:	2306      	movs	r3, #6
 80021ec:	e00a      	b.n	8002204 <HAL_GPIO_Init+0x228>
 80021ee:	2305      	movs	r3, #5
 80021f0:	e008      	b.n	8002204 <HAL_GPIO_Init+0x228>
 80021f2:	2304      	movs	r3, #4
 80021f4:	e006      	b.n	8002204 <HAL_GPIO_Init+0x228>
 80021f6:	2303      	movs	r3, #3
 80021f8:	e004      	b.n	8002204 <HAL_GPIO_Init+0x228>
 80021fa:	2302      	movs	r3, #2
 80021fc:	e002      	b.n	8002204 <HAL_GPIO_Init+0x228>
 80021fe:	2301      	movs	r3, #1
 8002200:	e000      	b.n	8002204 <HAL_GPIO_Init+0x228>
 8002202:	2300      	movs	r3, #0
 8002204:	69fa      	ldr	r2, [r7, #28]
 8002206:	f002 0203 	and.w	r2, r2, #3
 800220a:	0092      	lsls	r2, r2, #2
 800220c:	4093      	lsls	r3, r2
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4313      	orrs	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002214:	4935      	ldr	r1, [pc, #212]	@ (80022ec <HAL_GPIO_Init+0x310>)
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	089b      	lsrs	r3, r3, #2
 800221a:	3302      	adds	r3, #2
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002222:	4b3b      	ldr	r3, [pc, #236]	@ (8002310 <HAL_GPIO_Init+0x334>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	43db      	mvns	r3, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4013      	ands	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	4313      	orrs	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002246:	4a32      	ldr	r2, [pc, #200]	@ (8002310 <HAL_GPIO_Init+0x334>)
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800224c:	4b30      	ldr	r3, [pc, #192]	@ (8002310 <HAL_GPIO_Init+0x334>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	43db      	mvns	r3, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4013      	ands	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	4313      	orrs	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002270:	4a27      	ldr	r2, [pc, #156]	@ (8002310 <HAL_GPIO_Init+0x334>)
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002276:	4b26      	ldr	r3, [pc, #152]	@ (8002310 <HAL_GPIO_Init+0x334>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	43db      	mvns	r3, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4013      	ands	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	4313      	orrs	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800229a:	4a1d      	ldr	r2, [pc, #116]	@ (8002310 <HAL_GPIO_Init+0x334>)
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002310 <HAL_GPIO_Init+0x334>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	43db      	mvns	r3, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4013      	ands	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d003      	beq.n	80022c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022c4:	4a12      	ldr	r2, [pc, #72]	@ (8002310 <HAL_GPIO_Init+0x334>)
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	3301      	adds	r3, #1
 80022ce:	61fb      	str	r3, [r7, #28]
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	2b0f      	cmp	r3, #15
 80022d4:	f67f ae90 	bls.w	8001ff8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022d8:	bf00      	nop
 80022da:	bf00      	nop
 80022dc:	3724      	adds	r7, #36	@ 0x24
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	40023800 	.word	0x40023800
 80022ec:	40013800 	.word	0x40013800
 80022f0:	40020000 	.word	0x40020000
 80022f4:	40020400 	.word	0x40020400
 80022f8:	40020800 	.word	0x40020800
 80022fc:	40020c00 	.word	0x40020c00
 8002300:	40021000 	.word	0x40021000
 8002304:	40021400 	.word	0x40021400
 8002308:	40021800 	.word	0x40021800
 800230c:	40021c00 	.word	0x40021c00
 8002310:	40013c00 	.word	0x40013c00

08002314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	460b      	mov	r3, r1
 800231e:	807b      	strh	r3, [r7, #2]
 8002320:	4613      	mov	r3, r2
 8002322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002324:	787b      	ldrb	r3, [r7, #1]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800232a:	887a      	ldrh	r2, [r7, #2]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002330:	e003      	b.n	800233a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002332:	887b      	ldrh	r3, [r7, #2]
 8002334:	041a      	lsls	r2, r3, #16
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	619a      	str	r2, [r3, #24]
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b086      	sub	sp, #24
 800234a:	af02      	add	r7, sp, #8
 800234c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e059      	b.n	800240c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d106      	bne.n	8002378 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f007 ffd8 	bl	800a328 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2203      	movs	r2, #3
 800237c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002386:	d102      	bne.n	800238e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f004 fdf1 	bl	8006f7a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6818      	ldr	r0, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	7c1a      	ldrb	r2, [r3, #16]
 80023a0:	f88d 2000 	strb.w	r2, [sp]
 80023a4:	3304      	adds	r3, #4
 80023a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023a8:	f004 fd72 	bl	8006e90 <USB_CoreInit>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d005      	beq.n	80023be <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2202      	movs	r2, #2
 80023b6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e026      	b.n	800240c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2101      	movs	r1, #1
 80023c4:	4618      	mov	r0, r3
 80023c6:	f004 fde9 	bl	8006f9c <USB_SetCurrentMode>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d005      	beq.n	80023dc <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2202      	movs	r2, #2
 80023d4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e017      	b.n	800240c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6818      	ldr	r0, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	7c1a      	ldrb	r2, [r3, #16]
 80023e4:	f88d 2000 	strb.w	r2, [sp]
 80023e8:	3304      	adds	r3, #4
 80023ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023ec:	f004 ff8c 	bl	8007308 <USB_HostInit>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d005      	beq.n	8002402 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2202      	movs	r2, #2
 80023fa:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e004      	b.n	800240c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002414:	b590      	push	{r4, r7, lr}
 8002416:	b08b      	sub	sp, #44	@ 0x2c
 8002418:	af04      	add	r7, sp, #16
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	4608      	mov	r0, r1
 800241e:	4611      	mov	r1, r2
 8002420:	461a      	mov	r2, r3
 8002422:	4603      	mov	r3, r0
 8002424:	70fb      	strb	r3, [r7, #3]
 8002426:	460b      	mov	r3, r1
 8002428:	70bb      	strb	r3, [r7, #2]
 800242a:	4613      	mov	r3, r2
 800242c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800242e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002430:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002438:	2b01      	cmp	r3, #1
 800243a:	d101      	bne.n	8002440 <HAL_HCD_HC_Init+0x2c>
 800243c:	2302      	movs	r3, #2
 800243e:	e09d      	b.n	800257c <HAL_HCD_HC_Init+0x168>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002448:	78fa      	ldrb	r2, [r7, #3]
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	4613      	mov	r3, r2
 800244e:	011b      	lsls	r3, r3, #4
 8002450:	1a9b      	subs	r3, r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	440b      	add	r3, r1
 8002456:	3319      	adds	r3, #25
 8002458:	2200      	movs	r2, #0
 800245a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800245c:	78fa      	ldrb	r2, [r7, #3]
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	4613      	mov	r3, r2
 8002462:	011b      	lsls	r3, r3, #4
 8002464:	1a9b      	subs	r3, r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	3314      	adds	r3, #20
 800246c:	787a      	ldrb	r2, [r7, #1]
 800246e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002470:	78fa      	ldrb	r2, [r7, #3]
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	4613      	mov	r3, r2
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	1a9b      	subs	r3, r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	3315      	adds	r3, #21
 8002480:	78fa      	ldrb	r2, [r7, #3]
 8002482:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002484:	78fa      	ldrb	r2, [r7, #3]
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	1a9b      	subs	r3, r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	3326      	adds	r3, #38	@ 0x26
 8002494:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002498:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800249a:	78fa      	ldrb	r2, [r7, #3]
 800249c:	78bb      	ldrb	r3, [r7, #2]
 800249e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024a2:	b2d8      	uxtb	r0, r3
 80024a4:	6879      	ldr	r1, [r7, #4]
 80024a6:	4613      	mov	r3, r2
 80024a8:	011b      	lsls	r3, r3, #4
 80024aa:	1a9b      	subs	r3, r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	440b      	add	r3, r1
 80024b0:	3316      	adds	r3, #22
 80024b2:	4602      	mov	r2, r0
 80024b4:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80024b6:	78fb      	ldrb	r3, [r7, #3]
 80024b8:	4619      	mov	r1, r3
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 fbc8 	bl	8002c50 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80024c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	da0a      	bge.n	80024de <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80024c8:	78fa      	ldrb	r2, [r7, #3]
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	4613      	mov	r3, r2
 80024ce:	011b      	lsls	r3, r3, #4
 80024d0:	1a9b      	subs	r3, r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	3317      	adds	r3, #23
 80024d8:	2201      	movs	r2, #1
 80024da:	701a      	strb	r2, [r3, #0]
 80024dc:	e009      	b.n	80024f2 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80024de:	78fa      	ldrb	r2, [r7, #3]
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	4613      	mov	r3, r2
 80024e4:	011b      	lsls	r3, r3, #4
 80024e6:	1a9b      	subs	r3, r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	440b      	add	r3, r1
 80024ec:	3317      	adds	r3, #23
 80024ee:	2200      	movs	r2, #0
 80024f0:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f005 f86a 	bl	80075d0 <USB_GetHostSpeed>
 80024fc:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80024fe:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002502:	2b01      	cmp	r3, #1
 8002504:	d10b      	bne.n	800251e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002506:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800250a:	2b01      	cmp	r3, #1
 800250c:	d107      	bne.n	800251e <HAL_HCD_HC_Init+0x10a>
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d104      	bne.n	800251e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	2bbc      	cmp	r3, #188	@ 0xbc
 8002518:	d901      	bls.n	800251e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800251a:	23bc      	movs	r3, #188	@ 0xbc
 800251c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800251e:	78fa      	ldrb	r2, [r7, #3]
 8002520:	6879      	ldr	r1, [r7, #4]
 8002522:	4613      	mov	r3, r2
 8002524:	011b      	lsls	r3, r3, #4
 8002526:	1a9b      	subs	r3, r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	440b      	add	r3, r1
 800252c:	3318      	adds	r3, #24
 800252e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002532:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002534:	78fa      	ldrb	r2, [r7, #3]
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	b298      	uxth	r0, r3
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	4613      	mov	r3, r2
 800253e:	011b      	lsls	r3, r3, #4
 8002540:	1a9b      	subs	r3, r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	3328      	adds	r3, #40	@ 0x28
 8002548:	4602      	mov	r2, r0
 800254a:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6818      	ldr	r0, [r3, #0]
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	b29b      	uxth	r3, r3
 8002554:	787c      	ldrb	r4, [r7, #1]
 8002556:	78ba      	ldrb	r2, [r7, #2]
 8002558:	78f9      	ldrb	r1, [r7, #3]
 800255a:	9302      	str	r3, [sp, #8]
 800255c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002560:	9301      	str	r3, [sp, #4]
 8002562:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	4623      	mov	r3, r4
 800256a:	f005 f859 	bl	8007620 <USB_HC_Init>
 800256e:	4603      	mov	r3, r0
 8002570:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800257a:	7bfb      	ldrb	r3, [r7, #15]
}
 800257c:	4618      	mov	r0, r3
 800257e:	371c      	adds	r7, #28
 8002580:	46bd      	mov	sp, r7
 8002582:	bd90      	pop	{r4, r7, pc}

08002584 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	460b      	mov	r3, r1
 800258e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002590:	2300      	movs	r3, #0
 8002592:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800259a:	2b01      	cmp	r3, #1
 800259c:	d101      	bne.n	80025a2 <HAL_HCD_HC_Halt+0x1e>
 800259e:	2302      	movs	r3, #2
 80025a0:	e00f      	b.n	80025c2 <HAL_HCD_HC_Halt+0x3e>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	78fa      	ldrb	r2, [r7, #3]
 80025b0:	4611      	mov	r1, r2
 80025b2:	4618      	mov	r0, r3
 80025b4:	f005 fbeb 	bl	8007d8e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80025c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
	...

080025cc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	4608      	mov	r0, r1
 80025d6:	4611      	mov	r1, r2
 80025d8:	461a      	mov	r2, r3
 80025da:	4603      	mov	r3, r0
 80025dc:	70fb      	strb	r3, [r7, #3]
 80025de:	460b      	mov	r3, r1
 80025e0:	70bb      	strb	r3, [r7, #2]
 80025e2:	4613      	mov	r3, r2
 80025e4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80025e6:	78fa      	ldrb	r2, [r7, #3]
 80025e8:	6879      	ldr	r1, [r7, #4]
 80025ea:	4613      	mov	r3, r2
 80025ec:	011b      	lsls	r3, r3, #4
 80025ee:	1a9b      	subs	r3, r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	440b      	add	r3, r1
 80025f4:	3317      	adds	r3, #23
 80025f6:	78ba      	ldrb	r2, [r7, #2]
 80025f8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80025fa:	78fa      	ldrb	r2, [r7, #3]
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	4613      	mov	r3, r2
 8002600:	011b      	lsls	r3, r3, #4
 8002602:	1a9b      	subs	r3, r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	440b      	add	r3, r1
 8002608:	3326      	adds	r3, #38	@ 0x26
 800260a:	787a      	ldrb	r2, [r7, #1]
 800260c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800260e:	7c3b      	ldrb	r3, [r7, #16]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d114      	bne.n	800263e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002614:	78fa      	ldrb	r2, [r7, #3]
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	4613      	mov	r3, r2
 800261a:	011b      	lsls	r3, r3, #4
 800261c:	1a9b      	subs	r3, r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	440b      	add	r3, r1
 8002622:	332a      	adds	r3, #42	@ 0x2a
 8002624:	2203      	movs	r2, #3
 8002626:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002628:	78fa      	ldrb	r2, [r7, #3]
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	1a9b      	subs	r3, r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	3319      	adds	r3, #25
 8002638:	7f3a      	ldrb	r2, [r7, #28]
 800263a:	701a      	strb	r2, [r3, #0]
 800263c:	e009      	b.n	8002652 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800263e:	78fa      	ldrb	r2, [r7, #3]
 8002640:	6879      	ldr	r1, [r7, #4]
 8002642:	4613      	mov	r3, r2
 8002644:	011b      	lsls	r3, r3, #4
 8002646:	1a9b      	subs	r3, r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	440b      	add	r3, r1
 800264c:	332a      	adds	r3, #42	@ 0x2a
 800264e:	2202      	movs	r2, #2
 8002650:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002652:	787b      	ldrb	r3, [r7, #1]
 8002654:	2b03      	cmp	r3, #3
 8002656:	f200 8102 	bhi.w	800285e <HAL_HCD_HC_SubmitRequest+0x292>
 800265a:	a201      	add	r2, pc, #4	@ (adr r2, 8002660 <HAL_HCD_HC_SubmitRequest+0x94>)
 800265c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002660:	08002671 	.word	0x08002671
 8002664:	08002849 	.word	0x08002849
 8002668:	08002735 	.word	0x08002735
 800266c:	080027bf 	.word	0x080027bf
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002670:	7c3b      	ldrb	r3, [r7, #16]
 8002672:	2b01      	cmp	r3, #1
 8002674:	f040 80f5 	bne.w	8002862 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002678:	78bb      	ldrb	r3, [r7, #2]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d12d      	bne.n	80026da <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800267e:	8b3b      	ldrh	r3, [r7, #24]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d109      	bne.n	8002698 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002684:	78fa      	ldrb	r2, [r7, #3]
 8002686:	6879      	ldr	r1, [r7, #4]
 8002688:	4613      	mov	r3, r2
 800268a:	011b      	lsls	r3, r3, #4
 800268c:	1a9b      	subs	r3, r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	333d      	adds	r3, #61	@ 0x3d
 8002694:	2201      	movs	r2, #1
 8002696:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002698:	78fa      	ldrb	r2, [r7, #3]
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	4613      	mov	r3, r2
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	1a9b      	subs	r3, r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	333d      	adds	r3, #61	@ 0x3d
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10a      	bne.n	80026c4 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026ae:	78fa      	ldrb	r2, [r7, #3]
 80026b0:	6879      	ldr	r1, [r7, #4]
 80026b2:	4613      	mov	r3, r2
 80026b4:	011b      	lsls	r3, r3, #4
 80026b6:	1a9b      	subs	r3, r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	440b      	add	r3, r1
 80026bc:	332a      	adds	r3, #42	@ 0x2a
 80026be:	2200      	movs	r2, #0
 80026c0:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80026c2:	e0ce      	b.n	8002862 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026c4:	78fa      	ldrb	r2, [r7, #3]
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	4613      	mov	r3, r2
 80026ca:	011b      	lsls	r3, r3, #4
 80026cc:	1a9b      	subs	r3, r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	440b      	add	r3, r1
 80026d2:	332a      	adds	r3, #42	@ 0x2a
 80026d4:	2202      	movs	r2, #2
 80026d6:	701a      	strb	r2, [r3, #0]
      break;
 80026d8:	e0c3      	b.n	8002862 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80026da:	78fa      	ldrb	r2, [r7, #3]
 80026dc:	6879      	ldr	r1, [r7, #4]
 80026de:	4613      	mov	r3, r2
 80026e0:	011b      	lsls	r3, r3, #4
 80026e2:	1a9b      	subs	r3, r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	440b      	add	r3, r1
 80026e8:	331a      	adds	r3, #26
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	f040 80b8 	bne.w	8002862 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80026f2:	78fa      	ldrb	r2, [r7, #3]
 80026f4:	6879      	ldr	r1, [r7, #4]
 80026f6:	4613      	mov	r3, r2
 80026f8:	011b      	lsls	r3, r3, #4
 80026fa:	1a9b      	subs	r3, r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	440b      	add	r3, r1
 8002700:	333c      	adds	r3, #60	@ 0x3c
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d10a      	bne.n	800271e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002708:	78fa      	ldrb	r2, [r7, #3]
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	4613      	mov	r3, r2
 800270e:	011b      	lsls	r3, r3, #4
 8002710:	1a9b      	subs	r3, r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	440b      	add	r3, r1
 8002716:	332a      	adds	r3, #42	@ 0x2a
 8002718:	2200      	movs	r2, #0
 800271a:	701a      	strb	r2, [r3, #0]
      break;
 800271c:	e0a1      	b.n	8002862 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800271e:	78fa      	ldrb	r2, [r7, #3]
 8002720:	6879      	ldr	r1, [r7, #4]
 8002722:	4613      	mov	r3, r2
 8002724:	011b      	lsls	r3, r3, #4
 8002726:	1a9b      	subs	r3, r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	440b      	add	r3, r1
 800272c:	332a      	adds	r3, #42	@ 0x2a
 800272e:	2202      	movs	r2, #2
 8002730:	701a      	strb	r2, [r3, #0]
      break;
 8002732:	e096      	b.n	8002862 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002734:	78bb      	ldrb	r3, [r7, #2]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d120      	bne.n	800277c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800273a:	78fa      	ldrb	r2, [r7, #3]
 800273c:	6879      	ldr	r1, [r7, #4]
 800273e:	4613      	mov	r3, r2
 8002740:	011b      	lsls	r3, r3, #4
 8002742:	1a9b      	subs	r3, r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	440b      	add	r3, r1
 8002748:	333d      	adds	r3, #61	@ 0x3d
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10a      	bne.n	8002766 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002750:	78fa      	ldrb	r2, [r7, #3]
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	4613      	mov	r3, r2
 8002756:	011b      	lsls	r3, r3, #4
 8002758:	1a9b      	subs	r3, r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	440b      	add	r3, r1
 800275e:	332a      	adds	r3, #42	@ 0x2a
 8002760:	2200      	movs	r2, #0
 8002762:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002764:	e07e      	b.n	8002864 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002766:	78fa      	ldrb	r2, [r7, #3]
 8002768:	6879      	ldr	r1, [r7, #4]
 800276a:	4613      	mov	r3, r2
 800276c:	011b      	lsls	r3, r3, #4
 800276e:	1a9b      	subs	r3, r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	440b      	add	r3, r1
 8002774:	332a      	adds	r3, #42	@ 0x2a
 8002776:	2202      	movs	r2, #2
 8002778:	701a      	strb	r2, [r3, #0]
      break;
 800277a:	e073      	b.n	8002864 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800277c:	78fa      	ldrb	r2, [r7, #3]
 800277e:	6879      	ldr	r1, [r7, #4]
 8002780:	4613      	mov	r3, r2
 8002782:	011b      	lsls	r3, r3, #4
 8002784:	1a9b      	subs	r3, r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	440b      	add	r3, r1
 800278a:	333c      	adds	r3, #60	@ 0x3c
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10a      	bne.n	80027a8 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002792:	78fa      	ldrb	r2, [r7, #3]
 8002794:	6879      	ldr	r1, [r7, #4]
 8002796:	4613      	mov	r3, r2
 8002798:	011b      	lsls	r3, r3, #4
 800279a:	1a9b      	subs	r3, r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	440b      	add	r3, r1
 80027a0:	332a      	adds	r3, #42	@ 0x2a
 80027a2:	2200      	movs	r2, #0
 80027a4:	701a      	strb	r2, [r3, #0]
      break;
 80027a6:	e05d      	b.n	8002864 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027a8:	78fa      	ldrb	r2, [r7, #3]
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	4613      	mov	r3, r2
 80027ae:	011b      	lsls	r3, r3, #4
 80027b0:	1a9b      	subs	r3, r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	440b      	add	r3, r1
 80027b6:	332a      	adds	r3, #42	@ 0x2a
 80027b8:	2202      	movs	r2, #2
 80027ba:	701a      	strb	r2, [r3, #0]
      break;
 80027bc:	e052      	b.n	8002864 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80027be:	78bb      	ldrb	r3, [r7, #2]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d120      	bne.n	8002806 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80027c4:	78fa      	ldrb	r2, [r7, #3]
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	4613      	mov	r3, r2
 80027ca:	011b      	lsls	r3, r3, #4
 80027cc:	1a9b      	subs	r3, r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	440b      	add	r3, r1
 80027d2:	333d      	adds	r3, #61	@ 0x3d
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10a      	bne.n	80027f0 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027da:	78fa      	ldrb	r2, [r7, #3]
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	4613      	mov	r3, r2
 80027e0:	011b      	lsls	r3, r3, #4
 80027e2:	1a9b      	subs	r3, r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	440b      	add	r3, r1
 80027e8:	332a      	adds	r3, #42	@ 0x2a
 80027ea:	2200      	movs	r2, #0
 80027ec:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80027ee:	e039      	b.n	8002864 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027f0:	78fa      	ldrb	r2, [r7, #3]
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	4613      	mov	r3, r2
 80027f6:	011b      	lsls	r3, r3, #4
 80027f8:	1a9b      	subs	r3, r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	332a      	adds	r3, #42	@ 0x2a
 8002800:	2202      	movs	r2, #2
 8002802:	701a      	strb	r2, [r3, #0]
      break;
 8002804:	e02e      	b.n	8002864 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002806:	78fa      	ldrb	r2, [r7, #3]
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	4613      	mov	r3, r2
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	1a9b      	subs	r3, r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	440b      	add	r3, r1
 8002814:	333c      	adds	r3, #60	@ 0x3c
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d10a      	bne.n	8002832 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800281c:	78fa      	ldrb	r2, [r7, #3]
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	4613      	mov	r3, r2
 8002822:	011b      	lsls	r3, r3, #4
 8002824:	1a9b      	subs	r3, r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	440b      	add	r3, r1
 800282a:	332a      	adds	r3, #42	@ 0x2a
 800282c:	2200      	movs	r2, #0
 800282e:	701a      	strb	r2, [r3, #0]
      break;
 8002830:	e018      	b.n	8002864 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002832:	78fa      	ldrb	r2, [r7, #3]
 8002834:	6879      	ldr	r1, [r7, #4]
 8002836:	4613      	mov	r3, r2
 8002838:	011b      	lsls	r3, r3, #4
 800283a:	1a9b      	subs	r3, r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	440b      	add	r3, r1
 8002840:	332a      	adds	r3, #42	@ 0x2a
 8002842:	2202      	movs	r2, #2
 8002844:	701a      	strb	r2, [r3, #0]
      break;
 8002846:	e00d      	b.n	8002864 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002848:	78fa      	ldrb	r2, [r7, #3]
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	4613      	mov	r3, r2
 800284e:	011b      	lsls	r3, r3, #4
 8002850:	1a9b      	subs	r3, r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	440b      	add	r3, r1
 8002856:	332a      	adds	r3, #42	@ 0x2a
 8002858:	2200      	movs	r2, #0
 800285a:	701a      	strb	r2, [r3, #0]
      break;
 800285c:	e002      	b.n	8002864 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800285e:	bf00      	nop
 8002860:	e000      	b.n	8002864 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002862:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002864:	78fa      	ldrb	r2, [r7, #3]
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	4613      	mov	r3, r2
 800286a:	011b      	lsls	r3, r3, #4
 800286c:	1a9b      	subs	r3, r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	332c      	adds	r3, #44	@ 0x2c
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002878:	78fa      	ldrb	r2, [r7, #3]
 800287a:	8b39      	ldrh	r1, [r7, #24]
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	4613      	mov	r3, r2
 8002880:	011b      	lsls	r3, r3, #4
 8002882:	1a9b      	subs	r3, r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	4403      	add	r3, r0
 8002888:	3334      	adds	r3, #52	@ 0x34
 800288a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800288c:	78fa      	ldrb	r2, [r7, #3]
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	4613      	mov	r3, r2
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	1a9b      	subs	r3, r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	440b      	add	r3, r1
 800289a:	334c      	adds	r3, #76	@ 0x4c
 800289c:	2200      	movs	r2, #0
 800289e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80028a0:	78fa      	ldrb	r2, [r7, #3]
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	4613      	mov	r3, r2
 80028a6:	011b      	lsls	r3, r3, #4
 80028a8:	1a9b      	subs	r3, r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	3338      	adds	r3, #56	@ 0x38
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80028b4:	78fa      	ldrb	r2, [r7, #3]
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	4613      	mov	r3, r2
 80028ba:	011b      	lsls	r3, r3, #4
 80028bc:	1a9b      	subs	r3, r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	3315      	adds	r3, #21
 80028c4:	78fa      	ldrb	r2, [r7, #3]
 80028c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80028c8:	78fa      	ldrb	r2, [r7, #3]
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	4613      	mov	r3, r2
 80028ce:	011b      	lsls	r3, r3, #4
 80028d0:	1a9b      	subs	r3, r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	440b      	add	r3, r1
 80028d6:	334d      	adds	r3, #77	@ 0x4d
 80028d8:	2200      	movs	r2, #0
 80028da:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6818      	ldr	r0, [r3, #0]
 80028e0:	78fa      	ldrb	r2, [r7, #3]
 80028e2:	4613      	mov	r3, r2
 80028e4:	011b      	lsls	r3, r3, #4
 80028e6:	1a9b      	subs	r3, r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	3310      	adds	r3, #16
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	4413      	add	r3, r2
 80028f0:	1d19      	adds	r1, r3, #4
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	799b      	ldrb	r3, [r3, #6]
 80028f6:	461a      	mov	r2, r3
 80028f8:	f004 ffbe 	bl	8007878 <USB_HC_StartXfer>
 80028fc:	4603      	mov	r3, r0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop

08002908 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f004 fcb2 	bl	8007288 <USB_GetMode>
 8002924:	4603      	mov	r3, r0
 8002926:	2b01      	cmp	r3, #1
 8002928:	f040 80fb 	bne.w	8002b22 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f004 fc75 	bl	8007220 <USB_ReadInterrupts>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 80f1 	beq.w	8002b20 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f004 fc6c 	bl	8007220 <USB_ReadInterrupts>
 8002948:	4603      	mov	r3, r0
 800294a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800294e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002952:	d104      	bne.n	800295e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800295c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	f004 fc5c 	bl	8007220 <USB_ReadInterrupts>
 8002968:	4603      	mov	r3, r0
 800296a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800296e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002972:	d104      	bne.n	800297e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800297c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f004 fc4c 	bl	8007220 <USB_ReadInterrupts>
 8002988:	4603      	mov	r3, r0
 800298a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800298e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002992:	d104      	bne.n	800299e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800299c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f004 fc3c 	bl	8007220 <USB_ReadInterrupts>
 80029a8:	4603      	mov	r3, r0
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d103      	bne.n	80029ba <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2202      	movs	r2, #2
 80029b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f004 fc2e 	bl	8007220 <USB_ReadInterrupts>
 80029c4:	4603      	mov	r3, r0
 80029c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80029ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80029ce:	d120      	bne.n	8002a12 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80029d8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d113      	bne.n	8002a12 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80029ea:	2110      	movs	r1, #16
 80029ec:	6938      	ldr	r0, [r7, #16]
 80029ee:	f004 fb21 	bl	8007034 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80029f2:	6938      	ldr	r0, [r7, #16]
 80029f4:	f004 fb50 	bl	8007098 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	7a5b      	ldrb	r3, [r3, #9]
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d105      	bne.n	8002a0c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2101      	movs	r1, #1
 8002a06:	4618      	mov	r0, r3
 8002a08:	f004 fd42 	bl	8007490 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f007 fd09 	bl	800a424 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f004 fc02 	bl	8007220 <USB_ReadInterrupts>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a26:	d102      	bne.n	8002a2e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f001 fd4d 	bl	80044c8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f004 fbf4 	bl	8007220 <USB_ReadInterrupts>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	f003 0308 	and.w	r3, r3, #8
 8002a3e:	2b08      	cmp	r3, #8
 8002a40:	d106      	bne.n	8002a50 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f007 fcd2 	bl	800a3ec <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2208      	movs	r2, #8
 8002a4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f004 fbe3 	bl	8007220 <USB_ReadInterrupts>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002a64:	d139      	bne.n	8002ada <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f005 f97e 	bl	8007d6c <USB_HC_ReadInterrupt>
 8002a70:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002a72:	2300      	movs	r3, #0
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	e025      	b.n	8002ac4 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	f003 030f 	and.w	r3, r3, #15
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	fa22 f303 	lsr.w	r3, r2, r3
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d018      	beq.n	8002abe <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	015a      	lsls	r2, r3, #5
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4413      	add	r3, r2
 8002a94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002aa2:	d106      	bne.n	8002ab2 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f905 	bl	8002cba <HCD_HC_IN_IRQHandler>
 8002ab0:	e005      	b.n	8002abe <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 ff67 	bl	800398c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	795b      	ldrb	r3, [r3, #5]
 8002ac8:	461a      	mov	r2, r3
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d3d3      	bcc.n	8002a78 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ad8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f004 fb9e 	bl	8007220 <USB_ReadInterrupts>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	f003 0310 	and.w	r3, r3, #16
 8002aea:	2b10      	cmp	r3, #16
 8002aec:	d101      	bne.n	8002af2 <HAL_HCD_IRQHandler+0x1ea>
 8002aee:	2301      	movs	r3, #1
 8002af0:	e000      	b.n	8002af4 <HAL_HCD_IRQHandler+0x1ec>
 8002af2:	2300      	movs	r3, #0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d014      	beq.n	8002b22 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	699a      	ldr	r2, [r3, #24]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 0210 	bic.w	r2, r2, #16
 8002b06:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f001 fbfe 	bl	800430a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	699a      	ldr	r2, [r3, #24]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f042 0210 	orr.w	r2, r2, #16
 8002b1c:	619a      	str	r2, [r3, #24]
 8002b1e:	e000      	b.n	8002b22 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002b20:	bf00      	nop
    }
  }
}
 8002b22:	3718      	adds	r7, #24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d101      	bne.n	8002b3e <HAL_HCD_Start+0x16>
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	e013      	b.n	8002b66 <HAL_HCD_Start+0x3e>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f004 fd06 	bl	800755e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f004 f9fe 	bl	8006f58 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b082      	sub	sp, #8
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d101      	bne.n	8002b84 <HAL_HCD_Stop+0x16>
 8002b80:	2302      	movs	r3, #2
 8002b82:	e00d      	b.n	8002ba0 <HAL_HCD_Stop+0x32>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f005 fa59 	bl	8008048 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f004 fca8 	bl	800750a <USB_ResetPort>
 8002bba:	4603      	mov	r3, r0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002bd0:	78fa      	ldrb	r2, [r7, #3]
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	1a9b      	subs	r3, r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	440b      	add	r3, r1
 8002bde:	334c      	adds	r3, #76	@ 0x4c
 8002be0:	781b      	ldrb	r3, [r3, #0]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr

08002bee <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b083      	sub	sp, #12
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002bfa:	78fa      	ldrb	r2, [r7, #3]
 8002bfc:	6879      	ldr	r1, [r7, #4]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	011b      	lsls	r3, r3, #4
 8002c02:	1a9b      	subs	r3, r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	440b      	add	r3, r1
 8002c08:	3338      	adds	r3, #56	@ 0x38
 8002c0a:	681b      	ldr	r3, [r3, #0]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f004 fcea 	bl	80075fe <USB_GetCurrentFrame>
 8002c2a:	4603      	mov	r3, r0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f004 fcc5 	bl	80075d0 <USB_GetHostSpeed>
 8002c46:	4603      	mov	r3, r0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	460b      	mov	r3, r1
 8002c5a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002c5c:	78fa      	ldrb	r2, [r7, #3]
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	4613      	mov	r3, r2
 8002c62:	011b      	lsls	r3, r3, #4
 8002c64:	1a9b      	subs	r3, r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	440b      	add	r3, r1
 8002c6a:	331a      	adds	r3, #26
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002c70:	78fa      	ldrb	r2, [r7, #3]
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	4613      	mov	r3, r2
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	1a9b      	subs	r3, r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	331b      	adds	r3, #27
 8002c80:	2200      	movs	r2, #0
 8002c82:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002c84:	78fa      	ldrb	r2, [r7, #3]
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	011b      	lsls	r3, r3, #4
 8002c8c:	1a9b      	subs	r3, r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	440b      	add	r3, r1
 8002c92:	3325      	adds	r3, #37	@ 0x25
 8002c94:	2200      	movs	r2, #0
 8002c96:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002c98:	78fa      	ldrb	r2, [r7, #3]
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	011b      	lsls	r3, r3, #4
 8002ca0:	1a9b      	subs	r3, r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	3324      	adds	r3, #36	@ 0x24
 8002ca8:	2200      	movs	r2, #0
 8002caa:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b086      	sub	sp, #24
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	78fa      	ldrb	r2, [r7, #3]
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f004 fab4 	bl	8007246 <USB_ReadChInterrupts>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	2b04      	cmp	r3, #4
 8002ce6:	d11a      	bne.n	8002d1e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002ce8:	78fb      	ldrb	r3, [r7, #3]
 8002cea:	015a      	lsls	r2, r3, #5
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	4413      	add	r3, r2
 8002cf0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	2304      	movs	r3, #4
 8002cf8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002cfa:	78fa      	ldrb	r2, [r7, #3]
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	1a9b      	subs	r3, r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	440b      	add	r3, r1
 8002d08:	334d      	adds	r3, #77	@ 0x4d
 8002d0a:	2207      	movs	r2, #7
 8002d0c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	78fa      	ldrb	r2, [r7, #3]
 8002d14:	4611      	mov	r1, r2
 8002d16:	4618      	mov	r0, r3
 8002d18:	f005 f839 	bl	8007d8e <USB_HC_Halt>
 8002d1c:	e09e      	b.n	8002e5c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	78fa      	ldrb	r2, [r7, #3]
 8002d24:	4611      	mov	r1, r2
 8002d26:	4618      	mov	r0, r3
 8002d28:	f004 fa8d 	bl	8007246 <USB_ReadChInterrupts>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d36:	d11b      	bne.n	8002d70 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002d38:	78fb      	ldrb	r3, [r7, #3]
 8002d3a:	015a      	lsls	r2, r3, #5
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	4413      	add	r3, r2
 8002d40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d44:	461a      	mov	r2, r3
 8002d46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d4a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002d4c:	78fa      	ldrb	r2, [r7, #3]
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	4613      	mov	r3, r2
 8002d52:	011b      	lsls	r3, r3, #4
 8002d54:	1a9b      	subs	r3, r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	440b      	add	r3, r1
 8002d5a:	334d      	adds	r3, #77	@ 0x4d
 8002d5c:	2208      	movs	r2, #8
 8002d5e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	78fa      	ldrb	r2, [r7, #3]
 8002d66:	4611      	mov	r1, r2
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f005 f810 	bl	8007d8e <USB_HC_Halt>
 8002d6e:	e075      	b.n	8002e5c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	78fa      	ldrb	r2, [r7, #3]
 8002d76:	4611      	mov	r1, r2
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f004 fa64 	bl	8007246 <USB_ReadChInterrupts>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	f003 0308 	and.w	r3, r3, #8
 8002d84:	2b08      	cmp	r3, #8
 8002d86:	d11a      	bne.n	8002dbe <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002d88:	78fb      	ldrb	r3, [r7, #3]
 8002d8a:	015a      	lsls	r2, r3, #5
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	4413      	add	r3, r2
 8002d90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d94:	461a      	mov	r2, r3
 8002d96:	2308      	movs	r3, #8
 8002d98:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002d9a:	78fa      	ldrb	r2, [r7, #3]
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	011b      	lsls	r3, r3, #4
 8002da2:	1a9b      	subs	r3, r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	440b      	add	r3, r1
 8002da8:	334d      	adds	r3, #77	@ 0x4d
 8002daa:	2206      	movs	r2, #6
 8002dac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	78fa      	ldrb	r2, [r7, #3]
 8002db4:	4611      	mov	r1, r2
 8002db6:	4618      	mov	r0, r3
 8002db8:	f004 ffe9 	bl	8007d8e <USB_HC_Halt>
 8002dbc:	e04e      	b.n	8002e5c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	78fa      	ldrb	r2, [r7, #3]
 8002dc4:	4611      	mov	r1, r2
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f004 fa3d 	bl	8007246 <USB_ReadChInterrupts>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dd6:	d11b      	bne.n	8002e10 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002dd8:	78fb      	ldrb	r3, [r7, #3]
 8002dda:	015a      	lsls	r2, r3, #5
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	4413      	add	r3, r2
 8002de0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002de4:	461a      	mov	r2, r3
 8002de6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002dea:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002dec:	78fa      	ldrb	r2, [r7, #3]
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	4613      	mov	r3, r2
 8002df2:	011b      	lsls	r3, r3, #4
 8002df4:	1a9b      	subs	r3, r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	334d      	adds	r3, #77	@ 0x4d
 8002dfc:	2209      	movs	r2, #9
 8002dfe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	78fa      	ldrb	r2, [r7, #3]
 8002e06:	4611      	mov	r1, r2
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f004 ffc0 	bl	8007d8e <USB_HC_Halt>
 8002e0e:	e025      	b.n	8002e5c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	78fa      	ldrb	r2, [r7, #3]
 8002e16:	4611      	mov	r1, r2
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f004 fa14 	bl	8007246 <USB_ReadChInterrupts>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e24:	2b80      	cmp	r3, #128	@ 0x80
 8002e26:	d119      	bne.n	8002e5c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002e28:	78fb      	ldrb	r3, [r7, #3]
 8002e2a:	015a      	lsls	r2, r3, #5
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	4413      	add	r3, r2
 8002e30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e34:	461a      	mov	r2, r3
 8002e36:	2380      	movs	r3, #128	@ 0x80
 8002e38:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002e3a:	78fa      	ldrb	r2, [r7, #3]
 8002e3c:	6879      	ldr	r1, [r7, #4]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	011b      	lsls	r3, r3, #4
 8002e42:	1a9b      	subs	r3, r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	440b      	add	r3, r1
 8002e48:	334d      	adds	r3, #77	@ 0x4d
 8002e4a:	2207      	movs	r2, #7
 8002e4c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	78fa      	ldrb	r2, [r7, #3]
 8002e54:	4611      	mov	r1, r2
 8002e56:	4618      	mov	r0, r3
 8002e58:	f004 ff99 	bl	8007d8e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	78fa      	ldrb	r2, [r7, #3]
 8002e62:	4611      	mov	r1, r2
 8002e64:	4618      	mov	r0, r3
 8002e66:	f004 f9ee 	bl	8007246 <USB_ReadChInterrupts>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e74:	d112      	bne.n	8002e9c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	78fa      	ldrb	r2, [r7, #3]
 8002e7c:	4611      	mov	r1, r2
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f004 ff85 	bl	8007d8e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002e84:	78fb      	ldrb	r3, [r7, #3]
 8002e86:	015a      	lsls	r2, r3, #5
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e90:	461a      	mov	r2, r3
 8002e92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e96:	6093      	str	r3, [r2, #8]
 8002e98:	f000 bd75 	b.w	8003986 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	78fa      	ldrb	r2, [r7, #3]
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f004 f9ce 	bl	8007246 <USB_ReadChInterrupts>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	f040 8128 	bne.w	8003106 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002eb6:	78fb      	ldrb	r3, [r7, #3]
 8002eb8:	015a      	lsls	r2, r3, #5
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	2320      	movs	r3, #32
 8002ec6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002ec8:	78fa      	ldrb	r2, [r7, #3]
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	011b      	lsls	r3, r3, #4
 8002ed0:	1a9b      	subs	r3, r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	331b      	adds	r3, #27
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d119      	bne.n	8002f12 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002ede:	78fa      	ldrb	r2, [r7, #3]
 8002ee0:	6879      	ldr	r1, [r7, #4]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	011b      	lsls	r3, r3, #4
 8002ee6:	1a9b      	subs	r3, r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	440b      	add	r3, r1
 8002eec:	331b      	adds	r3, #27
 8002eee:	2200      	movs	r2, #0
 8002ef0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002ef2:	78fb      	ldrb	r3, [r7, #3]
 8002ef4:	015a      	lsls	r2, r3, #5
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	4413      	add	r3, r2
 8002efa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	78fa      	ldrb	r2, [r7, #3]
 8002f02:	0151      	lsls	r1, r2, #5
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	440a      	add	r2, r1
 8002f08:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002f0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f10:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	799b      	ldrb	r3, [r3, #6]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d01b      	beq.n	8002f52 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002f1a:	78fa      	ldrb	r2, [r7, #3]
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	011b      	lsls	r3, r3, #4
 8002f22:	1a9b      	subs	r3, r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	440b      	add	r3, r1
 8002f28:	3330      	adds	r3, #48	@ 0x30
 8002f2a:	6819      	ldr	r1, [r3, #0]
 8002f2c:	78fb      	ldrb	r3, [r7, #3]
 8002f2e:	015a      	lsls	r2, r3, #5
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	4413      	add	r3, r2
 8002f34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f3e:	78fa      	ldrb	r2, [r7, #3]
 8002f40:	1ac9      	subs	r1, r1, r3
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	4613      	mov	r3, r2
 8002f46:	011b      	lsls	r3, r3, #4
 8002f48:	1a9b      	subs	r3, r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4403      	add	r3, r0
 8002f4e:	3338      	adds	r3, #56	@ 0x38
 8002f50:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002f52:	78fa      	ldrb	r2, [r7, #3]
 8002f54:	6879      	ldr	r1, [r7, #4]
 8002f56:	4613      	mov	r3, r2
 8002f58:	011b      	lsls	r3, r3, #4
 8002f5a:	1a9b      	subs	r3, r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	440b      	add	r3, r1
 8002f60:	334d      	adds	r3, #77	@ 0x4d
 8002f62:	2201      	movs	r2, #1
 8002f64:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002f66:	78fa      	ldrb	r2, [r7, #3]
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	1a9b      	subs	r3, r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	440b      	add	r3, r1
 8002f74:	3344      	adds	r3, #68	@ 0x44
 8002f76:	2200      	movs	r2, #0
 8002f78:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002f7a:	78fb      	ldrb	r3, [r7, #3]
 8002f7c:	015a      	lsls	r2, r3, #5
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	4413      	add	r3, r2
 8002f82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f86:	461a      	mov	r2, r3
 8002f88:	2301      	movs	r3, #1
 8002f8a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f8c:	78fa      	ldrb	r2, [r7, #3]
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	4613      	mov	r3, r2
 8002f92:	011b      	lsls	r3, r3, #4
 8002f94:	1a9b      	subs	r3, r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	3326      	adds	r3, #38	@ 0x26
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00a      	beq.n	8002fb8 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002fa2:	78fa      	ldrb	r2, [r7, #3]
 8002fa4:	6879      	ldr	r1, [r7, #4]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	011b      	lsls	r3, r3, #4
 8002faa:	1a9b      	subs	r3, r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	440b      	add	r3, r1
 8002fb0:	3326      	adds	r3, #38	@ 0x26
 8002fb2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d110      	bne.n	8002fda <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	78fa      	ldrb	r2, [r7, #3]
 8002fbe:	4611      	mov	r1, r2
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f004 fee4 	bl	8007d8e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002fc6:	78fb      	ldrb	r3, [r7, #3]
 8002fc8:	015a      	lsls	r2, r3, #5
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	4413      	add	r3, r2
 8002fce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	2310      	movs	r3, #16
 8002fd6:	6093      	str	r3, [r2, #8]
 8002fd8:	e03d      	b.n	8003056 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002fda:	78fa      	ldrb	r2, [r7, #3]
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	1a9b      	subs	r3, r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	3326      	adds	r3, #38	@ 0x26
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	2b03      	cmp	r3, #3
 8002fee:	d00a      	beq.n	8003006 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002ff0:	78fa      	ldrb	r2, [r7, #3]
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	011b      	lsls	r3, r3, #4
 8002ff8:	1a9b      	subs	r3, r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	3326      	adds	r3, #38	@ 0x26
 8003000:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003002:	2b01      	cmp	r3, #1
 8003004:	d127      	bne.n	8003056 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003006:	78fb      	ldrb	r3, [r7, #3]
 8003008:	015a      	lsls	r2, r3, #5
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	4413      	add	r3, r2
 800300e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	78fa      	ldrb	r2, [r7, #3]
 8003016:	0151      	lsls	r1, r2, #5
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	440a      	add	r2, r1
 800301c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003020:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003024:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003026:	78fa      	ldrb	r2, [r7, #3]
 8003028:	6879      	ldr	r1, [r7, #4]
 800302a:	4613      	mov	r3, r2
 800302c:	011b      	lsls	r3, r3, #4
 800302e:	1a9b      	subs	r3, r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	440b      	add	r3, r1
 8003034:	334c      	adds	r3, #76	@ 0x4c
 8003036:	2201      	movs	r2, #1
 8003038:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800303a:	78fa      	ldrb	r2, [r7, #3]
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	4613      	mov	r3, r2
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	1a9b      	subs	r3, r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	440b      	add	r3, r1
 8003048:	334c      	adds	r3, #76	@ 0x4c
 800304a:	781a      	ldrb	r2, [r3, #0]
 800304c:	78fb      	ldrb	r3, [r7, #3]
 800304e:	4619      	mov	r1, r3
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f007 f9f5 	bl	800a440 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	799b      	ldrb	r3, [r3, #6]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d13b      	bne.n	80030d6 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800305e:	78fa      	ldrb	r2, [r7, #3]
 8003060:	6879      	ldr	r1, [r7, #4]
 8003062:	4613      	mov	r3, r2
 8003064:	011b      	lsls	r3, r3, #4
 8003066:	1a9b      	subs	r3, r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	440b      	add	r3, r1
 800306c:	3338      	adds	r3, #56	@ 0x38
 800306e:	6819      	ldr	r1, [r3, #0]
 8003070:	78fa      	ldrb	r2, [r7, #3]
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	4613      	mov	r3, r2
 8003076:	011b      	lsls	r3, r3, #4
 8003078:	1a9b      	subs	r3, r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4403      	add	r3, r0
 800307e:	3328      	adds	r3, #40	@ 0x28
 8003080:	881b      	ldrh	r3, [r3, #0]
 8003082:	440b      	add	r3, r1
 8003084:	1e59      	subs	r1, r3, #1
 8003086:	78fa      	ldrb	r2, [r7, #3]
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	4613      	mov	r3, r2
 800308c:	011b      	lsls	r3, r3, #4
 800308e:	1a9b      	subs	r3, r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4403      	add	r3, r0
 8003094:	3328      	adds	r3, #40	@ 0x28
 8003096:	881b      	ldrh	r3, [r3, #0]
 8003098:	fbb1 f3f3 	udiv	r3, r1, r3
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 8470 	beq.w	8003986 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80030a6:	78fa      	ldrb	r2, [r7, #3]
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	011b      	lsls	r3, r3, #4
 80030ae:	1a9b      	subs	r3, r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	440b      	add	r3, r1
 80030b4:	333c      	adds	r3, #60	@ 0x3c
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	78fa      	ldrb	r2, [r7, #3]
 80030ba:	f083 0301 	eor.w	r3, r3, #1
 80030be:	b2d8      	uxtb	r0, r3
 80030c0:	6879      	ldr	r1, [r7, #4]
 80030c2:	4613      	mov	r3, r2
 80030c4:	011b      	lsls	r3, r3, #4
 80030c6:	1a9b      	subs	r3, r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	440b      	add	r3, r1
 80030cc:	333c      	adds	r3, #60	@ 0x3c
 80030ce:	4602      	mov	r2, r0
 80030d0:	701a      	strb	r2, [r3, #0]
 80030d2:	f000 bc58 	b.w	8003986 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80030d6:	78fa      	ldrb	r2, [r7, #3]
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	011b      	lsls	r3, r3, #4
 80030de:	1a9b      	subs	r3, r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	440b      	add	r3, r1
 80030e4:	333c      	adds	r3, #60	@ 0x3c
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	78fa      	ldrb	r2, [r7, #3]
 80030ea:	f083 0301 	eor.w	r3, r3, #1
 80030ee:	b2d8      	uxtb	r0, r3
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	4613      	mov	r3, r2
 80030f4:	011b      	lsls	r3, r3, #4
 80030f6:	1a9b      	subs	r3, r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	440b      	add	r3, r1
 80030fc:	333c      	adds	r3, #60	@ 0x3c
 80030fe:	4602      	mov	r2, r0
 8003100:	701a      	strb	r2, [r3, #0]
 8003102:	f000 bc40 	b.w	8003986 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	78fa      	ldrb	r2, [r7, #3]
 800310c:	4611      	mov	r1, r2
 800310e:	4618      	mov	r0, r3
 8003110:	f004 f899 	bl	8007246 <USB_ReadChInterrupts>
 8003114:	4603      	mov	r3, r0
 8003116:	f003 0320 	and.w	r3, r3, #32
 800311a:	2b20      	cmp	r3, #32
 800311c:	d131      	bne.n	8003182 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800311e:	78fb      	ldrb	r3, [r7, #3]
 8003120:	015a      	lsls	r2, r3, #5
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	4413      	add	r3, r2
 8003126:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800312a:	461a      	mov	r2, r3
 800312c:	2320      	movs	r3, #32
 800312e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003130:	78fa      	ldrb	r2, [r7, #3]
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	4613      	mov	r3, r2
 8003136:	011b      	lsls	r3, r3, #4
 8003138:	1a9b      	subs	r3, r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	440b      	add	r3, r1
 800313e:	331a      	adds	r3, #26
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	2b01      	cmp	r3, #1
 8003144:	f040 841f 	bne.w	8003986 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003148:	78fa      	ldrb	r2, [r7, #3]
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	4613      	mov	r3, r2
 800314e:	011b      	lsls	r3, r3, #4
 8003150:	1a9b      	subs	r3, r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	440b      	add	r3, r1
 8003156:	331b      	adds	r3, #27
 8003158:	2201      	movs	r2, #1
 800315a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800315c:	78fa      	ldrb	r2, [r7, #3]
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	4613      	mov	r3, r2
 8003162:	011b      	lsls	r3, r3, #4
 8003164:	1a9b      	subs	r3, r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	440b      	add	r3, r1
 800316a:	334d      	adds	r3, #77	@ 0x4d
 800316c:	2203      	movs	r2, #3
 800316e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	78fa      	ldrb	r2, [r7, #3]
 8003176:	4611      	mov	r1, r2
 8003178:	4618      	mov	r0, r3
 800317a:	f004 fe08 	bl	8007d8e <USB_HC_Halt>
 800317e:	f000 bc02 	b.w	8003986 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	78fa      	ldrb	r2, [r7, #3]
 8003188:	4611      	mov	r1, r2
 800318a:	4618      	mov	r0, r3
 800318c:	f004 f85b 	bl	8007246 <USB_ReadChInterrupts>
 8003190:	4603      	mov	r3, r0
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b02      	cmp	r3, #2
 8003198:	f040 8305 	bne.w	80037a6 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800319c:	78fb      	ldrb	r3, [r7, #3]
 800319e:	015a      	lsls	r2, r3, #5
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	4413      	add	r3, r2
 80031a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031a8:	461a      	mov	r2, r3
 80031aa:	2302      	movs	r3, #2
 80031ac:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80031ae:	78fa      	ldrb	r2, [r7, #3]
 80031b0:	6879      	ldr	r1, [r7, #4]
 80031b2:	4613      	mov	r3, r2
 80031b4:	011b      	lsls	r3, r3, #4
 80031b6:	1a9b      	subs	r3, r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	440b      	add	r3, r1
 80031bc:	334d      	adds	r3, #77	@ 0x4d
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d114      	bne.n	80031ee <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031c4:	78fa      	ldrb	r2, [r7, #3]
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	4613      	mov	r3, r2
 80031ca:	011b      	lsls	r3, r3, #4
 80031cc:	1a9b      	subs	r3, r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	440b      	add	r3, r1
 80031d2:	334d      	adds	r3, #77	@ 0x4d
 80031d4:	2202      	movs	r2, #2
 80031d6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80031d8:	78fa      	ldrb	r2, [r7, #3]
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	4613      	mov	r3, r2
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	1a9b      	subs	r3, r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	440b      	add	r3, r1
 80031e6:	334c      	adds	r3, #76	@ 0x4c
 80031e8:	2201      	movs	r2, #1
 80031ea:	701a      	strb	r2, [r3, #0]
 80031ec:	e2cc      	b.n	8003788 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80031ee:	78fa      	ldrb	r2, [r7, #3]
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	4613      	mov	r3, r2
 80031f4:	011b      	lsls	r3, r3, #4
 80031f6:	1a9b      	subs	r3, r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	440b      	add	r3, r1
 80031fc:	334d      	adds	r3, #77	@ 0x4d
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	2b06      	cmp	r3, #6
 8003202:	d114      	bne.n	800322e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003204:	78fa      	ldrb	r2, [r7, #3]
 8003206:	6879      	ldr	r1, [r7, #4]
 8003208:	4613      	mov	r3, r2
 800320a:	011b      	lsls	r3, r3, #4
 800320c:	1a9b      	subs	r3, r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	440b      	add	r3, r1
 8003212:	334d      	adds	r3, #77	@ 0x4d
 8003214:	2202      	movs	r2, #2
 8003216:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003218:	78fa      	ldrb	r2, [r7, #3]
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	4613      	mov	r3, r2
 800321e:	011b      	lsls	r3, r3, #4
 8003220:	1a9b      	subs	r3, r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	440b      	add	r3, r1
 8003226:	334c      	adds	r3, #76	@ 0x4c
 8003228:	2205      	movs	r2, #5
 800322a:	701a      	strb	r2, [r3, #0]
 800322c:	e2ac      	b.n	8003788 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800322e:	78fa      	ldrb	r2, [r7, #3]
 8003230:	6879      	ldr	r1, [r7, #4]
 8003232:	4613      	mov	r3, r2
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	1a9b      	subs	r3, r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	440b      	add	r3, r1
 800323c:	334d      	adds	r3, #77	@ 0x4d
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2b07      	cmp	r3, #7
 8003242:	d00b      	beq.n	800325c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003244:	78fa      	ldrb	r2, [r7, #3]
 8003246:	6879      	ldr	r1, [r7, #4]
 8003248:	4613      	mov	r3, r2
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	1a9b      	subs	r3, r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	440b      	add	r3, r1
 8003252:	334d      	adds	r3, #77	@ 0x4d
 8003254:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003256:	2b09      	cmp	r3, #9
 8003258:	f040 80a6 	bne.w	80033a8 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800325c:	78fa      	ldrb	r2, [r7, #3]
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	4613      	mov	r3, r2
 8003262:	011b      	lsls	r3, r3, #4
 8003264:	1a9b      	subs	r3, r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	440b      	add	r3, r1
 800326a:	334d      	adds	r3, #77	@ 0x4d
 800326c:	2202      	movs	r2, #2
 800326e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003270:	78fa      	ldrb	r2, [r7, #3]
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	4613      	mov	r3, r2
 8003276:	011b      	lsls	r3, r3, #4
 8003278:	1a9b      	subs	r3, r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	440b      	add	r3, r1
 800327e:	3344      	adds	r3, #68	@ 0x44
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	1c59      	adds	r1, r3, #1
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	4613      	mov	r3, r2
 8003288:	011b      	lsls	r3, r3, #4
 800328a:	1a9b      	subs	r3, r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4403      	add	r3, r0
 8003290:	3344      	adds	r3, #68	@ 0x44
 8003292:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003294:	78fa      	ldrb	r2, [r7, #3]
 8003296:	6879      	ldr	r1, [r7, #4]
 8003298:	4613      	mov	r3, r2
 800329a:	011b      	lsls	r3, r3, #4
 800329c:	1a9b      	subs	r3, r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	440b      	add	r3, r1
 80032a2:	3344      	adds	r3, #68	@ 0x44
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d943      	bls.n	8003332 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80032aa:	78fa      	ldrb	r2, [r7, #3]
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	4613      	mov	r3, r2
 80032b0:	011b      	lsls	r3, r3, #4
 80032b2:	1a9b      	subs	r3, r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	440b      	add	r3, r1
 80032b8:	3344      	adds	r3, #68	@ 0x44
 80032ba:	2200      	movs	r2, #0
 80032bc:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80032be:	78fa      	ldrb	r2, [r7, #3]
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	4613      	mov	r3, r2
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	1a9b      	subs	r3, r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	440b      	add	r3, r1
 80032cc:	331a      	adds	r3, #26
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d123      	bne.n	800331c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80032d4:	78fa      	ldrb	r2, [r7, #3]
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	4613      	mov	r3, r2
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	1a9b      	subs	r3, r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	440b      	add	r3, r1
 80032e2:	331b      	adds	r3, #27
 80032e4:	2200      	movs	r2, #0
 80032e6:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80032e8:	78fa      	ldrb	r2, [r7, #3]
 80032ea:	6879      	ldr	r1, [r7, #4]
 80032ec:	4613      	mov	r3, r2
 80032ee:	011b      	lsls	r3, r3, #4
 80032f0:	1a9b      	subs	r3, r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	440b      	add	r3, r1
 80032f6:	331c      	adds	r3, #28
 80032f8:	2200      	movs	r2, #0
 80032fa:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80032fc:	78fb      	ldrb	r3, [r7, #3]
 80032fe:	015a      	lsls	r2, r3, #5
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	4413      	add	r3, r2
 8003304:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	78fa      	ldrb	r2, [r7, #3]
 800330c:	0151      	lsls	r1, r2, #5
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	440a      	add	r2, r1
 8003312:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003316:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800331a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800331c:	78fa      	ldrb	r2, [r7, #3]
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	4613      	mov	r3, r2
 8003322:	011b      	lsls	r3, r3, #4
 8003324:	1a9b      	subs	r3, r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	334c      	adds	r3, #76	@ 0x4c
 800332c:	2204      	movs	r2, #4
 800332e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003330:	e229      	b.n	8003786 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003332:	78fa      	ldrb	r2, [r7, #3]
 8003334:	6879      	ldr	r1, [r7, #4]
 8003336:	4613      	mov	r3, r2
 8003338:	011b      	lsls	r3, r3, #4
 800333a:	1a9b      	subs	r3, r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	440b      	add	r3, r1
 8003340:	334c      	adds	r3, #76	@ 0x4c
 8003342:	2202      	movs	r2, #2
 8003344:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003346:	78fa      	ldrb	r2, [r7, #3]
 8003348:	6879      	ldr	r1, [r7, #4]
 800334a:	4613      	mov	r3, r2
 800334c:	011b      	lsls	r3, r3, #4
 800334e:	1a9b      	subs	r3, r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	440b      	add	r3, r1
 8003354:	3326      	adds	r3, #38	@ 0x26
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00b      	beq.n	8003374 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800335c:	78fa      	ldrb	r2, [r7, #3]
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	4613      	mov	r3, r2
 8003362:	011b      	lsls	r3, r3, #4
 8003364:	1a9b      	subs	r3, r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	3326      	adds	r3, #38	@ 0x26
 800336c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800336e:	2b02      	cmp	r3, #2
 8003370:	f040 8209 	bne.w	8003786 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003374:	78fb      	ldrb	r3, [r7, #3]
 8003376:	015a      	lsls	r2, r3, #5
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	4413      	add	r3, r2
 800337c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800338a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003392:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003394:	78fb      	ldrb	r3, [r7, #3]
 8003396:	015a      	lsls	r2, r3, #5
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	4413      	add	r3, r2
 800339c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033a0:	461a      	mov	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033a6:	e1ee      	b.n	8003786 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80033a8:	78fa      	ldrb	r2, [r7, #3]
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	4613      	mov	r3, r2
 80033ae:	011b      	lsls	r3, r3, #4
 80033b0:	1a9b      	subs	r3, r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	440b      	add	r3, r1
 80033b6:	334d      	adds	r3, #77	@ 0x4d
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	2b05      	cmp	r3, #5
 80033bc:	f040 80c8 	bne.w	8003550 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033c0:	78fa      	ldrb	r2, [r7, #3]
 80033c2:	6879      	ldr	r1, [r7, #4]
 80033c4:	4613      	mov	r3, r2
 80033c6:	011b      	lsls	r3, r3, #4
 80033c8:	1a9b      	subs	r3, r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	440b      	add	r3, r1
 80033ce:	334d      	adds	r3, #77	@ 0x4d
 80033d0:	2202      	movs	r2, #2
 80033d2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80033d4:	78fa      	ldrb	r2, [r7, #3]
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	4613      	mov	r3, r2
 80033da:	011b      	lsls	r3, r3, #4
 80033dc:	1a9b      	subs	r3, r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	440b      	add	r3, r1
 80033e2:	331b      	adds	r3, #27
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	f040 81ce 	bne.w	8003788 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80033ec:	78fa      	ldrb	r2, [r7, #3]
 80033ee:	6879      	ldr	r1, [r7, #4]
 80033f0:	4613      	mov	r3, r2
 80033f2:	011b      	lsls	r3, r3, #4
 80033f4:	1a9b      	subs	r3, r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	3326      	adds	r3, #38	@ 0x26
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	2b03      	cmp	r3, #3
 8003400:	d16b      	bne.n	80034da <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003402:	78fa      	ldrb	r2, [r7, #3]
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	4613      	mov	r3, r2
 8003408:	011b      	lsls	r3, r3, #4
 800340a:	1a9b      	subs	r3, r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	440b      	add	r3, r1
 8003410:	3348      	adds	r3, #72	@ 0x48
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	1c59      	adds	r1, r3, #1
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	4613      	mov	r3, r2
 800341a:	011b      	lsls	r3, r3, #4
 800341c:	1a9b      	subs	r3, r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4403      	add	r3, r0
 8003422:	3348      	adds	r3, #72	@ 0x48
 8003424:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003426:	78fa      	ldrb	r2, [r7, #3]
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	4613      	mov	r3, r2
 800342c:	011b      	lsls	r3, r3, #4
 800342e:	1a9b      	subs	r3, r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	440b      	add	r3, r1
 8003434:	3348      	adds	r3, #72	@ 0x48
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2b02      	cmp	r3, #2
 800343a:	d943      	bls.n	80034c4 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800343c:	78fa      	ldrb	r2, [r7, #3]
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	4613      	mov	r3, r2
 8003442:	011b      	lsls	r3, r3, #4
 8003444:	1a9b      	subs	r3, r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	440b      	add	r3, r1
 800344a:	3348      	adds	r3, #72	@ 0x48
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003450:	78fa      	ldrb	r2, [r7, #3]
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	4613      	mov	r3, r2
 8003456:	011b      	lsls	r3, r3, #4
 8003458:	1a9b      	subs	r3, r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	331b      	adds	r3, #27
 8003460:	2200      	movs	r2, #0
 8003462:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003464:	78fa      	ldrb	r2, [r7, #3]
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	4613      	mov	r3, r2
 800346a:	011b      	lsls	r3, r3, #4
 800346c:	1a9b      	subs	r3, r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	3344      	adds	r3, #68	@ 0x44
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2b02      	cmp	r3, #2
 8003478:	d809      	bhi.n	800348e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800347a:	78fa      	ldrb	r2, [r7, #3]
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	4613      	mov	r3, r2
 8003480:	011b      	lsls	r3, r3, #4
 8003482:	1a9b      	subs	r3, r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	440b      	add	r3, r1
 8003488:	331c      	adds	r3, #28
 800348a:	2201      	movs	r2, #1
 800348c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800348e:	78fb      	ldrb	r3, [r7, #3]
 8003490:	015a      	lsls	r2, r3, #5
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	4413      	add	r3, r2
 8003496:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	78fa      	ldrb	r2, [r7, #3]
 800349e:	0151      	lsls	r1, r2, #5
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	440a      	add	r2, r1
 80034a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80034a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034ac:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80034ae:	78fa      	ldrb	r2, [r7, #3]
 80034b0:	6879      	ldr	r1, [r7, #4]
 80034b2:	4613      	mov	r3, r2
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	1a9b      	subs	r3, r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	440b      	add	r3, r1
 80034bc:	334c      	adds	r3, #76	@ 0x4c
 80034be:	2204      	movs	r2, #4
 80034c0:	701a      	strb	r2, [r3, #0]
 80034c2:	e014      	b.n	80034ee <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80034c4:	78fa      	ldrb	r2, [r7, #3]
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	4613      	mov	r3, r2
 80034ca:	011b      	lsls	r3, r3, #4
 80034cc:	1a9b      	subs	r3, r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	440b      	add	r3, r1
 80034d2:	334c      	adds	r3, #76	@ 0x4c
 80034d4:	2202      	movs	r2, #2
 80034d6:	701a      	strb	r2, [r3, #0]
 80034d8:	e009      	b.n	80034ee <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80034da:	78fa      	ldrb	r2, [r7, #3]
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	4613      	mov	r3, r2
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	1a9b      	subs	r3, r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	440b      	add	r3, r1
 80034e8:	334c      	adds	r3, #76	@ 0x4c
 80034ea:	2202      	movs	r2, #2
 80034ec:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80034ee:	78fa      	ldrb	r2, [r7, #3]
 80034f0:	6879      	ldr	r1, [r7, #4]
 80034f2:	4613      	mov	r3, r2
 80034f4:	011b      	lsls	r3, r3, #4
 80034f6:	1a9b      	subs	r3, r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	440b      	add	r3, r1
 80034fc:	3326      	adds	r3, #38	@ 0x26
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00b      	beq.n	800351c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003504:	78fa      	ldrb	r2, [r7, #3]
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	4613      	mov	r3, r2
 800350a:	011b      	lsls	r3, r3, #4
 800350c:	1a9b      	subs	r3, r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	3326      	adds	r3, #38	@ 0x26
 8003514:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003516:	2b02      	cmp	r3, #2
 8003518:	f040 8136 	bne.w	8003788 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800351c:	78fb      	ldrb	r3, [r7, #3]
 800351e:	015a      	lsls	r2, r3, #5
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	4413      	add	r3, r2
 8003524:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003532:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800353a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800353c:	78fb      	ldrb	r3, [r7, #3]
 800353e:	015a      	lsls	r2, r3, #5
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	4413      	add	r3, r2
 8003544:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003548:	461a      	mov	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6013      	str	r3, [r2, #0]
 800354e:	e11b      	b.n	8003788 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003550:	78fa      	ldrb	r2, [r7, #3]
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	4613      	mov	r3, r2
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	1a9b      	subs	r3, r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	440b      	add	r3, r1
 800355e:	334d      	adds	r3, #77	@ 0x4d
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	2b03      	cmp	r3, #3
 8003564:	f040 8081 	bne.w	800366a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003568:	78fa      	ldrb	r2, [r7, #3]
 800356a:	6879      	ldr	r1, [r7, #4]
 800356c:	4613      	mov	r3, r2
 800356e:	011b      	lsls	r3, r3, #4
 8003570:	1a9b      	subs	r3, r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	334d      	adds	r3, #77	@ 0x4d
 8003578:	2202      	movs	r2, #2
 800357a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800357c:	78fa      	ldrb	r2, [r7, #3]
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	4613      	mov	r3, r2
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	1a9b      	subs	r3, r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	331b      	adds	r3, #27
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	2b01      	cmp	r3, #1
 8003590:	f040 80fa 	bne.w	8003788 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003594:	78fa      	ldrb	r2, [r7, #3]
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	4613      	mov	r3, r2
 800359a:	011b      	lsls	r3, r3, #4
 800359c:	1a9b      	subs	r3, r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	440b      	add	r3, r1
 80035a2:	334c      	adds	r3, #76	@ 0x4c
 80035a4:	2202      	movs	r2, #2
 80035a6:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80035a8:	78fb      	ldrb	r3, [r7, #3]
 80035aa:	015a      	lsls	r2, r3, #5
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	4413      	add	r3, r2
 80035b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	78fa      	ldrb	r2, [r7, #3]
 80035b8:	0151      	lsls	r1, r2, #5
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	440a      	add	r2, r1
 80035be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80035c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035c6:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80035c8:	78fb      	ldrb	r3, [r7, #3]
 80035ca:	015a      	lsls	r2, r3, #5
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	4413      	add	r3, r2
 80035d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	78fa      	ldrb	r2, [r7, #3]
 80035d8:	0151      	lsls	r1, r2, #5
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	440a      	add	r2, r1
 80035de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80035e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035e6:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80035e8:	78fb      	ldrb	r3, [r7, #3]
 80035ea:	015a      	lsls	r2, r3, #5
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	4413      	add	r3, r2
 80035f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	78fa      	ldrb	r2, [r7, #3]
 80035f8:	0151      	lsls	r1, r2, #5
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	440a      	add	r2, r1
 80035fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003602:	f023 0320 	bic.w	r3, r3, #32
 8003606:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003608:	78fa      	ldrb	r2, [r7, #3]
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	4613      	mov	r3, r2
 800360e:	011b      	lsls	r3, r3, #4
 8003610:	1a9b      	subs	r3, r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	440b      	add	r3, r1
 8003616:	3326      	adds	r3, #38	@ 0x26
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00b      	beq.n	8003636 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800361e:	78fa      	ldrb	r2, [r7, #3]
 8003620:	6879      	ldr	r1, [r7, #4]
 8003622:	4613      	mov	r3, r2
 8003624:	011b      	lsls	r3, r3, #4
 8003626:	1a9b      	subs	r3, r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	440b      	add	r3, r1
 800362c:	3326      	adds	r3, #38	@ 0x26
 800362e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003630:	2b02      	cmp	r3, #2
 8003632:	f040 80a9 	bne.w	8003788 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003636:	78fb      	ldrb	r3, [r7, #3]
 8003638:	015a      	lsls	r2, r3, #5
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	4413      	add	r3, r2
 800363e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800364c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003654:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003656:	78fb      	ldrb	r3, [r7, #3]
 8003658:	015a      	lsls	r2, r3, #5
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	4413      	add	r3, r2
 800365e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003662:	461a      	mov	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6013      	str	r3, [r2, #0]
 8003668:	e08e      	b.n	8003788 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800366a:	78fa      	ldrb	r2, [r7, #3]
 800366c:	6879      	ldr	r1, [r7, #4]
 800366e:	4613      	mov	r3, r2
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	1a9b      	subs	r3, r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	440b      	add	r3, r1
 8003678:	334d      	adds	r3, #77	@ 0x4d
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	2b04      	cmp	r3, #4
 800367e:	d143      	bne.n	8003708 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003680:	78fa      	ldrb	r2, [r7, #3]
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	4613      	mov	r3, r2
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	1a9b      	subs	r3, r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	440b      	add	r3, r1
 800368e:	334d      	adds	r3, #77	@ 0x4d
 8003690:	2202      	movs	r2, #2
 8003692:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003694:	78fa      	ldrb	r2, [r7, #3]
 8003696:	6879      	ldr	r1, [r7, #4]
 8003698:	4613      	mov	r3, r2
 800369a:	011b      	lsls	r3, r3, #4
 800369c:	1a9b      	subs	r3, r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	440b      	add	r3, r1
 80036a2:	334c      	adds	r3, #76	@ 0x4c
 80036a4:	2202      	movs	r2, #2
 80036a6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80036a8:	78fa      	ldrb	r2, [r7, #3]
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	4613      	mov	r3, r2
 80036ae:	011b      	lsls	r3, r3, #4
 80036b0:	1a9b      	subs	r3, r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	3326      	adds	r3, #38	@ 0x26
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00a      	beq.n	80036d4 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80036be:	78fa      	ldrb	r2, [r7, #3]
 80036c0:	6879      	ldr	r1, [r7, #4]
 80036c2:	4613      	mov	r3, r2
 80036c4:	011b      	lsls	r3, r3, #4
 80036c6:	1a9b      	subs	r3, r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	440b      	add	r3, r1
 80036cc:	3326      	adds	r3, #38	@ 0x26
 80036ce:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d159      	bne.n	8003788 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80036d4:	78fb      	ldrb	r3, [r7, #3]
 80036d6:	015a      	lsls	r2, r3, #5
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	4413      	add	r3, r2
 80036dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80036ea:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80036f2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80036f4:	78fb      	ldrb	r3, [r7, #3]
 80036f6:	015a      	lsls	r2, r3, #5
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	4413      	add	r3, r2
 80036fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003700:	461a      	mov	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	e03f      	b.n	8003788 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003708:	78fa      	ldrb	r2, [r7, #3]
 800370a:	6879      	ldr	r1, [r7, #4]
 800370c:	4613      	mov	r3, r2
 800370e:	011b      	lsls	r3, r3, #4
 8003710:	1a9b      	subs	r3, r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	440b      	add	r3, r1
 8003716:	334d      	adds	r3, #77	@ 0x4d
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	2b08      	cmp	r3, #8
 800371c:	d126      	bne.n	800376c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800371e:	78fa      	ldrb	r2, [r7, #3]
 8003720:	6879      	ldr	r1, [r7, #4]
 8003722:	4613      	mov	r3, r2
 8003724:	011b      	lsls	r3, r3, #4
 8003726:	1a9b      	subs	r3, r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	440b      	add	r3, r1
 800372c:	334d      	adds	r3, #77	@ 0x4d
 800372e:	2202      	movs	r2, #2
 8003730:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003732:	78fa      	ldrb	r2, [r7, #3]
 8003734:	6879      	ldr	r1, [r7, #4]
 8003736:	4613      	mov	r3, r2
 8003738:	011b      	lsls	r3, r3, #4
 800373a:	1a9b      	subs	r3, r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	440b      	add	r3, r1
 8003740:	3344      	adds	r3, #68	@ 0x44
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	1c59      	adds	r1, r3, #1
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	4613      	mov	r3, r2
 800374a:	011b      	lsls	r3, r3, #4
 800374c:	1a9b      	subs	r3, r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4403      	add	r3, r0
 8003752:	3344      	adds	r3, #68	@ 0x44
 8003754:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003756:	78fa      	ldrb	r2, [r7, #3]
 8003758:	6879      	ldr	r1, [r7, #4]
 800375a:	4613      	mov	r3, r2
 800375c:	011b      	lsls	r3, r3, #4
 800375e:	1a9b      	subs	r3, r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	440b      	add	r3, r1
 8003764:	334c      	adds	r3, #76	@ 0x4c
 8003766:	2204      	movs	r2, #4
 8003768:	701a      	strb	r2, [r3, #0]
 800376a:	e00d      	b.n	8003788 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800376c:	78fa      	ldrb	r2, [r7, #3]
 800376e:	6879      	ldr	r1, [r7, #4]
 8003770:	4613      	mov	r3, r2
 8003772:	011b      	lsls	r3, r3, #4
 8003774:	1a9b      	subs	r3, r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	440b      	add	r3, r1
 800377a:	334d      	adds	r3, #77	@ 0x4d
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b02      	cmp	r3, #2
 8003780:	f000 8100 	beq.w	8003984 <HCD_HC_IN_IRQHandler+0xcca>
 8003784:	e000      	b.n	8003788 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003786:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003788:	78fa      	ldrb	r2, [r7, #3]
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	4613      	mov	r3, r2
 800378e:	011b      	lsls	r3, r3, #4
 8003790:	1a9b      	subs	r3, r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	440b      	add	r3, r1
 8003796:	334c      	adds	r3, #76	@ 0x4c
 8003798:	781a      	ldrb	r2, [r3, #0]
 800379a:	78fb      	ldrb	r3, [r7, #3]
 800379c:	4619      	mov	r1, r3
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f006 fe4e 	bl	800a440 <HAL_HCD_HC_NotifyURBChange_Callback>
 80037a4:	e0ef      	b.n	8003986 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	78fa      	ldrb	r2, [r7, #3]
 80037ac:	4611      	mov	r1, r2
 80037ae:	4618      	mov	r0, r3
 80037b0:	f003 fd49 	bl	8007246 <USB_ReadChInterrupts>
 80037b4:	4603      	mov	r3, r0
 80037b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037ba:	2b40      	cmp	r3, #64	@ 0x40
 80037bc:	d12f      	bne.n	800381e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80037be:	78fb      	ldrb	r3, [r7, #3]
 80037c0:	015a      	lsls	r2, r3, #5
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	4413      	add	r3, r2
 80037c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037ca:	461a      	mov	r2, r3
 80037cc:	2340      	movs	r3, #64	@ 0x40
 80037ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80037d0:	78fa      	ldrb	r2, [r7, #3]
 80037d2:	6879      	ldr	r1, [r7, #4]
 80037d4:	4613      	mov	r3, r2
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	1a9b      	subs	r3, r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	440b      	add	r3, r1
 80037de:	334d      	adds	r3, #77	@ 0x4d
 80037e0:	2205      	movs	r2, #5
 80037e2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80037e4:	78fa      	ldrb	r2, [r7, #3]
 80037e6:	6879      	ldr	r1, [r7, #4]
 80037e8:	4613      	mov	r3, r2
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	1a9b      	subs	r3, r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	440b      	add	r3, r1
 80037f2:	331a      	adds	r3, #26
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d109      	bne.n	800380e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80037fa:	78fa      	ldrb	r2, [r7, #3]
 80037fc:	6879      	ldr	r1, [r7, #4]
 80037fe:	4613      	mov	r3, r2
 8003800:	011b      	lsls	r3, r3, #4
 8003802:	1a9b      	subs	r3, r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	440b      	add	r3, r1
 8003808:	3344      	adds	r3, #68	@ 0x44
 800380a:	2200      	movs	r2, #0
 800380c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	78fa      	ldrb	r2, [r7, #3]
 8003814:	4611      	mov	r1, r2
 8003816:	4618      	mov	r0, r3
 8003818:	f004 fab9 	bl	8007d8e <USB_HC_Halt>
 800381c:	e0b3      	b.n	8003986 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	78fa      	ldrb	r2, [r7, #3]
 8003824:	4611      	mov	r1, r2
 8003826:	4618      	mov	r0, r3
 8003828:	f003 fd0d 	bl	8007246 <USB_ReadChInterrupts>
 800382c:	4603      	mov	r3, r0
 800382e:	f003 0310 	and.w	r3, r3, #16
 8003832:	2b10      	cmp	r3, #16
 8003834:	f040 80a7 	bne.w	8003986 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003838:	78fa      	ldrb	r2, [r7, #3]
 800383a:	6879      	ldr	r1, [r7, #4]
 800383c:	4613      	mov	r3, r2
 800383e:	011b      	lsls	r3, r3, #4
 8003840:	1a9b      	subs	r3, r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	440b      	add	r3, r1
 8003846:	3326      	adds	r3, #38	@ 0x26
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	2b03      	cmp	r3, #3
 800384c:	d11b      	bne.n	8003886 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800384e:	78fa      	ldrb	r2, [r7, #3]
 8003850:	6879      	ldr	r1, [r7, #4]
 8003852:	4613      	mov	r3, r2
 8003854:	011b      	lsls	r3, r3, #4
 8003856:	1a9b      	subs	r3, r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	440b      	add	r3, r1
 800385c:	3344      	adds	r3, #68	@ 0x44
 800385e:	2200      	movs	r2, #0
 8003860:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003862:	78fa      	ldrb	r2, [r7, #3]
 8003864:	6879      	ldr	r1, [r7, #4]
 8003866:	4613      	mov	r3, r2
 8003868:	011b      	lsls	r3, r3, #4
 800386a:	1a9b      	subs	r3, r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	440b      	add	r3, r1
 8003870:	334d      	adds	r3, #77	@ 0x4d
 8003872:	2204      	movs	r2, #4
 8003874:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	78fa      	ldrb	r2, [r7, #3]
 800387c:	4611      	mov	r1, r2
 800387e:	4618      	mov	r0, r3
 8003880:	f004 fa85 	bl	8007d8e <USB_HC_Halt>
 8003884:	e03f      	b.n	8003906 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003886:	78fa      	ldrb	r2, [r7, #3]
 8003888:	6879      	ldr	r1, [r7, #4]
 800388a:	4613      	mov	r3, r2
 800388c:	011b      	lsls	r3, r3, #4
 800388e:	1a9b      	subs	r3, r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	440b      	add	r3, r1
 8003894:	3326      	adds	r3, #38	@ 0x26
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00a      	beq.n	80038b2 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800389c:	78fa      	ldrb	r2, [r7, #3]
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	4613      	mov	r3, r2
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	1a9b      	subs	r3, r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	3326      	adds	r3, #38	@ 0x26
 80038ac:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d129      	bne.n	8003906 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80038b2:	78fa      	ldrb	r2, [r7, #3]
 80038b4:	6879      	ldr	r1, [r7, #4]
 80038b6:	4613      	mov	r3, r2
 80038b8:	011b      	lsls	r3, r3, #4
 80038ba:	1a9b      	subs	r3, r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	440b      	add	r3, r1
 80038c0:	3344      	adds	r3, #68	@ 0x44
 80038c2:	2200      	movs	r2, #0
 80038c4:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	799b      	ldrb	r3, [r3, #6]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00a      	beq.n	80038e4 <HCD_HC_IN_IRQHandler+0xc2a>
 80038ce:	78fa      	ldrb	r2, [r7, #3]
 80038d0:	6879      	ldr	r1, [r7, #4]
 80038d2:	4613      	mov	r3, r2
 80038d4:	011b      	lsls	r3, r3, #4
 80038d6:	1a9b      	subs	r3, r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	440b      	add	r3, r1
 80038dc:	331b      	adds	r3, #27
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d110      	bne.n	8003906 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80038e4:	78fa      	ldrb	r2, [r7, #3]
 80038e6:	6879      	ldr	r1, [r7, #4]
 80038e8:	4613      	mov	r3, r2
 80038ea:	011b      	lsls	r3, r3, #4
 80038ec:	1a9b      	subs	r3, r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	440b      	add	r3, r1
 80038f2:	334d      	adds	r3, #77	@ 0x4d
 80038f4:	2204      	movs	r2, #4
 80038f6:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	78fa      	ldrb	r2, [r7, #3]
 80038fe:	4611      	mov	r1, r2
 8003900:	4618      	mov	r0, r3
 8003902:	f004 fa44 	bl	8007d8e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003906:	78fa      	ldrb	r2, [r7, #3]
 8003908:	6879      	ldr	r1, [r7, #4]
 800390a:	4613      	mov	r3, r2
 800390c:	011b      	lsls	r3, r3, #4
 800390e:	1a9b      	subs	r3, r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	440b      	add	r3, r1
 8003914:	331b      	adds	r3, #27
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d129      	bne.n	8003970 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800391c:	78fa      	ldrb	r2, [r7, #3]
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	4613      	mov	r3, r2
 8003922:	011b      	lsls	r3, r3, #4
 8003924:	1a9b      	subs	r3, r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	331b      	adds	r3, #27
 800392c:	2200      	movs	r2, #0
 800392e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003930:	78fb      	ldrb	r3, [r7, #3]
 8003932:	015a      	lsls	r2, r3, #5
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	4413      	add	r3, r2
 8003938:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	78fa      	ldrb	r2, [r7, #3]
 8003940:	0151      	lsls	r1, r2, #5
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	440a      	add	r2, r1
 8003946:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800394a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800394e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003950:	78fb      	ldrb	r3, [r7, #3]
 8003952:	015a      	lsls	r2, r3, #5
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	4413      	add	r3, r2
 8003958:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	78fa      	ldrb	r2, [r7, #3]
 8003960:	0151      	lsls	r1, r2, #5
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	440a      	add	r2, r1
 8003966:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800396a:	f043 0320 	orr.w	r3, r3, #32
 800396e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003970:	78fb      	ldrb	r3, [r7, #3]
 8003972:	015a      	lsls	r2, r3, #5
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	4413      	add	r3, r2
 8003978:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800397c:	461a      	mov	r2, r3
 800397e:	2310      	movs	r3, #16
 8003980:	6093      	str	r3, [r2, #8]
 8003982:	e000      	b.n	8003986 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003984:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003986:	3718      	adds	r7, #24
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	460b      	mov	r3, r1
 8003996:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	78fa      	ldrb	r2, [r7, #3]
 80039a8:	4611      	mov	r1, r2
 80039aa:	4618      	mov	r0, r3
 80039ac:	f003 fc4b 	bl	8007246 <USB_ReadChInterrupts>
 80039b0:	4603      	mov	r3, r0
 80039b2:	f003 0304 	and.w	r3, r3, #4
 80039b6:	2b04      	cmp	r3, #4
 80039b8:	d11b      	bne.n	80039f2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80039ba:	78fb      	ldrb	r3, [r7, #3]
 80039bc:	015a      	lsls	r2, r3, #5
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	4413      	add	r3, r2
 80039c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039c6:	461a      	mov	r2, r3
 80039c8:	2304      	movs	r3, #4
 80039ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80039cc:	78fa      	ldrb	r2, [r7, #3]
 80039ce:	6879      	ldr	r1, [r7, #4]
 80039d0:	4613      	mov	r3, r2
 80039d2:	011b      	lsls	r3, r3, #4
 80039d4:	1a9b      	subs	r3, r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	440b      	add	r3, r1
 80039da:	334d      	adds	r3, #77	@ 0x4d
 80039dc:	2207      	movs	r2, #7
 80039de:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	78fa      	ldrb	r2, [r7, #3]
 80039e6:	4611      	mov	r1, r2
 80039e8:	4618      	mov	r0, r3
 80039ea:	f004 f9d0 	bl	8007d8e <USB_HC_Halt>
 80039ee:	f000 bc89 	b.w	8004304 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	78fa      	ldrb	r2, [r7, #3]
 80039f8:	4611      	mov	r1, r2
 80039fa:	4618      	mov	r0, r3
 80039fc:	f003 fc23 	bl	8007246 <USB_ReadChInterrupts>
 8003a00:	4603      	mov	r3, r0
 8003a02:	f003 0320 	and.w	r3, r3, #32
 8003a06:	2b20      	cmp	r3, #32
 8003a08:	f040 8082 	bne.w	8003b10 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003a0c:	78fb      	ldrb	r3, [r7, #3]
 8003a0e:	015a      	lsls	r2, r3, #5
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	4413      	add	r3, r2
 8003a14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a18:	461a      	mov	r2, r3
 8003a1a:	2320      	movs	r3, #32
 8003a1c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003a1e:	78fa      	ldrb	r2, [r7, #3]
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	4613      	mov	r3, r2
 8003a24:	011b      	lsls	r3, r3, #4
 8003a26:	1a9b      	subs	r3, r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	440b      	add	r3, r1
 8003a2c:	3319      	adds	r3, #25
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d124      	bne.n	8003a7e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003a34:	78fa      	ldrb	r2, [r7, #3]
 8003a36:	6879      	ldr	r1, [r7, #4]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	011b      	lsls	r3, r3, #4
 8003a3c:	1a9b      	subs	r3, r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	3319      	adds	r3, #25
 8003a44:	2200      	movs	r2, #0
 8003a46:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003a48:	78fa      	ldrb	r2, [r7, #3]
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	011b      	lsls	r3, r3, #4
 8003a50:	1a9b      	subs	r3, r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	440b      	add	r3, r1
 8003a56:	334c      	adds	r3, #76	@ 0x4c
 8003a58:	2202      	movs	r2, #2
 8003a5a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003a5c:	78fa      	ldrb	r2, [r7, #3]
 8003a5e:	6879      	ldr	r1, [r7, #4]
 8003a60:	4613      	mov	r3, r2
 8003a62:	011b      	lsls	r3, r3, #4
 8003a64:	1a9b      	subs	r3, r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	440b      	add	r3, r1
 8003a6a:	334d      	adds	r3, #77	@ 0x4d
 8003a6c:	2203      	movs	r2, #3
 8003a6e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	78fa      	ldrb	r2, [r7, #3]
 8003a76:	4611      	mov	r1, r2
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f004 f988 	bl	8007d8e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003a7e:	78fa      	ldrb	r2, [r7, #3]
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	4613      	mov	r3, r2
 8003a84:	011b      	lsls	r3, r3, #4
 8003a86:	1a9b      	subs	r3, r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	440b      	add	r3, r1
 8003a8c:	331a      	adds	r3, #26
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	f040 8437 	bne.w	8004304 <HCD_HC_OUT_IRQHandler+0x978>
 8003a96:	78fa      	ldrb	r2, [r7, #3]
 8003a98:	6879      	ldr	r1, [r7, #4]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	011b      	lsls	r3, r3, #4
 8003a9e:	1a9b      	subs	r3, r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	440b      	add	r3, r1
 8003aa4:	331b      	adds	r3, #27
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f040 842b 	bne.w	8004304 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003aae:	78fa      	ldrb	r2, [r7, #3]
 8003ab0:	6879      	ldr	r1, [r7, #4]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	011b      	lsls	r3, r3, #4
 8003ab6:	1a9b      	subs	r3, r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	440b      	add	r3, r1
 8003abc:	3326      	adds	r3, #38	@ 0x26
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d009      	beq.n	8003ad8 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003ac4:	78fa      	ldrb	r2, [r7, #3]
 8003ac6:	6879      	ldr	r1, [r7, #4]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	011b      	lsls	r3, r3, #4
 8003acc:	1a9b      	subs	r3, r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	440b      	add	r3, r1
 8003ad2:	331b      	adds	r3, #27
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003ad8:	78fa      	ldrb	r2, [r7, #3]
 8003ada:	6879      	ldr	r1, [r7, #4]
 8003adc:	4613      	mov	r3, r2
 8003ade:	011b      	lsls	r3, r3, #4
 8003ae0:	1a9b      	subs	r3, r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	440b      	add	r3, r1
 8003ae6:	334d      	adds	r3, #77	@ 0x4d
 8003ae8:	2203      	movs	r2, #3
 8003aea:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	78fa      	ldrb	r2, [r7, #3]
 8003af2:	4611      	mov	r1, r2
 8003af4:	4618      	mov	r0, r3
 8003af6:	f004 f94a 	bl	8007d8e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003afa:	78fa      	ldrb	r2, [r7, #3]
 8003afc:	6879      	ldr	r1, [r7, #4]
 8003afe:	4613      	mov	r3, r2
 8003b00:	011b      	lsls	r3, r3, #4
 8003b02:	1a9b      	subs	r3, r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	440b      	add	r3, r1
 8003b08:	3344      	adds	r3, #68	@ 0x44
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	601a      	str	r2, [r3, #0]
 8003b0e:	e3f9      	b.n	8004304 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	78fa      	ldrb	r2, [r7, #3]
 8003b16:	4611      	mov	r1, r2
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f003 fb94 	bl	8007246 <USB_ReadChInterrupts>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b28:	d111      	bne.n	8003b4e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003b2a:	78fb      	ldrb	r3, [r7, #3]
 8003b2c:	015a      	lsls	r2, r3, #5
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	4413      	add	r3, r2
 8003b32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b36:	461a      	mov	r2, r3
 8003b38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b3c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	78fa      	ldrb	r2, [r7, #3]
 8003b44:	4611      	mov	r1, r2
 8003b46:	4618      	mov	r0, r3
 8003b48:	f004 f921 	bl	8007d8e <USB_HC_Halt>
 8003b4c:	e3da      	b.n	8004304 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	78fa      	ldrb	r2, [r7, #3]
 8003b54:	4611      	mov	r1, r2
 8003b56:	4618      	mov	r0, r3
 8003b58:	f003 fb75 	bl	8007246 <USB_ReadChInterrupts>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d168      	bne.n	8003c38 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003b66:	78fa      	ldrb	r2, [r7, #3]
 8003b68:	6879      	ldr	r1, [r7, #4]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	011b      	lsls	r3, r3, #4
 8003b6e:	1a9b      	subs	r3, r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	440b      	add	r3, r1
 8003b74:	3344      	adds	r3, #68	@ 0x44
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	78fa      	ldrb	r2, [r7, #3]
 8003b80:	4611      	mov	r1, r2
 8003b82:	4618      	mov	r0, r3
 8003b84:	f003 fb5f 	bl	8007246 <USB_ReadChInterrupts>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b8e:	2b40      	cmp	r3, #64	@ 0x40
 8003b90:	d112      	bne.n	8003bb8 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003b92:	78fa      	ldrb	r2, [r7, #3]
 8003b94:	6879      	ldr	r1, [r7, #4]
 8003b96:	4613      	mov	r3, r2
 8003b98:	011b      	lsls	r3, r3, #4
 8003b9a:	1a9b      	subs	r3, r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	440b      	add	r3, r1
 8003ba0:	3319      	adds	r3, #25
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003ba6:	78fb      	ldrb	r3, [r7, #3]
 8003ba8:	015a      	lsls	r2, r3, #5
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	4413      	add	r3, r2
 8003bae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	2340      	movs	r3, #64	@ 0x40
 8003bb6:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003bb8:	78fa      	ldrb	r2, [r7, #3]
 8003bba:	6879      	ldr	r1, [r7, #4]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	1a9b      	subs	r3, r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	440b      	add	r3, r1
 8003bc6:	331b      	adds	r3, #27
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d019      	beq.n	8003c02 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003bce:	78fa      	ldrb	r2, [r7, #3]
 8003bd0:	6879      	ldr	r1, [r7, #4]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	011b      	lsls	r3, r3, #4
 8003bd6:	1a9b      	subs	r3, r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	440b      	add	r3, r1
 8003bdc:	331b      	adds	r3, #27
 8003bde:	2200      	movs	r2, #0
 8003be0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003be2:	78fb      	ldrb	r3, [r7, #3]
 8003be4:	015a      	lsls	r2, r3, #5
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	4413      	add	r3, r2
 8003bea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	78fa      	ldrb	r2, [r7, #3]
 8003bf2:	0151      	lsls	r1, r2, #5
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	440a      	add	r2, r1
 8003bf8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003bfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c00:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003c02:	78fb      	ldrb	r3, [r7, #3]
 8003c04:	015a      	lsls	r2, r3, #5
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	4413      	add	r3, r2
 8003c0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c0e:	461a      	mov	r2, r3
 8003c10:	2301      	movs	r3, #1
 8003c12:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003c14:	78fa      	ldrb	r2, [r7, #3]
 8003c16:	6879      	ldr	r1, [r7, #4]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	1a9b      	subs	r3, r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	440b      	add	r3, r1
 8003c22:	334d      	adds	r3, #77	@ 0x4d
 8003c24:	2201      	movs	r2, #1
 8003c26:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	78fa      	ldrb	r2, [r7, #3]
 8003c2e:	4611      	mov	r1, r2
 8003c30:	4618      	mov	r0, r3
 8003c32:	f004 f8ac 	bl	8007d8e <USB_HC_Halt>
 8003c36:	e365      	b.n	8004304 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	78fa      	ldrb	r2, [r7, #3]
 8003c3e:	4611      	mov	r1, r2
 8003c40:	4618      	mov	r0, r3
 8003c42:	f003 fb00 	bl	8007246 <USB_ReadChInterrupts>
 8003c46:	4603      	mov	r3, r0
 8003c48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c4c:	2b40      	cmp	r3, #64	@ 0x40
 8003c4e:	d139      	bne.n	8003cc4 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003c50:	78fa      	ldrb	r2, [r7, #3]
 8003c52:	6879      	ldr	r1, [r7, #4]
 8003c54:	4613      	mov	r3, r2
 8003c56:	011b      	lsls	r3, r3, #4
 8003c58:	1a9b      	subs	r3, r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	334d      	adds	r3, #77	@ 0x4d
 8003c60:	2205      	movs	r2, #5
 8003c62:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003c64:	78fa      	ldrb	r2, [r7, #3]
 8003c66:	6879      	ldr	r1, [r7, #4]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	011b      	lsls	r3, r3, #4
 8003c6c:	1a9b      	subs	r3, r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	440b      	add	r3, r1
 8003c72:	331a      	adds	r3, #26
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d109      	bne.n	8003c8e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003c7a:	78fa      	ldrb	r2, [r7, #3]
 8003c7c:	6879      	ldr	r1, [r7, #4]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	011b      	lsls	r3, r3, #4
 8003c82:	1a9b      	subs	r3, r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	440b      	add	r3, r1
 8003c88:	3319      	adds	r3, #25
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003c8e:	78fa      	ldrb	r2, [r7, #3]
 8003c90:	6879      	ldr	r1, [r7, #4]
 8003c92:	4613      	mov	r3, r2
 8003c94:	011b      	lsls	r3, r3, #4
 8003c96:	1a9b      	subs	r3, r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	440b      	add	r3, r1
 8003c9c:	3344      	adds	r3, #68	@ 0x44
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	78fa      	ldrb	r2, [r7, #3]
 8003ca8:	4611      	mov	r1, r2
 8003caa:	4618      	mov	r0, r3
 8003cac:	f004 f86f 	bl	8007d8e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003cb0:	78fb      	ldrb	r3, [r7, #3]
 8003cb2:	015a      	lsls	r2, r3, #5
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	2340      	movs	r3, #64	@ 0x40
 8003cc0:	6093      	str	r3, [r2, #8]
 8003cc2:	e31f      	b.n	8004304 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	78fa      	ldrb	r2, [r7, #3]
 8003cca:	4611      	mov	r1, r2
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f003 faba 	bl	8007246 <USB_ReadChInterrupts>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	f003 0308 	and.w	r3, r3, #8
 8003cd8:	2b08      	cmp	r3, #8
 8003cda:	d11a      	bne.n	8003d12 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003cdc:	78fb      	ldrb	r3, [r7, #3]
 8003cde:	015a      	lsls	r2, r3, #5
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ce8:	461a      	mov	r2, r3
 8003cea:	2308      	movs	r3, #8
 8003cec:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003cee:	78fa      	ldrb	r2, [r7, #3]
 8003cf0:	6879      	ldr	r1, [r7, #4]
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	011b      	lsls	r3, r3, #4
 8003cf6:	1a9b      	subs	r3, r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	440b      	add	r3, r1
 8003cfc:	334d      	adds	r3, #77	@ 0x4d
 8003cfe:	2206      	movs	r2, #6
 8003d00:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	78fa      	ldrb	r2, [r7, #3]
 8003d08:	4611      	mov	r1, r2
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f004 f83f 	bl	8007d8e <USB_HC_Halt>
 8003d10:	e2f8      	b.n	8004304 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	78fa      	ldrb	r2, [r7, #3]
 8003d18:	4611      	mov	r1, r2
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f003 fa93 	bl	8007246 <USB_ReadChInterrupts>
 8003d20:	4603      	mov	r3, r0
 8003d22:	f003 0310 	and.w	r3, r3, #16
 8003d26:	2b10      	cmp	r3, #16
 8003d28:	d144      	bne.n	8003db4 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003d2a:	78fa      	ldrb	r2, [r7, #3]
 8003d2c:	6879      	ldr	r1, [r7, #4]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	1a9b      	subs	r3, r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	440b      	add	r3, r1
 8003d38:	3344      	adds	r3, #68	@ 0x44
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003d3e:	78fa      	ldrb	r2, [r7, #3]
 8003d40:	6879      	ldr	r1, [r7, #4]
 8003d42:	4613      	mov	r3, r2
 8003d44:	011b      	lsls	r3, r3, #4
 8003d46:	1a9b      	subs	r3, r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	440b      	add	r3, r1
 8003d4c:	334d      	adds	r3, #77	@ 0x4d
 8003d4e:	2204      	movs	r2, #4
 8003d50:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003d52:	78fa      	ldrb	r2, [r7, #3]
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	4613      	mov	r3, r2
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	1a9b      	subs	r3, r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	440b      	add	r3, r1
 8003d60:	3319      	adds	r3, #25
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d114      	bne.n	8003d92 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003d68:	78fa      	ldrb	r2, [r7, #3]
 8003d6a:	6879      	ldr	r1, [r7, #4]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	011b      	lsls	r3, r3, #4
 8003d70:	1a9b      	subs	r3, r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	3318      	adds	r3, #24
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d109      	bne.n	8003d92 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003d7e:	78fa      	ldrb	r2, [r7, #3]
 8003d80:	6879      	ldr	r1, [r7, #4]
 8003d82:	4613      	mov	r3, r2
 8003d84:	011b      	lsls	r3, r3, #4
 8003d86:	1a9b      	subs	r3, r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	440b      	add	r3, r1
 8003d8c:	3319      	adds	r3, #25
 8003d8e:	2201      	movs	r2, #1
 8003d90:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	78fa      	ldrb	r2, [r7, #3]
 8003d98:	4611      	mov	r1, r2
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f003 fff7 	bl	8007d8e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003da0:	78fb      	ldrb	r3, [r7, #3]
 8003da2:	015a      	lsls	r2, r3, #5
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	4413      	add	r3, r2
 8003da8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dac:	461a      	mov	r2, r3
 8003dae:	2310      	movs	r3, #16
 8003db0:	6093      	str	r3, [r2, #8]
 8003db2:	e2a7      	b.n	8004304 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	78fa      	ldrb	r2, [r7, #3]
 8003dba:	4611      	mov	r1, r2
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f003 fa42 	bl	8007246 <USB_ReadChInterrupts>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dc8:	2b80      	cmp	r3, #128	@ 0x80
 8003dca:	f040 8083 	bne.w	8003ed4 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	799b      	ldrb	r3, [r3, #6]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d111      	bne.n	8003dfa <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003dd6:	78fa      	ldrb	r2, [r7, #3]
 8003dd8:	6879      	ldr	r1, [r7, #4]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	011b      	lsls	r3, r3, #4
 8003dde:	1a9b      	subs	r3, r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	440b      	add	r3, r1
 8003de4:	334d      	adds	r3, #77	@ 0x4d
 8003de6:	2207      	movs	r2, #7
 8003de8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	78fa      	ldrb	r2, [r7, #3]
 8003df0:	4611      	mov	r1, r2
 8003df2:	4618      	mov	r0, r3
 8003df4:	f003 ffcb 	bl	8007d8e <USB_HC_Halt>
 8003df8:	e062      	b.n	8003ec0 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003dfa:	78fa      	ldrb	r2, [r7, #3]
 8003dfc:	6879      	ldr	r1, [r7, #4]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	011b      	lsls	r3, r3, #4
 8003e02:	1a9b      	subs	r3, r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	440b      	add	r3, r1
 8003e08:	3344      	adds	r3, #68	@ 0x44
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	1c59      	adds	r1, r3, #1
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	4613      	mov	r3, r2
 8003e12:	011b      	lsls	r3, r3, #4
 8003e14:	1a9b      	subs	r3, r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4403      	add	r3, r0
 8003e1a:	3344      	adds	r3, #68	@ 0x44
 8003e1c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003e1e:	78fa      	ldrb	r2, [r7, #3]
 8003e20:	6879      	ldr	r1, [r7, #4]
 8003e22:	4613      	mov	r3, r2
 8003e24:	011b      	lsls	r3, r3, #4
 8003e26:	1a9b      	subs	r3, r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	440b      	add	r3, r1
 8003e2c:	3344      	adds	r3, #68	@ 0x44
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d922      	bls.n	8003e7a <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003e34:	78fa      	ldrb	r2, [r7, #3]
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	011b      	lsls	r3, r3, #4
 8003e3c:	1a9b      	subs	r3, r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	440b      	add	r3, r1
 8003e42:	3344      	adds	r3, #68	@ 0x44
 8003e44:	2200      	movs	r2, #0
 8003e46:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003e48:	78fa      	ldrb	r2, [r7, #3]
 8003e4a:	6879      	ldr	r1, [r7, #4]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	011b      	lsls	r3, r3, #4
 8003e50:	1a9b      	subs	r3, r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	440b      	add	r3, r1
 8003e56:	334c      	adds	r3, #76	@ 0x4c
 8003e58:	2204      	movs	r2, #4
 8003e5a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003e5c:	78fa      	ldrb	r2, [r7, #3]
 8003e5e:	6879      	ldr	r1, [r7, #4]
 8003e60:	4613      	mov	r3, r2
 8003e62:	011b      	lsls	r3, r3, #4
 8003e64:	1a9b      	subs	r3, r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	440b      	add	r3, r1
 8003e6a:	334c      	adds	r3, #76	@ 0x4c
 8003e6c:	781a      	ldrb	r2, [r3, #0]
 8003e6e:	78fb      	ldrb	r3, [r7, #3]
 8003e70:	4619      	mov	r1, r3
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f006 fae4 	bl	800a440 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003e78:	e022      	b.n	8003ec0 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e7a:	78fa      	ldrb	r2, [r7, #3]
 8003e7c:	6879      	ldr	r1, [r7, #4]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	011b      	lsls	r3, r3, #4
 8003e82:	1a9b      	subs	r3, r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	440b      	add	r3, r1
 8003e88:	334c      	adds	r3, #76	@ 0x4c
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003e8e:	78fb      	ldrb	r3, [r7, #3]
 8003e90:	015a      	lsls	r2, r3, #5
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	4413      	add	r3, r2
 8003e96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003ea4:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003eac:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003eae:	78fb      	ldrb	r3, [r7, #3]
 8003eb0:	015a      	lsls	r2, r3, #5
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003eba:	461a      	mov	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003ec0:	78fb      	ldrb	r3, [r7, #3]
 8003ec2:	015a      	lsls	r2, r3, #5
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ecc:	461a      	mov	r2, r3
 8003ece:	2380      	movs	r3, #128	@ 0x80
 8003ed0:	6093      	str	r3, [r2, #8]
 8003ed2:	e217      	b.n	8004304 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	78fa      	ldrb	r2, [r7, #3]
 8003eda:	4611      	mov	r1, r2
 8003edc:	4618      	mov	r0, r3
 8003ede:	f003 f9b2 	bl	8007246 <USB_ReadChInterrupts>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ee8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eec:	d11b      	bne.n	8003f26 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003eee:	78fa      	ldrb	r2, [r7, #3]
 8003ef0:	6879      	ldr	r1, [r7, #4]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	011b      	lsls	r3, r3, #4
 8003ef6:	1a9b      	subs	r3, r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	440b      	add	r3, r1
 8003efc:	334d      	adds	r3, #77	@ 0x4d
 8003efe:	2209      	movs	r2, #9
 8003f00:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	78fa      	ldrb	r2, [r7, #3]
 8003f08:	4611      	mov	r1, r2
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f003 ff3f 	bl	8007d8e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003f10:	78fb      	ldrb	r3, [r7, #3]
 8003f12:	015a      	lsls	r2, r3, #5
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	4413      	add	r3, r2
 8003f18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f22:	6093      	str	r3, [r2, #8]
 8003f24:	e1ee      	b.n	8004304 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	78fa      	ldrb	r2, [r7, #3]
 8003f2c:	4611      	mov	r1, r2
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f003 f989 	bl	8007246 <USB_ReadChInterrupts>
 8003f34:	4603      	mov	r3, r0
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	f040 81df 	bne.w	80042fe <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003f40:	78fb      	ldrb	r3, [r7, #3]
 8003f42:	015a      	lsls	r2, r3, #5
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	4413      	add	r3, r2
 8003f48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	2302      	movs	r3, #2
 8003f50:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003f52:	78fa      	ldrb	r2, [r7, #3]
 8003f54:	6879      	ldr	r1, [r7, #4]
 8003f56:	4613      	mov	r3, r2
 8003f58:	011b      	lsls	r3, r3, #4
 8003f5a:	1a9b      	subs	r3, r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	440b      	add	r3, r1
 8003f60:	334d      	adds	r3, #77	@ 0x4d
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	f040 8093 	bne.w	8004090 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f6a:	78fa      	ldrb	r2, [r7, #3]
 8003f6c:	6879      	ldr	r1, [r7, #4]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	011b      	lsls	r3, r3, #4
 8003f72:	1a9b      	subs	r3, r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	440b      	add	r3, r1
 8003f78:	334d      	adds	r3, #77	@ 0x4d
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003f7e:	78fa      	ldrb	r2, [r7, #3]
 8003f80:	6879      	ldr	r1, [r7, #4]
 8003f82:	4613      	mov	r3, r2
 8003f84:	011b      	lsls	r3, r3, #4
 8003f86:	1a9b      	subs	r3, r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	440b      	add	r3, r1
 8003f8c:	334c      	adds	r3, #76	@ 0x4c
 8003f8e:	2201      	movs	r2, #1
 8003f90:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003f92:	78fa      	ldrb	r2, [r7, #3]
 8003f94:	6879      	ldr	r1, [r7, #4]
 8003f96:	4613      	mov	r3, r2
 8003f98:	011b      	lsls	r3, r3, #4
 8003f9a:	1a9b      	subs	r3, r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	440b      	add	r3, r1
 8003fa0:	3326      	adds	r3, #38	@ 0x26
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d00b      	beq.n	8003fc0 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003fa8:	78fa      	ldrb	r2, [r7, #3]
 8003faa:	6879      	ldr	r1, [r7, #4]
 8003fac:	4613      	mov	r3, r2
 8003fae:	011b      	lsls	r3, r3, #4
 8003fb0:	1a9b      	subs	r3, r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	440b      	add	r3, r1
 8003fb6:	3326      	adds	r3, #38	@ 0x26
 8003fb8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003fba:	2b03      	cmp	r3, #3
 8003fbc:	f040 8190 	bne.w	80042e0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	799b      	ldrb	r3, [r3, #6]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d115      	bne.n	8003ff4 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003fc8:	78fa      	ldrb	r2, [r7, #3]
 8003fca:	6879      	ldr	r1, [r7, #4]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	011b      	lsls	r3, r3, #4
 8003fd0:	1a9b      	subs	r3, r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	440b      	add	r3, r1
 8003fd6:	333d      	adds	r3, #61	@ 0x3d
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	78fa      	ldrb	r2, [r7, #3]
 8003fdc:	f083 0301 	eor.w	r3, r3, #1
 8003fe0:	b2d8      	uxtb	r0, r3
 8003fe2:	6879      	ldr	r1, [r7, #4]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	011b      	lsls	r3, r3, #4
 8003fe8:	1a9b      	subs	r3, r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	440b      	add	r3, r1
 8003fee:	333d      	adds	r3, #61	@ 0x3d
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	799b      	ldrb	r3, [r3, #6]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	f040 8171 	bne.w	80042e0 <HCD_HC_OUT_IRQHandler+0x954>
 8003ffe:	78fa      	ldrb	r2, [r7, #3]
 8004000:	6879      	ldr	r1, [r7, #4]
 8004002:	4613      	mov	r3, r2
 8004004:	011b      	lsls	r3, r3, #4
 8004006:	1a9b      	subs	r3, r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	440b      	add	r3, r1
 800400c:	3334      	adds	r3, #52	@ 0x34
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	f000 8165 	beq.w	80042e0 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004016:	78fa      	ldrb	r2, [r7, #3]
 8004018:	6879      	ldr	r1, [r7, #4]
 800401a:	4613      	mov	r3, r2
 800401c:	011b      	lsls	r3, r3, #4
 800401e:	1a9b      	subs	r3, r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	440b      	add	r3, r1
 8004024:	3334      	adds	r3, #52	@ 0x34
 8004026:	6819      	ldr	r1, [r3, #0]
 8004028:	78fa      	ldrb	r2, [r7, #3]
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	4613      	mov	r3, r2
 800402e:	011b      	lsls	r3, r3, #4
 8004030:	1a9b      	subs	r3, r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4403      	add	r3, r0
 8004036:	3328      	adds	r3, #40	@ 0x28
 8004038:	881b      	ldrh	r3, [r3, #0]
 800403a:	440b      	add	r3, r1
 800403c:	1e59      	subs	r1, r3, #1
 800403e:	78fa      	ldrb	r2, [r7, #3]
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	4613      	mov	r3, r2
 8004044:	011b      	lsls	r3, r3, #4
 8004046:	1a9b      	subs	r3, r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4403      	add	r3, r0
 800404c:	3328      	adds	r3, #40	@ 0x28
 800404e:	881b      	ldrh	r3, [r3, #0]
 8004050:	fbb1 f3f3 	udiv	r3, r1, r3
 8004054:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	2b00      	cmp	r3, #0
 800405e:	f000 813f 	beq.w	80042e0 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004062:	78fa      	ldrb	r2, [r7, #3]
 8004064:	6879      	ldr	r1, [r7, #4]
 8004066:	4613      	mov	r3, r2
 8004068:	011b      	lsls	r3, r3, #4
 800406a:	1a9b      	subs	r3, r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	440b      	add	r3, r1
 8004070:	333d      	adds	r3, #61	@ 0x3d
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	78fa      	ldrb	r2, [r7, #3]
 8004076:	f083 0301 	eor.w	r3, r3, #1
 800407a:	b2d8      	uxtb	r0, r3
 800407c:	6879      	ldr	r1, [r7, #4]
 800407e:	4613      	mov	r3, r2
 8004080:	011b      	lsls	r3, r3, #4
 8004082:	1a9b      	subs	r3, r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	440b      	add	r3, r1
 8004088:	333d      	adds	r3, #61	@ 0x3d
 800408a:	4602      	mov	r2, r0
 800408c:	701a      	strb	r2, [r3, #0]
 800408e:	e127      	b.n	80042e0 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004090:	78fa      	ldrb	r2, [r7, #3]
 8004092:	6879      	ldr	r1, [r7, #4]
 8004094:	4613      	mov	r3, r2
 8004096:	011b      	lsls	r3, r3, #4
 8004098:	1a9b      	subs	r3, r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	440b      	add	r3, r1
 800409e:	334d      	adds	r3, #77	@ 0x4d
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	2b03      	cmp	r3, #3
 80040a4:	d120      	bne.n	80040e8 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80040a6:	78fa      	ldrb	r2, [r7, #3]
 80040a8:	6879      	ldr	r1, [r7, #4]
 80040aa:	4613      	mov	r3, r2
 80040ac:	011b      	lsls	r3, r3, #4
 80040ae:	1a9b      	subs	r3, r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	440b      	add	r3, r1
 80040b4:	334d      	adds	r3, #77	@ 0x4d
 80040b6:	2202      	movs	r2, #2
 80040b8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80040ba:	78fa      	ldrb	r2, [r7, #3]
 80040bc:	6879      	ldr	r1, [r7, #4]
 80040be:	4613      	mov	r3, r2
 80040c0:	011b      	lsls	r3, r3, #4
 80040c2:	1a9b      	subs	r3, r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	440b      	add	r3, r1
 80040c8:	331b      	adds	r3, #27
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	f040 8107 	bne.w	80042e0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80040d2:	78fa      	ldrb	r2, [r7, #3]
 80040d4:	6879      	ldr	r1, [r7, #4]
 80040d6:	4613      	mov	r3, r2
 80040d8:	011b      	lsls	r3, r3, #4
 80040da:	1a9b      	subs	r3, r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	440b      	add	r3, r1
 80040e0:	334c      	adds	r3, #76	@ 0x4c
 80040e2:	2202      	movs	r2, #2
 80040e4:	701a      	strb	r2, [r3, #0]
 80040e6:	e0fb      	b.n	80042e0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80040e8:	78fa      	ldrb	r2, [r7, #3]
 80040ea:	6879      	ldr	r1, [r7, #4]
 80040ec:	4613      	mov	r3, r2
 80040ee:	011b      	lsls	r3, r3, #4
 80040f0:	1a9b      	subs	r3, r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	440b      	add	r3, r1
 80040f6:	334d      	adds	r3, #77	@ 0x4d
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	2b04      	cmp	r3, #4
 80040fc:	d13a      	bne.n	8004174 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80040fe:	78fa      	ldrb	r2, [r7, #3]
 8004100:	6879      	ldr	r1, [r7, #4]
 8004102:	4613      	mov	r3, r2
 8004104:	011b      	lsls	r3, r3, #4
 8004106:	1a9b      	subs	r3, r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	440b      	add	r3, r1
 800410c:	334d      	adds	r3, #77	@ 0x4d
 800410e:	2202      	movs	r2, #2
 8004110:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004112:	78fa      	ldrb	r2, [r7, #3]
 8004114:	6879      	ldr	r1, [r7, #4]
 8004116:	4613      	mov	r3, r2
 8004118:	011b      	lsls	r3, r3, #4
 800411a:	1a9b      	subs	r3, r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	440b      	add	r3, r1
 8004120:	334c      	adds	r3, #76	@ 0x4c
 8004122:	2202      	movs	r2, #2
 8004124:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004126:	78fa      	ldrb	r2, [r7, #3]
 8004128:	6879      	ldr	r1, [r7, #4]
 800412a:	4613      	mov	r3, r2
 800412c:	011b      	lsls	r3, r3, #4
 800412e:	1a9b      	subs	r3, r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	440b      	add	r3, r1
 8004134:	331b      	adds	r3, #27
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	2b01      	cmp	r3, #1
 800413a:	f040 80d1 	bne.w	80042e0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800413e:	78fa      	ldrb	r2, [r7, #3]
 8004140:	6879      	ldr	r1, [r7, #4]
 8004142:	4613      	mov	r3, r2
 8004144:	011b      	lsls	r3, r3, #4
 8004146:	1a9b      	subs	r3, r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	440b      	add	r3, r1
 800414c:	331b      	adds	r3, #27
 800414e:	2200      	movs	r2, #0
 8004150:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004152:	78fb      	ldrb	r3, [r7, #3]
 8004154:	015a      	lsls	r2, r3, #5
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	4413      	add	r3, r2
 800415a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	78fa      	ldrb	r2, [r7, #3]
 8004162:	0151      	lsls	r1, r2, #5
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	440a      	add	r2, r1
 8004168:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800416c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004170:	6053      	str	r3, [r2, #4]
 8004172:	e0b5      	b.n	80042e0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004174:	78fa      	ldrb	r2, [r7, #3]
 8004176:	6879      	ldr	r1, [r7, #4]
 8004178:	4613      	mov	r3, r2
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	1a9b      	subs	r3, r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	440b      	add	r3, r1
 8004182:	334d      	adds	r3, #77	@ 0x4d
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	2b05      	cmp	r3, #5
 8004188:	d114      	bne.n	80041b4 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800418a:	78fa      	ldrb	r2, [r7, #3]
 800418c:	6879      	ldr	r1, [r7, #4]
 800418e:	4613      	mov	r3, r2
 8004190:	011b      	lsls	r3, r3, #4
 8004192:	1a9b      	subs	r3, r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	440b      	add	r3, r1
 8004198:	334d      	adds	r3, #77	@ 0x4d
 800419a:	2202      	movs	r2, #2
 800419c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800419e:	78fa      	ldrb	r2, [r7, #3]
 80041a0:	6879      	ldr	r1, [r7, #4]
 80041a2:	4613      	mov	r3, r2
 80041a4:	011b      	lsls	r3, r3, #4
 80041a6:	1a9b      	subs	r3, r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	440b      	add	r3, r1
 80041ac:	334c      	adds	r3, #76	@ 0x4c
 80041ae:	2202      	movs	r2, #2
 80041b0:	701a      	strb	r2, [r3, #0]
 80041b2:	e095      	b.n	80042e0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80041b4:	78fa      	ldrb	r2, [r7, #3]
 80041b6:	6879      	ldr	r1, [r7, #4]
 80041b8:	4613      	mov	r3, r2
 80041ba:	011b      	lsls	r3, r3, #4
 80041bc:	1a9b      	subs	r3, r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	440b      	add	r3, r1
 80041c2:	334d      	adds	r3, #77	@ 0x4d
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	2b06      	cmp	r3, #6
 80041c8:	d114      	bne.n	80041f4 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80041ca:	78fa      	ldrb	r2, [r7, #3]
 80041cc:	6879      	ldr	r1, [r7, #4]
 80041ce:	4613      	mov	r3, r2
 80041d0:	011b      	lsls	r3, r3, #4
 80041d2:	1a9b      	subs	r3, r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	440b      	add	r3, r1
 80041d8:	334d      	adds	r3, #77	@ 0x4d
 80041da:	2202      	movs	r2, #2
 80041dc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80041de:	78fa      	ldrb	r2, [r7, #3]
 80041e0:	6879      	ldr	r1, [r7, #4]
 80041e2:	4613      	mov	r3, r2
 80041e4:	011b      	lsls	r3, r3, #4
 80041e6:	1a9b      	subs	r3, r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	440b      	add	r3, r1
 80041ec:	334c      	adds	r3, #76	@ 0x4c
 80041ee:	2205      	movs	r2, #5
 80041f0:	701a      	strb	r2, [r3, #0]
 80041f2:	e075      	b.n	80042e0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80041f4:	78fa      	ldrb	r2, [r7, #3]
 80041f6:	6879      	ldr	r1, [r7, #4]
 80041f8:	4613      	mov	r3, r2
 80041fa:	011b      	lsls	r3, r3, #4
 80041fc:	1a9b      	subs	r3, r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	440b      	add	r3, r1
 8004202:	334d      	adds	r3, #77	@ 0x4d
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	2b07      	cmp	r3, #7
 8004208:	d00a      	beq.n	8004220 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800420a:	78fa      	ldrb	r2, [r7, #3]
 800420c:	6879      	ldr	r1, [r7, #4]
 800420e:	4613      	mov	r3, r2
 8004210:	011b      	lsls	r3, r3, #4
 8004212:	1a9b      	subs	r3, r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	440b      	add	r3, r1
 8004218:	334d      	adds	r3, #77	@ 0x4d
 800421a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800421c:	2b09      	cmp	r3, #9
 800421e:	d170      	bne.n	8004302 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004220:	78fa      	ldrb	r2, [r7, #3]
 8004222:	6879      	ldr	r1, [r7, #4]
 8004224:	4613      	mov	r3, r2
 8004226:	011b      	lsls	r3, r3, #4
 8004228:	1a9b      	subs	r3, r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	440b      	add	r3, r1
 800422e:	334d      	adds	r3, #77	@ 0x4d
 8004230:	2202      	movs	r2, #2
 8004232:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004234:	78fa      	ldrb	r2, [r7, #3]
 8004236:	6879      	ldr	r1, [r7, #4]
 8004238:	4613      	mov	r3, r2
 800423a:	011b      	lsls	r3, r3, #4
 800423c:	1a9b      	subs	r3, r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	440b      	add	r3, r1
 8004242:	3344      	adds	r3, #68	@ 0x44
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	1c59      	adds	r1, r3, #1
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	4613      	mov	r3, r2
 800424c:	011b      	lsls	r3, r3, #4
 800424e:	1a9b      	subs	r3, r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	4403      	add	r3, r0
 8004254:	3344      	adds	r3, #68	@ 0x44
 8004256:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004258:	78fa      	ldrb	r2, [r7, #3]
 800425a:	6879      	ldr	r1, [r7, #4]
 800425c:	4613      	mov	r3, r2
 800425e:	011b      	lsls	r3, r3, #4
 8004260:	1a9b      	subs	r3, r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	440b      	add	r3, r1
 8004266:	3344      	adds	r3, #68	@ 0x44
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2b02      	cmp	r3, #2
 800426c:	d914      	bls.n	8004298 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800426e:	78fa      	ldrb	r2, [r7, #3]
 8004270:	6879      	ldr	r1, [r7, #4]
 8004272:	4613      	mov	r3, r2
 8004274:	011b      	lsls	r3, r3, #4
 8004276:	1a9b      	subs	r3, r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	440b      	add	r3, r1
 800427c:	3344      	adds	r3, #68	@ 0x44
 800427e:	2200      	movs	r2, #0
 8004280:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004282:	78fa      	ldrb	r2, [r7, #3]
 8004284:	6879      	ldr	r1, [r7, #4]
 8004286:	4613      	mov	r3, r2
 8004288:	011b      	lsls	r3, r3, #4
 800428a:	1a9b      	subs	r3, r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	440b      	add	r3, r1
 8004290:	334c      	adds	r3, #76	@ 0x4c
 8004292:	2204      	movs	r2, #4
 8004294:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004296:	e022      	b.n	80042de <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004298:	78fa      	ldrb	r2, [r7, #3]
 800429a:	6879      	ldr	r1, [r7, #4]
 800429c:	4613      	mov	r3, r2
 800429e:	011b      	lsls	r3, r3, #4
 80042a0:	1a9b      	subs	r3, r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	440b      	add	r3, r1
 80042a6:	334c      	adds	r3, #76	@ 0x4c
 80042a8:	2202      	movs	r2, #2
 80042aa:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80042ac:	78fb      	ldrb	r3, [r7, #3]
 80042ae:	015a      	lsls	r2, r3, #5
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	4413      	add	r3, r2
 80042b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80042c2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80042ca:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80042cc:	78fb      	ldrb	r3, [r7, #3]
 80042ce:	015a      	lsls	r2, r3, #5
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	4413      	add	r3, r2
 80042d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042d8:	461a      	mov	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80042de:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80042e0:	78fa      	ldrb	r2, [r7, #3]
 80042e2:	6879      	ldr	r1, [r7, #4]
 80042e4:	4613      	mov	r3, r2
 80042e6:	011b      	lsls	r3, r3, #4
 80042e8:	1a9b      	subs	r3, r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	440b      	add	r3, r1
 80042ee:	334c      	adds	r3, #76	@ 0x4c
 80042f0:	781a      	ldrb	r2, [r3, #0]
 80042f2:	78fb      	ldrb	r3, [r7, #3]
 80042f4:	4619      	mov	r1, r3
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f006 f8a2 	bl	800a440 <HAL_HCD_HC_NotifyURBChange_Callback>
 80042fc:	e002      	b.n	8004304 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80042fe:	bf00      	nop
 8004300:	e000      	b.n	8004304 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8004302:	bf00      	nop
  }
}
 8004304:	3718      	adds	r7, #24
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b08a      	sub	sp, #40	@ 0x28
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800431a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	f003 030f 	and.w	r3, r3, #15
 800432a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	0c5b      	lsrs	r3, r3, #17
 8004330:	f003 030f 	and.w	r3, r3, #15
 8004334:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	091b      	lsrs	r3, r3, #4
 800433a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800433e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	2b02      	cmp	r3, #2
 8004344:	d004      	beq.n	8004350 <HCD_RXQLVL_IRQHandler+0x46>
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	2b05      	cmp	r3, #5
 800434a:	f000 80b6 	beq.w	80044ba <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800434e:	e0b7      	b.n	80044c0 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	2b00      	cmp	r3, #0
 8004354:	f000 80b3 	beq.w	80044be <HCD_RXQLVL_IRQHandler+0x1b4>
 8004358:	6879      	ldr	r1, [r7, #4]
 800435a:	69ba      	ldr	r2, [r7, #24]
 800435c:	4613      	mov	r3, r2
 800435e:	011b      	lsls	r3, r3, #4
 8004360:	1a9b      	subs	r3, r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	440b      	add	r3, r1
 8004366:	332c      	adds	r3, #44	@ 0x2c
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	f000 80a7 	beq.w	80044be <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004370:	6879      	ldr	r1, [r7, #4]
 8004372:	69ba      	ldr	r2, [r7, #24]
 8004374:	4613      	mov	r3, r2
 8004376:	011b      	lsls	r3, r3, #4
 8004378:	1a9b      	subs	r3, r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	440b      	add	r3, r1
 800437e:	3338      	adds	r3, #56	@ 0x38
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	18d1      	adds	r1, r2, r3
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	4613      	mov	r3, r2
 800438c:	011b      	lsls	r3, r3, #4
 800438e:	1a9b      	subs	r3, r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4403      	add	r3, r0
 8004394:	3334      	adds	r3, #52	@ 0x34
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4299      	cmp	r1, r3
 800439a:	f200 8083 	bhi.w	80044a4 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6818      	ldr	r0, [r3, #0]
 80043a2:	6879      	ldr	r1, [r7, #4]
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	4613      	mov	r3, r2
 80043a8:	011b      	lsls	r3, r3, #4
 80043aa:	1a9b      	subs	r3, r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	440b      	add	r3, r1
 80043b0:	332c      	adds	r3, #44	@ 0x2c
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	b292      	uxth	r2, r2
 80043b8:	4619      	mov	r1, r3
 80043ba:	f002 fed9 	bl	8007170 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80043be:	6879      	ldr	r1, [r7, #4]
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	4613      	mov	r3, r2
 80043c4:	011b      	lsls	r3, r3, #4
 80043c6:	1a9b      	subs	r3, r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	440b      	add	r3, r1
 80043cc:	332c      	adds	r3, #44	@ 0x2c
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	18d1      	adds	r1, r2, r3
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	4613      	mov	r3, r2
 80043da:	011b      	lsls	r3, r3, #4
 80043dc:	1a9b      	subs	r3, r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	4403      	add	r3, r0
 80043e2:	332c      	adds	r3, #44	@ 0x2c
 80043e4:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80043e6:	6879      	ldr	r1, [r7, #4]
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	4613      	mov	r3, r2
 80043ec:	011b      	lsls	r3, r3, #4
 80043ee:	1a9b      	subs	r3, r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	440b      	add	r3, r1
 80043f4:	3338      	adds	r3, #56	@ 0x38
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	18d1      	adds	r1, r2, r3
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	4613      	mov	r3, r2
 8004402:	011b      	lsls	r3, r3, #4
 8004404:	1a9b      	subs	r3, r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	4403      	add	r3, r0
 800440a:	3338      	adds	r3, #56	@ 0x38
 800440c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	015a      	lsls	r2, r3, #5
 8004412:	6a3b      	ldr	r3, [r7, #32]
 8004414:	4413      	add	r3, r2
 8004416:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	0cdb      	lsrs	r3, r3, #19
 800441e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004422:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004424:	6879      	ldr	r1, [r7, #4]
 8004426:	69ba      	ldr	r2, [r7, #24]
 8004428:	4613      	mov	r3, r2
 800442a:	011b      	lsls	r3, r3, #4
 800442c:	1a9b      	subs	r3, r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	440b      	add	r3, r1
 8004432:	3328      	adds	r3, #40	@ 0x28
 8004434:	881b      	ldrh	r3, [r3, #0]
 8004436:	461a      	mov	r2, r3
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	4293      	cmp	r3, r2
 800443c:	d13f      	bne.n	80044be <HCD_RXQLVL_IRQHandler+0x1b4>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d03c      	beq.n	80044be <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	015a      	lsls	r2, r3, #5
 8004448:	6a3b      	ldr	r3, [r7, #32]
 800444a:	4413      	add	r3, r2
 800444c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800445a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004462:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	015a      	lsls	r2, r3, #5
 8004468:	6a3b      	ldr	r3, [r7, #32]
 800446a:	4413      	add	r3, r2
 800446c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004470:	461a      	mov	r2, r3
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004476:	6879      	ldr	r1, [r7, #4]
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	4613      	mov	r3, r2
 800447c:	011b      	lsls	r3, r3, #4
 800447e:	1a9b      	subs	r3, r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	440b      	add	r3, r1
 8004484:	333c      	adds	r3, #60	@ 0x3c
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	f083 0301 	eor.w	r3, r3, #1
 800448c:	b2d8      	uxtb	r0, r3
 800448e:	6879      	ldr	r1, [r7, #4]
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	4613      	mov	r3, r2
 8004494:	011b      	lsls	r3, r3, #4
 8004496:	1a9b      	subs	r3, r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	440b      	add	r3, r1
 800449c:	333c      	adds	r3, #60	@ 0x3c
 800449e:	4602      	mov	r2, r0
 80044a0:	701a      	strb	r2, [r3, #0]
      break;
 80044a2:	e00c      	b.n	80044be <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80044a4:	6879      	ldr	r1, [r7, #4]
 80044a6:	69ba      	ldr	r2, [r7, #24]
 80044a8:	4613      	mov	r3, r2
 80044aa:	011b      	lsls	r3, r3, #4
 80044ac:	1a9b      	subs	r3, r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	440b      	add	r3, r1
 80044b2:	334c      	adds	r3, #76	@ 0x4c
 80044b4:	2204      	movs	r2, #4
 80044b6:	701a      	strb	r2, [r3, #0]
      break;
 80044b8:	e001      	b.n	80044be <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80044ba:	bf00      	nop
 80044bc:	e000      	b.n	80044c0 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80044be:	bf00      	nop
  }
}
 80044c0:	bf00      	nop
 80044c2:	3728      	adds	r7, #40	@ 0x28
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b086      	sub	sp, #24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80044f4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f003 0302 	and.w	r3, r3, #2
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d10b      	bne.n	8004518 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b01      	cmp	r3, #1
 8004508:	d102      	bne.n	8004510 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f005 ff7c 	bl	800a408 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	f043 0302 	orr.w	r3, r3, #2
 8004516:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f003 0308 	and.w	r3, r3, #8
 800451e:	2b08      	cmp	r3, #8
 8004520:	d132      	bne.n	8004588 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	f043 0308 	orr.w	r3, r3, #8
 8004528:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f003 0304 	and.w	r3, r3, #4
 8004530:	2b04      	cmp	r3, #4
 8004532:	d126      	bne.n	8004582 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	7a5b      	ldrb	r3, [r3, #9]
 8004538:	2b02      	cmp	r3, #2
 800453a:	d113      	bne.n	8004564 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004542:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004546:	d106      	bne.n	8004556 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2102      	movs	r1, #2
 800454e:	4618      	mov	r0, r3
 8004550:	f002 ff9e 	bl	8007490 <USB_InitFSLSPClkSel>
 8004554:	e011      	b.n	800457a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2101      	movs	r1, #1
 800455c:	4618      	mov	r0, r3
 800455e:	f002 ff97 	bl	8007490 <USB_InitFSLSPClkSel>
 8004562:	e00a      	b.n	800457a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	79db      	ldrb	r3, [r3, #7]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d106      	bne.n	800457a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004572:	461a      	mov	r2, r3
 8004574:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004578:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f005 ff6e 	bl	800a45c <HAL_HCD_PortEnabled_Callback>
 8004580:	e002      	b.n	8004588 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f005 ff78 	bl	800a478 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f003 0320 	and.w	r3, r3, #32
 800458e:	2b20      	cmp	r3, #32
 8004590:	d103      	bne.n	800459a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	f043 0320 	orr.w	r3, r3, #32
 8004598:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80045a0:	461a      	mov	r2, r3
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	6013      	str	r3, [r2, #0]
}
 80045a6:	bf00      	nop
 80045a8:	3718      	adds	r7, #24
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
	...

080045b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e12b      	b.n	800481a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d106      	bne.n	80045dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7fc fe08 	bl	80011ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2224      	movs	r2, #36	@ 0x24
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 0201 	bic.w	r2, r2, #1
 80045f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004602:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004612:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004614:	f001 fde8 	bl	80061e8 <HAL_RCC_GetPCLK1Freq>
 8004618:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	4a81      	ldr	r2, [pc, #516]	@ (8004824 <HAL_I2C_Init+0x274>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d807      	bhi.n	8004634 <HAL_I2C_Init+0x84>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	4a80      	ldr	r2, [pc, #512]	@ (8004828 <HAL_I2C_Init+0x278>)
 8004628:	4293      	cmp	r3, r2
 800462a:	bf94      	ite	ls
 800462c:	2301      	movls	r3, #1
 800462e:	2300      	movhi	r3, #0
 8004630:	b2db      	uxtb	r3, r3
 8004632:	e006      	b.n	8004642 <HAL_I2C_Init+0x92>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4a7d      	ldr	r2, [pc, #500]	@ (800482c <HAL_I2C_Init+0x27c>)
 8004638:	4293      	cmp	r3, r2
 800463a:	bf94      	ite	ls
 800463c:	2301      	movls	r3, #1
 800463e:	2300      	movhi	r3, #0
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e0e7      	b.n	800481a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	4a78      	ldr	r2, [pc, #480]	@ (8004830 <HAL_I2C_Init+0x280>)
 800464e:	fba2 2303 	umull	r2, r3, r2, r3
 8004652:	0c9b      	lsrs	r3, r3, #18
 8004654:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	430a      	orrs	r2, r1
 8004668:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	4a6a      	ldr	r2, [pc, #424]	@ (8004824 <HAL_I2C_Init+0x274>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d802      	bhi.n	8004684 <HAL_I2C_Init+0xd4>
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	3301      	adds	r3, #1
 8004682:	e009      	b.n	8004698 <HAL_I2C_Init+0xe8>
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800468a:	fb02 f303 	mul.w	r3, r2, r3
 800468e:	4a69      	ldr	r2, [pc, #420]	@ (8004834 <HAL_I2C_Init+0x284>)
 8004690:	fba2 2303 	umull	r2, r3, r2, r3
 8004694:	099b      	lsrs	r3, r3, #6
 8004696:	3301      	adds	r3, #1
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	6812      	ldr	r2, [r2, #0]
 800469c:	430b      	orrs	r3, r1
 800469e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	69db      	ldr	r3, [r3, #28]
 80046a6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80046aa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	495c      	ldr	r1, [pc, #368]	@ (8004824 <HAL_I2C_Init+0x274>)
 80046b4:	428b      	cmp	r3, r1
 80046b6:	d819      	bhi.n	80046ec <HAL_I2C_Init+0x13c>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	1e59      	subs	r1, r3, #1
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	005b      	lsls	r3, r3, #1
 80046c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80046c6:	1c59      	adds	r1, r3, #1
 80046c8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80046cc:	400b      	ands	r3, r1
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00a      	beq.n	80046e8 <HAL_I2C_Init+0x138>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	1e59      	subs	r1, r3, #1
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	005b      	lsls	r3, r3, #1
 80046dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80046e0:	3301      	adds	r3, #1
 80046e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046e6:	e051      	b.n	800478c <HAL_I2C_Init+0x1dc>
 80046e8:	2304      	movs	r3, #4
 80046ea:	e04f      	b.n	800478c <HAL_I2C_Init+0x1dc>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d111      	bne.n	8004718 <HAL_I2C_Init+0x168>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	1e58      	subs	r0, r3, #1
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6859      	ldr	r1, [r3, #4]
 80046fc:	460b      	mov	r3, r1
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	440b      	add	r3, r1
 8004702:	fbb0 f3f3 	udiv	r3, r0, r3
 8004706:	3301      	adds	r3, #1
 8004708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800470c:	2b00      	cmp	r3, #0
 800470e:	bf0c      	ite	eq
 8004710:	2301      	moveq	r3, #1
 8004712:	2300      	movne	r3, #0
 8004714:	b2db      	uxtb	r3, r3
 8004716:	e012      	b.n	800473e <HAL_I2C_Init+0x18e>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	1e58      	subs	r0, r3, #1
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6859      	ldr	r1, [r3, #4]
 8004720:	460b      	mov	r3, r1
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	440b      	add	r3, r1
 8004726:	0099      	lsls	r1, r3, #2
 8004728:	440b      	add	r3, r1
 800472a:	fbb0 f3f3 	udiv	r3, r0, r3
 800472e:	3301      	adds	r3, #1
 8004730:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004734:	2b00      	cmp	r3, #0
 8004736:	bf0c      	ite	eq
 8004738:	2301      	moveq	r3, #1
 800473a:	2300      	movne	r3, #0
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <HAL_I2C_Init+0x196>
 8004742:	2301      	movs	r3, #1
 8004744:	e022      	b.n	800478c <HAL_I2C_Init+0x1dc>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10e      	bne.n	800476c <HAL_I2C_Init+0x1bc>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	1e58      	subs	r0, r3, #1
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6859      	ldr	r1, [r3, #4]
 8004756:	460b      	mov	r3, r1
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	440b      	add	r3, r1
 800475c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004760:	3301      	adds	r3, #1
 8004762:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004766:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800476a:	e00f      	b.n	800478c <HAL_I2C_Init+0x1dc>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	1e58      	subs	r0, r3, #1
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6859      	ldr	r1, [r3, #4]
 8004774:	460b      	mov	r3, r1
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	440b      	add	r3, r1
 800477a:	0099      	lsls	r1, r3, #2
 800477c:	440b      	add	r3, r1
 800477e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004782:	3301      	adds	r3, #1
 8004784:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004788:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800478c:	6879      	ldr	r1, [r7, #4]
 800478e:	6809      	ldr	r1, [r1, #0]
 8004790:	4313      	orrs	r3, r2
 8004792:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	69da      	ldr	r2, [r3, #28]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	431a      	orrs	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	430a      	orrs	r2, r1
 80047ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80047ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	6911      	ldr	r1, [r2, #16]
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	68d2      	ldr	r2, [r2, #12]
 80047c6:	4311      	orrs	r1, r2
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	6812      	ldr	r2, [r2, #0]
 80047cc:	430b      	orrs	r3, r1
 80047ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	695a      	ldr	r2, [r3, #20]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	431a      	orrs	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0201 	orr.w	r2, r2, #1
 80047fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2220      	movs	r2, #32
 8004806:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	000186a0 	.word	0x000186a0
 8004828:	001e847f 	.word	0x001e847f
 800482c:	003d08ff 	.word	0x003d08ff
 8004830:	431bde83 	.word	0x431bde83
 8004834:	10624dd3 	.word	0x10624dd3

08004838 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b088      	sub	sp, #32
 800483c:	af02      	add	r7, sp, #8
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	607a      	str	r2, [r7, #4]
 8004842:	461a      	mov	r2, r3
 8004844:	460b      	mov	r3, r1
 8004846:	817b      	strh	r3, [r7, #10]
 8004848:	4613      	mov	r3, r2
 800484a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800484c:	f7fd fa84 	bl	8001d58 <HAL_GetTick>
 8004850:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b20      	cmp	r3, #32
 800485c:	f040 80e0 	bne.w	8004a20 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	9300      	str	r3, [sp, #0]
 8004864:	2319      	movs	r3, #25
 8004866:	2201      	movs	r2, #1
 8004868:	4970      	ldr	r1, [pc, #448]	@ (8004a2c <HAL_I2C_Master_Transmit+0x1f4>)
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f000 f964 	bl	8004b38 <I2C_WaitOnFlagUntilTimeout>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004876:	2302      	movs	r3, #2
 8004878:	e0d3      	b.n	8004a22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004880:	2b01      	cmp	r3, #1
 8004882:	d101      	bne.n	8004888 <HAL_I2C_Master_Transmit+0x50>
 8004884:	2302      	movs	r3, #2
 8004886:	e0cc      	b.n	8004a22 <HAL_I2C_Master_Transmit+0x1ea>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b01      	cmp	r3, #1
 800489c:	d007      	beq.n	80048ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f042 0201 	orr.w	r2, r2, #1
 80048ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2221      	movs	r2, #33	@ 0x21
 80048c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2210      	movs	r2, #16
 80048ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	893a      	ldrh	r2, [r7, #8]
 80048de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	4a50      	ldr	r2, [pc, #320]	@ (8004a30 <HAL_I2C_Master_Transmit+0x1f8>)
 80048ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80048f0:	8979      	ldrh	r1, [r7, #10]
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	6a3a      	ldr	r2, [r7, #32]
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f000 f89c 	bl	8004a34 <I2C_MasterRequestWrite>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e08d      	b.n	8004a22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004906:	2300      	movs	r3, #0
 8004908:	613b      	str	r3, [r7, #16]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	613b      	str	r3, [r7, #16]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	613b      	str	r3, [r7, #16]
 800491a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800491c:	e066      	b.n	80049ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	6a39      	ldr	r1, [r7, #32]
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f000 fa22 	bl	8004d6c <I2C_WaitOnTXEFlagUntilTimeout>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00d      	beq.n	800494a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004932:	2b04      	cmp	r3, #4
 8004934:	d107      	bne.n	8004946 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004944:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e06b      	b.n	8004a22 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800494e:	781a      	ldrb	r2, [r3, #0]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800495a:	1c5a      	adds	r2, r3, #1
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004964:	b29b      	uxth	r3, r3
 8004966:	3b01      	subs	r3, #1
 8004968:	b29a      	uxth	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004972:	3b01      	subs	r3, #1
 8004974:	b29a      	uxth	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	f003 0304 	and.w	r3, r3, #4
 8004984:	2b04      	cmp	r3, #4
 8004986:	d11b      	bne.n	80049c0 <HAL_I2C_Master_Transmit+0x188>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800498c:	2b00      	cmp	r3, #0
 800498e:	d017      	beq.n	80049c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004994:	781a      	ldrb	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a0:	1c5a      	adds	r2, r3, #1
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	3b01      	subs	r3, #1
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049b8:	3b01      	subs	r3, #1
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	6a39      	ldr	r1, [r7, #32]
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f000 fa19 	bl	8004dfc <I2C_WaitOnBTFFlagUntilTimeout>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00d      	beq.n	80049ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d4:	2b04      	cmp	r3, #4
 80049d6:	d107      	bne.n	80049e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e01a      	b.n	8004a22 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d194      	bne.n	800491e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2220      	movs	r2, #32
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	e000      	b.n	8004a22 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004a20:	2302      	movs	r3, #2
  }
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3718      	adds	r7, #24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	00100002 	.word	0x00100002
 8004a30:	ffff0000 	.word	0xffff0000

08004a34 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b088      	sub	sp, #32
 8004a38:	af02      	add	r7, sp, #8
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	607a      	str	r2, [r7, #4]
 8004a3e:	603b      	str	r3, [r7, #0]
 8004a40:	460b      	mov	r3, r1
 8004a42:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a48:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	2b08      	cmp	r3, #8
 8004a4e:	d006      	beq.n	8004a5e <I2C_MasterRequestWrite+0x2a>
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d003      	beq.n	8004a5e <I2C_MasterRequestWrite+0x2a>
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a5c:	d108      	bne.n	8004a70 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a6c:	601a      	str	r2, [r3, #0]
 8004a6e:	e00b      	b.n	8004a88 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a74:	2b12      	cmp	r3, #18
 8004a76:	d107      	bne.n	8004a88 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a86:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	f000 f84f 	bl	8004b38 <I2C_WaitOnFlagUntilTimeout>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00d      	beq.n	8004abc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004aae:	d103      	bne.n	8004ab8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ab6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e035      	b.n	8004b28 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ac4:	d108      	bne.n	8004ad8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ac6:	897b      	ldrh	r3, [r7, #10]
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	461a      	mov	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004ad4:	611a      	str	r2, [r3, #16]
 8004ad6:	e01b      	b.n	8004b10 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004ad8:	897b      	ldrh	r3, [r7, #10]
 8004ada:	11db      	asrs	r3, r3, #7
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	f003 0306 	and.w	r3, r3, #6
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	f063 030f 	orn	r3, r3, #15
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	490e      	ldr	r1, [pc, #56]	@ (8004b30 <I2C_MasterRequestWrite+0xfc>)
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	f000 f898 	bl	8004c2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d001      	beq.n	8004b06 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e010      	b.n	8004b28 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004b06:	897b      	ldrh	r3, [r7, #10]
 8004b08:	b2da      	uxtb	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	4907      	ldr	r1, [pc, #28]	@ (8004b34 <I2C_MasterRequestWrite+0x100>)
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f000 f888 	bl	8004c2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e000      	b.n	8004b28 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3718      	adds	r7, #24
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	00010008 	.word	0x00010008
 8004b34:	00010002 	.word	0x00010002

08004b38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	603b      	str	r3, [r7, #0]
 8004b44:	4613      	mov	r3, r2
 8004b46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b48:	e048      	b.n	8004bdc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b50:	d044      	beq.n	8004bdc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b52:	f7fd f901 	bl	8001d58 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	683a      	ldr	r2, [r7, #0]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d302      	bcc.n	8004b68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d139      	bne.n	8004bdc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	0c1b      	lsrs	r3, r3, #16
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d10d      	bne.n	8004b8e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	695b      	ldr	r3, [r3, #20]
 8004b78:	43da      	mvns	r2, r3
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	bf0c      	ite	eq
 8004b84:	2301      	moveq	r3, #1
 8004b86:	2300      	movne	r3, #0
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	e00c      	b.n	8004ba8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	43da      	mvns	r2, r3
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	4013      	ands	r3, r2
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	bf0c      	ite	eq
 8004ba0:	2301      	moveq	r3, #1
 8004ba2:	2300      	movne	r3, #0
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	79fb      	ldrb	r3, [r7, #7]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d116      	bne.n	8004bdc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc8:	f043 0220 	orr.w	r2, r3, #32
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e023      	b.n	8004c24 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	0c1b      	lsrs	r3, r3, #16
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d10d      	bne.n	8004c02 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	43da      	mvns	r2, r3
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	bf0c      	ite	eq
 8004bf8:	2301      	moveq	r3, #1
 8004bfa:	2300      	movne	r3, #0
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	461a      	mov	r2, r3
 8004c00:	e00c      	b.n	8004c1c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	43da      	mvns	r2, r3
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	bf0c      	ite	eq
 8004c14:	2301      	moveq	r3, #1
 8004c16:	2300      	movne	r3, #0
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	79fb      	ldrb	r3, [r7, #7]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d093      	beq.n	8004b4a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
 8004c38:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c3a:	e071      	b.n	8004d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c4a:	d123      	bne.n	8004c94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c5a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2220      	movs	r2, #32
 8004c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c80:	f043 0204 	orr.w	r2, r3, #4
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e067      	b.n	8004d64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c9a:	d041      	beq.n	8004d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c9c:	f7fd f85c 	bl	8001d58 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d302      	bcc.n	8004cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d136      	bne.n	8004d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	0c1b      	lsrs	r3, r3, #16
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d10c      	bne.n	8004cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	43da      	mvns	r2, r3
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	bf14      	ite	ne
 8004cce:	2301      	movne	r3, #1
 8004cd0:	2300      	moveq	r3, #0
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	e00b      	b.n	8004cee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	43da      	mvns	r2, r3
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	bf14      	ite	ne
 8004ce8:	2301      	movne	r3, #1
 8004cea:	2300      	moveq	r3, #0
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d016      	beq.n	8004d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d0c:	f043 0220 	orr.w	r2, r3, #32
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e021      	b.n	8004d64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	0c1b      	lsrs	r3, r3, #16
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d10c      	bne.n	8004d44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	43da      	mvns	r2, r3
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	4013      	ands	r3, r2
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	bf14      	ite	ne
 8004d3c:	2301      	movne	r3, #1
 8004d3e:	2300      	moveq	r3, #0
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	e00b      	b.n	8004d5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	43da      	mvns	r2, r3
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	4013      	ands	r3, r2
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	bf14      	ite	ne
 8004d56:	2301      	movne	r3, #1
 8004d58:	2300      	moveq	r3, #0
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f47f af6d 	bne.w	8004c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d78:	e034      	b.n	8004de4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f000 f886 	bl	8004e8c <I2C_IsAcknowledgeFailed>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d001      	beq.n	8004d8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e034      	b.n	8004df4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d90:	d028      	beq.n	8004de4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d92:	f7fc ffe1 	bl	8001d58 <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d302      	bcc.n	8004da8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d11d      	bne.n	8004de4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004db2:	2b80      	cmp	r3, #128	@ 0x80
 8004db4:	d016      	beq.n	8004de4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd0:	f043 0220 	orr.w	r2, r3, #32
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e007      	b.n	8004df4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dee:	2b80      	cmp	r3, #128	@ 0x80
 8004df0:	d1c3      	bne.n	8004d7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3710      	adds	r7, #16
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e08:	e034      	b.n	8004e74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e0a:	68f8      	ldr	r0, [r7, #12]
 8004e0c:	f000 f83e 	bl	8004e8c <I2C_IsAcknowledgeFailed>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d001      	beq.n	8004e1a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e034      	b.n	8004e84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e20:	d028      	beq.n	8004e74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e22:	f7fc ff99 	bl	8001d58 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d302      	bcc.n	8004e38 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d11d      	bne.n	8004e74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	f003 0304 	and.w	r3, r3, #4
 8004e42:	2b04      	cmp	r3, #4
 8004e44:	d016      	beq.n	8004e74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e60:	f043 0220 	orr.w	r2, r3, #32
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e007      	b.n	8004e84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	f003 0304 	and.w	r3, r3, #4
 8004e7e:	2b04      	cmp	r3, #4
 8004e80:	d1c3      	bne.n	8004e0a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ea2:	d11b      	bne.n	8004edc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004eac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2220      	movs	r2, #32
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec8:	f043 0204 	orr.w	r2, r3, #4
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e000      	b.n	8004ede <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	370c      	adds	r7, #12
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
	...

08004eec <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b088      	sub	sp, #32
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d101      	bne.n	8004efe <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e128      	b.n	8005150 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d109      	bne.n	8004f1e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a90      	ldr	r2, [pc, #576]	@ (8005158 <HAL_I2S_Init+0x26c>)
 8004f16:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f7fc f9dd 	bl	80012d8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2202      	movs	r2, #2
 8004f22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	69db      	ldr	r3, [r3, #28]
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	6812      	ldr	r2, [r2, #0]
 8004f30:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004f34:	f023 030f 	bic.w	r3, r3, #15
 8004f38:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2202      	movs	r2, #2
 8004f40:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d060      	beq.n	800500c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d102      	bne.n	8004f58 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004f52:	2310      	movs	r3, #16
 8004f54:	617b      	str	r3, [r7, #20]
 8004f56:	e001      	b.n	8004f5c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004f58:	2320      	movs	r3, #32
 8004f5a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	2b20      	cmp	r3, #32
 8004f62:	d802      	bhi.n	8004f6a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	005b      	lsls	r3, r3, #1
 8004f68:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004f6a:	2001      	movs	r0, #1
 8004f6c:	f001 fa32 	bl	80063d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004f70:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f7a:	d125      	bne.n	8004fc8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d010      	beq.n	8004fa6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f8e:	4613      	mov	r3, r2
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	4413      	add	r3, r2
 8004f94:	005b      	lsls	r3, r3, #1
 8004f96:	461a      	mov	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa0:	3305      	adds	r3, #5
 8004fa2:	613b      	str	r3, [r7, #16]
 8004fa4:	e01f      	b.n	8004fe6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	00db      	lsls	r3, r3, #3
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	4413      	add	r3, r2
 8004fb6:	005b      	lsls	r3, r3, #1
 8004fb8:	461a      	mov	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc2:	3305      	adds	r3, #5
 8004fc4:	613b      	str	r3, [r7, #16]
 8004fc6:	e00e      	b.n	8004fe6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	005b      	lsls	r3, r3, #1
 8004fd8:	461a      	mov	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe2:	3305      	adds	r3, #5
 8004fe4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	4a5c      	ldr	r2, [pc, #368]	@ (800515c <HAL_I2S_Init+0x270>)
 8004fea:	fba2 2303 	umull	r2, r3, r2, r3
 8004fee:	08db      	lsrs	r3, r3, #3
 8004ff0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	085b      	lsrs	r3, r3, #1
 8005002:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	021b      	lsls	r3, r3, #8
 8005008:	61bb      	str	r3, [r7, #24]
 800500a:	e003      	b.n	8005014 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800500c:	2302      	movs	r3, #2
 800500e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005010:	2300      	movs	r3, #0
 8005012:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d902      	bls.n	8005020 <HAL_I2S_Init+0x134>
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	2bff      	cmp	r3, #255	@ 0xff
 800501e:	d907      	bls.n	8005030 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005024:	f043 0210 	orr.w	r2, r3, #16
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e08f      	b.n	8005150 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	691a      	ldr	r2, [r3, #16]
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	ea42 0103 	orr.w	r1, r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	69fa      	ldr	r2, [r7, #28]
 8005040:	430a      	orrs	r2, r1
 8005042:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	69db      	ldr	r3, [r3, #28]
 800504a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800504e:	f023 030f 	bic.w	r3, r3, #15
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	6851      	ldr	r1, [r2, #4]
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	6892      	ldr	r2, [r2, #8]
 800505a:	4311      	orrs	r1, r2
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	68d2      	ldr	r2, [r2, #12]
 8005060:	4311      	orrs	r1, r2
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	6992      	ldr	r2, [r2, #24]
 8005066:	430a      	orrs	r2, r1
 8005068:	431a      	orrs	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005072:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a1b      	ldr	r3, [r3, #32]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d161      	bne.n	8005140 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a38      	ldr	r2, [pc, #224]	@ (8005160 <HAL_I2S_Init+0x274>)
 8005080:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a37      	ldr	r2, [pc, #220]	@ (8005164 <HAL_I2S_Init+0x278>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d101      	bne.n	8005090 <HAL_I2S_Init+0x1a4>
 800508c:	4b36      	ldr	r3, [pc, #216]	@ (8005168 <HAL_I2S_Init+0x27c>)
 800508e:	e001      	b.n	8005094 <HAL_I2S_Init+0x1a8>
 8005090:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005094:	69db      	ldr	r3, [r3, #28]
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	6812      	ldr	r2, [r2, #0]
 800509a:	4932      	ldr	r1, [pc, #200]	@ (8005164 <HAL_I2S_Init+0x278>)
 800509c:	428a      	cmp	r2, r1
 800509e:	d101      	bne.n	80050a4 <HAL_I2S_Init+0x1b8>
 80050a0:	4a31      	ldr	r2, [pc, #196]	@ (8005168 <HAL_I2S_Init+0x27c>)
 80050a2:	e001      	b.n	80050a8 <HAL_I2S_Init+0x1bc>
 80050a4:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80050a8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80050ac:	f023 030f 	bic.w	r3, r3, #15
 80050b0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a2b      	ldr	r2, [pc, #172]	@ (8005164 <HAL_I2S_Init+0x278>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d101      	bne.n	80050c0 <HAL_I2S_Init+0x1d4>
 80050bc:	4b2a      	ldr	r3, [pc, #168]	@ (8005168 <HAL_I2S_Init+0x27c>)
 80050be:	e001      	b.n	80050c4 <HAL_I2S_Init+0x1d8>
 80050c0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80050c4:	2202      	movs	r2, #2
 80050c6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a25      	ldr	r2, [pc, #148]	@ (8005164 <HAL_I2S_Init+0x278>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d101      	bne.n	80050d6 <HAL_I2S_Init+0x1ea>
 80050d2:	4b25      	ldr	r3, [pc, #148]	@ (8005168 <HAL_I2S_Init+0x27c>)
 80050d4:	e001      	b.n	80050da <HAL_I2S_Init+0x1ee>
 80050d6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80050da:	69db      	ldr	r3, [r3, #28]
 80050dc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050e6:	d003      	beq.n	80050f0 <HAL_I2S_Init+0x204>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d103      	bne.n	80050f8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80050f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80050f4:	613b      	str	r3, [r7, #16]
 80050f6:	e001      	b.n	80050fc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80050f8:	2300      	movs	r3, #0
 80050fa:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005106:	4313      	orrs	r3, r2
 8005108:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005110:	4313      	orrs	r3, r2
 8005112:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800511a:	4313      	orrs	r3, r2
 800511c:	b29a      	uxth	r2, r3
 800511e:	897b      	ldrh	r3, [r7, #10]
 8005120:	4313      	orrs	r3, r2
 8005122:	b29b      	uxth	r3, r3
 8005124:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005128:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a0d      	ldr	r2, [pc, #52]	@ (8005164 <HAL_I2S_Init+0x278>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d101      	bne.n	8005138 <HAL_I2S_Init+0x24c>
 8005134:	4b0c      	ldr	r3, [pc, #48]	@ (8005168 <HAL_I2S_Init+0x27c>)
 8005136:	e001      	b.n	800513c <HAL_I2S_Init+0x250>
 8005138:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800513c:	897a      	ldrh	r2, [r7, #10]
 800513e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3720      	adds	r7, #32
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	08005341 	.word	0x08005341
 800515c:	cccccccd 	.word	0xcccccccd
 8005160:	08005455 	.word	0x08005455
 8005164:	40003800 	.word	0x40003800
 8005168:	40003400 	.word	0x40003400

0800516c <HAL_I2S_Transmit_IT>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_IT(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800516c:	b480      	push	{r7}
 800516e:	b087      	sub	sp, #28
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	4613      	mov	r3, r2
 8005178:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d002      	beq.n	8005186 <HAL_I2S_Transmit_IT+0x1a>
 8005180:	88fb      	ldrh	r3, [r7, #6]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <HAL_I2S_Transmit_IT+0x1e>
  {
    return  HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e057      	b.n	800523a <HAL_I2S_Transmit_IT+0xce>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b01      	cmp	r3, #1
 8005194:	d001      	beq.n	800519a <HAL_I2S_Transmit_IT+0x2e>
  {
    return HAL_BUSY;
 8005196:	2302      	movs	r3, #2
 8005198:	e04f      	b.n	800523a <HAL_I2S_Transmit_IT+0xce>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d101      	bne.n	80051aa <HAL_I2S_Transmit_IT+0x3e>
 80051a6:	2302      	movs	r3, #2
 80051a8:	e047      	b.n	800523a <HAL_I2S_Transmit_IT+0xce>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2201      	movs	r2, #1
 80051ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2203      	movs	r2, #3
 80051b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	68ba      	ldr	r2, [r7, #8]
 80051c4:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	69db      	ldr	r3, [r3, #28]
 80051cc:	f003 0307 	and.w	r3, r3, #7
 80051d0:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	2b03      	cmp	r3, #3
 80051d6:	d002      	beq.n	80051de <HAL_I2S_Transmit_IT+0x72>
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	2b05      	cmp	r3, #5
 80051dc:	d10a      	bne.n	80051f4 <HAL_I2S_Transmit_IT+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 80051de:	88fb      	ldrh	r3, [r7, #6]
 80051e0:	005b      	lsls	r3, r3, #1
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 80051e8:	88fb      	ldrh	r3, [r7, #6]
 80051ea:	005b      	lsls	r3, r3, #1
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80051f2:	e005      	b.n	8005200 <HAL_I2S_Transmit_IT+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	88fa      	ldrh	r2, [r7, #6]
 80051f8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	88fa      	ldrh	r2, [r7, #6]
 80051fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  __HAL_UNLOCK(hi2s);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Enable TXE and ERR interrupt */
  __HAL_I2S_ENABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685a      	ldr	r2, [r3, #4]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 8005216:	605a      	str	r2, [r3, #4]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005222:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005226:	d007      	beq.n	8005238 <HAL_I2S_Transmit_IT+0xcc>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	69da      	ldr	r2, [r3, #28]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005236:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	371c      	adds	r7, #28
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr

08005246 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b082      	sub	sp, #8
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	4798      	blx	r3
}
 8005256:	bf00      	nop
 8005258:	3708      	adds	r7, #8
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800525e:	b480      	push	{r7}
 8005260:	b083      	sub	sp, #12
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005266:	bf00      	nop
 8005268:	370c      	adds	r7, #12
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr

08005272 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005272:	b480      	push	{r7}
 8005274:	b083      	sub	sp, #12
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800527a:	bf00      	nop
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b082      	sub	sp, #8
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005292:	881a      	ldrh	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800529e:	1c9a      	adds	r2, r3, #2
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	3b01      	subs	r3, #1
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10e      	bne.n	80052da <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	685a      	ldr	r2, [r3, #4]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80052ca:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f7fc fa4b 	bl	8001770 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80052da:	bf00      	nop
 80052dc:	3708      	adds	r7, #8
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b082      	sub	sp, #8
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68da      	ldr	r2, [r3, #12]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f4:	b292      	uxth	r2, r2
 80052f6:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052fc:	1c9a      	adds	r2, r3, #2
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005306:	b29b      	uxth	r3, r3
 8005308:	3b01      	subs	r3, #1
 800530a:	b29a      	uxth	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005314:	b29b      	uxth	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10e      	bne.n	8005338 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	685a      	ldr	r2, [r3, #4]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005328:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f7ff ff93 	bl	800525e <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005338:	bf00      	nop
 800533a:	3708      	adds	r7, #8
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b086      	sub	sp, #24
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005356:	b2db      	uxtb	r3, r3
 8005358:	2b04      	cmp	r3, #4
 800535a:	d13a      	bne.n	80053d2 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	2b01      	cmp	r3, #1
 8005364:	d109      	bne.n	800537a <I2S_IRQHandler+0x3a>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005370:	2b40      	cmp	r3, #64	@ 0x40
 8005372:	d102      	bne.n	800537a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f7ff ffb4 	bl	80052e2 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005380:	2b40      	cmp	r3, #64	@ 0x40
 8005382:	d126      	bne.n	80053d2 <I2S_IRQHandler+0x92>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f003 0320 	and.w	r3, r3, #32
 800538e:	2b20      	cmp	r3, #32
 8005390:	d11f      	bne.n	80053d2 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80053a0:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80053a2:	2300      	movs	r3, #0
 80053a4:	613b      	str	r3, [r7, #16]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	613b      	str	r3, [r7, #16]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	613b      	str	r3, [r7, #16]
 80053b6:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053c4:	f043 0202 	orr.w	r2, r3, #2
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f7ff ff50 	bl	8005272 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b03      	cmp	r3, #3
 80053dc:	d136      	bne.n	800544c <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	f003 0302 	and.w	r3, r3, #2
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d109      	bne.n	80053fc <I2S_IRQHandler+0xbc>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053f2:	2b80      	cmp	r3, #128	@ 0x80
 80053f4:	d102      	bne.n	80053fc <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f7ff ff45 	bl	8005286 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	f003 0308 	and.w	r3, r3, #8
 8005402:	2b08      	cmp	r3, #8
 8005404:	d122      	bne.n	800544c <I2S_IRQHandler+0x10c>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f003 0320 	and.w	r3, r3, #32
 8005410:	2b20      	cmp	r3, #32
 8005412:	d11b      	bne.n	800544c <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005422:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005424:	2300      	movs	r3, #0
 8005426:	60fb      	str	r3, [r7, #12]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	60fb      	str	r3, [r7, #12]
 8005430:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2201      	movs	r2, #1
 8005436:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800543e:	f043 0204 	orr.w	r2, r3, #4
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f7ff ff13 	bl	8005272 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800544c:	bf00      	nop
 800544e:	3718      	adds	r7, #24
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b088      	sub	sp, #32
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a92      	ldr	r2, [pc, #584]	@ (80056b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d101      	bne.n	8005472 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800546e:	4b92      	ldr	r3, [pc, #584]	@ (80056b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005470:	e001      	b.n	8005476 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005472:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a8b      	ldr	r2, [pc, #556]	@ (80056b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d101      	bne.n	8005490 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800548c:	4b8a      	ldr	r3, [pc, #552]	@ (80056b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800548e:	e001      	b.n	8005494 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005490:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054a0:	d004      	beq.n	80054ac <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f040 8099 	bne.w	80055de <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	f003 0302 	and.w	r3, r3, #2
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d107      	bne.n	80054c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d002      	beq.n	80054c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 f925 	bl	8005710 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	f003 0301 	and.w	r3, r3, #1
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d107      	bne.n	80054e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d002      	beq.n	80054e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 f9c8 	bl	8005870 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054e6:	2b40      	cmp	r3, #64	@ 0x40
 80054e8:	d13a      	bne.n	8005560 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	f003 0320 	and.w	r3, r3, #32
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d035      	beq.n	8005560 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a6e      	ldr	r2, [pc, #440]	@ (80056b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d101      	bne.n	8005502 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80054fe:	4b6e      	ldr	r3, [pc, #440]	@ (80056b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005500:	e001      	b.n	8005506 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005502:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005506:	685a      	ldr	r2, [r3, #4]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4969      	ldr	r1, [pc, #420]	@ (80056b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800550e:	428b      	cmp	r3, r1
 8005510:	d101      	bne.n	8005516 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005512:	4b69      	ldr	r3, [pc, #420]	@ (80056b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005514:	e001      	b.n	800551a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005516:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800551a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800551e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800552e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005530:	2300      	movs	r3, #0
 8005532:	60fb      	str	r3, [r7, #12]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	60fb      	str	r3, [r7, #12]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	60fb      	str	r3, [r7, #12]
 8005544:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2201      	movs	r2, #1
 800554a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005552:	f043 0202 	orr.w	r2, r3, #2
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f7ff fe89 	bl	8005272 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	f003 0308 	and.w	r3, r3, #8
 8005566:	2b08      	cmp	r3, #8
 8005568:	f040 80c3 	bne.w	80056f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	f003 0320 	and.w	r3, r3, #32
 8005572:	2b00      	cmp	r3, #0
 8005574:	f000 80bd 	beq.w	80056f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005586:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a49      	ldr	r2, [pc, #292]	@ (80056b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d101      	bne.n	8005596 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005592:	4b49      	ldr	r3, [pc, #292]	@ (80056b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005594:	e001      	b.n	800559a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005596:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800559a:	685a      	ldr	r2, [r3, #4]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4944      	ldr	r1, [pc, #272]	@ (80056b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80055a2:	428b      	cmp	r3, r1
 80055a4:	d101      	bne.n	80055aa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80055a6:	4b44      	ldr	r3, [pc, #272]	@ (80056b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80055a8:	e001      	b.n	80055ae <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80055aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80055ae:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80055b2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80055b4:	2300      	movs	r3, #0
 80055b6:	60bb      	str	r3, [r7, #8]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	60bb      	str	r3, [r7, #8]
 80055c0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ce:	f043 0204 	orr.w	r2, r3, #4
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f7ff fe4b 	bl	8005272 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80055dc:	e089      	b.n	80056f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	f003 0302 	and.w	r3, r3, #2
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d107      	bne.n	80055f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d002      	beq.n	80055f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f8be 	bl	8005774 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d107      	bne.n	8005612 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005608:	2b00      	cmp	r3, #0
 800560a:	d002      	beq.n	8005612 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 f8fd 	bl	800580c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005618:	2b40      	cmp	r3, #64	@ 0x40
 800561a:	d12f      	bne.n	800567c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	f003 0320 	and.w	r3, r3, #32
 8005622:	2b00      	cmp	r3, #0
 8005624:	d02a      	beq.n	800567c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	685a      	ldr	r2, [r3, #4]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005634:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a1e      	ldr	r2, [pc, #120]	@ (80056b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d101      	bne.n	8005644 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005640:	4b1d      	ldr	r3, [pc, #116]	@ (80056b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005642:	e001      	b.n	8005648 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005644:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005648:	685a      	ldr	r2, [r3, #4]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4919      	ldr	r1, [pc, #100]	@ (80056b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005650:	428b      	cmp	r3, r1
 8005652:	d101      	bne.n	8005658 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005654:	4b18      	ldr	r3, [pc, #96]	@ (80056b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005656:	e001      	b.n	800565c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005658:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800565c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005660:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800566e:	f043 0202 	orr.w	r2, r3, #2
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f7ff fdfb 	bl	8005272 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	f003 0308 	and.w	r3, r3, #8
 8005682:	2b08      	cmp	r3, #8
 8005684:	d136      	bne.n	80056f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	f003 0320 	and.w	r3, r3, #32
 800568c:	2b00      	cmp	r3, #0
 800568e:	d031      	beq.n	80056f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a07      	ldr	r2, [pc, #28]	@ (80056b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d101      	bne.n	800569e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800569a:	4b07      	ldr	r3, [pc, #28]	@ (80056b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800569c:	e001      	b.n	80056a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800569e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80056a2:	685a      	ldr	r2, [r3, #4]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4902      	ldr	r1, [pc, #8]	@ (80056b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80056aa:	428b      	cmp	r3, r1
 80056ac:	d106      	bne.n	80056bc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80056ae:	4b02      	ldr	r3, [pc, #8]	@ (80056b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80056b0:	e006      	b.n	80056c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80056b2:	bf00      	nop
 80056b4:	40003800 	.word	0x40003800
 80056b8:	40003400 	.word	0x40003400
 80056bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80056c0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80056c4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	685a      	ldr	r2, [r3, #4]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80056d4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056e2:	f043 0204 	orr.w	r2, r3, #4
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f7ff fdc1 	bl	8005272 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80056f0:	e000      	b.n	80056f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80056f2:	bf00      	nop
}
 80056f4:	bf00      	nop
 80056f6:	3720      	adds	r7, #32
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800571c:	1c99      	adds	r1, r3, #2
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	6251      	str	r1, [r2, #36]	@ 0x24
 8005722:	881a      	ldrh	r2, [r3, #0]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800572e:	b29b      	uxth	r3, r3
 8005730:	3b01      	subs	r3, #1
 8005732:	b29a      	uxth	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800573c:	b29b      	uxth	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d113      	bne.n	800576a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005750:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005756:	b29b      	uxth	r3, r3
 8005758:	2b00      	cmp	r3, #0
 800575a:	d106      	bne.n	800576a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f7ff ffc9 	bl	80056fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800576a:	bf00      	nop
 800576c:	3708      	adds	r7, #8
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
	...

08005774 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005780:	1c99      	adds	r1, r3, #2
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	6251      	str	r1, [r2, #36]	@ 0x24
 8005786:	8819      	ldrh	r1, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a1d      	ldr	r2, [pc, #116]	@ (8005804 <I2SEx_TxISR_I2SExt+0x90>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d101      	bne.n	8005796 <I2SEx_TxISR_I2SExt+0x22>
 8005792:	4b1d      	ldr	r3, [pc, #116]	@ (8005808 <I2SEx_TxISR_I2SExt+0x94>)
 8005794:	e001      	b.n	800579a <I2SEx_TxISR_I2SExt+0x26>
 8005796:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800579a:	460a      	mov	r2, r1
 800579c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	3b01      	subs	r3, #1
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d121      	bne.n	80057fa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a12      	ldr	r2, [pc, #72]	@ (8005804 <I2SEx_TxISR_I2SExt+0x90>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d101      	bne.n	80057c4 <I2SEx_TxISR_I2SExt+0x50>
 80057c0:	4b11      	ldr	r3, [pc, #68]	@ (8005808 <I2SEx_TxISR_I2SExt+0x94>)
 80057c2:	e001      	b.n	80057c8 <I2SEx_TxISR_I2SExt+0x54>
 80057c4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80057c8:	685a      	ldr	r2, [r3, #4]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	490d      	ldr	r1, [pc, #52]	@ (8005804 <I2SEx_TxISR_I2SExt+0x90>)
 80057d0:	428b      	cmp	r3, r1
 80057d2:	d101      	bne.n	80057d8 <I2SEx_TxISR_I2SExt+0x64>
 80057d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005808 <I2SEx_TxISR_I2SExt+0x94>)
 80057d6:	e001      	b.n	80057dc <I2SEx_TxISR_I2SExt+0x68>
 80057d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80057dc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80057e0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d106      	bne.n	80057fa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f7ff ff81 	bl	80056fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80057fa:	bf00      	nop
 80057fc:	3708      	adds	r7, #8
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	40003800 	.word	0x40003800
 8005808:	40003400 	.word	0x40003400

0800580c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68d8      	ldr	r0, [r3, #12]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800581e:	1c99      	adds	r1, r3, #2
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005824:	b282      	uxth	r2, r0
 8005826:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800582c:	b29b      	uxth	r3, r3
 800582e:	3b01      	subs	r3, #1
 8005830:	b29a      	uxth	r2, r3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800583a:	b29b      	uxth	r3, r3
 800583c:	2b00      	cmp	r3, #0
 800583e:	d113      	bne.n	8005868 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	685a      	ldr	r2, [r3, #4]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800584e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005854:	b29b      	uxth	r3, r3
 8005856:	2b00      	cmp	r3, #0
 8005858:	d106      	bne.n	8005868 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2201      	movs	r2, #1
 800585e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f7ff ff4a 	bl	80056fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005868:	bf00      	nop
 800586a:	3708      	adds	r7, #8
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a20      	ldr	r2, [pc, #128]	@ (8005900 <I2SEx_RxISR_I2SExt+0x90>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d101      	bne.n	8005886 <I2SEx_RxISR_I2SExt+0x16>
 8005882:	4b20      	ldr	r3, [pc, #128]	@ (8005904 <I2SEx_RxISR_I2SExt+0x94>)
 8005884:	e001      	b.n	800588a <I2SEx_RxISR_I2SExt+0x1a>
 8005886:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800588a:	68d8      	ldr	r0, [r3, #12]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005890:	1c99      	adds	r1, r3, #2
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005896:	b282      	uxth	r2, r0
 8005898:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800589e:	b29b      	uxth	r3, r3
 80058a0:	3b01      	subs	r3, #1
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d121      	bne.n	80058f6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a12      	ldr	r2, [pc, #72]	@ (8005900 <I2SEx_RxISR_I2SExt+0x90>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d101      	bne.n	80058c0 <I2SEx_RxISR_I2SExt+0x50>
 80058bc:	4b11      	ldr	r3, [pc, #68]	@ (8005904 <I2SEx_RxISR_I2SExt+0x94>)
 80058be:	e001      	b.n	80058c4 <I2SEx_RxISR_I2SExt+0x54>
 80058c0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058c4:	685a      	ldr	r2, [r3, #4]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	490d      	ldr	r1, [pc, #52]	@ (8005900 <I2SEx_RxISR_I2SExt+0x90>)
 80058cc:	428b      	cmp	r3, r1
 80058ce:	d101      	bne.n	80058d4 <I2SEx_RxISR_I2SExt+0x64>
 80058d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005904 <I2SEx_RxISR_I2SExt+0x94>)
 80058d2:	e001      	b.n	80058d8 <I2SEx_RxISR_I2SExt+0x68>
 80058d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058d8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80058dc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d106      	bne.n	80058f6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f7ff ff03 	bl	80056fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80058f6:	bf00      	nop
 80058f8:	3708      	adds	r7, #8
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	40003800 	.word	0x40003800
 8005904:	40003400 	.word	0x40003400

08005908 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b086      	sub	sp, #24
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e267      	b.n	8005dea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	2b00      	cmp	r3, #0
 8005924:	d075      	beq.n	8005a12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005926:	4b88      	ldr	r3, [pc, #544]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f003 030c 	and.w	r3, r3, #12
 800592e:	2b04      	cmp	r3, #4
 8005930:	d00c      	beq.n	800594c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005932:	4b85      	ldr	r3, [pc, #532]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800593a:	2b08      	cmp	r3, #8
 800593c:	d112      	bne.n	8005964 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800593e:	4b82      	ldr	r3, [pc, #520]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005946:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800594a:	d10b      	bne.n	8005964 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800594c:	4b7e      	ldr	r3, [pc, #504]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d05b      	beq.n	8005a10 <HAL_RCC_OscConfig+0x108>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d157      	bne.n	8005a10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e242      	b.n	8005dea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800596c:	d106      	bne.n	800597c <HAL_RCC_OscConfig+0x74>
 800596e:	4b76      	ldr	r3, [pc, #472]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a75      	ldr	r2, [pc, #468]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 8005974:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005978:	6013      	str	r3, [r2, #0]
 800597a:	e01d      	b.n	80059b8 <HAL_RCC_OscConfig+0xb0>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005984:	d10c      	bne.n	80059a0 <HAL_RCC_OscConfig+0x98>
 8005986:	4b70      	ldr	r3, [pc, #448]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a6f      	ldr	r2, [pc, #444]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 800598c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005990:	6013      	str	r3, [r2, #0]
 8005992:	4b6d      	ldr	r3, [pc, #436]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a6c      	ldr	r2, [pc, #432]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 8005998:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800599c:	6013      	str	r3, [r2, #0]
 800599e:	e00b      	b.n	80059b8 <HAL_RCC_OscConfig+0xb0>
 80059a0:	4b69      	ldr	r3, [pc, #420]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a68      	ldr	r2, [pc, #416]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 80059a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059aa:	6013      	str	r3, [r2, #0]
 80059ac:	4b66      	ldr	r3, [pc, #408]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a65      	ldr	r2, [pc, #404]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 80059b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80059b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d013      	beq.n	80059e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059c0:	f7fc f9ca 	bl	8001d58 <HAL_GetTick>
 80059c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059c6:	e008      	b.n	80059da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059c8:	f7fc f9c6 	bl	8001d58 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	2b64      	cmp	r3, #100	@ 0x64
 80059d4:	d901      	bls.n	80059da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e207      	b.n	8005dea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059da:	4b5b      	ldr	r3, [pc, #364]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d0f0      	beq.n	80059c8 <HAL_RCC_OscConfig+0xc0>
 80059e6:	e014      	b.n	8005a12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059e8:	f7fc f9b6 	bl	8001d58 <HAL_GetTick>
 80059ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059ee:	e008      	b.n	8005a02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059f0:	f7fc f9b2 	bl	8001d58 <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	2b64      	cmp	r3, #100	@ 0x64
 80059fc:	d901      	bls.n	8005a02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e1f3      	b.n	8005dea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a02:	4b51      	ldr	r3, [pc, #324]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1f0      	bne.n	80059f0 <HAL_RCC_OscConfig+0xe8>
 8005a0e:	e000      	b.n	8005a12 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0302 	and.w	r3, r3, #2
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d063      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005a1e:	4b4a      	ldr	r3, [pc, #296]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f003 030c 	and.w	r3, r3, #12
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00b      	beq.n	8005a42 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a2a:	4b47      	ldr	r3, [pc, #284]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005a32:	2b08      	cmp	r3, #8
 8005a34:	d11c      	bne.n	8005a70 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a36:	4b44      	ldr	r3, [pc, #272]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d116      	bne.n	8005a70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a42:	4b41      	ldr	r3, [pc, #260]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 0302 	and.w	r3, r3, #2
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d005      	beq.n	8005a5a <HAL_RCC_OscConfig+0x152>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d001      	beq.n	8005a5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e1c7      	b.n	8005dea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a5a:	4b3b      	ldr	r3, [pc, #236]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	00db      	lsls	r3, r3, #3
 8005a68:	4937      	ldr	r1, [pc, #220]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a6e:	e03a      	b.n	8005ae6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d020      	beq.n	8005aba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a78:	4b34      	ldr	r3, [pc, #208]	@ (8005b4c <HAL_RCC_OscConfig+0x244>)
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a7e:	f7fc f96b 	bl	8001d58 <HAL_GetTick>
 8005a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a84:	e008      	b.n	8005a98 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a86:	f7fc f967 	bl	8001d58 <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d901      	bls.n	8005a98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	e1a8      	b.n	8005dea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a98:	4b2b      	ldr	r3, [pc, #172]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0302 	and.w	r3, r3, #2
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d0f0      	beq.n	8005a86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aa4:	4b28      	ldr	r3, [pc, #160]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	00db      	lsls	r3, r3, #3
 8005ab2:	4925      	ldr	r1, [pc, #148]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	600b      	str	r3, [r1, #0]
 8005ab8:	e015      	b.n	8005ae6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005aba:	4b24      	ldr	r3, [pc, #144]	@ (8005b4c <HAL_RCC_OscConfig+0x244>)
 8005abc:	2200      	movs	r2, #0
 8005abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ac0:	f7fc f94a 	bl	8001d58 <HAL_GetTick>
 8005ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ac6:	e008      	b.n	8005ada <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ac8:	f7fc f946 	bl	8001d58 <HAL_GetTick>
 8005acc:	4602      	mov	r2, r0
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d901      	bls.n	8005ada <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e187      	b.n	8005dea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ada:	4b1b      	ldr	r3, [pc, #108]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0302 	and.w	r3, r3, #2
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1f0      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0308 	and.w	r3, r3, #8
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d036      	beq.n	8005b60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d016      	beq.n	8005b28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005afa:	4b15      	ldr	r3, [pc, #84]	@ (8005b50 <HAL_RCC_OscConfig+0x248>)
 8005afc:	2201      	movs	r2, #1
 8005afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b00:	f7fc f92a 	bl	8001d58 <HAL_GetTick>
 8005b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b06:	e008      	b.n	8005b1a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b08:	f7fc f926 	bl	8001d58 <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d901      	bls.n	8005b1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e167      	b.n	8005dea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 8005b1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b1e:	f003 0302 	and.w	r3, r3, #2
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d0f0      	beq.n	8005b08 <HAL_RCC_OscConfig+0x200>
 8005b26:	e01b      	b.n	8005b60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b28:	4b09      	ldr	r3, [pc, #36]	@ (8005b50 <HAL_RCC_OscConfig+0x248>)
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b2e:	f7fc f913 	bl	8001d58 <HAL_GetTick>
 8005b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b34:	e00e      	b.n	8005b54 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b36:	f7fc f90f 	bl	8001d58 <HAL_GetTick>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d907      	bls.n	8005b54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e150      	b.n	8005dea <HAL_RCC_OscConfig+0x4e2>
 8005b48:	40023800 	.word	0x40023800
 8005b4c:	42470000 	.word	0x42470000
 8005b50:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b54:	4b88      	ldr	r3, [pc, #544]	@ (8005d78 <HAL_RCC_OscConfig+0x470>)
 8005b56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b58:	f003 0302 	and.w	r3, r3, #2
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1ea      	bne.n	8005b36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0304 	and.w	r3, r3, #4
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f000 8097 	beq.w	8005c9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b72:	4b81      	ldr	r3, [pc, #516]	@ (8005d78 <HAL_RCC_OscConfig+0x470>)
 8005b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10f      	bne.n	8005b9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b7e:	2300      	movs	r3, #0
 8005b80:	60bb      	str	r3, [r7, #8]
 8005b82:	4b7d      	ldr	r3, [pc, #500]	@ (8005d78 <HAL_RCC_OscConfig+0x470>)
 8005b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b86:	4a7c      	ldr	r2, [pc, #496]	@ (8005d78 <HAL_RCC_OscConfig+0x470>)
 8005b88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b8e:	4b7a      	ldr	r3, [pc, #488]	@ (8005d78 <HAL_RCC_OscConfig+0x470>)
 8005b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b96:	60bb      	str	r3, [r7, #8]
 8005b98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b9e:	4b77      	ldr	r3, [pc, #476]	@ (8005d7c <HAL_RCC_OscConfig+0x474>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d118      	bne.n	8005bdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005baa:	4b74      	ldr	r3, [pc, #464]	@ (8005d7c <HAL_RCC_OscConfig+0x474>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a73      	ldr	r2, [pc, #460]	@ (8005d7c <HAL_RCC_OscConfig+0x474>)
 8005bb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bb6:	f7fc f8cf 	bl	8001d58 <HAL_GetTick>
 8005bba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bbc:	e008      	b.n	8005bd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bbe:	f7fc f8cb 	bl	8001d58 <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d901      	bls.n	8005bd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e10c      	b.n	8005dea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bd0:	4b6a      	ldr	r3, [pc, #424]	@ (8005d7c <HAL_RCC_OscConfig+0x474>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d0f0      	beq.n	8005bbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d106      	bne.n	8005bf2 <HAL_RCC_OscConfig+0x2ea>
 8005be4:	4b64      	ldr	r3, [pc, #400]	@ (8005d78 <HAL_RCC_OscConfig+0x470>)
 8005be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005be8:	4a63      	ldr	r2, [pc, #396]	@ (8005d78 <HAL_RCC_OscConfig+0x470>)
 8005bea:	f043 0301 	orr.w	r3, r3, #1
 8005bee:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bf0:	e01c      	b.n	8005c2c <HAL_RCC_OscConfig+0x324>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	2b05      	cmp	r3, #5
 8005bf8:	d10c      	bne.n	8005c14 <HAL_RCC_OscConfig+0x30c>
 8005bfa:	4b5f      	ldr	r3, [pc, #380]	@ (8005d78 <HAL_RCC_OscConfig+0x470>)
 8005bfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bfe:	4a5e      	ldr	r2, [pc, #376]	@ (8005d78 <HAL_RCC_OscConfig+0x470>)
 8005c00:	f043 0304 	orr.w	r3, r3, #4
 8005c04:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c06:	4b5c      	ldr	r3, [pc, #368]	@ (8005d78 <HAL_RCC_OscConfig+0x470>)
 8005c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c0a:	4a5b      	ldr	r2, [pc, #364]	@ (8005d78 <HAL_RCC_OscConfig+0x470>)
 8005c0c:	f043 0301 	orr.w	r3, r3, #1
 8005c10:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c12:	e00b      	b.n	8005c2c <HAL_RCC_OscConfig+0x324>
 8005c14:	4b58      	ldr	r3, [pc, #352]	@ (8005d78 <HAL_RCC_OscConfig+0x470>)
 8005c16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c18:	4a57      	ldr	r2, [pc, #348]	@ (8005d78 <HAL_RCC_OscConfig+0x470>)
 8005c1a:	f023 0301 	bic.w	r3, r3, #1
 8005c1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c20:	4b55      	ldr	r3, [pc, #340]	@ (8005d78 <HAL_RCC_OscConfig+0x470>)
 8005c22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c24:	4a54      	ldr	r2, [pc, #336]	@ (8005d78 <HAL_RCC_OscConfig+0x470>)
 8005c26:	f023 0304 	bic.w	r3, r3, #4
 8005c2a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d015      	beq.n	8005c60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c34:	f7fc f890 	bl	8001d58 <HAL_GetTick>
 8005c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c3a:	e00a      	b.n	8005c52 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c3c:	f7fc f88c 	bl	8001d58 <HAL_GetTick>
 8005c40:	4602      	mov	r2, r0
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d901      	bls.n	8005c52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	e0cb      	b.n	8005dea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c52:	4b49      	ldr	r3, [pc, #292]	@ (8005d78 <HAL_RCC_OscConfig+0x470>)
 8005c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c56:	f003 0302 	and.w	r3, r3, #2
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d0ee      	beq.n	8005c3c <HAL_RCC_OscConfig+0x334>
 8005c5e:	e014      	b.n	8005c8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c60:	f7fc f87a 	bl	8001d58 <HAL_GetTick>
 8005c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c66:	e00a      	b.n	8005c7e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c68:	f7fc f876 	bl	8001d58 <HAL_GetTick>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d901      	bls.n	8005c7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e0b5      	b.n	8005dea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c7e:	4b3e      	ldr	r3, [pc, #248]	@ (8005d78 <HAL_RCC_OscConfig+0x470>)
 8005c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c82:	f003 0302 	and.w	r3, r3, #2
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d1ee      	bne.n	8005c68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c8a:	7dfb      	ldrb	r3, [r7, #23]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d105      	bne.n	8005c9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c90:	4b39      	ldr	r3, [pc, #228]	@ (8005d78 <HAL_RCC_OscConfig+0x470>)
 8005c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c94:	4a38      	ldr	r2, [pc, #224]	@ (8005d78 <HAL_RCC_OscConfig+0x470>)
 8005c96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c9a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	699b      	ldr	r3, [r3, #24]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f000 80a1 	beq.w	8005de8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ca6:	4b34      	ldr	r3, [pc, #208]	@ (8005d78 <HAL_RCC_OscConfig+0x470>)
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f003 030c 	and.w	r3, r3, #12
 8005cae:	2b08      	cmp	r3, #8
 8005cb0:	d05c      	beq.n	8005d6c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d141      	bne.n	8005d3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cba:	4b31      	ldr	r3, [pc, #196]	@ (8005d80 <HAL_RCC_OscConfig+0x478>)
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cc0:	f7fc f84a 	bl	8001d58 <HAL_GetTick>
 8005cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cc6:	e008      	b.n	8005cda <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cc8:	f7fc f846 	bl	8001d58 <HAL_GetTick>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d901      	bls.n	8005cda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e087      	b.n	8005dea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cda:	4b27      	ldr	r3, [pc, #156]	@ (8005d78 <HAL_RCC_OscConfig+0x470>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1f0      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	69da      	ldr	r2, [r3, #28]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	431a      	orrs	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf4:	019b      	lsls	r3, r3, #6
 8005cf6:	431a      	orrs	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cfc:	085b      	lsrs	r3, r3, #1
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	041b      	lsls	r3, r3, #16
 8005d02:	431a      	orrs	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d08:	061b      	lsls	r3, r3, #24
 8005d0a:	491b      	ldr	r1, [pc, #108]	@ (8005d78 <HAL_RCC_OscConfig+0x470>)
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d10:	4b1b      	ldr	r3, [pc, #108]	@ (8005d80 <HAL_RCC_OscConfig+0x478>)
 8005d12:	2201      	movs	r2, #1
 8005d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d16:	f7fc f81f 	bl	8001d58 <HAL_GetTick>
 8005d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d1c:	e008      	b.n	8005d30 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d1e:	f7fc f81b 	bl	8001d58 <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d901      	bls.n	8005d30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e05c      	b.n	8005dea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d30:	4b11      	ldr	r3, [pc, #68]	@ (8005d78 <HAL_RCC_OscConfig+0x470>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d0f0      	beq.n	8005d1e <HAL_RCC_OscConfig+0x416>
 8005d3c:	e054      	b.n	8005de8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d3e:	4b10      	ldr	r3, [pc, #64]	@ (8005d80 <HAL_RCC_OscConfig+0x478>)
 8005d40:	2200      	movs	r2, #0
 8005d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d44:	f7fc f808 	bl	8001d58 <HAL_GetTick>
 8005d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d4a:	e008      	b.n	8005d5e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d4c:	f7fc f804 	bl	8001d58 <HAL_GetTick>
 8005d50:	4602      	mov	r2, r0
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d901      	bls.n	8005d5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e045      	b.n	8005dea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d5e:	4b06      	ldr	r3, [pc, #24]	@ (8005d78 <HAL_RCC_OscConfig+0x470>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1f0      	bne.n	8005d4c <HAL_RCC_OscConfig+0x444>
 8005d6a:	e03d      	b.n	8005de8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d107      	bne.n	8005d84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e038      	b.n	8005dea <HAL_RCC_OscConfig+0x4e2>
 8005d78:	40023800 	.word	0x40023800
 8005d7c:	40007000 	.word	0x40007000
 8005d80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d84:	4b1b      	ldr	r3, [pc, #108]	@ (8005df4 <HAL_RCC_OscConfig+0x4ec>)
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d028      	beq.n	8005de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d121      	bne.n	8005de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d11a      	bne.n	8005de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005db4:	4013      	ands	r3, r2
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005dba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d111      	bne.n	8005de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dca:	085b      	lsrs	r3, r3, #1
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d107      	bne.n	8005de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d001      	beq.n	8005de8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e000      	b.n	8005dea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3718      	adds	r7, #24
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	40023800 	.word	0x40023800

08005df8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d101      	bne.n	8005e0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e0cc      	b.n	8005fa6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e0c:	4b68      	ldr	r3, [pc, #416]	@ (8005fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0307 	and.w	r3, r3, #7
 8005e14:	683a      	ldr	r2, [r7, #0]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d90c      	bls.n	8005e34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e1a:	4b65      	ldr	r3, [pc, #404]	@ (8005fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e1c:	683a      	ldr	r2, [r7, #0]
 8005e1e:	b2d2      	uxtb	r2, r2
 8005e20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e22:	4b63      	ldr	r3, [pc, #396]	@ (8005fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 0307 	and.w	r3, r3, #7
 8005e2a:	683a      	ldr	r2, [r7, #0]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d001      	beq.n	8005e34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e0b8      	b.n	8005fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0302 	and.w	r3, r3, #2
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d020      	beq.n	8005e82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0304 	and.w	r3, r3, #4
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d005      	beq.n	8005e58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e4c:	4b59      	ldr	r3, [pc, #356]	@ (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	4a58      	ldr	r2, [pc, #352]	@ (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e52:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005e56:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0308 	and.w	r3, r3, #8
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d005      	beq.n	8005e70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e64:	4b53      	ldr	r3, [pc, #332]	@ (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	4a52      	ldr	r2, [pc, #328]	@ (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e6a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005e6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e70:	4b50      	ldr	r3, [pc, #320]	@ (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	494d      	ldr	r1, [pc, #308]	@ (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 0301 	and.w	r3, r3, #1
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d044      	beq.n	8005f18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d107      	bne.n	8005ea6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e96:	4b47      	ldr	r3, [pc, #284]	@ (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d119      	bne.n	8005ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e07f      	b.n	8005fa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d003      	beq.n	8005eb6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005eb2:	2b03      	cmp	r3, #3
 8005eb4:	d107      	bne.n	8005ec6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005eb6:	4b3f      	ldr	r3, [pc, #252]	@ (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d109      	bne.n	8005ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e06f      	b.n	8005fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ec6:	4b3b      	ldr	r3, [pc, #236]	@ (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0302 	and.w	r3, r3, #2
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d101      	bne.n	8005ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e067      	b.n	8005fa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ed6:	4b37      	ldr	r3, [pc, #220]	@ (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f023 0203 	bic.w	r2, r3, #3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	4934      	ldr	r1, [pc, #208]	@ (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ee8:	f7fb ff36 	bl	8001d58 <HAL_GetTick>
 8005eec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eee:	e00a      	b.n	8005f06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ef0:	f7fb ff32 	bl	8001d58 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d901      	bls.n	8005f06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	e04f      	b.n	8005fa6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f06:	4b2b      	ldr	r3, [pc, #172]	@ (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	f003 020c 	and.w	r2, r3, #12
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d1eb      	bne.n	8005ef0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f18:	4b25      	ldr	r3, [pc, #148]	@ (8005fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0307 	and.w	r3, r3, #7
 8005f20:	683a      	ldr	r2, [r7, #0]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d20c      	bcs.n	8005f40 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f26:	4b22      	ldr	r3, [pc, #136]	@ (8005fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f28:	683a      	ldr	r2, [r7, #0]
 8005f2a:	b2d2      	uxtb	r2, r2
 8005f2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f2e:	4b20      	ldr	r3, [pc, #128]	@ (8005fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0307 	and.w	r3, r3, #7
 8005f36:	683a      	ldr	r2, [r7, #0]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d001      	beq.n	8005f40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e032      	b.n	8005fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0304 	and.w	r3, r3, #4
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d008      	beq.n	8005f5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f4c:	4b19      	ldr	r3, [pc, #100]	@ (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	4916      	ldr	r1, [pc, #88]	@ (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0308 	and.w	r3, r3, #8
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d009      	beq.n	8005f7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f6a:	4b12      	ldr	r3, [pc, #72]	@ (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	00db      	lsls	r3, r3, #3
 8005f78:	490e      	ldr	r1, [pc, #56]	@ (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005f7e:	f000 f821 	bl	8005fc4 <HAL_RCC_GetSysClockFreq>
 8005f82:	4602      	mov	r2, r0
 8005f84:	4b0b      	ldr	r3, [pc, #44]	@ (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	091b      	lsrs	r3, r3, #4
 8005f8a:	f003 030f 	and.w	r3, r3, #15
 8005f8e:	490a      	ldr	r1, [pc, #40]	@ (8005fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f90:	5ccb      	ldrb	r3, [r1, r3]
 8005f92:	fa22 f303 	lsr.w	r3, r2, r3
 8005f96:	4a09      	ldr	r2, [pc, #36]	@ (8005fbc <HAL_RCC_ClockConfig+0x1c4>)
 8005f98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005f9a:	4b09      	ldr	r3, [pc, #36]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7fb fe96 	bl	8001cd0 <HAL_InitTick>

  return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	40023c00 	.word	0x40023c00
 8005fb4:	40023800 	.word	0x40023800
 8005fb8:	0800c2f8 	.word	0x0800c2f8
 8005fbc:	20000000 	.word	0x20000000
 8005fc0:	20000004 	.word	0x20000004

08005fc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fc8:	b094      	sub	sp, #80	@ 0x50
 8005fca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005fdc:	4b79      	ldr	r3, [pc, #484]	@ (80061c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	f003 030c 	and.w	r3, r3, #12
 8005fe4:	2b08      	cmp	r3, #8
 8005fe6:	d00d      	beq.n	8006004 <HAL_RCC_GetSysClockFreq+0x40>
 8005fe8:	2b08      	cmp	r3, #8
 8005fea:	f200 80e1 	bhi.w	80061b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d002      	beq.n	8005ff8 <HAL_RCC_GetSysClockFreq+0x34>
 8005ff2:	2b04      	cmp	r3, #4
 8005ff4:	d003      	beq.n	8005ffe <HAL_RCC_GetSysClockFreq+0x3a>
 8005ff6:	e0db      	b.n	80061b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ff8:	4b73      	ldr	r3, [pc, #460]	@ (80061c8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ffa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ffc:	e0db      	b.n	80061b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ffe:	4b73      	ldr	r3, [pc, #460]	@ (80061cc <HAL_RCC_GetSysClockFreq+0x208>)
 8006000:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006002:	e0d8      	b.n	80061b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006004:	4b6f      	ldr	r3, [pc, #444]	@ (80061c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800600c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800600e:	4b6d      	ldr	r3, [pc, #436]	@ (80061c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d063      	beq.n	80060e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800601a:	4b6a      	ldr	r3, [pc, #424]	@ (80061c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	099b      	lsrs	r3, r3, #6
 8006020:	2200      	movs	r2, #0
 8006022:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006024:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800602c:	633b      	str	r3, [r7, #48]	@ 0x30
 800602e:	2300      	movs	r3, #0
 8006030:	637b      	str	r3, [r7, #52]	@ 0x34
 8006032:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006036:	4622      	mov	r2, r4
 8006038:	462b      	mov	r3, r5
 800603a:	f04f 0000 	mov.w	r0, #0
 800603e:	f04f 0100 	mov.w	r1, #0
 8006042:	0159      	lsls	r1, r3, #5
 8006044:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006048:	0150      	lsls	r0, r2, #5
 800604a:	4602      	mov	r2, r0
 800604c:	460b      	mov	r3, r1
 800604e:	4621      	mov	r1, r4
 8006050:	1a51      	subs	r1, r2, r1
 8006052:	6139      	str	r1, [r7, #16]
 8006054:	4629      	mov	r1, r5
 8006056:	eb63 0301 	sbc.w	r3, r3, r1
 800605a:	617b      	str	r3, [r7, #20]
 800605c:	f04f 0200 	mov.w	r2, #0
 8006060:	f04f 0300 	mov.w	r3, #0
 8006064:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006068:	4659      	mov	r1, fp
 800606a:	018b      	lsls	r3, r1, #6
 800606c:	4651      	mov	r1, sl
 800606e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006072:	4651      	mov	r1, sl
 8006074:	018a      	lsls	r2, r1, #6
 8006076:	4651      	mov	r1, sl
 8006078:	ebb2 0801 	subs.w	r8, r2, r1
 800607c:	4659      	mov	r1, fp
 800607e:	eb63 0901 	sbc.w	r9, r3, r1
 8006082:	f04f 0200 	mov.w	r2, #0
 8006086:	f04f 0300 	mov.w	r3, #0
 800608a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800608e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006092:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006096:	4690      	mov	r8, r2
 8006098:	4699      	mov	r9, r3
 800609a:	4623      	mov	r3, r4
 800609c:	eb18 0303 	adds.w	r3, r8, r3
 80060a0:	60bb      	str	r3, [r7, #8]
 80060a2:	462b      	mov	r3, r5
 80060a4:	eb49 0303 	adc.w	r3, r9, r3
 80060a8:	60fb      	str	r3, [r7, #12]
 80060aa:	f04f 0200 	mov.w	r2, #0
 80060ae:	f04f 0300 	mov.w	r3, #0
 80060b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80060b6:	4629      	mov	r1, r5
 80060b8:	024b      	lsls	r3, r1, #9
 80060ba:	4621      	mov	r1, r4
 80060bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80060c0:	4621      	mov	r1, r4
 80060c2:	024a      	lsls	r2, r1, #9
 80060c4:	4610      	mov	r0, r2
 80060c6:	4619      	mov	r1, r3
 80060c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060ca:	2200      	movs	r2, #0
 80060cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80060d4:	f7fa fcea 	bl	8000aac <__aeabi_uldivmod>
 80060d8:	4602      	mov	r2, r0
 80060da:	460b      	mov	r3, r1
 80060dc:	4613      	mov	r3, r2
 80060de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060e0:	e058      	b.n	8006194 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060e2:	4b38      	ldr	r3, [pc, #224]	@ (80061c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	099b      	lsrs	r3, r3, #6
 80060e8:	2200      	movs	r2, #0
 80060ea:	4618      	mov	r0, r3
 80060ec:	4611      	mov	r1, r2
 80060ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80060f2:	623b      	str	r3, [r7, #32]
 80060f4:	2300      	movs	r3, #0
 80060f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80060f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80060fc:	4642      	mov	r2, r8
 80060fe:	464b      	mov	r3, r9
 8006100:	f04f 0000 	mov.w	r0, #0
 8006104:	f04f 0100 	mov.w	r1, #0
 8006108:	0159      	lsls	r1, r3, #5
 800610a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800610e:	0150      	lsls	r0, r2, #5
 8006110:	4602      	mov	r2, r0
 8006112:	460b      	mov	r3, r1
 8006114:	4641      	mov	r1, r8
 8006116:	ebb2 0a01 	subs.w	sl, r2, r1
 800611a:	4649      	mov	r1, r9
 800611c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006120:	f04f 0200 	mov.w	r2, #0
 8006124:	f04f 0300 	mov.w	r3, #0
 8006128:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800612c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006130:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006134:	ebb2 040a 	subs.w	r4, r2, sl
 8006138:	eb63 050b 	sbc.w	r5, r3, fp
 800613c:	f04f 0200 	mov.w	r2, #0
 8006140:	f04f 0300 	mov.w	r3, #0
 8006144:	00eb      	lsls	r3, r5, #3
 8006146:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800614a:	00e2      	lsls	r2, r4, #3
 800614c:	4614      	mov	r4, r2
 800614e:	461d      	mov	r5, r3
 8006150:	4643      	mov	r3, r8
 8006152:	18e3      	adds	r3, r4, r3
 8006154:	603b      	str	r3, [r7, #0]
 8006156:	464b      	mov	r3, r9
 8006158:	eb45 0303 	adc.w	r3, r5, r3
 800615c:	607b      	str	r3, [r7, #4]
 800615e:	f04f 0200 	mov.w	r2, #0
 8006162:	f04f 0300 	mov.w	r3, #0
 8006166:	e9d7 4500 	ldrd	r4, r5, [r7]
 800616a:	4629      	mov	r1, r5
 800616c:	028b      	lsls	r3, r1, #10
 800616e:	4621      	mov	r1, r4
 8006170:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006174:	4621      	mov	r1, r4
 8006176:	028a      	lsls	r2, r1, #10
 8006178:	4610      	mov	r0, r2
 800617a:	4619      	mov	r1, r3
 800617c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800617e:	2200      	movs	r2, #0
 8006180:	61bb      	str	r3, [r7, #24]
 8006182:	61fa      	str	r2, [r7, #28]
 8006184:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006188:	f7fa fc90 	bl	8000aac <__aeabi_uldivmod>
 800618c:	4602      	mov	r2, r0
 800618e:	460b      	mov	r3, r1
 8006190:	4613      	mov	r3, r2
 8006192:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006194:	4b0b      	ldr	r3, [pc, #44]	@ (80061c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	0c1b      	lsrs	r3, r3, #16
 800619a:	f003 0303 	and.w	r3, r3, #3
 800619e:	3301      	adds	r3, #1
 80061a0:	005b      	lsls	r3, r3, #1
 80061a2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80061a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80061a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80061ae:	e002      	b.n	80061b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80061b0:	4b05      	ldr	r3, [pc, #20]	@ (80061c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80061b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80061b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3750      	adds	r7, #80	@ 0x50
 80061bc:	46bd      	mov	sp, r7
 80061be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061c2:	bf00      	nop
 80061c4:	40023800 	.word	0x40023800
 80061c8:	00f42400 	.word	0x00f42400
 80061cc:	007a1200 	.word	0x007a1200

080061d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061d0:	b480      	push	{r7}
 80061d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061d4:	4b03      	ldr	r3, [pc, #12]	@ (80061e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80061d6:	681b      	ldr	r3, [r3, #0]
}
 80061d8:	4618      	mov	r0, r3
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	20000000 	.word	0x20000000

080061e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80061ec:	f7ff fff0 	bl	80061d0 <HAL_RCC_GetHCLKFreq>
 80061f0:	4602      	mov	r2, r0
 80061f2:	4b05      	ldr	r3, [pc, #20]	@ (8006208 <HAL_RCC_GetPCLK1Freq+0x20>)
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	0a9b      	lsrs	r3, r3, #10
 80061f8:	f003 0307 	and.w	r3, r3, #7
 80061fc:	4903      	ldr	r1, [pc, #12]	@ (800620c <HAL_RCC_GetPCLK1Freq+0x24>)
 80061fe:	5ccb      	ldrb	r3, [r1, r3]
 8006200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006204:	4618      	mov	r0, r3
 8006206:	bd80      	pop	{r7, pc}
 8006208:	40023800 	.word	0x40023800
 800620c:	0800c308 	.word	0x0800c308

08006210 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b086      	sub	sp, #24
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006218:	2300      	movs	r3, #0
 800621a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800621c:	2300      	movs	r3, #0
 800621e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0301 	and.w	r3, r3, #1
 8006228:	2b00      	cmp	r3, #0
 800622a:	d105      	bne.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006234:	2b00      	cmp	r3, #0
 8006236:	d035      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006238:	4b62      	ldr	r3, [pc, #392]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800623a:	2200      	movs	r2, #0
 800623c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800623e:	f7fb fd8b 	bl	8001d58 <HAL_GetTick>
 8006242:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006244:	e008      	b.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006246:	f7fb fd87 	bl	8001d58 <HAL_GetTick>
 800624a:	4602      	mov	r2, r0
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	1ad3      	subs	r3, r2, r3
 8006250:	2b02      	cmp	r3, #2
 8006252:	d901      	bls.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e0b0      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006258:	4b5b      	ldr	r3, [pc, #364]	@ (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006260:	2b00      	cmp	r3, #0
 8006262:	d1f0      	bne.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	019a      	lsls	r2, r3, #6
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	071b      	lsls	r3, r3, #28
 8006270:	4955      	ldr	r1, [pc, #340]	@ (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006272:	4313      	orrs	r3, r2
 8006274:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006278:	4b52      	ldr	r3, [pc, #328]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800627a:	2201      	movs	r2, #1
 800627c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800627e:	f7fb fd6b 	bl	8001d58 <HAL_GetTick>
 8006282:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006284:	e008      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006286:	f7fb fd67 	bl	8001d58 <HAL_GetTick>
 800628a:	4602      	mov	r2, r0
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	1ad3      	subs	r3, r2, r3
 8006290:	2b02      	cmp	r3, #2
 8006292:	d901      	bls.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006294:	2303      	movs	r3, #3
 8006296:	e090      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006298:	4b4b      	ldr	r3, [pc, #300]	@ (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d0f0      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0302 	and.w	r3, r3, #2
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f000 8083 	beq.w	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80062b2:	2300      	movs	r3, #0
 80062b4:	60fb      	str	r3, [r7, #12]
 80062b6:	4b44      	ldr	r3, [pc, #272]	@ (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ba:	4a43      	ldr	r2, [pc, #268]	@ (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80062c2:	4b41      	ldr	r3, [pc, #260]	@ (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062ca:	60fb      	str	r3, [r7, #12]
 80062cc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80062ce:	4b3f      	ldr	r3, [pc, #252]	@ (80063cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a3e      	ldr	r2, [pc, #248]	@ (80063cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80062d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062d8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80062da:	f7fb fd3d 	bl	8001d58 <HAL_GetTick>
 80062de:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80062e0:	e008      	b.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062e2:	f7fb fd39 	bl	8001d58 <HAL_GetTick>
 80062e6:	4602      	mov	r2, r0
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	d901      	bls.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80062f0:	2303      	movs	r3, #3
 80062f2:	e062      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80062f4:	4b35      	ldr	r3, [pc, #212]	@ (80063cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d0f0      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006300:	4b31      	ldr	r3, [pc, #196]	@ (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006304:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006308:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d02f      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	429a      	cmp	r2, r3
 800631c:	d028      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800631e:	4b2a      	ldr	r3, [pc, #168]	@ (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006322:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006326:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006328:	4b29      	ldr	r3, [pc, #164]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800632a:	2201      	movs	r2, #1
 800632c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800632e:	4b28      	ldr	r3, [pc, #160]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006330:	2200      	movs	r2, #0
 8006332:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006334:	4a24      	ldr	r2, [pc, #144]	@ (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800633a:	4b23      	ldr	r3, [pc, #140]	@ (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800633c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800633e:	f003 0301 	and.w	r3, r3, #1
 8006342:	2b01      	cmp	r3, #1
 8006344:	d114      	bne.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006346:	f7fb fd07 	bl	8001d58 <HAL_GetTick>
 800634a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800634c:	e00a      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800634e:	f7fb fd03 	bl	8001d58 <HAL_GetTick>
 8006352:	4602      	mov	r2, r0
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	f241 3288 	movw	r2, #5000	@ 0x1388
 800635c:	4293      	cmp	r3, r2
 800635e:	d901      	bls.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	e02a      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006364:	4b18      	ldr	r3, [pc, #96]	@ (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006366:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006368:	f003 0302 	and.w	r3, r3, #2
 800636c:	2b00      	cmp	r3, #0
 800636e:	d0ee      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006378:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800637c:	d10d      	bne.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800637e:	4b12      	ldr	r3, [pc, #72]	@ (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800638e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006392:	490d      	ldr	r1, [pc, #52]	@ (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006394:	4313      	orrs	r3, r2
 8006396:	608b      	str	r3, [r1, #8]
 8006398:	e005      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800639a:	4b0b      	ldr	r3, [pc, #44]	@ (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	4a0a      	ldr	r2, [pc, #40]	@ (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063a0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80063a4:	6093      	str	r3, [r2, #8]
 80063a6:	4b08      	ldr	r3, [pc, #32]	@ (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063a8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063b2:	4905      	ldr	r1, [pc, #20]	@ (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063b4:	4313      	orrs	r3, r2
 80063b6:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3718      	adds	r7, #24
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	42470068 	.word	0x42470068
 80063c8:	40023800 	.word	0x40023800
 80063cc:	40007000 	.word	0x40007000
 80063d0:	42470e40 	.word	0x42470e40

080063d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b087      	sub	sp, #28
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80063dc:	2300      	movs	r3, #0
 80063de:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80063e0:	2300      	movs	r3, #0
 80063e2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80063e4:	2300      	movs	r3, #0
 80063e6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80063e8:	2300      	movs	r3, #0
 80063ea:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d13f      	bne.n	8006472 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80063f2:	4b24      	ldr	r3, [pc, #144]	@ (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80063fa:	60fb      	str	r3, [r7, #12]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d006      	beq.n	8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006408:	d12f      	bne.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800640a:	4b1f      	ldr	r3, [pc, #124]	@ (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800640c:	617b      	str	r3, [r7, #20]
          break;
 800640e:	e02f      	b.n	8006470 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006410:	4b1c      	ldr	r3, [pc, #112]	@ (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006418:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800641c:	d108      	bne.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800641e:	4b19      	ldr	r3, [pc, #100]	@ (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006426:	4a19      	ldr	r2, [pc, #100]	@ (800648c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006428:	fbb2 f3f3 	udiv	r3, r2, r3
 800642c:	613b      	str	r3, [r7, #16]
 800642e:	e007      	b.n	8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006430:	4b14      	ldr	r3, [pc, #80]	@ (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006438:	4a15      	ldr	r2, [pc, #84]	@ (8006490 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800643a:	fbb2 f3f3 	udiv	r3, r2, r3
 800643e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006440:	4b10      	ldr	r3, [pc, #64]	@ (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006442:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006446:	099b      	lsrs	r3, r3, #6
 8006448:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	fb02 f303 	mul.w	r3, r2, r3
 8006452:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006454:	4b0b      	ldr	r3, [pc, #44]	@ (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006456:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800645a:	0f1b      	lsrs	r3, r3, #28
 800645c:	f003 0307 	and.w	r3, r3, #7
 8006460:	68ba      	ldr	r2, [r7, #8]
 8006462:	fbb2 f3f3 	udiv	r3, r2, r3
 8006466:	617b      	str	r3, [r7, #20]
          break;
 8006468:	e002      	b.n	8006470 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800646a:	2300      	movs	r3, #0
 800646c:	617b      	str	r3, [r7, #20]
          break;
 800646e:	bf00      	nop
        }
      }
      break;
 8006470:	e000      	b.n	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8006472:	bf00      	nop
    }
  }
  return frequency;
 8006474:	697b      	ldr	r3, [r7, #20]
}
 8006476:	4618      	mov	r0, r3
 8006478:	371c      	adds	r7, #28
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	40023800 	.word	0x40023800
 8006488:	00bb8000 	.word	0x00bb8000
 800648c:	007a1200 	.word	0x007a1200
 8006490:	00f42400 	.word	0x00f42400

08006494 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d101      	bne.n	80064a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e07b      	b.n	800659e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d108      	bne.n	80064c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80064b6:	d009      	beq.n	80064cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	61da      	str	r2, [r3, #28]
 80064be:	e005      	b.n	80064cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d106      	bne.n	80064ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f7fb f99e 	bl	8001828 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2202      	movs	r2, #2
 80064f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006502:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006514:	431a      	orrs	r2, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800651e:	431a      	orrs	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	f003 0302 	and.w	r3, r3, #2
 8006528:	431a      	orrs	r2, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	695b      	ldr	r3, [r3, #20]
 800652e:	f003 0301 	and.w	r3, r3, #1
 8006532:	431a      	orrs	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	699b      	ldr	r3, [r3, #24]
 8006538:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800653c:	431a      	orrs	r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	69db      	ldr	r3, [r3, #28]
 8006542:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006546:	431a      	orrs	r2, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a1b      	ldr	r3, [r3, #32]
 800654c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006550:	ea42 0103 	orr.w	r1, r2, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006558:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	430a      	orrs	r2, r1
 8006562:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	699b      	ldr	r3, [r3, #24]
 8006568:	0c1b      	lsrs	r3, r3, #16
 800656a:	f003 0104 	and.w	r1, r3, #4
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006572:	f003 0210 	and.w	r2, r3, #16
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	430a      	orrs	r2, r1
 800657c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	69da      	ldr	r2, [r3, #28]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800658c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3708      	adds	r7, #8
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b082      	sub	sp, #8
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d101      	bne.n	80065b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	e041      	b.n	800663c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d106      	bne.n	80065d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f7fb fb0d 	bl	8001bec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2202      	movs	r2, #2
 80065d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	3304      	adds	r3, #4
 80065e2:	4619      	mov	r1, r3
 80065e4:	4610      	mov	r0, r2
 80065e6:	f000 fa7d 	bl	8006ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2201      	movs	r2, #1
 80065fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2201      	movs	r2, #1
 8006606:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2201      	movs	r2, #1
 800660e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2201      	movs	r2, #1
 8006616:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2201      	movs	r2, #1
 800661e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2201      	movs	r2, #1
 8006626:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2201      	movs	r2, #1
 800662e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2201      	movs	r2, #1
 8006636:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3708      	adds	r7, #8
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006644:	b480      	push	{r7}
 8006646:	b085      	sub	sp, #20
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006652:	b2db      	uxtb	r3, r3
 8006654:	2b01      	cmp	r3, #1
 8006656:	d001      	beq.n	800665c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e04e      	b.n	80066fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2202      	movs	r2, #2
 8006660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68da      	ldr	r2, [r3, #12]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f042 0201 	orr.w	r2, r2, #1
 8006672:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a23      	ldr	r2, [pc, #140]	@ (8006708 <HAL_TIM_Base_Start_IT+0xc4>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d022      	beq.n	80066c4 <HAL_TIM_Base_Start_IT+0x80>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006686:	d01d      	beq.n	80066c4 <HAL_TIM_Base_Start_IT+0x80>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a1f      	ldr	r2, [pc, #124]	@ (800670c <HAL_TIM_Base_Start_IT+0xc8>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d018      	beq.n	80066c4 <HAL_TIM_Base_Start_IT+0x80>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a1e      	ldr	r2, [pc, #120]	@ (8006710 <HAL_TIM_Base_Start_IT+0xcc>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d013      	beq.n	80066c4 <HAL_TIM_Base_Start_IT+0x80>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a1c      	ldr	r2, [pc, #112]	@ (8006714 <HAL_TIM_Base_Start_IT+0xd0>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d00e      	beq.n	80066c4 <HAL_TIM_Base_Start_IT+0x80>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a1b      	ldr	r2, [pc, #108]	@ (8006718 <HAL_TIM_Base_Start_IT+0xd4>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d009      	beq.n	80066c4 <HAL_TIM_Base_Start_IT+0x80>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a19      	ldr	r2, [pc, #100]	@ (800671c <HAL_TIM_Base_Start_IT+0xd8>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d004      	beq.n	80066c4 <HAL_TIM_Base_Start_IT+0x80>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a18      	ldr	r2, [pc, #96]	@ (8006720 <HAL_TIM_Base_Start_IT+0xdc>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d111      	bne.n	80066e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	f003 0307 	and.w	r3, r3, #7
 80066ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2b06      	cmp	r3, #6
 80066d4:	d010      	beq.n	80066f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f042 0201 	orr.w	r2, r2, #1
 80066e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066e6:	e007      	b.n	80066f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f042 0201 	orr.w	r2, r2, #1
 80066f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3714      	adds	r7, #20
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop
 8006708:	40010000 	.word	0x40010000
 800670c:	40000400 	.word	0x40000400
 8006710:	40000800 	.word	0x40000800
 8006714:	40000c00 	.word	0x40000c00
 8006718:	40010400 	.word	0x40010400
 800671c:	40014000 	.word	0x40014000
 8006720:	40001800 	.word	0x40001800

08006724 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	f003 0302 	and.w	r3, r3, #2
 8006742:	2b00      	cmp	r3, #0
 8006744:	d020      	beq.n	8006788 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f003 0302 	and.w	r3, r3, #2
 800674c:	2b00      	cmp	r3, #0
 800674e:	d01b      	beq.n	8006788 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f06f 0202 	mvn.w	r2, #2
 8006758:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2201      	movs	r2, #1
 800675e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	f003 0303 	and.w	r3, r3, #3
 800676a:	2b00      	cmp	r3, #0
 800676c:	d003      	beq.n	8006776 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f999 	bl	8006aa6 <HAL_TIM_IC_CaptureCallback>
 8006774:	e005      	b.n	8006782 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 f98b 	bl	8006a92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 f99c 	bl	8006aba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	f003 0304 	and.w	r3, r3, #4
 800678e:	2b00      	cmp	r3, #0
 8006790:	d020      	beq.n	80067d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f003 0304 	and.w	r3, r3, #4
 8006798:	2b00      	cmp	r3, #0
 800679a:	d01b      	beq.n	80067d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f06f 0204 	mvn.w	r2, #4
 80067a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2202      	movs	r2, #2
 80067aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	699b      	ldr	r3, [r3, #24]
 80067b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d003      	beq.n	80067c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 f973 	bl	8006aa6 <HAL_TIM_IC_CaptureCallback>
 80067c0:	e005      	b.n	80067ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f965 	bl	8006a92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 f976 	bl	8006aba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	f003 0308 	and.w	r3, r3, #8
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d020      	beq.n	8006820 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f003 0308 	and.w	r3, r3, #8
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d01b      	beq.n	8006820 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f06f 0208 	mvn.w	r2, #8
 80067f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2204      	movs	r2, #4
 80067f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	69db      	ldr	r3, [r3, #28]
 80067fe:	f003 0303 	and.w	r3, r3, #3
 8006802:	2b00      	cmp	r3, #0
 8006804:	d003      	beq.n	800680e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 f94d 	bl	8006aa6 <HAL_TIM_IC_CaptureCallback>
 800680c:	e005      	b.n	800681a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 f93f 	bl	8006a92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 f950 	bl	8006aba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	f003 0310 	and.w	r3, r3, #16
 8006826:	2b00      	cmp	r3, #0
 8006828:	d020      	beq.n	800686c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f003 0310 	and.w	r3, r3, #16
 8006830:	2b00      	cmp	r3, #0
 8006832:	d01b      	beq.n	800686c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f06f 0210 	mvn.w	r2, #16
 800683c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2208      	movs	r2, #8
 8006842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	69db      	ldr	r3, [r3, #28]
 800684a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800684e:	2b00      	cmp	r3, #0
 8006850:	d003      	beq.n	800685a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 f927 	bl	8006aa6 <HAL_TIM_IC_CaptureCallback>
 8006858:	e005      	b.n	8006866 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 f919 	bl	8006a92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 f92a 	bl	8006aba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	f003 0301 	and.w	r3, r3, #1
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00c      	beq.n	8006890 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f003 0301 	and.w	r3, r3, #1
 800687c:	2b00      	cmp	r3, #0
 800687e:	d007      	beq.n	8006890 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f06f 0201 	mvn.w	r2, #1
 8006888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f7fa ff4c 	bl	8001728 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00c      	beq.n	80068b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d007      	beq.n	80068b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80068ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 fae4 	bl	8006e7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00c      	beq.n	80068d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d007      	beq.n	80068d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80068d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 f8fb 	bl	8006ace <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	f003 0320 	and.w	r3, r3, #32
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00c      	beq.n	80068fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f003 0320 	and.w	r3, r3, #32
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d007      	beq.n	80068fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f06f 0220 	mvn.w	r2, #32
 80068f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 fab6 	bl	8006e68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068fc:	bf00      	nop
 80068fe:	3710      	adds	r7, #16
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800690e:	2300      	movs	r3, #0
 8006910:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006918:	2b01      	cmp	r3, #1
 800691a:	d101      	bne.n	8006920 <HAL_TIM_ConfigClockSource+0x1c>
 800691c:	2302      	movs	r3, #2
 800691e:	e0b4      	b.n	8006a8a <HAL_TIM_ConfigClockSource+0x186>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2202      	movs	r2, #2
 800692c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800693e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006946:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68ba      	ldr	r2, [r7, #8]
 800694e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006958:	d03e      	beq.n	80069d8 <HAL_TIM_ConfigClockSource+0xd4>
 800695a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800695e:	f200 8087 	bhi.w	8006a70 <HAL_TIM_ConfigClockSource+0x16c>
 8006962:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006966:	f000 8086 	beq.w	8006a76 <HAL_TIM_ConfigClockSource+0x172>
 800696a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800696e:	d87f      	bhi.n	8006a70 <HAL_TIM_ConfigClockSource+0x16c>
 8006970:	2b70      	cmp	r3, #112	@ 0x70
 8006972:	d01a      	beq.n	80069aa <HAL_TIM_ConfigClockSource+0xa6>
 8006974:	2b70      	cmp	r3, #112	@ 0x70
 8006976:	d87b      	bhi.n	8006a70 <HAL_TIM_ConfigClockSource+0x16c>
 8006978:	2b60      	cmp	r3, #96	@ 0x60
 800697a:	d050      	beq.n	8006a1e <HAL_TIM_ConfigClockSource+0x11a>
 800697c:	2b60      	cmp	r3, #96	@ 0x60
 800697e:	d877      	bhi.n	8006a70 <HAL_TIM_ConfigClockSource+0x16c>
 8006980:	2b50      	cmp	r3, #80	@ 0x50
 8006982:	d03c      	beq.n	80069fe <HAL_TIM_ConfigClockSource+0xfa>
 8006984:	2b50      	cmp	r3, #80	@ 0x50
 8006986:	d873      	bhi.n	8006a70 <HAL_TIM_ConfigClockSource+0x16c>
 8006988:	2b40      	cmp	r3, #64	@ 0x40
 800698a:	d058      	beq.n	8006a3e <HAL_TIM_ConfigClockSource+0x13a>
 800698c:	2b40      	cmp	r3, #64	@ 0x40
 800698e:	d86f      	bhi.n	8006a70 <HAL_TIM_ConfigClockSource+0x16c>
 8006990:	2b30      	cmp	r3, #48	@ 0x30
 8006992:	d064      	beq.n	8006a5e <HAL_TIM_ConfigClockSource+0x15a>
 8006994:	2b30      	cmp	r3, #48	@ 0x30
 8006996:	d86b      	bhi.n	8006a70 <HAL_TIM_ConfigClockSource+0x16c>
 8006998:	2b20      	cmp	r3, #32
 800699a:	d060      	beq.n	8006a5e <HAL_TIM_ConfigClockSource+0x15a>
 800699c:	2b20      	cmp	r3, #32
 800699e:	d867      	bhi.n	8006a70 <HAL_TIM_ConfigClockSource+0x16c>
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d05c      	beq.n	8006a5e <HAL_TIM_ConfigClockSource+0x15a>
 80069a4:	2b10      	cmp	r3, #16
 80069a6:	d05a      	beq.n	8006a5e <HAL_TIM_ConfigClockSource+0x15a>
 80069a8:	e062      	b.n	8006a70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80069ba:	f000 f9b9 	bl	8006d30 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80069cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	68ba      	ldr	r2, [r7, #8]
 80069d4:	609a      	str	r2, [r3, #8]
      break;
 80069d6:	e04f      	b.n	8006a78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80069e8:	f000 f9a2 	bl	8006d30 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	689a      	ldr	r2, [r3, #8]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80069fa:	609a      	str	r2, [r3, #8]
      break;
 80069fc:	e03c      	b.n	8006a78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	f000 f916 	bl	8006c3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2150      	movs	r1, #80	@ 0x50
 8006a16:	4618      	mov	r0, r3
 8006a18:	f000 f96f 	bl	8006cfa <TIM_ITRx_SetConfig>
      break;
 8006a1c:	e02c      	b.n	8006a78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	f000 f935 	bl	8006c9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2160      	movs	r1, #96	@ 0x60
 8006a36:	4618      	mov	r0, r3
 8006a38:	f000 f95f 	bl	8006cfa <TIM_ITRx_SetConfig>
      break;
 8006a3c:	e01c      	b.n	8006a78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	f000 f8f6 	bl	8006c3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2140      	movs	r1, #64	@ 0x40
 8006a56:	4618      	mov	r0, r3
 8006a58:	f000 f94f 	bl	8006cfa <TIM_ITRx_SetConfig>
      break;
 8006a5c:	e00c      	b.n	8006a78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4619      	mov	r1, r3
 8006a68:	4610      	mov	r0, r2
 8006a6a:	f000 f946 	bl	8006cfa <TIM_ITRx_SetConfig>
      break;
 8006a6e:	e003      	b.n	8006a78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	73fb      	strb	r3, [r7, #15]
      break;
 8006a74:	e000      	b.n	8006a78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006a76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3710      	adds	r7, #16
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a92:	b480      	push	{r7}
 8006a94:	b083      	sub	sp, #12
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a9a:	bf00      	nop
 8006a9c:	370c      	adds	r7, #12
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr

08006aa6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006aa6:	b480      	push	{r7}
 8006aa8:	b083      	sub	sp, #12
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006aae:	bf00      	nop
 8006ab0:	370c      	adds	r7, #12
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr

08006aba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006aba:	b480      	push	{r7}
 8006abc:	b083      	sub	sp, #12
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ac2:	bf00      	nop
 8006ac4:	370c      	adds	r7, #12
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr

08006ace <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ace:	b480      	push	{r7}
 8006ad0:	b083      	sub	sp, #12
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ad6:	bf00      	nop
 8006ad8:	370c      	adds	r7, #12
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
	...

08006ae4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b085      	sub	sp, #20
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a46      	ldr	r2, [pc, #280]	@ (8006c10 <TIM_Base_SetConfig+0x12c>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d013      	beq.n	8006b24 <TIM_Base_SetConfig+0x40>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b02:	d00f      	beq.n	8006b24 <TIM_Base_SetConfig+0x40>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a43      	ldr	r2, [pc, #268]	@ (8006c14 <TIM_Base_SetConfig+0x130>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d00b      	beq.n	8006b24 <TIM_Base_SetConfig+0x40>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a42      	ldr	r2, [pc, #264]	@ (8006c18 <TIM_Base_SetConfig+0x134>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d007      	beq.n	8006b24 <TIM_Base_SetConfig+0x40>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a41      	ldr	r2, [pc, #260]	@ (8006c1c <TIM_Base_SetConfig+0x138>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d003      	beq.n	8006b24 <TIM_Base_SetConfig+0x40>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a40      	ldr	r2, [pc, #256]	@ (8006c20 <TIM_Base_SetConfig+0x13c>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d108      	bne.n	8006b36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a35      	ldr	r2, [pc, #212]	@ (8006c10 <TIM_Base_SetConfig+0x12c>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d02b      	beq.n	8006b96 <TIM_Base_SetConfig+0xb2>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b44:	d027      	beq.n	8006b96 <TIM_Base_SetConfig+0xb2>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a32      	ldr	r2, [pc, #200]	@ (8006c14 <TIM_Base_SetConfig+0x130>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d023      	beq.n	8006b96 <TIM_Base_SetConfig+0xb2>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a31      	ldr	r2, [pc, #196]	@ (8006c18 <TIM_Base_SetConfig+0x134>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d01f      	beq.n	8006b96 <TIM_Base_SetConfig+0xb2>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a30      	ldr	r2, [pc, #192]	@ (8006c1c <TIM_Base_SetConfig+0x138>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d01b      	beq.n	8006b96 <TIM_Base_SetConfig+0xb2>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a2f      	ldr	r2, [pc, #188]	@ (8006c20 <TIM_Base_SetConfig+0x13c>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d017      	beq.n	8006b96 <TIM_Base_SetConfig+0xb2>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a2e      	ldr	r2, [pc, #184]	@ (8006c24 <TIM_Base_SetConfig+0x140>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d013      	beq.n	8006b96 <TIM_Base_SetConfig+0xb2>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a2d      	ldr	r2, [pc, #180]	@ (8006c28 <TIM_Base_SetConfig+0x144>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d00f      	beq.n	8006b96 <TIM_Base_SetConfig+0xb2>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a2c      	ldr	r2, [pc, #176]	@ (8006c2c <TIM_Base_SetConfig+0x148>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d00b      	beq.n	8006b96 <TIM_Base_SetConfig+0xb2>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a2b      	ldr	r2, [pc, #172]	@ (8006c30 <TIM_Base_SetConfig+0x14c>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d007      	beq.n	8006b96 <TIM_Base_SetConfig+0xb2>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a2a      	ldr	r2, [pc, #168]	@ (8006c34 <TIM_Base_SetConfig+0x150>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d003      	beq.n	8006b96 <TIM_Base_SetConfig+0xb2>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a29      	ldr	r2, [pc, #164]	@ (8006c38 <TIM_Base_SetConfig+0x154>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d108      	bne.n	8006ba8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	689a      	ldr	r2, [r3, #8]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a10      	ldr	r2, [pc, #64]	@ (8006c10 <TIM_Base_SetConfig+0x12c>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d003      	beq.n	8006bdc <TIM_Base_SetConfig+0xf8>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a12      	ldr	r2, [pc, #72]	@ (8006c20 <TIM_Base_SetConfig+0x13c>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d103      	bne.n	8006be4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	691a      	ldr	r2, [r3, #16]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	f003 0301 	and.w	r3, r3, #1
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d105      	bne.n	8006c02 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	f023 0201 	bic.w	r2, r3, #1
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	611a      	str	r2, [r3, #16]
  }
}
 8006c02:	bf00      	nop
 8006c04:	3714      	adds	r7, #20
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	40010000 	.word	0x40010000
 8006c14:	40000400 	.word	0x40000400
 8006c18:	40000800 	.word	0x40000800
 8006c1c:	40000c00 	.word	0x40000c00
 8006c20:	40010400 	.word	0x40010400
 8006c24:	40014000 	.word	0x40014000
 8006c28:	40014400 	.word	0x40014400
 8006c2c:	40014800 	.word	0x40014800
 8006c30:	40001800 	.word	0x40001800
 8006c34:	40001c00 	.word	0x40001c00
 8006c38:	40002000 	.word	0x40002000

08006c3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b087      	sub	sp, #28
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6a1b      	ldr	r3, [r3, #32]
 8006c4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6a1b      	ldr	r3, [r3, #32]
 8006c52:	f023 0201 	bic.w	r2, r3, #1
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	011b      	lsls	r3, r3, #4
 8006c6c:	693a      	ldr	r2, [r7, #16]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	f023 030a 	bic.w	r3, r3, #10
 8006c78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	693a      	ldr	r2, [r7, #16]
 8006c86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	697a      	ldr	r2, [r7, #20]
 8006c8c:	621a      	str	r2, [r3, #32]
}
 8006c8e:	bf00      	nop
 8006c90:	371c      	adds	r7, #28
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr

08006c9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c9a:	b480      	push	{r7}
 8006c9c:	b087      	sub	sp, #28
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	60f8      	str	r0, [r7, #12]
 8006ca2:	60b9      	str	r1, [r7, #8]
 8006ca4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6a1b      	ldr	r3, [r3, #32]
 8006cb0:	f023 0210 	bic.w	r2, r3, #16
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	699b      	ldr	r3, [r3, #24]
 8006cbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006cc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	031b      	lsls	r3, r3, #12
 8006cca:	693a      	ldr	r2, [r7, #16]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006cd6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	011b      	lsls	r3, r3, #4
 8006cdc:	697a      	ldr	r2, [r7, #20]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	693a      	ldr	r2, [r7, #16]
 8006ce6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	697a      	ldr	r2, [r7, #20]
 8006cec:	621a      	str	r2, [r3, #32]
}
 8006cee:	bf00      	nop
 8006cf0:	371c      	adds	r7, #28
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr

08006cfa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006cfa:	b480      	push	{r7}
 8006cfc:	b085      	sub	sp, #20
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
 8006d02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d12:	683a      	ldr	r2, [r7, #0]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	f043 0307 	orr.w	r3, r3, #7
 8006d1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	609a      	str	r2, [r3, #8]
}
 8006d24:	bf00      	nop
 8006d26:	3714      	adds	r7, #20
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b087      	sub	sp, #28
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	607a      	str	r2, [r7, #4]
 8006d3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006d4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	021a      	lsls	r2, r3, #8
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	431a      	orrs	r2, r3
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	697a      	ldr	r2, [r7, #20]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	697a      	ldr	r2, [r7, #20]
 8006d62:	609a      	str	r2, [r3, #8]
}
 8006d64:	bf00      	nop
 8006d66:	371c      	adds	r7, #28
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b085      	sub	sp, #20
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d101      	bne.n	8006d88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d84:	2302      	movs	r3, #2
 8006d86:	e05a      	b.n	8006e3e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2202      	movs	r2, #2
 8006d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a21      	ldr	r2, [pc, #132]	@ (8006e4c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d022      	beq.n	8006e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dd4:	d01d      	beq.n	8006e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a1d      	ldr	r2, [pc, #116]	@ (8006e50 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d018      	beq.n	8006e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a1b      	ldr	r2, [pc, #108]	@ (8006e54 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d013      	beq.n	8006e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a1a      	ldr	r2, [pc, #104]	@ (8006e58 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d00e      	beq.n	8006e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a18      	ldr	r2, [pc, #96]	@ (8006e5c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d009      	beq.n	8006e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a17      	ldr	r2, [pc, #92]	@ (8006e60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d004      	beq.n	8006e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a15      	ldr	r2, [pc, #84]	@ (8006e64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d10c      	bne.n	8006e2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	68ba      	ldr	r2, [r7, #8]
 8006e2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3714      	adds	r7, #20
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	40010000 	.word	0x40010000
 8006e50:	40000400 	.word	0x40000400
 8006e54:	40000800 	.word	0x40000800
 8006e58:	40000c00 	.word	0x40000c00
 8006e5c:	40010400 	.word	0x40010400
 8006e60:	40014000 	.word	0x40014000
 8006e64:	40001800 	.word	0x40001800

08006e68 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e70:	bf00      	nop
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e84:	bf00      	nop
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e90:	b084      	sub	sp, #16
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b084      	sub	sp, #16
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
 8006e9a:	f107 001c 	add.w	r0, r7, #28
 8006e9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ea2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d123      	bne.n	8006ef2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006ebe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006ed2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d105      	bne.n	8006ee6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 f9dc 	bl	80072a4 <USB_CoreReset>
 8006eec:	4603      	mov	r3, r0
 8006eee:	73fb      	strb	r3, [r7, #15]
 8006ef0:	e01b      	b.n	8006f2a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f9d0 	bl	80072a4 <USB_CoreReset>
 8006f04:	4603      	mov	r3, r0
 8006f06:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006f08:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d106      	bne.n	8006f1e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f14:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	639a      	str	r2, [r3, #56]	@ 0x38
 8006f1c:	e005      	b.n	8006f2a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f22:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006f2a:	7fbb      	ldrb	r3, [r7, #30]
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d10b      	bne.n	8006f48 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	f043 0206 	orr.w	r2, r3, #6
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	f043 0220 	orr.w	r2, r3, #32
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f54:	b004      	add	sp, #16
 8006f56:	4770      	bx	lr

08006f58 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	f043 0201 	orr.w	r2, r3, #1
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	370c      	adds	r7, #12
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr

08006f7a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b083      	sub	sp, #12
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	f023 0201 	bic.w	r2, r3, #1
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006fb8:	78fb      	ldrb	r3, [r7, #3]
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d115      	bne.n	8006fea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006fca:	200a      	movs	r0, #10
 8006fcc:	f7fa fed0 	bl	8001d70 <HAL_Delay>
      ms += 10U;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	330a      	adds	r3, #10
 8006fd4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 f956 	bl	8007288 <USB_GetMode>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d01e      	beq.n	8007020 <USB_SetCurrentMode+0x84>
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2bc7      	cmp	r3, #199	@ 0xc7
 8006fe6:	d9f0      	bls.n	8006fca <USB_SetCurrentMode+0x2e>
 8006fe8:	e01a      	b.n	8007020 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006fea:	78fb      	ldrb	r3, [r7, #3]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d115      	bne.n	800701c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006ffc:	200a      	movs	r0, #10
 8006ffe:	f7fa feb7 	bl	8001d70 <HAL_Delay>
      ms += 10U;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	330a      	adds	r3, #10
 8007006:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 f93d 	bl	8007288 <USB_GetMode>
 800700e:	4603      	mov	r3, r0
 8007010:	2b00      	cmp	r3, #0
 8007012:	d005      	beq.n	8007020 <USB_SetCurrentMode+0x84>
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2bc7      	cmp	r3, #199	@ 0xc7
 8007018:	d9f0      	bls.n	8006ffc <USB_SetCurrentMode+0x60>
 800701a:	e001      	b.n	8007020 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	e005      	b.n	800702c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2bc8      	cmp	r3, #200	@ 0xc8
 8007024:	d101      	bne.n	800702a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e000      	b.n	800702c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007034:	b480      	push	{r7}
 8007036:	b085      	sub	sp, #20
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800703e:	2300      	movs	r3, #0
 8007040:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	3301      	adds	r3, #1
 8007046:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800704e:	d901      	bls.n	8007054 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007050:	2303      	movs	r3, #3
 8007052:	e01b      	b.n	800708c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	2b00      	cmp	r3, #0
 800705a:	daf2      	bge.n	8007042 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800705c:	2300      	movs	r3, #0
 800705e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	019b      	lsls	r3, r3, #6
 8007064:	f043 0220 	orr.w	r2, r3, #32
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	3301      	adds	r3, #1
 8007070:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007078:	d901      	bls.n	800707e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800707a:	2303      	movs	r3, #3
 800707c:	e006      	b.n	800708c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	f003 0320 	and.w	r3, r3, #32
 8007086:	2b20      	cmp	r3, #32
 8007088:	d0f0      	beq.n	800706c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	3714      	adds	r7, #20
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007098:	b480      	push	{r7}
 800709a:	b085      	sub	sp, #20
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80070a0:	2300      	movs	r3, #0
 80070a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	3301      	adds	r3, #1
 80070a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070b0:	d901      	bls.n	80070b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80070b2:	2303      	movs	r3, #3
 80070b4:	e018      	b.n	80070e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	daf2      	bge.n	80070a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80070be:	2300      	movs	r3, #0
 80070c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2210      	movs	r2, #16
 80070c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	3301      	adds	r3, #1
 80070cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070d4:	d901      	bls.n	80070da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80070d6:	2303      	movs	r3, #3
 80070d8:	e006      	b.n	80070e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	f003 0310 	and.w	r3, r3, #16
 80070e2:	2b10      	cmp	r3, #16
 80070e4:	d0f0      	beq.n	80070c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80070e6:	2300      	movs	r3, #0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3714      	adds	r7, #20
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b089      	sub	sp, #36	@ 0x24
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	4611      	mov	r1, r2
 8007100:	461a      	mov	r2, r3
 8007102:	460b      	mov	r3, r1
 8007104:	71fb      	strb	r3, [r7, #7]
 8007106:	4613      	mov	r3, r2
 8007108:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007112:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007116:	2b00      	cmp	r3, #0
 8007118:	d123      	bne.n	8007162 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800711a:	88bb      	ldrh	r3, [r7, #4]
 800711c:	3303      	adds	r3, #3
 800711e:	089b      	lsrs	r3, r3, #2
 8007120:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007122:	2300      	movs	r3, #0
 8007124:	61bb      	str	r3, [r7, #24]
 8007126:	e018      	b.n	800715a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007128:	79fb      	ldrb	r3, [r7, #7]
 800712a:	031a      	lsls	r2, r3, #12
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	4413      	add	r3, r2
 8007130:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007134:	461a      	mov	r2, r3
 8007136:	69fb      	ldr	r3, [r7, #28]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	3301      	adds	r3, #1
 8007140:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	3301      	adds	r3, #1
 8007146:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	3301      	adds	r3, #1
 800714c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	3301      	adds	r3, #1
 8007152:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007154:	69bb      	ldr	r3, [r7, #24]
 8007156:	3301      	adds	r3, #1
 8007158:	61bb      	str	r3, [r7, #24]
 800715a:	69ba      	ldr	r2, [r7, #24]
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	429a      	cmp	r2, r3
 8007160:	d3e2      	bcc.n	8007128 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	3724      	adds	r7, #36	@ 0x24
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007170:	b480      	push	{r7}
 8007172:	b08b      	sub	sp, #44	@ 0x2c
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	4613      	mov	r3, r2
 800717c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007186:	88fb      	ldrh	r3, [r7, #6]
 8007188:	089b      	lsrs	r3, r3, #2
 800718a:	b29b      	uxth	r3, r3
 800718c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800718e:	88fb      	ldrh	r3, [r7, #6]
 8007190:	f003 0303 	and.w	r3, r3, #3
 8007194:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007196:	2300      	movs	r3, #0
 8007198:	623b      	str	r3, [r7, #32]
 800719a:	e014      	b.n	80071c6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a6:	601a      	str	r2, [r3, #0]
    pDest++;
 80071a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071aa:	3301      	adds	r3, #1
 80071ac:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80071ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b0:	3301      	adds	r3, #1
 80071b2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80071b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b6:	3301      	adds	r3, #1
 80071b8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80071ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071bc:	3301      	adds	r3, #1
 80071be:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80071c0:	6a3b      	ldr	r3, [r7, #32]
 80071c2:	3301      	adds	r3, #1
 80071c4:	623b      	str	r3, [r7, #32]
 80071c6:	6a3a      	ldr	r2, [r7, #32]
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d3e6      	bcc.n	800719c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80071ce:	8bfb      	ldrh	r3, [r7, #30]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d01e      	beq.n	8007212 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80071d4:	2300      	movs	r3, #0
 80071d6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071de:	461a      	mov	r2, r3
 80071e0:	f107 0310 	add.w	r3, r7, #16
 80071e4:	6812      	ldr	r2, [r2, #0]
 80071e6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80071e8:	693a      	ldr	r2, [r7, #16]
 80071ea:	6a3b      	ldr	r3, [r7, #32]
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	00db      	lsls	r3, r3, #3
 80071f0:	fa22 f303 	lsr.w	r3, r2, r3
 80071f4:	b2da      	uxtb	r2, r3
 80071f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f8:	701a      	strb	r2, [r3, #0]
      i++;
 80071fa:	6a3b      	ldr	r3, [r7, #32]
 80071fc:	3301      	adds	r3, #1
 80071fe:	623b      	str	r3, [r7, #32]
      pDest++;
 8007200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007202:	3301      	adds	r3, #1
 8007204:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007206:	8bfb      	ldrh	r3, [r7, #30]
 8007208:	3b01      	subs	r3, #1
 800720a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800720c:	8bfb      	ldrh	r3, [r7, #30]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d1ea      	bne.n	80071e8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007214:	4618      	mov	r0, r3
 8007216:	372c      	adds	r7, #44	@ 0x2c
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007220:	b480      	push	{r7}
 8007222:	b085      	sub	sp, #20
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	695b      	ldr	r3, [r3, #20]
 800722c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	699b      	ldr	r3, [r3, #24]
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	4013      	ands	r3, r2
 8007236:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007238:	68fb      	ldr	r3, [r7, #12]
}
 800723a:	4618      	mov	r0, r3
 800723c:	3714      	adds	r7, #20
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr

08007246 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007246:	b480      	push	{r7}
 8007248:	b085      	sub	sp, #20
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
 800724e:	460b      	mov	r3, r1
 8007250:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007256:	78fb      	ldrb	r3, [r7, #3]
 8007258:	015a      	lsls	r2, r3, #5
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	4413      	add	r3, r2
 800725e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007266:	78fb      	ldrb	r3, [r7, #3]
 8007268:	015a      	lsls	r2, r3, #5
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	4413      	add	r3, r2
 800726e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	4013      	ands	r3, r2
 8007278:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800727a:	68bb      	ldr	r3, [r7, #8]
}
 800727c:	4618      	mov	r0, r3
 800727e:	3714      	adds	r7, #20
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007288:	b480      	push	{r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	695b      	ldr	r3, [r3, #20]
 8007294:	f003 0301 	and.w	r3, r3, #1
}
 8007298:	4618      	mov	r0, r3
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80072ac:	2300      	movs	r3, #0
 80072ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	3301      	adds	r3, #1
 80072b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80072bc:	d901      	bls.n	80072c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80072be:	2303      	movs	r3, #3
 80072c0:	e01b      	b.n	80072fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	daf2      	bge.n	80072b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80072ca:	2300      	movs	r3, #0
 80072cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	f043 0201 	orr.w	r2, r3, #1
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	3301      	adds	r3, #1
 80072de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80072e6:	d901      	bls.n	80072ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80072e8:	2303      	movs	r3, #3
 80072ea:	e006      	b.n	80072fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	f003 0301 	and.w	r3, r3, #1
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d0f0      	beq.n	80072da <USB_CoreReset+0x36>

  return HAL_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3714      	adds	r7, #20
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
	...

08007308 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007308:	b084      	sub	sp, #16
 800730a:	b580      	push	{r7, lr}
 800730c:	b086      	sub	sp, #24
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
 8007312:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007316:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800731a:	2300      	movs	r3, #0
 800731c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007328:	461a      	mov	r2, r3
 800732a:	2300      	movs	r3, #0
 800732c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007332:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800733e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800734a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800735a:	2b00      	cmp	r3, #0
 800735c:	d119      	bne.n	8007392 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800735e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007362:	2b01      	cmp	r3, #1
 8007364:	d10a      	bne.n	800737c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	68fa      	ldr	r2, [r7, #12]
 8007370:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007374:	f043 0304 	orr.w	r3, r3, #4
 8007378:	6013      	str	r3, [r2, #0]
 800737a:	e014      	b.n	80073a6 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	68fa      	ldr	r2, [r7, #12]
 8007386:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800738a:	f023 0304 	bic.w	r3, r3, #4
 800738e:	6013      	str	r3, [r2, #0]
 8007390:	e009      	b.n	80073a6 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80073a0:	f023 0304 	bic.w	r3, r3, #4
 80073a4:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80073a6:	2110      	movs	r1, #16
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f7ff fe43 	bl	8007034 <USB_FlushTxFifo>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d001      	beq.n	80073b8 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f7ff fe6d 	bl	8007098 <USB_FlushRxFifo>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d001      	beq.n	80073c8 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80073c8:	2300      	movs	r3, #0
 80073ca:	613b      	str	r3, [r7, #16]
 80073cc:	e015      	b.n	80073fa <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	015a      	lsls	r2, r3, #5
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	4413      	add	r3, r2
 80073d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073da:	461a      	mov	r2, r3
 80073dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80073e0:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	015a      	lsls	r2, r3, #5
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	4413      	add	r3, r2
 80073ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073ee:	461a      	mov	r2, r3
 80073f0:	2300      	movs	r3, #0
 80073f2:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	3301      	adds	r3, #1
 80073f8:	613b      	str	r3, [r7, #16]
 80073fa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80073fe:	461a      	mov	r2, r3
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	4293      	cmp	r3, r2
 8007404:	d3e3      	bcc.n	80073ce <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007412:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	4a18      	ldr	r2, [pc, #96]	@ (8007478 <USB_HostInit+0x170>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d10b      	bne.n	8007434 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007422:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	4a15      	ldr	r2, [pc, #84]	@ (800747c <USB_HostInit+0x174>)
 8007428:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a14      	ldr	r2, [pc, #80]	@ (8007480 <USB_HostInit+0x178>)
 800742e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8007432:	e009      	b.n	8007448 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2280      	movs	r2, #128	@ 0x80
 8007438:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4a11      	ldr	r2, [pc, #68]	@ (8007484 <USB_HostInit+0x17c>)
 800743e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	4a11      	ldr	r2, [pc, #68]	@ (8007488 <USB_HostInit+0x180>)
 8007444:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007448:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800744c:	2b00      	cmp	r3, #0
 800744e:	d105      	bne.n	800745c <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	699b      	ldr	r3, [r3, #24]
 8007454:	f043 0210 	orr.w	r2, r3, #16
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	699a      	ldr	r2, [r3, #24]
 8007460:	4b0a      	ldr	r3, [pc, #40]	@ (800748c <USB_HostInit+0x184>)
 8007462:	4313      	orrs	r3, r2
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007468:	7dfb      	ldrb	r3, [r7, #23]
}
 800746a:	4618      	mov	r0, r3
 800746c:	3718      	adds	r7, #24
 800746e:	46bd      	mov	sp, r7
 8007470:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007474:	b004      	add	sp, #16
 8007476:	4770      	bx	lr
 8007478:	40040000 	.word	0x40040000
 800747c:	01000200 	.word	0x01000200
 8007480:	00e00300 	.word	0x00e00300
 8007484:	00600080 	.word	0x00600080
 8007488:	004000e0 	.word	0x004000e0
 800748c:	a3200008 	.word	0xa3200008

08007490 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007490:	b480      	push	{r7}
 8007492:	b085      	sub	sp, #20
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	460b      	mov	r3, r1
 800749a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80074ae:	f023 0303 	bic.w	r3, r3, #3
 80074b2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	78fb      	ldrb	r3, [r7, #3]
 80074be:	f003 0303 	and.w	r3, r3, #3
 80074c2:	68f9      	ldr	r1, [r7, #12]
 80074c4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80074c8:	4313      	orrs	r3, r2
 80074ca:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80074cc:	78fb      	ldrb	r3, [r7, #3]
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d107      	bne.n	80074e2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80074d8:	461a      	mov	r2, r3
 80074da:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80074de:	6053      	str	r3, [r2, #4]
 80074e0:	e00c      	b.n	80074fc <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80074e2:	78fb      	ldrb	r3, [r7, #3]
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	d107      	bne.n	80074f8 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80074ee:	461a      	mov	r2, r3
 80074f0:	f241 7370 	movw	r3, #6000	@ 0x1770
 80074f4:	6053      	str	r3, [r2, #4]
 80074f6:	e001      	b.n	80074fc <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	e000      	b.n	80074fe <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3714      	adds	r7, #20
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr

0800750a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b084      	sub	sp, #16
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007516:	2300      	movs	r3, #0
 8007518:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800752a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	68fa      	ldr	r2, [r7, #12]
 8007530:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007534:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007538:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800753a:	2064      	movs	r0, #100	@ 0x64
 800753c:	f7fa fc18 	bl	8001d70 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007548:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800754c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800754e:	200a      	movs	r0, #10
 8007550:	f7fa fc0e 	bl	8001d70 <HAL_Delay>

  return HAL_OK;
 8007554:	2300      	movs	r3, #0
}
 8007556:	4618      	mov	r0, r3
 8007558:	3710      	adds	r7, #16
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}

0800755e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800755e:	b480      	push	{r7}
 8007560:	b085      	sub	sp, #20
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
 8007566:	460b      	mov	r3, r1
 8007568:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800756e:	2300      	movs	r3, #0
 8007570:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007582:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800758a:	2b00      	cmp	r3, #0
 800758c:	d109      	bne.n	80075a2 <USB_DriveVbus+0x44>
 800758e:	78fb      	ldrb	r3, [r7, #3]
 8007590:	2b01      	cmp	r3, #1
 8007592:	d106      	bne.n	80075a2 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800759c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80075a0:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80075a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075ac:	d109      	bne.n	80075c2 <USB_DriveVbus+0x64>
 80075ae:	78fb      	ldrb	r3, [r7, #3]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d106      	bne.n	80075c2 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	68fa      	ldr	r2, [r7, #12]
 80075b8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80075bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80075c0:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3714      	adds	r7, #20
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b085      	sub	sp, #20
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80075dc:	2300      	movs	r3, #0
 80075de:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	0c5b      	lsrs	r3, r3, #17
 80075ee:	f003 0303 	and.w	r3, r3, #3
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3714      	adds	r7, #20
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr

080075fe <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80075fe:	b480      	push	{r7}
 8007600:	b085      	sub	sp, #20
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	b29b      	uxth	r3, r3
}
 8007614:	4618      	mov	r0, r3
 8007616:	3714      	adds	r7, #20
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr

08007620 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b088      	sub	sp, #32
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	4608      	mov	r0, r1
 800762a:	4611      	mov	r1, r2
 800762c:	461a      	mov	r2, r3
 800762e:	4603      	mov	r3, r0
 8007630:	70fb      	strb	r3, [r7, #3]
 8007632:	460b      	mov	r3, r1
 8007634:	70bb      	strb	r3, [r7, #2]
 8007636:	4613      	mov	r3, r2
 8007638:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800763a:	2300      	movs	r3, #0
 800763c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8007642:	78fb      	ldrb	r3, [r7, #3]
 8007644:	015a      	lsls	r2, r3, #5
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	4413      	add	r3, r2
 800764a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800764e:	461a      	mov	r2, r3
 8007650:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007654:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007656:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800765a:	2b03      	cmp	r3, #3
 800765c:	d87c      	bhi.n	8007758 <USB_HC_Init+0x138>
 800765e:	a201      	add	r2, pc, #4	@ (adr r2, 8007664 <USB_HC_Init+0x44>)
 8007660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007664:	08007675 	.word	0x08007675
 8007668:	0800771b 	.word	0x0800771b
 800766c:	08007675 	.word	0x08007675
 8007670:	080076dd 	.word	0x080076dd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007674:	78fb      	ldrb	r3, [r7, #3]
 8007676:	015a      	lsls	r2, r3, #5
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	4413      	add	r3, r2
 800767c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007680:	461a      	mov	r2, r3
 8007682:	f240 439d 	movw	r3, #1181	@ 0x49d
 8007686:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007688:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800768c:	2b00      	cmp	r3, #0
 800768e:	da10      	bge.n	80076b2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007690:	78fb      	ldrb	r3, [r7, #3]
 8007692:	015a      	lsls	r2, r3, #5
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	4413      	add	r3, r2
 8007698:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	78fa      	ldrb	r2, [r7, #3]
 80076a0:	0151      	lsls	r1, r2, #5
 80076a2:	693a      	ldr	r2, [r7, #16]
 80076a4:	440a      	add	r2, r1
 80076a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80076aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076ae:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80076b0:	e055      	b.n	800775e <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a6f      	ldr	r2, [pc, #444]	@ (8007874 <USB_HC_Init+0x254>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d151      	bne.n	800775e <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80076ba:	78fb      	ldrb	r3, [r7, #3]
 80076bc:	015a      	lsls	r2, r3, #5
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	4413      	add	r3, r2
 80076c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	78fa      	ldrb	r2, [r7, #3]
 80076ca:	0151      	lsls	r1, r2, #5
 80076cc:	693a      	ldr	r2, [r7, #16]
 80076ce:	440a      	add	r2, r1
 80076d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80076d4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80076d8:	60d3      	str	r3, [r2, #12]
      break;
 80076da:	e040      	b.n	800775e <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80076dc:	78fb      	ldrb	r3, [r7, #3]
 80076de:	015a      	lsls	r2, r3, #5
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	4413      	add	r3, r2
 80076e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076e8:	461a      	mov	r2, r3
 80076ea:	f240 639d 	movw	r3, #1693	@ 0x69d
 80076ee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80076f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	da34      	bge.n	8007762 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80076f8:	78fb      	ldrb	r3, [r7, #3]
 80076fa:	015a      	lsls	r2, r3, #5
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	4413      	add	r3, r2
 8007700:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	78fa      	ldrb	r2, [r7, #3]
 8007708:	0151      	lsls	r1, r2, #5
 800770a:	693a      	ldr	r2, [r7, #16]
 800770c:	440a      	add	r2, r1
 800770e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007712:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007716:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007718:	e023      	b.n	8007762 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800771a:	78fb      	ldrb	r3, [r7, #3]
 800771c:	015a      	lsls	r2, r3, #5
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	4413      	add	r3, r2
 8007722:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007726:	461a      	mov	r2, r3
 8007728:	f240 2325 	movw	r3, #549	@ 0x225
 800772c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800772e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007732:	2b00      	cmp	r3, #0
 8007734:	da17      	bge.n	8007766 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007736:	78fb      	ldrb	r3, [r7, #3]
 8007738:	015a      	lsls	r2, r3, #5
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	4413      	add	r3, r2
 800773e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	78fa      	ldrb	r2, [r7, #3]
 8007746:	0151      	lsls	r1, r2, #5
 8007748:	693a      	ldr	r2, [r7, #16]
 800774a:	440a      	add	r2, r1
 800774c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007750:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8007754:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007756:	e006      	b.n	8007766 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	77fb      	strb	r3, [r7, #31]
      break;
 800775c:	e004      	b.n	8007768 <USB_HC_Init+0x148>
      break;
 800775e:	bf00      	nop
 8007760:	e002      	b.n	8007768 <USB_HC_Init+0x148>
      break;
 8007762:	bf00      	nop
 8007764:	e000      	b.n	8007768 <USB_HC_Init+0x148>
      break;
 8007766:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007768:	78fb      	ldrb	r3, [r7, #3]
 800776a:	015a      	lsls	r2, r3, #5
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	4413      	add	r3, r2
 8007770:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007774:	461a      	mov	r2, r3
 8007776:	2300      	movs	r3, #0
 8007778:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800777a:	78fb      	ldrb	r3, [r7, #3]
 800777c:	015a      	lsls	r2, r3, #5
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	4413      	add	r3, r2
 8007782:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	78fa      	ldrb	r2, [r7, #3]
 800778a:	0151      	lsls	r1, r2, #5
 800778c:	693a      	ldr	r2, [r7, #16]
 800778e:	440a      	add	r2, r1
 8007790:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007794:	f043 0302 	orr.w	r3, r3, #2
 8007798:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80077a0:	699a      	ldr	r2, [r3, #24]
 80077a2:	78fb      	ldrb	r3, [r7, #3]
 80077a4:	f003 030f 	and.w	r3, r3, #15
 80077a8:	2101      	movs	r1, #1
 80077aa:	fa01 f303 	lsl.w	r3, r1, r3
 80077ae:	6939      	ldr	r1, [r7, #16]
 80077b0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80077b4:	4313      	orrs	r3, r2
 80077b6:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	699b      	ldr	r3, [r3, #24]
 80077bc:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80077c4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	da03      	bge.n	80077d4 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80077cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077d0:	61bb      	str	r3, [r7, #24]
 80077d2:	e001      	b.n	80077d8 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80077d4:	2300      	movs	r3, #0
 80077d6:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f7ff fef9 	bl	80075d0 <USB_GetHostSpeed>
 80077de:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80077e0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	d106      	bne.n	80077f6 <USB_HC_Init+0x1d6>
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	d003      	beq.n	80077f6 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80077ee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80077f2:	617b      	str	r3, [r7, #20]
 80077f4:	e001      	b.n	80077fa <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80077f6:	2300      	movs	r3, #0
 80077f8:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80077fa:	787b      	ldrb	r3, [r7, #1]
 80077fc:	059b      	lsls	r3, r3, #22
 80077fe:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007802:	78bb      	ldrb	r3, [r7, #2]
 8007804:	02db      	lsls	r3, r3, #11
 8007806:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800780a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800780c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007810:	049b      	lsls	r3, r3, #18
 8007812:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007816:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8007818:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800781a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800781e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007820:	69bb      	ldr	r3, [r7, #24]
 8007822:	431a      	orrs	r2, r3
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007828:	78fa      	ldrb	r2, [r7, #3]
 800782a:	0151      	lsls	r1, r2, #5
 800782c:	693a      	ldr	r2, [r7, #16]
 800782e:	440a      	add	r2, r1
 8007830:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007834:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007838:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800783a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800783e:	2b03      	cmp	r3, #3
 8007840:	d003      	beq.n	800784a <USB_HC_Init+0x22a>
 8007842:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007846:	2b01      	cmp	r3, #1
 8007848:	d10f      	bne.n	800786a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800784a:	78fb      	ldrb	r3, [r7, #3]
 800784c:	015a      	lsls	r2, r3, #5
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	4413      	add	r3, r2
 8007852:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	78fa      	ldrb	r2, [r7, #3]
 800785a:	0151      	lsls	r1, r2, #5
 800785c:	693a      	ldr	r2, [r7, #16]
 800785e:	440a      	add	r2, r1
 8007860:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007864:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007868:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800786a:	7ffb      	ldrb	r3, [r7, #31]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3720      	adds	r7, #32
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	40040000 	.word	0x40040000

08007878 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b08c      	sub	sp, #48	@ 0x30
 800787c:	af02      	add	r7, sp, #8
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	4613      	mov	r3, r2
 8007884:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	785b      	ldrb	r3, [r3, #1]
 800788e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8007890:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007894:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	4a5d      	ldr	r2, [pc, #372]	@ (8007a10 <USB_HC_StartXfer+0x198>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d12f      	bne.n	80078fe <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800789e:	79fb      	ldrb	r3, [r7, #7]
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d11c      	bne.n	80078de <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	7c9b      	ldrb	r3, [r3, #18]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d003      	beq.n	80078b4 <USB_HC_StartXfer+0x3c>
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	7c9b      	ldrb	r3, [r3, #18]
 80078b0:	2b02      	cmp	r3, #2
 80078b2:	d124      	bne.n	80078fe <USB_HC_StartXfer+0x86>
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	799b      	ldrb	r3, [r3, #6]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d120      	bne.n	80078fe <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	015a      	lsls	r2, r3, #5
 80078c0:	6a3b      	ldr	r3, [r7, #32]
 80078c2:	4413      	add	r3, r2
 80078c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	69fa      	ldr	r2, [r7, #28]
 80078cc:	0151      	lsls	r1, r2, #5
 80078ce:	6a3a      	ldr	r2, [r7, #32]
 80078d0:	440a      	add	r2, r1
 80078d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078da:	60d3      	str	r3, [r2, #12]
 80078dc:	e00f      	b.n	80078fe <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	791b      	ldrb	r3, [r3, #4]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d10b      	bne.n	80078fe <USB_HC_StartXfer+0x86>
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	795b      	ldrb	r3, [r3, #5]
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d107      	bne.n	80078fe <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	785b      	ldrb	r3, [r3, #1]
 80078f2:	4619      	mov	r1, r3
 80078f4:	68f8      	ldr	r0, [r7, #12]
 80078f6:	f000 fb6b 	bl	8007fd0 <USB_DoPing>
        return HAL_OK;
 80078fa:	2300      	movs	r3, #0
 80078fc:	e232      	b.n	8007d64 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	799b      	ldrb	r3, [r3, #6]
 8007902:	2b01      	cmp	r3, #1
 8007904:	d158      	bne.n	80079b8 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8007906:	2301      	movs	r3, #1
 8007908:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	78db      	ldrb	r3, [r3, #3]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d007      	beq.n	8007922 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007912:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007914:	68ba      	ldr	r2, [r7, #8]
 8007916:	8a92      	ldrh	r2, [r2, #20]
 8007918:	fb03 f202 	mul.w	r2, r3, r2
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	61da      	str	r2, [r3, #28]
 8007920:	e07c      	b.n	8007a1c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	7c9b      	ldrb	r3, [r3, #18]
 8007926:	2b01      	cmp	r3, #1
 8007928:	d130      	bne.n	800798c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	6a1b      	ldr	r3, [r3, #32]
 800792e:	2bbc      	cmp	r3, #188	@ 0xbc
 8007930:	d918      	bls.n	8007964 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	8a9b      	ldrh	r3, [r3, #20]
 8007936:	461a      	mov	r2, r3
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	69da      	ldr	r2, [r3, #28]
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	2b01      	cmp	r3, #1
 800794a:	d003      	beq.n	8007954 <USB_HC_StartXfer+0xdc>
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	2b02      	cmp	r3, #2
 8007952:	d103      	bne.n	800795c <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	2202      	movs	r2, #2
 8007958:	60da      	str	r2, [r3, #12]
 800795a:	e05f      	b.n	8007a1c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	2201      	movs	r2, #1
 8007960:	60da      	str	r2, [r3, #12]
 8007962:	e05b      	b.n	8007a1c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	6a1a      	ldr	r2, [r3, #32]
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	2b01      	cmp	r3, #1
 8007972:	d007      	beq.n	8007984 <USB_HC_StartXfer+0x10c>
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	2b02      	cmp	r3, #2
 800797a:	d003      	beq.n	8007984 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	2204      	movs	r2, #4
 8007980:	60da      	str	r2, [r3, #12]
 8007982:	e04b      	b.n	8007a1c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	2203      	movs	r2, #3
 8007988:	60da      	str	r2, [r3, #12]
 800798a:	e047      	b.n	8007a1c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800798c:	79fb      	ldrb	r3, [r7, #7]
 800798e:	2b01      	cmp	r3, #1
 8007990:	d10d      	bne.n	80079ae <USB_HC_StartXfer+0x136>
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	6a1b      	ldr	r3, [r3, #32]
 8007996:	68ba      	ldr	r2, [r7, #8]
 8007998:	8a92      	ldrh	r2, [r2, #20]
 800799a:	4293      	cmp	r3, r2
 800799c:	d907      	bls.n	80079ae <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800799e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80079a0:	68ba      	ldr	r2, [r7, #8]
 80079a2:	8a92      	ldrh	r2, [r2, #20]
 80079a4:	fb03 f202 	mul.w	r2, r3, r2
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	61da      	str	r2, [r3, #28]
 80079ac:	e036      	b.n	8007a1c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	6a1a      	ldr	r2, [r3, #32]
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	61da      	str	r2, [r3, #28]
 80079b6:	e031      	b.n	8007a1c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	6a1b      	ldr	r3, [r3, #32]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d018      	beq.n	80079f2 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	6a1b      	ldr	r3, [r3, #32]
 80079c4:	68ba      	ldr	r2, [r7, #8]
 80079c6:	8a92      	ldrh	r2, [r2, #20]
 80079c8:	4413      	add	r3, r2
 80079ca:	3b01      	subs	r3, #1
 80079cc:	68ba      	ldr	r2, [r7, #8]
 80079ce:	8a92      	ldrh	r2, [r2, #20]
 80079d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80079d4:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80079d6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80079d8:	8b7b      	ldrh	r3, [r7, #26]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d90b      	bls.n	80079f6 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80079de:	8b7b      	ldrh	r3, [r7, #26]
 80079e0:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80079e2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80079e4:	68ba      	ldr	r2, [r7, #8]
 80079e6:	8a92      	ldrh	r2, [r2, #20]
 80079e8:	fb03 f202 	mul.w	r2, r3, r2
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	61da      	str	r2, [r3, #28]
 80079f0:	e001      	b.n	80079f6 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80079f2:	2301      	movs	r3, #1
 80079f4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	78db      	ldrb	r3, [r3, #3]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d00a      	beq.n	8007a14 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80079fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007a00:	68ba      	ldr	r2, [r7, #8]
 8007a02:	8a92      	ldrh	r2, [r2, #20]
 8007a04:	fb03 f202 	mul.w	r2, r3, r2
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	61da      	str	r2, [r3, #28]
 8007a0c:	e006      	b.n	8007a1c <USB_HC_StartXfer+0x1a4>
 8007a0e:	bf00      	nop
 8007a10:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	6a1a      	ldr	r2, [r3, #32]
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	69db      	ldr	r3, [r3, #28]
 8007a20:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007a24:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007a26:	04d9      	lsls	r1, r3, #19
 8007a28:	4ba3      	ldr	r3, [pc, #652]	@ (8007cb8 <USB_HC_StartXfer+0x440>)
 8007a2a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007a2c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	7d9b      	ldrb	r3, [r3, #22]
 8007a32:	075b      	lsls	r3, r3, #29
 8007a34:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007a38:	69f9      	ldr	r1, [r7, #28]
 8007a3a:	0148      	lsls	r0, r1, #5
 8007a3c:	6a39      	ldr	r1, [r7, #32]
 8007a3e:	4401      	add	r1, r0
 8007a40:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007a44:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007a46:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007a48:	79fb      	ldrb	r3, [r7, #7]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d009      	beq.n	8007a62 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	6999      	ldr	r1, [r3, #24]
 8007a52:	69fb      	ldr	r3, [r7, #28]
 8007a54:	015a      	lsls	r2, r3, #5
 8007a56:	6a3b      	ldr	r3, [r7, #32]
 8007a58:	4413      	add	r3, r2
 8007a5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a5e:	460a      	mov	r2, r1
 8007a60:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007a62:	6a3b      	ldr	r3, [r7, #32]
 8007a64:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	f003 0301 	and.w	r3, r3, #1
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	bf0c      	ite	eq
 8007a72:	2301      	moveq	r3, #1
 8007a74:	2300      	movne	r3, #0
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007a7a:	69fb      	ldr	r3, [r7, #28]
 8007a7c:	015a      	lsls	r2, r3, #5
 8007a7e:	6a3b      	ldr	r3, [r7, #32]
 8007a80:	4413      	add	r3, r2
 8007a82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	69fa      	ldr	r2, [r7, #28]
 8007a8a:	0151      	lsls	r1, r2, #5
 8007a8c:	6a3a      	ldr	r2, [r7, #32]
 8007a8e:	440a      	add	r2, r1
 8007a90:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a94:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007a98:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	015a      	lsls	r2, r3, #5
 8007a9e:	6a3b      	ldr	r3, [r7, #32]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	7e7b      	ldrb	r3, [r7, #25]
 8007aaa:	075b      	lsls	r3, r3, #29
 8007aac:	69f9      	ldr	r1, [r7, #28]
 8007aae:	0148      	lsls	r0, r1, #5
 8007ab0:	6a39      	ldr	r1, [r7, #32]
 8007ab2:	4401      	add	r1, r0
 8007ab4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	799b      	ldrb	r3, [r3, #6]
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	f040 80c3 	bne.w	8007c4c <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	7c5b      	ldrb	r3, [r3, #17]
 8007aca:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007acc:	68ba      	ldr	r2, [r7, #8]
 8007ace:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	69fa      	ldr	r2, [r7, #28]
 8007ad4:	0151      	lsls	r1, r2, #5
 8007ad6:	6a3a      	ldr	r2, [r7, #32]
 8007ad8:	440a      	add	r2, r1
 8007ada:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007ae2:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	015a      	lsls	r2, r3, #5
 8007ae8:	6a3b      	ldr	r3, [r7, #32]
 8007aea:	4413      	add	r3, r2
 8007aec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007af0:	68db      	ldr	r3, [r3, #12]
 8007af2:	69fa      	ldr	r2, [r7, #28]
 8007af4:	0151      	lsls	r1, r2, #5
 8007af6:	6a3a      	ldr	r2, [r7, #32]
 8007af8:	440a      	add	r2, r1
 8007afa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007afe:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007b02:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	79db      	ldrb	r3, [r3, #7]
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d123      	bne.n	8007b54 <USB_HC_StartXfer+0x2dc>
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	78db      	ldrb	r3, [r3, #3]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d11f      	bne.n	8007b54 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	015a      	lsls	r2, r3, #5
 8007b18:	6a3b      	ldr	r3, [r7, #32]
 8007b1a:	4413      	add	r3, r2
 8007b1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	69fa      	ldr	r2, [r7, #28]
 8007b24:	0151      	lsls	r1, r2, #5
 8007b26:	6a3a      	ldr	r2, [r7, #32]
 8007b28:	440a      	add	r2, r1
 8007b2a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b32:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	015a      	lsls	r2, r3, #5
 8007b38:	6a3b      	ldr	r3, [r7, #32]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	69fa      	ldr	r2, [r7, #28]
 8007b44:	0151      	lsls	r1, r2, #5
 8007b46:	6a3a      	ldr	r2, [r7, #32]
 8007b48:	440a      	add	r2, r1
 8007b4a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b52:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	7c9b      	ldrb	r3, [r3, #18]
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d003      	beq.n	8007b64 <USB_HC_StartXfer+0x2ec>
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	7c9b      	ldrb	r3, [r3, #18]
 8007b60:	2b03      	cmp	r3, #3
 8007b62:	d117      	bne.n	8007b94 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d113      	bne.n	8007b94 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	78db      	ldrb	r3, [r3, #3]
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d10f      	bne.n	8007b94 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	015a      	lsls	r2, r3, #5
 8007b78:	6a3b      	ldr	r3, [r7, #32]
 8007b7a:	4413      	add	r3, r2
 8007b7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	69fa      	ldr	r2, [r7, #28]
 8007b84:	0151      	lsls	r1, r2, #5
 8007b86:	6a3a      	ldr	r2, [r7, #32]
 8007b88:	440a      	add	r2, r1
 8007b8a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b92:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	7c9b      	ldrb	r3, [r3, #18]
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d162      	bne.n	8007c62 <USB_HC_StartXfer+0x3ea>
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	78db      	ldrb	r3, [r3, #3]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d15e      	bne.n	8007c62 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	2b03      	cmp	r3, #3
 8007bac:	d858      	bhi.n	8007c60 <USB_HC_StartXfer+0x3e8>
 8007bae:	a201      	add	r2, pc, #4	@ (adr r2, 8007bb4 <USB_HC_StartXfer+0x33c>)
 8007bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb4:	08007bc5 	.word	0x08007bc5
 8007bb8:	08007be7 	.word	0x08007be7
 8007bbc:	08007c09 	.word	0x08007c09
 8007bc0:	08007c2b 	.word	0x08007c2b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	015a      	lsls	r2, r3, #5
 8007bc8:	6a3b      	ldr	r3, [r7, #32]
 8007bca:	4413      	add	r3, r2
 8007bcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	69fa      	ldr	r2, [r7, #28]
 8007bd4:	0151      	lsls	r1, r2, #5
 8007bd6:	6a3a      	ldr	r2, [r7, #32]
 8007bd8:	440a      	add	r2, r1
 8007bda:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007bde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007be2:	6053      	str	r3, [r2, #4]
          break;
 8007be4:	e03d      	b.n	8007c62 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8007be6:	69fb      	ldr	r3, [r7, #28]
 8007be8:	015a      	lsls	r2, r3, #5
 8007bea:	6a3b      	ldr	r3, [r7, #32]
 8007bec:	4413      	add	r3, r2
 8007bee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	69fa      	ldr	r2, [r7, #28]
 8007bf6:	0151      	lsls	r1, r2, #5
 8007bf8:	6a3a      	ldr	r2, [r7, #32]
 8007bfa:	440a      	add	r2, r1
 8007bfc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c00:	f043 030e 	orr.w	r3, r3, #14
 8007c04:	6053      	str	r3, [r2, #4]
          break;
 8007c06:	e02c      	b.n	8007c62 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8007c08:	69fb      	ldr	r3, [r7, #28]
 8007c0a:	015a      	lsls	r2, r3, #5
 8007c0c:	6a3b      	ldr	r3, [r7, #32]
 8007c0e:	4413      	add	r3, r2
 8007c10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	69fa      	ldr	r2, [r7, #28]
 8007c18:	0151      	lsls	r1, r2, #5
 8007c1a:	6a3a      	ldr	r2, [r7, #32]
 8007c1c:	440a      	add	r2, r1
 8007c1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007c26:	6053      	str	r3, [r2, #4]
          break;
 8007c28:	e01b      	b.n	8007c62 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	015a      	lsls	r2, r3, #5
 8007c2e:	6a3b      	ldr	r3, [r7, #32]
 8007c30:	4413      	add	r3, r2
 8007c32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	69fa      	ldr	r2, [r7, #28]
 8007c3a:	0151      	lsls	r1, r2, #5
 8007c3c:	6a3a      	ldr	r2, [r7, #32]
 8007c3e:	440a      	add	r2, r1
 8007c40:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c44:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007c48:	6053      	str	r3, [r2, #4]
          break;
 8007c4a:	e00a      	b.n	8007c62 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	015a      	lsls	r2, r3, #5
 8007c50:	6a3b      	ldr	r3, [r7, #32]
 8007c52:	4413      	add	r3, r2
 8007c54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c58:	461a      	mov	r2, r3
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	6053      	str	r3, [r2, #4]
 8007c5e:	e000      	b.n	8007c62 <USB_HC_StartXfer+0x3ea>
          break;
 8007c60:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007c62:	69fb      	ldr	r3, [r7, #28]
 8007c64:	015a      	lsls	r2, r3, #5
 8007c66:	6a3b      	ldr	r3, [r7, #32]
 8007c68:	4413      	add	r3, r2
 8007c6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007c78:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	78db      	ldrb	r3, [r3, #3]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d004      	beq.n	8007c8c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c88:	613b      	str	r3, [r7, #16]
 8007c8a:	e003      	b.n	8007c94 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007c92:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007c9a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007c9c:	69fb      	ldr	r3, [r7, #28]
 8007c9e:	015a      	lsls	r2, r3, #5
 8007ca0:	6a3b      	ldr	r3, [r7, #32]
 8007ca2:	4413      	add	r3, r2
 8007ca4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ca8:	461a      	mov	r2, r3
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007cae:	79fb      	ldrb	r3, [r7, #7]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d003      	beq.n	8007cbc <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	e055      	b.n	8007d64 <USB_HC_StartXfer+0x4ec>
 8007cb8:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	78db      	ldrb	r3, [r3, #3]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d14e      	bne.n	8007d62 <USB_HC_StartXfer+0x4ea>
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	6a1b      	ldr	r3, [r3, #32]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d04a      	beq.n	8007d62 <USB_HC_StartXfer+0x4ea>
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	79db      	ldrb	r3, [r3, #7]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d146      	bne.n	8007d62 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	7c9b      	ldrb	r3, [r3, #18]
 8007cd8:	2b03      	cmp	r3, #3
 8007cda:	d831      	bhi.n	8007d40 <USB_HC_StartXfer+0x4c8>
 8007cdc:	a201      	add	r2, pc, #4	@ (adr r2, 8007ce4 <USB_HC_StartXfer+0x46c>)
 8007cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ce2:	bf00      	nop
 8007ce4:	08007cf5 	.word	0x08007cf5
 8007ce8:	08007d19 	.word	0x08007d19
 8007cec:	08007cf5 	.word	0x08007cf5
 8007cf0:	08007d19 	.word	0x08007d19
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	6a1b      	ldr	r3, [r3, #32]
 8007cf8:	3303      	adds	r3, #3
 8007cfa:	089b      	lsrs	r3, r3, #2
 8007cfc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007cfe:	8afa      	ldrh	r2, [r7, #22]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d91c      	bls.n	8007d44 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	699b      	ldr	r3, [r3, #24]
 8007d0e:	f043 0220 	orr.w	r2, r3, #32
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	619a      	str	r2, [r3, #24]
        }
        break;
 8007d16:	e015      	b.n	8007d44 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	6a1b      	ldr	r3, [r3, #32]
 8007d1c:	3303      	adds	r3, #3
 8007d1e:	089b      	lsrs	r3, r3, #2
 8007d20:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007d22:	8afa      	ldrh	r2, [r7, #22]
 8007d24:	6a3b      	ldr	r3, [r7, #32]
 8007d26:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d2a:	691b      	ldr	r3, [r3, #16]
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d90a      	bls.n	8007d48 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	699b      	ldr	r3, [r3, #24]
 8007d36:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	619a      	str	r2, [r3, #24]
        }
        break;
 8007d3e:	e003      	b.n	8007d48 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8007d40:	bf00      	nop
 8007d42:	e002      	b.n	8007d4a <USB_HC_StartXfer+0x4d2>
        break;
 8007d44:	bf00      	nop
 8007d46:	e000      	b.n	8007d4a <USB_HC_StartXfer+0x4d2>
        break;
 8007d48:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	6999      	ldr	r1, [r3, #24]
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	785a      	ldrb	r2, [r3, #1]
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	6a1b      	ldr	r3, [r3, #32]
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	2000      	movs	r0, #0
 8007d5a:	9000      	str	r0, [sp, #0]
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f7ff f9c9 	bl	80070f4 <USB_WritePacket>
  }

  return HAL_OK;
 8007d62:	2300      	movs	r3, #0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3728      	adds	r7, #40	@ 0x28
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b085      	sub	sp, #20
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d7e:	695b      	ldr	r3, [r3, #20]
 8007d80:	b29b      	uxth	r3, r3
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3714      	adds	r7, #20
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr

08007d8e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007d8e:	b480      	push	{r7}
 8007d90:	b089      	sub	sp, #36	@ 0x24
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
 8007d96:	460b      	mov	r3, r1
 8007d98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007d9e:	78fb      	ldrb	r3, [r7, #3]
 8007da0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007da2:	2300      	movs	r3, #0
 8007da4:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	015a      	lsls	r2, r3, #5
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	4413      	add	r3, r2
 8007dae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	0c9b      	lsrs	r3, r3, #18
 8007db6:	f003 0303 	and.w	r3, r3, #3
 8007dba:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	015a      	lsls	r2, r3, #5
 8007dc0:	69fb      	ldr	r3, [r7, #28]
 8007dc2:	4413      	add	r3, r2
 8007dc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	0fdb      	lsrs	r3, r3, #31
 8007dcc:	f003 0301 	and.w	r3, r3, #1
 8007dd0:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	015a      	lsls	r2, r3, #5
 8007dd6:	69fb      	ldr	r3, [r7, #28]
 8007dd8:	4413      	add	r3, r2
 8007dda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	0fdb      	lsrs	r3, r3, #31
 8007de2:	f003 0301 	and.w	r3, r3, #1
 8007de6:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	f003 0320 	and.w	r3, r3, #32
 8007df0:	2b20      	cmp	r3, #32
 8007df2:	d10d      	bne.n	8007e10 <USB_HC_Halt+0x82>
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d10a      	bne.n	8007e10 <USB_HC_Halt+0x82>
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d005      	beq.n	8007e0c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d002      	beq.n	8007e0c <USB_HC_Halt+0x7e>
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	2b03      	cmp	r3, #3
 8007e0a:	d101      	bne.n	8007e10 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	e0d8      	b.n	8007fc2 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d002      	beq.n	8007e1c <USB_HC_Halt+0x8e>
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	2b02      	cmp	r3, #2
 8007e1a:	d173      	bne.n	8007f04 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007e1c:	69bb      	ldr	r3, [r7, #24]
 8007e1e:	015a      	lsls	r2, r3, #5
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	4413      	add	r3, r2
 8007e24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	69ba      	ldr	r2, [r7, #24]
 8007e2c:	0151      	lsls	r1, r2, #5
 8007e2e:	69fa      	ldr	r2, [r7, #28]
 8007e30:	440a      	add	r2, r1
 8007e32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e36:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007e3a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	f003 0320 	and.w	r3, r3, #32
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d14a      	bne.n	8007ede <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e4c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d133      	bne.n	8007ebc <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007e54:	69bb      	ldr	r3, [r7, #24]
 8007e56:	015a      	lsls	r2, r3, #5
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	4413      	add	r3, r2
 8007e5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	69ba      	ldr	r2, [r7, #24]
 8007e64:	0151      	lsls	r1, r2, #5
 8007e66:	69fa      	ldr	r2, [r7, #28]
 8007e68:	440a      	add	r2, r1
 8007e6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e6e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007e72:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e74:	69bb      	ldr	r3, [r7, #24]
 8007e76:	015a      	lsls	r2, r3, #5
 8007e78:	69fb      	ldr	r3, [r7, #28]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	69ba      	ldr	r2, [r7, #24]
 8007e84:	0151      	lsls	r1, r2, #5
 8007e86:	69fa      	ldr	r2, [r7, #28]
 8007e88:	440a      	add	r2, r1
 8007e8a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007e92:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	3301      	adds	r3, #1
 8007e98:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007ea0:	d82e      	bhi.n	8007f00 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007ea2:	69bb      	ldr	r3, [r7, #24]
 8007ea4:	015a      	lsls	r2, r3, #5
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007eb4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007eb8:	d0ec      	beq.n	8007e94 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007eba:	e081      	b.n	8007fc0 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ebc:	69bb      	ldr	r3, [r7, #24]
 8007ebe:	015a      	lsls	r2, r3, #5
 8007ec0:	69fb      	ldr	r3, [r7, #28]
 8007ec2:	4413      	add	r3, r2
 8007ec4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	69ba      	ldr	r2, [r7, #24]
 8007ecc:	0151      	lsls	r1, r2, #5
 8007ece:	69fa      	ldr	r2, [r7, #28]
 8007ed0:	440a      	add	r2, r1
 8007ed2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ed6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007eda:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007edc:	e070      	b.n	8007fc0 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	015a      	lsls	r2, r3, #5
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	69ba      	ldr	r2, [r7, #24]
 8007eee:	0151      	lsls	r1, r2, #5
 8007ef0:	69fa      	ldr	r2, [r7, #28]
 8007ef2:	440a      	add	r2, r1
 8007ef4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ef8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007efc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007efe:	e05f      	b.n	8007fc0 <USB_HC_Halt+0x232>
            break;
 8007f00:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007f02:	e05d      	b.n	8007fc0 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	015a      	lsls	r2, r3, #5
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	4413      	add	r3, r2
 8007f0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	69ba      	ldr	r2, [r7, #24]
 8007f14:	0151      	lsls	r1, r2, #5
 8007f16:	69fa      	ldr	r2, [r7, #28]
 8007f18:	440a      	add	r2, r1
 8007f1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f1e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007f22:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007f24:	69fb      	ldr	r3, [r7, #28]
 8007f26:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007f2a:	691b      	ldr	r3, [r3, #16]
 8007f2c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d133      	bne.n	8007f9c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007f34:	69bb      	ldr	r3, [r7, #24]
 8007f36:	015a      	lsls	r2, r3, #5
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	4413      	add	r3, r2
 8007f3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	69ba      	ldr	r2, [r7, #24]
 8007f44:	0151      	lsls	r1, r2, #5
 8007f46:	69fa      	ldr	r2, [r7, #28]
 8007f48:	440a      	add	r2, r1
 8007f4a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f4e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007f52:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f54:	69bb      	ldr	r3, [r7, #24]
 8007f56:	015a      	lsls	r2, r3, #5
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	69ba      	ldr	r2, [r7, #24]
 8007f64:	0151      	lsls	r1, r2, #5
 8007f66:	69fa      	ldr	r2, [r7, #28]
 8007f68:	440a      	add	r2, r1
 8007f6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f6e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007f72:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	3301      	adds	r3, #1
 8007f78:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007f80:	d81d      	bhi.n	8007fbe <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	015a      	lsls	r2, r3, #5
 8007f86:	69fb      	ldr	r3, [r7, #28]
 8007f88:	4413      	add	r3, r2
 8007f8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f98:	d0ec      	beq.n	8007f74 <USB_HC_Halt+0x1e6>
 8007f9a:	e011      	b.n	8007fc0 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	015a      	lsls	r2, r3, #5
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	4413      	add	r3, r2
 8007fa4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	69ba      	ldr	r2, [r7, #24]
 8007fac:	0151      	lsls	r1, r2, #5
 8007fae:	69fa      	ldr	r2, [r7, #28]
 8007fb0:	440a      	add	r2, r1
 8007fb2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007fb6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007fba:	6013      	str	r3, [r2, #0]
 8007fbc:	e000      	b.n	8007fc0 <USB_HC_Halt+0x232>
          break;
 8007fbe:	bf00      	nop
    }
  }

  return HAL_OK;
 8007fc0:	2300      	movs	r3, #0
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3724      	adds	r7, #36	@ 0x24
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr
	...

08007fd0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b087      	sub	sp, #28
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	460b      	mov	r3, r1
 8007fda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007fe0:	78fb      	ldrb	r3, [r7, #3]
 8007fe2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	04da      	lsls	r2, r3, #19
 8007fec:	4b15      	ldr	r3, [pc, #84]	@ (8008044 <USB_DoPing+0x74>)
 8007fee:	4013      	ands	r3, r2
 8007ff0:	693a      	ldr	r2, [r7, #16]
 8007ff2:	0151      	lsls	r1, r2, #5
 8007ff4:	697a      	ldr	r2, [r7, #20]
 8007ff6:	440a      	add	r2, r1
 8007ff8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ffc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008000:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	015a      	lsls	r2, r3, #5
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	4413      	add	r3, r2
 800800a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008018:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008020:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	015a      	lsls	r2, r3, #5
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	4413      	add	r3, r2
 800802a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800802e:	461a      	mov	r2, r3
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	371c      	adds	r7, #28
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr
 8008042:	bf00      	nop
 8008044:	1ff80000 	.word	0x1ff80000

08008048 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b088      	sub	sp, #32
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008050:	2300      	movs	r3, #0
 8008052:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008058:	2300      	movs	r3, #0
 800805a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f7fe ff8c 	bl	8006f7a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008062:	2110      	movs	r1, #16
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f7fe ffe5 	bl	8007034 <USB_FlushTxFifo>
 800806a:	4603      	mov	r3, r0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d001      	beq.n	8008074 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f7ff f80f 	bl	8007098 <USB_FlushRxFifo>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d001      	beq.n	8008084 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008084:	2300      	movs	r3, #0
 8008086:	61bb      	str	r3, [r7, #24]
 8008088:	e01f      	b.n	80080ca <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800808a:	69bb      	ldr	r3, [r7, #24]
 800808c:	015a      	lsls	r2, r3, #5
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	4413      	add	r3, r2
 8008092:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80080a0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80080a8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80080b0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80080b2:	69bb      	ldr	r3, [r7, #24]
 80080b4:	015a      	lsls	r2, r3, #5
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	4413      	add	r3, r2
 80080ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080be:	461a      	mov	r2, r3
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80080c4:	69bb      	ldr	r3, [r7, #24]
 80080c6:	3301      	adds	r3, #1
 80080c8:	61bb      	str	r3, [r7, #24]
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	2b0f      	cmp	r3, #15
 80080ce:	d9dc      	bls.n	800808a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80080d0:	2300      	movs	r3, #0
 80080d2:	61bb      	str	r3, [r7, #24]
 80080d4:	e034      	b.n	8008140 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	015a      	lsls	r2, r3, #5
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	4413      	add	r3, r2
 80080de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80080ec:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80080f4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80080fc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	015a      	lsls	r2, r3, #5
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	4413      	add	r3, r2
 8008106:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800810a:	461a      	mov	r2, r3
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	3301      	adds	r3, #1
 8008114:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800811c:	d80c      	bhi.n	8008138 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	015a      	lsls	r2, r3, #5
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	4413      	add	r3, r2
 8008126:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008130:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008134:	d0ec      	beq.n	8008110 <USB_StopHost+0xc8>
 8008136:	e000      	b.n	800813a <USB_StopHost+0xf2>
        break;
 8008138:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800813a:	69bb      	ldr	r3, [r7, #24]
 800813c:	3301      	adds	r3, #1
 800813e:	61bb      	str	r3, [r7, #24]
 8008140:	69bb      	ldr	r3, [r7, #24]
 8008142:	2b0f      	cmp	r3, #15
 8008144:	d9c7      	bls.n	80080d6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800814c:	461a      	mov	r2, r3
 800814e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008152:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800815a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f7fe fefb 	bl	8006f58 <USB_EnableGlobalInt>

  return ret;
 8008162:	7ffb      	ldrb	r3, [r7, #31]
}
 8008164:	4618      	mov	r0, r3
 8008166:	3720      	adds	r7, #32
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800816c:	b590      	push	{r4, r7, lr}
 800816e:	b089      	sub	sp, #36	@ 0x24
 8008170:	af04      	add	r7, sp, #16
 8008172:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008174:	2301      	movs	r3, #1
 8008176:	2202      	movs	r2, #2
 8008178:	2102      	movs	r1, #2
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 fc85 	bl	8008a8a <USBH_FindInterface>
 8008180:	4603      	mov	r3, r0
 8008182:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008184:	7bfb      	ldrb	r3, [r7, #15]
 8008186:	2bff      	cmp	r3, #255	@ 0xff
 8008188:	d002      	beq.n	8008190 <USBH_CDC_InterfaceInit+0x24>
 800818a:	7bfb      	ldrb	r3, [r7, #15]
 800818c:	2b01      	cmp	r3, #1
 800818e:	d901      	bls.n	8008194 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008190:	2302      	movs	r3, #2
 8008192:	e13d      	b.n	8008410 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008194:	7bfb      	ldrb	r3, [r7, #15]
 8008196:	4619      	mov	r1, r3
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 fc5a 	bl	8008a52 <USBH_SelectInterface>
 800819e:	4603      	mov	r3, r0
 80081a0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80081a2:	7bbb      	ldrb	r3, [r7, #14]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d001      	beq.n	80081ac <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80081a8:	2302      	movs	r3, #2
 80081aa:	e131      	b.n	8008410 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80081b2:	2050      	movs	r0, #80	@ 0x50
 80081b4:	f002 fb64 	bl	800a880 <malloc>
 80081b8:	4603      	mov	r3, r0
 80081ba:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80081c2:	69db      	ldr	r3, [r3, #28]
 80081c4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d101      	bne.n	80081d0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80081cc:	2302      	movs	r3, #2
 80081ce:	e11f      	b.n	8008410 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80081d0:	2250      	movs	r2, #80	@ 0x50
 80081d2:	2100      	movs	r1, #0
 80081d4:	68b8      	ldr	r0, [r7, #8]
 80081d6:	f002 fd54 	bl	800ac82 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80081da:	7bfb      	ldrb	r3, [r7, #15]
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	211a      	movs	r1, #26
 80081e0:	fb01 f303 	mul.w	r3, r1, r3
 80081e4:	4413      	add	r3, r2
 80081e6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	b25b      	sxtb	r3, r3
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	da15      	bge.n	800821e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80081f2:	7bfb      	ldrb	r3, [r7, #15]
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	211a      	movs	r1, #26
 80081f8:	fb01 f303 	mul.w	r3, r1, r3
 80081fc:	4413      	add	r3, r2
 80081fe:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008202:	781a      	ldrb	r2, [r3, #0]
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008208:	7bfb      	ldrb	r3, [r7, #15]
 800820a:	687a      	ldr	r2, [r7, #4]
 800820c:	211a      	movs	r1, #26
 800820e:	fb01 f303 	mul.w	r3, r1, r3
 8008212:	4413      	add	r3, r2
 8008214:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008218:	881a      	ldrh	r2, [r3, #0]
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	785b      	ldrb	r3, [r3, #1]
 8008222:	4619      	mov	r1, r3
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f001 ffbe 	bl	800a1a6 <USBH_AllocPipe>
 800822a:	4603      	mov	r3, r0
 800822c:	461a      	mov	r2, r3
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	7819      	ldrb	r1, [r3, #0]
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	7858      	ldrb	r0, [r3, #1]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008246:	68ba      	ldr	r2, [r7, #8]
 8008248:	8952      	ldrh	r2, [r2, #10]
 800824a:	9202      	str	r2, [sp, #8]
 800824c:	2203      	movs	r2, #3
 800824e:	9201      	str	r2, [sp, #4]
 8008250:	9300      	str	r3, [sp, #0]
 8008252:	4623      	mov	r3, r4
 8008254:	4602      	mov	r2, r0
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f001 ff76 	bl	800a148 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	2200      	movs	r2, #0
 8008262:	4619      	mov	r1, r3
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f002 fa85 	bl	800a774 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800826a:	2300      	movs	r3, #0
 800826c:	2200      	movs	r2, #0
 800826e:	210a      	movs	r1, #10
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 fc0a 	bl	8008a8a <USBH_FindInterface>
 8008276:	4603      	mov	r3, r0
 8008278:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800827a:	7bfb      	ldrb	r3, [r7, #15]
 800827c:	2bff      	cmp	r3, #255	@ 0xff
 800827e:	d002      	beq.n	8008286 <USBH_CDC_InterfaceInit+0x11a>
 8008280:	7bfb      	ldrb	r3, [r7, #15]
 8008282:	2b01      	cmp	r3, #1
 8008284:	d901      	bls.n	800828a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008286:	2302      	movs	r3, #2
 8008288:	e0c2      	b.n	8008410 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800828a:	7bfb      	ldrb	r3, [r7, #15]
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	211a      	movs	r1, #26
 8008290:	fb01 f303 	mul.w	r3, r1, r3
 8008294:	4413      	add	r3, r2
 8008296:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	b25b      	sxtb	r3, r3
 800829e:	2b00      	cmp	r3, #0
 80082a0:	da16      	bge.n	80082d0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80082a2:	7bfb      	ldrb	r3, [r7, #15]
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	211a      	movs	r1, #26
 80082a8:	fb01 f303 	mul.w	r3, r1, r3
 80082ac:	4413      	add	r3, r2
 80082ae:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80082b2:	781a      	ldrb	r2, [r3, #0]
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80082b8:	7bfb      	ldrb	r3, [r7, #15]
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	211a      	movs	r1, #26
 80082be:	fb01 f303 	mul.w	r3, r1, r3
 80082c2:	4413      	add	r3, r2
 80082c4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80082c8:	881a      	ldrh	r2, [r3, #0]
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	835a      	strh	r2, [r3, #26]
 80082ce:	e015      	b.n	80082fc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80082d0:	7bfb      	ldrb	r3, [r7, #15]
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	211a      	movs	r1, #26
 80082d6:	fb01 f303 	mul.w	r3, r1, r3
 80082da:	4413      	add	r3, r2
 80082dc:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80082e0:	781a      	ldrb	r2, [r3, #0]
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80082e6:	7bfb      	ldrb	r3, [r7, #15]
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	211a      	movs	r1, #26
 80082ec:	fb01 f303 	mul.w	r3, r1, r3
 80082f0:	4413      	add	r3, r2
 80082f2:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80082f6:	881a      	ldrh	r2, [r3, #0]
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80082fc:	7bfb      	ldrb	r3, [r7, #15]
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	211a      	movs	r1, #26
 8008302:	fb01 f303 	mul.w	r3, r1, r3
 8008306:	4413      	add	r3, r2
 8008308:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	b25b      	sxtb	r3, r3
 8008310:	2b00      	cmp	r3, #0
 8008312:	da16      	bge.n	8008342 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008314:	7bfb      	ldrb	r3, [r7, #15]
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	211a      	movs	r1, #26
 800831a:	fb01 f303 	mul.w	r3, r1, r3
 800831e:	4413      	add	r3, r2
 8008320:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008324:	781a      	ldrb	r2, [r3, #0]
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800832a:	7bfb      	ldrb	r3, [r7, #15]
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	211a      	movs	r1, #26
 8008330:	fb01 f303 	mul.w	r3, r1, r3
 8008334:	4413      	add	r3, r2
 8008336:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800833a:	881a      	ldrh	r2, [r3, #0]
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	835a      	strh	r2, [r3, #26]
 8008340:	e015      	b.n	800836e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008342:	7bfb      	ldrb	r3, [r7, #15]
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	211a      	movs	r1, #26
 8008348:	fb01 f303 	mul.w	r3, r1, r3
 800834c:	4413      	add	r3, r2
 800834e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008352:	781a      	ldrb	r2, [r3, #0]
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008358:	7bfb      	ldrb	r3, [r7, #15]
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	211a      	movs	r1, #26
 800835e:	fb01 f303 	mul.w	r3, r1, r3
 8008362:	4413      	add	r3, r2
 8008364:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008368:	881a      	ldrh	r2, [r3, #0]
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	7b9b      	ldrb	r3, [r3, #14]
 8008372:	4619      	mov	r1, r3
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f001 ff16 	bl	800a1a6 <USBH_AllocPipe>
 800837a:	4603      	mov	r3, r0
 800837c:	461a      	mov	r2, r3
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	7bdb      	ldrb	r3, [r3, #15]
 8008386:	4619      	mov	r1, r3
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f001 ff0c 	bl	800a1a6 <USBH_AllocPipe>
 800838e:	4603      	mov	r3, r0
 8008390:	461a      	mov	r2, r3
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	7b59      	ldrb	r1, [r3, #13]
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	7b98      	ldrb	r0, [r3, #14]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80083aa:	68ba      	ldr	r2, [r7, #8]
 80083ac:	8b12      	ldrh	r2, [r2, #24]
 80083ae:	9202      	str	r2, [sp, #8]
 80083b0:	2202      	movs	r2, #2
 80083b2:	9201      	str	r2, [sp, #4]
 80083b4:	9300      	str	r3, [sp, #0]
 80083b6:	4623      	mov	r3, r4
 80083b8:	4602      	mov	r2, r0
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f001 fec4 	bl	800a148 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	7b19      	ldrb	r1, [r3, #12]
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	7bd8      	ldrb	r0, [r3, #15]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80083d4:	68ba      	ldr	r2, [r7, #8]
 80083d6:	8b52      	ldrh	r2, [r2, #26]
 80083d8:	9202      	str	r2, [sp, #8]
 80083da:	2202      	movs	r2, #2
 80083dc:	9201      	str	r2, [sp, #4]
 80083de:	9300      	str	r3, [sp, #0]
 80083e0:	4623      	mov	r3, r4
 80083e2:	4602      	mov	r2, r0
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f001 feaf 	bl	800a148 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	2200      	movs	r2, #0
 80083ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	7b5b      	ldrb	r3, [r3, #13]
 80083f6:	2200      	movs	r2, #0
 80083f8:	4619      	mov	r1, r3
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f002 f9ba 	bl	800a774 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	7b1b      	ldrb	r3, [r3, #12]
 8008404:	2200      	movs	r2, #0
 8008406:	4619      	mov	r1, r3
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f002 f9b3 	bl	800a774 <USBH_LL_SetToggle>

  return USBH_OK;
 800840e:	2300      	movs	r3, #0
}
 8008410:	4618      	mov	r0, r3
 8008412:	3714      	adds	r7, #20
 8008414:	46bd      	mov	sp, r7
 8008416:	bd90      	pop	{r4, r7, pc}

08008418 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008426:	69db      	ldr	r3, [r3, #28]
 8008428:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d00e      	beq.n	8008450 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	4619      	mov	r1, r3
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f001 fea4 	bl	800a186 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	4619      	mov	r1, r3
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f001 fecf 	bl	800a1e8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2200      	movs	r2, #0
 800844e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	7b1b      	ldrb	r3, [r3, #12]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d00e      	beq.n	8008476 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	7b1b      	ldrb	r3, [r3, #12]
 800845c:	4619      	mov	r1, r3
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f001 fe91 	bl	800a186 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	7b1b      	ldrb	r3, [r3, #12]
 8008468:	4619      	mov	r1, r3
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f001 febc 	bl	800a1e8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2200      	movs	r2, #0
 8008474:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	7b5b      	ldrb	r3, [r3, #13]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d00e      	beq.n	800849c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	7b5b      	ldrb	r3, [r3, #13]
 8008482:	4619      	mov	r1, r3
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f001 fe7e 	bl	800a186 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	7b5b      	ldrb	r3, [r3, #13]
 800848e:	4619      	mov	r1, r3
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f001 fea9 	bl	800a1e8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2200      	movs	r2, #0
 800849a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80084a2:	69db      	ldr	r3, [r3, #28]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00b      	beq.n	80084c0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80084ae:	69db      	ldr	r3, [r3, #28]
 80084b0:	4618      	mov	r0, r3
 80084b2:	f002 f9ed 	bl	800a890 <free>
    phost->pActiveClass->pData = 0U;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80084bc:	2200      	movs	r2, #0
 80084be:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80084c0:	2300      	movs	r3, #0
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3710      	adds	r7, #16
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}

080084ca <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80084ca:	b580      	push	{r7, lr}
 80084cc:	b084      	sub	sp, #16
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80084d8:	69db      	ldr	r3, [r3, #28]
 80084da:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	3340      	adds	r3, #64	@ 0x40
 80084e0:	4619      	mov	r1, r3
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 f8b1 	bl	800864a <GetLineCoding>
 80084e8:	4603      	mov	r3, r0
 80084ea:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80084ec:	7afb      	ldrb	r3, [r7, #11]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d105      	bne.n	80084fe <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80084f8:	2102      	movs	r1, #2
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80084fe:	7afb      	ldrb	r3, [r7, #11]
}
 8008500:	4618      	mov	r0, r3
 8008502:	3710      	adds	r7, #16
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008510:	2301      	movs	r3, #1
 8008512:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008514:	2300      	movs	r3, #0
 8008516:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800851e:	69db      	ldr	r3, [r3, #28]
 8008520:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008528:	2b04      	cmp	r3, #4
 800852a:	d877      	bhi.n	800861c <USBH_CDC_Process+0x114>
 800852c:	a201      	add	r2, pc, #4	@ (adr r2, 8008534 <USBH_CDC_Process+0x2c>)
 800852e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008532:	bf00      	nop
 8008534:	08008549 	.word	0x08008549
 8008538:	0800854f 	.word	0x0800854f
 800853c:	0800857f 	.word	0x0800857f
 8008540:	080085f3 	.word	0x080085f3
 8008544:	08008601 	.word	0x08008601
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008548:	2300      	movs	r3, #0
 800854a:	73fb      	strb	r3, [r7, #15]
      break;
 800854c:	e06d      	b.n	800862a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008552:	4619      	mov	r1, r3
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 f897 	bl	8008688 <SetLineCoding>
 800855a:	4603      	mov	r3, r0
 800855c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800855e:	7bbb      	ldrb	r3, [r7, #14]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d104      	bne.n	800856e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	2202      	movs	r2, #2
 8008568:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800856c:	e058      	b.n	8008620 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800856e:	7bbb      	ldrb	r3, [r7, #14]
 8008570:	2b01      	cmp	r3, #1
 8008572:	d055      	beq.n	8008620 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	2204      	movs	r2, #4
 8008578:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800857c:	e050      	b.n	8008620 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	3340      	adds	r3, #64	@ 0x40
 8008582:	4619      	mov	r1, r3
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 f860 	bl	800864a <GetLineCoding>
 800858a:	4603      	mov	r3, r0
 800858c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800858e:	7bbb      	ldrb	r3, [r7, #14]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d126      	bne.n	80085e2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	2200      	movs	r2, #0
 8008598:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085a6:	791b      	ldrb	r3, [r3, #4]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d13b      	bne.n	8008624 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085b6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d133      	bne.n	8008624 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085c6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d12b      	bne.n	8008624 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085d4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d124      	bne.n	8008624 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 f958 	bl	8008890 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80085e0:	e020      	b.n	8008624 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80085e2:	7bbb      	ldrb	r3, [r7, #14]
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d01d      	beq.n	8008624 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	2204      	movs	r2, #4
 80085ec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80085f0:	e018      	b.n	8008624 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 f867 	bl	80086c6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 f8da 	bl	80087b2 <CDC_ProcessReception>
      break;
 80085fe:	e014      	b.n	800862a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008600:	2100      	movs	r1, #0
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f001 f81a 	bl	800963c <USBH_ClrFeature>
 8008608:	4603      	mov	r3, r0
 800860a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800860c:	7bbb      	ldrb	r3, [r7, #14]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d10a      	bne.n	8008628 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	2200      	movs	r2, #0
 8008616:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800861a:	e005      	b.n	8008628 <USBH_CDC_Process+0x120>

    default:
      break;
 800861c:	bf00      	nop
 800861e:	e004      	b.n	800862a <USBH_CDC_Process+0x122>
      break;
 8008620:	bf00      	nop
 8008622:	e002      	b.n	800862a <USBH_CDC_Process+0x122>
      break;
 8008624:	bf00      	nop
 8008626:	e000      	b.n	800862a <USBH_CDC_Process+0x122>
      break;
 8008628:	bf00      	nop

  }

  return status;
 800862a:	7bfb      	ldrb	r3, [r7, #15]
}
 800862c:	4618      	mov	r0, r3
 800862e:	3710      	adds	r7, #16
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008634:	b480      	push	{r7}
 8008636:	b083      	sub	sp, #12
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800863c:	2300      	movs	r3, #0
}
 800863e:	4618      	mov	r0, r3
 8008640:	370c      	adds	r7, #12
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr

0800864a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800864a:	b580      	push	{r7, lr}
 800864c:	b082      	sub	sp, #8
 800864e:	af00      	add	r7, sp, #0
 8008650:	6078      	str	r0, [r7, #4]
 8008652:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	22a1      	movs	r2, #161	@ 0xa1
 8008658:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2221      	movs	r2, #33	@ 0x21
 800865e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2207      	movs	r2, #7
 8008670:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	2207      	movs	r2, #7
 8008676:	4619      	mov	r1, r3
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f001 fb14 	bl	8009ca6 <USBH_CtlReq>
 800867e:	4603      	mov	r3, r0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3708      	adds	r7, #8
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2221      	movs	r2, #33	@ 0x21
 8008696:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2220      	movs	r2, #32
 800869c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2207      	movs	r2, #7
 80086ae:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	2207      	movs	r2, #7
 80086b4:	4619      	mov	r1, r3
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f001 faf5 	bl	8009ca6 <USBH_CtlReq>
 80086bc:	4603      	mov	r3, r0
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3708      	adds	r7, #8
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}

080086c6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80086c6:	b580      	push	{r7, lr}
 80086c8:	b086      	sub	sp, #24
 80086ca:	af02      	add	r7, sp, #8
 80086cc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80086d4:	69db      	ldr	r3, [r3, #28]
 80086d6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80086d8:	2300      	movs	r3, #0
 80086da:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d002      	beq.n	80086ec <CDC_ProcessTransmission+0x26>
 80086e6:	2b02      	cmp	r3, #2
 80086e8:	d023      	beq.n	8008732 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80086ea:	e05e      	b.n	80087aa <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	8b12      	ldrh	r2, [r2, #24]
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d90b      	bls.n	8008710 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	69d9      	ldr	r1, [r3, #28]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	8b1a      	ldrh	r2, [r3, #24]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	7b5b      	ldrb	r3, [r3, #13]
 8008704:	2001      	movs	r0, #1
 8008706:	9000      	str	r0, [sp, #0]
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f001 fcda 	bl	800a0c2 <USBH_BulkSendData>
 800870e:	e00b      	b.n	8008728 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8008718:	b29a      	uxth	r2, r3
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	7b5b      	ldrb	r3, [r3, #13]
 800871e:	2001      	movs	r0, #1
 8008720:	9000      	str	r0, [sp, #0]
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f001 fccd 	bl	800a0c2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2202      	movs	r2, #2
 800872c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008730:	e03b      	b.n	80087aa <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	7b5b      	ldrb	r3, [r3, #13]
 8008736:	4619      	mov	r1, r3
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f001 fff1 	bl	800a720 <USBH_LL_GetURBState>
 800873e:	4603      	mov	r3, r0
 8008740:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008742:	7afb      	ldrb	r3, [r7, #11]
 8008744:	2b01      	cmp	r3, #1
 8008746:	d128      	bne.n	800879a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800874c:	68fa      	ldr	r2, [r7, #12]
 800874e:	8b12      	ldrh	r2, [r2, #24]
 8008750:	4293      	cmp	r3, r2
 8008752:	d90e      	bls.n	8008772 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008758:	68fa      	ldr	r2, [r7, #12]
 800875a:	8b12      	ldrh	r2, [r2, #24]
 800875c:	1a9a      	subs	r2, r3, r2
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	69db      	ldr	r3, [r3, #28]
 8008766:	68fa      	ldr	r2, [r7, #12]
 8008768:	8b12      	ldrh	r2, [r2, #24]
 800876a:	441a      	add	r2, r3
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	61da      	str	r2, [r3, #28]
 8008770:	e002      	b.n	8008778 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2200      	movs	r2, #0
 8008776:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800877c:	2b00      	cmp	r3, #0
 800877e:	d004      	beq.n	800878a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2201      	movs	r2, #1
 8008784:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008788:	e00e      	b.n	80087a8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2200      	movs	r2, #0
 800878e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 f868 	bl	8008868 <USBH_CDC_TransmitCallback>
      break;
 8008798:	e006      	b.n	80087a8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800879a:	7afb      	ldrb	r3, [r7, #11]
 800879c:	2b02      	cmp	r3, #2
 800879e:	d103      	bne.n	80087a8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80087a8:	bf00      	nop
  }
}
 80087aa:	bf00      	nop
 80087ac:	3710      	adds	r7, #16
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b086      	sub	sp, #24
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80087c0:	69db      	ldr	r3, [r3, #28]
 80087c2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80087c4:	2300      	movs	r3, #0
 80087c6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80087ce:	2b03      	cmp	r3, #3
 80087d0:	d002      	beq.n	80087d8 <CDC_ProcessReception+0x26>
 80087d2:	2b04      	cmp	r3, #4
 80087d4:	d00e      	beq.n	80087f4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80087d6:	e043      	b.n	8008860 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	6a19      	ldr	r1, [r3, #32]
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	8b5a      	ldrh	r2, [r3, #26]
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	7b1b      	ldrb	r3, [r3, #12]
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f001 fc91 	bl	800a10c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	2204      	movs	r2, #4
 80087ee:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80087f2:	e035      	b.n	8008860 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	7b1b      	ldrb	r3, [r3, #12]
 80087f8:	4619      	mov	r1, r3
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f001 ff90 	bl	800a720 <USBH_LL_GetURBState>
 8008800:	4603      	mov	r3, r0
 8008802:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008804:	7cfb      	ldrb	r3, [r7, #19]
 8008806:	2b01      	cmp	r3, #1
 8008808:	d129      	bne.n	800885e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	7b1b      	ldrb	r3, [r3, #12]
 800880e:	4619      	mov	r1, r3
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f001 fef3 	bl	800a5fc <USBH_LL_GetLastXferSize>
 8008816:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800881c:	68fa      	ldr	r2, [r7, #12]
 800881e:	429a      	cmp	r2, r3
 8008820:	d016      	beq.n	8008850 <CDC_ProcessReception+0x9e>
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	8b5b      	ldrh	r3, [r3, #26]
 8008826:	461a      	mov	r2, r3
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	4293      	cmp	r3, r2
 800882c:	d110      	bne.n	8008850 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	1ad2      	subs	r2, r2, r3
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	6a1a      	ldr	r2, [r3, #32]
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	441a      	add	r2, r3
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	2203      	movs	r2, #3
 800884a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800884e:	e006      	b.n	800885e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	2200      	movs	r2, #0
 8008854:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 f80f 	bl	800887c <USBH_CDC_ReceiveCallback>
      break;
 800885e:	bf00      	nop
  }
}
 8008860:	bf00      	nop
 8008862:	3718      	adds	r7, #24
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008868:	b480      	push	{r7}
 800886a:	b083      	sub	sp, #12
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008870:	bf00      	nop
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008884:	bf00      	nop
 8008886:	370c      	adds	r7, #12
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008898:	bf00      	nop
 800889a:	370c      	adds	r7, #12
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	60f8      	str	r0, [r7, #12]
 80088ac:	60b9      	str	r1, [r7, #8]
 80088ae:	4613      	mov	r3, r2
 80088b0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d101      	bne.n	80088bc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80088b8:	2302      	movs	r3, #2
 80088ba:	e029      	b.n	8008910 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	79fa      	ldrb	r2, [r7, #7]
 80088c0:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2200      	movs	r2, #0
 80088c8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80088d4:	68f8      	ldr	r0, [r7, #12]
 80088d6:	f000 f81f 	bl	8008918 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2200      	movs	r2, #0
 80088de:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2200      	movs	r2, #0
 80088e6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2200      	movs	r2, #0
 80088f6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d003      	beq.n	8008908 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	68ba      	ldr	r2, [r7, #8]
 8008904:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008908:	68f8      	ldr	r0, [r7, #12]
 800890a:	f001 fdc3 	bl	800a494 <USBH_LL_Init>

  return USBH_OK;
 800890e:	2300      	movs	r3, #0
}
 8008910:	4618      	mov	r0, r3
 8008912:	3710      	adds	r7, #16
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008920:	2300      	movs	r3, #0
 8008922:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008924:	2300      	movs	r3, #0
 8008926:	60fb      	str	r3, [r7, #12]
 8008928:	e009      	b.n	800893e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	33e0      	adds	r3, #224	@ 0xe0
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	4413      	add	r3, r2
 8008934:	2200      	movs	r2, #0
 8008936:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	3301      	adds	r3, #1
 800893c:	60fb      	str	r3, [r7, #12]
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2b0f      	cmp	r3, #15
 8008942:	d9f2      	bls.n	800892a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008944:	2300      	movs	r3, #0
 8008946:	60fb      	str	r3, [r7, #12]
 8008948:	e009      	b.n	800895e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	4413      	add	r3, r2
 8008950:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008954:	2200      	movs	r2, #0
 8008956:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	3301      	adds	r3, #1
 800895c:	60fb      	str	r3, [r7, #12]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008964:	d3f1      	bcc.n	800894a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2201      	movs	r2, #1
 8008976:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2201      	movs	r2, #1
 8008984:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2240      	movs	r2, #64	@ 0x40
 800898a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2200      	movs	r2, #0
 8008990:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2200      	movs	r2, #0
 8008996:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2201      	movs	r2, #1
 800899e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2200      	movs	r2, #0
 80089ae:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	331c      	adds	r3, #28
 80089b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80089ba:	2100      	movs	r1, #0
 80089bc:	4618      	mov	r0, r3
 80089be:	f002 f960 	bl	800ac82 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80089c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80089cc:	2100      	movs	r1, #0
 80089ce:	4618      	mov	r0, r3
 80089d0:	f002 f957 	bl	800ac82 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80089da:	2212      	movs	r2, #18
 80089dc:	2100      	movs	r1, #0
 80089de:	4618      	mov	r0, r3
 80089e0:	f002 f94f 	bl	800ac82 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80089ea:	223e      	movs	r2, #62	@ 0x3e
 80089ec:	2100      	movs	r1, #0
 80089ee:	4618      	mov	r0, r3
 80089f0:	f002 f947 	bl	800ac82 <memset>

  return USBH_OK;
 80089f4:	2300      	movs	r3, #0
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3710      	adds	r7, #16
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}

080089fe <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80089fe:	b480      	push	{r7}
 8008a00:	b085      	sub	sp, #20
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
 8008a06:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d016      	beq.n	8008a40 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d10e      	bne.n	8008a3a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008a22:	1c59      	adds	r1, r3, #1
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	33de      	adds	r3, #222	@ 0xde
 8008a2e:	6839      	ldr	r1, [r7, #0]
 8008a30:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008a34:	2300      	movs	r3, #0
 8008a36:	73fb      	strb	r3, [r7, #15]
 8008a38:	e004      	b.n	8008a44 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008a3a:	2302      	movs	r3, #2
 8008a3c:	73fb      	strb	r3, [r7, #15]
 8008a3e:	e001      	b.n	8008a44 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008a40:	2302      	movs	r3, #2
 8008a42:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3714      	adds	r7, #20
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr

08008a52 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008a52:	b480      	push	{r7}
 8008a54:	b085      	sub	sp, #20
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8008a68:	78fa      	ldrb	r2, [r7, #3]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d204      	bcs.n	8008a78 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	78fa      	ldrb	r2, [r7, #3]
 8008a72:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8008a76:	e001      	b.n	8008a7c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008a78:	2302      	movs	r3, #2
 8008a7a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3714      	adds	r7, #20
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr

08008a8a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008a8a:	b480      	push	{r7}
 8008a8c:	b087      	sub	sp, #28
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	6078      	str	r0, [r7, #4]
 8008a92:	4608      	mov	r0, r1
 8008a94:	4611      	mov	r1, r2
 8008a96:	461a      	mov	r2, r3
 8008a98:	4603      	mov	r3, r0
 8008a9a:	70fb      	strb	r3, [r7, #3]
 8008a9c:	460b      	mov	r3, r1
 8008a9e:	70bb      	strb	r3, [r7, #2]
 8008aa0:	4613      	mov	r3, r2
 8008aa2:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008ab2:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008ab4:	e025      	b.n	8008b02 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008ab6:	7dfb      	ldrb	r3, [r7, #23]
 8008ab8:	221a      	movs	r2, #26
 8008aba:	fb02 f303 	mul.w	r3, r2, r3
 8008abe:	3308      	adds	r3, #8
 8008ac0:	68fa      	ldr	r2, [r7, #12]
 8008ac2:	4413      	add	r3, r2
 8008ac4:	3302      	adds	r3, #2
 8008ac6:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	795b      	ldrb	r3, [r3, #5]
 8008acc:	78fa      	ldrb	r2, [r7, #3]
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d002      	beq.n	8008ad8 <USBH_FindInterface+0x4e>
 8008ad2:	78fb      	ldrb	r3, [r7, #3]
 8008ad4:	2bff      	cmp	r3, #255	@ 0xff
 8008ad6:	d111      	bne.n	8008afc <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008adc:	78ba      	ldrb	r2, [r7, #2]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d002      	beq.n	8008ae8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008ae2:	78bb      	ldrb	r3, [r7, #2]
 8008ae4:	2bff      	cmp	r3, #255	@ 0xff
 8008ae6:	d109      	bne.n	8008afc <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008aec:	787a      	ldrb	r2, [r7, #1]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d002      	beq.n	8008af8 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008af2:	787b      	ldrb	r3, [r7, #1]
 8008af4:	2bff      	cmp	r3, #255	@ 0xff
 8008af6:	d101      	bne.n	8008afc <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008af8:	7dfb      	ldrb	r3, [r7, #23]
 8008afa:	e006      	b.n	8008b0a <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008afc:	7dfb      	ldrb	r3, [r7, #23]
 8008afe:	3301      	adds	r3, #1
 8008b00:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008b02:	7dfb      	ldrb	r3, [r7, #23]
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d9d6      	bls.n	8008ab6 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008b08:	23ff      	movs	r3, #255	@ 0xff
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	371c      	adds	r7, #28
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b14:	4770      	bx	lr

08008b16 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8008b16:	b580      	push	{r7, lr}
 8008b18:	b082      	sub	sp, #8
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f001 fcf4 	bl	800a50c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008b24:	2101      	movs	r1, #1
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f001 fe0d 	bl	800a746 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3708      	adds	r7, #8
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
	...

08008b38 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b088      	sub	sp, #32
 8008b3c:	af04      	add	r7, sp, #16
 8008b3e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008b40:	2302      	movs	r3, #2
 8008b42:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008b44:	2300      	movs	r3, #0
 8008b46:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d102      	bne.n	8008b5a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2203      	movs	r2, #3
 8008b58:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	781b      	ldrb	r3, [r3, #0]
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	2b0b      	cmp	r3, #11
 8008b62:	f200 81bb 	bhi.w	8008edc <USBH_Process+0x3a4>
 8008b66:	a201      	add	r2, pc, #4	@ (adr r2, 8008b6c <USBH_Process+0x34>)
 8008b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b6c:	08008b9d 	.word	0x08008b9d
 8008b70:	08008bcf 	.word	0x08008bcf
 8008b74:	08008c37 	.word	0x08008c37
 8008b78:	08008e77 	.word	0x08008e77
 8008b7c:	08008edd 	.word	0x08008edd
 8008b80:	08008cd7 	.word	0x08008cd7
 8008b84:	08008e1d 	.word	0x08008e1d
 8008b88:	08008d0d 	.word	0x08008d0d
 8008b8c:	08008d2d 	.word	0x08008d2d
 8008b90:	08008d4b 	.word	0x08008d4b
 8008b94:	08008d8f 	.word	0x08008d8f
 8008b98:	08008e5f 	.word	0x08008e5f
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	f000 819b 	beq.w	8008ee0 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2201      	movs	r2, #1
 8008bae:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008bb0:	20c8      	movs	r0, #200	@ 0xc8
 8008bb2:	f001 fe12 	bl	800a7da <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f001 fd05 	bl	800a5c6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008bcc:	e188      	b.n	8008ee0 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d107      	bne.n	8008be8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2202      	movs	r2, #2
 8008be4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008be6:	e18a      	b.n	8008efe <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008bee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008bf2:	d914      	bls.n	8008c1e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	b2da      	uxtb	r2, r3
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008c0a:	2b03      	cmp	r3, #3
 8008c0c:	d903      	bls.n	8008c16 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	220d      	movs	r2, #13
 8008c12:	701a      	strb	r2, [r3, #0]
      break;
 8008c14:	e173      	b.n	8008efe <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	701a      	strb	r2, [r3, #0]
      break;
 8008c1c:	e16f      	b.n	8008efe <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008c24:	f103 020a 	add.w	r2, r3, #10
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8008c2e:	200a      	movs	r0, #10
 8008c30:	f001 fdd3 	bl	800a7da <USBH_Delay>
      break;
 8008c34:	e163      	b.n	8008efe <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d005      	beq.n	8008c4c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008c46:	2104      	movs	r1, #4
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008c4c:	2064      	movs	r0, #100	@ 0x64
 8008c4e:	f001 fdc4 	bl	800a7da <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f001 fc90 	bl	800a578 <USBH_LL_GetSpeed>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2205      	movs	r2, #5
 8008c66:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008c68:	2100      	movs	r1, #0
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f001 fa9b 	bl	800a1a6 <USBH_AllocPipe>
 8008c70:	4603      	mov	r3, r0
 8008c72:	461a      	mov	r2, r3
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008c78:	2180      	movs	r1, #128	@ 0x80
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f001 fa93 	bl	800a1a6 <USBH_AllocPipe>
 8008c80:	4603      	mov	r3, r0
 8008c82:	461a      	mov	r2, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	7919      	ldrb	r1, [r3, #4]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008c9c:	9202      	str	r2, [sp, #8]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	9201      	str	r2, [sp, #4]
 8008ca2:	9300      	str	r3, [sp, #0]
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2280      	movs	r2, #128	@ 0x80
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f001 fa4d 	bl	800a148 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	7959      	ldrb	r1, [r3, #5]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008cc2:	9202      	str	r2, [sp, #8]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	9201      	str	r2, [sp, #4]
 8008cc8:	9300      	str	r3, [sp, #0]
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2200      	movs	r2, #0
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f001 fa3a 	bl	800a148 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008cd4:	e113      	b.n	8008efe <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 f916 	bl	8008f08 <USBH_HandleEnum>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008ce0:	7bbb      	ldrb	r3, [r7, #14]
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	f040 80fd 	bne.w	8008ee4 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2200      	movs	r2, #0
 8008cee:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d103      	bne.n	8008d04 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2208      	movs	r2, #8
 8008d00:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008d02:	e0ef      	b.n	8008ee4 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2207      	movs	r2, #7
 8008d08:	701a      	strb	r2, [r3, #0]
      break;
 8008d0a:	e0eb      	b.n	8008ee4 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	f000 80e8 	beq.w	8008ee8 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008d1e:	2101      	movs	r1, #1
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2208      	movs	r2, #8
 8008d28:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008d2a:	e0dd      	b.n	8008ee8 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8008d32:	4619      	mov	r1, r3
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 fc3a 	bl	80095ae <USBH_SetCfg>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	f040 80d5 	bne.w	8008eec <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2209      	movs	r2, #9
 8008d46:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008d48:	e0d0      	b.n	8008eec <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8008d50:	f003 0320 	and.w	r3, r3, #32
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d016      	beq.n	8008d86 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008d58:	2101      	movs	r1, #1
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 fc4a 	bl	80095f4 <USBH_SetFeature>
 8008d60:	4603      	mov	r3, r0
 8008d62:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008d64:	7bbb      	ldrb	r3, [r7, #14]
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d103      	bne.n	8008d74 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	220a      	movs	r2, #10
 8008d70:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008d72:	e0bd      	b.n	8008ef0 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8008d74:	7bbb      	ldrb	r3, [r7, #14]
 8008d76:	b2db      	uxtb	r3, r3
 8008d78:	2b03      	cmp	r3, #3
 8008d7a:	f040 80b9 	bne.w	8008ef0 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	220a      	movs	r2, #10
 8008d82:	701a      	strb	r2, [r3, #0]
      break;
 8008d84:	e0b4      	b.n	8008ef0 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	220a      	movs	r2, #10
 8008d8a:	701a      	strb	r2, [r3, #0]
      break;
 8008d8c:	e0b0      	b.n	8008ef0 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	f000 80ad 	beq.w	8008ef4 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008da2:	2300      	movs	r3, #0
 8008da4:	73fb      	strb	r3, [r7, #15]
 8008da6:	e016      	b.n	8008dd6 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008da8:	7bfa      	ldrb	r2, [r7, #15]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	32de      	adds	r2, #222	@ 0xde
 8008dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008db2:	791a      	ldrb	r2, [r3, #4]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d108      	bne.n	8008dd0 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008dbe:	7bfa      	ldrb	r2, [r7, #15]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	32de      	adds	r2, #222	@ 0xde
 8008dc4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8008dce:	e005      	b.n	8008ddc <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008dd0:	7bfb      	ldrb	r3, [r7, #15]
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	73fb      	strb	r3, [r7, #15]
 8008dd6:	7bfb      	ldrb	r3, [r7, #15]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d0e5      	beq.n	8008da8 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d016      	beq.n	8008e14 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008dec:	689b      	ldr	r3, [r3, #8]
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	4798      	blx	r3
 8008df2:	4603      	mov	r3, r0
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d109      	bne.n	8008e0c <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2206      	movs	r2, #6
 8008dfc:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008e04:	2103      	movs	r1, #3
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008e0a:	e073      	b.n	8008ef4 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	220d      	movs	r2, #13
 8008e10:	701a      	strb	r2, [r3, #0]
      break;
 8008e12:	e06f      	b.n	8008ef4 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	220d      	movs	r2, #13
 8008e18:	701a      	strb	r2, [r3, #0]
      break;
 8008e1a:	e06b      	b.n	8008ef4 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d017      	beq.n	8008e56 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e2c:	691b      	ldr	r3, [r3, #16]
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	4798      	blx	r3
 8008e32:	4603      	mov	r3, r0
 8008e34:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008e36:	7bbb      	ldrb	r3, [r7, #14]
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d103      	bne.n	8008e46 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	220b      	movs	r2, #11
 8008e42:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008e44:	e058      	b.n	8008ef8 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8008e46:	7bbb      	ldrb	r3, [r7, #14]
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	2b02      	cmp	r3, #2
 8008e4c:	d154      	bne.n	8008ef8 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	220d      	movs	r2, #13
 8008e52:	701a      	strb	r2, [r3, #0]
      break;
 8008e54:	e050      	b.n	8008ef8 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	220d      	movs	r2, #13
 8008e5a:	701a      	strb	r2, [r3, #0]
      break;
 8008e5c:	e04c      	b.n	8008ef8 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d049      	beq.n	8008efc <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e6e:	695b      	ldr	r3, [r3, #20]
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	4798      	blx	r3
      }
      break;
 8008e74:	e042      	b.n	8008efc <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f7ff fd4a 	bl	8008918 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d009      	beq.n	8008ea2 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e94:	68db      	ldr	r3, [r3, #12]
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d005      	beq.n	8008eb8 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008eb2:	2105      	movs	r1, #5
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d107      	bne.n	8008ed4 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f7ff fe22 	bl	8008b16 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008ed2:	e014      	b.n	8008efe <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f001 fb19 	bl	800a50c <USBH_LL_Start>
      break;
 8008eda:	e010      	b.n	8008efe <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008edc:	bf00      	nop
 8008ede:	e00e      	b.n	8008efe <USBH_Process+0x3c6>
      break;
 8008ee0:	bf00      	nop
 8008ee2:	e00c      	b.n	8008efe <USBH_Process+0x3c6>
      break;
 8008ee4:	bf00      	nop
 8008ee6:	e00a      	b.n	8008efe <USBH_Process+0x3c6>
    break;
 8008ee8:	bf00      	nop
 8008eea:	e008      	b.n	8008efe <USBH_Process+0x3c6>
      break;
 8008eec:	bf00      	nop
 8008eee:	e006      	b.n	8008efe <USBH_Process+0x3c6>
      break;
 8008ef0:	bf00      	nop
 8008ef2:	e004      	b.n	8008efe <USBH_Process+0x3c6>
      break;
 8008ef4:	bf00      	nop
 8008ef6:	e002      	b.n	8008efe <USBH_Process+0x3c6>
      break;
 8008ef8:	bf00      	nop
 8008efa:	e000      	b.n	8008efe <USBH_Process+0x3c6>
      break;
 8008efc:	bf00      	nop
  }
  return USBH_OK;
 8008efe:	2300      	movs	r3, #0
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3710      	adds	r7, #16
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b088      	sub	sp, #32
 8008f0c:	af04      	add	r7, sp, #16
 8008f0e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008f10:	2301      	movs	r3, #1
 8008f12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008f14:	2301      	movs	r3, #1
 8008f16:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	785b      	ldrb	r3, [r3, #1]
 8008f1c:	2b07      	cmp	r3, #7
 8008f1e:	f200 81bd 	bhi.w	800929c <USBH_HandleEnum+0x394>
 8008f22:	a201      	add	r2, pc, #4	@ (adr r2, 8008f28 <USBH_HandleEnum+0x20>)
 8008f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f28:	08008f49 	.word	0x08008f49
 8008f2c:	08009003 	.word	0x08009003
 8008f30:	0800906d 	.word	0x0800906d
 8008f34:	080090f7 	.word	0x080090f7
 8008f38:	08009161 	.word	0x08009161
 8008f3c:	080091d1 	.word	0x080091d1
 8008f40:	08009217 	.word	0x08009217
 8008f44:	0800925d 	.word	0x0800925d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008f48:	2108      	movs	r1, #8
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 fa4c 	bl	80093e8 <USBH_Get_DevDesc>
 8008f50:	4603      	mov	r3, r0
 8008f52:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008f54:	7bbb      	ldrb	r3, [r7, #14]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d12e      	bne.n	8008fb8 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2201      	movs	r2, #1
 8008f68:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	7919      	ldrb	r1, [r3, #4]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008f7a:	687a      	ldr	r2, [r7, #4]
 8008f7c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008f7e:	9202      	str	r2, [sp, #8]
 8008f80:	2200      	movs	r2, #0
 8008f82:	9201      	str	r2, [sp, #4]
 8008f84:	9300      	str	r3, [sp, #0]
 8008f86:	4603      	mov	r3, r0
 8008f88:	2280      	movs	r2, #128	@ 0x80
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f001 f8dc 	bl	800a148 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	7959      	ldrb	r1, [r3, #5]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008fa4:	9202      	str	r2, [sp, #8]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	9201      	str	r2, [sp, #4]
 8008faa:	9300      	str	r3, [sp, #0]
 8008fac:	4603      	mov	r3, r0
 8008fae:	2200      	movs	r2, #0
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f001 f8c9 	bl	800a148 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008fb6:	e173      	b.n	80092a0 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008fb8:	7bbb      	ldrb	r3, [r7, #14]
 8008fba:	2b03      	cmp	r3, #3
 8008fbc:	f040 8170 	bne.w	80092a0 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	b2da      	uxtb	r2, r3
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008fd6:	2b03      	cmp	r3, #3
 8008fd8:	d903      	bls.n	8008fe2 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	220d      	movs	r2, #13
 8008fde:	701a      	strb	r2, [r3, #0]
      break;
 8008fe0:	e15e      	b.n	80092a0 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	795b      	ldrb	r3, [r3, #5]
 8008fe6:	4619      	mov	r1, r3
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f001 f8fd 	bl	800a1e8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	791b      	ldrb	r3, [r3, #4]
 8008ff2:	4619      	mov	r1, r3
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f001 f8f7 	bl	800a1e8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	701a      	strb	r2, [r3, #0]
      break;
 8009000:	e14e      	b.n	80092a0 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009002:	2112      	movs	r1, #18
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f000 f9ef 	bl	80093e8 <USBH_Get_DevDesc>
 800900a:	4603      	mov	r3, r0
 800900c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800900e:	7bbb      	ldrb	r3, [r7, #14]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d103      	bne.n	800901c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2202      	movs	r2, #2
 8009018:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800901a:	e143      	b.n	80092a4 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800901c:	7bbb      	ldrb	r3, [r7, #14]
 800901e:	2b03      	cmp	r3, #3
 8009020:	f040 8140 	bne.w	80092a4 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800902a:	3301      	adds	r3, #1
 800902c:	b2da      	uxtb	r2, r3
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800903a:	2b03      	cmp	r3, #3
 800903c:	d903      	bls.n	8009046 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	220d      	movs	r2, #13
 8009042:	701a      	strb	r2, [r3, #0]
      break;
 8009044:	e12e      	b.n	80092a4 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	795b      	ldrb	r3, [r3, #5]
 800904a:	4619      	mov	r1, r3
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f001 f8cb 	bl	800a1e8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	791b      	ldrb	r3, [r3, #4]
 8009056:	4619      	mov	r1, r3
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f001 f8c5 	bl	800a1e8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2200      	movs	r2, #0
 8009062:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	701a      	strb	r2, [r3, #0]
      break;
 800906a:	e11b      	b.n	80092a4 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800906c:	2101      	movs	r1, #1
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 fa79 	bl	8009566 <USBH_SetAddress>
 8009074:	4603      	mov	r3, r0
 8009076:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009078:	7bbb      	ldrb	r3, [r7, #14]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d130      	bne.n	80090e0 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800907e:	2002      	movs	r0, #2
 8009080:	f001 fbab 	bl	800a7da <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2201      	movs	r2, #1
 8009088:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2203      	movs	r2, #3
 8009090:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	7919      	ldrb	r1, [r3, #4]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80090a6:	9202      	str	r2, [sp, #8]
 80090a8:	2200      	movs	r2, #0
 80090aa:	9201      	str	r2, [sp, #4]
 80090ac:	9300      	str	r3, [sp, #0]
 80090ae:	4603      	mov	r3, r0
 80090b0:	2280      	movs	r2, #128	@ 0x80
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f001 f848 	bl	800a148 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	7959      	ldrb	r1, [r3, #5]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80090c8:	687a      	ldr	r2, [r7, #4]
 80090ca:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80090cc:	9202      	str	r2, [sp, #8]
 80090ce:	2200      	movs	r2, #0
 80090d0:	9201      	str	r2, [sp, #4]
 80090d2:	9300      	str	r3, [sp, #0]
 80090d4:	4603      	mov	r3, r0
 80090d6:	2200      	movs	r2, #0
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f001 f835 	bl	800a148 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80090de:	e0e3      	b.n	80092a8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80090e0:	7bbb      	ldrb	r3, [r7, #14]
 80090e2:	2b03      	cmp	r3, #3
 80090e4:	f040 80e0 	bne.w	80092a8 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	220d      	movs	r2, #13
 80090ec:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2200      	movs	r2, #0
 80090f2:	705a      	strb	r2, [r3, #1]
      break;
 80090f4:	e0d8      	b.n	80092a8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80090f6:	2109      	movs	r1, #9
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 f9a1 	bl	8009440 <USBH_Get_CfgDesc>
 80090fe:	4603      	mov	r3, r0
 8009100:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009102:	7bbb      	ldrb	r3, [r7, #14]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d103      	bne.n	8009110 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2204      	movs	r2, #4
 800910c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800910e:	e0cd      	b.n	80092ac <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009110:	7bbb      	ldrb	r3, [r7, #14]
 8009112:	2b03      	cmp	r3, #3
 8009114:	f040 80ca 	bne.w	80092ac <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800911e:	3301      	adds	r3, #1
 8009120:	b2da      	uxtb	r2, r3
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800912e:	2b03      	cmp	r3, #3
 8009130:	d903      	bls.n	800913a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	220d      	movs	r2, #13
 8009136:	701a      	strb	r2, [r3, #0]
      break;
 8009138:	e0b8      	b.n	80092ac <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	795b      	ldrb	r3, [r3, #5]
 800913e:	4619      	mov	r1, r3
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f001 f851 	bl	800a1e8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	791b      	ldrb	r3, [r3, #4]
 800914a:	4619      	mov	r1, r3
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f001 f84b 	bl	800a1e8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2200      	movs	r2, #0
 8009156:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	701a      	strb	r2, [r3, #0]
      break;
 800915e:	e0a5      	b.n	80092ac <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8009166:	4619      	mov	r1, r3
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f000 f969 	bl	8009440 <USBH_Get_CfgDesc>
 800916e:	4603      	mov	r3, r0
 8009170:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009172:	7bbb      	ldrb	r3, [r7, #14]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d103      	bne.n	8009180 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2205      	movs	r2, #5
 800917c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800917e:	e097      	b.n	80092b0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009180:	7bbb      	ldrb	r3, [r7, #14]
 8009182:	2b03      	cmp	r3, #3
 8009184:	f040 8094 	bne.w	80092b0 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800918e:	3301      	adds	r3, #1
 8009190:	b2da      	uxtb	r2, r3
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800919e:	2b03      	cmp	r3, #3
 80091a0:	d903      	bls.n	80091aa <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	220d      	movs	r2, #13
 80091a6:	701a      	strb	r2, [r3, #0]
      break;
 80091a8:	e082      	b.n	80092b0 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	795b      	ldrb	r3, [r3, #5]
 80091ae:	4619      	mov	r1, r3
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f001 f819 	bl	800a1e8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	791b      	ldrb	r3, [r3, #4]
 80091ba:	4619      	mov	r1, r3
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f001 f813 	bl	800a1e8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2200      	movs	r2, #0
 80091c6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2200      	movs	r2, #0
 80091cc:	701a      	strb	r2, [r3, #0]
      break;
 80091ce:	e06f      	b.n	80092b0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d019      	beq.n	800920e <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80091e6:	23ff      	movs	r3, #255	@ 0xff
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f000 f953 	bl	8009494 <USBH_Get_StringDesc>
 80091ee:	4603      	mov	r3, r0
 80091f0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80091f2:	7bbb      	ldrb	r3, [r7, #14]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d103      	bne.n	8009200 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2206      	movs	r2, #6
 80091fc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80091fe:	e059      	b.n	80092b4 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009200:	7bbb      	ldrb	r3, [r7, #14]
 8009202:	2b03      	cmp	r3, #3
 8009204:	d156      	bne.n	80092b4 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2206      	movs	r2, #6
 800920a:	705a      	strb	r2, [r3, #1]
      break;
 800920c:	e052      	b.n	80092b4 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2206      	movs	r2, #6
 8009212:	705a      	strb	r2, [r3, #1]
      break;
 8009214:	e04e      	b.n	80092b4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800921c:	2b00      	cmp	r3, #0
 800921e:	d019      	beq.n	8009254 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800922c:	23ff      	movs	r3, #255	@ 0xff
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 f930 	bl	8009494 <USBH_Get_StringDesc>
 8009234:	4603      	mov	r3, r0
 8009236:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009238:	7bbb      	ldrb	r3, [r7, #14]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d103      	bne.n	8009246 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2207      	movs	r2, #7
 8009242:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009244:	e038      	b.n	80092b8 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009246:	7bbb      	ldrb	r3, [r7, #14]
 8009248:	2b03      	cmp	r3, #3
 800924a:	d135      	bne.n	80092b8 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2207      	movs	r2, #7
 8009250:	705a      	strb	r2, [r3, #1]
      break;
 8009252:	e031      	b.n	80092b8 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2207      	movs	r2, #7
 8009258:	705a      	strb	r2, [r3, #1]
      break;
 800925a:	e02d      	b.n	80092b8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8009262:	2b00      	cmp	r3, #0
 8009264:	d017      	beq.n	8009296 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009272:	23ff      	movs	r3, #255	@ 0xff
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f000 f90d 	bl	8009494 <USBH_Get_StringDesc>
 800927a:	4603      	mov	r3, r0
 800927c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800927e:	7bbb      	ldrb	r3, [r7, #14]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d102      	bne.n	800928a <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009284:	2300      	movs	r3, #0
 8009286:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009288:	e018      	b.n	80092bc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800928a:	7bbb      	ldrb	r3, [r7, #14]
 800928c:	2b03      	cmp	r3, #3
 800928e:	d115      	bne.n	80092bc <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8009290:	2300      	movs	r3, #0
 8009292:	73fb      	strb	r3, [r7, #15]
      break;
 8009294:	e012      	b.n	80092bc <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8009296:	2300      	movs	r3, #0
 8009298:	73fb      	strb	r3, [r7, #15]
      break;
 800929a:	e00f      	b.n	80092bc <USBH_HandleEnum+0x3b4>

    default:
      break;
 800929c:	bf00      	nop
 800929e:	e00e      	b.n	80092be <USBH_HandleEnum+0x3b6>
      break;
 80092a0:	bf00      	nop
 80092a2:	e00c      	b.n	80092be <USBH_HandleEnum+0x3b6>
      break;
 80092a4:	bf00      	nop
 80092a6:	e00a      	b.n	80092be <USBH_HandleEnum+0x3b6>
      break;
 80092a8:	bf00      	nop
 80092aa:	e008      	b.n	80092be <USBH_HandleEnum+0x3b6>
      break;
 80092ac:	bf00      	nop
 80092ae:	e006      	b.n	80092be <USBH_HandleEnum+0x3b6>
      break;
 80092b0:	bf00      	nop
 80092b2:	e004      	b.n	80092be <USBH_HandleEnum+0x3b6>
      break;
 80092b4:	bf00      	nop
 80092b6:	e002      	b.n	80092be <USBH_HandleEnum+0x3b6>
      break;
 80092b8:	bf00      	nop
 80092ba:	e000      	b.n	80092be <USBH_HandleEnum+0x3b6>
      break;
 80092bc:	bf00      	nop
  }
  return Status;
 80092be:	7bfb      	ldrb	r3, [r7, #15]
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3710      	adds	r7, #16
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b083      	sub	sp, #12
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	683a      	ldr	r2, [r7, #0]
 80092d6:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80092da:	bf00      	nop
 80092dc:	370c      	adds	r7, #12
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr

080092e6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80092e6:	b580      	push	{r7, lr}
 80092e8:	b082      	sub	sp, #8
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80092f4:	1c5a      	adds	r2, r3, #1
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f000 f804 	bl	800930a <USBH_HandleSof>
}
 8009302:	bf00      	nop
 8009304:	3708      	adds	r7, #8
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}

0800930a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800930a:	b580      	push	{r7, lr}
 800930c:	b082      	sub	sp, #8
 800930e:	af00      	add	r7, sp, #0
 8009310:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	b2db      	uxtb	r3, r3
 8009318:	2b0b      	cmp	r3, #11
 800931a:	d10a      	bne.n	8009332 <USBH_HandleSof+0x28>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009322:	2b00      	cmp	r3, #0
 8009324:	d005      	beq.n	8009332 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800932c:	699b      	ldr	r3, [r3, #24]
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	4798      	blx	r3
  }
}
 8009332:	bf00      	nop
 8009334:	3708      	adds	r7, #8
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}

0800933a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800933a:	b480      	push	{r7}
 800933c:	b083      	sub	sp, #12
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2201      	movs	r2, #1
 8009346:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800934a:	bf00      	nop
}
 800934c:	370c      	adds	r7, #12
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr

08009356 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009356:	b480      	push	{r7}
 8009358:	b083      	sub	sp, #12
 800935a:	af00      	add	r7, sp, #0
 800935c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2200      	movs	r2, #0
 8009362:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8009366:	bf00      	nop
}
 8009368:	370c      	adds	r7, #12
 800936a:	46bd      	mov	sp, r7
 800936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009370:	4770      	bx	lr

08009372 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009372:	b480      	push	{r7}
 8009374:	b083      	sub	sp, #12
 8009376:	af00      	add	r7, sp, #0
 8009378:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2201      	movs	r2, #1
 800937e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2200      	movs	r2, #0
 8009386:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2200      	movs	r2, #0
 800938e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009392:	2300      	movs	r3, #0
}
 8009394:	4618      	mov	r0, r3
 8009396:	370c      	adds	r7, #12
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr

080093a0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2201      	movs	r2, #1
 80093ac:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2200      	movs	r2, #0
 80093b4:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f001 f8be 	bl	800a542 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	791b      	ldrb	r3, [r3, #4]
 80093ca:	4619      	mov	r1, r3
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f000 ff0b 	bl	800a1e8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	795b      	ldrb	r3, [r3, #5]
 80093d6:	4619      	mov	r1, r3
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f000 ff05 	bl	800a1e8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80093de:	2300      	movs	r3, #0
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3708      	adds	r7, #8
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b086      	sub	sp, #24
 80093ec:	af02      	add	r7, sp, #8
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	460b      	mov	r3, r1
 80093f2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80093f4:	887b      	ldrh	r3, [r7, #2]
 80093f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093fa:	d901      	bls.n	8009400 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80093fc:	2303      	movs	r3, #3
 80093fe:	e01b      	b.n	8009438 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009406:	887b      	ldrh	r3, [r7, #2]
 8009408:	9300      	str	r3, [sp, #0]
 800940a:	4613      	mov	r3, r2
 800940c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009410:	2100      	movs	r1, #0
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f000 f872 	bl	80094fc <USBH_GetDescriptor>
 8009418:	4603      	mov	r3, r0
 800941a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800941c:	7bfb      	ldrb	r3, [r7, #15]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d109      	bne.n	8009436 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009428:	887a      	ldrh	r2, [r7, #2]
 800942a:	4619      	mov	r1, r3
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 f929 	bl	8009684 <USBH_ParseDevDesc>
 8009432:	4603      	mov	r3, r0
 8009434:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009436:	7bfb      	ldrb	r3, [r7, #15]
}
 8009438:	4618      	mov	r0, r3
 800943a:	3710      	adds	r7, #16
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b086      	sub	sp, #24
 8009444:	af02      	add	r7, sp, #8
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	460b      	mov	r3, r1
 800944a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	331c      	adds	r3, #28
 8009450:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8009452:	887b      	ldrh	r3, [r7, #2]
 8009454:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009458:	d901      	bls.n	800945e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800945a:	2303      	movs	r3, #3
 800945c:	e016      	b.n	800948c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800945e:	887b      	ldrh	r3, [r7, #2]
 8009460:	9300      	str	r3, [sp, #0]
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009468:	2100      	movs	r1, #0
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 f846 	bl	80094fc <USBH_GetDescriptor>
 8009470:	4603      	mov	r3, r0
 8009472:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009474:	7bfb      	ldrb	r3, [r7, #15]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d107      	bne.n	800948a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800947a:	887b      	ldrh	r3, [r7, #2]
 800947c:	461a      	mov	r2, r3
 800947e:	68b9      	ldr	r1, [r7, #8]
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 f9af 	bl	80097e4 <USBH_ParseCfgDesc>
 8009486:	4603      	mov	r3, r0
 8009488:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800948a:	7bfb      	ldrb	r3, [r7, #15]
}
 800948c:	4618      	mov	r0, r3
 800948e:	3710      	adds	r7, #16
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b088      	sub	sp, #32
 8009498:	af02      	add	r7, sp, #8
 800949a:	60f8      	str	r0, [r7, #12]
 800949c:	607a      	str	r2, [r7, #4]
 800949e:	461a      	mov	r2, r3
 80094a0:	460b      	mov	r3, r1
 80094a2:	72fb      	strb	r3, [r7, #11]
 80094a4:	4613      	mov	r3, r2
 80094a6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80094a8:	893b      	ldrh	r3, [r7, #8]
 80094aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094ae:	d802      	bhi.n	80094b6 <USBH_Get_StringDesc+0x22>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d101      	bne.n	80094ba <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80094b6:	2303      	movs	r3, #3
 80094b8:	e01c      	b.n	80094f4 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80094ba:	7afb      	ldrb	r3, [r7, #11]
 80094bc:	b29b      	uxth	r3, r3
 80094be:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80094c2:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80094ca:	893b      	ldrh	r3, [r7, #8]
 80094cc:	9300      	str	r3, [sp, #0]
 80094ce:	460b      	mov	r3, r1
 80094d0:	2100      	movs	r1, #0
 80094d2:	68f8      	ldr	r0, [r7, #12]
 80094d4:	f000 f812 	bl	80094fc <USBH_GetDescriptor>
 80094d8:	4603      	mov	r3, r0
 80094da:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80094dc:	7dfb      	ldrb	r3, [r7, #23]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d107      	bne.n	80094f2 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80094e8:	893a      	ldrh	r2, [r7, #8]
 80094ea:	6879      	ldr	r1, [r7, #4]
 80094ec:	4618      	mov	r0, r3
 80094ee:	f000 fb8d 	bl	8009c0c <USBH_ParseStringDesc>
  }

  return status;
 80094f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3718      	adds	r7, #24
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	607b      	str	r3, [r7, #4]
 8009506:	460b      	mov	r3, r1
 8009508:	72fb      	strb	r3, [r7, #11]
 800950a:	4613      	mov	r3, r2
 800950c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	789b      	ldrb	r3, [r3, #2]
 8009512:	2b01      	cmp	r3, #1
 8009514:	d11c      	bne.n	8009550 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009516:	7afb      	ldrb	r3, [r7, #11]
 8009518:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800951c:	b2da      	uxtb	r2, r3
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2206      	movs	r2, #6
 8009526:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	893a      	ldrh	r2, [r7, #8]
 800952c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800952e:	893b      	ldrh	r3, [r7, #8]
 8009530:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009534:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009538:	d104      	bne.n	8009544 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	f240 4209 	movw	r2, #1033	@ 0x409
 8009540:	829a      	strh	r2, [r3, #20]
 8009542:	e002      	b.n	800954a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2200      	movs	r2, #0
 8009548:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	8b3a      	ldrh	r2, [r7, #24]
 800954e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009550:	8b3b      	ldrh	r3, [r7, #24]
 8009552:	461a      	mov	r2, r3
 8009554:	6879      	ldr	r1, [r7, #4]
 8009556:	68f8      	ldr	r0, [r7, #12]
 8009558:	f000 fba5 	bl	8009ca6 <USBH_CtlReq>
 800955c:	4603      	mov	r3, r0
}
 800955e:	4618      	mov	r0, r3
 8009560:	3710      	adds	r7, #16
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}

08009566 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009566:	b580      	push	{r7, lr}
 8009568:	b082      	sub	sp, #8
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
 800956e:	460b      	mov	r3, r1
 8009570:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	789b      	ldrb	r3, [r3, #2]
 8009576:	2b01      	cmp	r3, #1
 8009578:	d10f      	bne.n	800959a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2200      	movs	r2, #0
 800957e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2205      	movs	r2, #5
 8009584:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009586:	78fb      	ldrb	r3, [r7, #3]
 8009588:	b29a      	uxth	r2, r3
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2200      	movs	r2, #0
 8009592:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2200      	movs	r2, #0
 8009598:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800959a:	2200      	movs	r2, #0
 800959c:	2100      	movs	r1, #0
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 fb81 	bl	8009ca6 <USBH_CtlReq>
 80095a4:	4603      	mov	r3, r0
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3708      	adds	r7, #8
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}

080095ae <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80095ae:	b580      	push	{r7, lr}
 80095b0:	b082      	sub	sp, #8
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
 80095b6:	460b      	mov	r3, r1
 80095b8:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	789b      	ldrb	r3, [r3, #2]
 80095be:	2b01      	cmp	r3, #1
 80095c0:	d10e      	bne.n	80095e0 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2200      	movs	r2, #0
 80095c6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2209      	movs	r2, #9
 80095cc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	887a      	ldrh	r2, [r7, #2]
 80095d2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2200      	movs	r2, #0
 80095d8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2200      	movs	r2, #0
 80095de:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80095e0:	2200      	movs	r2, #0
 80095e2:	2100      	movs	r1, #0
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 fb5e 	bl	8009ca6 <USBH_CtlReq>
 80095ea:	4603      	mov	r3, r0
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3708      	adds	r7, #8
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b082      	sub	sp, #8
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	460b      	mov	r3, r1
 80095fe:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	789b      	ldrb	r3, [r3, #2]
 8009604:	2b01      	cmp	r3, #1
 8009606:	d10f      	bne.n	8009628 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2203      	movs	r2, #3
 8009612:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009614:	78fb      	ldrb	r3, [r7, #3]
 8009616:	b29a      	uxth	r2, r3
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2200      	movs	r2, #0
 8009620:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2200      	movs	r2, #0
 8009626:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009628:	2200      	movs	r2, #0
 800962a:	2100      	movs	r1, #0
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f000 fb3a 	bl	8009ca6 <USBH_CtlReq>
 8009632:	4603      	mov	r3, r0
}
 8009634:	4618      	mov	r0, r3
 8009636:	3708      	adds	r7, #8
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}

0800963c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	460b      	mov	r3, r1
 8009646:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	789b      	ldrb	r3, [r3, #2]
 800964c:	2b01      	cmp	r3, #1
 800964e:	d10f      	bne.n	8009670 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2202      	movs	r2, #2
 8009654:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2201      	movs	r2, #1
 800965a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2200      	movs	r2, #0
 8009660:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009662:	78fb      	ldrb	r3, [r7, #3]
 8009664:	b29a      	uxth	r2, r3
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2200      	movs	r2, #0
 800966e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009670:	2200      	movs	r2, #0
 8009672:	2100      	movs	r1, #0
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 fb16 	bl	8009ca6 <USBH_CtlReq>
 800967a:	4603      	mov	r3, r0
}
 800967c:	4618      	mov	r0, r3
 800967e:	3708      	adds	r7, #8
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009684:	b480      	push	{r7}
 8009686:	b087      	sub	sp, #28
 8009688:	af00      	add	r7, sp, #0
 800968a:	60f8      	str	r0, [r7, #12]
 800968c:	60b9      	str	r1, [r7, #8]
 800968e:	4613      	mov	r3, r2
 8009690:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009698:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800969a:	2300      	movs	r3, #0
 800969c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d101      	bne.n	80096a8 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80096a4:	2302      	movs	r3, #2
 80096a6:	e094      	b.n	80097d2 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	781a      	ldrb	r2, [r3, #0]
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	785a      	ldrb	r2, [r3, #1]
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	3302      	adds	r3, #2
 80096bc:	781b      	ldrb	r3, [r3, #0]
 80096be:	461a      	mov	r2, r3
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	3303      	adds	r3, #3
 80096c4:	781b      	ldrb	r3, [r3, #0]
 80096c6:	021b      	lsls	r3, r3, #8
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	4313      	orrs	r3, r2
 80096cc:	b29a      	uxth	r2, r3
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	791a      	ldrb	r2, [r3, #4]
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	795a      	ldrb	r2, [r3, #5]
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	799a      	ldrb	r2, [r3, #6]
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	79da      	ldrb	r2, [r3, #7]
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d004      	beq.n	8009706 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009702:	2b01      	cmp	r3, #1
 8009704:	d11b      	bne.n	800973e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	79db      	ldrb	r3, [r3, #7]
 800970a:	2b20      	cmp	r3, #32
 800970c:	dc0f      	bgt.n	800972e <USBH_ParseDevDesc+0xaa>
 800970e:	2b08      	cmp	r3, #8
 8009710:	db0f      	blt.n	8009732 <USBH_ParseDevDesc+0xae>
 8009712:	3b08      	subs	r3, #8
 8009714:	4a32      	ldr	r2, [pc, #200]	@ (80097e0 <USBH_ParseDevDesc+0x15c>)
 8009716:	fa22 f303 	lsr.w	r3, r2, r3
 800971a:	f003 0301 	and.w	r3, r3, #1
 800971e:	2b00      	cmp	r3, #0
 8009720:	bf14      	ite	ne
 8009722:	2301      	movne	r3, #1
 8009724:	2300      	moveq	r3, #0
 8009726:	b2db      	uxtb	r3, r3
 8009728:	2b00      	cmp	r3, #0
 800972a:	d106      	bne.n	800973a <USBH_ParseDevDesc+0xb6>
 800972c:	e001      	b.n	8009732 <USBH_ParseDevDesc+0xae>
 800972e:	2b40      	cmp	r3, #64	@ 0x40
 8009730:	d003      	beq.n	800973a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	2208      	movs	r2, #8
 8009736:	71da      	strb	r2, [r3, #7]
        break;
 8009738:	e000      	b.n	800973c <USBH_ParseDevDesc+0xb8>
        break;
 800973a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800973c:	e00e      	b.n	800975c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009744:	2b02      	cmp	r3, #2
 8009746:	d107      	bne.n	8009758 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	79db      	ldrb	r3, [r3, #7]
 800974c:	2b08      	cmp	r3, #8
 800974e:	d005      	beq.n	800975c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	2208      	movs	r2, #8
 8009754:	71da      	strb	r2, [r3, #7]
 8009756:	e001      	b.n	800975c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009758:	2303      	movs	r3, #3
 800975a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800975c:	88fb      	ldrh	r3, [r7, #6]
 800975e:	2b08      	cmp	r3, #8
 8009760:	d936      	bls.n	80097d0 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	3308      	adds	r3, #8
 8009766:	781b      	ldrb	r3, [r3, #0]
 8009768:	461a      	mov	r2, r3
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	3309      	adds	r3, #9
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	021b      	lsls	r3, r3, #8
 8009772:	b29b      	uxth	r3, r3
 8009774:	4313      	orrs	r3, r2
 8009776:	b29a      	uxth	r2, r3
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	330a      	adds	r3, #10
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	461a      	mov	r2, r3
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	330b      	adds	r3, #11
 8009788:	781b      	ldrb	r3, [r3, #0]
 800978a:	021b      	lsls	r3, r3, #8
 800978c:	b29b      	uxth	r3, r3
 800978e:	4313      	orrs	r3, r2
 8009790:	b29a      	uxth	r2, r3
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	330c      	adds	r3, #12
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	461a      	mov	r2, r3
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	330d      	adds	r3, #13
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	021b      	lsls	r3, r3, #8
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	4313      	orrs	r3, r2
 80097aa:	b29a      	uxth	r2, r3
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	7b9a      	ldrb	r2, [r3, #14]
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	7bda      	ldrb	r2, [r3, #15]
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	7c1a      	ldrb	r2, [r3, #16]
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	7c5a      	ldrb	r2, [r3, #17]
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80097d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	371c      	adds	r7, #28
 80097d6:	46bd      	mov	sp, r7
 80097d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097dc:	4770      	bx	lr
 80097de:	bf00      	nop
 80097e0:	01000101 	.word	0x01000101

080097e4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b08c      	sub	sp, #48	@ 0x30
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	60f8      	str	r0, [r7, #12]
 80097ec:	60b9      	str	r1, [r7, #8]
 80097ee:	4613      	mov	r3, r2
 80097f0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80097f8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80097fa:	2300      	movs	r3, #0
 80097fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009800:	2300      	movs	r3, #0
 8009802:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8009806:	2300      	movs	r3, #0
 8009808:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d101      	bne.n	8009816 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8009812:	2302      	movs	r3, #2
 8009814:	e0da      	b.n	80099cc <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800981a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	2b09      	cmp	r3, #9
 8009820:	d002      	beq.n	8009828 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009824:	2209      	movs	r2, #9
 8009826:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	781a      	ldrb	r2, [r3, #0]
 800982c:	6a3b      	ldr	r3, [r7, #32]
 800982e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	785a      	ldrb	r2, [r3, #1]
 8009834:	6a3b      	ldr	r3, [r7, #32]
 8009836:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	3302      	adds	r3, #2
 800983c:	781b      	ldrb	r3, [r3, #0]
 800983e:	461a      	mov	r2, r3
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	3303      	adds	r3, #3
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	021b      	lsls	r3, r3, #8
 8009848:	b29b      	uxth	r3, r3
 800984a:	4313      	orrs	r3, r2
 800984c:	b29b      	uxth	r3, r3
 800984e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009852:	bf28      	it	cs
 8009854:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8009858:	b29a      	uxth	r2, r3
 800985a:	6a3b      	ldr	r3, [r7, #32]
 800985c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	791a      	ldrb	r2, [r3, #4]
 8009862:	6a3b      	ldr	r3, [r7, #32]
 8009864:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	795a      	ldrb	r2, [r3, #5]
 800986a:	6a3b      	ldr	r3, [r7, #32]
 800986c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	799a      	ldrb	r2, [r3, #6]
 8009872:	6a3b      	ldr	r3, [r7, #32]
 8009874:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	79da      	ldrb	r2, [r3, #7]
 800987a:	6a3b      	ldr	r3, [r7, #32]
 800987c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	7a1a      	ldrb	r2, [r3, #8]
 8009882:	6a3b      	ldr	r3, [r7, #32]
 8009884:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009886:	88fb      	ldrh	r3, [r7, #6]
 8009888:	2b09      	cmp	r3, #9
 800988a:	f240 809d 	bls.w	80099c8 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800988e:	2309      	movs	r3, #9
 8009890:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009892:	2300      	movs	r3, #0
 8009894:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009896:	e081      	b.n	800999c <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009898:	f107 0316 	add.w	r3, r7, #22
 800989c:	4619      	mov	r1, r3
 800989e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80098a0:	f000 f9e7 	bl	8009c72 <USBH_GetNextDesc>
 80098a4:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80098a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098a8:	785b      	ldrb	r3, [r3, #1]
 80098aa:	2b04      	cmp	r3, #4
 80098ac:	d176      	bne.n	800999c <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80098ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	2b09      	cmp	r3, #9
 80098b4:	d002      	beq.n	80098bc <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80098b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098b8:	2209      	movs	r2, #9
 80098ba:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80098bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80098c0:	221a      	movs	r2, #26
 80098c2:	fb02 f303 	mul.w	r3, r2, r3
 80098c6:	3308      	adds	r3, #8
 80098c8:	6a3a      	ldr	r2, [r7, #32]
 80098ca:	4413      	add	r3, r2
 80098cc:	3302      	adds	r3, #2
 80098ce:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80098d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80098d2:	69f8      	ldr	r0, [r7, #28]
 80098d4:	f000 f87e 	bl	80099d4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80098d8:	2300      	movs	r3, #0
 80098da:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80098de:	2300      	movs	r3, #0
 80098e0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80098e2:	e043      	b.n	800996c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80098e4:	f107 0316 	add.w	r3, r7, #22
 80098e8:	4619      	mov	r1, r3
 80098ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80098ec:	f000 f9c1 	bl	8009c72 <USBH_GetNextDesc>
 80098f0:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80098f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098f4:	785b      	ldrb	r3, [r3, #1]
 80098f6:	2b05      	cmp	r3, #5
 80098f8:	d138      	bne.n	800996c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80098fa:	69fb      	ldr	r3, [r7, #28]
 80098fc:	795b      	ldrb	r3, [r3, #5]
 80098fe:	2b01      	cmp	r3, #1
 8009900:	d113      	bne.n	800992a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009902:	69fb      	ldr	r3, [r7, #28]
 8009904:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8009906:	2b02      	cmp	r3, #2
 8009908:	d003      	beq.n	8009912 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800990a:	69fb      	ldr	r3, [r7, #28]
 800990c:	799b      	ldrb	r3, [r3, #6]
 800990e:	2b03      	cmp	r3, #3
 8009910:	d10b      	bne.n	800992a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009912:	69fb      	ldr	r3, [r7, #28]
 8009914:	79db      	ldrb	r3, [r3, #7]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d10b      	bne.n	8009932 <USBH_ParseCfgDesc+0x14e>
 800991a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	2b09      	cmp	r3, #9
 8009920:	d007      	beq.n	8009932 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8009922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009924:	2209      	movs	r2, #9
 8009926:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009928:	e003      	b.n	8009932 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800992a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800992c:	2207      	movs	r2, #7
 800992e:	701a      	strb	r2, [r3, #0]
 8009930:	e000      	b.n	8009934 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009932:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009934:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009938:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800993c:	3201      	adds	r2, #1
 800993e:	00d2      	lsls	r2, r2, #3
 8009940:	211a      	movs	r1, #26
 8009942:	fb01 f303 	mul.w	r3, r1, r3
 8009946:	4413      	add	r3, r2
 8009948:	3308      	adds	r3, #8
 800994a:	6a3a      	ldr	r2, [r7, #32]
 800994c:	4413      	add	r3, r2
 800994e:	3304      	adds	r3, #4
 8009950:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009952:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009954:	69b9      	ldr	r1, [r7, #24]
 8009956:	68f8      	ldr	r0, [r7, #12]
 8009958:	f000 f870 	bl	8009a3c <USBH_ParseEPDesc>
 800995c:	4603      	mov	r3, r0
 800995e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8009962:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009966:	3301      	adds	r3, #1
 8009968:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800996c:	69fb      	ldr	r3, [r7, #28]
 800996e:	791b      	ldrb	r3, [r3, #4]
 8009970:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009974:	429a      	cmp	r2, r3
 8009976:	d204      	bcs.n	8009982 <USBH_ParseCfgDesc+0x19e>
 8009978:	6a3b      	ldr	r3, [r7, #32]
 800997a:	885a      	ldrh	r2, [r3, #2]
 800997c:	8afb      	ldrh	r3, [r7, #22]
 800997e:	429a      	cmp	r2, r3
 8009980:	d8b0      	bhi.n	80098e4 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009982:	69fb      	ldr	r3, [r7, #28]
 8009984:	791b      	ldrb	r3, [r3, #4]
 8009986:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800998a:	429a      	cmp	r2, r3
 800998c:	d201      	bcs.n	8009992 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800998e:	2303      	movs	r3, #3
 8009990:	e01c      	b.n	80099cc <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8009992:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009996:	3301      	adds	r3, #1
 8009998:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800999c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d805      	bhi.n	80099b0 <USBH_ParseCfgDesc+0x1cc>
 80099a4:	6a3b      	ldr	r3, [r7, #32]
 80099a6:	885a      	ldrh	r2, [r3, #2]
 80099a8:	8afb      	ldrh	r3, [r7, #22]
 80099aa:	429a      	cmp	r2, r3
 80099ac:	f63f af74 	bhi.w	8009898 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80099b0:	6a3b      	ldr	r3, [r7, #32]
 80099b2:	791b      	ldrb	r3, [r3, #4]
 80099b4:	2b02      	cmp	r3, #2
 80099b6:	bf28      	it	cs
 80099b8:	2302      	movcs	r3, #2
 80099ba:	b2db      	uxtb	r3, r3
 80099bc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d201      	bcs.n	80099c8 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 80099c4:	2303      	movs	r3, #3
 80099c6:	e001      	b.n	80099cc <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 80099c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3730      	adds	r7, #48	@ 0x30
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b083      	sub	sp, #12
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	781a      	ldrb	r2, [r3, #0]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	785a      	ldrb	r2, [r3, #1]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	789a      	ldrb	r2, [r3, #2]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	78da      	ldrb	r2, [r3, #3]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	3304      	adds	r3, #4
 8009a02:	781b      	ldrb	r3, [r3, #0]
 8009a04:	2b02      	cmp	r3, #2
 8009a06:	bf28      	it	cs
 8009a08:	2302      	movcs	r3, #2
 8009a0a:	b2da      	uxtb	r2, r3
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	795a      	ldrb	r2, [r3, #5]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	799a      	ldrb	r2, [r3, #6]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	79da      	ldrb	r2, [r3, #7]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	7a1a      	ldrb	r2, [r3, #8]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	721a      	strb	r2, [r3, #8]
}
 8009a30:	bf00      	nop
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr

08009a3c <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b087      	sub	sp, #28
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	60f8      	str	r0, [r7, #12]
 8009a44:	60b9      	str	r1, [r7, #8]
 8009a46:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	781a      	ldrb	r2, [r3, #0]
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	785a      	ldrb	r2, [r3, #1]
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	789a      	ldrb	r2, [r3, #2]
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	78da      	ldrb	r2, [r3, #3]
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	3304      	adds	r3, #4
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	461a      	mov	r2, r3
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	3305      	adds	r3, #5
 8009a78:	781b      	ldrb	r3, [r3, #0]
 8009a7a:	021b      	lsls	r3, r3, #8
 8009a7c:	b29b      	uxth	r3, r3
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	b29a      	uxth	r2, r3
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	799a      	ldrb	r2, [r3, #6]
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	889b      	ldrh	r3, [r3, #4]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d009      	beq.n	8009aaa <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009a9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a9e:	d804      	bhi.n	8009aaa <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009aa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009aa8:	d901      	bls.n	8009aae <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8009aaa:	2303      	movs	r3, #3
 8009aac:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d136      	bne.n	8009b26 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	78db      	ldrb	r3, [r3, #3]
 8009abc:	f003 0303 	and.w	r3, r3, #3
 8009ac0:	2b02      	cmp	r3, #2
 8009ac2:	d108      	bne.n	8009ad6 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	889b      	ldrh	r3, [r3, #4]
 8009ac8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009acc:	f240 8097 	bls.w	8009bfe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009ad0:	2303      	movs	r3, #3
 8009ad2:	75fb      	strb	r3, [r7, #23]
 8009ad4:	e093      	b.n	8009bfe <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	78db      	ldrb	r3, [r3, #3]
 8009ada:	f003 0303 	and.w	r3, r3, #3
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d107      	bne.n	8009af2 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	889b      	ldrh	r3, [r3, #4]
 8009ae6:	2b40      	cmp	r3, #64	@ 0x40
 8009ae8:	f240 8089 	bls.w	8009bfe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009aec:	2303      	movs	r3, #3
 8009aee:	75fb      	strb	r3, [r7, #23]
 8009af0:	e085      	b.n	8009bfe <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	78db      	ldrb	r3, [r3, #3]
 8009af6:	f003 0303 	and.w	r3, r3, #3
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d005      	beq.n	8009b0a <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	78db      	ldrb	r3, [r3, #3]
 8009b02:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009b06:	2b03      	cmp	r3, #3
 8009b08:	d10a      	bne.n	8009b20 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	799b      	ldrb	r3, [r3, #6]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d003      	beq.n	8009b1a <USBH_ParseEPDesc+0xde>
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	799b      	ldrb	r3, [r3, #6]
 8009b16:	2b10      	cmp	r3, #16
 8009b18:	d970      	bls.n	8009bfc <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8009b1a:	2303      	movs	r3, #3
 8009b1c:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009b1e:	e06d      	b.n	8009bfc <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009b20:	2303      	movs	r3, #3
 8009b22:	75fb      	strb	r3, [r7, #23]
 8009b24:	e06b      	b.n	8009bfe <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009b2c:	2b01      	cmp	r3, #1
 8009b2e:	d13c      	bne.n	8009baa <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	78db      	ldrb	r3, [r3, #3]
 8009b34:	f003 0303 	and.w	r3, r3, #3
 8009b38:	2b02      	cmp	r3, #2
 8009b3a:	d005      	beq.n	8009b48 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	78db      	ldrb	r3, [r3, #3]
 8009b40:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d106      	bne.n	8009b56 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	889b      	ldrh	r3, [r3, #4]
 8009b4c:	2b40      	cmp	r3, #64	@ 0x40
 8009b4e:	d956      	bls.n	8009bfe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009b50:	2303      	movs	r3, #3
 8009b52:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009b54:	e053      	b.n	8009bfe <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	78db      	ldrb	r3, [r3, #3]
 8009b5a:	f003 0303 	and.w	r3, r3, #3
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	d10e      	bne.n	8009b80 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	799b      	ldrb	r3, [r3, #6]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d007      	beq.n	8009b7a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009b6e:	2b10      	cmp	r3, #16
 8009b70:	d803      	bhi.n	8009b7a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8009b76:	2b40      	cmp	r3, #64	@ 0x40
 8009b78:	d941      	bls.n	8009bfe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009b7a:	2303      	movs	r3, #3
 8009b7c:	75fb      	strb	r3, [r7, #23]
 8009b7e:	e03e      	b.n	8009bfe <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	78db      	ldrb	r3, [r3, #3]
 8009b84:	f003 0303 	and.w	r3, r3, #3
 8009b88:	2b03      	cmp	r3, #3
 8009b8a:	d10b      	bne.n	8009ba4 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	799b      	ldrb	r3, [r3, #6]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d004      	beq.n	8009b9e <USBH_ParseEPDesc+0x162>
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	889b      	ldrh	r3, [r3, #4]
 8009b98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b9c:	d32f      	bcc.n	8009bfe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009b9e:	2303      	movs	r3, #3
 8009ba0:	75fb      	strb	r3, [r7, #23]
 8009ba2:	e02c      	b.n	8009bfe <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009ba4:	2303      	movs	r3, #3
 8009ba6:	75fb      	strb	r3, [r7, #23]
 8009ba8:	e029      	b.n	8009bfe <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009bb0:	2b02      	cmp	r3, #2
 8009bb2:	d120      	bne.n	8009bf6 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	78db      	ldrb	r3, [r3, #3]
 8009bb8:	f003 0303 	and.w	r3, r3, #3
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d106      	bne.n	8009bce <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	889b      	ldrh	r3, [r3, #4]
 8009bc4:	2b08      	cmp	r3, #8
 8009bc6:	d01a      	beq.n	8009bfe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009bc8:	2303      	movs	r3, #3
 8009bca:	75fb      	strb	r3, [r7, #23]
 8009bcc:	e017      	b.n	8009bfe <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	78db      	ldrb	r3, [r3, #3]
 8009bd2:	f003 0303 	and.w	r3, r3, #3
 8009bd6:	2b03      	cmp	r3, #3
 8009bd8:	d10a      	bne.n	8009bf0 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	799b      	ldrb	r3, [r3, #6]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d003      	beq.n	8009bea <USBH_ParseEPDesc+0x1ae>
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	889b      	ldrh	r3, [r3, #4]
 8009be6:	2b08      	cmp	r3, #8
 8009be8:	d909      	bls.n	8009bfe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009bea:	2303      	movs	r3, #3
 8009bec:	75fb      	strb	r3, [r7, #23]
 8009bee:	e006      	b.n	8009bfe <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009bf0:	2303      	movs	r3, #3
 8009bf2:	75fb      	strb	r3, [r7, #23]
 8009bf4:	e003      	b.n	8009bfe <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009bf6:	2303      	movs	r3, #3
 8009bf8:	75fb      	strb	r3, [r7, #23]
 8009bfa:	e000      	b.n	8009bfe <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009bfc:	bf00      	nop
  }

  return status;
 8009bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	371c      	adds	r7, #28
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr

08009c0c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b087      	sub	sp, #28
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	60f8      	str	r0, [r7, #12]
 8009c14:	60b9      	str	r1, [r7, #8]
 8009c16:	4613      	mov	r3, r2
 8009c18:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	2b03      	cmp	r3, #3
 8009c22:	d120      	bne.n	8009c66 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	1e9a      	subs	r2, r3, #2
 8009c2a:	88fb      	ldrh	r3, [r7, #6]
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	bf28      	it	cs
 8009c30:	4613      	movcs	r3, r2
 8009c32:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	3302      	adds	r3, #2
 8009c38:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	82fb      	strh	r3, [r7, #22]
 8009c3e:	e00b      	b.n	8009c58 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009c40:	8afb      	ldrh	r3, [r7, #22]
 8009c42:	68fa      	ldr	r2, [r7, #12]
 8009c44:	4413      	add	r3, r2
 8009c46:	781a      	ldrb	r2, [r3, #0]
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	3301      	adds	r3, #1
 8009c50:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009c52:	8afb      	ldrh	r3, [r7, #22]
 8009c54:	3302      	adds	r3, #2
 8009c56:	82fb      	strh	r3, [r7, #22]
 8009c58:	8afa      	ldrh	r2, [r7, #22]
 8009c5a:	8abb      	ldrh	r3, [r7, #20]
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d3ef      	bcc.n	8009c40 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	2200      	movs	r2, #0
 8009c64:	701a      	strb	r2, [r3, #0]
  }
}
 8009c66:	bf00      	nop
 8009c68:	371c      	adds	r7, #28
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c70:	4770      	bx	lr

08009c72 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009c72:	b480      	push	{r7}
 8009c74:	b085      	sub	sp, #20
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	6078      	str	r0, [r7, #4]
 8009c7a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	881b      	ldrh	r3, [r3, #0]
 8009c80:	687a      	ldr	r2, [r7, #4]
 8009c82:	7812      	ldrb	r2, [r2, #0]
 8009c84:	4413      	add	r3, r2
 8009c86:	b29a      	uxth	r2, r3
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	4413      	add	r3, r2
 8009c96:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009c98:	68fb      	ldr	r3, [r7, #12]
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3714      	adds	r7, #20
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca4:	4770      	bx	lr

08009ca6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009ca6:	b580      	push	{r7, lr}
 8009ca8:	b086      	sub	sp, #24
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	60f8      	str	r0, [r7, #12]
 8009cae:	60b9      	str	r1, [r7, #8]
 8009cb0:	4613      	mov	r3, r2
 8009cb2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	789b      	ldrb	r3, [r3, #2]
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d002      	beq.n	8009cc6 <USBH_CtlReq+0x20>
 8009cc0:	2b02      	cmp	r3, #2
 8009cc2:	d00f      	beq.n	8009ce4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009cc4:	e027      	b.n	8009d16 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	68ba      	ldr	r2, [r7, #8]
 8009cca:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	88fa      	ldrh	r2, [r7, #6]
 8009cd0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2202      	movs	r2, #2
 8009cdc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	75fb      	strb	r3, [r7, #23]
      break;
 8009ce2:	e018      	b.n	8009d16 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009ce4:	68f8      	ldr	r0, [r7, #12]
 8009ce6:	f000 f81b 	bl	8009d20 <USBH_HandleControl>
 8009cea:	4603      	mov	r3, r0
 8009cec:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009cee:	7dfb      	ldrb	r3, [r7, #23]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d002      	beq.n	8009cfa <USBH_CtlReq+0x54>
 8009cf4:	7dfb      	ldrb	r3, [r7, #23]
 8009cf6:	2b03      	cmp	r3, #3
 8009cf8:	d106      	bne.n	8009d08 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2200      	movs	r2, #0
 8009d04:	761a      	strb	r2, [r3, #24]
      break;
 8009d06:	e005      	b.n	8009d14 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009d08:	7dfb      	ldrb	r3, [r7, #23]
 8009d0a:	2b02      	cmp	r3, #2
 8009d0c:	d102      	bne.n	8009d14 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2201      	movs	r2, #1
 8009d12:	709a      	strb	r2, [r3, #2]
      break;
 8009d14:	bf00      	nop
  }
  return status;
 8009d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3718      	adds	r7, #24
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b086      	sub	sp, #24
 8009d24:	af02      	add	r7, sp, #8
 8009d26:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009d28:	2301      	movs	r3, #1
 8009d2a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	7e1b      	ldrb	r3, [r3, #24]
 8009d34:	3b01      	subs	r3, #1
 8009d36:	2b0a      	cmp	r3, #10
 8009d38:	f200 8156 	bhi.w	8009fe8 <USBH_HandleControl+0x2c8>
 8009d3c:	a201      	add	r2, pc, #4	@ (adr r2, 8009d44 <USBH_HandleControl+0x24>)
 8009d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d42:	bf00      	nop
 8009d44:	08009d71 	.word	0x08009d71
 8009d48:	08009d8b 	.word	0x08009d8b
 8009d4c:	08009df5 	.word	0x08009df5
 8009d50:	08009e1b 	.word	0x08009e1b
 8009d54:	08009e53 	.word	0x08009e53
 8009d58:	08009e7d 	.word	0x08009e7d
 8009d5c:	08009ecf 	.word	0x08009ecf
 8009d60:	08009ef1 	.word	0x08009ef1
 8009d64:	08009f2d 	.word	0x08009f2d
 8009d68:	08009f53 	.word	0x08009f53
 8009d6c:	08009f91 	.word	0x08009f91
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f103 0110 	add.w	r1, r3, #16
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	795b      	ldrb	r3, [r3, #5]
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 f943 	bl	800a008 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2202      	movs	r2, #2
 8009d86:	761a      	strb	r2, [r3, #24]
      break;
 8009d88:	e139      	b.n	8009ffe <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	795b      	ldrb	r3, [r3, #5]
 8009d8e:	4619      	mov	r1, r3
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 fcc5 	bl	800a720 <USBH_LL_GetURBState>
 8009d96:	4603      	mov	r3, r0
 8009d98:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009d9a:	7bbb      	ldrb	r3, [r7, #14]
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d11e      	bne.n	8009dde <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	7c1b      	ldrb	r3, [r3, #16]
 8009da4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009da8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	8adb      	ldrh	r3, [r3, #22]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d00a      	beq.n	8009dc8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009db2:	7b7b      	ldrb	r3, [r7, #13]
 8009db4:	2b80      	cmp	r3, #128	@ 0x80
 8009db6:	d103      	bne.n	8009dc0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2203      	movs	r2, #3
 8009dbc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009dbe:	e115      	b.n	8009fec <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2205      	movs	r2, #5
 8009dc4:	761a      	strb	r2, [r3, #24]
      break;
 8009dc6:	e111      	b.n	8009fec <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009dc8:	7b7b      	ldrb	r3, [r7, #13]
 8009dca:	2b80      	cmp	r3, #128	@ 0x80
 8009dcc:	d103      	bne.n	8009dd6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2209      	movs	r2, #9
 8009dd2:	761a      	strb	r2, [r3, #24]
      break;
 8009dd4:	e10a      	b.n	8009fec <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2207      	movs	r2, #7
 8009dda:	761a      	strb	r2, [r3, #24]
      break;
 8009ddc:	e106      	b.n	8009fec <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009dde:	7bbb      	ldrb	r3, [r7, #14]
 8009de0:	2b04      	cmp	r3, #4
 8009de2:	d003      	beq.n	8009dec <USBH_HandleControl+0xcc>
 8009de4:	7bbb      	ldrb	r3, [r7, #14]
 8009de6:	2b02      	cmp	r3, #2
 8009de8:	f040 8100 	bne.w	8009fec <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	220b      	movs	r2, #11
 8009df0:	761a      	strb	r2, [r3, #24]
      break;
 8009df2:	e0fb      	b.n	8009fec <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009dfa:	b29a      	uxth	r2, r3
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6899      	ldr	r1, [r3, #8]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	899a      	ldrh	r2, [r3, #12]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	791b      	ldrb	r3, [r3, #4]
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f000 f93a 	bl	800a086 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2204      	movs	r2, #4
 8009e16:	761a      	strb	r2, [r3, #24]
      break;
 8009e18:	e0f1      	b.n	8009ffe <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	791b      	ldrb	r3, [r3, #4]
 8009e1e:	4619      	mov	r1, r3
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f000 fc7d 	bl	800a720 <USBH_LL_GetURBState>
 8009e26:	4603      	mov	r3, r0
 8009e28:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009e2a:	7bbb      	ldrb	r3, [r7, #14]
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d102      	bne.n	8009e36 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2209      	movs	r2, #9
 8009e34:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009e36:	7bbb      	ldrb	r3, [r7, #14]
 8009e38:	2b05      	cmp	r3, #5
 8009e3a:	d102      	bne.n	8009e42 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009e3c:	2303      	movs	r3, #3
 8009e3e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009e40:	e0d6      	b.n	8009ff0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009e42:	7bbb      	ldrb	r3, [r7, #14]
 8009e44:	2b04      	cmp	r3, #4
 8009e46:	f040 80d3 	bne.w	8009ff0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	220b      	movs	r2, #11
 8009e4e:	761a      	strb	r2, [r3, #24]
      break;
 8009e50:	e0ce      	b.n	8009ff0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6899      	ldr	r1, [r3, #8]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	899a      	ldrh	r2, [r3, #12]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	795b      	ldrb	r3, [r3, #5]
 8009e5e:	2001      	movs	r0, #1
 8009e60:	9000      	str	r0, [sp, #0]
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f000 f8ea 	bl	800a03c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009e6e:	b29a      	uxth	r2, r3
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2206      	movs	r2, #6
 8009e78:	761a      	strb	r2, [r3, #24]
      break;
 8009e7a:	e0c0      	b.n	8009ffe <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	795b      	ldrb	r3, [r3, #5]
 8009e80:	4619      	mov	r1, r3
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 fc4c 	bl	800a720 <USBH_LL_GetURBState>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009e8c:	7bbb      	ldrb	r3, [r7, #14]
 8009e8e:	2b01      	cmp	r3, #1
 8009e90:	d103      	bne.n	8009e9a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2207      	movs	r2, #7
 8009e96:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009e98:	e0ac      	b.n	8009ff4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009e9a:	7bbb      	ldrb	r3, [r7, #14]
 8009e9c:	2b05      	cmp	r3, #5
 8009e9e:	d105      	bne.n	8009eac <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	220c      	movs	r2, #12
 8009ea4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009ea6:	2303      	movs	r3, #3
 8009ea8:	73fb      	strb	r3, [r7, #15]
      break;
 8009eaa:	e0a3      	b.n	8009ff4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009eac:	7bbb      	ldrb	r3, [r7, #14]
 8009eae:	2b02      	cmp	r3, #2
 8009eb0:	d103      	bne.n	8009eba <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2205      	movs	r2, #5
 8009eb6:	761a      	strb	r2, [r3, #24]
      break;
 8009eb8:	e09c      	b.n	8009ff4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009eba:	7bbb      	ldrb	r3, [r7, #14]
 8009ebc:	2b04      	cmp	r3, #4
 8009ebe:	f040 8099 	bne.w	8009ff4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	220b      	movs	r2, #11
 8009ec6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009ec8:	2302      	movs	r3, #2
 8009eca:	73fb      	strb	r3, [r7, #15]
      break;
 8009ecc:	e092      	b.n	8009ff4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	791b      	ldrb	r3, [r3, #4]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	2100      	movs	r1, #0
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 f8d5 	bl	800a086 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009ee2:	b29a      	uxth	r2, r3
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2208      	movs	r2, #8
 8009eec:	761a      	strb	r2, [r3, #24]

      break;
 8009eee:	e086      	b.n	8009ffe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	791b      	ldrb	r3, [r3, #4]
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 fc12 	bl	800a720 <USBH_LL_GetURBState>
 8009efc:	4603      	mov	r3, r0
 8009efe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009f00:	7bbb      	ldrb	r3, [r7, #14]
 8009f02:	2b01      	cmp	r3, #1
 8009f04:	d105      	bne.n	8009f12 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	220d      	movs	r2, #13
 8009f0a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009f10:	e072      	b.n	8009ff8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009f12:	7bbb      	ldrb	r3, [r7, #14]
 8009f14:	2b04      	cmp	r3, #4
 8009f16:	d103      	bne.n	8009f20 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	220b      	movs	r2, #11
 8009f1c:	761a      	strb	r2, [r3, #24]
      break;
 8009f1e:	e06b      	b.n	8009ff8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009f20:	7bbb      	ldrb	r3, [r7, #14]
 8009f22:	2b05      	cmp	r3, #5
 8009f24:	d168      	bne.n	8009ff8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009f26:	2303      	movs	r3, #3
 8009f28:	73fb      	strb	r3, [r7, #15]
      break;
 8009f2a:	e065      	b.n	8009ff8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	795b      	ldrb	r3, [r3, #5]
 8009f30:	2201      	movs	r2, #1
 8009f32:	9200      	str	r2, [sp, #0]
 8009f34:	2200      	movs	r2, #0
 8009f36:	2100      	movs	r1, #0
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 f87f 	bl	800a03c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009f44:	b29a      	uxth	r2, r3
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	220a      	movs	r2, #10
 8009f4e:	761a      	strb	r2, [r3, #24]
      break;
 8009f50:	e055      	b.n	8009ffe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	795b      	ldrb	r3, [r3, #5]
 8009f56:	4619      	mov	r1, r3
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 fbe1 	bl	800a720 <USBH_LL_GetURBState>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009f62:	7bbb      	ldrb	r3, [r7, #14]
 8009f64:	2b01      	cmp	r3, #1
 8009f66:	d105      	bne.n	8009f74 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	220d      	movs	r2, #13
 8009f70:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009f72:	e043      	b.n	8009ffc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009f74:	7bbb      	ldrb	r3, [r7, #14]
 8009f76:	2b02      	cmp	r3, #2
 8009f78:	d103      	bne.n	8009f82 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2209      	movs	r2, #9
 8009f7e:	761a      	strb	r2, [r3, #24]
      break;
 8009f80:	e03c      	b.n	8009ffc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009f82:	7bbb      	ldrb	r3, [r7, #14]
 8009f84:	2b04      	cmp	r3, #4
 8009f86:	d139      	bne.n	8009ffc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	220b      	movs	r2, #11
 8009f8c:	761a      	strb	r2, [r3, #24]
      break;
 8009f8e:	e035      	b.n	8009ffc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	7e5b      	ldrb	r3, [r3, #25]
 8009f94:	3301      	adds	r3, #1
 8009f96:	b2da      	uxtb	r2, r3
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	765a      	strb	r2, [r3, #25]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	7e5b      	ldrb	r3, [r3, #25]
 8009fa0:	2b02      	cmp	r3, #2
 8009fa2:	d806      	bhi.n	8009fb2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2201      	movs	r2, #1
 8009fae:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009fb0:	e025      	b.n	8009ffe <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009fb8:	2106      	movs	r1, #6
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	795b      	ldrb	r3, [r3, #5]
 8009fc8:	4619      	mov	r1, r3
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f000 f90c 	bl	800a1e8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	791b      	ldrb	r3, [r3, #4]
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f000 f906 	bl	800a1e8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009fe2:	2302      	movs	r3, #2
 8009fe4:	73fb      	strb	r3, [r7, #15]
      break;
 8009fe6:	e00a      	b.n	8009ffe <USBH_HandleControl+0x2de>

    default:
      break;
 8009fe8:	bf00      	nop
 8009fea:	e008      	b.n	8009ffe <USBH_HandleControl+0x2de>
      break;
 8009fec:	bf00      	nop
 8009fee:	e006      	b.n	8009ffe <USBH_HandleControl+0x2de>
      break;
 8009ff0:	bf00      	nop
 8009ff2:	e004      	b.n	8009ffe <USBH_HandleControl+0x2de>
      break;
 8009ff4:	bf00      	nop
 8009ff6:	e002      	b.n	8009ffe <USBH_HandleControl+0x2de>
      break;
 8009ff8:	bf00      	nop
 8009ffa:	e000      	b.n	8009ffe <USBH_HandleControl+0x2de>
      break;
 8009ffc:	bf00      	nop
  }

  return status;
 8009ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 800a000:	4618      	mov	r0, r3
 800a002:	3710      	adds	r7, #16
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}

0800a008 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b088      	sub	sp, #32
 800a00c:	af04      	add	r7, sp, #16
 800a00e:	60f8      	str	r0, [r7, #12]
 800a010:	60b9      	str	r1, [r7, #8]
 800a012:	4613      	mov	r3, r2
 800a014:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a016:	79f9      	ldrb	r1, [r7, #7]
 800a018:	2300      	movs	r3, #0
 800a01a:	9303      	str	r3, [sp, #12]
 800a01c:	2308      	movs	r3, #8
 800a01e:	9302      	str	r3, [sp, #8]
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	9301      	str	r3, [sp, #4]
 800a024:	2300      	movs	r3, #0
 800a026:	9300      	str	r3, [sp, #0]
 800a028:	2300      	movs	r3, #0
 800a02a:	2200      	movs	r2, #0
 800a02c:	68f8      	ldr	r0, [r7, #12]
 800a02e:	f000 fb46 	bl	800a6be <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a032:	2300      	movs	r3, #0
}
 800a034:	4618      	mov	r0, r3
 800a036:	3710      	adds	r7, #16
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}

0800a03c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b088      	sub	sp, #32
 800a040:	af04      	add	r7, sp, #16
 800a042:	60f8      	str	r0, [r7, #12]
 800a044:	60b9      	str	r1, [r7, #8]
 800a046:	4611      	mov	r1, r2
 800a048:	461a      	mov	r2, r3
 800a04a:	460b      	mov	r3, r1
 800a04c:	80fb      	strh	r3, [r7, #6]
 800a04e:	4613      	mov	r3, r2
 800a050:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d001      	beq.n	800a060 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a05c:	2300      	movs	r3, #0
 800a05e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a060:	7979      	ldrb	r1, [r7, #5]
 800a062:	7e3b      	ldrb	r3, [r7, #24]
 800a064:	9303      	str	r3, [sp, #12]
 800a066:	88fb      	ldrh	r3, [r7, #6]
 800a068:	9302      	str	r3, [sp, #8]
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	9301      	str	r3, [sp, #4]
 800a06e:	2301      	movs	r3, #1
 800a070:	9300      	str	r3, [sp, #0]
 800a072:	2300      	movs	r3, #0
 800a074:	2200      	movs	r2, #0
 800a076:	68f8      	ldr	r0, [r7, #12]
 800a078:	f000 fb21 	bl	800a6be <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a07c:	2300      	movs	r3, #0
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3710      	adds	r7, #16
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}

0800a086 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a086:	b580      	push	{r7, lr}
 800a088:	b088      	sub	sp, #32
 800a08a:	af04      	add	r7, sp, #16
 800a08c:	60f8      	str	r0, [r7, #12]
 800a08e:	60b9      	str	r1, [r7, #8]
 800a090:	4611      	mov	r1, r2
 800a092:	461a      	mov	r2, r3
 800a094:	460b      	mov	r3, r1
 800a096:	80fb      	strh	r3, [r7, #6]
 800a098:	4613      	mov	r3, r2
 800a09a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a09c:	7979      	ldrb	r1, [r7, #5]
 800a09e:	2300      	movs	r3, #0
 800a0a0:	9303      	str	r3, [sp, #12]
 800a0a2:	88fb      	ldrh	r3, [r7, #6]
 800a0a4:	9302      	str	r3, [sp, #8]
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	9301      	str	r3, [sp, #4]
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	9300      	str	r3, [sp, #0]
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	68f8      	ldr	r0, [r7, #12]
 800a0b4:	f000 fb03 	bl	800a6be <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a0b8:	2300      	movs	r3, #0

}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3710      	adds	r7, #16
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}

0800a0c2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b088      	sub	sp, #32
 800a0c6:	af04      	add	r7, sp, #16
 800a0c8:	60f8      	str	r0, [r7, #12]
 800a0ca:	60b9      	str	r1, [r7, #8]
 800a0cc:	4611      	mov	r1, r2
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	460b      	mov	r3, r1
 800a0d2:	80fb      	strh	r3, [r7, #6]
 800a0d4:	4613      	mov	r3, r2
 800a0d6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d001      	beq.n	800a0e6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a0e6:	7979      	ldrb	r1, [r7, #5]
 800a0e8:	7e3b      	ldrb	r3, [r7, #24]
 800a0ea:	9303      	str	r3, [sp, #12]
 800a0ec:	88fb      	ldrh	r3, [r7, #6]
 800a0ee:	9302      	str	r3, [sp, #8]
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	9301      	str	r3, [sp, #4]
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	9300      	str	r3, [sp, #0]
 800a0f8:	2302      	movs	r3, #2
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	68f8      	ldr	r0, [r7, #12]
 800a0fe:	f000 fade 	bl	800a6be <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a102:	2300      	movs	r3, #0
}
 800a104:	4618      	mov	r0, r3
 800a106:	3710      	adds	r7, #16
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}

0800a10c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b088      	sub	sp, #32
 800a110:	af04      	add	r7, sp, #16
 800a112:	60f8      	str	r0, [r7, #12]
 800a114:	60b9      	str	r1, [r7, #8]
 800a116:	4611      	mov	r1, r2
 800a118:	461a      	mov	r2, r3
 800a11a:	460b      	mov	r3, r1
 800a11c:	80fb      	strh	r3, [r7, #6]
 800a11e:	4613      	mov	r3, r2
 800a120:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a122:	7979      	ldrb	r1, [r7, #5]
 800a124:	2300      	movs	r3, #0
 800a126:	9303      	str	r3, [sp, #12]
 800a128:	88fb      	ldrh	r3, [r7, #6]
 800a12a:	9302      	str	r3, [sp, #8]
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	9301      	str	r3, [sp, #4]
 800a130:	2301      	movs	r3, #1
 800a132:	9300      	str	r3, [sp, #0]
 800a134:	2302      	movs	r3, #2
 800a136:	2201      	movs	r2, #1
 800a138:	68f8      	ldr	r0, [r7, #12]
 800a13a:	f000 fac0 	bl	800a6be <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a13e:	2300      	movs	r3, #0
}
 800a140:	4618      	mov	r0, r3
 800a142:	3710      	adds	r7, #16
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b086      	sub	sp, #24
 800a14c:	af04      	add	r7, sp, #16
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	4608      	mov	r0, r1
 800a152:	4611      	mov	r1, r2
 800a154:	461a      	mov	r2, r3
 800a156:	4603      	mov	r3, r0
 800a158:	70fb      	strb	r3, [r7, #3]
 800a15a:	460b      	mov	r3, r1
 800a15c:	70bb      	strb	r3, [r7, #2]
 800a15e:	4613      	mov	r3, r2
 800a160:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a162:	7878      	ldrb	r0, [r7, #1]
 800a164:	78ba      	ldrb	r2, [r7, #2]
 800a166:	78f9      	ldrb	r1, [r7, #3]
 800a168:	8b3b      	ldrh	r3, [r7, #24]
 800a16a:	9302      	str	r3, [sp, #8]
 800a16c:	7d3b      	ldrb	r3, [r7, #20]
 800a16e:	9301      	str	r3, [sp, #4]
 800a170:	7c3b      	ldrb	r3, [r7, #16]
 800a172:	9300      	str	r3, [sp, #0]
 800a174:	4603      	mov	r3, r0
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 fa53 	bl	800a622 <USBH_LL_OpenPipe>

  return USBH_OK;
 800a17c:	2300      	movs	r3, #0
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3708      	adds	r7, #8
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}

0800a186 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a186:	b580      	push	{r7, lr}
 800a188:	b082      	sub	sp, #8
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	6078      	str	r0, [r7, #4]
 800a18e:	460b      	mov	r3, r1
 800a190:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a192:	78fb      	ldrb	r3, [r7, #3]
 800a194:	4619      	mov	r1, r3
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f000 fa72 	bl	800a680 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a19c:	2300      	movs	r3, #0
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3708      	adds	r7, #8
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}

0800a1a6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a1a6:	b580      	push	{r7, lr}
 800a1a8:	b084      	sub	sp, #16
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	6078      	str	r0, [r7, #4]
 800a1ae:	460b      	mov	r3, r1
 800a1b0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f000 f836 	bl	800a224 <USBH_GetFreePipe>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a1bc:	89fb      	ldrh	r3, [r7, #14]
 800a1be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d00a      	beq.n	800a1dc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a1c6:	78fa      	ldrb	r2, [r7, #3]
 800a1c8:	89fb      	ldrh	r3, [r7, #14]
 800a1ca:	f003 030f 	and.w	r3, r3, #15
 800a1ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a1d2:	6879      	ldr	r1, [r7, #4]
 800a1d4:	33e0      	adds	r3, #224	@ 0xe0
 800a1d6:	009b      	lsls	r3, r3, #2
 800a1d8:	440b      	add	r3, r1
 800a1da:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a1dc:	89fb      	ldrh	r3, [r7, #14]
 800a1de:	b2db      	uxtb	r3, r3
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3710      	adds	r7, #16
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b083      	sub	sp, #12
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	460b      	mov	r3, r1
 800a1f2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a1f4:	78fb      	ldrb	r3, [r7, #3]
 800a1f6:	2b0f      	cmp	r3, #15
 800a1f8:	d80d      	bhi.n	800a216 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a1fa:	78fb      	ldrb	r3, [r7, #3]
 800a1fc:	687a      	ldr	r2, [r7, #4]
 800a1fe:	33e0      	adds	r3, #224	@ 0xe0
 800a200:	009b      	lsls	r3, r3, #2
 800a202:	4413      	add	r3, r2
 800a204:	685a      	ldr	r2, [r3, #4]
 800a206:	78fb      	ldrb	r3, [r7, #3]
 800a208:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a20c:	6879      	ldr	r1, [r7, #4]
 800a20e:	33e0      	adds	r3, #224	@ 0xe0
 800a210:	009b      	lsls	r3, r3, #2
 800a212:	440b      	add	r3, r1
 800a214:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a216:	2300      	movs	r3, #0
}
 800a218:	4618      	mov	r0, r3
 800a21a:	370c      	adds	r7, #12
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr

0800a224 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a224:	b480      	push	{r7}
 800a226:	b085      	sub	sp, #20
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a22c:	2300      	movs	r3, #0
 800a22e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a230:	2300      	movs	r3, #0
 800a232:	73fb      	strb	r3, [r7, #15]
 800a234:	e00f      	b.n	800a256 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a236:	7bfb      	ldrb	r3, [r7, #15]
 800a238:	687a      	ldr	r2, [r7, #4]
 800a23a:	33e0      	adds	r3, #224	@ 0xe0
 800a23c:	009b      	lsls	r3, r3, #2
 800a23e:	4413      	add	r3, r2
 800a240:	685b      	ldr	r3, [r3, #4]
 800a242:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a246:	2b00      	cmp	r3, #0
 800a248:	d102      	bne.n	800a250 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a24a:	7bfb      	ldrb	r3, [r7, #15]
 800a24c:	b29b      	uxth	r3, r3
 800a24e:	e007      	b.n	800a260 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a250:	7bfb      	ldrb	r3, [r7, #15]
 800a252:	3301      	adds	r3, #1
 800a254:	73fb      	strb	r3, [r7, #15]
 800a256:	7bfb      	ldrb	r3, [r7, #15]
 800a258:	2b0f      	cmp	r3, #15
 800a25a:	d9ec      	bls.n	800a236 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a25c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800a260:	4618      	mov	r0, r3
 800a262:	3714      	adds	r7, #20
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr

0800a26c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a270:	2201      	movs	r2, #1
 800a272:	490e      	ldr	r1, [pc, #56]	@ (800a2ac <MX_USB_HOST_Init+0x40>)
 800a274:	480e      	ldr	r0, [pc, #56]	@ (800a2b0 <MX_USB_HOST_Init+0x44>)
 800a276:	f7fe fb15 	bl	80088a4 <USBH_Init>
 800a27a:	4603      	mov	r3, r0
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d001      	beq.n	800a284 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a280:	f7f7 fa96 	bl	80017b0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a284:	490b      	ldr	r1, [pc, #44]	@ (800a2b4 <MX_USB_HOST_Init+0x48>)
 800a286:	480a      	ldr	r0, [pc, #40]	@ (800a2b0 <MX_USB_HOST_Init+0x44>)
 800a288:	f7fe fbb9 	bl	80089fe <USBH_RegisterClass>
 800a28c:	4603      	mov	r3, r0
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d001      	beq.n	800a296 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a292:	f7f7 fa8d 	bl	80017b0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a296:	4806      	ldr	r0, [pc, #24]	@ (800a2b0 <MX_USB_HOST_Init+0x44>)
 800a298:	f7fe fc3d 	bl	8008b16 <USBH_Start>
 800a29c:	4603      	mov	r3, r0
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d001      	beq.n	800a2a6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a2a2:	f7f7 fa85 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a2a6:	bf00      	nop
 800a2a8:	bd80      	pop	{r7, pc}
 800a2aa:	bf00      	nop
 800a2ac:	0800a2cd 	.word	0x0800a2cd
 800a2b0:	200019f0 	.word	0x200019f0
 800a2b4:	2000000c 	.word	0x2000000c

0800a2b8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a2bc:	4802      	ldr	r0, [pc, #8]	@ (800a2c8 <MX_USB_HOST_Process+0x10>)
 800a2be:	f7fe fc3b 	bl	8008b38 <USBH_Process>
}
 800a2c2:	bf00      	nop
 800a2c4:	bd80      	pop	{r7, pc}
 800a2c6:	bf00      	nop
 800a2c8:	200019f0 	.word	0x200019f0

0800a2cc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b083      	sub	sp, #12
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	460b      	mov	r3, r1
 800a2d6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a2d8:	78fb      	ldrb	r3, [r7, #3]
 800a2da:	3b01      	subs	r3, #1
 800a2dc:	2b04      	cmp	r3, #4
 800a2de:	d819      	bhi.n	800a314 <USBH_UserProcess+0x48>
 800a2e0:	a201      	add	r2, pc, #4	@ (adr r2, 800a2e8 <USBH_UserProcess+0x1c>)
 800a2e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2e6:	bf00      	nop
 800a2e8:	0800a315 	.word	0x0800a315
 800a2ec:	0800a305 	.word	0x0800a305
 800a2f0:	0800a315 	.word	0x0800a315
 800a2f4:	0800a30d 	.word	0x0800a30d
 800a2f8:	0800a2fd 	.word	0x0800a2fd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a2fc:	4b09      	ldr	r3, [pc, #36]	@ (800a324 <USBH_UserProcess+0x58>)
 800a2fe:	2203      	movs	r2, #3
 800a300:	701a      	strb	r2, [r3, #0]
  break;
 800a302:	e008      	b.n	800a316 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a304:	4b07      	ldr	r3, [pc, #28]	@ (800a324 <USBH_UserProcess+0x58>)
 800a306:	2202      	movs	r2, #2
 800a308:	701a      	strb	r2, [r3, #0]
  break;
 800a30a:	e004      	b.n	800a316 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a30c:	4b05      	ldr	r3, [pc, #20]	@ (800a324 <USBH_UserProcess+0x58>)
 800a30e:	2201      	movs	r2, #1
 800a310:	701a      	strb	r2, [r3, #0]
  break;
 800a312:	e000      	b.n	800a316 <USBH_UserProcess+0x4a>

  default:
  break;
 800a314:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a316:	bf00      	nop
 800a318:	370c      	adds	r7, #12
 800a31a:	46bd      	mov	sp, r7
 800a31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a320:	4770      	bx	lr
 800a322:	bf00      	nop
 800a324:	20001dc8 	.word	0x20001dc8

0800a328 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b08a      	sub	sp, #40	@ 0x28
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a330:	f107 0314 	add.w	r3, r7, #20
 800a334:	2200      	movs	r2, #0
 800a336:	601a      	str	r2, [r3, #0]
 800a338:	605a      	str	r2, [r3, #4]
 800a33a:	609a      	str	r2, [r3, #8]
 800a33c:	60da      	str	r2, [r3, #12]
 800a33e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a348:	d147      	bne.n	800a3da <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a34a:	2300      	movs	r3, #0
 800a34c:	613b      	str	r3, [r7, #16]
 800a34e:	4b25      	ldr	r3, [pc, #148]	@ (800a3e4 <HAL_HCD_MspInit+0xbc>)
 800a350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a352:	4a24      	ldr	r2, [pc, #144]	@ (800a3e4 <HAL_HCD_MspInit+0xbc>)
 800a354:	f043 0301 	orr.w	r3, r3, #1
 800a358:	6313      	str	r3, [r2, #48]	@ 0x30
 800a35a:	4b22      	ldr	r3, [pc, #136]	@ (800a3e4 <HAL_HCD_MspInit+0xbc>)
 800a35c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a35e:	f003 0301 	and.w	r3, r3, #1
 800a362:	613b      	str	r3, [r7, #16]
 800a364:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a366:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a36a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a36c:	2300      	movs	r3, #0
 800a36e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a370:	2300      	movs	r3, #0
 800a372:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a374:	f107 0314 	add.w	r3, r7, #20
 800a378:	4619      	mov	r1, r3
 800a37a:	481b      	ldr	r0, [pc, #108]	@ (800a3e8 <HAL_HCD_MspInit+0xc0>)
 800a37c:	f7f7 fe2e 	bl	8001fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a380:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800a384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a386:	2302      	movs	r3, #2
 800a388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a38a:	2300      	movs	r3, #0
 800a38c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a38e:	2300      	movs	r3, #0
 800a390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a392:	230a      	movs	r3, #10
 800a394:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a396:	f107 0314 	add.w	r3, r7, #20
 800a39a:	4619      	mov	r1, r3
 800a39c:	4812      	ldr	r0, [pc, #72]	@ (800a3e8 <HAL_HCD_MspInit+0xc0>)
 800a39e:	f7f7 fe1d 	bl	8001fdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a3a2:	4b10      	ldr	r3, [pc, #64]	@ (800a3e4 <HAL_HCD_MspInit+0xbc>)
 800a3a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3a6:	4a0f      	ldr	r2, [pc, #60]	@ (800a3e4 <HAL_HCD_MspInit+0xbc>)
 800a3a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3ac:	6353      	str	r3, [r2, #52]	@ 0x34
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	60fb      	str	r3, [r7, #12]
 800a3b2:	4b0c      	ldr	r3, [pc, #48]	@ (800a3e4 <HAL_HCD_MspInit+0xbc>)
 800a3b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3b6:	4a0b      	ldr	r2, [pc, #44]	@ (800a3e4 <HAL_HCD_MspInit+0xbc>)
 800a3b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a3bc:	6453      	str	r3, [r2, #68]	@ 0x44
 800a3be:	4b09      	ldr	r3, [pc, #36]	@ (800a3e4 <HAL_HCD_MspInit+0xbc>)
 800a3c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a3c6:	60fb      	str	r3, [r7, #12]
 800a3c8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	2100      	movs	r1, #0
 800a3ce:	2043      	movs	r0, #67	@ 0x43
 800a3d0:	f7f7 fdcd 	bl	8001f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a3d4:	2043      	movs	r0, #67	@ 0x43
 800a3d6:	f7f7 fde6 	bl	8001fa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a3da:	bf00      	nop
 800a3dc:	3728      	adds	r7, #40	@ 0x28
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
 800a3e2:	bf00      	nop
 800a3e4:	40023800 	.word	0x40023800
 800a3e8:	40020000 	.word	0x40020000

0800a3ec <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b082      	sub	sp, #8
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f7fe ff73 	bl	80092e6 <USBH_LL_IncTimer>
}
 800a400:	bf00      	nop
 800a402:	3708      	adds	r7, #8
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b082      	sub	sp, #8
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a416:	4618      	mov	r0, r3
 800a418:	f7fe ffab 	bl	8009372 <USBH_LL_Connect>
}
 800a41c:	bf00      	nop
 800a41e:	3708      	adds	r7, #8
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}

0800a424 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b082      	sub	sp, #8
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a432:	4618      	mov	r0, r3
 800a434:	f7fe ffb4 	bl	80093a0 <USBH_LL_Disconnect>
}
 800a438:	bf00      	nop
 800a43a:	3708      	adds	r7, #8
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a440:	b480      	push	{r7}
 800a442:	b083      	sub	sp, #12
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	460b      	mov	r3, r1
 800a44a:	70fb      	strb	r3, [r7, #3]
 800a44c:	4613      	mov	r3, r2
 800a44e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a450:	bf00      	nop
 800a452:	370c      	adds	r7, #12
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr

0800a45c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b082      	sub	sp, #8
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a46a:	4618      	mov	r0, r3
 800a46c:	f7fe ff65 	bl	800933a <USBH_LL_PortEnabled>
}
 800a470:	bf00      	nop
 800a472:	3708      	adds	r7, #8
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}

0800a478 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b082      	sub	sp, #8
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a486:	4618      	mov	r0, r3
 800a488:	f7fe ff65 	bl	8009356 <USBH_LL_PortDisabled>
}
 800a48c:	bf00      	nop
 800a48e:	3708      	adds	r7, #8
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}

0800a494 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b082      	sub	sp, #8
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a4a2:	2b01      	cmp	r3, #1
 800a4a4:	d12a      	bne.n	800a4fc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a4a6:	4a18      	ldr	r2, [pc, #96]	@ (800a508 <USBH_LL_Init+0x74>)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	4a15      	ldr	r2, [pc, #84]	@ (800a508 <USBH_LL_Init+0x74>)
 800a4b2:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a4b6:	4b14      	ldr	r3, [pc, #80]	@ (800a508 <USBH_LL_Init+0x74>)
 800a4b8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a4bc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a4be:	4b12      	ldr	r3, [pc, #72]	@ (800a508 <USBH_LL_Init+0x74>)
 800a4c0:	2208      	movs	r2, #8
 800a4c2:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a4c4:	4b10      	ldr	r3, [pc, #64]	@ (800a508 <USBH_LL_Init+0x74>)
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a4ca:	4b0f      	ldr	r3, [pc, #60]	@ (800a508 <USBH_LL_Init+0x74>)
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a4d0:	4b0d      	ldr	r3, [pc, #52]	@ (800a508 <USBH_LL_Init+0x74>)
 800a4d2:	2202      	movs	r2, #2
 800a4d4:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a4d6:	4b0c      	ldr	r3, [pc, #48]	@ (800a508 <USBH_LL_Init+0x74>)
 800a4d8:	2200      	movs	r2, #0
 800a4da:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a4dc:	480a      	ldr	r0, [pc, #40]	@ (800a508 <USBH_LL_Init+0x74>)
 800a4de:	f7f7 ff32 	bl	8002346 <HAL_HCD_Init>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d001      	beq.n	800a4ec <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a4e8:	f7f7 f962 	bl	80017b0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a4ec:	4806      	ldr	r0, [pc, #24]	@ (800a508 <USBH_LL_Init+0x74>)
 800a4ee:	f7f8 fb93 	bl	8002c18 <HAL_HCD_GetCurrentFrame>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	4619      	mov	r1, r3
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f7fe fee6 	bl	80092c8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a4fc:	2300      	movs	r3, #0
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3708      	adds	r7, #8
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}
 800a506:	bf00      	nop
 800a508:	20001dcc 	.word	0x20001dcc

0800a50c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b084      	sub	sp, #16
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a514:	2300      	movs	r3, #0
 800a516:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a518:	2300      	movs	r3, #0
 800a51a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a522:	4618      	mov	r0, r3
 800a524:	f7f8 fb00 	bl	8002b28 <HAL_HCD_Start>
 800a528:	4603      	mov	r3, r0
 800a52a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a52c:	7bfb      	ldrb	r3, [r7, #15]
 800a52e:	4618      	mov	r0, r3
 800a530:	f000 f95e 	bl	800a7f0 <USBH_Get_USB_Status>
 800a534:	4603      	mov	r3, r0
 800a536:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a538:	7bbb      	ldrb	r3, [r7, #14]
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3710      	adds	r7, #16
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}

0800a542 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a542:	b580      	push	{r7, lr}
 800a544:	b084      	sub	sp, #16
 800a546:	af00      	add	r7, sp, #0
 800a548:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a54a:	2300      	movs	r3, #0
 800a54c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a54e:	2300      	movs	r3, #0
 800a550:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a558:	4618      	mov	r0, r3
 800a55a:	f7f8 fb08 	bl	8002b6e <HAL_HCD_Stop>
 800a55e:	4603      	mov	r3, r0
 800a560:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a562:	7bfb      	ldrb	r3, [r7, #15]
 800a564:	4618      	mov	r0, r3
 800a566:	f000 f943 	bl	800a7f0 <USBH_Get_USB_Status>
 800a56a:	4603      	mov	r3, r0
 800a56c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a56e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a570:	4618      	mov	r0, r3
 800a572:	3710      	adds	r7, #16
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b084      	sub	sp, #16
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a580:	2301      	movs	r3, #1
 800a582:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a58a:	4618      	mov	r0, r3
 800a58c:	f7f8 fb52 	bl	8002c34 <HAL_HCD_GetCurrentSpeed>
 800a590:	4603      	mov	r3, r0
 800a592:	2b02      	cmp	r3, #2
 800a594:	d00c      	beq.n	800a5b0 <USBH_LL_GetSpeed+0x38>
 800a596:	2b02      	cmp	r3, #2
 800a598:	d80d      	bhi.n	800a5b6 <USBH_LL_GetSpeed+0x3e>
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d002      	beq.n	800a5a4 <USBH_LL_GetSpeed+0x2c>
 800a59e:	2b01      	cmp	r3, #1
 800a5a0:	d003      	beq.n	800a5aa <USBH_LL_GetSpeed+0x32>
 800a5a2:	e008      	b.n	800a5b6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	73fb      	strb	r3, [r7, #15]
    break;
 800a5a8:	e008      	b.n	800a5bc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	73fb      	strb	r3, [r7, #15]
    break;
 800a5ae:	e005      	b.n	800a5bc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a5b0:	2302      	movs	r3, #2
 800a5b2:	73fb      	strb	r3, [r7, #15]
    break;
 800a5b4:	e002      	b.n	800a5bc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	73fb      	strb	r3, [r7, #15]
    break;
 800a5ba:	bf00      	nop
  }
  return  speed;
 800a5bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3710      	adds	r7, #16
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}

0800a5c6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a5c6:	b580      	push	{r7, lr}
 800a5c8:	b084      	sub	sp, #16
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f7f8 fae3 	bl	8002ba8 <HAL_HCD_ResetPort>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a5e6:	7bfb      	ldrb	r3, [r7, #15]
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f000 f901 	bl	800a7f0 <USBH_Get_USB_Status>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3710      	adds	r7, #16
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}

0800a5fc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b082      	sub	sp, #8
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
 800a604:	460b      	mov	r3, r1
 800a606:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a60e:	78fa      	ldrb	r2, [r7, #3]
 800a610:	4611      	mov	r1, r2
 800a612:	4618      	mov	r0, r3
 800a614:	f7f8 faeb 	bl	8002bee <HAL_HCD_HC_GetXferCount>
 800a618:	4603      	mov	r3, r0
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3708      	adds	r7, #8
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}

0800a622 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a622:	b590      	push	{r4, r7, lr}
 800a624:	b089      	sub	sp, #36	@ 0x24
 800a626:	af04      	add	r7, sp, #16
 800a628:	6078      	str	r0, [r7, #4]
 800a62a:	4608      	mov	r0, r1
 800a62c:	4611      	mov	r1, r2
 800a62e:	461a      	mov	r2, r3
 800a630:	4603      	mov	r3, r0
 800a632:	70fb      	strb	r3, [r7, #3]
 800a634:	460b      	mov	r3, r1
 800a636:	70bb      	strb	r3, [r7, #2]
 800a638:	4613      	mov	r3, r2
 800a63a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a63c:	2300      	movs	r3, #0
 800a63e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a640:	2300      	movs	r3, #0
 800a642:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a64a:	787c      	ldrb	r4, [r7, #1]
 800a64c:	78ba      	ldrb	r2, [r7, #2]
 800a64e:	78f9      	ldrb	r1, [r7, #3]
 800a650:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a652:	9302      	str	r3, [sp, #8]
 800a654:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a658:	9301      	str	r3, [sp, #4]
 800a65a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a65e:	9300      	str	r3, [sp, #0]
 800a660:	4623      	mov	r3, r4
 800a662:	f7f7 fed7 	bl	8002414 <HAL_HCD_HC_Init>
 800a666:	4603      	mov	r3, r0
 800a668:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a66a:	7bfb      	ldrb	r3, [r7, #15]
 800a66c:	4618      	mov	r0, r3
 800a66e:	f000 f8bf 	bl	800a7f0 <USBH_Get_USB_Status>
 800a672:	4603      	mov	r3, r0
 800a674:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a676:	7bbb      	ldrb	r3, [r7, #14]
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3714      	adds	r7, #20
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd90      	pop	{r4, r7, pc}

0800a680 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b084      	sub	sp, #16
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
 800a688:	460b      	mov	r3, r1
 800a68a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a68c:	2300      	movs	r3, #0
 800a68e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a690:	2300      	movs	r3, #0
 800a692:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a69a:	78fa      	ldrb	r2, [r7, #3]
 800a69c:	4611      	mov	r1, r2
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f7f7 ff70 	bl	8002584 <HAL_HCD_HC_Halt>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a6a8:	7bfb      	ldrb	r3, [r7, #15]
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f000 f8a0 	bl	800a7f0 <USBH_Get_USB_Status>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3710      	adds	r7, #16
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}

0800a6be <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a6be:	b590      	push	{r4, r7, lr}
 800a6c0:	b089      	sub	sp, #36	@ 0x24
 800a6c2:	af04      	add	r7, sp, #16
 800a6c4:	6078      	str	r0, [r7, #4]
 800a6c6:	4608      	mov	r0, r1
 800a6c8:	4611      	mov	r1, r2
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	70fb      	strb	r3, [r7, #3]
 800a6d0:	460b      	mov	r3, r1
 800a6d2:	70bb      	strb	r3, [r7, #2]
 800a6d4:	4613      	mov	r3, r2
 800a6d6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a6e6:	787c      	ldrb	r4, [r7, #1]
 800a6e8:	78ba      	ldrb	r2, [r7, #2]
 800a6ea:	78f9      	ldrb	r1, [r7, #3]
 800a6ec:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a6f0:	9303      	str	r3, [sp, #12]
 800a6f2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a6f4:	9302      	str	r3, [sp, #8]
 800a6f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6f8:	9301      	str	r3, [sp, #4]
 800a6fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a6fe:	9300      	str	r3, [sp, #0]
 800a700:	4623      	mov	r3, r4
 800a702:	f7f7 ff63 	bl	80025cc <HAL_HCD_HC_SubmitRequest>
 800a706:	4603      	mov	r3, r0
 800a708:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a70a:	7bfb      	ldrb	r3, [r7, #15]
 800a70c:	4618      	mov	r0, r3
 800a70e:	f000 f86f 	bl	800a7f0 <USBH_Get_USB_Status>
 800a712:	4603      	mov	r3, r0
 800a714:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a716:	7bbb      	ldrb	r3, [r7, #14]
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3714      	adds	r7, #20
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd90      	pop	{r4, r7, pc}

0800a720 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b082      	sub	sp, #8
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	460b      	mov	r3, r1
 800a72a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a732:	78fa      	ldrb	r2, [r7, #3]
 800a734:	4611      	mov	r1, r2
 800a736:	4618      	mov	r0, r3
 800a738:	f7f8 fa44 	bl	8002bc4 <HAL_HCD_HC_GetURBState>
 800a73c:	4603      	mov	r3, r0
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3708      	adds	r7, #8
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}

0800a746 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a746:	b580      	push	{r7, lr}
 800a748:	b082      	sub	sp, #8
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	6078      	str	r0, [r7, #4]
 800a74e:	460b      	mov	r3, r1
 800a750:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a758:	2b01      	cmp	r3, #1
 800a75a:	d103      	bne.n	800a764 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a75c:	78fb      	ldrb	r3, [r7, #3]
 800a75e:	4618      	mov	r0, r3
 800a760:	f000 f872 	bl	800a848 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a764:	20c8      	movs	r0, #200	@ 0xc8
 800a766:	f7f7 fb03 	bl	8001d70 <HAL_Delay>
  return USBH_OK;
 800a76a:	2300      	movs	r3, #0
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3708      	adds	r7, #8
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}

0800a774 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a774:	b480      	push	{r7}
 800a776:	b085      	sub	sp, #20
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	460b      	mov	r3, r1
 800a77e:	70fb      	strb	r3, [r7, #3]
 800a780:	4613      	mov	r3, r2
 800a782:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a78a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a78c:	78fa      	ldrb	r2, [r7, #3]
 800a78e:	68f9      	ldr	r1, [r7, #12]
 800a790:	4613      	mov	r3, r2
 800a792:	011b      	lsls	r3, r3, #4
 800a794:	1a9b      	subs	r3, r3, r2
 800a796:	009b      	lsls	r3, r3, #2
 800a798:	440b      	add	r3, r1
 800a79a:	3317      	adds	r3, #23
 800a79c:	781b      	ldrb	r3, [r3, #0]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d00a      	beq.n	800a7b8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a7a2:	78fa      	ldrb	r2, [r7, #3]
 800a7a4:	68f9      	ldr	r1, [r7, #12]
 800a7a6:	4613      	mov	r3, r2
 800a7a8:	011b      	lsls	r3, r3, #4
 800a7aa:	1a9b      	subs	r3, r3, r2
 800a7ac:	009b      	lsls	r3, r3, #2
 800a7ae:	440b      	add	r3, r1
 800a7b0:	333c      	adds	r3, #60	@ 0x3c
 800a7b2:	78ba      	ldrb	r2, [r7, #2]
 800a7b4:	701a      	strb	r2, [r3, #0]
 800a7b6:	e009      	b.n	800a7cc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a7b8:	78fa      	ldrb	r2, [r7, #3]
 800a7ba:	68f9      	ldr	r1, [r7, #12]
 800a7bc:	4613      	mov	r3, r2
 800a7be:	011b      	lsls	r3, r3, #4
 800a7c0:	1a9b      	subs	r3, r3, r2
 800a7c2:	009b      	lsls	r3, r3, #2
 800a7c4:	440b      	add	r3, r1
 800a7c6:	333d      	adds	r3, #61	@ 0x3d
 800a7c8:	78ba      	ldrb	r2, [r7, #2]
 800a7ca:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a7cc:	2300      	movs	r3, #0
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3714      	adds	r7, #20
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d8:	4770      	bx	lr

0800a7da <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a7da:	b580      	push	{r7, lr}
 800a7dc:	b082      	sub	sp, #8
 800a7de:	af00      	add	r7, sp, #0
 800a7e0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f7f7 fac4 	bl	8001d70 <HAL_Delay>
}
 800a7e8:	bf00      	nop
 800a7ea:	3708      	adds	r7, #8
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b085      	sub	sp, #20
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a7fe:	79fb      	ldrb	r3, [r7, #7]
 800a800:	2b03      	cmp	r3, #3
 800a802:	d817      	bhi.n	800a834 <USBH_Get_USB_Status+0x44>
 800a804:	a201      	add	r2, pc, #4	@ (adr r2, 800a80c <USBH_Get_USB_Status+0x1c>)
 800a806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a80a:	bf00      	nop
 800a80c:	0800a81d 	.word	0x0800a81d
 800a810:	0800a823 	.word	0x0800a823
 800a814:	0800a829 	.word	0x0800a829
 800a818:	0800a82f 	.word	0x0800a82f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a81c:	2300      	movs	r3, #0
 800a81e:	73fb      	strb	r3, [r7, #15]
    break;
 800a820:	e00b      	b.n	800a83a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a822:	2302      	movs	r3, #2
 800a824:	73fb      	strb	r3, [r7, #15]
    break;
 800a826:	e008      	b.n	800a83a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a828:	2301      	movs	r3, #1
 800a82a:	73fb      	strb	r3, [r7, #15]
    break;
 800a82c:	e005      	b.n	800a83a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a82e:	2302      	movs	r3, #2
 800a830:	73fb      	strb	r3, [r7, #15]
    break;
 800a832:	e002      	b.n	800a83a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a834:	2302      	movs	r3, #2
 800a836:	73fb      	strb	r3, [r7, #15]
    break;
 800a838:	bf00      	nop
  }
  return usb_status;
 800a83a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3714      	adds	r7, #20
 800a840:	46bd      	mov	sp, r7
 800a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a846:	4770      	bx	lr

0800a848 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b084      	sub	sp, #16
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	4603      	mov	r3, r0
 800a850:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a852:	79fb      	ldrb	r3, [r7, #7]
 800a854:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a856:	79fb      	ldrb	r3, [r7, #7]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d102      	bne.n	800a862 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a85c:	2300      	movs	r3, #0
 800a85e:	73fb      	strb	r3, [r7, #15]
 800a860:	e001      	b.n	800a866 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a862:	2301      	movs	r3, #1
 800a864:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a866:	7bfb      	ldrb	r3, [r7, #15]
 800a868:	461a      	mov	r2, r3
 800a86a:	2101      	movs	r1, #1
 800a86c:	4803      	ldr	r0, [pc, #12]	@ (800a87c <MX_DriverVbusFS+0x34>)
 800a86e:	f7f7 fd51 	bl	8002314 <HAL_GPIO_WritePin>
}
 800a872:	bf00      	nop
 800a874:	3710      	adds	r7, #16
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}
 800a87a:	bf00      	nop
 800a87c:	40020800 	.word	0x40020800

0800a880 <malloc>:
 800a880:	4b02      	ldr	r3, [pc, #8]	@ (800a88c <malloc+0xc>)
 800a882:	4601      	mov	r1, r0
 800a884:	6818      	ldr	r0, [r3, #0]
 800a886:	f000 b82d 	b.w	800a8e4 <_malloc_r>
 800a88a:	bf00      	nop
 800a88c:	20000038 	.word	0x20000038

0800a890 <free>:
 800a890:	4b02      	ldr	r3, [pc, #8]	@ (800a89c <free+0xc>)
 800a892:	4601      	mov	r1, r0
 800a894:	6818      	ldr	r0, [r3, #0]
 800a896:	f000 baad 	b.w	800adf4 <_free_r>
 800a89a:	bf00      	nop
 800a89c:	20000038 	.word	0x20000038

0800a8a0 <sbrk_aligned>:
 800a8a0:	b570      	push	{r4, r5, r6, lr}
 800a8a2:	4e0f      	ldr	r6, [pc, #60]	@ (800a8e0 <sbrk_aligned+0x40>)
 800a8a4:	460c      	mov	r4, r1
 800a8a6:	6831      	ldr	r1, [r6, #0]
 800a8a8:	4605      	mov	r5, r0
 800a8aa:	b911      	cbnz	r1, 800a8b2 <sbrk_aligned+0x12>
 800a8ac:	f000 fa26 	bl	800acfc <_sbrk_r>
 800a8b0:	6030      	str	r0, [r6, #0]
 800a8b2:	4621      	mov	r1, r4
 800a8b4:	4628      	mov	r0, r5
 800a8b6:	f000 fa21 	bl	800acfc <_sbrk_r>
 800a8ba:	1c43      	adds	r3, r0, #1
 800a8bc:	d103      	bne.n	800a8c6 <sbrk_aligned+0x26>
 800a8be:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a8c2:	4620      	mov	r0, r4
 800a8c4:	bd70      	pop	{r4, r5, r6, pc}
 800a8c6:	1cc4      	adds	r4, r0, #3
 800a8c8:	f024 0403 	bic.w	r4, r4, #3
 800a8cc:	42a0      	cmp	r0, r4
 800a8ce:	d0f8      	beq.n	800a8c2 <sbrk_aligned+0x22>
 800a8d0:	1a21      	subs	r1, r4, r0
 800a8d2:	4628      	mov	r0, r5
 800a8d4:	f000 fa12 	bl	800acfc <_sbrk_r>
 800a8d8:	3001      	adds	r0, #1
 800a8da:	d1f2      	bne.n	800a8c2 <sbrk_aligned+0x22>
 800a8dc:	e7ef      	b.n	800a8be <sbrk_aligned+0x1e>
 800a8de:	bf00      	nop
 800a8e0:	200021ac 	.word	0x200021ac

0800a8e4 <_malloc_r>:
 800a8e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8e8:	1ccd      	adds	r5, r1, #3
 800a8ea:	f025 0503 	bic.w	r5, r5, #3
 800a8ee:	3508      	adds	r5, #8
 800a8f0:	2d0c      	cmp	r5, #12
 800a8f2:	bf38      	it	cc
 800a8f4:	250c      	movcc	r5, #12
 800a8f6:	2d00      	cmp	r5, #0
 800a8f8:	4606      	mov	r6, r0
 800a8fa:	db01      	blt.n	800a900 <_malloc_r+0x1c>
 800a8fc:	42a9      	cmp	r1, r5
 800a8fe:	d904      	bls.n	800a90a <_malloc_r+0x26>
 800a900:	230c      	movs	r3, #12
 800a902:	6033      	str	r3, [r6, #0]
 800a904:	2000      	movs	r0, #0
 800a906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a90a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a9e0 <_malloc_r+0xfc>
 800a90e:	f000 f869 	bl	800a9e4 <__malloc_lock>
 800a912:	f8d8 3000 	ldr.w	r3, [r8]
 800a916:	461c      	mov	r4, r3
 800a918:	bb44      	cbnz	r4, 800a96c <_malloc_r+0x88>
 800a91a:	4629      	mov	r1, r5
 800a91c:	4630      	mov	r0, r6
 800a91e:	f7ff ffbf 	bl	800a8a0 <sbrk_aligned>
 800a922:	1c43      	adds	r3, r0, #1
 800a924:	4604      	mov	r4, r0
 800a926:	d158      	bne.n	800a9da <_malloc_r+0xf6>
 800a928:	f8d8 4000 	ldr.w	r4, [r8]
 800a92c:	4627      	mov	r7, r4
 800a92e:	2f00      	cmp	r7, #0
 800a930:	d143      	bne.n	800a9ba <_malloc_r+0xd6>
 800a932:	2c00      	cmp	r4, #0
 800a934:	d04b      	beq.n	800a9ce <_malloc_r+0xea>
 800a936:	6823      	ldr	r3, [r4, #0]
 800a938:	4639      	mov	r1, r7
 800a93a:	4630      	mov	r0, r6
 800a93c:	eb04 0903 	add.w	r9, r4, r3
 800a940:	f000 f9dc 	bl	800acfc <_sbrk_r>
 800a944:	4581      	cmp	r9, r0
 800a946:	d142      	bne.n	800a9ce <_malloc_r+0xea>
 800a948:	6821      	ldr	r1, [r4, #0]
 800a94a:	1a6d      	subs	r5, r5, r1
 800a94c:	4629      	mov	r1, r5
 800a94e:	4630      	mov	r0, r6
 800a950:	f7ff ffa6 	bl	800a8a0 <sbrk_aligned>
 800a954:	3001      	adds	r0, #1
 800a956:	d03a      	beq.n	800a9ce <_malloc_r+0xea>
 800a958:	6823      	ldr	r3, [r4, #0]
 800a95a:	442b      	add	r3, r5
 800a95c:	6023      	str	r3, [r4, #0]
 800a95e:	f8d8 3000 	ldr.w	r3, [r8]
 800a962:	685a      	ldr	r2, [r3, #4]
 800a964:	bb62      	cbnz	r2, 800a9c0 <_malloc_r+0xdc>
 800a966:	f8c8 7000 	str.w	r7, [r8]
 800a96a:	e00f      	b.n	800a98c <_malloc_r+0xa8>
 800a96c:	6822      	ldr	r2, [r4, #0]
 800a96e:	1b52      	subs	r2, r2, r5
 800a970:	d420      	bmi.n	800a9b4 <_malloc_r+0xd0>
 800a972:	2a0b      	cmp	r2, #11
 800a974:	d917      	bls.n	800a9a6 <_malloc_r+0xc2>
 800a976:	1961      	adds	r1, r4, r5
 800a978:	42a3      	cmp	r3, r4
 800a97a:	6025      	str	r5, [r4, #0]
 800a97c:	bf18      	it	ne
 800a97e:	6059      	strne	r1, [r3, #4]
 800a980:	6863      	ldr	r3, [r4, #4]
 800a982:	bf08      	it	eq
 800a984:	f8c8 1000 	streq.w	r1, [r8]
 800a988:	5162      	str	r2, [r4, r5]
 800a98a:	604b      	str	r3, [r1, #4]
 800a98c:	4630      	mov	r0, r6
 800a98e:	f000 f82f 	bl	800a9f0 <__malloc_unlock>
 800a992:	f104 000b 	add.w	r0, r4, #11
 800a996:	1d23      	adds	r3, r4, #4
 800a998:	f020 0007 	bic.w	r0, r0, #7
 800a99c:	1ac2      	subs	r2, r0, r3
 800a99e:	bf1c      	itt	ne
 800a9a0:	1a1b      	subne	r3, r3, r0
 800a9a2:	50a3      	strne	r3, [r4, r2]
 800a9a4:	e7af      	b.n	800a906 <_malloc_r+0x22>
 800a9a6:	6862      	ldr	r2, [r4, #4]
 800a9a8:	42a3      	cmp	r3, r4
 800a9aa:	bf0c      	ite	eq
 800a9ac:	f8c8 2000 	streq.w	r2, [r8]
 800a9b0:	605a      	strne	r2, [r3, #4]
 800a9b2:	e7eb      	b.n	800a98c <_malloc_r+0xa8>
 800a9b4:	4623      	mov	r3, r4
 800a9b6:	6864      	ldr	r4, [r4, #4]
 800a9b8:	e7ae      	b.n	800a918 <_malloc_r+0x34>
 800a9ba:	463c      	mov	r4, r7
 800a9bc:	687f      	ldr	r7, [r7, #4]
 800a9be:	e7b6      	b.n	800a92e <_malloc_r+0x4a>
 800a9c0:	461a      	mov	r2, r3
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	42a3      	cmp	r3, r4
 800a9c6:	d1fb      	bne.n	800a9c0 <_malloc_r+0xdc>
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	6053      	str	r3, [r2, #4]
 800a9cc:	e7de      	b.n	800a98c <_malloc_r+0xa8>
 800a9ce:	230c      	movs	r3, #12
 800a9d0:	6033      	str	r3, [r6, #0]
 800a9d2:	4630      	mov	r0, r6
 800a9d4:	f000 f80c 	bl	800a9f0 <__malloc_unlock>
 800a9d8:	e794      	b.n	800a904 <_malloc_r+0x20>
 800a9da:	6005      	str	r5, [r0, #0]
 800a9dc:	e7d6      	b.n	800a98c <_malloc_r+0xa8>
 800a9de:	bf00      	nop
 800a9e0:	200021b0 	.word	0x200021b0

0800a9e4 <__malloc_lock>:
 800a9e4:	4801      	ldr	r0, [pc, #4]	@ (800a9ec <__malloc_lock+0x8>)
 800a9e6:	f000 b9d6 	b.w	800ad96 <__retarget_lock_acquire_recursive>
 800a9ea:	bf00      	nop
 800a9ec:	200022f4 	.word	0x200022f4

0800a9f0 <__malloc_unlock>:
 800a9f0:	4801      	ldr	r0, [pc, #4]	@ (800a9f8 <__malloc_unlock+0x8>)
 800a9f2:	f000 b9d1 	b.w	800ad98 <__retarget_lock_release_recursive>
 800a9f6:	bf00      	nop
 800a9f8:	200022f4 	.word	0x200022f4

0800a9fc <rand>:
 800a9fc:	4b16      	ldr	r3, [pc, #88]	@ (800aa58 <rand+0x5c>)
 800a9fe:	b510      	push	{r4, lr}
 800aa00:	681c      	ldr	r4, [r3, #0]
 800aa02:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800aa04:	b9b3      	cbnz	r3, 800aa34 <rand+0x38>
 800aa06:	2018      	movs	r0, #24
 800aa08:	f7ff ff3a 	bl	800a880 <malloc>
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	6320      	str	r0, [r4, #48]	@ 0x30
 800aa10:	b920      	cbnz	r0, 800aa1c <rand+0x20>
 800aa12:	4b12      	ldr	r3, [pc, #72]	@ (800aa5c <rand+0x60>)
 800aa14:	4812      	ldr	r0, [pc, #72]	@ (800aa60 <rand+0x64>)
 800aa16:	2152      	movs	r1, #82	@ 0x52
 800aa18:	f000 f9ce 	bl	800adb8 <__assert_func>
 800aa1c:	4911      	ldr	r1, [pc, #68]	@ (800aa64 <rand+0x68>)
 800aa1e:	4b12      	ldr	r3, [pc, #72]	@ (800aa68 <rand+0x6c>)
 800aa20:	e9c0 1300 	strd	r1, r3, [r0]
 800aa24:	4b11      	ldr	r3, [pc, #68]	@ (800aa6c <rand+0x70>)
 800aa26:	6083      	str	r3, [r0, #8]
 800aa28:	230b      	movs	r3, #11
 800aa2a:	8183      	strh	r3, [r0, #12]
 800aa2c:	2100      	movs	r1, #0
 800aa2e:	2001      	movs	r0, #1
 800aa30:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800aa34:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800aa36:	480e      	ldr	r0, [pc, #56]	@ (800aa70 <rand+0x74>)
 800aa38:	690b      	ldr	r3, [r1, #16]
 800aa3a:	694c      	ldr	r4, [r1, #20]
 800aa3c:	4a0d      	ldr	r2, [pc, #52]	@ (800aa74 <rand+0x78>)
 800aa3e:	4358      	muls	r0, r3
 800aa40:	fb02 0004 	mla	r0, r2, r4, r0
 800aa44:	fba3 3202 	umull	r3, r2, r3, r2
 800aa48:	3301      	adds	r3, #1
 800aa4a:	eb40 0002 	adc.w	r0, r0, r2
 800aa4e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800aa52:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800aa56:	bd10      	pop	{r4, pc}
 800aa58:	20000038 	.word	0x20000038
 800aa5c:	0800c310 	.word	0x0800c310
 800aa60:	0800c327 	.word	0x0800c327
 800aa64:	abcd330e 	.word	0xabcd330e
 800aa68:	e66d1234 	.word	0xe66d1234
 800aa6c:	0005deec 	.word	0x0005deec
 800aa70:	5851f42d 	.word	0x5851f42d
 800aa74:	4c957f2d 	.word	0x4c957f2d

0800aa78 <std>:
 800aa78:	2300      	movs	r3, #0
 800aa7a:	b510      	push	{r4, lr}
 800aa7c:	4604      	mov	r4, r0
 800aa7e:	e9c0 3300 	strd	r3, r3, [r0]
 800aa82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa86:	6083      	str	r3, [r0, #8]
 800aa88:	8181      	strh	r1, [r0, #12]
 800aa8a:	6643      	str	r3, [r0, #100]	@ 0x64
 800aa8c:	81c2      	strh	r2, [r0, #14]
 800aa8e:	6183      	str	r3, [r0, #24]
 800aa90:	4619      	mov	r1, r3
 800aa92:	2208      	movs	r2, #8
 800aa94:	305c      	adds	r0, #92	@ 0x5c
 800aa96:	f000 f8f4 	bl	800ac82 <memset>
 800aa9a:	4b0d      	ldr	r3, [pc, #52]	@ (800aad0 <std+0x58>)
 800aa9c:	6263      	str	r3, [r4, #36]	@ 0x24
 800aa9e:	4b0d      	ldr	r3, [pc, #52]	@ (800aad4 <std+0x5c>)
 800aaa0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800aaa2:	4b0d      	ldr	r3, [pc, #52]	@ (800aad8 <std+0x60>)
 800aaa4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800aaa6:	4b0d      	ldr	r3, [pc, #52]	@ (800aadc <std+0x64>)
 800aaa8:	6323      	str	r3, [r4, #48]	@ 0x30
 800aaaa:	4b0d      	ldr	r3, [pc, #52]	@ (800aae0 <std+0x68>)
 800aaac:	6224      	str	r4, [r4, #32]
 800aaae:	429c      	cmp	r4, r3
 800aab0:	d006      	beq.n	800aac0 <std+0x48>
 800aab2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800aab6:	4294      	cmp	r4, r2
 800aab8:	d002      	beq.n	800aac0 <std+0x48>
 800aaba:	33d0      	adds	r3, #208	@ 0xd0
 800aabc:	429c      	cmp	r4, r3
 800aabe:	d105      	bne.n	800aacc <std+0x54>
 800aac0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800aac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aac8:	f000 b964 	b.w	800ad94 <__retarget_lock_init_recursive>
 800aacc:	bd10      	pop	{r4, pc}
 800aace:	bf00      	nop
 800aad0:	0800abfd 	.word	0x0800abfd
 800aad4:	0800ac1f 	.word	0x0800ac1f
 800aad8:	0800ac57 	.word	0x0800ac57
 800aadc:	0800ac7b 	.word	0x0800ac7b
 800aae0:	200021b4 	.word	0x200021b4

0800aae4 <stdio_exit_handler>:
 800aae4:	4a02      	ldr	r2, [pc, #8]	@ (800aaf0 <stdio_exit_handler+0xc>)
 800aae6:	4903      	ldr	r1, [pc, #12]	@ (800aaf4 <stdio_exit_handler+0x10>)
 800aae8:	4803      	ldr	r0, [pc, #12]	@ (800aaf8 <stdio_exit_handler+0x14>)
 800aaea:	f000 b869 	b.w	800abc0 <_fwalk_sglue>
 800aaee:	bf00      	nop
 800aaf0:	2000002c 	.word	0x2000002c
 800aaf4:	0800af91 	.word	0x0800af91
 800aaf8:	2000003c 	.word	0x2000003c

0800aafc <cleanup_stdio>:
 800aafc:	6841      	ldr	r1, [r0, #4]
 800aafe:	4b0c      	ldr	r3, [pc, #48]	@ (800ab30 <cleanup_stdio+0x34>)
 800ab00:	4299      	cmp	r1, r3
 800ab02:	b510      	push	{r4, lr}
 800ab04:	4604      	mov	r4, r0
 800ab06:	d001      	beq.n	800ab0c <cleanup_stdio+0x10>
 800ab08:	f000 fa42 	bl	800af90 <_fflush_r>
 800ab0c:	68a1      	ldr	r1, [r4, #8]
 800ab0e:	4b09      	ldr	r3, [pc, #36]	@ (800ab34 <cleanup_stdio+0x38>)
 800ab10:	4299      	cmp	r1, r3
 800ab12:	d002      	beq.n	800ab1a <cleanup_stdio+0x1e>
 800ab14:	4620      	mov	r0, r4
 800ab16:	f000 fa3b 	bl	800af90 <_fflush_r>
 800ab1a:	68e1      	ldr	r1, [r4, #12]
 800ab1c:	4b06      	ldr	r3, [pc, #24]	@ (800ab38 <cleanup_stdio+0x3c>)
 800ab1e:	4299      	cmp	r1, r3
 800ab20:	d004      	beq.n	800ab2c <cleanup_stdio+0x30>
 800ab22:	4620      	mov	r0, r4
 800ab24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab28:	f000 ba32 	b.w	800af90 <_fflush_r>
 800ab2c:	bd10      	pop	{r4, pc}
 800ab2e:	bf00      	nop
 800ab30:	200021b4 	.word	0x200021b4
 800ab34:	2000221c 	.word	0x2000221c
 800ab38:	20002284 	.word	0x20002284

0800ab3c <global_stdio_init.part.0>:
 800ab3c:	b510      	push	{r4, lr}
 800ab3e:	4b0b      	ldr	r3, [pc, #44]	@ (800ab6c <global_stdio_init.part.0+0x30>)
 800ab40:	4c0b      	ldr	r4, [pc, #44]	@ (800ab70 <global_stdio_init.part.0+0x34>)
 800ab42:	4a0c      	ldr	r2, [pc, #48]	@ (800ab74 <global_stdio_init.part.0+0x38>)
 800ab44:	601a      	str	r2, [r3, #0]
 800ab46:	4620      	mov	r0, r4
 800ab48:	2200      	movs	r2, #0
 800ab4a:	2104      	movs	r1, #4
 800ab4c:	f7ff ff94 	bl	800aa78 <std>
 800ab50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ab54:	2201      	movs	r2, #1
 800ab56:	2109      	movs	r1, #9
 800ab58:	f7ff ff8e 	bl	800aa78 <std>
 800ab5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ab60:	2202      	movs	r2, #2
 800ab62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab66:	2112      	movs	r1, #18
 800ab68:	f7ff bf86 	b.w	800aa78 <std>
 800ab6c:	200022ec 	.word	0x200022ec
 800ab70:	200021b4 	.word	0x200021b4
 800ab74:	0800aae5 	.word	0x0800aae5

0800ab78 <__sfp_lock_acquire>:
 800ab78:	4801      	ldr	r0, [pc, #4]	@ (800ab80 <__sfp_lock_acquire+0x8>)
 800ab7a:	f000 b90c 	b.w	800ad96 <__retarget_lock_acquire_recursive>
 800ab7e:	bf00      	nop
 800ab80:	200022f5 	.word	0x200022f5

0800ab84 <__sfp_lock_release>:
 800ab84:	4801      	ldr	r0, [pc, #4]	@ (800ab8c <__sfp_lock_release+0x8>)
 800ab86:	f000 b907 	b.w	800ad98 <__retarget_lock_release_recursive>
 800ab8a:	bf00      	nop
 800ab8c:	200022f5 	.word	0x200022f5

0800ab90 <__sinit>:
 800ab90:	b510      	push	{r4, lr}
 800ab92:	4604      	mov	r4, r0
 800ab94:	f7ff fff0 	bl	800ab78 <__sfp_lock_acquire>
 800ab98:	6a23      	ldr	r3, [r4, #32]
 800ab9a:	b11b      	cbz	r3, 800aba4 <__sinit+0x14>
 800ab9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aba0:	f7ff bff0 	b.w	800ab84 <__sfp_lock_release>
 800aba4:	4b04      	ldr	r3, [pc, #16]	@ (800abb8 <__sinit+0x28>)
 800aba6:	6223      	str	r3, [r4, #32]
 800aba8:	4b04      	ldr	r3, [pc, #16]	@ (800abbc <__sinit+0x2c>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d1f5      	bne.n	800ab9c <__sinit+0xc>
 800abb0:	f7ff ffc4 	bl	800ab3c <global_stdio_init.part.0>
 800abb4:	e7f2      	b.n	800ab9c <__sinit+0xc>
 800abb6:	bf00      	nop
 800abb8:	0800aafd 	.word	0x0800aafd
 800abbc:	200022ec 	.word	0x200022ec

0800abc0 <_fwalk_sglue>:
 800abc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abc4:	4607      	mov	r7, r0
 800abc6:	4688      	mov	r8, r1
 800abc8:	4614      	mov	r4, r2
 800abca:	2600      	movs	r6, #0
 800abcc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800abd0:	f1b9 0901 	subs.w	r9, r9, #1
 800abd4:	d505      	bpl.n	800abe2 <_fwalk_sglue+0x22>
 800abd6:	6824      	ldr	r4, [r4, #0]
 800abd8:	2c00      	cmp	r4, #0
 800abda:	d1f7      	bne.n	800abcc <_fwalk_sglue+0xc>
 800abdc:	4630      	mov	r0, r6
 800abde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abe2:	89ab      	ldrh	r3, [r5, #12]
 800abe4:	2b01      	cmp	r3, #1
 800abe6:	d907      	bls.n	800abf8 <_fwalk_sglue+0x38>
 800abe8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800abec:	3301      	adds	r3, #1
 800abee:	d003      	beq.n	800abf8 <_fwalk_sglue+0x38>
 800abf0:	4629      	mov	r1, r5
 800abf2:	4638      	mov	r0, r7
 800abf4:	47c0      	blx	r8
 800abf6:	4306      	orrs	r6, r0
 800abf8:	3568      	adds	r5, #104	@ 0x68
 800abfa:	e7e9      	b.n	800abd0 <_fwalk_sglue+0x10>

0800abfc <__sread>:
 800abfc:	b510      	push	{r4, lr}
 800abfe:	460c      	mov	r4, r1
 800ac00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac04:	f000 f868 	bl	800acd8 <_read_r>
 800ac08:	2800      	cmp	r0, #0
 800ac0a:	bfab      	itete	ge
 800ac0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ac0e:	89a3      	ldrhlt	r3, [r4, #12]
 800ac10:	181b      	addge	r3, r3, r0
 800ac12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ac16:	bfac      	ite	ge
 800ac18:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ac1a:	81a3      	strhlt	r3, [r4, #12]
 800ac1c:	bd10      	pop	{r4, pc}

0800ac1e <__swrite>:
 800ac1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac22:	461f      	mov	r7, r3
 800ac24:	898b      	ldrh	r3, [r1, #12]
 800ac26:	05db      	lsls	r3, r3, #23
 800ac28:	4605      	mov	r5, r0
 800ac2a:	460c      	mov	r4, r1
 800ac2c:	4616      	mov	r6, r2
 800ac2e:	d505      	bpl.n	800ac3c <__swrite+0x1e>
 800ac30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac34:	2302      	movs	r3, #2
 800ac36:	2200      	movs	r2, #0
 800ac38:	f000 f83c 	bl	800acb4 <_lseek_r>
 800ac3c:	89a3      	ldrh	r3, [r4, #12]
 800ac3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ac46:	81a3      	strh	r3, [r4, #12]
 800ac48:	4632      	mov	r2, r6
 800ac4a:	463b      	mov	r3, r7
 800ac4c:	4628      	mov	r0, r5
 800ac4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac52:	f000 b863 	b.w	800ad1c <_write_r>

0800ac56 <__sseek>:
 800ac56:	b510      	push	{r4, lr}
 800ac58:	460c      	mov	r4, r1
 800ac5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac5e:	f000 f829 	bl	800acb4 <_lseek_r>
 800ac62:	1c43      	adds	r3, r0, #1
 800ac64:	89a3      	ldrh	r3, [r4, #12]
 800ac66:	bf15      	itete	ne
 800ac68:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ac6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ac6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ac72:	81a3      	strheq	r3, [r4, #12]
 800ac74:	bf18      	it	ne
 800ac76:	81a3      	strhne	r3, [r4, #12]
 800ac78:	bd10      	pop	{r4, pc}

0800ac7a <__sclose>:
 800ac7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac7e:	f000 b809 	b.w	800ac94 <_close_r>

0800ac82 <memset>:
 800ac82:	4402      	add	r2, r0
 800ac84:	4603      	mov	r3, r0
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d100      	bne.n	800ac8c <memset+0xa>
 800ac8a:	4770      	bx	lr
 800ac8c:	f803 1b01 	strb.w	r1, [r3], #1
 800ac90:	e7f9      	b.n	800ac86 <memset+0x4>
	...

0800ac94 <_close_r>:
 800ac94:	b538      	push	{r3, r4, r5, lr}
 800ac96:	4d06      	ldr	r5, [pc, #24]	@ (800acb0 <_close_r+0x1c>)
 800ac98:	2300      	movs	r3, #0
 800ac9a:	4604      	mov	r4, r0
 800ac9c:	4608      	mov	r0, r1
 800ac9e:	602b      	str	r3, [r5, #0]
 800aca0:	f7f6 fedc 	bl	8001a5c <_close>
 800aca4:	1c43      	adds	r3, r0, #1
 800aca6:	d102      	bne.n	800acae <_close_r+0x1a>
 800aca8:	682b      	ldr	r3, [r5, #0]
 800acaa:	b103      	cbz	r3, 800acae <_close_r+0x1a>
 800acac:	6023      	str	r3, [r4, #0]
 800acae:	bd38      	pop	{r3, r4, r5, pc}
 800acb0:	200022f0 	.word	0x200022f0

0800acb4 <_lseek_r>:
 800acb4:	b538      	push	{r3, r4, r5, lr}
 800acb6:	4d07      	ldr	r5, [pc, #28]	@ (800acd4 <_lseek_r+0x20>)
 800acb8:	4604      	mov	r4, r0
 800acba:	4608      	mov	r0, r1
 800acbc:	4611      	mov	r1, r2
 800acbe:	2200      	movs	r2, #0
 800acc0:	602a      	str	r2, [r5, #0]
 800acc2:	461a      	mov	r2, r3
 800acc4:	f7f6 fef1 	bl	8001aaa <_lseek>
 800acc8:	1c43      	adds	r3, r0, #1
 800acca:	d102      	bne.n	800acd2 <_lseek_r+0x1e>
 800accc:	682b      	ldr	r3, [r5, #0]
 800acce:	b103      	cbz	r3, 800acd2 <_lseek_r+0x1e>
 800acd0:	6023      	str	r3, [r4, #0]
 800acd2:	bd38      	pop	{r3, r4, r5, pc}
 800acd4:	200022f0 	.word	0x200022f0

0800acd8 <_read_r>:
 800acd8:	b538      	push	{r3, r4, r5, lr}
 800acda:	4d07      	ldr	r5, [pc, #28]	@ (800acf8 <_read_r+0x20>)
 800acdc:	4604      	mov	r4, r0
 800acde:	4608      	mov	r0, r1
 800ace0:	4611      	mov	r1, r2
 800ace2:	2200      	movs	r2, #0
 800ace4:	602a      	str	r2, [r5, #0]
 800ace6:	461a      	mov	r2, r3
 800ace8:	f7f6 fe7f 	bl	80019ea <_read>
 800acec:	1c43      	adds	r3, r0, #1
 800acee:	d102      	bne.n	800acf6 <_read_r+0x1e>
 800acf0:	682b      	ldr	r3, [r5, #0]
 800acf2:	b103      	cbz	r3, 800acf6 <_read_r+0x1e>
 800acf4:	6023      	str	r3, [r4, #0]
 800acf6:	bd38      	pop	{r3, r4, r5, pc}
 800acf8:	200022f0 	.word	0x200022f0

0800acfc <_sbrk_r>:
 800acfc:	b538      	push	{r3, r4, r5, lr}
 800acfe:	4d06      	ldr	r5, [pc, #24]	@ (800ad18 <_sbrk_r+0x1c>)
 800ad00:	2300      	movs	r3, #0
 800ad02:	4604      	mov	r4, r0
 800ad04:	4608      	mov	r0, r1
 800ad06:	602b      	str	r3, [r5, #0]
 800ad08:	f7f6 fedc 	bl	8001ac4 <_sbrk>
 800ad0c:	1c43      	adds	r3, r0, #1
 800ad0e:	d102      	bne.n	800ad16 <_sbrk_r+0x1a>
 800ad10:	682b      	ldr	r3, [r5, #0]
 800ad12:	b103      	cbz	r3, 800ad16 <_sbrk_r+0x1a>
 800ad14:	6023      	str	r3, [r4, #0]
 800ad16:	bd38      	pop	{r3, r4, r5, pc}
 800ad18:	200022f0 	.word	0x200022f0

0800ad1c <_write_r>:
 800ad1c:	b538      	push	{r3, r4, r5, lr}
 800ad1e:	4d07      	ldr	r5, [pc, #28]	@ (800ad3c <_write_r+0x20>)
 800ad20:	4604      	mov	r4, r0
 800ad22:	4608      	mov	r0, r1
 800ad24:	4611      	mov	r1, r2
 800ad26:	2200      	movs	r2, #0
 800ad28:	602a      	str	r2, [r5, #0]
 800ad2a:	461a      	mov	r2, r3
 800ad2c:	f7f6 fe7a 	bl	8001a24 <_write>
 800ad30:	1c43      	adds	r3, r0, #1
 800ad32:	d102      	bne.n	800ad3a <_write_r+0x1e>
 800ad34:	682b      	ldr	r3, [r5, #0]
 800ad36:	b103      	cbz	r3, 800ad3a <_write_r+0x1e>
 800ad38:	6023      	str	r3, [r4, #0]
 800ad3a:	bd38      	pop	{r3, r4, r5, pc}
 800ad3c:	200022f0 	.word	0x200022f0

0800ad40 <__errno>:
 800ad40:	4b01      	ldr	r3, [pc, #4]	@ (800ad48 <__errno+0x8>)
 800ad42:	6818      	ldr	r0, [r3, #0]
 800ad44:	4770      	bx	lr
 800ad46:	bf00      	nop
 800ad48:	20000038 	.word	0x20000038

0800ad4c <__libc_init_array>:
 800ad4c:	b570      	push	{r4, r5, r6, lr}
 800ad4e:	4d0d      	ldr	r5, [pc, #52]	@ (800ad84 <__libc_init_array+0x38>)
 800ad50:	4c0d      	ldr	r4, [pc, #52]	@ (800ad88 <__libc_init_array+0x3c>)
 800ad52:	1b64      	subs	r4, r4, r5
 800ad54:	10a4      	asrs	r4, r4, #2
 800ad56:	2600      	movs	r6, #0
 800ad58:	42a6      	cmp	r6, r4
 800ad5a:	d109      	bne.n	800ad70 <__libc_init_array+0x24>
 800ad5c:	4d0b      	ldr	r5, [pc, #44]	@ (800ad8c <__libc_init_array+0x40>)
 800ad5e:	4c0c      	ldr	r4, [pc, #48]	@ (800ad90 <__libc_init_array+0x44>)
 800ad60:	f001 fabc 	bl	800c2dc <_init>
 800ad64:	1b64      	subs	r4, r4, r5
 800ad66:	10a4      	asrs	r4, r4, #2
 800ad68:	2600      	movs	r6, #0
 800ad6a:	42a6      	cmp	r6, r4
 800ad6c:	d105      	bne.n	800ad7a <__libc_init_array+0x2e>
 800ad6e:	bd70      	pop	{r4, r5, r6, pc}
 800ad70:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad74:	4798      	blx	r3
 800ad76:	3601      	adds	r6, #1
 800ad78:	e7ee      	b.n	800ad58 <__libc_init_array+0xc>
 800ad7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad7e:	4798      	blx	r3
 800ad80:	3601      	adds	r6, #1
 800ad82:	e7f2      	b.n	800ad6a <__libc_init_array+0x1e>
 800ad84:	0800c7c8 	.word	0x0800c7c8
 800ad88:	0800c7c8 	.word	0x0800c7c8
 800ad8c:	0800c7c8 	.word	0x0800c7c8
 800ad90:	0800c7cc 	.word	0x0800c7cc

0800ad94 <__retarget_lock_init_recursive>:
 800ad94:	4770      	bx	lr

0800ad96 <__retarget_lock_acquire_recursive>:
 800ad96:	4770      	bx	lr

0800ad98 <__retarget_lock_release_recursive>:
 800ad98:	4770      	bx	lr

0800ad9a <memcpy>:
 800ad9a:	440a      	add	r2, r1
 800ad9c:	4291      	cmp	r1, r2
 800ad9e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ada2:	d100      	bne.n	800ada6 <memcpy+0xc>
 800ada4:	4770      	bx	lr
 800ada6:	b510      	push	{r4, lr}
 800ada8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adac:	f803 4f01 	strb.w	r4, [r3, #1]!
 800adb0:	4291      	cmp	r1, r2
 800adb2:	d1f9      	bne.n	800ada8 <memcpy+0xe>
 800adb4:	bd10      	pop	{r4, pc}
	...

0800adb8 <__assert_func>:
 800adb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800adba:	4614      	mov	r4, r2
 800adbc:	461a      	mov	r2, r3
 800adbe:	4b09      	ldr	r3, [pc, #36]	@ (800ade4 <__assert_func+0x2c>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	4605      	mov	r5, r0
 800adc4:	68d8      	ldr	r0, [r3, #12]
 800adc6:	b954      	cbnz	r4, 800adde <__assert_func+0x26>
 800adc8:	4b07      	ldr	r3, [pc, #28]	@ (800ade8 <__assert_func+0x30>)
 800adca:	461c      	mov	r4, r3
 800adcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800add0:	9100      	str	r1, [sp, #0]
 800add2:	462b      	mov	r3, r5
 800add4:	4905      	ldr	r1, [pc, #20]	@ (800adec <__assert_func+0x34>)
 800add6:	f000 f903 	bl	800afe0 <fiprintf>
 800adda:	f000 f913 	bl	800b004 <abort>
 800adde:	4b04      	ldr	r3, [pc, #16]	@ (800adf0 <__assert_func+0x38>)
 800ade0:	e7f4      	b.n	800adcc <__assert_func+0x14>
 800ade2:	bf00      	nop
 800ade4:	20000038 	.word	0x20000038
 800ade8:	0800c3ba 	.word	0x0800c3ba
 800adec:	0800c38c 	.word	0x0800c38c
 800adf0:	0800c37f 	.word	0x0800c37f

0800adf4 <_free_r>:
 800adf4:	b538      	push	{r3, r4, r5, lr}
 800adf6:	4605      	mov	r5, r0
 800adf8:	2900      	cmp	r1, #0
 800adfa:	d041      	beq.n	800ae80 <_free_r+0x8c>
 800adfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae00:	1f0c      	subs	r4, r1, #4
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	bfb8      	it	lt
 800ae06:	18e4      	addlt	r4, r4, r3
 800ae08:	f7ff fdec 	bl	800a9e4 <__malloc_lock>
 800ae0c:	4a1d      	ldr	r2, [pc, #116]	@ (800ae84 <_free_r+0x90>)
 800ae0e:	6813      	ldr	r3, [r2, #0]
 800ae10:	b933      	cbnz	r3, 800ae20 <_free_r+0x2c>
 800ae12:	6063      	str	r3, [r4, #4]
 800ae14:	6014      	str	r4, [r2, #0]
 800ae16:	4628      	mov	r0, r5
 800ae18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae1c:	f7ff bde8 	b.w	800a9f0 <__malloc_unlock>
 800ae20:	42a3      	cmp	r3, r4
 800ae22:	d908      	bls.n	800ae36 <_free_r+0x42>
 800ae24:	6820      	ldr	r0, [r4, #0]
 800ae26:	1821      	adds	r1, r4, r0
 800ae28:	428b      	cmp	r3, r1
 800ae2a:	bf01      	itttt	eq
 800ae2c:	6819      	ldreq	r1, [r3, #0]
 800ae2e:	685b      	ldreq	r3, [r3, #4]
 800ae30:	1809      	addeq	r1, r1, r0
 800ae32:	6021      	streq	r1, [r4, #0]
 800ae34:	e7ed      	b.n	800ae12 <_free_r+0x1e>
 800ae36:	461a      	mov	r2, r3
 800ae38:	685b      	ldr	r3, [r3, #4]
 800ae3a:	b10b      	cbz	r3, 800ae40 <_free_r+0x4c>
 800ae3c:	42a3      	cmp	r3, r4
 800ae3e:	d9fa      	bls.n	800ae36 <_free_r+0x42>
 800ae40:	6811      	ldr	r1, [r2, #0]
 800ae42:	1850      	adds	r0, r2, r1
 800ae44:	42a0      	cmp	r0, r4
 800ae46:	d10b      	bne.n	800ae60 <_free_r+0x6c>
 800ae48:	6820      	ldr	r0, [r4, #0]
 800ae4a:	4401      	add	r1, r0
 800ae4c:	1850      	adds	r0, r2, r1
 800ae4e:	4283      	cmp	r3, r0
 800ae50:	6011      	str	r1, [r2, #0]
 800ae52:	d1e0      	bne.n	800ae16 <_free_r+0x22>
 800ae54:	6818      	ldr	r0, [r3, #0]
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	6053      	str	r3, [r2, #4]
 800ae5a:	4408      	add	r0, r1
 800ae5c:	6010      	str	r0, [r2, #0]
 800ae5e:	e7da      	b.n	800ae16 <_free_r+0x22>
 800ae60:	d902      	bls.n	800ae68 <_free_r+0x74>
 800ae62:	230c      	movs	r3, #12
 800ae64:	602b      	str	r3, [r5, #0]
 800ae66:	e7d6      	b.n	800ae16 <_free_r+0x22>
 800ae68:	6820      	ldr	r0, [r4, #0]
 800ae6a:	1821      	adds	r1, r4, r0
 800ae6c:	428b      	cmp	r3, r1
 800ae6e:	bf04      	itt	eq
 800ae70:	6819      	ldreq	r1, [r3, #0]
 800ae72:	685b      	ldreq	r3, [r3, #4]
 800ae74:	6063      	str	r3, [r4, #4]
 800ae76:	bf04      	itt	eq
 800ae78:	1809      	addeq	r1, r1, r0
 800ae7a:	6021      	streq	r1, [r4, #0]
 800ae7c:	6054      	str	r4, [r2, #4]
 800ae7e:	e7ca      	b.n	800ae16 <_free_r+0x22>
 800ae80:	bd38      	pop	{r3, r4, r5, pc}
 800ae82:	bf00      	nop
 800ae84:	200021b0 	.word	0x200021b0

0800ae88 <__sflush_r>:
 800ae88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ae8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae90:	0716      	lsls	r6, r2, #28
 800ae92:	4605      	mov	r5, r0
 800ae94:	460c      	mov	r4, r1
 800ae96:	d454      	bmi.n	800af42 <__sflush_r+0xba>
 800ae98:	684b      	ldr	r3, [r1, #4]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	dc02      	bgt.n	800aea4 <__sflush_r+0x1c>
 800ae9e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	dd48      	ble.n	800af36 <__sflush_r+0xae>
 800aea4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aea6:	2e00      	cmp	r6, #0
 800aea8:	d045      	beq.n	800af36 <__sflush_r+0xae>
 800aeaa:	2300      	movs	r3, #0
 800aeac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800aeb0:	682f      	ldr	r7, [r5, #0]
 800aeb2:	6a21      	ldr	r1, [r4, #32]
 800aeb4:	602b      	str	r3, [r5, #0]
 800aeb6:	d030      	beq.n	800af1a <__sflush_r+0x92>
 800aeb8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800aeba:	89a3      	ldrh	r3, [r4, #12]
 800aebc:	0759      	lsls	r1, r3, #29
 800aebe:	d505      	bpl.n	800aecc <__sflush_r+0x44>
 800aec0:	6863      	ldr	r3, [r4, #4]
 800aec2:	1ad2      	subs	r2, r2, r3
 800aec4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800aec6:	b10b      	cbz	r3, 800aecc <__sflush_r+0x44>
 800aec8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aeca:	1ad2      	subs	r2, r2, r3
 800aecc:	2300      	movs	r3, #0
 800aece:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aed0:	6a21      	ldr	r1, [r4, #32]
 800aed2:	4628      	mov	r0, r5
 800aed4:	47b0      	blx	r6
 800aed6:	1c43      	adds	r3, r0, #1
 800aed8:	89a3      	ldrh	r3, [r4, #12]
 800aeda:	d106      	bne.n	800aeea <__sflush_r+0x62>
 800aedc:	6829      	ldr	r1, [r5, #0]
 800aede:	291d      	cmp	r1, #29
 800aee0:	d82b      	bhi.n	800af3a <__sflush_r+0xb2>
 800aee2:	4a2a      	ldr	r2, [pc, #168]	@ (800af8c <__sflush_r+0x104>)
 800aee4:	410a      	asrs	r2, r1
 800aee6:	07d6      	lsls	r6, r2, #31
 800aee8:	d427      	bmi.n	800af3a <__sflush_r+0xb2>
 800aeea:	2200      	movs	r2, #0
 800aeec:	6062      	str	r2, [r4, #4]
 800aeee:	04d9      	lsls	r1, r3, #19
 800aef0:	6922      	ldr	r2, [r4, #16]
 800aef2:	6022      	str	r2, [r4, #0]
 800aef4:	d504      	bpl.n	800af00 <__sflush_r+0x78>
 800aef6:	1c42      	adds	r2, r0, #1
 800aef8:	d101      	bne.n	800aefe <__sflush_r+0x76>
 800aefa:	682b      	ldr	r3, [r5, #0]
 800aefc:	b903      	cbnz	r3, 800af00 <__sflush_r+0x78>
 800aefe:	6560      	str	r0, [r4, #84]	@ 0x54
 800af00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800af02:	602f      	str	r7, [r5, #0]
 800af04:	b1b9      	cbz	r1, 800af36 <__sflush_r+0xae>
 800af06:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800af0a:	4299      	cmp	r1, r3
 800af0c:	d002      	beq.n	800af14 <__sflush_r+0x8c>
 800af0e:	4628      	mov	r0, r5
 800af10:	f7ff ff70 	bl	800adf4 <_free_r>
 800af14:	2300      	movs	r3, #0
 800af16:	6363      	str	r3, [r4, #52]	@ 0x34
 800af18:	e00d      	b.n	800af36 <__sflush_r+0xae>
 800af1a:	2301      	movs	r3, #1
 800af1c:	4628      	mov	r0, r5
 800af1e:	47b0      	blx	r6
 800af20:	4602      	mov	r2, r0
 800af22:	1c50      	adds	r0, r2, #1
 800af24:	d1c9      	bne.n	800aeba <__sflush_r+0x32>
 800af26:	682b      	ldr	r3, [r5, #0]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d0c6      	beq.n	800aeba <__sflush_r+0x32>
 800af2c:	2b1d      	cmp	r3, #29
 800af2e:	d001      	beq.n	800af34 <__sflush_r+0xac>
 800af30:	2b16      	cmp	r3, #22
 800af32:	d11e      	bne.n	800af72 <__sflush_r+0xea>
 800af34:	602f      	str	r7, [r5, #0]
 800af36:	2000      	movs	r0, #0
 800af38:	e022      	b.n	800af80 <__sflush_r+0xf8>
 800af3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af3e:	b21b      	sxth	r3, r3
 800af40:	e01b      	b.n	800af7a <__sflush_r+0xf2>
 800af42:	690f      	ldr	r7, [r1, #16]
 800af44:	2f00      	cmp	r7, #0
 800af46:	d0f6      	beq.n	800af36 <__sflush_r+0xae>
 800af48:	0793      	lsls	r3, r2, #30
 800af4a:	680e      	ldr	r6, [r1, #0]
 800af4c:	bf08      	it	eq
 800af4e:	694b      	ldreq	r3, [r1, #20]
 800af50:	600f      	str	r7, [r1, #0]
 800af52:	bf18      	it	ne
 800af54:	2300      	movne	r3, #0
 800af56:	eba6 0807 	sub.w	r8, r6, r7
 800af5a:	608b      	str	r3, [r1, #8]
 800af5c:	f1b8 0f00 	cmp.w	r8, #0
 800af60:	dde9      	ble.n	800af36 <__sflush_r+0xae>
 800af62:	6a21      	ldr	r1, [r4, #32]
 800af64:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800af66:	4643      	mov	r3, r8
 800af68:	463a      	mov	r2, r7
 800af6a:	4628      	mov	r0, r5
 800af6c:	47b0      	blx	r6
 800af6e:	2800      	cmp	r0, #0
 800af70:	dc08      	bgt.n	800af84 <__sflush_r+0xfc>
 800af72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af7a:	81a3      	strh	r3, [r4, #12]
 800af7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af84:	4407      	add	r7, r0
 800af86:	eba8 0800 	sub.w	r8, r8, r0
 800af8a:	e7e7      	b.n	800af5c <__sflush_r+0xd4>
 800af8c:	dfbffffe 	.word	0xdfbffffe

0800af90 <_fflush_r>:
 800af90:	b538      	push	{r3, r4, r5, lr}
 800af92:	690b      	ldr	r3, [r1, #16]
 800af94:	4605      	mov	r5, r0
 800af96:	460c      	mov	r4, r1
 800af98:	b913      	cbnz	r3, 800afa0 <_fflush_r+0x10>
 800af9a:	2500      	movs	r5, #0
 800af9c:	4628      	mov	r0, r5
 800af9e:	bd38      	pop	{r3, r4, r5, pc}
 800afa0:	b118      	cbz	r0, 800afaa <_fflush_r+0x1a>
 800afa2:	6a03      	ldr	r3, [r0, #32]
 800afa4:	b90b      	cbnz	r3, 800afaa <_fflush_r+0x1a>
 800afa6:	f7ff fdf3 	bl	800ab90 <__sinit>
 800afaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d0f3      	beq.n	800af9a <_fflush_r+0xa>
 800afb2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800afb4:	07d0      	lsls	r0, r2, #31
 800afb6:	d404      	bmi.n	800afc2 <_fflush_r+0x32>
 800afb8:	0599      	lsls	r1, r3, #22
 800afba:	d402      	bmi.n	800afc2 <_fflush_r+0x32>
 800afbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800afbe:	f7ff feea 	bl	800ad96 <__retarget_lock_acquire_recursive>
 800afc2:	4628      	mov	r0, r5
 800afc4:	4621      	mov	r1, r4
 800afc6:	f7ff ff5f 	bl	800ae88 <__sflush_r>
 800afca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800afcc:	07da      	lsls	r2, r3, #31
 800afce:	4605      	mov	r5, r0
 800afd0:	d4e4      	bmi.n	800af9c <_fflush_r+0xc>
 800afd2:	89a3      	ldrh	r3, [r4, #12]
 800afd4:	059b      	lsls	r3, r3, #22
 800afd6:	d4e1      	bmi.n	800af9c <_fflush_r+0xc>
 800afd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800afda:	f7ff fedd 	bl	800ad98 <__retarget_lock_release_recursive>
 800afde:	e7dd      	b.n	800af9c <_fflush_r+0xc>

0800afe0 <fiprintf>:
 800afe0:	b40e      	push	{r1, r2, r3}
 800afe2:	b503      	push	{r0, r1, lr}
 800afe4:	4601      	mov	r1, r0
 800afe6:	ab03      	add	r3, sp, #12
 800afe8:	4805      	ldr	r0, [pc, #20]	@ (800b000 <fiprintf+0x20>)
 800afea:	f853 2b04 	ldr.w	r2, [r3], #4
 800afee:	6800      	ldr	r0, [r0, #0]
 800aff0:	9301      	str	r3, [sp, #4]
 800aff2:	f000 f837 	bl	800b064 <_vfiprintf_r>
 800aff6:	b002      	add	sp, #8
 800aff8:	f85d eb04 	ldr.w	lr, [sp], #4
 800affc:	b003      	add	sp, #12
 800affe:	4770      	bx	lr
 800b000:	20000038 	.word	0x20000038

0800b004 <abort>:
 800b004:	b508      	push	{r3, lr}
 800b006:	2006      	movs	r0, #6
 800b008:	f000 fb8e 	bl	800b728 <raise>
 800b00c:	2001      	movs	r0, #1
 800b00e:	f7f6 fce1 	bl	80019d4 <_exit>

0800b012 <__sfputc_r>:
 800b012:	6893      	ldr	r3, [r2, #8]
 800b014:	3b01      	subs	r3, #1
 800b016:	2b00      	cmp	r3, #0
 800b018:	b410      	push	{r4}
 800b01a:	6093      	str	r3, [r2, #8]
 800b01c:	da08      	bge.n	800b030 <__sfputc_r+0x1e>
 800b01e:	6994      	ldr	r4, [r2, #24]
 800b020:	42a3      	cmp	r3, r4
 800b022:	db01      	blt.n	800b028 <__sfputc_r+0x16>
 800b024:	290a      	cmp	r1, #10
 800b026:	d103      	bne.n	800b030 <__sfputc_r+0x1e>
 800b028:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b02c:	f000 bac0 	b.w	800b5b0 <__swbuf_r>
 800b030:	6813      	ldr	r3, [r2, #0]
 800b032:	1c58      	adds	r0, r3, #1
 800b034:	6010      	str	r0, [r2, #0]
 800b036:	7019      	strb	r1, [r3, #0]
 800b038:	4608      	mov	r0, r1
 800b03a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b03e:	4770      	bx	lr

0800b040 <__sfputs_r>:
 800b040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b042:	4606      	mov	r6, r0
 800b044:	460f      	mov	r7, r1
 800b046:	4614      	mov	r4, r2
 800b048:	18d5      	adds	r5, r2, r3
 800b04a:	42ac      	cmp	r4, r5
 800b04c:	d101      	bne.n	800b052 <__sfputs_r+0x12>
 800b04e:	2000      	movs	r0, #0
 800b050:	e007      	b.n	800b062 <__sfputs_r+0x22>
 800b052:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b056:	463a      	mov	r2, r7
 800b058:	4630      	mov	r0, r6
 800b05a:	f7ff ffda 	bl	800b012 <__sfputc_r>
 800b05e:	1c43      	adds	r3, r0, #1
 800b060:	d1f3      	bne.n	800b04a <__sfputs_r+0xa>
 800b062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b064 <_vfiprintf_r>:
 800b064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b068:	460d      	mov	r5, r1
 800b06a:	b09d      	sub	sp, #116	@ 0x74
 800b06c:	4614      	mov	r4, r2
 800b06e:	4698      	mov	r8, r3
 800b070:	4606      	mov	r6, r0
 800b072:	b118      	cbz	r0, 800b07c <_vfiprintf_r+0x18>
 800b074:	6a03      	ldr	r3, [r0, #32]
 800b076:	b90b      	cbnz	r3, 800b07c <_vfiprintf_r+0x18>
 800b078:	f7ff fd8a 	bl	800ab90 <__sinit>
 800b07c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b07e:	07d9      	lsls	r1, r3, #31
 800b080:	d405      	bmi.n	800b08e <_vfiprintf_r+0x2a>
 800b082:	89ab      	ldrh	r3, [r5, #12]
 800b084:	059a      	lsls	r2, r3, #22
 800b086:	d402      	bmi.n	800b08e <_vfiprintf_r+0x2a>
 800b088:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b08a:	f7ff fe84 	bl	800ad96 <__retarget_lock_acquire_recursive>
 800b08e:	89ab      	ldrh	r3, [r5, #12]
 800b090:	071b      	lsls	r3, r3, #28
 800b092:	d501      	bpl.n	800b098 <_vfiprintf_r+0x34>
 800b094:	692b      	ldr	r3, [r5, #16]
 800b096:	b99b      	cbnz	r3, 800b0c0 <_vfiprintf_r+0x5c>
 800b098:	4629      	mov	r1, r5
 800b09a:	4630      	mov	r0, r6
 800b09c:	f000 fac6 	bl	800b62c <__swsetup_r>
 800b0a0:	b170      	cbz	r0, 800b0c0 <_vfiprintf_r+0x5c>
 800b0a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b0a4:	07dc      	lsls	r4, r3, #31
 800b0a6:	d504      	bpl.n	800b0b2 <_vfiprintf_r+0x4e>
 800b0a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b0ac:	b01d      	add	sp, #116	@ 0x74
 800b0ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0b2:	89ab      	ldrh	r3, [r5, #12]
 800b0b4:	0598      	lsls	r0, r3, #22
 800b0b6:	d4f7      	bmi.n	800b0a8 <_vfiprintf_r+0x44>
 800b0b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b0ba:	f7ff fe6d 	bl	800ad98 <__retarget_lock_release_recursive>
 800b0be:	e7f3      	b.n	800b0a8 <_vfiprintf_r+0x44>
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0c4:	2320      	movs	r3, #32
 800b0c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b0ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0ce:	2330      	movs	r3, #48	@ 0x30
 800b0d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b280 <_vfiprintf_r+0x21c>
 800b0d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b0d8:	f04f 0901 	mov.w	r9, #1
 800b0dc:	4623      	mov	r3, r4
 800b0de:	469a      	mov	sl, r3
 800b0e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0e4:	b10a      	cbz	r2, 800b0ea <_vfiprintf_r+0x86>
 800b0e6:	2a25      	cmp	r2, #37	@ 0x25
 800b0e8:	d1f9      	bne.n	800b0de <_vfiprintf_r+0x7a>
 800b0ea:	ebba 0b04 	subs.w	fp, sl, r4
 800b0ee:	d00b      	beq.n	800b108 <_vfiprintf_r+0xa4>
 800b0f0:	465b      	mov	r3, fp
 800b0f2:	4622      	mov	r2, r4
 800b0f4:	4629      	mov	r1, r5
 800b0f6:	4630      	mov	r0, r6
 800b0f8:	f7ff ffa2 	bl	800b040 <__sfputs_r>
 800b0fc:	3001      	adds	r0, #1
 800b0fe:	f000 80a7 	beq.w	800b250 <_vfiprintf_r+0x1ec>
 800b102:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b104:	445a      	add	r2, fp
 800b106:	9209      	str	r2, [sp, #36]	@ 0x24
 800b108:	f89a 3000 	ldrb.w	r3, [sl]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	f000 809f 	beq.w	800b250 <_vfiprintf_r+0x1ec>
 800b112:	2300      	movs	r3, #0
 800b114:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b118:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b11c:	f10a 0a01 	add.w	sl, sl, #1
 800b120:	9304      	str	r3, [sp, #16]
 800b122:	9307      	str	r3, [sp, #28]
 800b124:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b128:	931a      	str	r3, [sp, #104]	@ 0x68
 800b12a:	4654      	mov	r4, sl
 800b12c:	2205      	movs	r2, #5
 800b12e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b132:	4853      	ldr	r0, [pc, #332]	@ (800b280 <_vfiprintf_r+0x21c>)
 800b134:	f7f5 f84c 	bl	80001d0 <memchr>
 800b138:	9a04      	ldr	r2, [sp, #16]
 800b13a:	b9d8      	cbnz	r0, 800b174 <_vfiprintf_r+0x110>
 800b13c:	06d1      	lsls	r1, r2, #27
 800b13e:	bf44      	itt	mi
 800b140:	2320      	movmi	r3, #32
 800b142:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b146:	0713      	lsls	r3, r2, #28
 800b148:	bf44      	itt	mi
 800b14a:	232b      	movmi	r3, #43	@ 0x2b
 800b14c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b150:	f89a 3000 	ldrb.w	r3, [sl]
 800b154:	2b2a      	cmp	r3, #42	@ 0x2a
 800b156:	d015      	beq.n	800b184 <_vfiprintf_r+0x120>
 800b158:	9a07      	ldr	r2, [sp, #28]
 800b15a:	4654      	mov	r4, sl
 800b15c:	2000      	movs	r0, #0
 800b15e:	f04f 0c0a 	mov.w	ip, #10
 800b162:	4621      	mov	r1, r4
 800b164:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b168:	3b30      	subs	r3, #48	@ 0x30
 800b16a:	2b09      	cmp	r3, #9
 800b16c:	d94b      	bls.n	800b206 <_vfiprintf_r+0x1a2>
 800b16e:	b1b0      	cbz	r0, 800b19e <_vfiprintf_r+0x13a>
 800b170:	9207      	str	r2, [sp, #28]
 800b172:	e014      	b.n	800b19e <_vfiprintf_r+0x13a>
 800b174:	eba0 0308 	sub.w	r3, r0, r8
 800b178:	fa09 f303 	lsl.w	r3, r9, r3
 800b17c:	4313      	orrs	r3, r2
 800b17e:	9304      	str	r3, [sp, #16]
 800b180:	46a2      	mov	sl, r4
 800b182:	e7d2      	b.n	800b12a <_vfiprintf_r+0xc6>
 800b184:	9b03      	ldr	r3, [sp, #12]
 800b186:	1d19      	adds	r1, r3, #4
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	9103      	str	r1, [sp, #12]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	bfbb      	ittet	lt
 800b190:	425b      	neglt	r3, r3
 800b192:	f042 0202 	orrlt.w	r2, r2, #2
 800b196:	9307      	strge	r3, [sp, #28]
 800b198:	9307      	strlt	r3, [sp, #28]
 800b19a:	bfb8      	it	lt
 800b19c:	9204      	strlt	r2, [sp, #16]
 800b19e:	7823      	ldrb	r3, [r4, #0]
 800b1a0:	2b2e      	cmp	r3, #46	@ 0x2e
 800b1a2:	d10a      	bne.n	800b1ba <_vfiprintf_r+0x156>
 800b1a4:	7863      	ldrb	r3, [r4, #1]
 800b1a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b1a8:	d132      	bne.n	800b210 <_vfiprintf_r+0x1ac>
 800b1aa:	9b03      	ldr	r3, [sp, #12]
 800b1ac:	1d1a      	adds	r2, r3, #4
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	9203      	str	r2, [sp, #12]
 800b1b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b1b6:	3402      	adds	r4, #2
 800b1b8:	9305      	str	r3, [sp, #20]
 800b1ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b290 <_vfiprintf_r+0x22c>
 800b1be:	7821      	ldrb	r1, [r4, #0]
 800b1c0:	2203      	movs	r2, #3
 800b1c2:	4650      	mov	r0, sl
 800b1c4:	f7f5 f804 	bl	80001d0 <memchr>
 800b1c8:	b138      	cbz	r0, 800b1da <_vfiprintf_r+0x176>
 800b1ca:	9b04      	ldr	r3, [sp, #16]
 800b1cc:	eba0 000a 	sub.w	r0, r0, sl
 800b1d0:	2240      	movs	r2, #64	@ 0x40
 800b1d2:	4082      	lsls	r2, r0
 800b1d4:	4313      	orrs	r3, r2
 800b1d6:	3401      	adds	r4, #1
 800b1d8:	9304      	str	r3, [sp, #16]
 800b1da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1de:	4829      	ldr	r0, [pc, #164]	@ (800b284 <_vfiprintf_r+0x220>)
 800b1e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b1e4:	2206      	movs	r2, #6
 800b1e6:	f7f4 fff3 	bl	80001d0 <memchr>
 800b1ea:	2800      	cmp	r0, #0
 800b1ec:	d03f      	beq.n	800b26e <_vfiprintf_r+0x20a>
 800b1ee:	4b26      	ldr	r3, [pc, #152]	@ (800b288 <_vfiprintf_r+0x224>)
 800b1f0:	bb1b      	cbnz	r3, 800b23a <_vfiprintf_r+0x1d6>
 800b1f2:	9b03      	ldr	r3, [sp, #12]
 800b1f4:	3307      	adds	r3, #7
 800b1f6:	f023 0307 	bic.w	r3, r3, #7
 800b1fa:	3308      	adds	r3, #8
 800b1fc:	9303      	str	r3, [sp, #12]
 800b1fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b200:	443b      	add	r3, r7
 800b202:	9309      	str	r3, [sp, #36]	@ 0x24
 800b204:	e76a      	b.n	800b0dc <_vfiprintf_r+0x78>
 800b206:	fb0c 3202 	mla	r2, ip, r2, r3
 800b20a:	460c      	mov	r4, r1
 800b20c:	2001      	movs	r0, #1
 800b20e:	e7a8      	b.n	800b162 <_vfiprintf_r+0xfe>
 800b210:	2300      	movs	r3, #0
 800b212:	3401      	adds	r4, #1
 800b214:	9305      	str	r3, [sp, #20]
 800b216:	4619      	mov	r1, r3
 800b218:	f04f 0c0a 	mov.w	ip, #10
 800b21c:	4620      	mov	r0, r4
 800b21e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b222:	3a30      	subs	r2, #48	@ 0x30
 800b224:	2a09      	cmp	r2, #9
 800b226:	d903      	bls.n	800b230 <_vfiprintf_r+0x1cc>
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d0c6      	beq.n	800b1ba <_vfiprintf_r+0x156>
 800b22c:	9105      	str	r1, [sp, #20]
 800b22e:	e7c4      	b.n	800b1ba <_vfiprintf_r+0x156>
 800b230:	fb0c 2101 	mla	r1, ip, r1, r2
 800b234:	4604      	mov	r4, r0
 800b236:	2301      	movs	r3, #1
 800b238:	e7f0      	b.n	800b21c <_vfiprintf_r+0x1b8>
 800b23a:	ab03      	add	r3, sp, #12
 800b23c:	9300      	str	r3, [sp, #0]
 800b23e:	462a      	mov	r2, r5
 800b240:	4b12      	ldr	r3, [pc, #72]	@ (800b28c <_vfiprintf_r+0x228>)
 800b242:	a904      	add	r1, sp, #16
 800b244:	4630      	mov	r0, r6
 800b246:	f3af 8000 	nop.w
 800b24a:	4607      	mov	r7, r0
 800b24c:	1c78      	adds	r0, r7, #1
 800b24e:	d1d6      	bne.n	800b1fe <_vfiprintf_r+0x19a>
 800b250:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b252:	07d9      	lsls	r1, r3, #31
 800b254:	d405      	bmi.n	800b262 <_vfiprintf_r+0x1fe>
 800b256:	89ab      	ldrh	r3, [r5, #12]
 800b258:	059a      	lsls	r2, r3, #22
 800b25a:	d402      	bmi.n	800b262 <_vfiprintf_r+0x1fe>
 800b25c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b25e:	f7ff fd9b 	bl	800ad98 <__retarget_lock_release_recursive>
 800b262:	89ab      	ldrh	r3, [r5, #12]
 800b264:	065b      	lsls	r3, r3, #25
 800b266:	f53f af1f 	bmi.w	800b0a8 <_vfiprintf_r+0x44>
 800b26a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b26c:	e71e      	b.n	800b0ac <_vfiprintf_r+0x48>
 800b26e:	ab03      	add	r3, sp, #12
 800b270:	9300      	str	r3, [sp, #0]
 800b272:	462a      	mov	r2, r5
 800b274:	4b05      	ldr	r3, [pc, #20]	@ (800b28c <_vfiprintf_r+0x228>)
 800b276:	a904      	add	r1, sp, #16
 800b278:	4630      	mov	r0, r6
 800b27a:	f000 f879 	bl	800b370 <_printf_i>
 800b27e:	e7e4      	b.n	800b24a <_vfiprintf_r+0x1e6>
 800b280:	0800c3bb 	.word	0x0800c3bb
 800b284:	0800c3c5 	.word	0x0800c3c5
 800b288:	00000000 	.word	0x00000000
 800b28c:	0800b041 	.word	0x0800b041
 800b290:	0800c3c1 	.word	0x0800c3c1

0800b294 <_printf_common>:
 800b294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b298:	4616      	mov	r6, r2
 800b29a:	4698      	mov	r8, r3
 800b29c:	688a      	ldr	r2, [r1, #8]
 800b29e:	690b      	ldr	r3, [r1, #16]
 800b2a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b2a4:	4293      	cmp	r3, r2
 800b2a6:	bfb8      	it	lt
 800b2a8:	4613      	movlt	r3, r2
 800b2aa:	6033      	str	r3, [r6, #0]
 800b2ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b2b0:	4607      	mov	r7, r0
 800b2b2:	460c      	mov	r4, r1
 800b2b4:	b10a      	cbz	r2, 800b2ba <_printf_common+0x26>
 800b2b6:	3301      	adds	r3, #1
 800b2b8:	6033      	str	r3, [r6, #0]
 800b2ba:	6823      	ldr	r3, [r4, #0]
 800b2bc:	0699      	lsls	r1, r3, #26
 800b2be:	bf42      	ittt	mi
 800b2c0:	6833      	ldrmi	r3, [r6, #0]
 800b2c2:	3302      	addmi	r3, #2
 800b2c4:	6033      	strmi	r3, [r6, #0]
 800b2c6:	6825      	ldr	r5, [r4, #0]
 800b2c8:	f015 0506 	ands.w	r5, r5, #6
 800b2cc:	d106      	bne.n	800b2dc <_printf_common+0x48>
 800b2ce:	f104 0a19 	add.w	sl, r4, #25
 800b2d2:	68e3      	ldr	r3, [r4, #12]
 800b2d4:	6832      	ldr	r2, [r6, #0]
 800b2d6:	1a9b      	subs	r3, r3, r2
 800b2d8:	42ab      	cmp	r3, r5
 800b2da:	dc26      	bgt.n	800b32a <_printf_common+0x96>
 800b2dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b2e0:	6822      	ldr	r2, [r4, #0]
 800b2e2:	3b00      	subs	r3, #0
 800b2e4:	bf18      	it	ne
 800b2e6:	2301      	movne	r3, #1
 800b2e8:	0692      	lsls	r2, r2, #26
 800b2ea:	d42b      	bmi.n	800b344 <_printf_common+0xb0>
 800b2ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b2f0:	4641      	mov	r1, r8
 800b2f2:	4638      	mov	r0, r7
 800b2f4:	47c8      	blx	r9
 800b2f6:	3001      	adds	r0, #1
 800b2f8:	d01e      	beq.n	800b338 <_printf_common+0xa4>
 800b2fa:	6823      	ldr	r3, [r4, #0]
 800b2fc:	6922      	ldr	r2, [r4, #16]
 800b2fe:	f003 0306 	and.w	r3, r3, #6
 800b302:	2b04      	cmp	r3, #4
 800b304:	bf02      	ittt	eq
 800b306:	68e5      	ldreq	r5, [r4, #12]
 800b308:	6833      	ldreq	r3, [r6, #0]
 800b30a:	1aed      	subeq	r5, r5, r3
 800b30c:	68a3      	ldr	r3, [r4, #8]
 800b30e:	bf0c      	ite	eq
 800b310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b314:	2500      	movne	r5, #0
 800b316:	4293      	cmp	r3, r2
 800b318:	bfc4      	itt	gt
 800b31a:	1a9b      	subgt	r3, r3, r2
 800b31c:	18ed      	addgt	r5, r5, r3
 800b31e:	2600      	movs	r6, #0
 800b320:	341a      	adds	r4, #26
 800b322:	42b5      	cmp	r5, r6
 800b324:	d11a      	bne.n	800b35c <_printf_common+0xc8>
 800b326:	2000      	movs	r0, #0
 800b328:	e008      	b.n	800b33c <_printf_common+0xa8>
 800b32a:	2301      	movs	r3, #1
 800b32c:	4652      	mov	r2, sl
 800b32e:	4641      	mov	r1, r8
 800b330:	4638      	mov	r0, r7
 800b332:	47c8      	blx	r9
 800b334:	3001      	adds	r0, #1
 800b336:	d103      	bne.n	800b340 <_printf_common+0xac>
 800b338:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b33c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b340:	3501      	adds	r5, #1
 800b342:	e7c6      	b.n	800b2d2 <_printf_common+0x3e>
 800b344:	18e1      	adds	r1, r4, r3
 800b346:	1c5a      	adds	r2, r3, #1
 800b348:	2030      	movs	r0, #48	@ 0x30
 800b34a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b34e:	4422      	add	r2, r4
 800b350:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b354:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b358:	3302      	adds	r3, #2
 800b35a:	e7c7      	b.n	800b2ec <_printf_common+0x58>
 800b35c:	2301      	movs	r3, #1
 800b35e:	4622      	mov	r2, r4
 800b360:	4641      	mov	r1, r8
 800b362:	4638      	mov	r0, r7
 800b364:	47c8      	blx	r9
 800b366:	3001      	adds	r0, #1
 800b368:	d0e6      	beq.n	800b338 <_printf_common+0xa4>
 800b36a:	3601      	adds	r6, #1
 800b36c:	e7d9      	b.n	800b322 <_printf_common+0x8e>
	...

0800b370 <_printf_i>:
 800b370:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b374:	7e0f      	ldrb	r7, [r1, #24]
 800b376:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b378:	2f78      	cmp	r7, #120	@ 0x78
 800b37a:	4691      	mov	r9, r2
 800b37c:	4680      	mov	r8, r0
 800b37e:	460c      	mov	r4, r1
 800b380:	469a      	mov	sl, r3
 800b382:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b386:	d807      	bhi.n	800b398 <_printf_i+0x28>
 800b388:	2f62      	cmp	r7, #98	@ 0x62
 800b38a:	d80a      	bhi.n	800b3a2 <_printf_i+0x32>
 800b38c:	2f00      	cmp	r7, #0
 800b38e:	f000 80d2 	beq.w	800b536 <_printf_i+0x1c6>
 800b392:	2f58      	cmp	r7, #88	@ 0x58
 800b394:	f000 80b9 	beq.w	800b50a <_printf_i+0x19a>
 800b398:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b39c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b3a0:	e03a      	b.n	800b418 <_printf_i+0xa8>
 800b3a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b3a6:	2b15      	cmp	r3, #21
 800b3a8:	d8f6      	bhi.n	800b398 <_printf_i+0x28>
 800b3aa:	a101      	add	r1, pc, #4	@ (adr r1, 800b3b0 <_printf_i+0x40>)
 800b3ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b3b0:	0800b409 	.word	0x0800b409
 800b3b4:	0800b41d 	.word	0x0800b41d
 800b3b8:	0800b399 	.word	0x0800b399
 800b3bc:	0800b399 	.word	0x0800b399
 800b3c0:	0800b399 	.word	0x0800b399
 800b3c4:	0800b399 	.word	0x0800b399
 800b3c8:	0800b41d 	.word	0x0800b41d
 800b3cc:	0800b399 	.word	0x0800b399
 800b3d0:	0800b399 	.word	0x0800b399
 800b3d4:	0800b399 	.word	0x0800b399
 800b3d8:	0800b399 	.word	0x0800b399
 800b3dc:	0800b51d 	.word	0x0800b51d
 800b3e0:	0800b447 	.word	0x0800b447
 800b3e4:	0800b4d7 	.word	0x0800b4d7
 800b3e8:	0800b399 	.word	0x0800b399
 800b3ec:	0800b399 	.word	0x0800b399
 800b3f0:	0800b53f 	.word	0x0800b53f
 800b3f4:	0800b399 	.word	0x0800b399
 800b3f8:	0800b447 	.word	0x0800b447
 800b3fc:	0800b399 	.word	0x0800b399
 800b400:	0800b399 	.word	0x0800b399
 800b404:	0800b4df 	.word	0x0800b4df
 800b408:	6833      	ldr	r3, [r6, #0]
 800b40a:	1d1a      	adds	r2, r3, #4
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	6032      	str	r2, [r6, #0]
 800b410:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b414:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b418:	2301      	movs	r3, #1
 800b41a:	e09d      	b.n	800b558 <_printf_i+0x1e8>
 800b41c:	6833      	ldr	r3, [r6, #0]
 800b41e:	6820      	ldr	r0, [r4, #0]
 800b420:	1d19      	adds	r1, r3, #4
 800b422:	6031      	str	r1, [r6, #0]
 800b424:	0606      	lsls	r6, r0, #24
 800b426:	d501      	bpl.n	800b42c <_printf_i+0xbc>
 800b428:	681d      	ldr	r5, [r3, #0]
 800b42a:	e003      	b.n	800b434 <_printf_i+0xc4>
 800b42c:	0645      	lsls	r5, r0, #25
 800b42e:	d5fb      	bpl.n	800b428 <_printf_i+0xb8>
 800b430:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b434:	2d00      	cmp	r5, #0
 800b436:	da03      	bge.n	800b440 <_printf_i+0xd0>
 800b438:	232d      	movs	r3, #45	@ 0x2d
 800b43a:	426d      	negs	r5, r5
 800b43c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b440:	4859      	ldr	r0, [pc, #356]	@ (800b5a8 <_printf_i+0x238>)
 800b442:	230a      	movs	r3, #10
 800b444:	e011      	b.n	800b46a <_printf_i+0xfa>
 800b446:	6821      	ldr	r1, [r4, #0]
 800b448:	6833      	ldr	r3, [r6, #0]
 800b44a:	0608      	lsls	r0, r1, #24
 800b44c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b450:	d402      	bmi.n	800b458 <_printf_i+0xe8>
 800b452:	0649      	lsls	r1, r1, #25
 800b454:	bf48      	it	mi
 800b456:	b2ad      	uxthmi	r5, r5
 800b458:	2f6f      	cmp	r7, #111	@ 0x6f
 800b45a:	4853      	ldr	r0, [pc, #332]	@ (800b5a8 <_printf_i+0x238>)
 800b45c:	6033      	str	r3, [r6, #0]
 800b45e:	bf14      	ite	ne
 800b460:	230a      	movne	r3, #10
 800b462:	2308      	moveq	r3, #8
 800b464:	2100      	movs	r1, #0
 800b466:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b46a:	6866      	ldr	r6, [r4, #4]
 800b46c:	60a6      	str	r6, [r4, #8]
 800b46e:	2e00      	cmp	r6, #0
 800b470:	bfa2      	ittt	ge
 800b472:	6821      	ldrge	r1, [r4, #0]
 800b474:	f021 0104 	bicge.w	r1, r1, #4
 800b478:	6021      	strge	r1, [r4, #0]
 800b47a:	b90d      	cbnz	r5, 800b480 <_printf_i+0x110>
 800b47c:	2e00      	cmp	r6, #0
 800b47e:	d04b      	beq.n	800b518 <_printf_i+0x1a8>
 800b480:	4616      	mov	r6, r2
 800b482:	fbb5 f1f3 	udiv	r1, r5, r3
 800b486:	fb03 5711 	mls	r7, r3, r1, r5
 800b48a:	5dc7      	ldrb	r7, [r0, r7]
 800b48c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b490:	462f      	mov	r7, r5
 800b492:	42bb      	cmp	r3, r7
 800b494:	460d      	mov	r5, r1
 800b496:	d9f4      	bls.n	800b482 <_printf_i+0x112>
 800b498:	2b08      	cmp	r3, #8
 800b49a:	d10b      	bne.n	800b4b4 <_printf_i+0x144>
 800b49c:	6823      	ldr	r3, [r4, #0]
 800b49e:	07df      	lsls	r7, r3, #31
 800b4a0:	d508      	bpl.n	800b4b4 <_printf_i+0x144>
 800b4a2:	6923      	ldr	r3, [r4, #16]
 800b4a4:	6861      	ldr	r1, [r4, #4]
 800b4a6:	4299      	cmp	r1, r3
 800b4a8:	bfde      	ittt	le
 800b4aa:	2330      	movle	r3, #48	@ 0x30
 800b4ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b4b0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b4b4:	1b92      	subs	r2, r2, r6
 800b4b6:	6122      	str	r2, [r4, #16]
 800b4b8:	f8cd a000 	str.w	sl, [sp]
 800b4bc:	464b      	mov	r3, r9
 800b4be:	aa03      	add	r2, sp, #12
 800b4c0:	4621      	mov	r1, r4
 800b4c2:	4640      	mov	r0, r8
 800b4c4:	f7ff fee6 	bl	800b294 <_printf_common>
 800b4c8:	3001      	adds	r0, #1
 800b4ca:	d14a      	bne.n	800b562 <_printf_i+0x1f2>
 800b4cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b4d0:	b004      	add	sp, #16
 800b4d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4d6:	6823      	ldr	r3, [r4, #0]
 800b4d8:	f043 0320 	orr.w	r3, r3, #32
 800b4dc:	6023      	str	r3, [r4, #0]
 800b4de:	4833      	ldr	r0, [pc, #204]	@ (800b5ac <_printf_i+0x23c>)
 800b4e0:	2778      	movs	r7, #120	@ 0x78
 800b4e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b4e6:	6823      	ldr	r3, [r4, #0]
 800b4e8:	6831      	ldr	r1, [r6, #0]
 800b4ea:	061f      	lsls	r7, r3, #24
 800b4ec:	f851 5b04 	ldr.w	r5, [r1], #4
 800b4f0:	d402      	bmi.n	800b4f8 <_printf_i+0x188>
 800b4f2:	065f      	lsls	r7, r3, #25
 800b4f4:	bf48      	it	mi
 800b4f6:	b2ad      	uxthmi	r5, r5
 800b4f8:	6031      	str	r1, [r6, #0]
 800b4fa:	07d9      	lsls	r1, r3, #31
 800b4fc:	bf44      	itt	mi
 800b4fe:	f043 0320 	orrmi.w	r3, r3, #32
 800b502:	6023      	strmi	r3, [r4, #0]
 800b504:	b11d      	cbz	r5, 800b50e <_printf_i+0x19e>
 800b506:	2310      	movs	r3, #16
 800b508:	e7ac      	b.n	800b464 <_printf_i+0xf4>
 800b50a:	4827      	ldr	r0, [pc, #156]	@ (800b5a8 <_printf_i+0x238>)
 800b50c:	e7e9      	b.n	800b4e2 <_printf_i+0x172>
 800b50e:	6823      	ldr	r3, [r4, #0]
 800b510:	f023 0320 	bic.w	r3, r3, #32
 800b514:	6023      	str	r3, [r4, #0]
 800b516:	e7f6      	b.n	800b506 <_printf_i+0x196>
 800b518:	4616      	mov	r6, r2
 800b51a:	e7bd      	b.n	800b498 <_printf_i+0x128>
 800b51c:	6833      	ldr	r3, [r6, #0]
 800b51e:	6825      	ldr	r5, [r4, #0]
 800b520:	6961      	ldr	r1, [r4, #20]
 800b522:	1d18      	adds	r0, r3, #4
 800b524:	6030      	str	r0, [r6, #0]
 800b526:	062e      	lsls	r6, r5, #24
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	d501      	bpl.n	800b530 <_printf_i+0x1c0>
 800b52c:	6019      	str	r1, [r3, #0]
 800b52e:	e002      	b.n	800b536 <_printf_i+0x1c6>
 800b530:	0668      	lsls	r0, r5, #25
 800b532:	d5fb      	bpl.n	800b52c <_printf_i+0x1bc>
 800b534:	8019      	strh	r1, [r3, #0]
 800b536:	2300      	movs	r3, #0
 800b538:	6123      	str	r3, [r4, #16]
 800b53a:	4616      	mov	r6, r2
 800b53c:	e7bc      	b.n	800b4b8 <_printf_i+0x148>
 800b53e:	6833      	ldr	r3, [r6, #0]
 800b540:	1d1a      	adds	r2, r3, #4
 800b542:	6032      	str	r2, [r6, #0]
 800b544:	681e      	ldr	r6, [r3, #0]
 800b546:	6862      	ldr	r2, [r4, #4]
 800b548:	2100      	movs	r1, #0
 800b54a:	4630      	mov	r0, r6
 800b54c:	f7f4 fe40 	bl	80001d0 <memchr>
 800b550:	b108      	cbz	r0, 800b556 <_printf_i+0x1e6>
 800b552:	1b80      	subs	r0, r0, r6
 800b554:	6060      	str	r0, [r4, #4]
 800b556:	6863      	ldr	r3, [r4, #4]
 800b558:	6123      	str	r3, [r4, #16]
 800b55a:	2300      	movs	r3, #0
 800b55c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b560:	e7aa      	b.n	800b4b8 <_printf_i+0x148>
 800b562:	6923      	ldr	r3, [r4, #16]
 800b564:	4632      	mov	r2, r6
 800b566:	4649      	mov	r1, r9
 800b568:	4640      	mov	r0, r8
 800b56a:	47d0      	blx	sl
 800b56c:	3001      	adds	r0, #1
 800b56e:	d0ad      	beq.n	800b4cc <_printf_i+0x15c>
 800b570:	6823      	ldr	r3, [r4, #0]
 800b572:	079b      	lsls	r3, r3, #30
 800b574:	d413      	bmi.n	800b59e <_printf_i+0x22e>
 800b576:	68e0      	ldr	r0, [r4, #12]
 800b578:	9b03      	ldr	r3, [sp, #12]
 800b57a:	4298      	cmp	r0, r3
 800b57c:	bfb8      	it	lt
 800b57e:	4618      	movlt	r0, r3
 800b580:	e7a6      	b.n	800b4d0 <_printf_i+0x160>
 800b582:	2301      	movs	r3, #1
 800b584:	4632      	mov	r2, r6
 800b586:	4649      	mov	r1, r9
 800b588:	4640      	mov	r0, r8
 800b58a:	47d0      	blx	sl
 800b58c:	3001      	adds	r0, #1
 800b58e:	d09d      	beq.n	800b4cc <_printf_i+0x15c>
 800b590:	3501      	adds	r5, #1
 800b592:	68e3      	ldr	r3, [r4, #12]
 800b594:	9903      	ldr	r1, [sp, #12]
 800b596:	1a5b      	subs	r3, r3, r1
 800b598:	42ab      	cmp	r3, r5
 800b59a:	dcf2      	bgt.n	800b582 <_printf_i+0x212>
 800b59c:	e7eb      	b.n	800b576 <_printf_i+0x206>
 800b59e:	2500      	movs	r5, #0
 800b5a0:	f104 0619 	add.w	r6, r4, #25
 800b5a4:	e7f5      	b.n	800b592 <_printf_i+0x222>
 800b5a6:	bf00      	nop
 800b5a8:	0800c3cc 	.word	0x0800c3cc
 800b5ac:	0800c3dd 	.word	0x0800c3dd

0800b5b0 <__swbuf_r>:
 800b5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5b2:	460e      	mov	r6, r1
 800b5b4:	4614      	mov	r4, r2
 800b5b6:	4605      	mov	r5, r0
 800b5b8:	b118      	cbz	r0, 800b5c2 <__swbuf_r+0x12>
 800b5ba:	6a03      	ldr	r3, [r0, #32]
 800b5bc:	b90b      	cbnz	r3, 800b5c2 <__swbuf_r+0x12>
 800b5be:	f7ff fae7 	bl	800ab90 <__sinit>
 800b5c2:	69a3      	ldr	r3, [r4, #24]
 800b5c4:	60a3      	str	r3, [r4, #8]
 800b5c6:	89a3      	ldrh	r3, [r4, #12]
 800b5c8:	071a      	lsls	r2, r3, #28
 800b5ca:	d501      	bpl.n	800b5d0 <__swbuf_r+0x20>
 800b5cc:	6923      	ldr	r3, [r4, #16]
 800b5ce:	b943      	cbnz	r3, 800b5e2 <__swbuf_r+0x32>
 800b5d0:	4621      	mov	r1, r4
 800b5d2:	4628      	mov	r0, r5
 800b5d4:	f000 f82a 	bl	800b62c <__swsetup_r>
 800b5d8:	b118      	cbz	r0, 800b5e2 <__swbuf_r+0x32>
 800b5da:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b5de:	4638      	mov	r0, r7
 800b5e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5e2:	6823      	ldr	r3, [r4, #0]
 800b5e4:	6922      	ldr	r2, [r4, #16]
 800b5e6:	1a98      	subs	r0, r3, r2
 800b5e8:	6963      	ldr	r3, [r4, #20]
 800b5ea:	b2f6      	uxtb	r6, r6
 800b5ec:	4283      	cmp	r3, r0
 800b5ee:	4637      	mov	r7, r6
 800b5f0:	dc05      	bgt.n	800b5fe <__swbuf_r+0x4e>
 800b5f2:	4621      	mov	r1, r4
 800b5f4:	4628      	mov	r0, r5
 800b5f6:	f7ff fccb 	bl	800af90 <_fflush_r>
 800b5fa:	2800      	cmp	r0, #0
 800b5fc:	d1ed      	bne.n	800b5da <__swbuf_r+0x2a>
 800b5fe:	68a3      	ldr	r3, [r4, #8]
 800b600:	3b01      	subs	r3, #1
 800b602:	60a3      	str	r3, [r4, #8]
 800b604:	6823      	ldr	r3, [r4, #0]
 800b606:	1c5a      	adds	r2, r3, #1
 800b608:	6022      	str	r2, [r4, #0]
 800b60a:	701e      	strb	r6, [r3, #0]
 800b60c:	6962      	ldr	r2, [r4, #20]
 800b60e:	1c43      	adds	r3, r0, #1
 800b610:	429a      	cmp	r2, r3
 800b612:	d004      	beq.n	800b61e <__swbuf_r+0x6e>
 800b614:	89a3      	ldrh	r3, [r4, #12]
 800b616:	07db      	lsls	r3, r3, #31
 800b618:	d5e1      	bpl.n	800b5de <__swbuf_r+0x2e>
 800b61a:	2e0a      	cmp	r6, #10
 800b61c:	d1df      	bne.n	800b5de <__swbuf_r+0x2e>
 800b61e:	4621      	mov	r1, r4
 800b620:	4628      	mov	r0, r5
 800b622:	f7ff fcb5 	bl	800af90 <_fflush_r>
 800b626:	2800      	cmp	r0, #0
 800b628:	d0d9      	beq.n	800b5de <__swbuf_r+0x2e>
 800b62a:	e7d6      	b.n	800b5da <__swbuf_r+0x2a>

0800b62c <__swsetup_r>:
 800b62c:	b538      	push	{r3, r4, r5, lr}
 800b62e:	4b29      	ldr	r3, [pc, #164]	@ (800b6d4 <__swsetup_r+0xa8>)
 800b630:	4605      	mov	r5, r0
 800b632:	6818      	ldr	r0, [r3, #0]
 800b634:	460c      	mov	r4, r1
 800b636:	b118      	cbz	r0, 800b640 <__swsetup_r+0x14>
 800b638:	6a03      	ldr	r3, [r0, #32]
 800b63a:	b90b      	cbnz	r3, 800b640 <__swsetup_r+0x14>
 800b63c:	f7ff faa8 	bl	800ab90 <__sinit>
 800b640:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b644:	0719      	lsls	r1, r3, #28
 800b646:	d422      	bmi.n	800b68e <__swsetup_r+0x62>
 800b648:	06da      	lsls	r2, r3, #27
 800b64a:	d407      	bmi.n	800b65c <__swsetup_r+0x30>
 800b64c:	2209      	movs	r2, #9
 800b64e:	602a      	str	r2, [r5, #0]
 800b650:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b654:	81a3      	strh	r3, [r4, #12]
 800b656:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b65a:	e033      	b.n	800b6c4 <__swsetup_r+0x98>
 800b65c:	0758      	lsls	r0, r3, #29
 800b65e:	d512      	bpl.n	800b686 <__swsetup_r+0x5a>
 800b660:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b662:	b141      	cbz	r1, 800b676 <__swsetup_r+0x4a>
 800b664:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b668:	4299      	cmp	r1, r3
 800b66a:	d002      	beq.n	800b672 <__swsetup_r+0x46>
 800b66c:	4628      	mov	r0, r5
 800b66e:	f7ff fbc1 	bl	800adf4 <_free_r>
 800b672:	2300      	movs	r3, #0
 800b674:	6363      	str	r3, [r4, #52]	@ 0x34
 800b676:	89a3      	ldrh	r3, [r4, #12]
 800b678:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b67c:	81a3      	strh	r3, [r4, #12]
 800b67e:	2300      	movs	r3, #0
 800b680:	6063      	str	r3, [r4, #4]
 800b682:	6923      	ldr	r3, [r4, #16]
 800b684:	6023      	str	r3, [r4, #0]
 800b686:	89a3      	ldrh	r3, [r4, #12]
 800b688:	f043 0308 	orr.w	r3, r3, #8
 800b68c:	81a3      	strh	r3, [r4, #12]
 800b68e:	6923      	ldr	r3, [r4, #16]
 800b690:	b94b      	cbnz	r3, 800b6a6 <__swsetup_r+0x7a>
 800b692:	89a3      	ldrh	r3, [r4, #12]
 800b694:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b698:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b69c:	d003      	beq.n	800b6a6 <__swsetup_r+0x7a>
 800b69e:	4621      	mov	r1, r4
 800b6a0:	4628      	mov	r0, r5
 800b6a2:	f000 f883 	bl	800b7ac <__smakebuf_r>
 800b6a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6aa:	f013 0201 	ands.w	r2, r3, #1
 800b6ae:	d00a      	beq.n	800b6c6 <__swsetup_r+0x9a>
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	60a2      	str	r2, [r4, #8]
 800b6b4:	6962      	ldr	r2, [r4, #20]
 800b6b6:	4252      	negs	r2, r2
 800b6b8:	61a2      	str	r2, [r4, #24]
 800b6ba:	6922      	ldr	r2, [r4, #16]
 800b6bc:	b942      	cbnz	r2, 800b6d0 <__swsetup_r+0xa4>
 800b6be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b6c2:	d1c5      	bne.n	800b650 <__swsetup_r+0x24>
 800b6c4:	bd38      	pop	{r3, r4, r5, pc}
 800b6c6:	0799      	lsls	r1, r3, #30
 800b6c8:	bf58      	it	pl
 800b6ca:	6962      	ldrpl	r2, [r4, #20]
 800b6cc:	60a2      	str	r2, [r4, #8]
 800b6ce:	e7f4      	b.n	800b6ba <__swsetup_r+0x8e>
 800b6d0:	2000      	movs	r0, #0
 800b6d2:	e7f7      	b.n	800b6c4 <__swsetup_r+0x98>
 800b6d4:	20000038 	.word	0x20000038

0800b6d8 <_raise_r>:
 800b6d8:	291f      	cmp	r1, #31
 800b6da:	b538      	push	{r3, r4, r5, lr}
 800b6dc:	4605      	mov	r5, r0
 800b6de:	460c      	mov	r4, r1
 800b6e0:	d904      	bls.n	800b6ec <_raise_r+0x14>
 800b6e2:	2316      	movs	r3, #22
 800b6e4:	6003      	str	r3, [r0, #0]
 800b6e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b6ea:	bd38      	pop	{r3, r4, r5, pc}
 800b6ec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b6ee:	b112      	cbz	r2, 800b6f6 <_raise_r+0x1e>
 800b6f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b6f4:	b94b      	cbnz	r3, 800b70a <_raise_r+0x32>
 800b6f6:	4628      	mov	r0, r5
 800b6f8:	f000 f830 	bl	800b75c <_getpid_r>
 800b6fc:	4622      	mov	r2, r4
 800b6fe:	4601      	mov	r1, r0
 800b700:	4628      	mov	r0, r5
 800b702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b706:	f000 b817 	b.w	800b738 <_kill_r>
 800b70a:	2b01      	cmp	r3, #1
 800b70c:	d00a      	beq.n	800b724 <_raise_r+0x4c>
 800b70e:	1c59      	adds	r1, r3, #1
 800b710:	d103      	bne.n	800b71a <_raise_r+0x42>
 800b712:	2316      	movs	r3, #22
 800b714:	6003      	str	r3, [r0, #0]
 800b716:	2001      	movs	r0, #1
 800b718:	e7e7      	b.n	800b6ea <_raise_r+0x12>
 800b71a:	2100      	movs	r1, #0
 800b71c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b720:	4620      	mov	r0, r4
 800b722:	4798      	blx	r3
 800b724:	2000      	movs	r0, #0
 800b726:	e7e0      	b.n	800b6ea <_raise_r+0x12>

0800b728 <raise>:
 800b728:	4b02      	ldr	r3, [pc, #8]	@ (800b734 <raise+0xc>)
 800b72a:	4601      	mov	r1, r0
 800b72c:	6818      	ldr	r0, [r3, #0]
 800b72e:	f7ff bfd3 	b.w	800b6d8 <_raise_r>
 800b732:	bf00      	nop
 800b734:	20000038 	.word	0x20000038

0800b738 <_kill_r>:
 800b738:	b538      	push	{r3, r4, r5, lr}
 800b73a:	4d07      	ldr	r5, [pc, #28]	@ (800b758 <_kill_r+0x20>)
 800b73c:	2300      	movs	r3, #0
 800b73e:	4604      	mov	r4, r0
 800b740:	4608      	mov	r0, r1
 800b742:	4611      	mov	r1, r2
 800b744:	602b      	str	r3, [r5, #0]
 800b746:	f7f6 f935 	bl	80019b4 <_kill>
 800b74a:	1c43      	adds	r3, r0, #1
 800b74c:	d102      	bne.n	800b754 <_kill_r+0x1c>
 800b74e:	682b      	ldr	r3, [r5, #0]
 800b750:	b103      	cbz	r3, 800b754 <_kill_r+0x1c>
 800b752:	6023      	str	r3, [r4, #0]
 800b754:	bd38      	pop	{r3, r4, r5, pc}
 800b756:	bf00      	nop
 800b758:	200022f0 	.word	0x200022f0

0800b75c <_getpid_r>:
 800b75c:	f7f6 b922 	b.w	80019a4 <_getpid>

0800b760 <__swhatbuf_r>:
 800b760:	b570      	push	{r4, r5, r6, lr}
 800b762:	460c      	mov	r4, r1
 800b764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b768:	2900      	cmp	r1, #0
 800b76a:	b096      	sub	sp, #88	@ 0x58
 800b76c:	4615      	mov	r5, r2
 800b76e:	461e      	mov	r6, r3
 800b770:	da0d      	bge.n	800b78e <__swhatbuf_r+0x2e>
 800b772:	89a3      	ldrh	r3, [r4, #12]
 800b774:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b778:	f04f 0100 	mov.w	r1, #0
 800b77c:	bf14      	ite	ne
 800b77e:	2340      	movne	r3, #64	@ 0x40
 800b780:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b784:	2000      	movs	r0, #0
 800b786:	6031      	str	r1, [r6, #0]
 800b788:	602b      	str	r3, [r5, #0]
 800b78a:	b016      	add	sp, #88	@ 0x58
 800b78c:	bd70      	pop	{r4, r5, r6, pc}
 800b78e:	466a      	mov	r2, sp
 800b790:	f000 f848 	bl	800b824 <_fstat_r>
 800b794:	2800      	cmp	r0, #0
 800b796:	dbec      	blt.n	800b772 <__swhatbuf_r+0x12>
 800b798:	9901      	ldr	r1, [sp, #4]
 800b79a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b79e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b7a2:	4259      	negs	r1, r3
 800b7a4:	4159      	adcs	r1, r3
 800b7a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b7aa:	e7eb      	b.n	800b784 <__swhatbuf_r+0x24>

0800b7ac <__smakebuf_r>:
 800b7ac:	898b      	ldrh	r3, [r1, #12]
 800b7ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7b0:	079d      	lsls	r5, r3, #30
 800b7b2:	4606      	mov	r6, r0
 800b7b4:	460c      	mov	r4, r1
 800b7b6:	d507      	bpl.n	800b7c8 <__smakebuf_r+0x1c>
 800b7b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b7bc:	6023      	str	r3, [r4, #0]
 800b7be:	6123      	str	r3, [r4, #16]
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	6163      	str	r3, [r4, #20]
 800b7c4:	b003      	add	sp, #12
 800b7c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7c8:	ab01      	add	r3, sp, #4
 800b7ca:	466a      	mov	r2, sp
 800b7cc:	f7ff ffc8 	bl	800b760 <__swhatbuf_r>
 800b7d0:	9f00      	ldr	r7, [sp, #0]
 800b7d2:	4605      	mov	r5, r0
 800b7d4:	4639      	mov	r1, r7
 800b7d6:	4630      	mov	r0, r6
 800b7d8:	f7ff f884 	bl	800a8e4 <_malloc_r>
 800b7dc:	b948      	cbnz	r0, 800b7f2 <__smakebuf_r+0x46>
 800b7de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7e2:	059a      	lsls	r2, r3, #22
 800b7e4:	d4ee      	bmi.n	800b7c4 <__smakebuf_r+0x18>
 800b7e6:	f023 0303 	bic.w	r3, r3, #3
 800b7ea:	f043 0302 	orr.w	r3, r3, #2
 800b7ee:	81a3      	strh	r3, [r4, #12]
 800b7f0:	e7e2      	b.n	800b7b8 <__smakebuf_r+0xc>
 800b7f2:	89a3      	ldrh	r3, [r4, #12]
 800b7f4:	6020      	str	r0, [r4, #0]
 800b7f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7fa:	81a3      	strh	r3, [r4, #12]
 800b7fc:	9b01      	ldr	r3, [sp, #4]
 800b7fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b802:	b15b      	cbz	r3, 800b81c <__smakebuf_r+0x70>
 800b804:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b808:	4630      	mov	r0, r6
 800b80a:	f000 f81d 	bl	800b848 <_isatty_r>
 800b80e:	b128      	cbz	r0, 800b81c <__smakebuf_r+0x70>
 800b810:	89a3      	ldrh	r3, [r4, #12]
 800b812:	f023 0303 	bic.w	r3, r3, #3
 800b816:	f043 0301 	orr.w	r3, r3, #1
 800b81a:	81a3      	strh	r3, [r4, #12]
 800b81c:	89a3      	ldrh	r3, [r4, #12]
 800b81e:	431d      	orrs	r5, r3
 800b820:	81a5      	strh	r5, [r4, #12]
 800b822:	e7cf      	b.n	800b7c4 <__smakebuf_r+0x18>

0800b824 <_fstat_r>:
 800b824:	b538      	push	{r3, r4, r5, lr}
 800b826:	4d07      	ldr	r5, [pc, #28]	@ (800b844 <_fstat_r+0x20>)
 800b828:	2300      	movs	r3, #0
 800b82a:	4604      	mov	r4, r0
 800b82c:	4608      	mov	r0, r1
 800b82e:	4611      	mov	r1, r2
 800b830:	602b      	str	r3, [r5, #0]
 800b832:	f7f6 f91f 	bl	8001a74 <_fstat>
 800b836:	1c43      	adds	r3, r0, #1
 800b838:	d102      	bne.n	800b840 <_fstat_r+0x1c>
 800b83a:	682b      	ldr	r3, [r5, #0]
 800b83c:	b103      	cbz	r3, 800b840 <_fstat_r+0x1c>
 800b83e:	6023      	str	r3, [r4, #0]
 800b840:	bd38      	pop	{r3, r4, r5, pc}
 800b842:	bf00      	nop
 800b844:	200022f0 	.word	0x200022f0

0800b848 <_isatty_r>:
 800b848:	b538      	push	{r3, r4, r5, lr}
 800b84a:	4d06      	ldr	r5, [pc, #24]	@ (800b864 <_isatty_r+0x1c>)
 800b84c:	2300      	movs	r3, #0
 800b84e:	4604      	mov	r4, r0
 800b850:	4608      	mov	r0, r1
 800b852:	602b      	str	r3, [r5, #0]
 800b854:	f7f6 f91e 	bl	8001a94 <_isatty>
 800b858:	1c43      	adds	r3, r0, #1
 800b85a:	d102      	bne.n	800b862 <_isatty_r+0x1a>
 800b85c:	682b      	ldr	r3, [r5, #0]
 800b85e:	b103      	cbz	r3, 800b862 <_isatty_r+0x1a>
 800b860:	6023      	str	r3, [r4, #0]
 800b862:	bd38      	pop	{r3, r4, r5, pc}
 800b864:	200022f0 	.word	0x200022f0

0800b868 <sinf>:
 800b868:	ee10 3a10 	vmov	r3, s0
 800b86c:	b507      	push	{r0, r1, r2, lr}
 800b86e:	4a1f      	ldr	r2, [pc, #124]	@ (800b8ec <sinf+0x84>)
 800b870:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b874:	4293      	cmp	r3, r2
 800b876:	d807      	bhi.n	800b888 <sinf+0x20>
 800b878:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800b8f0 <sinf+0x88>
 800b87c:	2000      	movs	r0, #0
 800b87e:	b003      	add	sp, #12
 800b880:	f85d eb04 	ldr.w	lr, [sp], #4
 800b884:	f000 b88e 	b.w	800b9a4 <__kernel_sinf>
 800b888:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b88c:	d304      	bcc.n	800b898 <sinf+0x30>
 800b88e:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b892:	b003      	add	sp, #12
 800b894:	f85d fb04 	ldr.w	pc, [sp], #4
 800b898:	4668      	mov	r0, sp
 800b89a:	f000 f8cb 	bl	800ba34 <__ieee754_rem_pio2f>
 800b89e:	f000 0003 	and.w	r0, r0, #3
 800b8a2:	2801      	cmp	r0, #1
 800b8a4:	d00a      	beq.n	800b8bc <sinf+0x54>
 800b8a6:	2802      	cmp	r0, #2
 800b8a8:	d00f      	beq.n	800b8ca <sinf+0x62>
 800b8aa:	b9c0      	cbnz	r0, 800b8de <sinf+0x76>
 800b8ac:	eddd 0a01 	vldr	s1, [sp, #4]
 800b8b0:	ed9d 0a00 	vldr	s0, [sp]
 800b8b4:	2001      	movs	r0, #1
 800b8b6:	f000 f875 	bl	800b9a4 <__kernel_sinf>
 800b8ba:	e7ea      	b.n	800b892 <sinf+0x2a>
 800b8bc:	eddd 0a01 	vldr	s1, [sp, #4]
 800b8c0:	ed9d 0a00 	vldr	s0, [sp]
 800b8c4:	f000 f816 	bl	800b8f4 <__kernel_cosf>
 800b8c8:	e7e3      	b.n	800b892 <sinf+0x2a>
 800b8ca:	eddd 0a01 	vldr	s1, [sp, #4]
 800b8ce:	ed9d 0a00 	vldr	s0, [sp]
 800b8d2:	2001      	movs	r0, #1
 800b8d4:	f000 f866 	bl	800b9a4 <__kernel_sinf>
 800b8d8:	eeb1 0a40 	vneg.f32	s0, s0
 800b8dc:	e7d9      	b.n	800b892 <sinf+0x2a>
 800b8de:	eddd 0a01 	vldr	s1, [sp, #4]
 800b8e2:	ed9d 0a00 	vldr	s0, [sp]
 800b8e6:	f000 f805 	bl	800b8f4 <__kernel_cosf>
 800b8ea:	e7f5      	b.n	800b8d8 <sinf+0x70>
 800b8ec:	3f490fd8 	.word	0x3f490fd8
 800b8f0:	00000000 	.word	0x00000000

0800b8f4 <__kernel_cosf>:
 800b8f4:	ee10 3a10 	vmov	r3, s0
 800b8f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b8fc:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b900:	eef0 6a40 	vmov.f32	s13, s0
 800b904:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b908:	d204      	bcs.n	800b914 <__kernel_cosf+0x20>
 800b90a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800b90e:	ee17 2a90 	vmov	r2, s15
 800b912:	b342      	cbz	r2, 800b966 <__kernel_cosf+0x72>
 800b914:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800b918:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800b984 <__kernel_cosf+0x90>
 800b91c:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800b988 <__kernel_cosf+0x94>
 800b920:	4a1a      	ldr	r2, [pc, #104]	@ (800b98c <__kernel_cosf+0x98>)
 800b922:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b926:	4293      	cmp	r3, r2
 800b928:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800b990 <__kernel_cosf+0x9c>
 800b92c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b930:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800b994 <__kernel_cosf+0xa0>
 800b934:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b938:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800b998 <__kernel_cosf+0xa4>
 800b93c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b940:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800b99c <__kernel_cosf+0xa8>
 800b944:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b948:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800b94c:	ee26 6a07 	vmul.f32	s12, s12, s14
 800b950:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b954:	eee7 0a06 	vfma.f32	s1, s14, s12
 800b958:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b95c:	d804      	bhi.n	800b968 <__kernel_cosf+0x74>
 800b95e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800b962:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b966:	4770      	bx	lr
 800b968:	4a0d      	ldr	r2, [pc, #52]	@ (800b9a0 <__kernel_cosf+0xac>)
 800b96a:	4293      	cmp	r3, r2
 800b96c:	bf9a      	itte	ls
 800b96e:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800b972:	ee07 3a10 	vmovls	s14, r3
 800b976:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800b97a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b97e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b982:	e7ec      	b.n	800b95e <__kernel_cosf+0x6a>
 800b984:	ad47d74e 	.word	0xad47d74e
 800b988:	310f74f6 	.word	0x310f74f6
 800b98c:	3e999999 	.word	0x3e999999
 800b990:	b493f27c 	.word	0xb493f27c
 800b994:	37d00d01 	.word	0x37d00d01
 800b998:	bab60b61 	.word	0xbab60b61
 800b99c:	3d2aaaab 	.word	0x3d2aaaab
 800b9a0:	3f480000 	.word	0x3f480000

0800b9a4 <__kernel_sinf>:
 800b9a4:	ee10 3a10 	vmov	r3, s0
 800b9a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b9ac:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b9b0:	d204      	bcs.n	800b9bc <__kernel_sinf+0x18>
 800b9b2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b9b6:	ee17 3a90 	vmov	r3, s15
 800b9ba:	b35b      	cbz	r3, 800ba14 <__kernel_sinf+0x70>
 800b9bc:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b9c0:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800ba18 <__kernel_sinf+0x74>
 800b9c4:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800ba1c <__kernel_sinf+0x78>
 800b9c8:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b9cc:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800ba20 <__kernel_sinf+0x7c>
 800b9d0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b9d4:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800ba24 <__kernel_sinf+0x80>
 800b9d8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b9dc:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800ba28 <__kernel_sinf+0x84>
 800b9e0:	ee60 6a07 	vmul.f32	s13, s0, s14
 800b9e4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b9e8:	b930      	cbnz	r0, 800b9f8 <__kernel_sinf+0x54>
 800b9ea:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800ba2c <__kernel_sinf+0x88>
 800b9ee:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b9f2:	eea6 0a26 	vfma.f32	s0, s12, s13
 800b9f6:	4770      	bx	lr
 800b9f8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b9fc:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800ba00:	eee0 7a86 	vfma.f32	s15, s1, s12
 800ba04:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800ba08:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800ba30 <__kernel_sinf+0x8c>
 800ba0c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800ba10:	ee30 0a60 	vsub.f32	s0, s0, s1
 800ba14:	4770      	bx	lr
 800ba16:	bf00      	nop
 800ba18:	2f2ec9d3 	.word	0x2f2ec9d3
 800ba1c:	b2d72f34 	.word	0xb2d72f34
 800ba20:	3638ef1b 	.word	0x3638ef1b
 800ba24:	b9500d01 	.word	0xb9500d01
 800ba28:	3c088889 	.word	0x3c088889
 800ba2c:	be2aaaab 	.word	0xbe2aaaab
 800ba30:	3e2aaaab 	.word	0x3e2aaaab

0800ba34 <__ieee754_rem_pio2f>:
 800ba34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba36:	ee10 6a10 	vmov	r6, s0
 800ba3a:	4b88      	ldr	r3, [pc, #544]	@ (800bc5c <__ieee754_rem_pio2f+0x228>)
 800ba3c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800ba40:	429d      	cmp	r5, r3
 800ba42:	b087      	sub	sp, #28
 800ba44:	4604      	mov	r4, r0
 800ba46:	d805      	bhi.n	800ba54 <__ieee754_rem_pio2f+0x20>
 800ba48:	2300      	movs	r3, #0
 800ba4a:	ed80 0a00 	vstr	s0, [r0]
 800ba4e:	6043      	str	r3, [r0, #4]
 800ba50:	2000      	movs	r0, #0
 800ba52:	e022      	b.n	800ba9a <__ieee754_rem_pio2f+0x66>
 800ba54:	4b82      	ldr	r3, [pc, #520]	@ (800bc60 <__ieee754_rem_pio2f+0x22c>)
 800ba56:	429d      	cmp	r5, r3
 800ba58:	d83a      	bhi.n	800bad0 <__ieee754_rem_pio2f+0x9c>
 800ba5a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800ba5e:	2e00      	cmp	r6, #0
 800ba60:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800bc64 <__ieee754_rem_pio2f+0x230>
 800ba64:	4a80      	ldr	r2, [pc, #512]	@ (800bc68 <__ieee754_rem_pio2f+0x234>)
 800ba66:	f023 030f 	bic.w	r3, r3, #15
 800ba6a:	dd18      	ble.n	800ba9e <__ieee754_rem_pio2f+0x6a>
 800ba6c:	4293      	cmp	r3, r2
 800ba6e:	ee70 7a47 	vsub.f32	s15, s0, s14
 800ba72:	bf09      	itett	eq
 800ba74:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800bc6c <__ieee754_rem_pio2f+0x238>
 800ba78:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800bc70 <__ieee754_rem_pio2f+0x23c>
 800ba7c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800bc74 <__ieee754_rem_pio2f+0x240>
 800ba80:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800ba84:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800ba88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ba8c:	ed80 7a00 	vstr	s14, [r0]
 800ba90:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ba94:	edc0 7a01 	vstr	s15, [r0, #4]
 800ba98:	2001      	movs	r0, #1
 800ba9a:	b007      	add	sp, #28
 800ba9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	ee70 7a07 	vadd.f32	s15, s0, s14
 800baa4:	bf09      	itett	eq
 800baa6:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800bc6c <__ieee754_rem_pio2f+0x238>
 800baaa:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800bc70 <__ieee754_rem_pio2f+0x23c>
 800baae:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800bc74 <__ieee754_rem_pio2f+0x240>
 800bab2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800bab6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800baba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800babe:	ed80 7a00 	vstr	s14, [r0]
 800bac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bac6:	edc0 7a01 	vstr	s15, [r0, #4]
 800baca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bace:	e7e4      	b.n	800ba9a <__ieee754_rem_pio2f+0x66>
 800bad0:	4b69      	ldr	r3, [pc, #420]	@ (800bc78 <__ieee754_rem_pio2f+0x244>)
 800bad2:	429d      	cmp	r5, r3
 800bad4:	d873      	bhi.n	800bbbe <__ieee754_rem_pio2f+0x18a>
 800bad6:	f000 f8dd 	bl	800bc94 <fabsf>
 800bada:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800bc7c <__ieee754_rem_pio2f+0x248>
 800bade:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800bae2:	eee0 7a07 	vfma.f32	s15, s0, s14
 800bae6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800baea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800baee:	ee17 0a90 	vmov	r0, s15
 800baf2:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800bc64 <__ieee754_rem_pio2f+0x230>
 800baf6:	eea7 0a67 	vfms.f32	s0, s14, s15
 800bafa:	281f      	cmp	r0, #31
 800bafc:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800bc70 <__ieee754_rem_pio2f+0x23c>
 800bb00:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb04:	eeb1 6a47 	vneg.f32	s12, s14
 800bb08:	ee70 6a67 	vsub.f32	s13, s0, s15
 800bb0c:	ee16 1a90 	vmov	r1, s13
 800bb10:	dc09      	bgt.n	800bb26 <__ieee754_rem_pio2f+0xf2>
 800bb12:	4a5b      	ldr	r2, [pc, #364]	@ (800bc80 <__ieee754_rem_pio2f+0x24c>)
 800bb14:	1e47      	subs	r7, r0, #1
 800bb16:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800bb1a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800bb1e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800bb22:	4293      	cmp	r3, r2
 800bb24:	d107      	bne.n	800bb36 <__ieee754_rem_pio2f+0x102>
 800bb26:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800bb2a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800bb2e:	2a08      	cmp	r2, #8
 800bb30:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800bb34:	dc14      	bgt.n	800bb60 <__ieee754_rem_pio2f+0x12c>
 800bb36:	6021      	str	r1, [r4, #0]
 800bb38:	ed94 7a00 	vldr	s14, [r4]
 800bb3c:	ee30 0a47 	vsub.f32	s0, s0, s14
 800bb40:	2e00      	cmp	r6, #0
 800bb42:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bb46:	ed84 0a01 	vstr	s0, [r4, #4]
 800bb4a:	daa6      	bge.n	800ba9a <__ieee754_rem_pio2f+0x66>
 800bb4c:	eeb1 7a47 	vneg.f32	s14, s14
 800bb50:	eeb1 0a40 	vneg.f32	s0, s0
 800bb54:	ed84 7a00 	vstr	s14, [r4]
 800bb58:	ed84 0a01 	vstr	s0, [r4, #4]
 800bb5c:	4240      	negs	r0, r0
 800bb5e:	e79c      	b.n	800ba9a <__ieee754_rem_pio2f+0x66>
 800bb60:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800bc6c <__ieee754_rem_pio2f+0x238>
 800bb64:	eef0 6a40 	vmov.f32	s13, s0
 800bb68:	eee6 6a25 	vfma.f32	s13, s12, s11
 800bb6c:	ee70 7a66 	vsub.f32	s15, s0, s13
 800bb70:	eee6 7a25 	vfma.f32	s15, s12, s11
 800bb74:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800bc74 <__ieee754_rem_pio2f+0x240>
 800bb78:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800bb7c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800bb80:	ee15 2a90 	vmov	r2, s11
 800bb84:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800bb88:	1a5b      	subs	r3, r3, r1
 800bb8a:	2b19      	cmp	r3, #25
 800bb8c:	dc04      	bgt.n	800bb98 <__ieee754_rem_pio2f+0x164>
 800bb8e:	edc4 5a00 	vstr	s11, [r4]
 800bb92:	eeb0 0a66 	vmov.f32	s0, s13
 800bb96:	e7cf      	b.n	800bb38 <__ieee754_rem_pio2f+0x104>
 800bb98:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800bc84 <__ieee754_rem_pio2f+0x250>
 800bb9c:	eeb0 0a66 	vmov.f32	s0, s13
 800bba0:	eea6 0a25 	vfma.f32	s0, s12, s11
 800bba4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800bba8:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800bc88 <__ieee754_rem_pio2f+0x254>
 800bbac:	eee6 7a25 	vfma.f32	s15, s12, s11
 800bbb0:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800bbb4:	ee30 7a67 	vsub.f32	s14, s0, s15
 800bbb8:	ed84 7a00 	vstr	s14, [r4]
 800bbbc:	e7bc      	b.n	800bb38 <__ieee754_rem_pio2f+0x104>
 800bbbe:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800bbc2:	d306      	bcc.n	800bbd2 <__ieee754_rem_pio2f+0x19e>
 800bbc4:	ee70 7a40 	vsub.f32	s15, s0, s0
 800bbc8:	edc0 7a01 	vstr	s15, [r0, #4]
 800bbcc:	edc0 7a00 	vstr	s15, [r0]
 800bbd0:	e73e      	b.n	800ba50 <__ieee754_rem_pio2f+0x1c>
 800bbd2:	15ea      	asrs	r2, r5, #23
 800bbd4:	3a86      	subs	r2, #134	@ 0x86
 800bbd6:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800bbda:	ee07 3a90 	vmov	s15, r3
 800bbde:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800bbe2:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800bc8c <__ieee754_rem_pio2f+0x258>
 800bbe6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bbea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bbee:	ed8d 7a03 	vstr	s14, [sp, #12]
 800bbf2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bbf6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800bbfa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bbfe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bc02:	ed8d 7a04 	vstr	s14, [sp, #16]
 800bc06:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bc0a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bc0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc12:	edcd 7a05 	vstr	s15, [sp, #20]
 800bc16:	d11e      	bne.n	800bc56 <__ieee754_rem_pio2f+0x222>
 800bc18:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800bc1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc20:	bf0c      	ite	eq
 800bc22:	2301      	moveq	r3, #1
 800bc24:	2302      	movne	r3, #2
 800bc26:	491a      	ldr	r1, [pc, #104]	@ (800bc90 <__ieee754_rem_pio2f+0x25c>)
 800bc28:	9101      	str	r1, [sp, #4]
 800bc2a:	2102      	movs	r1, #2
 800bc2c:	9100      	str	r1, [sp, #0]
 800bc2e:	a803      	add	r0, sp, #12
 800bc30:	4621      	mov	r1, r4
 800bc32:	f000 f837 	bl	800bca4 <__kernel_rem_pio2f>
 800bc36:	2e00      	cmp	r6, #0
 800bc38:	f6bf af2f 	bge.w	800ba9a <__ieee754_rem_pio2f+0x66>
 800bc3c:	edd4 7a00 	vldr	s15, [r4]
 800bc40:	eef1 7a67 	vneg.f32	s15, s15
 800bc44:	edc4 7a00 	vstr	s15, [r4]
 800bc48:	edd4 7a01 	vldr	s15, [r4, #4]
 800bc4c:	eef1 7a67 	vneg.f32	s15, s15
 800bc50:	edc4 7a01 	vstr	s15, [r4, #4]
 800bc54:	e782      	b.n	800bb5c <__ieee754_rem_pio2f+0x128>
 800bc56:	2303      	movs	r3, #3
 800bc58:	e7e5      	b.n	800bc26 <__ieee754_rem_pio2f+0x1f2>
 800bc5a:	bf00      	nop
 800bc5c:	3f490fd8 	.word	0x3f490fd8
 800bc60:	4016cbe3 	.word	0x4016cbe3
 800bc64:	3fc90f80 	.word	0x3fc90f80
 800bc68:	3fc90fd0 	.word	0x3fc90fd0
 800bc6c:	37354400 	.word	0x37354400
 800bc70:	37354443 	.word	0x37354443
 800bc74:	2e85a308 	.word	0x2e85a308
 800bc78:	43490f80 	.word	0x43490f80
 800bc7c:	3f22f984 	.word	0x3f22f984
 800bc80:	0800c3f0 	.word	0x0800c3f0
 800bc84:	2e85a300 	.word	0x2e85a300
 800bc88:	248d3132 	.word	0x248d3132
 800bc8c:	43800000 	.word	0x43800000
 800bc90:	0800c470 	.word	0x0800c470

0800bc94 <fabsf>:
 800bc94:	ee10 3a10 	vmov	r3, s0
 800bc98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bc9c:	ee00 3a10 	vmov	s0, r3
 800bca0:	4770      	bx	lr
	...

0800bca4 <__kernel_rem_pio2f>:
 800bca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bca8:	ed2d 8b04 	vpush	{d8-d9}
 800bcac:	b0d9      	sub	sp, #356	@ 0x164
 800bcae:	4690      	mov	r8, r2
 800bcb0:	9001      	str	r0, [sp, #4]
 800bcb2:	4ab9      	ldr	r2, [pc, #740]	@ (800bf98 <__kernel_rem_pio2f+0x2f4>)
 800bcb4:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800bcb6:	f118 0f04 	cmn.w	r8, #4
 800bcba:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800bcbe:	460f      	mov	r7, r1
 800bcc0:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800bcc4:	db27      	blt.n	800bd16 <__kernel_rem_pio2f+0x72>
 800bcc6:	f1b8 0203 	subs.w	r2, r8, #3
 800bcca:	bf48      	it	mi
 800bccc:	f108 0204 	addmi.w	r2, r8, #4
 800bcd0:	10d2      	asrs	r2, r2, #3
 800bcd2:	1c55      	adds	r5, r2, #1
 800bcd4:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800bcd6:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800bfa8 <__kernel_rem_pio2f+0x304>
 800bcda:	00e8      	lsls	r0, r5, #3
 800bcdc:	eba2 060b 	sub.w	r6, r2, fp
 800bce0:	9002      	str	r0, [sp, #8]
 800bce2:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800bce6:	eb0a 0c0b 	add.w	ip, sl, fp
 800bcea:	ac1c      	add	r4, sp, #112	@ 0x70
 800bcec:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800bcf0:	2000      	movs	r0, #0
 800bcf2:	4560      	cmp	r0, ip
 800bcf4:	dd11      	ble.n	800bd1a <__kernel_rem_pio2f+0x76>
 800bcf6:	a91c      	add	r1, sp, #112	@ 0x70
 800bcf8:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800bcfc:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800bd00:	f04f 0c00 	mov.w	ip, #0
 800bd04:	45d4      	cmp	ip, sl
 800bd06:	dc27      	bgt.n	800bd58 <__kernel_rem_pio2f+0xb4>
 800bd08:	f8dd e004 	ldr.w	lr, [sp, #4]
 800bd0c:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800bfa8 <__kernel_rem_pio2f+0x304>
 800bd10:	4606      	mov	r6, r0
 800bd12:	2400      	movs	r4, #0
 800bd14:	e016      	b.n	800bd44 <__kernel_rem_pio2f+0xa0>
 800bd16:	2200      	movs	r2, #0
 800bd18:	e7db      	b.n	800bcd2 <__kernel_rem_pio2f+0x2e>
 800bd1a:	42c6      	cmn	r6, r0
 800bd1c:	bf5d      	ittte	pl
 800bd1e:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800bd22:	ee07 1a90 	vmovpl	s15, r1
 800bd26:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800bd2a:	eef0 7a47 	vmovmi.f32	s15, s14
 800bd2e:	ece4 7a01 	vstmia	r4!, {s15}
 800bd32:	3001      	adds	r0, #1
 800bd34:	e7dd      	b.n	800bcf2 <__kernel_rem_pio2f+0x4e>
 800bd36:	ecfe 6a01 	vldmia	lr!, {s13}
 800bd3a:	ed96 7a00 	vldr	s14, [r6]
 800bd3e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bd42:	3401      	adds	r4, #1
 800bd44:	455c      	cmp	r4, fp
 800bd46:	f1a6 0604 	sub.w	r6, r6, #4
 800bd4a:	ddf4      	ble.n	800bd36 <__kernel_rem_pio2f+0x92>
 800bd4c:	ece9 7a01 	vstmia	r9!, {s15}
 800bd50:	f10c 0c01 	add.w	ip, ip, #1
 800bd54:	3004      	adds	r0, #4
 800bd56:	e7d5      	b.n	800bd04 <__kernel_rem_pio2f+0x60>
 800bd58:	a908      	add	r1, sp, #32
 800bd5a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bd5e:	9104      	str	r1, [sp, #16]
 800bd60:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800bd62:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800bfa4 <__kernel_rem_pio2f+0x300>
 800bd66:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800bfa0 <__kernel_rem_pio2f+0x2fc>
 800bd6a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800bd6e:	9203      	str	r2, [sp, #12]
 800bd70:	4654      	mov	r4, sl
 800bd72:	00a2      	lsls	r2, r4, #2
 800bd74:	9205      	str	r2, [sp, #20]
 800bd76:	aa58      	add	r2, sp, #352	@ 0x160
 800bd78:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800bd7c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800bd80:	a944      	add	r1, sp, #272	@ 0x110
 800bd82:	aa08      	add	r2, sp, #32
 800bd84:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800bd88:	4694      	mov	ip, r2
 800bd8a:	4626      	mov	r6, r4
 800bd8c:	2e00      	cmp	r6, #0
 800bd8e:	f1a0 0004 	sub.w	r0, r0, #4
 800bd92:	dc4c      	bgt.n	800be2e <__kernel_rem_pio2f+0x18a>
 800bd94:	4628      	mov	r0, r5
 800bd96:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bd9a:	f000 f9f5 	bl	800c188 <scalbnf>
 800bd9e:	eeb0 8a40 	vmov.f32	s16, s0
 800bda2:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800bda6:	ee28 0a00 	vmul.f32	s0, s16, s0
 800bdaa:	f000 fa53 	bl	800c254 <floorf>
 800bdae:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800bdb2:	eea0 8a67 	vfms.f32	s16, s0, s15
 800bdb6:	2d00      	cmp	r5, #0
 800bdb8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bdbc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800bdc0:	ee17 9a90 	vmov	r9, s15
 800bdc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bdc8:	ee38 8a67 	vsub.f32	s16, s16, s15
 800bdcc:	dd41      	ble.n	800be52 <__kernel_rem_pio2f+0x1ae>
 800bdce:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 800bdd2:	a908      	add	r1, sp, #32
 800bdd4:	f1c5 0e08 	rsb	lr, r5, #8
 800bdd8:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800bddc:	fa46 f00e 	asr.w	r0, r6, lr
 800bde0:	4481      	add	r9, r0
 800bde2:	fa00 f00e 	lsl.w	r0, r0, lr
 800bde6:	1a36      	subs	r6, r6, r0
 800bde8:	f1c5 0007 	rsb	r0, r5, #7
 800bdec:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800bdf0:	4106      	asrs	r6, r0
 800bdf2:	2e00      	cmp	r6, #0
 800bdf4:	dd3c      	ble.n	800be70 <__kernel_rem_pio2f+0x1cc>
 800bdf6:	f04f 0e00 	mov.w	lr, #0
 800bdfa:	f109 0901 	add.w	r9, r9, #1
 800bdfe:	4670      	mov	r0, lr
 800be00:	4574      	cmp	r4, lr
 800be02:	dc68      	bgt.n	800bed6 <__kernel_rem_pio2f+0x232>
 800be04:	2d00      	cmp	r5, #0
 800be06:	dd03      	ble.n	800be10 <__kernel_rem_pio2f+0x16c>
 800be08:	2d01      	cmp	r5, #1
 800be0a:	d074      	beq.n	800bef6 <__kernel_rem_pio2f+0x252>
 800be0c:	2d02      	cmp	r5, #2
 800be0e:	d07d      	beq.n	800bf0c <__kernel_rem_pio2f+0x268>
 800be10:	2e02      	cmp	r6, #2
 800be12:	d12d      	bne.n	800be70 <__kernel_rem_pio2f+0x1cc>
 800be14:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800be18:	ee30 8a48 	vsub.f32	s16, s0, s16
 800be1c:	b340      	cbz	r0, 800be70 <__kernel_rem_pio2f+0x1cc>
 800be1e:	4628      	mov	r0, r5
 800be20:	9306      	str	r3, [sp, #24]
 800be22:	f000 f9b1 	bl	800c188 <scalbnf>
 800be26:	9b06      	ldr	r3, [sp, #24]
 800be28:	ee38 8a40 	vsub.f32	s16, s16, s0
 800be2c:	e020      	b.n	800be70 <__kernel_rem_pio2f+0x1cc>
 800be2e:	ee60 7a28 	vmul.f32	s15, s0, s17
 800be32:	3e01      	subs	r6, #1
 800be34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be3c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800be40:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800be44:	ecac 0a01 	vstmia	ip!, {s0}
 800be48:	ed90 0a00 	vldr	s0, [r0]
 800be4c:	ee37 0a80 	vadd.f32	s0, s15, s0
 800be50:	e79c      	b.n	800bd8c <__kernel_rem_pio2f+0xe8>
 800be52:	d105      	bne.n	800be60 <__kernel_rem_pio2f+0x1bc>
 800be54:	1e60      	subs	r0, r4, #1
 800be56:	a908      	add	r1, sp, #32
 800be58:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800be5c:	11f6      	asrs	r6, r6, #7
 800be5e:	e7c8      	b.n	800bdf2 <__kernel_rem_pio2f+0x14e>
 800be60:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800be64:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800be68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be6c:	da31      	bge.n	800bed2 <__kernel_rem_pio2f+0x22e>
 800be6e:	2600      	movs	r6, #0
 800be70:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800be74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be78:	f040 8098 	bne.w	800bfac <__kernel_rem_pio2f+0x308>
 800be7c:	1e60      	subs	r0, r4, #1
 800be7e:	2200      	movs	r2, #0
 800be80:	4550      	cmp	r0, sl
 800be82:	da4b      	bge.n	800bf1c <__kernel_rem_pio2f+0x278>
 800be84:	2a00      	cmp	r2, #0
 800be86:	d065      	beq.n	800bf54 <__kernel_rem_pio2f+0x2b0>
 800be88:	3c01      	subs	r4, #1
 800be8a:	ab08      	add	r3, sp, #32
 800be8c:	3d08      	subs	r5, #8
 800be8e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d0f8      	beq.n	800be88 <__kernel_rem_pio2f+0x1e4>
 800be96:	4628      	mov	r0, r5
 800be98:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800be9c:	f000 f974 	bl	800c188 <scalbnf>
 800bea0:	1c63      	adds	r3, r4, #1
 800bea2:	aa44      	add	r2, sp, #272	@ 0x110
 800bea4:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800bfa4 <__kernel_rem_pio2f+0x300>
 800bea8:	0099      	lsls	r1, r3, #2
 800beaa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800beae:	4623      	mov	r3, r4
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	f280 80a9 	bge.w	800c008 <__kernel_rem_pio2f+0x364>
 800beb6:	4623      	mov	r3, r4
 800beb8:	2b00      	cmp	r3, #0
 800beba:	f2c0 80c7 	blt.w	800c04c <__kernel_rem_pio2f+0x3a8>
 800bebe:	aa44      	add	r2, sp, #272	@ 0x110
 800bec0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800bec4:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800bf9c <__kernel_rem_pio2f+0x2f8>
 800bec8:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800bfa8 <__kernel_rem_pio2f+0x304>
 800becc:	2000      	movs	r0, #0
 800bece:	1ae2      	subs	r2, r4, r3
 800bed0:	e0b1      	b.n	800c036 <__kernel_rem_pio2f+0x392>
 800bed2:	2602      	movs	r6, #2
 800bed4:	e78f      	b.n	800bdf6 <__kernel_rem_pio2f+0x152>
 800bed6:	f852 1b04 	ldr.w	r1, [r2], #4
 800beda:	b948      	cbnz	r0, 800bef0 <__kernel_rem_pio2f+0x24c>
 800bedc:	b121      	cbz	r1, 800bee8 <__kernel_rem_pio2f+0x244>
 800bede:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800bee2:	f842 1c04 	str.w	r1, [r2, #-4]
 800bee6:	2101      	movs	r1, #1
 800bee8:	f10e 0e01 	add.w	lr, lr, #1
 800beec:	4608      	mov	r0, r1
 800beee:	e787      	b.n	800be00 <__kernel_rem_pio2f+0x15c>
 800bef0:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800bef4:	e7f5      	b.n	800bee2 <__kernel_rem_pio2f+0x23e>
 800bef6:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 800befa:	aa08      	add	r2, sp, #32
 800befc:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800bf00:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800bf04:	a908      	add	r1, sp, #32
 800bf06:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800bf0a:	e781      	b.n	800be10 <__kernel_rem_pio2f+0x16c>
 800bf0c:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 800bf10:	aa08      	add	r2, sp, #32
 800bf12:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800bf16:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800bf1a:	e7f3      	b.n	800bf04 <__kernel_rem_pio2f+0x260>
 800bf1c:	a908      	add	r1, sp, #32
 800bf1e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800bf22:	3801      	subs	r0, #1
 800bf24:	430a      	orrs	r2, r1
 800bf26:	e7ab      	b.n	800be80 <__kernel_rem_pio2f+0x1dc>
 800bf28:	3201      	adds	r2, #1
 800bf2a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800bf2e:	2e00      	cmp	r6, #0
 800bf30:	d0fa      	beq.n	800bf28 <__kernel_rem_pio2f+0x284>
 800bf32:	9905      	ldr	r1, [sp, #20]
 800bf34:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800bf38:	eb0d 0001 	add.w	r0, sp, r1
 800bf3c:	18e6      	adds	r6, r4, r3
 800bf3e:	a91c      	add	r1, sp, #112	@ 0x70
 800bf40:	f104 0c01 	add.w	ip, r4, #1
 800bf44:	384c      	subs	r0, #76	@ 0x4c
 800bf46:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800bf4a:	4422      	add	r2, r4
 800bf4c:	4562      	cmp	r2, ip
 800bf4e:	da04      	bge.n	800bf5a <__kernel_rem_pio2f+0x2b6>
 800bf50:	4614      	mov	r4, r2
 800bf52:	e70e      	b.n	800bd72 <__kernel_rem_pio2f+0xce>
 800bf54:	9804      	ldr	r0, [sp, #16]
 800bf56:	2201      	movs	r2, #1
 800bf58:	e7e7      	b.n	800bf2a <__kernel_rem_pio2f+0x286>
 800bf5a:	9903      	ldr	r1, [sp, #12]
 800bf5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 800bf60:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800bf64:	9105      	str	r1, [sp, #20]
 800bf66:	ee07 1a90 	vmov	s15, r1
 800bf6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bf6e:	2400      	movs	r4, #0
 800bf70:	ece6 7a01 	vstmia	r6!, {s15}
 800bf74:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800bfa8 <__kernel_rem_pio2f+0x304>
 800bf78:	46b1      	mov	r9, r6
 800bf7a:	455c      	cmp	r4, fp
 800bf7c:	dd04      	ble.n	800bf88 <__kernel_rem_pio2f+0x2e4>
 800bf7e:	ece0 7a01 	vstmia	r0!, {s15}
 800bf82:	f10c 0c01 	add.w	ip, ip, #1
 800bf86:	e7e1      	b.n	800bf4c <__kernel_rem_pio2f+0x2a8>
 800bf88:	ecfe 6a01 	vldmia	lr!, {s13}
 800bf8c:	ed39 7a01 	vldmdb	r9!, {s14}
 800bf90:	3401      	adds	r4, #1
 800bf92:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bf96:	e7f0      	b.n	800bf7a <__kernel_rem_pio2f+0x2d6>
 800bf98:	0800c7b4 	.word	0x0800c7b4
 800bf9c:	0800c788 	.word	0x0800c788
 800bfa0:	43800000 	.word	0x43800000
 800bfa4:	3b800000 	.word	0x3b800000
 800bfa8:	00000000 	.word	0x00000000
 800bfac:	9b02      	ldr	r3, [sp, #8]
 800bfae:	eeb0 0a48 	vmov.f32	s0, s16
 800bfb2:	eba3 0008 	sub.w	r0, r3, r8
 800bfb6:	f000 f8e7 	bl	800c188 <scalbnf>
 800bfba:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800bfa0 <__kernel_rem_pio2f+0x2fc>
 800bfbe:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800bfc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfc6:	db19      	blt.n	800bffc <__kernel_rem_pio2f+0x358>
 800bfc8:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800bfa4 <__kernel_rem_pio2f+0x300>
 800bfcc:	ee60 7a27 	vmul.f32	s15, s0, s15
 800bfd0:	aa08      	add	r2, sp, #32
 800bfd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bfd6:	3508      	adds	r5, #8
 800bfd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bfdc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800bfe0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bfe4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bfe8:	ee10 3a10 	vmov	r3, s0
 800bfec:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800bff0:	ee17 3a90 	vmov	r3, s15
 800bff4:	3401      	adds	r4, #1
 800bff6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800bffa:	e74c      	b.n	800be96 <__kernel_rem_pio2f+0x1f2>
 800bffc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c000:	aa08      	add	r2, sp, #32
 800c002:	ee10 3a10 	vmov	r3, s0
 800c006:	e7f6      	b.n	800bff6 <__kernel_rem_pio2f+0x352>
 800c008:	a808      	add	r0, sp, #32
 800c00a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800c00e:	9001      	str	r0, [sp, #4]
 800c010:	ee07 0a90 	vmov	s15, r0
 800c014:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c018:	3b01      	subs	r3, #1
 800c01a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c01e:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c022:	ed62 7a01 	vstmdb	r2!, {s15}
 800c026:	e743      	b.n	800beb0 <__kernel_rem_pio2f+0x20c>
 800c028:	ecfc 6a01 	vldmia	ip!, {s13}
 800c02c:	ecb5 7a01 	vldmia	r5!, {s14}
 800c030:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c034:	3001      	adds	r0, #1
 800c036:	4550      	cmp	r0, sl
 800c038:	dc01      	bgt.n	800c03e <__kernel_rem_pio2f+0x39a>
 800c03a:	4282      	cmp	r2, r0
 800c03c:	daf4      	bge.n	800c028 <__kernel_rem_pio2f+0x384>
 800c03e:	a858      	add	r0, sp, #352	@ 0x160
 800c040:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800c044:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800c048:	3b01      	subs	r3, #1
 800c04a:	e735      	b.n	800beb8 <__kernel_rem_pio2f+0x214>
 800c04c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800c04e:	2b02      	cmp	r3, #2
 800c050:	dc09      	bgt.n	800c066 <__kernel_rem_pio2f+0x3c2>
 800c052:	2b00      	cmp	r3, #0
 800c054:	dc2b      	bgt.n	800c0ae <__kernel_rem_pio2f+0x40a>
 800c056:	d044      	beq.n	800c0e2 <__kernel_rem_pio2f+0x43e>
 800c058:	f009 0007 	and.w	r0, r9, #7
 800c05c:	b059      	add	sp, #356	@ 0x164
 800c05e:	ecbd 8b04 	vpop	{d8-d9}
 800c062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c066:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800c068:	2b03      	cmp	r3, #3
 800c06a:	d1f5      	bne.n	800c058 <__kernel_rem_pio2f+0x3b4>
 800c06c:	aa30      	add	r2, sp, #192	@ 0xc0
 800c06e:	1f0b      	subs	r3, r1, #4
 800c070:	4413      	add	r3, r2
 800c072:	461a      	mov	r2, r3
 800c074:	4620      	mov	r0, r4
 800c076:	2800      	cmp	r0, #0
 800c078:	f1a2 0204 	sub.w	r2, r2, #4
 800c07c:	dc52      	bgt.n	800c124 <__kernel_rem_pio2f+0x480>
 800c07e:	4622      	mov	r2, r4
 800c080:	2a01      	cmp	r2, #1
 800c082:	f1a3 0304 	sub.w	r3, r3, #4
 800c086:	dc5d      	bgt.n	800c144 <__kernel_rem_pio2f+0x4a0>
 800c088:	ab30      	add	r3, sp, #192	@ 0xc0
 800c08a:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800bfa8 <__kernel_rem_pio2f+0x304>
 800c08e:	440b      	add	r3, r1
 800c090:	2c01      	cmp	r4, #1
 800c092:	dc67      	bgt.n	800c164 <__kernel_rem_pio2f+0x4c0>
 800c094:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800c098:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800c09c:	2e00      	cmp	r6, #0
 800c09e:	d167      	bne.n	800c170 <__kernel_rem_pio2f+0x4cc>
 800c0a0:	edc7 6a00 	vstr	s13, [r7]
 800c0a4:	ed87 7a01 	vstr	s14, [r7, #4]
 800c0a8:	edc7 7a02 	vstr	s15, [r7, #8]
 800c0ac:	e7d4      	b.n	800c058 <__kernel_rem_pio2f+0x3b4>
 800c0ae:	ab30      	add	r3, sp, #192	@ 0xc0
 800c0b0:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800bfa8 <__kernel_rem_pio2f+0x304>
 800c0b4:	440b      	add	r3, r1
 800c0b6:	4622      	mov	r2, r4
 800c0b8:	2a00      	cmp	r2, #0
 800c0ba:	da24      	bge.n	800c106 <__kernel_rem_pio2f+0x462>
 800c0bc:	b34e      	cbz	r6, 800c112 <__kernel_rem_pio2f+0x46e>
 800c0be:	eef1 7a47 	vneg.f32	s15, s14
 800c0c2:	edc7 7a00 	vstr	s15, [r7]
 800c0c6:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800c0ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c0ce:	aa31      	add	r2, sp, #196	@ 0xc4
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	429c      	cmp	r4, r3
 800c0d4:	da20      	bge.n	800c118 <__kernel_rem_pio2f+0x474>
 800c0d6:	b10e      	cbz	r6, 800c0dc <__kernel_rem_pio2f+0x438>
 800c0d8:	eef1 7a67 	vneg.f32	s15, s15
 800c0dc:	edc7 7a01 	vstr	s15, [r7, #4]
 800c0e0:	e7ba      	b.n	800c058 <__kernel_rem_pio2f+0x3b4>
 800c0e2:	ab30      	add	r3, sp, #192	@ 0xc0
 800c0e4:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800bfa8 <__kernel_rem_pio2f+0x304>
 800c0e8:	440b      	add	r3, r1
 800c0ea:	2c00      	cmp	r4, #0
 800c0ec:	da05      	bge.n	800c0fa <__kernel_rem_pio2f+0x456>
 800c0ee:	b10e      	cbz	r6, 800c0f4 <__kernel_rem_pio2f+0x450>
 800c0f0:	eef1 7a67 	vneg.f32	s15, s15
 800c0f4:	edc7 7a00 	vstr	s15, [r7]
 800c0f8:	e7ae      	b.n	800c058 <__kernel_rem_pio2f+0x3b4>
 800c0fa:	ed33 7a01 	vldmdb	r3!, {s14}
 800c0fe:	3c01      	subs	r4, #1
 800c100:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c104:	e7f1      	b.n	800c0ea <__kernel_rem_pio2f+0x446>
 800c106:	ed73 7a01 	vldmdb	r3!, {s15}
 800c10a:	3a01      	subs	r2, #1
 800c10c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c110:	e7d2      	b.n	800c0b8 <__kernel_rem_pio2f+0x414>
 800c112:	eef0 7a47 	vmov.f32	s15, s14
 800c116:	e7d4      	b.n	800c0c2 <__kernel_rem_pio2f+0x41e>
 800c118:	ecb2 7a01 	vldmia	r2!, {s14}
 800c11c:	3301      	adds	r3, #1
 800c11e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c122:	e7d6      	b.n	800c0d2 <__kernel_rem_pio2f+0x42e>
 800c124:	edd2 7a00 	vldr	s15, [r2]
 800c128:	edd2 6a01 	vldr	s13, [r2, #4]
 800c12c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c130:	3801      	subs	r0, #1
 800c132:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c136:	ed82 7a00 	vstr	s14, [r2]
 800c13a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c13e:	edc2 7a01 	vstr	s15, [r2, #4]
 800c142:	e798      	b.n	800c076 <__kernel_rem_pio2f+0x3d2>
 800c144:	edd3 7a00 	vldr	s15, [r3]
 800c148:	edd3 6a01 	vldr	s13, [r3, #4]
 800c14c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c150:	3a01      	subs	r2, #1
 800c152:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c156:	ed83 7a00 	vstr	s14, [r3]
 800c15a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c15e:	edc3 7a01 	vstr	s15, [r3, #4]
 800c162:	e78d      	b.n	800c080 <__kernel_rem_pio2f+0x3dc>
 800c164:	ed33 7a01 	vldmdb	r3!, {s14}
 800c168:	3c01      	subs	r4, #1
 800c16a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c16e:	e78f      	b.n	800c090 <__kernel_rem_pio2f+0x3ec>
 800c170:	eef1 6a66 	vneg.f32	s13, s13
 800c174:	eeb1 7a47 	vneg.f32	s14, s14
 800c178:	edc7 6a00 	vstr	s13, [r7]
 800c17c:	ed87 7a01 	vstr	s14, [r7, #4]
 800c180:	eef1 7a67 	vneg.f32	s15, s15
 800c184:	e790      	b.n	800c0a8 <__kernel_rem_pio2f+0x404>
 800c186:	bf00      	nop

0800c188 <scalbnf>:
 800c188:	ee10 3a10 	vmov	r3, s0
 800c18c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800c190:	d02b      	beq.n	800c1ea <scalbnf+0x62>
 800c192:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800c196:	d302      	bcc.n	800c19e <scalbnf+0x16>
 800c198:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c19c:	4770      	bx	lr
 800c19e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800c1a2:	d123      	bne.n	800c1ec <scalbnf+0x64>
 800c1a4:	4b24      	ldr	r3, [pc, #144]	@ (800c238 <scalbnf+0xb0>)
 800c1a6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800c23c <scalbnf+0xb4>
 800c1aa:	4298      	cmp	r0, r3
 800c1ac:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c1b0:	db17      	blt.n	800c1e2 <scalbnf+0x5a>
 800c1b2:	ee10 3a10 	vmov	r3, s0
 800c1b6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c1ba:	3a19      	subs	r2, #25
 800c1bc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800c1c0:	4288      	cmp	r0, r1
 800c1c2:	dd15      	ble.n	800c1f0 <scalbnf+0x68>
 800c1c4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800c240 <scalbnf+0xb8>
 800c1c8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800c244 <scalbnf+0xbc>
 800c1cc:	ee10 3a10 	vmov	r3, s0
 800c1d0:	eeb0 7a67 	vmov.f32	s14, s15
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	bfb8      	it	lt
 800c1d8:	eef0 7a66 	vmovlt.f32	s15, s13
 800c1dc:	ee27 0a87 	vmul.f32	s0, s15, s14
 800c1e0:	4770      	bx	lr
 800c1e2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c248 <scalbnf+0xc0>
 800c1e6:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c1ea:	4770      	bx	lr
 800c1ec:	0dd2      	lsrs	r2, r2, #23
 800c1ee:	e7e5      	b.n	800c1bc <scalbnf+0x34>
 800c1f0:	4410      	add	r0, r2
 800c1f2:	28fe      	cmp	r0, #254	@ 0xfe
 800c1f4:	dce6      	bgt.n	800c1c4 <scalbnf+0x3c>
 800c1f6:	2800      	cmp	r0, #0
 800c1f8:	dd06      	ble.n	800c208 <scalbnf+0x80>
 800c1fa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c1fe:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c202:	ee00 3a10 	vmov	s0, r3
 800c206:	4770      	bx	lr
 800c208:	f110 0f16 	cmn.w	r0, #22
 800c20c:	da09      	bge.n	800c222 <scalbnf+0x9a>
 800c20e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800c248 <scalbnf+0xc0>
 800c212:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800c24c <scalbnf+0xc4>
 800c216:	ee10 3a10 	vmov	r3, s0
 800c21a:	eeb0 7a67 	vmov.f32	s14, s15
 800c21e:	2b00      	cmp	r3, #0
 800c220:	e7d9      	b.n	800c1d6 <scalbnf+0x4e>
 800c222:	3019      	adds	r0, #25
 800c224:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c228:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c22c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800c250 <scalbnf+0xc8>
 800c230:	ee07 3a90 	vmov	s15, r3
 800c234:	e7d7      	b.n	800c1e6 <scalbnf+0x5e>
 800c236:	bf00      	nop
 800c238:	ffff3cb0 	.word	0xffff3cb0
 800c23c:	4c000000 	.word	0x4c000000
 800c240:	7149f2ca 	.word	0x7149f2ca
 800c244:	f149f2ca 	.word	0xf149f2ca
 800c248:	0da24260 	.word	0x0da24260
 800c24c:	8da24260 	.word	0x8da24260
 800c250:	33000000 	.word	0x33000000

0800c254 <floorf>:
 800c254:	ee10 3a10 	vmov	r3, s0
 800c258:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c25c:	3a7f      	subs	r2, #127	@ 0x7f
 800c25e:	2a16      	cmp	r2, #22
 800c260:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c264:	dc2b      	bgt.n	800c2be <floorf+0x6a>
 800c266:	2a00      	cmp	r2, #0
 800c268:	da12      	bge.n	800c290 <floorf+0x3c>
 800c26a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c2d0 <floorf+0x7c>
 800c26e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c272:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c27a:	dd06      	ble.n	800c28a <floorf+0x36>
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	da24      	bge.n	800c2ca <floorf+0x76>
 800c280:	2900      	cmp	r1, #0
 800c282:	4b14      	ldr	r3, [pc, #80]	@ (800c2d4 <floorf+0x80>)
 800c284:	bf08      	it	eq
 800c286:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800c28a:	ee00 3a10 	vmov	s0, r3
 800c28e:	4770      	bx	lr
 800c290:	4911      	ldr	r1, [pc, #68]	@ (800c2d8 <floorf+0x84>)
 800c292:	4111      	asrs	r1, r2
 800c294:	420b      	tst	r3, r1
 800c296:	d0fa      	beq.n	800c28e <floorf+0x3a>
 800c298:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800c2d0 <floorf+0x7c>
 800c29c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c2a0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c2a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2a8:	ddef      	ble.n	800c28a <floorf+0x36>
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	bfbe      	ittt	lt
 800c2ae:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800c2b2:	fa40 f202 	asrlt.w	r2, r0, r2
 800c2b6:	189b      	addlt	r3, r3, r2
 800c2b8:	ea23 0301 	bic.w	r3, r3, r1
 800c2bc:	e7e5      	b.n	800c28a <floorf+0x36>
 800c2be:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c2c2:	d3e4      	bcc.n	800c28e <floorf+0x3a>
 800c2c4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c2c8:	4770      	bx	lr
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	e7dd      	b.n	800c28a <floorf+0x36>
 800c2ce:	bf00      	nop
 800c2d0:	7149f2ca 	.word	0x7149f2ca
 800c2d4:	bf800000 	.word	0xbf800000
 800c2d8:	007fffff 	.word	0x007fffff

0800c2dc <_init>:
 800c2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2de:	bf00      	nop
 800c2e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2e2:	bc08      	pop	{r3}
 800c2e4:	469e      	mov	lr, r3
 800c2e6:	4770      	bx	lr

0800c2e8 <_fini>:
 800c2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ea:	bf00      	nop
 800c2ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2ee:	bc08      	pop	{r3}
 800c2f0:	469e      	mov	lr, r3
 800c2f2:	4770      	bx	lr
