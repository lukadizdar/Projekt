
Projekt_DOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d580  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00011e7c  0800d708  0800d708  0000e708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f584  0801f584  000210a0  2**0
                  CONTENTS
  4 .ARM          00000008  0801f584  0801f584  00020584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f58c  0801f58c  000210a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f58c  0801f58c  0002058c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801f590  0801f590  00020590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  0801f594  00021000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000210a0  2**0
                  CONTENTS
 10 .bss          00003e4c  200000a0  200000a0  000210a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20003eec  20003eec  000210a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000210a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000270a1  00000000  00000000  000210d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006156  00000000  00000000  00048171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d30  00000000  00000000  0004e2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001566  00000000  00000000  0004fff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028aa1  00000000  00000000  0005155e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000282db  00000000  00000000  00079fff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e529b  00000000  00000000  000a22da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000b3  00000000  00000000  00187575  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007ca4  00000000  00000000  00187628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  0018f2cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00004d1c  00000000  00000000  0018f32f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000158  00000000  00000000  0019404b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000a0 	.word	0x200000a0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800d6f0 	.word	0x0800d6f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000a4 	.word	0x200000a4
 80001c4:	0800d6f0 	.word	0x0800d6f0

080001c8 <arm_bitreversal_32>:
 80001c8:	1c4b      	adds	r3, r1, #1
 80001ca:	2b01      	cmp	r3, #1
 80001cc:	bf98      	it	ls
 80001ce:	4770      	bxls	lr
 80001d0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001d4:	1c91      	adds	r1, r2, #2
 80001d6:	089b      	lsrs	r3, r3, #2

080001d8 <arm_bitreversal_32_0>:
 80001d8:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001dc:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001e0:	880a      	ldrh	r2, [r1, #0]
 80001e2:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001e6:	4480      	add	r8, r0
 80001e8:	4481      	add	r9, r0
 80001ea:	4402      	add	r2, r0
 80001ec:	4484      	add	ip, r0
 80001ee:	f8d9 7000 	ldr.w	r7, [r9]
 80001f2:	f8d8 6000 	ldr.w	r6, [r8]
 80001f6:	6815      	ldr	r5, [r2, #0]
 80001f8:	f8dc 4000 	ldr.w	r4, [ip]
 80001fc:	f8c9 6000 	str.w	r6, [r9]
 8000200:	f8c8 7000 	str.w	r7, [r8]
 8000204:	f8cc 5000 	str.w	r5, [ip]
 8000208:	6014      	str	r4, [r2, #0]
 800020a:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800020e:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8000212:	6855      	ldr	r5, [r2, #4]
 8000214:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000218:	f8c9 6004 	str.w	r6, [r9, #4]
 800021c:	f8c8 7004 	str.w	r7, [r8, #4]
 8000220:	f8cc 5004 	str.w	r5, [ip, #4]
 8000224:	6054      	str	r4, [r2, #4]
 8000226:	3108      	adds	r1, #8
 8000228:	3b01      	subs	r3, #1
 800022a:	d1d5      	bne.n	80001d8 <arm_bitreversal_32_0>
 800022c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000230:	4770      	bx	lr

08000232 <arm_bitreversal_16>:
 8000232:	1c4b      	adds	r3, r1, #1
 8000234:	2b01      	cmp	r3, #1
 8000236:	bf98      	it	ls
 8000238:	4770      	bxls	lr
 800023a:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800023e:	1c91      	adds	r1, r2, #2
 8000240:	089b      	lsrs	r3, r3, #2

08000242 <arm_bitreversal_16_0>:
 8000242:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000246:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 800024a:	880a      	ldrh	r2, [r1, #0]
 800024c:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000250:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 8000254:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000258:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 800025c:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000260:	f8d9 7000 	ldr.w	r7, [r9]
 8000264:	f8d8 6000 	ldr.w	r6, [r8]
 8000268:	6815      	ldr	r5, [r2, #0]
 800026a:	f8dc 4000 	ldr.w	r4, [ip]
 800026e:	f8c9 6000 	str.w	r6, [r9]
 8000272:	f8c8 7000 	str.w	r7, [r8]
 8000276:	f8cc 5000 	str.w	r5, [ip]
 800027a:	6014      	str	r4, [r2, #0]
 800027c:	3108      	adds	r1, #8
 800027e:	3b01      	subs	r3, #1
 8000280:	d1df      	bne.n	8000242 <arm_bitreversal_16_0>
 8000282:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	@ 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_uldivmod>:
 8000bb0:	b953      	cbnz	r3, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb2:	b94a      	cbnz	r2, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb4:	2900      	cmp	r1, #0
 8000bb6:	bf08      	it	eq
 8000bb8:	2800      	cmpeq	r0, #0
 8000bba:	bf1c      	itt	ne
 8000bbc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bc0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bc4:	f000 b96a 	b.w	8000e9c <__aeabi_idiv0>
 8000bc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bcc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd0:	f000 f806 	bl	8000be0 <__udivmoddi4>
 8000bd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bdc:	b004      	add	sp, #16
 8000bde:	4770      	bx	lr

08000be0 <__udivmoddi4>:
 8000be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be4:	9d08      	ldr	r5, [sp, #32]
 8000be6:	460c      	mov	r4, r1
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d14e      	bne.n	8000c8a <__udivmoddi4+0xaa>
 8000bec:	4694      	mov	ip, r2
 8000bee:	458c      	cmp	ip, r1
 8000bf0:	4686      	mov	lr, r0
 8000bf2:	fab2 f282 	clz	r2, r2
 8000bf6:	d962      	bls.n	8000cbe <__udivmoddi4+0xde>
 8000bf8:	b14a      	cbz	r2, 8000c0e <__udivmoddi4+0x2e>
 8000bfa:	f1c2 0320 	rsb	r3, r2, #32
 8000bfe:	4091      	lsls	r1, r2
 8000c00:	fa20 f303 	lsr.w	r3, r0, r3
 8000c04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c08:	4319      	orrs	r1, r3
 8000c0a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c12:	fa1f f68c 	uxth.w	r6, ip
 8000c16:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c1e:	fb07 1114 	mls	r1, r7, r4, r1
 8000c22:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c26:	fb04 f106 	mul.w	r1, r4, r6
 8000c2a:	4299      	cmp	r1, r3
 8000c2c:	d90a      	bls.n	8000c44 <__udivmoddi4+0x64>
 8000c2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c32:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c36:	f080 8112 	bcs.w	8000e5e <__udivmoddi4+0x27e>
 8000c3a:	4299      	cmp	r1, r3
 8000c3c:	f240 810f 	bls.w	8000e5e <__udivmoddi4+0x27e>
 8000c40:	3c02      	subs	r4, #2
 8000c42:	4463      	add	r3, ip
 8000c44:	1a59      	subs	r1, r3, r1
 8000c46:	fa1f f38e 	uxth.w	r3, lr
 8000c4a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c4e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c56:	fb00 f606 	mul.w	r6, r0, r6
 8000c5a:	429e      	cmp	r6, r3
 8000c5c:	d90a      	bls.n	8000c74 <__udivmoddi4+0x94>
 8000c5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c62:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c66:	f080 80fc 	bcs.w	8000e62 <__udivmoddi4+0x282>
 8000c6a:	429e      	cmp	r6, r3
 8000c6c:	f240 80f9 	bls.w	8000e62 <__udivmoddi4+0x282>
 8000c70:	4463      	add	r3, ip
 8000c72:	3802      	subs	r0, #2
 8000c74:	1b9b      	subs	r3, r3, r6
 8000c76:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	b11d      	cbz	r5, 8000c86 <__udivmoddi4+0xa6>
 8000c7e:	40d3      	lsrs	r3, r2
 8000c80:	2200      	movs	r2, #0
 8000c82:	e9c5 3200 	strd	r3, r2, [r5]
 8000c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d905      	bls.n	8000c9a <__udivmoddi4+0xba>
 8000c8e:	b10d      	cbz	r5, 8000c94 <__udivmoddi4+0xb4>
 8000c90:	e9c5 0100 	strd	r0, r1, [r5]
 8000c94:	2100      	movs	r1, #0
 8000c96:	4608      	mov	r0, r1
 8000c98:	e7f5      	b.n	8000c86 <__udivmoddi4+0xa6>
 8000c9a:	fab3 f183 	clz	r1, r3
 8000c9e:	2900      	cmp	r1, #0
 8000ca0:	d146      	bne.n	8000d30 <__udivmoddi4+0x150>
 8000ca2:	42a3      	cmp	r3, r4
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xcc>
 8000ca6:	4290      	cmp	r0, r2
 8000ca8:	f0c0 80f0 	bcc.w	8000e8c <__udivmoddi4+0x2ac>
 8000cac:	1a86      	subs	r6, r0, r2
 8000cae:	eb64 0303 	sbc.w	r3, r4, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	2d00      	cmp	r5, #0
 8000cb6:	d0e6      	beq.n	8000c86 <__udivmoddi4+0xa6>
 8000cb8:	e9c5 6300 	strd	r6, r3, [r5]
 8000cbc:	e7e3      	b.n	8000c86 <__udivmoddi4+0xa6>
 8000cbe:	2a00      	cmp	r2, #0
 8000cc0:	f040 8090 	bne.w	8000de4 <__udivmoddi4+0x204>
 8000cc4:	eba1 040c 	sub.w	r4, r1, ip
 8000cc8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ccc:	fa1f f78c 	uxth.w	r7, ip
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cd6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cda:	fb08 4416 	mls	r4, r8, r6, r4
 8000cde:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ce2:	fb07 f006 	mul.w	r0, r7, r6
 8000ce6:	4298      	cmp	r0, r3
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x11c>
 8000cea:	eb1c 0303 	adds.w	r3, ip, r3
 8000cee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x11a>
 8000cf4:	4298      	cmp	r0, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2b4>
 8000cfa:	4626      	mov	r6, r4
 8000cfc:	1a1c      	subs	r4, r3, r0
 8000cfe:	fa1f f38e 	uxth.w	r3, lr
 8000d02:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d06:	fb08 4410 	mls	r4, r8, r0, r4
 8000d0a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0e:	fb00 f707 	mul.w	r7, r0, r7
 8000d12:	429f      	cmp	r7, r3
 8000d14:	d908      	bls.n	8000d28 <__udivmoddi4+0x148>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d1e:	d202      	bcs.n	8000d26 <__udivmoddi4+0x146>
 8000d20:	429f      	cmp	r7, r3
 8000d22:	f200 80b0 	bhi.w	8000e86 <__udivmoddi4+0x2a6>
 8000d26:	4620      	mov	r0, r4
 8000d28:	1bdb      	subs	r3, r3, r7
 8000d2a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2e:	e7a5      	b.n	8000c7c <__udivmoddi4+0x9c>
 8000d30:	f1c1 0620 	rsb	r6, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3a:	431f      	orrs	r7, r3
 8000d3c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d40:	fa04 f301 	lsl.w	r3, r4, r1
 8000d44:	ea43 030c 	orr.w	r3, r3, ip
 8000d48:	40f4      	lsrs	r4, r6
 8000d4a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d4e:	0c38      	lsrs	r0, r7, #16
 8000d50:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d54:	fbb4 fef0 	udiv	lr, r4, r0
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fb00 441e 	mls	r4, r0, lr, r4
 8000d60:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d64:	fb0e f90c 	mul.w	r9, lr, ip
 8000d68:	45a1      	cmp	r9, r4
 8000d6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x1a6>
 8000d70:	193c      	adds	r4, r7, r4
 8000d72:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d76:	f080 8084 	bcs.w	8000e82 <__udivmoddi4+0x2a2>
 8000d7a:	45a1      	cmp	r9, r4
 8000d7c:	f240 8081 	bls.w	8000e82 <__udivmoddi4+0x2a2>
 8000d80:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d84:	443c      	add	r4, r7
 8000d86:	eba4 0409 	sub.w	r4, r4, r9
 8000d8a:	fa1f f983 	uxth.w	r9, r3
 8000d8e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d92:	fb00 4413 	mls	r4, r0, r3, r4
 8000d96:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d907      	bls.n	8000db2 <__udivmoddi4+0x1d2>
 8000da2:	193c      	adds	r4, r7, r4
 8000da4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000da8:	d267      	bcs.n	8000e7a <__udivmoddi4+0x29a>
 8000daa:	45a4      	cmp	ip, r4
 8000dac:	d965      	bls.n	8000e7a <__udivmoddi4+0x29a>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	443c      	add	r4, r7
 8000db2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000db6:	fba0 9302 	umull	r9, r3, r0, r2
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	429c      	cmp	r4, r3
 8000dc0:	46ce      	mov	lr, r9
 8000dc2:	469c      	mov	ip, r3
 8000dc4:	d351      	bcc.n	8000e6a <__udivmoddi4+0x28a>
 8000dc6:	d04e      	beq.n	8000e66 <__udivmoddi4+0x286>
 8000dc8:	b155      	cbz	r5, 8000de0 <__udivmoddi4+0x200>
 8000dca:	ebb8 030e 	subs.w	r3, r8, lr
 8000dce:	eb64 040c 	sbc.w	r4, r4, ip
 8000dd2:	fa04 f606 	lsl.w	r6, r4, r6
 8000dd6:	40cb      	lsrs	r3, r1
 8000dd8:	431e      	orrs	r6, r3
 8000dda:	40cc      	lsrs	r4, r1
 8000ddc:	e9c5 6400 	strd	r6, r4, [r5]
 8000de0:	2100      	movs	r1, #0
 8000de2:	e750      	b.n	8000c86 <__udivmoddi4+0xa6>
 8000de4:	f1c2 0320 	rsb	r3, r2, #32
 8000de8:	fa20 f103 	lsr.w	r1, r0, r3
 8000dec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df0:	fa24 f303 	lsr.w	r3, r4, r3
 8000df4:	4094      	lsls	r4, r2
 8000df6:	430c      	orrs	r4, r1
 8000df8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dfc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e00:	fa1f f78c 	uxth.w	r7, ip
 8000e04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e08:	fb08 3110 	mls	r1, r8, r0, r3
 8000e0c:	0c23      	lsrs	r3, r4, #16
 8000e0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e12:	fb00 f107 	mul.w	r1, r0, r7
 8000e16:	4299      	cmp	r1, r3
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x24c>
 8000e1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e1e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e22:	d22c      	bcs.n	8000e7e <__udivmoddi4+0x29e>
 8000e24:	4299      	cmp	r1, r3
 8000e26:	d92a      	bls.n	8000e7e <__udivmoddi4+0x29e>
 8000e28:	3802      	subs	r0, #2
 8000e2a:	4463      	add	r3, ip
 8000e2c:	1a5b      	subs	r3, r3, r1
 8000e2e:	b2a4      	uxth	r4, r4
 8000e30:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e34:	fb08 3311 	mls	r3, r8, r1, r3
 8000e38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e3c:	fb01 f307 	mul.w	r3, r1, r7
 8000e40:	42a3      	cmp	r3, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x276>
 8000e44:	eb1c 0404 	adds.w	r4, ip, r4
 8000e48:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e4c:	d213      	bcs.n	8000e76 <__udivmoddi4+0x296>
 8000e4e:	42a3      	cmp	r3, r4
 8000e50:	d911      	bls.n	8000e76 <__udivmoddi4+0x296>
 8000e52:	3902      	subs	r1, #2
 8000e54:	4464      	add	r4, ip
 8000e56:	1ae4      	subs	r4, r4, r3
 8000e58:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e5c:	e739      	b.n	8000cd2 <__udivmoddi4+0xf2>
 8000e5e:	4604      	mov	r4, r0
 8000e60:	e6f0      	b.n	8000c44 <__udivmoddi4+0x64>
 8000e62:	4608      	mov	r0, r1
 8000e64:	e706      	b.n	8000c74 <__udivmoddi4+0x94>
 8000e66:	45c8      	cmp	r8, r9
 8000e68:	d2ae      	bcs.n	8000dc8 <__udivmoddi4+0x1e8>
 8000e6a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e6e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e72:	3801      	subs	r0, #1
 8000e74:	e7a8      	b.n	8000dc8 <__udivmoddi4+0x1e8>
 8000e76:	4631      	mov	r1, r6
 8000e78:	e7ed      	b.n	8000e56 <__udivmoddi4+0x276>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	e799      	b.n	8000db2 <__udivmoddi4+0x1d2>
 8000e7e:	4630      	mov	r0, r6
 8000e80:	e7d4      	b.n	8000e2c <__udivmoddi4+0x24c>
 8000e82:	46d6      	mov	lr, sl
 8000e84:	e77f      	b.n	8000d86 <__udivmoddi4+0x1a6>
 8000e86:	4463      	add	r3, ip
 8000e88:	3802      	subs	r0, #2
 8000e8a:	e74d      	b.n	8000d28 <__udivmoddi4+0x148>
 8000e8c:	4606      	mov	r6, r0
 8000e8e:	4623      	mov	r3, r4
 8000e90:	4608      	mov	r0, r1
 8000e92:	e70f      	b.n	8000cb4 <__udivmoddi4+0xd4>
 8000e94:	3e02      	subs	r6, #2
 8000e96:	4463      	add	r3, ip
 8000e98:	e730      	b.n	8000cfc <__udivmoddi4+0x11c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000eb2:	4b22      	ldr	r3, [pc, #136]	@ (8000f3c <MX_ADC1_Init+0x9c>)
 8000eb4:	4a22      	ldr	r2, [pc, #136]	@ (8000f40 <MX_ADC1_Init+0xa0>)
 8000eb6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000eb8:	4b20      	ldr	r3, [pc, #128]	@ (8000f3c <MX_ADC1_Init+0x9c>)
 8000eba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000ebe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ec0:	4b1e      	ldr	r3, [pc, #120]	@ (8000f3c <MX_ADC1_Init+0x9c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ec6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f3c <MX_ADC1_Init+0x9c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f3c <MX_ADC1_Init+0x9c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ed2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f3c <MX_ADC1_Init+0x9c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000eda:	4b18      	ldr	r3, [pc, #96]	@ (8000f3c <MX_ADC1_Init+0x9c>)
 8000edc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000ee0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000ee2:	4b16      	ldr	r3, [pc, #88]	@ (8000f3c <MX_ADC1_Init+0x9c>)
 8000ee4:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000ee8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eea:	4b14      	ldr	r3, [pc, #80]	@ (8000f3c <MX_ADC1_Init+0x9c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ef0:	4b12      	ldr	r3, [pc, #72]	@ (8000f3c <MX_ADC1_Init+0x9c>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ef6:	4b11      	ldr	r3, [pc, #68]	@ (8000f3c <MX_ADC1_Init+0x9c>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000efe:	4b0f      	ldr	r3, [pc, #60]	@ (8000f3c <MX_ADC1_Init+0x9c>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f04:	480d      	ldr	r0, [pc, #52]	@ (8000f3c <MX_ADC1_Init+0x9c>)
 8000f06:	f001 fb0f 	bl	8002528 <HAL_ADC_Init>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000f10:	f000 ffea 	bl	8001ee8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f14:	2301      	movs	r3, #1
 8000f16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f20:	463b      	mov	r3, r7
 8000f22:	4619      	mov	r1, r3
 8000f24:	4805      	ldr	r0, [pc, #20]	@ (8000f3c <MX_ADC1_Init+0x9c>)
 8000f26:	f001 fc5d 	bl	80027e4 <HAL_ADC_ConfigChannel>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000f30:	f000 ffda 	bl	8001ee8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f34:	bf00      	nop
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	200000bc 	.word	0x200000bc
 8000f40:	40012000 	.word	0x40012000

08000f44 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08a      	sub	sp, #40	@ 0x28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a2f      	ldr	r2, [pc, #188]	@ (8001020 <HAL_ADC_MspInit+0xdc>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d157      	bne.n	8001016 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	613b      	str	r3, [r7, #16]
 8000f6a:	4b2e      	ldr	r3, [pc, #184]	@ (8001024 <HAL_ADC_MspInit+0xe0>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f6e:	4a2d      	ldr	r2, [pc, #180]	@ (8001024 <HAL_ADC_MspInit+0xe0>)
 8000f70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f74:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f76:	4b2b      	ldr	r3, [pc, #172]	@ (8001024 <HAL_ADC_MspInit+0xe0>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	4b27      	ldr	r3, [pc, #156]	@ (8001024 <HAL_ADC_MspInit+0xe0>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8a:	4a26      	ldr	r2, [pc, #152]	@ (8001024 <HAL_ADC_MspInit+0xe0>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f92:	4b24      	ldr	r3, [pc, #144]	@ (8001024 <HAL_ADC_MspInit+0xe0>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000faa:	f107 0314 	add.w	r3, r7, #20
 8000fae:	4619      	mov	r1, r3
 8000fb0:	481d      	ldr	r0, [pc, #116]	@ (8001028 <HAL_ADC_MspInit+0xe4>)
 8000fb2:	f002 fb39 	bl	8003628 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000fb6:	4b1d      	ldr	r3, [pc, #116]	@ (800102c <HAL_ADC_MspInit+0xe8>)
 8000fb8:	4a1d      	ldr	r2, [pc, #116]	@ (8001030 <HAL_ADC_MspInit+0xec>)
 8000fba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000fbc:	4b1b      	ldr	r3, [pc, #108]	@ (800102c <HAL_ADC_MspInit+0xe8>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fc2:	4b1a      	ldr	r3, [pc, #104]	@ (800102c <HAL_ADC_MspInit+0xe8>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fc8:	4b18      	ldr	r3, [pc, #96]	@ (800102c <HAL_ADC_MspInit+0xe8>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fce:	4b17      	ldr	r3, [pc, #92]	@ (800102c <HAL_ADC_MspInit+0xe8>)
 8000fd0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fd4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fd6:	4b15      	ldr	r3, [pc, #84]	@ (800102c <HAL_ADC_MspInit+0xe8>)
 8000fd8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000fdc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fde:	4b13      	ldr	r3, [pc, #76]	@ (800102c <HAL_ADC_MspInit+0xe8>)
 8000fe0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fe4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fe6:	4b11      	ldr	r3, [pc, #68]	@ (800102c <HAL_ADC_MspInit+0xe8>)
 8000fe8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fec:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fee:	4b0f      	ldr	r3, [pc, #60]	@ (800102c <HAL_ADC_MspInit+0xe8>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ff4:	4b0d      	ldr	r3, [pc, #52]	@ (800102c <HAL_ADC_MspInit+0xe8>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ffa:	480c      	ldr	r0, [pc, #48]	@ (800102c <HAL_ADC_MspInit+0xe8>)
 8000ffc:	f001 ffa4 	bl	8002f48 <HAL_DMA_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001006:	f000 ff6f 	bl	8001ee8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a07      	ldr	r2, [pc, #28]	@ (800102c <HAL_ADC_MspInit+0xe8>)
 800100e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001010:	4a06      	ldr	r2, [pc, #24]	@ (800102c <HAL_ADC_MspInit+0xe8>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001016:	bf00      	nop
 8001018:	3728      	adds	r7, #40	@ 0x28
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40012000 	.word	0x40012000
 8001024:	40023800 	.word	0x40023800
 8001028:	40020000 	.word	0x40020000
 800102c:	20000104 	.word	0x20000104
 8001030:	40026410 	.word	0x40026410

08001034 <init_AudioReset>:
#include "i2s.h"
#include "spi.h"
#include "usb_host.h"
#include "gpio.h"
#include "audio.h"
void init_AudioReset() {
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, AUDIO_RESET_PIN, GPIO_PIN_SET);
 8001038:	2201      	movs	r2, #1
 800103a:	2110      	movs	r1, #16
 800103c:	4802      	ldr	r0, [pc, #8]	@ (8001048 <init_AudioReset+0x14>)
 800103e:	f002 fc8f 	bl	8003960 <HAL_GPIO_WritePin>
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40020c00 	.word	0x40020c00

0800104c <configAudio>:
void configAudio() {
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af02      	add	r7, sp, #8
    uint8_t bytes[2];
    init_AudioReset();
 8001052:	f7ff ffef 	bl	8001034 <init_AudioReset>

    /* Power sequence */
    // Set Power Control Register to "on" state
    bytes[0] = 0x02;
 8001056:	2302      	movs	r3, #2
 8001058:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x01;
 800105a:	2301      	movs	r3, #1
 800105c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800105e:	1d3a      	adds	r2, r7, #4
 8001060:	2364      	movs	r3, #100	@ 0x64
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	2302      	movs	r3, #2
 8001066:	2194      	movs	r1, #148	@ 0x94
 8001068:	486f      	ldr	r0, [pc, #444]	@ (8001228 <configAudio+0x1dc>)
 800106a:	f004 ff0b 	bl	8005e84 <HAL_I2C_Master_Transmit>

    /* Initialization sequence */
    bytes[0] = 0x00;
 800106e:	2300      	movs	r3, #0
 8001070:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x99;
 8001072:	2399      	movs	r3, #153	@ 0x99
 8001074:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8001076:	1d3a      	adds	r2, r7, #4
 8001078:	2364      	movs	r3, #100	@ 0x64
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	2302      	movs	r3, #2
 800107e:	2194      	movs	r1, #148	@ 0x94
 8001080:	4869      	ldr	r0, [pc, #420]	@ (8001228 <configAudio+0x1dc>)
 8001082:	f004 feff 	bl	8005e84 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x47;
 8001086:	2347      	movs	r3, #71	@ 0x47
 8001088:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x80;
 800108a:	2380      	movs	r3, #128	@ 0x80
 800108c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800108e:	1d3a      	adds	r2, r7, #4
 8001090:	2364      	movs	r3, #100	@ 0x64
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2302      	movs	r3, #2
 8001096:	2194      	movs	r1, #148	@ 0x94
 8001098:	4863      	ldr	r0, [pc, #396]	@ (8001228 <configAudio+0x1dc>)
 800109a:	f004 fef3 	bl	8005e84 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x32;
 800109e:	2332      	movs	r3, #50	@ 0x32
 80010a0:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x80;
 80010a2:	2380      	movs	r3, #128	@ 0x80
 80010a4:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80010a6:	1d3a      	adds	r2, r7, #4
 80010a8:	2364      	movs	r3, #100	@ 0x64
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	2302      	movs	r3, #2
 80010ae:	2194      	movs	r1, #148	@ 0x94
 80010b0:	485d      	ldr	r0, [pc, #372]	@ (8001228 <configAudio+0x1dc>)
 80010b2:	f004 fee7 	bl	8005e84 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x32;
 80010b6:	2332      	movs	r3, #50	@ 0x32
 80010b8:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x00;
 80010ba:	2300      	movs	r3, #0
 80010bc:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80010be:	1d3a      	adds	r2, r7, #4
 80010c0:	2364      	movs	r3, #100	@ 0x64
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	2302      	movs	r3, #2
 80010c6:	2194      	movs	r1, #148	@ 0x94
 80010c8:	4857      	ldr	r0, [pc, #348]	@ (8001228 <configAudio+0x1dc>)
 80010ca:	f004 fedb 	bl	8005e84 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x00;
 80010ce:	2300      	movs	r3, #0
 80010d0:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x00;
 80010d2:	2300      	movs	r3, #0
 80010d4:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80010d6:	1d3a      	adds	r2, r7, #4
 80010d8:	2364      	movs	r3, #100	@ 0x64
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	2302      	movs	r3, #2
 80010de:	2194      	movs	r1, #148	@ 0x94
 80010e0:	4851      	ldr	r0, [pc, #324]	@ (8001228 <configAudio+0x1dc>)
 80010e2:	f004 fecf 	bl	8005e84 <HAL_I2C_Master_Transmit>

    /* Ctl registers configuration */
    bytes[0] = 0x04;
 80010e6:	2304      	movs	r3, #4
 80010e8:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0xAF;
 80010ea:	23af      	movs	r3, #175	@ 0xaf
 80010ec:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80010ee:	1d3a      	adds	r2, r7, #4
 80010f0:	2364      	movs	r3, #100	@ 0x64
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	2302      	movs	r3, #2
 80010f6:	2194      	movs	r1, #148	@ 0x94
 80010f8:	484b      	ldr	r0, [pc, #300]	@ (8001228 <configAudio+0x1dc>)
 80010fa:	f004 fec3 	bl	8005e84 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x0D;
 80010fe:	230d      	movs	r3, #13
 8001100:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x70;
 8001102:	2370      	movs	r3, #112	@ 0x70
 8001104:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8001106:	1d3a      	adds	r2, r7, #4
 8001108:	2364      	movs	r3, #100	@ 0x64
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	2302      	movs	r3, #2
 800110e:	2194      	movs	r1, #148	@ 0x94
 8001110:	4845      	ldr	r0, [pc, #276]	@ (8001228 <configAudio+0x1dc>)
 8001112:	f004 feb7 	bl	8005e84 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x05;
 8001116:	2305      	movs	r3, #5
 8001118:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x81;
 800111a:	2381      	movs	r3, #129	@ 0x81
 800111c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800111e:	1d3a      	adds	r2, r7, #4
 8001120:	2364      	movs	r3, #100	@ 0x64
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	2302      	movs	r3, #2
 8001126:	2194      	movs	r1, #148	@ 0x94
 8001128:	483f      	ldr	r0, [pc, #252]	@ (8001228 <configAudio+0x1dc>)
 800112a:	f004 feab 	bl	8005e84 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x06;
 800112e:	2306      	movs	r3, #6
 8001130:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x07;
 8001132:	2307      	movs	r3, #7
 8001134:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8001136:	1d3a      	adds	r2, r7, #4
 8001138:	2364      	movs	r3, #100	@ 0x64
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	2302      	movs	r3, #2
 800113e:	2194      	movs	r1, #148	@ 0x94
 8001140:	4839      	ldr	r0, [pc, #228]	@ (8001228 <configAudio+0x1dc>)
 8001142:	f004 fe9f 	bl	8005e84 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x0A;
 8001146:	230a      	movs	r3, #10
 8001148:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x00;
 800114a:	2300      	movs	r3, #0
 800114c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800114e:	1d3a      	adds	r2, r7, #4
 8001150:	2364      	movs	r3, #100	@ 0x64
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	2302      	movs	r3, #2
 8001156:	2194      	movs	r1, #148	@ 0x94
 8001158:	4833      	ldr	r0, [pc, #204]	@ (8001228 <configAudio+0x1dc>)
 800115a:	f004 fe93 	bl	8005e84 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x27;
 800115e:	2327      	movs	r3, #39	@ 0x27
 8001160:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x00;
 8001162:	2300      	movs	r3, #0
 8001164:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8001166:	1d3a      	adds	r2, r7, #4
 8001168:	2364      	movs	r3, #100	@ 0x64
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	2302      	movs	r3, #2
 800116e:	2194      	movs	r1, #148	@ 0x94
 8001170:	482d      	ldr	r0, [pc, #180]	@ (8001228 <configAudio+0x1dc>)
 8001172:	f004 fe87 	bl	8005e84 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x1F;
 8001176:	231f      	movs	r3, #31
 8001178:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x0F;
 800117a:	230f      	movs	r3, #15
 800117c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800117e:	1d3a      	adds	r2, r7, #4
 8001180:	2364      	movs	r3, #100	@ 0x64
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	2302      	movs	r3, #2
 8001186:	2194      	movs	r1, #148	@ 0x94
 8001188:	4827      	ldr	r0, [pc, #156]	@ (8001228 <configAudio+0x1dc>)
 800118a:	f004 fe7b 	bl	8005e84 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x22;
 800118e:	2322      	movs	r3, #34	@ 0x22
 8001190:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0xC0;
 8001192:	23c0      	movs	r3, #192	@ 0xc0
 8001194:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8001196:	1d3a      	adds	r2, r7, #4
 8001198:	2364      	movs	r3, #100	@ 0x64
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	2302      	movs	r3, #2
 800119e:	2194      	movs	r1, #148	@ 0x94
 80011a0:	4821      	ldr	r0, [pc, #132]	@ (8001228 <configAudio+0x1dc>)
 80011a2:	f004 fe6f 	bl	8005e84 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x14;
 80011a6:	2314      	movs	r3, #20
 80011a8:	713b      	strb	r3, [r7, #4]
    bytes[1] = 2;
 80011aa:	2302      	movs	r3, #2
 80011ac:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80011ae:	1d3a      	adds	r2, r7, #4
 80011b0:	2364      	movs	r3, #100	@ 0x64
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	2302      	movs	r3, #2
 80011b6:	2194      	movs	r1, #148	@ 0x94
 80011b8:	481b      	ldr	r0, [pc, #108]	@ (8001228 <configAudio+0x1dc>)
 80011ba:	f004 fe63 	bl	8005e84 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x15;
 80011be:	2315      	movs	r3, #21
 80011c0:	713b      	strb	r3, [r7, #4]
    bytes[1] = 2;
 80011c2:	2302      	movs	r3, #2
 80011c4:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80011c6:	1d3a      	adds	r2, r7, #4
 80011c8:	2364      	movs	r3, #100	@ 0x64
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	2302      	movs	r3, #2
 80011ce:	2194      	movs	r1, #148	@ 0x94
 80011d0:	4815      	ldr	r0, [pc, #84]	@ (8001228 <configAudio+0x1dc>)
 80011d2:	f004 fe57 	bl	8005e84 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x20;
 80011d6:	2320      	movs	r3, #32
 80011d8:	713b      	strb	r3, [r7, #4]
    bytes[1] = 24;
 80011da:	2318      	movs	r3, #24
 80011dc:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80011de:	1d3a      	adds	r2, r7, #4
 80011e0:	2364      	movs	r3, #100	@ 0x64
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	2302      	movs	r3, #2
 80011e6:	2194      	movs	r1, #148	@ 0x94
 80011e8:	480f      	ldr	r0, [pc, #60]	@ (8001228 <configAudio+0x1dc>)
 80011ea:	f004 fe4b 	bl	8005e84 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x21;
 80011ee:	2321      	movs	r3, #33	@ 0x21
 80011f0:	713b      	strb	r3, [r7, #4]
    bytes[1] = 24;
 80011f2:	2318      	movs	r3, #24
 80011f4:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80011f6:	1d3a      	adds	r2, r7, #4
 80011f8:	2364      	movs	r3, #100	@ 0x64
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2302      	movs	r3, #2
 80011fe:	2194      	movs	r1, #148	@ 0x94
 8001200:	4809      	ldr	r0, [pc, #36]	@ (8001228 <configAudio+0x1dc>)
 8001202:	f004 fe3f 	bl	8005e84 <HAL_I2C_Master_Transmit>

    /* Power up */
    bytes[0] = 0x02;
 8001206:	2302      	movs	r3, #2
 8001208:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x9E;
 800120a:	239e      	movs	r3, #158	@ 0x9e
 800120c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800120e:	1d3a      	adds	r2, r7, #4
 8001210:	2364      	movs	r3, #100	@ 0x64
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	2302      	movs	r3, #2
 8001216:	2194      	movs	r1, #148	@ 0x94
 8001218:	4803      	ldr	r0, [pc, #12]	@ (8001228 <configAudio+0x1dc>)
 800121a:	f004 fe33 	bl	8005e84 <HAL_I2C_Master_Transmit>
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20000164 	.word	0x20000164

0800122c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	4b1b      	ldr	r3, [pc, #108]	@ (80012a4 <MX_DMA_Init+0x78>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	4a1a      	ldr	r2, [pc, #104]	@ (80012a4 <MX_DMA_Init+0x78>)
 800123c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001240:	6313      	str	r3, [r2, #48]	@ 0x30
 8001242:	4b18      	ldr	r3, [pc, #96]	@ (80012a4 <MX_DMA_Init+0x78>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	603b      	str	r3, [r7, #0]
 8001252:	4b14      	ldr	r3, [pc, #80]	@ (80012a4 <MX_DMA_Init+0x78>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	4a13      	ldr	r2, [pc, #76]	@ (80012a4 <MX_DMA_Init+0x78>)
 8001258:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800125c:	6313      	str	r3, [r2, #48]	@ 0x30
 800125e:	4b11      	ldr	r3, [pc, #68]	@ (80012a4 <MX_DMA_Init+0x78>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001262:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001266:	603b      	str	r3, [r7, #0]
 8001268:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	2100      	movs	r1, #0
 800126e:	2011      	movs	r0, #17
 8001270:	f001 fe33 	bl	8002eda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001274:	2011      	movs	r0, #17
 8001276:	f001 fe4c 	bl	8002f12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800127a:	2200      	movs	r2, #0
 800127c:	2100      	movs	r1, #0
 800127e:	202f      	movs	r0, #47	@ 0x2f
 8001280:	f001 fe2b 	bl	8002eda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001284:	202f      	movs	r0, #47	@ 0x2f
 8001286:	f001 fe44 	bl	8002f12 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	2100      	movs	r1, #0
 800128e:	2038      	movs	r0, #56	@ 0x38
 8001290:	f001 fe23 	bl	8002eda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001294:	2038      	movs	r0, #56	@ 0x38
 8001296:	f001 fe3c 	bl	8002f12 <HAL_NVIC_EnableIRQ>

}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800

080012a8 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08c      	sub	sp, #48	@ 0x30
 80012ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ae:	f107 031c 	add.w	r3, r7, #28
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
 80012bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	61bb      	str	r3, [r7, #24]
 80012c2:	4b72      	ldr	r3, [pc, #456]	@ (800148c <MX_GPIO_Init+0x1e4>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	4a71      	ldr	r2, [pc, #452]	@ (800148c <MX_GPIO_Init+0x1e4>)
 80012c8:	f043 0310 	orr.w	r3, r3, #16
 80012cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ce:	4b6f      	ldr	r3, [pc, #444]	@ (800148c <MX_GPIO_Init+0x1e4>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	f003 0310 	and.w	r3, r3, #16
 80012d6:	61bb      	str	r3, [r7, #24]
 80012d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	4b6b      	ldr	r3, [pc, #428]	@ (800148c <MX_GPIO_Init+0x1e4>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	4a6a      	ldr	r2, [pc, #424]	@ (800148c <MX_GPIO_Init+0x1e4>)
 80012e4:	f043 0304 	orr.w	r3, r3, #4
 80012e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ea:	4b68      	ldr	r3, [pc, #416]	@ (800148c <MX_GPIO_Init+0x1e4>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	f003 0304 	and.w	r3, r3, #4
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
 80012fa:	4b64      	ldr	r3, [pc, #400]	@ (800148c <MX_GPIO_Init+0x1e4>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fe:	4a63      	ldr	r2, [pc, #396]	@ (800148c <MX_GPIO_Init+0x1e4>)
 8001300:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001304:	6313      	str	r3, [r2, #48]	@ 0x30
 8001306:	4b61      	ldr	r3, [pc, #388]	@ (800148c <MX_GPIO_Init+0x1e4>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	4b5d      	ldr	r3, [pc, #372]	@ (800148c <MX_GPIO_Init+0x1e4>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	4a5c      	ldr	r2, [pc, #368]	@ (800148c <MX_GPIO_Init+0x1e4>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6313      	str	r3, [r2, #48]	@ 0x30
 8001322:	4b5a      	ldr	r3, [pc, #360]	@ (800148c <MX_GPIO_Init+0x1e4>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	4b56      	ldr	r3, [pc, #344]	@ (800148c <MX_GPIO_Init+0x1e4>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	4a55      	ldr	r2, [pc, #340]	@ (800148c <MX_GPIO_Init+0x1e4>)
 8001338:	f043 0302 	orr.w	r3, r3, #2
 800133c:	6313      	str	r3, [r2, #48]	@ 0x30
 800133e:	4b53      	ldr	r3, [pc, #332]	@ (800148c <MX_GPIO_Init+0x1e4>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
 800134e:	4b4f      	ldr	r3, [pc, #316]	@ (800148c <MX_GPIO_Init+0x1e4>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	4a4e      	ldr	r2, [pc, #312]	@ (800148c <MX_GPIO_Init+0x1e4>)
 8001354:	f043 0308 	orr.w	r3, r3, #8
 8001358:	6313      	str	r3, [r2, #48]	@ 0x30
 800135a:	4b4c      	ldr	r3, [pc, #304]	@ (800148c <MX_GPIO_Init+0x1e4>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135e:	f003 0308 	and.w	r3, r3, #8
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001366:	2200      	movs	r2, #0
 8001368:	2108      	movs	r1, #8
 800136a:	4849      	ldr	r0, [pc, #292]	@ (8001490 <MX_GPIO_Init+0x1e8>)
 800136c:	f002 faf8 	bl	8003960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001370:	2201      	movs	r2, #1
 8001372:	2101      	movs	r1, #1
 8001374:	4847      	ldr	r0, [pc, #284]	@ (8001494 <MX_GPIO_Init+0x1ec>)
 8001376:	f002 faf3 	bl	8003960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800137a:	2200      	movs	r2, #0
 800137c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001380:	4845      	ldr	r0, [pc, #276]	@ (8001498 <MX_GPIO_Init+0x1f0>)
 8001382:	f002 faed 	bl	8003960 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001386:	2308      	movs	r3, #8
 8001388:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138a:	2301      	movs	r3, #1
 800138c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	2300      	movs	r3, #0
 8001394:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001396:	f107 031c 	add.w	r3, r7, #28
 800139a:	4619      	mov	r1, r3
 800139c:	483c      	ldr	r0, [pc, #240]	@ (8001490 <MX_GPIO_Init+0x1e8>)
 800139e:	f002 f943 	bl	8003628 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80013a2:	2301      	movs	r3, #1
 80013a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a6:	2301      	movs	r3, #1
 80013a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ae:	2300      	movs	r3, #0
 80013b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80013b2:	f107 031c 	add.w	r3, r7, #28
 80013b6:	4619      	mov	r1, r3
 80013b8:	4836      	ldr	r0, [pc, #216]	@ (8001494 <MX_GPIO_Init+0x1ec>)
 80013ba:	f002 f935 	bl	8003628 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80013be:	2308      	movs	r3, #8
 80013c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c2:	2302      	movs	r3, #2
 80013c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ca:	2300      	movs	r3, #0
 80013cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013ce:	2305      	movs	r3, #5
 80013d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80013d2:	f107 031c 	add.w	r3, r7, #28
 80013d6:	4619      	mov	r1, r3
 80013d8:	482e      	ldr	r0, [pc, #184]	@ (8001494 <MX_GPIO_Init+0x1ec>)
 80013da:	f002 f925 	bl	8003628 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013de:	2301      	movs	r3, #1
 80013e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013e2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ec:	f107 031c 	add.w	r3, r7, #28
 80013f0:	4619      	mov	r1, r3
 80013f2:	482a      	ldr	r0, [pc, #168]	@ (800149c <MX_GPIO_Init+0x1f4>)
 80013f4:	f002 f918 	bl	8003628 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80013f8:	2304      	movs	r3, #4
 80013fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013fc:	2300      	movs	r3, #0
 80013fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001404:	f107 031c 	add.w	r3, r7, #28
 8001408:	4619      	mov	r1, r3
 800140a:	4825      	ldr	r0, [pc, #148]	@ (80014a0 <MX_GPIO_Init+0x1f8>)
 800140c:	f002 f90c 	bl	8003628 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001410:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001414:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001416:	2302      	movs	r3, #2
 8001418:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141e:	2300      	movs	r3, #0
 8001420:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001422:	2305      	movs	r3, #5
 8001424:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001426:	f107 031c 	add.w	r3, r7, #28
 800142a:	4619      	mov	r1, r3
 800142c:	481c      	ldr	r0, [pc, #112]	@ (80014a0 <MX_GPIO_Init+0x1f8>)
 800142e:	f002 f8fb 	bl	8003628 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001432:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001436:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001438:	2301      	movs	r3, #1
 800143a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001440:	2300      	movs	r3, #0
 8001442:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001444:	f107 031c 	add.w	r3, r7, #28
 8001448:	4619      	mov	r1, r3
 800144a:	4813      	ldr	r0, [pc, #76]	@ (8001498 <MX_GPIO_Init+0x1f0>)
 800144c:	f002 f8ec 	bl	8003628 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001450:	2320      	movs	r3, #32
 8001452:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001454:	2300      	movs	r3, #0
 8001456:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800145c:	f107 031c 	add.w	r3, r7, #28
 8001460:	4619      	mov	r1, r3
 8001462:	480d      	ldr	r0, [pc, #52]	@ (8001498 <MX_GPIO_Init+0x1f0>)
 8001464:	f002 f8e0 	bl	8003628 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001468:	2302      	movs	r3, #2
 800146a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800146c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001470:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001476:	f107 031c 	add.w	r3, r7, #28
 800147a:	4619      	mov	r1, r3
 800147c:	4804      	ldr	r0, [pc, #16]	@ (8001490 <MX_GPIO_Init+0x1e8>)
 800147e:	f002 f8d3 	bl	8003628 <HAL_GPIO_Init>

}
 8001482:	bf00      	nop
 8001484:	3730      	adds	r7, #48	@ 0x30
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800
 8001490:	40021000 	.word	0x40021000
 8001494:	40020800 	.word	0x40020800
 8001498:	40020c00 	.word	0x40020c00
 800149c:	40020000 	.word	0x40020000
 80014a0:	40020400 	.word	0x40020400

080014a4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014a8:	4b12      	ldr	r3, [pc, #72]	@ (80014f4 <MX_I2C1_Init+0x50>)
 80014aa:	4a13      	ldr	r2, [pc, #76]	@ (80014f8 <MX_I2C1_Init+0x54>)
 80014ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014ae:	4b11      	ldr	r3, [pc, #68]	@ (80014f4 <MX_I2C1_Init+0x50>)
 80014b0:	4a12      	ldr	r2, [pc, #72]	@ (80014fc <MX_I2C1_Init+0x58>)
 80014b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014b4:	4b0f      	ldr	r3, [pc, #60]	@ (80014f4 <MX_I2C1_Init+0x50>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014ba:	4b0e      	ldr	r3, [pc, #56]	@ (80014f4 <MX_I2C1_Init+0x50>)
 80014bc:	2200      	movs	r2, #0
 80014be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014c0:	4b0c      	ldr	r3, [pc, #48]	@ (80014f4 <MX_I2C1_Init+0x50>)
 80014c2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014c8:	4b0a      	ldr	r3, [pc, #40]	@ (80014f4 <MX_I2C1_Init+0x50>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014ce:	4b09      	ldr	r3, [pc, #36]	@ (80014f4 <MX_I2C1_Init+0x50>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014d4:	4b07      	ldr	r3, [pc, #28]	@ (80014f4 <MX_I2C1_Init+0x50>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014da:	4b06      	ldr	r3, [pc, #24]	@ (80014f4 <MX_I2C1_Init+0x50>)
 80014dc:	2200      	movs	r2, #0
 80014de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014e0:	4804      	ldr	r0, [pc, #16]	@ (80014f4 <MX_I2C1_Init+0x50>)
 80014e2:	f004 fb8b 	bl	8005bfc <HAL_I2C_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014ec:	f000 fcfc 	bl	8001ee8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014f0:	bf00      	nop
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20000164 	.word	0x20000164
 80014f8:	40005400 	.word	0x40005400
 80014fc:	000186a0 	.word	0x000186a0

08001500 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08a      	sub	sp, #40	@ 0x28
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a19      	ldr	r2, [pc, #100]	@ (8001584 <HAL_I2C_MspInit+0x84>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d12c      	bne.n	800157c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
 8001526:	4b18      	ldr	r3, [pc, #96]	@ (8001588 <HAL_I2C_MspInit+0x88>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	4a17      	ldr	r2, [pc, #92]	@ (8001588 <HAL_I2C_MspInit+0x88>)
 800152c:	f043 0302 	orr.w	r3, r3, #2
 8001530:	6313      	str	r3, [r2, #48]	@ 0x30
 8001532:	4b15      	ldr	r3, [pc, #84]	@ (8001588 <HAL_I2C_MspInit+0x88>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	613b      	str	r3, [r7, #16]
 800153c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800153e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001544:	2312      	movs	r3, #18
 8001546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001548:	2301      	movs	r3, #1
 800154a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	2300      	movs	r3, #0
 800154e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001550:	2304      	movs	r3, #4
 8001552:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	4619      	mov	r1, r3
 800155a:	480c      	ldr	r0, [pc, #48]	@ (800158c <HAL_I2C_MspInit+0x8c>)
 800155c:	f002 f864 	bl	8003628 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	4b08      	ldr	r3, [pc, #32]	@ (8001588 <HAL_I2C_MspInit+0x88>)
 8001566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001568:	4a07      	ldr	r2, [pc, #28]	@ (8001588 <HAL_I2C_MspInit+0x88>)
 800156a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800156e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001570:	4b05      	ldr	r3, [pc, #20]	@ (8001588 <HAL_I2C_MspInit+0x88>)
 8001572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001574:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800157c:	bf00      	nop
 800157e:	3728      	adds	r7, #40	@ 0x28
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40005400 	.word	0x40005400
 8001588:	40023800 	.word	0x40023800
 800158c:	40020400 	.word	0x40020400

08001590 <MX_I2S3_Init>:
I2S_HandleTypeDef hi2s3;
DMA_HandleTypeDef hdma_spi3_tx;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001594:	4b13      	ldr	r3, [pc, #76]	@ (80015e4 <MX_I2S3_Init+0x54>)
 8001596:	4a14      	ldr	r2, [pc, #80]	@ (80015e8 <MX_I2S3_Init+0x58>)
 8001598:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800159a:	4b12      	ldr	r3, [pc, #72]	@ (80015e4 <MX_I2S3_Init+0x54>)
 800159c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015a0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80015a2:	4b10      	ldr	r3, [pc, #64]	@ (80015e4 <MX_I2S3_Init+0x54>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80015a8:	4b0e      	ldr	r3, [pc, #56]	@ (80015e4 <MX_I2S3_Init+0x54>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80015ae:	4b0d      	ldr	r3, [pc, #52]	@ (80015e4 <MX_I2S3_Init+0x54>)
 80015b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015b4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 80015b6:	4b0b      	ldr	r3, [pc, #44]	@ (80015e4 <MX_I2S3_Init+0x54>)
 80015b8:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80015bc:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80015be:	4b09      	ldr	r3, [pc, #36]	@ (80015e4 <MX_I2S3_Init+0x54>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80015c4:	4b07      	ldr	r3, [pc, #28]	@ (80015e4 <MX_I2S3_Init+0x54>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80015ca:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <MX_I2S3_Init+0x54>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80015d0:	4804      	ldr	r0, [pc, #16]	@ (80015e4 <MX_I2S3_Init+0x54>)
 80015d2:	f004 ffb1 	bl	8006538 <HAL_I2S_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 80015dc:	f000 fc84 	bl	8001ee8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	200001b8 	.word	0x200001b8
 80015e8:	40003c00 	.word	0x40003c00

080015ec <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08e      	sub	sp, #56	@ 0x38
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a49      	ldr	r2, [pc, #292]	@ (800173c <HAL_I2S_MspInit+0x150>)
 8001618:	4293      	cmp	r3, r2
 800161a:	f040 808b 	bne.w	8001734 <HAL_I2S_MspInit+0x148>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800161e:	2301      	movs	r3, #1
 8001620:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001622:	23c0      	movs	r3, #192	@ 0xc0
 8001624:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001626:	2302      	movs	r3, #2
 8001628:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800162a:	f107 0314 	add.w	r3, r7, #20
 800162e:	4618      	mov	r0, r3
 8001630:	f006 f9b2 	bl	8007998 <HAL_RCCEx_PeriphCLKConfig>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 800163a:	f000 fc55 	bl	8001ee8 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	613b      	str	r3, [r7, #16]
 8001642:	4b3f      	ldr	r3, [pc, #252]	@ (8001740 <HAL_I2S_MspInit+0x154>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001646:	4a3e      	ldr	r2, [pc, #248]	@ (8001740 <HAL_I2S_MspInit+0x154>)
 8001648:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800164c:	6413      	str	r3, [r2, #64]	@ 0x40
 800164e:	4b3c      	ldr	r3, [pc, #240]	@ (8001740 <HAL_I2S_MspInit+0x154>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001652:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001656:	613b      	str	r3, [r7, #16]
 8001658:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	4b38      	ldr	r3, [pc, #224]	@ (8001740 <HAL_I2S_MspInit+0x154>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	4a37      	ldr	r2, [pc, #220]	@ (8001740 <HAL_I2S_MspInit+0x154>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	6313      	str	r3, [r2, #48]	@ 0x30
 800166a:	4b35      	ldr	r3, [pc, #212]	@ (8001740 <HAL_I2S_MspInit+0x154>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	60bb      	str	r3, [r7, #8]
 800167a:	4b31      	ldr	r3, [pc, #196]	@ (8001740 <HAL_I2S_MspInit+0x154>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	4a30      	ldr	r2, [pc, #192]	@ (8001740 <HAL_I2S_MspInit+0x154>)
 8001680:	f043 0304 	orr.w	r3, r3, #4
 8001684:	6313      	str	r3, [r2, #48]	@ 0x30
 8001686:	4b2e      	ldr	r3, [pc, #184]	@ (8001740 <HAL_I2S_MspInit+0x154>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168a:	f003 0304 	and.w	r3, r3, #4
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001692:	2310      	movs	r3, #16
 8001694:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001696:	2302      	movs	r3, #2
 8001698:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	2300      	movs	r3, #0
 80016a0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80016a2:	2306      	movs	r3, #6
 80016a4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80016a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016aa:	4619      	mov	r1, r3
 80016ac:	4825      	ldr	r0, [pc, #148]	@ (8001744 <HAL_I2S_MspInit+0x158>)
 80016ae:	f001 ffbb 	bl	8003628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80016b2:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80016b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b8:	2302      	movs	r3, #2
 80016ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c0:	2300      	movs	r3, #0
 80016c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80016c4:	2306      	movs	r3, #6
 80016c6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016cc:	4619      	mov	r1, r3
 80016ce:	481e      	ldr	r0, [pc, #120]	@ (8001748 <HAL_I2S_MspInit+0x15c>)
 80016d0:	f001 ffaa 	bl	8003628 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream7;
 80016d4:	4b1d      	ldr	r3, [pc, #116]	@ (800174c <HAL_I2S_MspInit+0x160>)
 80016d6:	4a1e      	ldr	r2, [pc, #120]	@ (8001750 <HAL_I2S_MspInit+0x164>)
 80016d8:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80016da:	4b1c      	ldr	r3, [pc, #112]	@ (800174c <HAL_I2S_MspInit+0x160>)
 80016dc:	2200      	movs	r2, #0
 80016de:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016e0:	4b1a      	ldr	r3, [pc, #104]	@ (800174c <HAL_I2S_MspInit+0x160>)
 80016e2:	2240      	movs	r2, #64	@ 0x40
 80016e4:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016e6:	4b19      	ldr	r3, [pc, #100]	@ (800174c <HAL_I2S_MspInit+0x160>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016ec:	4b17      	ldr	r3, [pc, #92]	@ (800174c <HAL_I2S_MspInit+0x160>)
 80016ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016f2:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016f4:	4b15      	ldr	r3, [pc, #84]	@ (800174c <HAL_I2S_MspInit+0x160>)
 80016f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80016fa:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016fc:	4b13      	ldr	r3, [pc, #76]	@ (800174c <HAL_I2S_MspInit+0x160>)
 80016fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001702:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001704:	4b11      	ldr	r3, [pc, #68]	@ (800174c <HAL_I2S_MspInit+0x160>)
 8001706:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800170a:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800170c:	4b0f      	ldr	r3, [pc, #60]	@ (800174c <HAL_I2S_MspInit+0x160>)
 800170e:	2200      	movs	r2, #0
 8001710:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001712:	4b0e      	ldr	r3, [pc, #56]	@ (800174c <HAL_I2S_MspInit+0x160>)
 8001714:	2200      	movs	r2, #0
 8001716:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001718:	480c      	ldr	r0, [pc, #48]	@ (800174c <HAL_I2S_MspInit+0x160>)
 800171a:	f001 fc15 	bl	8002f48 <HAL_DMA_Init>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <HAL_I2S_MspInit+0x13c>
    {
      Error_Handler();
 8001724:	f000 fbe0 	bl	8001ee8 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi3_tx);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a08      	ldr	r2, [pc, #32]	@ (800174c <HAL_I2S_MspInit+0x160>)
 800172c:	639a      	str	r2, [r3, #56]	@ 0x38
 800172e:	4a07      	ldr	r2, [pc, #28]	@ (800174c <HAL_I2S_MspInit+0x160>)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001734:	bf00      	nop
 8001736:	3738      	adds	r7, #56	@ 0x38
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40003c00 	.word	0x40003c00
 8001740:	40023800 	.word	0x40023800
 8001744:	40020000 	.word	0x40020000
 8001748:	40020800 	.word	0x40020800
 800174c:	20000200 	.word	0x20000200
 8001750:	400260b8 	.word	0x400260b8

08001754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	q15_t number = 394;
 800175a:	f44f 73c5 	mov.w	r3, #394	@ 0x18a
 800175e:	81fb      	strh	r3, [r7, #14]
	int num = 2;
 8001760:	2302      	movs	r3, #2
 8001762:	60bb      	str	r3, [r7, #8]
	q15_t output = number * 2;
 8001764:	89fb      	ldrh	r3, [r7, #14]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	b29b      	uxth	r3, r3
 800176a:	80fb      	strh	r3, [r7, #6]

	float da = 0.5f;
 800176c:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8001770:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001772:	f000 fe43 	bl	80023fc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001776:	f000 f91d 	bl	80019b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800177a:	f7ff fd95 	bl	80012a8 <MX_GPIO_Init>
  MX_DMA_Init();
 800177e:	f7ff fd55 	bl	800122c <MX_DMA_Init>
  MX_I2C1_Init();
 8001782:	f7ff fe8f 	bl	80014a4 <MX_I2C1_Init>
  MX_I2S3_Init();
 8001786:	f7ff ff03 	bl	8001590 <MX_I2S3_Init>
  MX_SPI1_Init();
 800178a:	f000 fbb3 	bl	8001ef4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800178e:	f00a fc7f 	bl	800c090 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 8001792:	f000 fcf5 	bl	8002180 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001796:	f7ff fb83 	bl	8000ea0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800179a:	f000 fd5d 	bl	8002258 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  configAudio();
 800179e:	f7ff fc55 	bl	800104c <configAudio>
  arm_rfft_init_q15(&rfft_instance, FFT_SIZE, 0, 1);
 80017a2:	2301      	movs	r3, #1
 80017a4:	2200      	movs	r2, #0
 80017a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017aa:	4870      	ldr	r0, [pc, #448]	@ (800196c <main+0x218>)
 80017ac:	f00b f85a 	bl	800c864 <arm_rfft_init_q15>

  HAL_TIM_Base_Start(&htim2);
 80017b0:	486f      	ldr	r0, [pc, #444]	@ (8001970 <main+0x21c>)
 80017b2:	f006 fb0b 	bl	8007dcc <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, adc_buffer, ADC_SIZE);
 80017b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017ba:	496e      	ldr	r1, [pc, #440]	@ (8001974 <main+0x220>)
 80017bc:	486e      	ldr	r0, [pc, #440]	@ (8001978 <main+0x224>)
 80017be:	f000 fef7 	bl	80025b0 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80017c2:	f00a fc8b 	bl	800c0dc <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
	  if (adc_half_flag == 1) {
 80017c6:	4b6d      	ldr	r3, [pc, #436]	@ (800197c <main+0x228>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d15d      	bne.n	800188c <main+0x138>
    	adc_half_flag = 0;
 80017d0:	4b6a      	ldr	r3, [pc, #424]	@ (800197c <main+0x228>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	701a      	strb	r2, [r3, #0]
    	conv_flag = 0;
 80017d6:	4b6a      	ldr	r3, [pc, #424]	@ (8001980 <main+0x22c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	701a      	strb	r2, [r3, #0]
    	init_highpass_filter();
 80017dc:	f000 fa7e 	bl	8001cdc <init_highpass_filter>
    	convert_to_q15(adc_buffer, conv_signal, ADC_SIZE);
 80017e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017e4:	4967      	ldr	r1, [pc, #412]	@ (8001984 <main+0x230>)
 80017e6:	4863      	ldr	r0, [pc, #396]	@ (8001974 <main+0x220>)
 80017e8:	f000 f966 	bl	8001ab8 <convert_to_q15>
    	center_signal(conv_signal, ADC_SIZE/2);
 80017ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017f0:	4864      	ldr	r0, [pc, #400]	@ (8001984 <main+0x230>)
 80017f2:	f000 f9b7 	bl	8001b64 <center_signal>
    	apply_highpass_filter(conv_signal, filtered_signal, ADC_SIZE/2);
 80017f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017fa:	4963      	ldr	r1, [pc, #396]	@ (8001988 <main+0x234>)
 80017fc:	4861      	ldr	r0, [pc, #388]	@ (8001984 <main+0x230>)
 80017fe:	f000 fa5b 	bl	8001cb8 <apply_highpass_filter>
    	center_signal(filtered_signal, ADC_SIZE/2);
 8001802:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001806:	4860      	ldr	r0, [pc, #384]	@ (8001988 <main+0x234>)
 8001808:	f000 f9ac 	bl	8001b64 <center_signal>

    	memcpy(fft_signal, filtered_signal, FFT_SIZE*sizeof(q15_t));
 800180c:	4a5f      	ldr	r2, [pc, #380]	@ (800198c <main+0x238>)
 800180e:	4b5e      	ldr	r3, [pc, #376]	@ (8001988 <main+0x234>)
 8001810:	4610      	mov	r0, r2
 8001812:	4619      	mov	r1, r3
 8001814:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001818:	461a      	mov	r2, r3
 800181a:	f00b fe0b 	bl	800d434 <memcpy>
		rfft(fft_signal, fftOutput, magnitudeSpectrum);
 800181e:	4a5c      	ldr	r2, [pc, #368]	@ (8001990 <main+0x23c>)
 8001820:	495c      	ldr	r1, [pc, #368]	@ (8001994 <main+0x240>)
 8001822:	485a      	ldr	r0, [pc, #360]	@ (800198c <main+0x238>)
 8001824:	f000 fa6e 	bl	8001d04 <rfft>
		peak_values_fft(magnitudeSpectrum);
 8001828:	4859      	ldr	r0, [pc, #356]	@ (8001990 <main+0x23c>)
 800182a:	f000 facb 	bl	8001dc4 <peak_values_fft>
    	offset_signal(filtered_signal, output_signal, ADC_SIZE/2);
 800182e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001832:	4959      	ldr	r1, [pc, #356]	@ (8001998 <main+0x244>)
 8001834:	4854      	ldr	r0, [pc, #336]	@ (8001988 <main+0x234>)
 8001836:	f000 f9c3 	bl	8001bc0 <offset_signal>

    	if (distortion_flag == 1) {
 800183a:	4b58      	ldr	r3, [pc, #352]	@ (800199c <main+0x248>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	b2db      	uxtb	r3, r3
 8001840:	2b01      	cmp	r3, #1
 8001842:	d11a      	bne.n	800187a <main+0x126>
        	for (int i = 0; i < ADC_SIZE/2; i++) {
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
 8001848:	e013      	b.n	8001872 <main+0x11e>
        		output_signal[i] = distortion(output_signal[i], distortion_strength);
 800184a:	4a53      	ldr	r2, [pc, #332]	@ (8001998 <main+0x244>)
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001852:	4a53      	ldr	r2, [pc, #332]	@ (80019a0 <main+0x24c>)
 8001854:	7812      	ldrb	r2, [r2, #0]
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	4611      	mov	r1, r2
 800185a:	4618      	mov	r0, r3
 800185c:	f000 f914 	bl	8001a88 <distortion>
 8001860:	4603      	mov	r3, r0
 8001862:	4619      	mov	r1, r3
 8001864:	4a4c      	ldr	r2, [pc, #304]	@ (8001998 <main+0x244>)
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        	for (int i = 0; i < ADC_SIZE/2; i++) {
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	3301      	adds	r3, #1
 8001870:	617b      	str	r3, [r7, #20]
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001878:	dbe7      	blt.n	800184a <main+0xf6>
    	}




		i2s_send_flag = 0; //DA KRENE PRVU POLOVICU
 800187a:	4b4a      	ldr	r3, [pc, #296]	@ (80019a4 <main+0x250>)
 800187c:	2200      	movs	r2, #0
 800187e:	701a      	strb	r2, [r3, #0]

		convert_to_i2s(output_signal, i2s_signal, ADC_SIZE);
 8001880:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001884:	4948      	ldr	r1, [pc, #288]	@ (80019a8 <main+0x254>)
 8001886:	4844      	ldr	r0, [pc, #272]	@ (8001998 <main+0x244>)
 8001888:	f000 f9b2 	bl	8001bf0 <convert_to_i2s>

    }

    if (adc_done_flag == 1) {
 800188c:	4b47      	ldr	r3, [pc, #284]	@ (80019ac <main+0x258>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b01      	cmp	r3, #1
 8001894:	d195      	bne.n	80017c2 <main+0x6e>
    	adc_done_flag = 0;
 8001896:	4b45      	ldr	r3, [pc, #276]	@ (80019ac <main+0x258>)
 8001898:	2200      	movs	r2, #0
 800189a:	701a      	strb	r2, [r3, #0]
    	conv_flag = 1;
 800189c:	4b38      	ldr	r3, [pc, #224]	@ (8001980 <main+0x22c>)
 800189e:	2201      	movs	r2, #1
 80018a0:	701a      	strb	r2, [r3, #0]
    	init_highpass_filter();
 80018a2:	f000 fa1b 	bl	8001cdc <init_highpass_filter>
    	convert_to_q15(adc_buffer, conv_signal, ADC_SIZE);
 80018a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018aa:	4936      	ldr	r1, [pc, #216]	@ (8001984 <main+0x230>)
 80018ac:	4831      	ldr	r0, [pc, #196]	@ (8001974 <main+0x220>)
 80018ae:	f000 f903 	bl	8001ab8 <convert_to_q15>
    	center_signal(conv_signal, ADC_SIZE/2);
 80018b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018b6:	4833      	ldr	r0, [pc, #204]	@ (8001984 <main+0x230>)
 80018b8:	f000 f954 	bl	8001b64 <center_signal>
    	apply_highpass_filter(conv_signal, filtered_signal, ADC_SIZE/2);
 80018bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018c0:	4931      	ldr	r1, [pc, #196]	@ (8001988 <main+0x234>)
 80018c2:	4830      	ldr	r0, [pc, #192]	@ (8001984 <main+0x230>)
 80018c4:	f000 f9f8 	bl	8001cb8 <apply_highpass_filter>
    	center_signal(filtered_signal, ADC_SIZE/2);
 80018c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018cc:	482e      	ldr	r0, [pc, #184]	@ (8001988 <main+0x234>)
 80018ce:	f000 f949 	bl	8001b64 <center_signal>


    	memcpy(fft_signal, filtered_signal, FFT_SIZE*sizeof(q15_t));
 80018d2:	4a2e      	ldr	r2, [pc, #184]	@ (800198c <main+0x238>)
 80018d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001988 <main+0x234>)
 80018d6:	4610      	mov	r0, r2
 80018d8:	4619      	mov	r1, r3
 80018da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018de:	461a      	mov	r2, r3
 80018e0:	f00b fda8 	bl	800d434 <memcpy>
		rfft(fft_signal, fftOutput, magnitudeSpectrum);
 80018e4:	4a2a      	ldr	r2, [pc, #168]	@ (8001990 <main+0x23c>)
 80018e6:	492b      	ldr	r1, [pc, #172]	@ (8001994 <main+0x240>)
 80018e8:	4828      	ldr	r0, [pc, #160]	@ (800198c <main+0x238>)
 80018ea:	f000 fa0b 	bl	8001d04 <rfft>
		peak_values_fft(magnitudeSpectrum);
 80018ee:	4828      	ldr	r0, [pc, #160]	@ (8001990 <main+0x23c>)
 80018f0:	f000 fa68 	bl	8001dc4 <peak_values_fft>
    	offset_signal(filtered_signal, output_signal, ADC_SIZE/2);
 80018f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018f8:	4927      	ldr	r1, [pc, #156]	@ (8001998 <main+0x244>)
 80018fa:	4823      	ldr	r0, [pc, #140]	@ (8001988 <main+0x234>)
 80018fc:	f000 f960 	bl	8001bc0 <offset_signal>

    	if (distortion_flag == 1) {
 8001900:	4b26      	ldr	r3, [pc, #152]	@ (800199c <main+0x248>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b01      	cmp	r3, #1
 8001908:	d11a      	bne.n	8001940 <main+0x1ec>
        	for (int i = 0; i < ADC_SIZE/2; i++) {
 800190a:	2300      	movs	r3, #0
 800190c:	613b      	str	r3, [r7, #16]
 800190e:	e013      	b.n	8001938 <main+0x1e4>
        		output_signal[i] = distortion(output_signal[i], distortion_strength);
 8001910:	4a21      	ldr	r2, [pc, #132]	@ (8001998 <main+0x244>)
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001918:	4a21      	ldr	r2, [pc, #132]	@ (80019a0 <main+0x24c>)
 800191a:	7812      	ldrb	r2, [r2, #0]
 800191c:	b2d2      	uxtb	r2, r2
 800191e:	4611      	mov	r1, r2
 8001920:	4618      	mov	r0, r3
 8001922:	f000 f8b1 	bl	8001a88 <distortion>
 8001926:	4603      	mov	r3, r0
 8001928:	4619      	mov	r1, r3
 800192a:	4a1b      	ldr	r2, [pc, #108]	@ (8001998 <main+0x244>)
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        	for (int i = 0; i < ADC_SIZE/2; i++) {
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	3301      	adds	r3, #1
 8001936:	613b      	str	r3, [r7, #16]
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800193e:	dbe7      	blt.n	8001910 <main+0x1bc>
        	}
    	}



    	i2s_send_flag = 1; //DA KRENE DRUGU POLOVICU
 8001940:	4b18      	ldr	r3, [pc, #96]	@ (80019a4 <main+0x250>)
 8001942:	2201      	movs	r2, #1
 8001944:	701a      	strb	r2, [r3, #0]
    	convert_to_i2s(output_signal, i2s_signal, ADC_SIZE);
 8001946:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800194a:	4917      	ldr	r1, [pc, #92]	@ (80019a8 <main+0x254>)
 800194c:	4812      	ldr	r0, [pc, #72]	@ (8001998 <main+0x244>)
 800194e:	f000 f94f 	bl	8001bf0 <convert_to_i2s>
		if (flag_uart == 1) {
 8001952:	4b17      	ldr	r3, [pc, #92]	@ (80019b0 <main+0x25c>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	b2db      	uxtb	r3, r3
 8001958:	2b01      	cmp	r3, #1
 800195a:	d102      	bne.n	8001962 <main+0x20e>
			callUart(i2s_signal);
 800195c:	4812      	ldr	r0, [pc, #72]	@ (80019a8 <main+0x254>)
 800195e:	f000 fa73 	bl	8001e48 <callUart>
		}
		flag_uart = 0;
 8001962:	4b13      	ldr	r3, [pc, #76]	@ (80019b0 <main+0x25c>)
 8001964:	2200      	movs	r2, #0
 8001966:	701a      	strb	r2, [r3, #0]
    MX_USB_HOST_Process();
 8001968:	e72b      	b.n	80017c2 <main+0x6e>
 800196a:	bf00      	nop
 800196c:	2000346c 	.word	0x2000346c
 8001970:	200034f4 	.word	0x200034f4
 8001974:	20000260 	.word	0x20000260
 8001978:	200000bc 	.word	0x200000bc
 800197c:	20003466 	.word	0x20003466
 8001980:	20003468 	.word	0x20003468
 8001984:	20000a60 	.word	0x20000a60
 8001988:	20001260 	.word	0x20001260
 800198c:	20002660 	.word	0x20002660
 8001990:	20003260 	.word	0x20003260
 8001994:	20002a60 	.word	0x20002a60
 8001998:	20000e60 	.word	0x20000e60
 800199c:	2000346b 	.word	0x2000346b
 80019a0:	20000002 	.word	0x20000002
 80019a4:	20003469 	.word	0x20003469
 80019a8:	20001660 	.word	0x20001660
 80019ac:	20003467 	.word	0x20003467
 80019b0:	2000346a 	.word	0x2000346a

080019b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b094      	sub	sp, #80	@ 0x50
 80019b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ba:	f107 0320 	add.w	r3, r7, #32
 80019be:	2230      	movs	r2, #48	@ 0x30
 80019c0:	2100      	movs	r1, #0
 80019c2:	4618      	mov	r0, r3
 80019c4:	f00b fcf2 	bl	800d3ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019c8:	f107 030c 	add.w	r3, r7, #12
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019d8:	2300      	movs	r3, #0
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	4b28      	ldr	r3, [pc, #160]	@ (8001a80 <SystemClock_Config+0xcc>)
 80019de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e0:	4a27      	ldr	r2, [pc, #156]	@ (8001a80 <SystemClock_Config+0xcc>)
 80019e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80019e8:	4b25      	ldr	r3, [pc, #148]	@ (8001a80 <SystemClock_Config+0xcc>)
 80019ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019f0:	60bb      	str	r3, [r7, #8]
 80019f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019f4:	2300      	movs	r3, #0
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	4b22      	ldr	r3, [pc, #136]	@ (8001a84 <SystemClock_Config+0xd0>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a21      	ldr	r2, [pc, #132]	@ (8001a84 <SystemClock_Config+0xd0>)
 80019fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	4b1f      	ldr	r3, [pc, #124]	@ (8001a84 <SystemClock_Config+0xd0>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a0c:	607b      	str	r3, [r7, #4]
 8001a0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a10:	2301      	movs	r3, #1
 8001a12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a18:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a1e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a24:	2304      	movs	r3, #4
 8001a26:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001a28:	23a8      	movs	r3, #168	@ 0xa8
 8001a2a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001a30:	2307      	movs	r3, #7
 8001a32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a34:	f107 0320 	add.w	r3, r7, #32
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f005 fb15 	bl	8007068 <HAL_RCC_OscConfig>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a44:	f000 fa50 	bl	8001ee8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a48:	230f      	movs	r3, #15
 8001a4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a54:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001a58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a60:	f107 030c 	add.w	r3, r7, #12
 8001a64:	2105      	movs	r1, #5
 8001a66:	4618      	mov	r0, r3
 8001a68:	f005 fd76 	bl	8007558 <HAL_RCC_ClockConfig>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a72:	f000 fa39 	bl	8001ee8 <Error_Handler>
  }
}
 8001a76:	bf00      	nop
 8001a78:	3750      	adds	r7, #80	@ 0x50
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40007000 	.word	0x40007000

08001a88 <distortion>:

/* USER CODE BEGIN 4 */


// Function to apply distortion effect (e.g., hard clipping)
q15_t distortion(q15_t sample, int bitDepth) {
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	6039      	str	r1, [r7, #0]
 8001a92:	80fb      	strh	r3, [r7, #6]
    int shift = 15 - bitDepth;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	f1c3 030f 	rsb	r3, r3, #15
 8001a9a:	60fb      	str	r3, [r7, #12]
    return (sample >> shift) << shift;
 8001a9c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	411a      	asrs	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	b21b      	sxth	r3, r3
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <convert_to_q15>:

void convert_to_q15(uint16_t *rawInput, q15_t *convertedSignal, int size) {
 8001ab8:	b480      	push	{r7}
 8001aba:	b087      	sub	sp, #28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
    int i;
    if (conv_flag == 0) {
 8001ac4:	4b25      	ldr	r3, [pc, #148]	@ (8001b5c <convert_to_q15+0xa4>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d11d      	bne.n	8001b0a <convert_to_q15+0x52>
    	for (i = 0; i < size / 2; i++) {
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	e012      	b.n	8001afa <convert_to_q15+0x42>
    		convertedSignal[i] = (q15_t)((rawInput[i]) * master_volume);
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	4413      	add	r3, r2
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	4a20      	ldr	r2, [pc, #128]	@ (8001b60 <convert_to_q15+0xa8>)
 8001ae0:	7812      	ldrb	r2, [r2, #0]
 8001ae2:	fb13 f302 	smulbb	r3, r3, r2
 8001ae6:	b299      	uxth	r1, r3
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	68ba      	ldr	r2, [r7, #8]
 8001aee:	4413      	add	r3, r2
 8001af0:	b20a      	sxth	r2, r1
 8001af2:	801a      	strh	r2, [r3, #0]
    	for (i = 0; i < size / 2; i++) {
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	3301      	adds	r3, #1
 8001af8:	617b      	str	r3, [r7, #20]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	0fda      	lsrs	r2, r3, #31
 8001afe:	4413      	add	r3, r2
 8001b00:	105b      	asrs	r3, r3, #1
 8001b02:	461a      	mov	r2, r3
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	4293      	cmp	r3, r2
 8001b08:	dbe4      	blt.n	8001ad4 <convert_to_q15+0x1c>
        }
    }
    if (conv_flag == 1) {
 8001b0a:	4b14      	ldr	r3, [pc, #80]	@ (8001b5c <convert_to_q15+0xa4>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d11c      	bne.n	8001b4e <convert_to_q15+0x96>
    	for (i = size / 2; i < size; i++) {
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	0fda      	lsrs	r2, r3, #31
 8001b18:	4413      	add	r3, r2
 8001b1a:	105b      	asrs	r3, r3, #1
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	e012      	b.n	8001b46 <convert_to_q15+0x8e>
    		convertedSignal[i] = (q15_t)((rawInput[i]) * master_volume);
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	4413      	add	r3, r2
 8001b28:	881b      	ldrh	r3, [r3, #0]
 8001b2a:	4a0d      	ldr	r2, [pc, #52]	@ (8001b60 <convert_to_q15+0xa8>)
 8001b2c:	7812      	ldrb	r2, [r2, #0]
 8001b2e:	fb13 f302 	smulbb	r3, r3, r2
 8001b32:	b299      	uxth	r1, r3
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	68ba      	ldr	r2, [r7, #8]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	b20a      	sxth	r2, r1
 8001b3e:	801a      	strh	r2, [r3, #0]
    	for (i = size / 2; i < size; i++) {
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	3301      	adds	r3, #1
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	dbe8      	blt.n	8001b20 <convert_to_q15+0x68>
        }
    }
}
 8001b4e:	bf00      	nop
 8001b50:	371c      	adds	r7, #28
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	20003468 	.word	0x20003468
 8001b60:	20000000 	.word	0x20000000

08001b64 <center_signal>:
void center_signal(q15_t *input, uint16_t size) {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	807b      	strh	r3, [r7, #2]
    q15_t mean;
    arm_mean_q15(input, size, &mean);
 8001b70:	887b      	ldrh	r3, [r7, #2]
 8001b72:	f107 020c 	add.w	r2, r7, #12
 8001b76:	4619      	mov	r1, r3
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f00a fd93 	bl	800c6a4 <arm_mean_q15>
    for (uint16_t i = 0; i < size; i++) {
 8001b7e:	2300      	movs	r3, #0
 8001b80:	81fb      	strh	r3, [r7, #14]
 8001b82:	e014      	b.n	8001bae <center_signal+0x4a>
        input[i] -= mean; // Oduzimanje DC offseta
 8001b84:	89fb      	ldrh	r3, [r7, #14]
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	b299      	uxth	r1, r3
 8001b9c:	89fb      	ldrh	r3, [r7, #14]
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	b20a      	sxth	r2, r1
 8001ba6:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++) {
 8001ba8:	89fb      	ldrh	r3, [r7, #14]
 8001baa:	3301      	adds	r3, #1
 8001bac:	81fb      	strh	r3, [r7, #14]
 8001bae:	89fa      	ldrh	r2, [r7, #14]
 8001bb0:	887b      	ldrh	r3, [r7, #2]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d3e6      	bcc.n	8001b84 <center_signal+0x20>
    }
}
 8001bb6:	bf00      	nop
 8001bb8:	bf00      	nop
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <offset_signal>:
void offset_signal(q15_t *input, q15_t *output, uint16_t size, q15_t offset) {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	4611      	mov	r1, r2
 8001bcc:	461a      	mov	r2, r3
 8001bce:	460b      	mov	r3, r1
 8001bd0:	80fb      	strh	r3, [r7, #6]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	80bb      	strh	r3, [r7, #4]
	arm_offset_q15(input, -offset, output, size);
 8001bd6:	88bb      	ldrh	r3, [r7, #4]
 8001bd8:	425b      	negs	r3, r3
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	b219      	sxth	r1, r3
 8001bde:	88fb      	ldrh	r3, [r7, #6]
 8001be0:	68ba      	ldr	r2, [r7, #8]
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	f00a ff74 	bl	800cad0 <arm_offset_q15>
}
 8001be8:	bf00      	nop
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <convert_to_i2s>:
void convert_to_i2s(q15_t *rawInput, q15_t *convertedSignal, int size) {
 8001bf0:	b480      	push	{r7}
 8001bf2:	b089      	sub	sp, #36	@ 0x24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
    int i = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	61fb      	str	r3, [r7, #28]
    	if (i2s_send_flag == 0) {
 8001c00:	4b2c      	ldr	r3, [pc, #176]	@ (8001cb4 <convert_to_i2s+0xc4>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d123      	bne.n	8001c52 <convert_to_i2s+0x62>
        	for (int j = 0; j < size; j += 2) {
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61bb      	str	r3, [r7, #24]
 8001c0e:	e01c      	b.n	8001c4a <convert_to_i2s+0x5a>
        		convertedSignal[j] = (q15_t)(rawInput[i]);
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	68fa      	ldr	r2, [r7, #12]
 8001c16:	441a      	add	r2, r3
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	68b9      	ldr	r1, [r7, #8]
 8001c1e:	440b      	add	r3, r1
 8001c20:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001c24:	801a      	strh	r2, [r3, #0]
        		convertedSignal[j+1] = (q15_t)(rawInput[i]);
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	441a      	add	r2, r3
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	3301      	adds	r3, #1
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	68b9      	ldr	r1, [r7, #8]
 8001c36:	440b      	add	r3, r1
 8001c38:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001c3c:	801a      	strh	r2, [r3, #0]
        		i++;
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3301      	adds	r3, #1
 8001c42:	61fb      	str	r3, [r7, #28]
        	for (int j = 0; j < size; j += 2) {
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	3302      	adds	r3, #2
 8001c48:	61bb      	str	r3, [r7, #24]
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	dbde      	blt.n	8001c10 <convert_to_i2s+0x20>
        	}
    	}

    	if (i2s_send_flag == 1) {
 8001c52:	4b18      	ldr	r3, [pc, #96]	@ (8001cb4 <convert_to_i2s+0xc4>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d124      	bne.n	8001ca6 <convert_to_i2s+0xb6>
        	for (int j = size; j < size*2; j += 2) {
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	e01c      	b.n	8001c9c <convert_to_i2s+0xac>
        		convertedSignal[j] = (q15_t)(rawInput[i]);
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	441a      	add	r2, r3
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	68b9      	ldr	r1, [r7, #8]
 8001c70:	440b      	add	r3, r1
 8001c72:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001c76:	801a      	strh	r2, [r3, #0]
        		convertedSignal[j+1] = (q15_t)(rawInput[i]);
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	441a      	add	r2, r3
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	3301      	adds	r3, #1
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	68b9      	ldr	r1, [r7, #8]
 8001c88:	440b      	add	r3, r1
 8001c8a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001c8e:	801a      	strh	r2, [r3, #0]
        		i++;
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	3301      	adds	r3, #1
 8001c94:	61fb      	str	r3, [r7, #28]
        	for (int j = size; j < size*2; j += 2) {
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	3302      	adds	r3, #2
 8001c9a:	617b      	str	r3, [r7, #20]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	dbdd      	blt.n	8001c62 <convert_to_i2s+0x72>
        	}
    	}
}
 8001ca6:	bf00      	nop
 8001ca8:	3724      	adds	r7, #36	@ 0x24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	20003469 	.word	0x20003469

08001cb8 <apply_highpass_filter>:
void apply_highpass_filter(q15_t *input, q15_t *output, uint32_t blockSize) {
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
    arm_biquad_cascade_df1_q15(&highPassFilter, input, output, blockSize);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	68f9      	ldr	r1, [r7, #12]
 8001cca:	4803      	ldr	r0, [pc, #12]	@ (8001cd8 <apply_highpass_filter+0x20>)
 8001ccc:	f00a fe52 	bl	800c974 <arm_biquad_cascade_df1_q15>
}
 8001cd0:	bf00      	nop
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20003484 	.word	0x20003484

08001cdc <init_highpass_filter>:
void init_highpass_filter() {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af02      	add	r7, sp, #8
    arm_biquad_cascade_df1_init_q15(&highPassFilter, 1, highPassCoeffsQ15, highPassState, 0);
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	4b04      	ldr	r3, [pc, #16]	@ (8001cf8 <init_highpass_filter+0x1c>)
 8001ce8:	4a04      	ldr	r2, [pc, #16]	@ (8001cfc <init_highpass_filter+0x20>)
 8001cea:	2101      	movs	r1, #1
 8001cec:	4804      	ldr	r0, [pc, #16]	@ (8001d00 <init_highpass_filter+0x24>)
 8001cee:	f00a fedf 	bl	800cab0 <arm_biquad_cascade_df1_init_q15>
}
 8001cf2:	bf00      	nop
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20003494 	.word	0x20003494
 8001cfc:	20000004 	.word	0x20000004
 8001d00:	20003484 	.word	0x20003484

08001d04 <rfft>:
void rfft(q15_t *inputSignal, q15_t *fftOutput, q15_t *magnitudeSpectrum) {
 8001d04:	b590      	push	{r4, r7, lr}
 8001d06:	b087      	sub	sp, #28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]

	arm_rfft_q15(&rfft_instance, inputSignal, fftOutput); //rfft buffer izgleda jako cudno tho, DC, Nyquist, real1, imag1,
 8001d10:	68ba      	ldr	r2, [r7, #8]
 8001d12:	68f9      	ldr	r1, [r7, #12]
 8001d14:	4829      	ldr	r0, [pc, #164]	@ (8001dbc <rfft+0xb8>)
 8001d16:	f00a fd47 	bl	800c7a8 <arm_rfft_q15>
	offset = fftOutput[0];
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001d20:	4b27      	ldr	r3, [pc, #156]	@ (8001dc0 <rfft+0xbc>)
 8001d22:	801a      	strh	r2, [r3, #0]
	float result;
	for (int i = 0; i < 256; i++) {
 8001d24:	2300      	movs	r3, #0
 8001d26:	617b      	str	r3, [r7, #20]
 8001d28:	e03f      	b.n	8001daa <rfft+0xa6>
		result = (float)(fftOutput[i+2]*fftOutput[i+2] + fftOutput[i+3]*fftOutput[i+3]);
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	3302      	adds	r3, #2
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	68ba      	ldr	r2, [r7, #8]
 8001d32:	4413      	add	r3, r2
 8001d34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d38:	4619      	mov	r1, r3
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	3302      	adds	r3, #2
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	68ba      	ldr	r2, [r7, #8]
 8001d42:	4413      	add	r3, r2
 8001d44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d48:	fb03 f201 	mul.w	r2, r3, r1
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	3303      	adds	r3, #3
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	68b9      	ldr	r1, [r7, #8]
 8001d54:	440b      	add	r3, r1
 8001d56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	3303      	adds	r3, #3
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	68b9      	ldr	r1, [r7, #8]
 8001d64:	440b      	add	r3, r1
 8001d66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d6a:	fb00 f303 	mul.w	r3, r0, r3
 8001d6e:	4413      	add	r3, r2
 8001d70:	ee07 3a90 	vmov	s15, r3
 8001d74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d78:	edc7 7a04 	vstr	s15, [r7, #16]
		magnitudeSpectrum[i] = (q15_t)sqrt(result);
 8001d7c:	6938      	ldr	r0, [r7, #16]
 8001d7e:	f7fe fbe7 	bl	8000550 <__aeabi_f2d>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	ec43 2b10 	vmov	d0, r2, r3
 8001d8a:	f00b fbab 	bl	800d4e4 <sqrt>
 8001d8e:	ec51 0b10 	vmov	r0, r1, d0
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	18d4      	adds	r4, r2, r3
 8001d9a:	f7fe fee1 	bl	8000b60 <__aeabi_d2iz>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	b21b      	sxth	r3, r3
 8001da2:	8023      	strh	r3, [r4, #0]
	for (int i = 0; i < 256; i++) {
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	3301      	adds	r3, #1
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	2bff      	cmp	r3, #255	@ 0xff
 8001dae:	ddbc      	ble.n	8001d2a <rfft+0x26>
	}

 //ovo je za magnitudes, mora biti /2 jer je simetrično, nyquistov dijagram iz automatskog samo poz frekv
}
 8001db0:	bf00      	nop
 8001db2:	bf00      	nop
 8001db4:	371c      	adds	r7, #28
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd90      	pop	{r4, r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	2000346c 	.word	0x2000346c
 8001dc0:	20003464 	.word	0x20003464

08001dc4 <peak_values_fft>:
void peak_values_fft(q15_t *magnitudeSpectrum) {
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < FFT_SIZE/2; i++) {
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	e029      	b.n	8001e26 <peak_values_fft+0x62>
		if (magnitudeSpectrum[i] > peakVal) {
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	4413      	add	r3, r2
 8001dda:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001dde:	4b17      	ldr	r3, [pc, #92]	@ (8001e3c <peak_values_fft+0x78>)
 8001de0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	dd1b      	ble.n	8001e20 <peak_values_fft+0x5c>
			peakVal = magnitudeSpectrum[i];
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	4413      	add	r3, r2
 8001df0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001df4:	4b11      	ldr	r3, [pc, #68]	@ (8001e3c <peak_values_fft+0x78>)
 8001df6:	801a      	strh	r2, [r3, #0]
			peakHz = (uint16_t)(i * SAMPLE_FREQ / (float)FFT_SIZE);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f24b 128f 	movw	r2, #45455	@ 0xb18f
 8001dfe:	fb02 f303 	mul.w	r3, r2, r3
 8001e02:	ee07 3a90 	vmov	s15, r3
 8001e06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e0a:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8001e40 <peak_values_fft+0x7c>
 8001e0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e16:	ee17 3a90 	vmov	r3, s15
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	4b09      	ldr	r3, [pc, #36]	@ (8001e44 <peak_values_fft+0x80>)
 8001e1e:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < FFT_SIZE/2; i++) {
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	3301      	adds	r3, #1
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2bff      	cmp	r3, #255	@ 0xff
 8001e2a:	ddd2      	ble.n	8001dd2 <peak_values_fft+0xe>
		}
	}
}
 8001e2c:	bf00      	nop
 8001e2e:	bf00      	nop
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	20003460 	.word	0x20003460
 8001e40:	44000000 	.word	0x44000000
 8001e44:	20003462 	.word	0x20003462

08001e48 <callUart>:



void callUart(q15_t *input) {
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit_DMA(&huart2, (uint8_t *)input, sizeof(input));
 8001e50:	2204      	movs	r2, #4
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	4806      	ldr	r0, [pc, #24]	@ (8001e70 <callUart+0x28>)
 8001e56:	f006 fafb 	bl	8008450 <HAL_UART_Transmit_DMA>
	  HAL_I2S_Transmit_DMA(&hi2s3, input, ADC_SIZE*2);
 8001e5a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	4804      	ldr	r0, [pc, #16]	@ (8001e74 <callUart+0x2c>)
 8001e62:	f004 fca9 	bl	80067b8 <HAL_I2S_Transmit_DMA>
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	2000353c 	.word	0x2000353c
 8001e74:	200001b8 	.word	0x200001b8

08001e78 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc1) {
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
	adc_half_flag = 1;
 8001e80:	4b04      	ldr	r3, [pc, #16]	@ (8001e94 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	701a      	strb	r2, [r3, #0]
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	20003466 	.word	0x20003466

08001e98 <HAL_ADC_ConvCpltCallback>:



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc1) {
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
	adc_done_flag = 1;
 8001ea0:	4b09      	ldr	r3, [pc, #36]	@ (8001ec8 <HAL_ADC_ConvCpltCallback+0x30>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	701a      	strb	r2, [r3, #0]
	if (call_uart_once == 1) {
 8001ea6:	4b09      	ldr	r3, [pc, #36]	@ (8001ecc <HAL_ADC_ConvCpltCallback+0x34>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d102      	bne.n	8001eb6 <HAL_ADC_ConvCpltCallback+0x1e>
		flag_uart =  1;
 8001eb0:	4b07      	ldr	r3, [pc, #28]	@ (8001ed0 <HAL_ADC_ConvCpltCallback+0x38>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	701a      	strb	r2, [r3, #0]
	}
	call_uart_once = 0;
 8001eb6:	4b05      	ldr	r3, [pc, #20]	@ (8001ecc <HAL_ADC_ConvCpltCallback+0x34>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	701a      	strb	r2, [r3, #0]
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	20003467 	.word	0x20003467
 8001ecc:	20000001 	.word	0x20000001
 8001ed0:	2000346a 	.word	0x2000346a

08001ed4 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
    if (hi2s->Instance == SPI3) {
    }
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001eec:	b672      	cpsid	i
}
 8001eee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ef0:	bf00      	nop
 8001ef2:	e7fd      	b.n	8001ef0 <Error_Handler+0x8>

08001ef4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001ef8:	4b17      	ldr	r3, [pc, #92]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001efa:	4a18      	ldr	r2, [pc, #96]	@ (8001f5c <MX_SPI1_Init+0x68>)
 8001efc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001efe:	4b16      	ldr	r3, [pc, #88]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001f00:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f06:	4b14      	ldr	r3, [pc, #80]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f0c:	4b12      	ldr	r3, [pc, #72]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f12:	4b11      	ldr	r3, [pc, #68]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f18:	4b0f      	ldr	r3, [pc, #60]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001f20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f24:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f26:	4b0c      	ldr	r3, [pc, #48]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f32:	4b09      	ldr	r3, [pc, #36]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f38:	4b07      	ldr	r3, [pc, #28]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f3e:	4b06      	ldr	r3, [pc, #24]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001f40:	220a      	movs	r2, #10
 8001f42:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f44:	4804      	ldr	r0, [pc, #16]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001f46:	f005 fe69 	bl	8007c1c <HAL_SPI_Init>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f50:	f7ff ffca 	bl	8001ee8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20003498 	.word	0x20003498
 8001f5c:	40013000 	.word	0x40013000

08001f60 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08a      	sub	sp, #40	@ 0x28
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a19      	ldr	r2, [pc, #100]	@ (8001fe4 <HAL_SPI_MspInit+0x84>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d12b      	bne.n	8001fda <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	4b18      	ldr	r3, [pc, #96]	@ (8001fe8 <HAL_SPI_MspInit+0x88>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8a:	4a17      	ldr	r2, [pc, #92]	@ (8001fe8 <HAL_SPI_MspInit+0x88>)
 8001f8c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f90:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f92:	4b15      	ldr	r3, [pc, #84]	@ (8001fe8 <HAL_SPI_MspInit+0x88>)
 8001f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	4b11      	ldr	r3, [pc, #68]	@ (8001fe8 <HAL_SPI_MspInit+0x88>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa6:	4a10      	ldr	r2, [pc, #64]	@ (8001fe8 <HAL_SPI_MspInit+0x88>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fae:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe8 <HAL_SPI_MspInit+0x88>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001fba:	23e0      	movs	r3, #224	@ 0xe0
 8001fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fca:	2305      	movs	r3, #5
 8001fcc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fce:	f107 0314 	add.w	r3, r7, #20
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4805      	ldr	r0, [pc, #20]	@ (8001fec <HAL_SPI_MspInit+0x8c>)
 8001fd6:	f001 fb27 	bl	8003628 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001fda:	bf00      	nop
 8001fdc:	3728      	adds	r7, #40	@ 0x28
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40013000 	.word	0x40013000
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	40020000 	.word	0x40020000

08001ff0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	607b      	str	r3, [r7, #4]
 8001ffa:	4b10      	ldr	r3, [pc, #64]	@ (800203c <HAL_MspInit+0x4c>)
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffe:	4a0f      	ldr	r2, [pc, #60]	@ (800203c <HAL_MspInit+0x4c>)
 8002000:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002004:	6453      	str	r3, [r2, #68]	@ 0x44
 8002006:	4b0d      	ldr	r3, [pc, #52]	@ (800203c <HAL_MspInit+0x4c>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800200a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800200e:	607b      	str	r3, [r7, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	603b      	str	r3, [r7, #0]
 8002016:	4b09      	ldr	r3, [pc, #36]	@ (800203c <HAL_MspInit+0x4c>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201a:	4a08      	ldr	r2, [pc, #32]	@ (800203c <HAL_MspInit+0x4c>)
 800201c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002020:	6413      	str	r3, [r2, #64]	@ 0x40
 8002022:	4b06      	ldr	r3, [pc, #24]	@ (800203c <HAL_MspInit+0x4c>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800202a:	603b      	str	r3, [r7, #0]
 800202c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800202e:	2007      	movs	r0, #7
 8002030:	f000 ff48 	bl	8002ec4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002034:	bf00      	nop
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40023800 	.word	0x40023800

08002040 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002044:	bf00      	nop
 8002046:	e7fd      	b.n	8002044 <NMI_Handler+0x4>

08002048 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800204c:	bf00      	nop
 800204e:	e7fd      	b.n	800204c <HardFault_Handler+0x4>

08002050 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002054:	bf00      	nop
 8002056:	e7fd      	b.n	8002054 <MemManage_Handler+0x4>

08002058 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800205c:	bf00      	nop
 800205e:	e7fd      	b.n	800205c <BusFault_Handler+0x4>

08002060 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002064:	bf00      	nop
 8002066:	e7fd      	b.n	8002064 <UsageFault_Handler+0x4>

08002068 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002076:	b480      	push	{r7}
 8002078:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800207a:	bf00      	nop
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002088:	bf00      	nop
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002096:	f000 fa03 	bl	80024a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
	...

080020a0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80020a4:	4802      	ldr	r0, [pc, #8]	@ (80020b0 <DMA1_Stream6_IRQHandler+0x10>)
 80020a6:	f001 f855 	bl	8003154 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20003584 	.word	0x20003584

080020b4 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80020b8:	4802      	ldr	r0, [pc, #8]	@ (80020c4 <DMA1_Stream7_IRQHandler+0x10>)
 80020ba:	f001 f84b 	bl	8003154 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000200 	.word	0x20000200

080020c8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020cc:	4802      	ldr	r0, [pc, #8]	@ (80020d8 <DMA2_Stream0_IRQHandler+0x10>)
 80020ce:	f001 f841 	bl	8003154 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000104 	.word	0x20000104

080020dc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80020e0:	4802      	ldr	r0, [pc, #8]	@ (80020ec <OTG_FS_IRQHandler+0x10>)
 80020e2:	f001 ff37 	bl	8003f54 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	200039c4 	.word	0x200039c4

080020f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020f8:	4a14      	ldr	r2, [pc, #80]	@ (800214c <_sbrk+0x5c>)
 80020fa:	4b15      	ldr	r3, [pc, #84]	@ (8002150 <_sbrk+0x60>)
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002104:	4b13      	ldr	r3, [pc, #76]	@ (8002154 <_sbrk+0x64>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d102      	bne.n	8002112 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800210c:	4b11      	ldr	r3, [pc, #68]	@ (8002154 <_sbrk+0x64>)
 800210e:	4a12      	ldr	r2, [pc, #72]	@ (8002158 <_sbrk+0x68>)
 8002110:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002112:	4b10      	ldr	r3, [pc, #64]	@ (8002154 <_sbrk+0x64>)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4413      	add	r3, r2
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	429a      	cmp	r2, r3
 800211e:	d207      	bcs.n	8002130 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002120:	f00b f95c 	bl	800d3dc <__errno>
 8002124:	4603      	mov	r3, r0
 8002126:	220c      	movs	r2, #12
 8002128:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800212a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800212e:	e009      	b.n	8002144 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002130:	4b08      	ldr	r3, [pc, #32]	@ (8002154 <_sbrk+0x64>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002136:	4b07      	ldr	r3, [pc, #28]	@ (8002154 <_sbrk+0x64>)
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4413      	add	r3, r2
 800213e:	4a05      	ldr	r2, [pc, #20]	@ (8002154 <_sbrk+0x64>)
 8002140:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002142:	68fb      	ldr	r3, [r7, #12]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	20020000 	.word	0x20020000
 8002150:	00000400 	.word	0x00000400
 8002154:	200034f0 	.word	0x200034f0
 8002158:	20003ef0 	.word	0x20003ef0

0800215c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002160:	4b06      	ldr	r3, [pc, #24]	@ (800217c <SystemInit+0x20>)
 8002162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002166:	4a05      	ldr	r2, [pc, #20]	@ (800217c <SystemInit+0x20>)
 8002168:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800216c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002170:	bf00      	nop
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	e000ed00 	.word	0xe000ed00

08002180 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002186:	f107 0308 	add.w	r3, r7, #8
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	605a      	str	r2, [r3, #4]
 8002190:	609a      	str	r2, [r3, #8]
 8002192:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002194:	463b      	mov	r3, r7
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800219c:	4b1d      	ldr	r3, [pc, #116]	@ (8002214 <MX_TIM2_Init+0x94>)
 800219e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80021a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80021a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002214 <MX_TIM2_Init+0x94>)
 80021a6:	2253      	movs	r2, #83	@ 0x53
 80021a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002214 <MX_TIM2_Init+0x94>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 22-1;
 80021b0:	4b18      	ldr	r3, [pc, #96]	@ (8002214 <MX_TIM2_Init+0x94>)
 80021b2:	2215      	movs	r2, #21
 80021b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021b6:	4b17      	ldr	r3, [pc, #92]	@ (8002214 <MX_TIM2_Init+0x94>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021bc:	4b15      	ldr	r3, [pc, #84]	@ (8002214 <MX_TIM2_Init+0x94>)
 80021be:	2200      	movs	r2, #0
 80021c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021c2:	4814      	ldr	r0, [pc, #80]	@ (8002214 <MX_TIM2_Init+0x94>)
 80021c4:	f005 fdb3 	bl	8007d2e <HAL_TIM_Base_Init>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80021ce:	f7ff fe8b 	bl	8001ee8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021d8:	f107 0308 	add.w	r3, r7, #8
 80021dc:	4619      	mov	r1, r3
 80021de:	480d      	ldr	r0, [pc, #52]	@ (8002214 <MX_TIM2_Init+0x94>)
 80021e0:	f005 fe5c 	bl	8007e9c <HAL_TIM_ConfigClockSource>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80021ea:	f7ff fe7d 	bl	8001ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80021ee:	2320      	movs	r3, #32
 80021f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021f2:	2300      	movs	r3, #0
 80021f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021f6:	463b      	mov	r3, r7
 80021f8:	4619      	mov	r1, r3
 80021fa:	4806      	ldr	r0, [pc, #24]	@ (8002214 <MX_TIM2_Init+0x94>)
 80021fc:	f006 f85c 	bl	80082b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8002206:	f7ff fe6f 	bl	8001ee8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800220a:	bf00      	nop
 800220c:	3718      	adds	r7, #24
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	200034f4 	.word	0x200034f4

08002218 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002228:	d10d      	bne.n	8002246 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	4b09      	ldr	r3, [pc, #36]	@ (8002254 <HAL_TIM_Base_MspInit+0x3c>)
 8002230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002232:	4a08      	ldr	r2, [pc, #32]	@ (8002254 <HAL_TIM_Base_MspInit+0x3c>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	6413      	str	r3, [r2, #64]	@ 0x40
 800223a:	4b06      	ldr	r3, [pc, #24]	@ (8002254 <HAL_TIM_Base_MspInit+0x3c>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002246:	bf00      	nop
 8002248:	3714      	adds	r7, #20
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	40023800 	.word	0x40023800

08002258 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800225c:	4b11      	ldr	r3, [pc, #68]	@ (80022a4 <MX_USART2_UART_Init+0x4c>)
 800225e:	4a12      	ldr	r2, [pc, #72]	@ (80022a8 <MX_USART2_UART_Init+0x50>)
 8002260:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8002262:	4b10      	ldr	r3, [pc, #64]	@ (80022a4 <MX_USART2_UART_Init+0x4c>)
 8002264:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8002268:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800226a:	4b0e      	ldr	r3, [pc, #56]	@ (80022a4 <MX_USART2_UART_Init+0x4c>)
 800226c:	2200      	movs	r2, #0
 800226e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002270:	4b0c      	ldr	r3, [pc, #48]	@ (80022a4 <MX_USART2_UART_Init+0x4c>)
 8002272:	2200      	movs	r2, #0
 8002274:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002276:	4b0b      	ldr	r3, [pc, #44]	@ (80022a4 <MX_USART2_UART_Init+0x4c>)
 8002278:	2200      	movs	r2, #0
 800227a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 800227c:	4b09      	ldr	r3, [pc, #36]	@ (80022a4 <MX_USART2_UART_Init+0x4c>)
 800227e:	2208      	movs	r2, #8
 8002280:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002282:	4b08      	ldr	r3, [pc, #32]	@ (80022a4 <MX_USART2_UART_Init+0x4c>)
 8002284:	2200      	movs	r2, #0
 8002286:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002288:	4b06      	ldr	r3, [pc, #24]	@ (80022a4 <MX_USART2_UART_Init+0x4c>)
 800228a:	2200      	movs	r2, #0
 800228c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800228e:	4805      	ldr	r0, [pc, #20]	@ (80022a4 <MX_USART2_UART_Init+0x4c>)
 8002290:	f006 f88e 	bl	80083b0 <HAL_UART_Init>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800229a:	f7ff fe25 	bl	8001ee8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	2000353c 	.word	0x2000353c
 80022a8:	40004400 	.word	0x40004400

080022ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08a      	sub	sp, #40	@ 0x28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b4:	f107 0314 	add.w	r3, r7, #20
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
 80022c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a32      	ldr	r2, [pc, #200]	@ (8002394 <HAL_UART_MspInit+0xe8>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d15d      	bne.n	800238a <HAL_UART_MspInit+0xde>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	4b31      	ldr	r3, [pc, #196]	@ (8002398 <HAL_UART_MspInit+0xec>)
 80022d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d6:	4a30      	ldr	r2, [pc, #192]	@ (8002398 <HAL_UART_MspInit+0xec>)
 80022d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80022de:	4b2e      	ldr	r3, [pc, #184]	@ (8002398 <HAL_UART_MspInit+0xec>)
 80022e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022e6:	613b      	str	r3, [r7, #16]
 80022e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	4b2a      	ldr	r3, [pc, #168]	@ (8002398 <HAL_UART_MspInit+0xec>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f2:	4a29      	ldr	r2, [pc, #164]	@ (8002398 <HAL_UART_MspInit+0xec>)
 80022f4:	f043 0301 	orr.w	r3, r3, #1
 80022f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022fa:	4b27      	ldr	r3, [pc, #156]	@ (8002398 <HAL_UART_MspInit+0xec>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002306:	230c      	movs	r3, #12
 8002308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230a:	2302      	movs	r3, #2
 800230c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002312:	2303      	movs	r3, #3
 8002314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002316:	2307      	movs	r3, #7
 8002318:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231a:	f107 0314 	add.w	r3, r7, #20
 800231e:	4619      	mov	r1, r3
 8002320:	481e      	ldr	r0, [pc, #120]	@ (800239c <HAL_UART_MspInit+0xf0>)
 8002322:	f001 f981 	bl	8003628 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002326:	4b1e      	ldr	r3, [pc, #120]	@ (80023a0 <HAL_UART_MspInit+0xf4>)
 8002328:	4a1e      	ldr	r2, [pc, #120]	@ (80023a4 <HAL_UART_MspInit+0xf8>)
 800232a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800232c:	4b1c      	ldr	r3, [pc, #112]	@ (80023a0 <HAL_UART_MspInit+0xf4>)
 800232e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002332:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002334:	4b1a      	ldr	r3, [pc, #104]	@ (80023a0 <HAL_UART_MspInit+0xf4>)
 8002336:	2240      	movs	r2, #64	@ 0x40
 8002338:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800233a:	4b19      	ldr	r3, [pc, #100]	@ (80023a0 <HAL_UART_MspInit+0xf4>)
 800233c:	2200      	movs	r2, #0
 800233e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002340:	4b17      	ldr	r3, [pc, #92]	@ (80023a0 <HAL_UART_MspInit+0xf4>)
 8002342:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002346:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002348:	4b15      	ldr	r3, [pc, #84]	@ (80023a0 <HAL_UART_MspInit+0xf4>)
 800234a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800234e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002350:	4b13      	ldr	r3, [pc, #76]	@ (80023a0 <HAL_UART_MspInit+0xf4>)
 8002352:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002356:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8002358:	4b11      	ldr	r3, [pc, #68]	@ (80023a0 <HAL_UART_MspInit+0xf4>)
 800235a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800235e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002360:	4b0f      	ldr	r3, [pc, #60]	@ (80023a0 <HAL_UART_MspInit+0xf4>)
 8002362:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002366:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002368:	4b0d      	ldr	r3, [pc, #52]	@ (80023a0 <HAL_UART_MspInit+0xf4>)
 800236a:	2200      	movs	r2, #0
 800236c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800236e:	480c      	ldr	r0, [pc, #48]	@ (80023a0 <HAL_UART_MspInit+0xf4>)
 8002370:	f000 fdea 	bl	8002f48 <HAL_DMA_Init>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 800237a:	f7ff fdb5 	bl	8001ee8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a07      	ldr	r2, [pc, #28]	@ (80023a0 <HAL_UART_MspInit+0xf4>)
 8002382:	639a      	str	r2, [r3, #56]	@ 0x38
 8002384:	4a06      	ldr	r2, [pc, #24]	@ (80023a0 <HAL_UART_MspInit+0xf4>)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800238a:	bf00      	nop
 800238c:	3728      	adds	r7, #40	@ 0x28
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40004400 	.word	0x40004400
 8002398:	40023800 	.word	0x40023800
 800239c:	40020000 	.word	0x40020000
 80023a0:	20003584 	.word	0x20003584
 80023a4:	400260a0 	.word	0x400260a0

080023a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80023a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023e0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80023ac:	f7ff fed6 	bl	800215c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023b0:	480c      	ldr	r0, [pc, #48]	@ (80023e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023b2:	490d      	ldr	r1, [pc, #52]	@ (80023e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023b4:	4a0d      	ldr	r2, [pc, #52]	@ (80023ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023b8:	e002      	b.n	80023c0 <LoopCopyDataInit>

080023ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023be:	3304      	adds	r3, #4

080023c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023c4:	d3f9      	bcc.n	80023ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023c6:	4a0a      	ldr	r2, [pc, #40]	@ (80023f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023c8:	4c0a      	ldr	r4, [pc, #40]	@ (80023f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023cc:	e001      	b.n	80023d2 <LoopFillZerobss>

080023ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023d0:	3204      	adds	r2, #4

080023d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023d4:	d3fb      	bcc.n	80023ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023d6:	f00b f807 	bl	800d3e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023da:	f7ff f9bb 	bl	8001754 <main>
  bx  lr    
 80023de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80023e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023e8:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80023ec:	0801f594 	.word	0x0801f594
  ldr r2, =_sbss
 80023f0:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80023f4:	20003eec 	.word	0x20003eec

080023f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023f8:	e7fe      	b.n	80023f8 <ADC_IRQHandler>
	...

080023fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002400:	4b0e      	ldr	r3, [pc, #56]	@ (800243c <HAL_Init+0x40>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a0d      	ldr	r2, [pc, #52]	@ (800243c <HAL_Init+0x40>)
 8002406:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800240a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800240c:	4b0b      	ldr	r3, [pc, #44]	@ (800243c <HAL_Init+0x40>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a0a      	ldr	r2, [pc, #40]	@ (800243c <HAL_Init+0x40>)
 8002412:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002416:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002418:	4b08      	ldr	r3, [pc, #32]	@ (800243c <HAL_Init+0x40>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a07      	ldr	r2, [pc, #28]	@ (800243c <HAL_Init+0x40>)
 800241e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002422:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002424:	2003      	movs	r0, #3
 8002426:	f000 fd4d 	bl	8002ec4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800242a:	2000      	movs	r0, #0
 800242c:	f000 f808 	bl	8002440 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002430:	f7ff fdde 	bl	8001ff0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40023c00 	.word	0x40023c00

08002440 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002448:	4b12      	ldr	r3, [pc, #72]	@ (8002494 <HAL_InitTick+0x54>)
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	4b12      	ldr	r3, [pc, #72]	@ (8002498 <HAL_InitTick+0x58>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	4619      	mov	r1, r3
 8002452:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002456:	fbb3 f3f1 	udiv	r3, r3, r1
 800245a:	fbb2 f3f3 	udiv	r3, r2, r3
 800245e:	4618      	mov	r0, r3
 8002460:	f000 fd65 	bl	8002f2e <HAL_SYSTICK_Config>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e00e      	b.n	800248c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b0f      	cmp	r3, #15
 8002472:	d80a      	bhi.n	800248a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002474:	2200      	movs	r2, #0
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800247c:	f000 fd2d 	bl	8002eda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002480:	4a06      	ldr	r2, [pc, #24]	@ (800249c <HAL_InitTick+0x5c>)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002486:	2300      	movs	r3, #0
 8002488:	e000      	b.n	800248c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
}
 800248c:	4618      	mov	r0, r3
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	20000010 	.word	0x20000010
 8002498:	20000018 	.word	0x20000018
 800249c:	20000014 	.word	0x20000014

080024a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024a4:	4b06      	ldr	r3, [pc, #24]	@ (80024c0 <HAL_IncTick+0x20>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	461a      	mov	r2, r3
 80024aa:	4b06      	ldr	r3, [pc, #24]	@ (80024c4 <HAL_IncTick+0x24>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4413      	add	r3, r2
 80024b0:	4a04      	ldr	r2, [pc, #16]	@ (80024c4 <HAL_IncTick+0x24>)
 80024b2:	6013      	str	r3, [r2, #0]
}
 80024b4:	bf00      	nop
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	20000018 	.word	0x20000018
 80024c4:	200035e4 	.word	0x200035e4

080024c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  return uwTick;
 80024cc:	4b03      	ldr	r3, [pc, #12]	@ (80024dc <HAL_GetTick+0x14>)
 80024ce:	681b      	ldr	r3, [r3, #0]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	200035e4 	.word	0x200035e4

080024e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024e8:	f7ff ffee 	bl	80024c8 <HAL_GetTick>
 80024ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80024f8:	d005      	beq.n	8002506 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002524 <HAL_Delay+0x44>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	461a      	mov	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4413      	add	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002506:	bf00      	nop
 8002508:	f7ff ffde 	bl	80024c8 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	429a      	cmp	r2, r3
 8002516:	d8f7      	bhi.n	8002508 <HAL_Delay+0x28>
  {
  }
}
 8002518:	bf00      	nop
 800251a:	bf00      	nop
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20000018 	.word	0x20000018

08002528 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002530:	2300      	movs	r3, #0
 8002532:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e033      	b.n	80025a6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002542:	2b00      	cmp	r3, #0
 8002544:	d109      	bne.n	800255a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7fe fcfc 	bl	8000f44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255e:	f003 0310 	and.w	r3, r3, #16
 8002562:	2b00      	cmp	r3, #0
 8002564:	d118      	bne.n	8002598 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800256e:	f023 0302 	bic.w	r3, r3, #2
 8002572:	f043 0202 	orr.w	r2, r3, #2
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 fa54 	bl	8002a28 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258a:	f023 0303 	bic.w	r3, r3, #3
 800258e:	f043 0201 	orr.w	r2, r3, #1
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	641a      	str	r2, [r3, #64]	@ 0x40
 8002596:	e001      	b.n	800259c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
	...

080025b0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80025bc:	2300      	movs	r3, #0
 80025be:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d101      	bne.n	80025ce <HAL_ADC_Start_DMA+0x1e>
 80025ca:	2302      	movs	r3, #2
 80025cc:	e0e9      	b.n	80027a2 <HAL_ADC_Start_DMA+0x1f2>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d018      	beq.n	8002616 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689a      	ldr	r2, [r3, #8]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f042 0201 	orr.w	r2, r2, #1
 80025f2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025f4:	4b6d      	ldr	r3, [pc, #436]	@ (80027ac <HAL_ADC_Start_DMA+0x1fc>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a6d      	ldr	r2, [pc, #436]	@ (80027b0 <HAL_ADC_Start_DMA+0x200>)
 80025fa:	fba2 2303 	umull	r2, r3, r2, r3
 80025fe:	0c9a      	lsrs	r2, r3, #18
 8002600:	4613      	mov	r3, r2
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	4413      	add	r3, r2
 8002606:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002608:	e002      	b.n	8002610 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	3b01      	subs	r3, #1
 800260e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1f9      	bne.n	800260a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002620:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002624:	d107      	bne.n	8002636 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002634:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b01      	cmp	r3, #1
 8002642:	f040 80a1 	bne.w	8002788 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800264e:	f023 0301 	bic.w	r3, r3, #1
 8002652:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002664:	2b00      	cmp	r3, #0
 8002666:	d007      	beq.n	8002678 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002670:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002680:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002684:	d106      	bne.n	8002694 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800268a:	f023 0206 	bic.w	r2, r3, #6
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	645a      	str	r2, [r3, #68]	@ 0x44
 8002692:	e002      	b.n	800269a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026a2:	4b44      	ldr	r3, [pc, #272]	@ (80027b4 <HAL_ADC_Start_DMA+0x204>)
 80026a4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026aa:	4a43      	ldr	r2, [pc, #268]	@ (80027b8 <HAL_ADC_Start_DMA+0x208>)
 80026ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026b2:	4a42      	ldr	r2, [pc, #264]	@ (80027bc <HAL_ADC_Start_DMA+0x20c>)
 80026b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ba:	4a41      	ldr	r2, [pc, #260]	@ (80027c0 <HAL_ADC_Start_DMA+0x210>)
 80026bc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80026c6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80026d6:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026e6:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	334c      	adds	r3, #76	@ 0x4c
 80026f2:	4619      	mov	r1, r3
 80026f4:	68ba      	ldr	r2, [r7, #8]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f000 fcd4 	bl	80030a4 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f003 031f 	and.w	r3, r3, #31
 8002704:	2b00      	cmp	r3, #0
 8002706:	d12a      	bne.n	800275e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a2d      	ldr	r2, [pc, #180]	@ (80027c4 <HAL_ADC_Start_DMA+0x214>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d015      	beq.n	800273e <HAL_ADC_Start_DMA+0x18e>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a2c      	ldr	r2, [pc, #176]	@ (80027c8 <HAL_ADC_Start_DMA+0x218>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d105      	bne.n	8002728 <HAL_ADC_Start_DMA+0x178>
 800271c:	4b25      	ldr	r3, [pc, #148]	@ (80027b4 <HAL_ADC_Start_DMA+0x204>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f003 031f 	and.w	r3, r3, #31
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00a      	beq.n	800273e <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a27      	ldr	r2, [pc, #156]	@ (80027cc <HAL_ADC_Start_DMA+0x21c>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d136      	bne.n	80027a0 <HAL_ADC_Start_DMA+0x1f0>
 8002732:	4b20      	ldr	r3, [pc, #128]	@ (80027b4 <HAL_ADC_Start_DMA+0x204>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f003 0310 	and.w	r3, r3, #16
 800273a:	2b00      	cmp	r3, #0
 800273c:	d130      	bne.n	80027a0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d129      	bne.n	80027a0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800275a:	609a      	str	r2, [r3, #8]
 800275c:	e020      	b.n	80027a0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a18      	ldr	r2, [pc, #96]	@ (80027c4 <HAL_ADC_Start_DMA+0x214>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d11b      	bne.n	80027a0 <HAL_ADC_Start_DMA+0x1f0>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d114      	bne.n	80027a0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002784:	609a      	str	r2, [r3, #8]
 8002786:	e00b      	b.n	80027a0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278c:	f043 0210 	orr.w	r2, r3, #16
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002798:	f043 0201 	orr.w	r2, r3, #1
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3718      	adds	r7, #24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	20000010 	.word	0x20000010
 80027b0:	431bde83 	.word	0x431bde83
 80027b4:	40012300 	.word	0x40012300
 80027b8:	08002c21 	.word	0x08002c21
 80027bc:	08002cdb 	.word	0x08002cdb
 80027c0:	08002cf7 	.word	0x08002cf7
 80027c4:	40012000 	.word	0x40012000
 80027c8:	40012100 	.word	0x40012100
 80027cc:	40012200 	.word	0x40012200

080027d0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80027ee:	2300      	movs	r3, #0
 80027f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d101      	bne.n	8002800 <HAL_ADC_ConfigChannel+0x1c>
 80027fc:	2302      	movs	r3, #2
 80027fe:	e105      	b.n	8002a0c <HAL_ADC_ConfigChannel+0x228>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2b09      	cmp	r3, #9
 800280e:	d925      	bls.n	800285c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68d9      	ldr	r1, [r3, #12]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	b29b      	uxth	r3, r3
 800281c:	461a      	mov	r2, r3
 800281e:	4613      	mov	r3, r2
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	4413      	add	r3, r2
 8002824:	3b1e      	subs	r3, #30
 8002826:	2207      	movs	r2, #7
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	43da      	mvns	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	400a      	ands	r2, r1
 8002834:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68d9      	ldr	r1, [r3, #12]
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	b29b      	uxth	r3, r3
 8002846:	4618      	mov	r0, r3
 8002848:	4603      	mov	r3, r0
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	4403      	add	r3, r0
 800284e:	3b1e      	subs	r3, #30
 8002850:	409a      	lsls	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	60da      	str	r2, [r3, #12]
 800285a:	e022      	b.n	80028a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6919      	ldr	r1, [r3, #16]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	b29b      	uxth	r3, r3
 8002868:	461a      	mov	r2, r3
 800286a:	4613      	mov	r3, r2
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	4413      	add	r3, r2
 8002870:	2207      	movs	r2, #7
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	43da      	mvns	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	400a      	ands	r2, r1
 800287e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6919      	ldr	r1, [r3, #16]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	689a      	ldr	r2, [r3, #8]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	b29b      	uxth	r3, r3
 8002890:	4618      	mov	r0, r3
 8002892:	4603      	mov	r3, r0
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	4403      	add	r3, r0
 8002898:	409a      	lsls	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	430a      	orrs	r2, r1
 80028a0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b06      	cmp	r3, #6
 80028a8:	d824      	bhi.n	80028f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	4613      	mov	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	3b05      	subs	r3, #5
 80028bc:	221f      	movs	r2, #31
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43da      	mvns	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	400a      	ands	r2, r1
 80028ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	4618      	mov	r0, r3
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	4613      	mov	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	3b05      	subs	r3, #5
 80028e6:	fa00 f203 	lsl.w	r2, r0, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80028f2:	e04c      	b.n	800298e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	2b0c      	cmp	r3, #12
 80028fa:	d824      	bhi.n	8002946 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	4613      	mov	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	3b23      	subs	r3, #35	@ 0x23
 800290e:	221f      	movs	r2, #31
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	43da      	mvns	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	400a      	ands	r2, r1
 800291c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	b29b      	uxth	r3, r3
 800292a:	4618      	mov	r0, r3
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	4613      	mov	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4413      	add	r3, r2
 8002936:	3b23      	subs	r3, #35	@ 0x23
 8002938:	fa00 f203 	lsl.w	r2, r0, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	430a      	orrs	r2, r1
 8002942:	631a      	str	r2, [r3, #48]	@ 0x30
 8002944:	e023      	b.n	800298e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	4613      	mov	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4413      	add	r3, r2
 8002956:	3b41      	subs	r3, #65	@ 0x41
 8002958:	221f      	movs	r2, #31
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	43da      	mvns	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	400a      	ands	r2, r1
 8002966:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	b29b      	uxth	r3, r3
 8002974:	4618      	mov	r0, r3
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	4613      	mov	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	3b41      	subs	r3, #65	@ 0x41
 8002982:	fa00 f203 	lsl.w	r2, r0, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	430a      	orrs	r2, r1
 800298c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800298e:	4b22      	ldr	r3, [pc, #136]	@ (8002a18 <HAL_ADC_ConfigChannel+0x234>)
 8002990:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a21      	ldr	r2, [pc, #132]	@ (8002a1c <HAL_ADC_ConfigChannel+0x238>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d109      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x1cc>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2b12      	cmp	r3, #18
 80029a2:	d105      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a19      	ldr	r2, [pc, #100]	@ (8002a1c <HAL_ADC_ConfigChannel+0x238>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d123      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x21e>
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2b10      	cmp	r3, #16
 80029c0:	d003      	beq.n	80029ca <HAL_ADC_ConfigChannel+0x1e6>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2b11      	cmp	r3, #17
 80029c8:	d11b      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2b10      	cmp	r3, #16
 80029dc:	d111      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029de:	4b10      	ldr	r3, [pc, #64]	@ (8002a20 <HAL_ADC_ConfigChannel+0x23c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a10      	ldr	r2, [pc, #64]	@ (8002a24 <HAL_ADC_ConfigChannel+0x240>)
 80029e4:	fba2 2303 	umull	r2, r3, r2, r3
 80029e8:	0c9a      	lsrs	r2, r3, #18
 80029ea:	4613      	mov	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4413      	add	r3, r2
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80029f4:	e002      	b.n	80029fc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	3b01      	subs	r3, #1
 80029fa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f9      	bne.n	80029f6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	40012300 	.word	0x40012300
 8002a1c:	40012000 	.word	0x40012000
 8002a20:	20000010 	.word	0x20000010
 8002a24:	431bde83 	.word	0x431bde83

08002a28 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a30:	4b79      	ldr	r3, [pc, #484]	@ (8002c18 <ADC_Init+0x1f0>)
 8002a32:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6859      	ldr	r1, [r3, #4]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	021a      	lsls	r2, r3, #8
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002a80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	6859      	ldr	r1, [r3, #4]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002aa2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6899      	ldr	r1, [r3, #8]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68da      	ldr	r2, [r3, #12]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aba:	4a58      	ldr	r2, [pc, #352]	@ (8002c1c <ADC_Init+0x1f4>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d022      	beq.n	8002b06 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689a      	ldr	r2, [r3, #8]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ace:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6899      	ldr	r1, [r3, #8]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002af0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6899      	ldr	r1, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	609a      	str	r2, [r3, #8]
 8002b04:	e00f      	b.n	8002b26 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002b24:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 0202 	bic.w	r2, r2, #2
 8002b34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6899      	ldr	r1, [r3, #8]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	7e1b      	ldrb	r3, [r3, #24]
 8002b40:	005a      	lsls	r2, r3, #1
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d01b      	beq.n	8002b8c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b62:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002b72:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6859      	ldr	r1, [r3, #4]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	035a      	lsls	r2, r3, #13
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	605a      	str	r2, [r3, #4]
 8002b8a:	e007      	b.n	8002b9c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b9a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002baa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	051a      	lsls	r2, r3, #20
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002bd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	6899      	ldr	r1, [r3, #8]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002bde:	025a      	lsls	r2, r3, #9
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bf6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6899      	ldr	r1, [r3, #8]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	029a      	lsls	r2, r3, #10
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	609a      	str	r2, [r3, #8]
}
 8002c0c:	bf00      	nop
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	40012300 	.word	0x40012300
 8002c1c:	0f000001 	.word	0x0f000001

08002c20 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c2c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c32:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d13c      	bne.n	8002cb4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d12b      	bne.n	8002cac <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d127      	bne.n	8002cac <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c62:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d006      	beq.n	8002c78 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d119      	bne.n	8002cac <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0220 	bic.w	r2, r2, #32
 8002c86:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d105      	bne.n	8002cac <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca4:	f043 0201 	orr.w	r2, r3, #1
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f7ff f8f3 	bl	8001e98 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002cb2:	e00e      	b.n	8002cd2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb8:	f003 0310 	and.w	r3, r3, #16
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f7ff fd85 	bl	80027d0 <HAL_ADC_ErrorCallback>
}
 8002cc6:	e004      	b.n	8002cd2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	4798      	blx	r3
}
 8002cd2:	bf00      	nop
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b084      	sub	sp, #16
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ce6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f7ff f8c5 	bl	8001e78 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cee:	bf00      	nop
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b084      	sub	sp, #16
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d02:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2240      	movs	r2, #64	@ 0x40
 8002d08:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d0e:	f043 0204 	orr.w	r2, r3, #4
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f7ff fd5a 	bl	80027d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d1c:	bf00      	nop
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d34:	4b0c      	ldr	r3, [pc, #48]	@ (8002d68 <__NVIC_SetPriorityGrouping+0x44>)
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d3a:	68ba      	ldr	r2, [r7, #8]
 8002d3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d40:	4013      	ands	r3, r2
 8002d42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d56:	4a04      	ldr	r2, [pc, #16]	@ (8002d68 <__NVIC_SetPriorityGrouping+0x44>)
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	60d3      	str	r3, [r2, #12]
}
 8002d5c:	bf00      	nop
 8002d5e:	3714      	adds	r7, #20
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	e000ed00 	.word	0xe000ed00

08002d6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d70:	4b04      	ldr	r3, [pc, #16]	@ (8002d84 <__NVIC_GetPriorityGrouping+0x18>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	0a1b      	lsrs	r3, r3, #8
 8002d76:	f003 0307 	and.w	r3, r3, #7
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr
 8002d84:	e000ed00 	.word	0xe000ed00

08002d88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	4603      	mov	r3, r0
 8002d90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	db0b      	blt.n	8002db2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d9a:	79fb      	ldrb	r3, [r7, #7]
 8002d9c:	f003 021f 	and.w	r2, r3, #31
 8002da0:	4907      	ldr	r1, [pc, #28]	@ (8002dc0 <__NVIC_EnableIRQ+0x38>)
 8002da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da6:	095b      	lsrs	r3, r3, #5
 8002da8:	2001      	movs	r0, #1
 8002daa:	fa00 f202 	lsl.w	r2, r0, r2
 8002dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	e000e100 	.word	0xe000e100

08002dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	4603      	mov	r3, r0
 8002dcc:	6039      	str	r1, [r7, #0]
 8002dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	db0a      	blt.n	8002dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	490c      	ldr	r1, [pc, #48]	@ (8002e10 <__NVIC_SetPriority+0x4c>)
 8002dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de2:	0112      	lsls	r2, r2, #4
 8002de4:	b2d2      	uxtb	r2, r2
 8002de6:	440b      	add	r3, r1
 8002de8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dec:	e00a      	b.n	8002e04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	4908      	ldr	r1, [pc, #32]	@ (8002e14 <__NVIC_SetPriority+0x50>)
 8002df4:	79fb      	ldrb	r3, [r7, #7]
 8002df6:	f003 030f 	and.w	r3, r3, #15
 8002dfa:	3b04      	subs	r3, #4
 8002dfc:	0112      	lsls	r2, r2, #4
 8002dfe:	b2d2      	uxtb	r2, r2
 8002e00:	440b      	add	r3, r1
 8002e02:	761a      	strb	r2, [r3, #24]
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr
 8002e10:	e000e100 	.word	0xe000e100
 8002e14:	e000ed00 	.word	0xe000ed00

08002e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b089      	sub	sp, #36	@ 0x24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	f1c3 0307 	rsb	r3, r3, #7
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	bf28      	it	cs
 8002e36:	2304      	movcs	r3, #4
 8002e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	3304      	adds	r3, #4
 8002e3e:	2b06      	cmp	r3, #6
 8002e40:	d902      	bls.n	8002e48 <NVIC_EncodePriority+0x30>
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	3b03      	subs	r3, #3
 8002e46:	e000      	b.n	8002e4a <NVIC_EncodePriority+0x32>
 8002e48:	2300      	movs	r3, #0
 8002e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	43da      	mvns	r2, r3
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	401a      	ands	r2, r3
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e60:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6a:	43d9      	mvns	r1, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e70:	4313      	orrs	r3, r2
         );
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3724      	adds	r7, #36	@ 0x24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
	...

08002e80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e90:	d301      	bcc.n	8002e96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e92:	2301      	movs	r3, #1
 8002e94:	e00f      	b.n	8002eb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e96:	4a0a      	ldr	r2, [pc, #40]	@ (8002ec0 <SysTick_Config+0x40>)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e9e:	210f      	movs	r1, #15
 8002ea0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002ea4:	f7ff ff8e 	bl	8002dc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ea8:	4b05      	ldr	r3, [pc, #20]	@ (8002ec0 <SysTick_Config+0x40>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eae:	4b04      	ldr	r3, [pc, #16]	@ (8002ec0 <SysTick_Config+0x40>)
 8002eb0:	2207      	movs	r2, #7
 8002eb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	e000e010 	.word	0xe000e010

08002ec4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f7ff ff29 	bl	8002d24 <__NVIC_SetPriorityGrouping>
}
 8002ed2:	bf00      	nop
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b086      	sub	sp, #24
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	60b9      	str	r1, [r7, #8]
 8002ee4:	607a      	str	r2, [r7, #4]
 8002ee6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002eec:	f7ff ff3e 	bl	8002d6c <__NVIC_GetPriorityGrouping>
 8002ef0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	68b9      	ldr	r1, [r7, #8]
 8002ef6:	6978      	ldr	r0, [r7, #20]
 8002ef8:	f7ff ff8e 	bl	8002e18 <NVIC_EncodePriority>
 8002efc:	4602      	mov	r2, r0
 8002efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f02:	4611      	mov	r1, r2
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff ff5d 	bl	8002dc4 <__NVIC_SetPriority>
}
 8002f0a:	bf00      	nop
 8002f0c:	3718      	adds	r7, #24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b082      	sub	sp, #8
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	4603      	mov	r3, r0
 8002f1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff ff31 	bl	8002d88 <__NVIC_EnableIRQ>
}
 8002f26:	bf00      	nop
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b082      	sub	sp, #8
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7ff ffa2 	bl	8002e80 <SysTick_Config>
 8002f3c:	4603      	mov	r3, r0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
	...

08002f48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f54:	f7ff fab8 	bl	80024c8 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e099      	b.n	8003098 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2202      	movs	r2, #2
 8002f68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f022 0201 	bic.w	r2, r2, #1
 8002f82:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f84:	e00f      	b.n	8002fa6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f86:	f7ff fa9f 	bl	80024c8 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b05      	cmp	r3, #5
 8002f92:	d908      	bls.n	8002fa6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2220      	movs	r2, #32
 8002f98:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2203      	movs	r2, #3
 8002f9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e078      	b.n	8003098 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1e8      	bne.n	8002f86 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	4b38      	ldr	r3, [pc, #224]	@ (80030a0 <HAL_DMA_Init+0x158>)
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffc:	2b04      	cmp	r3, #4
 8002ffe:	d107      	bne.n	8003010 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003008:	4313      	orrs	r3, r2
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	4313      	orrs	r3, r2
 800300e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f023 0307 	bic.w	r3, r3, #7
 8003026:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	4313      	orrs	r3, r2
 8003030:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003036:	2b04      	cmp	r3, #4
 8003038:	d117      	bne.n	800306a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	4313      	orrs	r3, r2
 8003042:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00e      	beq.n	800306a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 fa6f 	bl	8003530 <DMA_CheckFifoParam>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d008      	beq.n	800306a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2240      	movs	r2, #64	@ 0x40
 800305c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003066:	2301      	movs	r3, #1
 8003068:	e016      	b.n	8003098 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 fa26 	bl	80034c4 <DMA_CalcBaseAndBitshift>
 8003078:	4603      	mov	r3, r0
 800307a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003080:	223f      	movs	r2, #63	@ 0x3f
 8003082:	409a      	lsls	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3718      	adds	r7, #24
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	f010803f 	.word	0xf010803f

080030a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
 80030b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030b2:	2300      	movs	r3, #0
 80030b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d101      	bne.n	80030ca <HAL_DMA_Start_IT+0x26>
 80030c6:	2302      	movs	r3, #2
 80030c8:	e040      	b.n	800314c <HAL_DMA_Start_IT+0xa8>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d12f      	bne.n	800313e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2202      	movs	r2, #2
 80030e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	68b9      	ldr	r1, [r7, #8]
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 f9b8 	bl	8003468 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030fc:	223f      	movs	r2, #63	@ 0x3f
 80030fe:	409a      	lsls	r2, r3
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 0216 	orr.w	r2, r2, #22
 8003112:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003118:	2b00      	cmp	r3, #0
 800311a:	d007      	beq.n	800312c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0208 	orr.w	r2, r2, #8
 800312a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0201 	orr.w	r2, r2, #1
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	e005      	b.n	800314a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003146:	2302      	movs	r3, #2
 8003148:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800314a:	7dfb      	ldrb	r3, [r7, #23]
}
 800314c:	4618      	mov	r0, r3
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800315c:	2300      	movs	r3, #0
 800315e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003160:	4b8e      	ldr	r3, [pc, #568]	@ (800339c <HAL_DMA_IRQHandler+0x248>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a8e      	ldr	r2, [pc, #568]	@ (80033a0 <HAL_DMA_IRQHandler+0x24c>)
 8003166:	fba2 2303 	umull	r2, r3, r2, r3
 800316a:	0a9b      	lsrs	r3, r3, #10
 800316c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003172:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800317e:	2208      	movs	r2, #8
 8003180:	409a      	lsls	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	4013      	ands	r3, r2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d01a      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b00      	cmp	r3, #0
 8003196:	d013      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 0204 	bic.w	r2, r2, #4
 80031a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ac:	2208      	movs	r2, #8
 80031ae:	409a      	lsls	r2, r3
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031b8:	f043 0201 	orr.w	r2, r3, #1
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031c4:	2201      	movs	r2, #1
 80031c6:	409a      	lsls	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4013      	ands	r3, r2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d012      	beq.n	80031f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00b      	beq.n	80031f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031e2:	2201      	movs	r2, #1
 80031e4:	409a      	lsls	r2, r3
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ee:	f043 0202 	orr.w	r2, r3, #2
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031fa:	2204      	movs	r2, #4
 80031fc:	409a      	lsls	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	4013      	ands	r3, r2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d012      	beq.n	800322c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00b      	beq.n	800322c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003218:	2204      	movs	r2, #4
 800321a:	409a      	lsls	r2, r3
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003224:	f043 0204 	orr.w	r2, r3, #4
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003230:	2210      	movs	r2, #16
 8003232:	409a      	lsls	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4013      	ands	r3, r2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d043      	beq.n	80032c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	2b00      	cmp	r3, #0
 8003248:	d03c      	beq.n	80032c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800324e:	2210      	movs	r2, #16
 8003250:	409a      	lsls	r2, r3
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d018      	beq.n	8003296 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d108      	bne.n	8003284 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003276:	2b00      	cmp	r3, #0
 8003278:	d024      	beq.n	80032c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	4798      	blx	r3
 8003282:	e01f      	b.n	80032c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003288:	2b00      	cmp	r3, #0
 800328a:	d01b      	beq.n	80032c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	4798      	blx	r3
 8003294:	e016      	b.n	80032c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d107      	bne.n	80032b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 0208 	bic.w	r2, r2, #8
 80032b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c8:	2220      	movs	r2, #32
 80032ca:	409a      	lsls	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4013      	ands	r3, r2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f000 808f 	beq.w	80033f4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0310 	and.w	r3, r3, #16
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f000 8087 	beq.w	80033f4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ea:	2220      	movs	r2, #32
 80032ec:	409a      	lsls	r2, r3
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b05      	cmp	r3, #5
 80032fc:	d136      	bne.n	800336c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 0216 	bic.w	r2, r2, #22
 800330c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	695a      	ldr	r2, [r3, #20]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800331c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003322:	2b00      	cmp	r3, #0
 8003324:	d103      	bne.n	800332e <HAL_DMA_IRQHandler+0x1da>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800332a:	2b00      	cmp	r3, #0
 800332c:	d007      	beq.n	800333e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 0208 	bic.w	r2, r2, #8
 800333c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003342:	223f      	movs	r2, #63	@ 0x3f
 8003344:	409a      	lsls	r2, r3
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800335e:	2b00      	cmp	r3, #0
 8003360:	d07e      	beq.n	8003460 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	4798      	blx	r3
        }
        return;
 800336a:	e079      	b.n	8003460 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d01d      	beq.n	80033b6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10d      	bne.n	80033a4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800338c:	2b00      	cmp	r3, #0
 800338e:	d031      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	4798      	blx	r3
 8003398:	e02c      	b.n	80033f4 <HAL_DMA_IRQHandler+0x2a0>
 800339a:	bf00      	nop
 800339c:	20000010 	.word	0x20000010
 80033a0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d023      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	4798      	blx	r3
 80033b4:	e01e      	b.n	80033f4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d10f      	bne.n	80033e4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f022 0210 	bic.w	r2, r2, #16
 80033d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d032      	beq.n	8003462 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	2b00      	cmp	r3, #0
 8003406:	d022      	beq.n	800344e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2205      	movs	r2, #5
 800340c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 0201 	bic.w	r2, r2, #1
 800341e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	3301      	adds	r3, #1
 8003424:	60bb      	str	r3, [r7, #8]
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	429a      	cmp	r2, r3
 800342a:	d307      	bcc.n	800343c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1f2      	bne.n	8003420 <HAL_DMA_IRQHandler+0x2cc>
 800343a:	e000      	b.n	800343e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800343c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003452:	2b00      	cmp	r3, #0
 8003454:	d005      	beq.n	8003462 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	4798      	blx	r3
 800345e:	e000      	b.n	8003462 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003460:	bf00      	nop
    }
  }
}
 8003462:	3718      	adds	r7, #24
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
 8003474:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003484:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	2b40      	cmp	r3, #64	@ 0x40
 8003494:	d108      	bne.n	80034a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80034a6:	e007      	b.n	80034b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68ba      	ldr	r2, [r7, #8]
 80034ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	60da      	str	r2, [r3, #12]
}
 80034b8:	bf00      	nop
 80034ba:	3714      	adds	r7, #20
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	3b10      	subs	r3, #16
 80034d4:	4a14      	ldr	r2, [pc, #80]	@ (8003528 <DMA_CalcBaseAndBitshift+0x64>)
 80034d6:	fba2 2303 	umull	r2, r3, r2, r3
 80034da:	091b      	lsrs	r3, r3, #4
 80034dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034de:	4a13      	ldr	r2, [pc, #76]	@ (800352c <DMA_CalcBaseAndBitshift+0x68>)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4413      	add	r3, r2
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	461a      	mov	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2b03      	cmp	r3, #3
 80034f0:	d909      	bls.n	8003506 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80034fa:	f023 0303 	bic.w	r3, r3, #3
 80034fe:	1d1a      	adds	r2, r3, #4
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	659a      	str	r2, [r3, #88]	@ 0x58
 8003504:	e007      	b.n	8003516 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800350e:	f023 0303 	bic.w	r3, r3, #3
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800351a:	4618      	mov	r0, r3
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	aaaaaaab 	.word	0xaaaaaaab
 800352c:	0800d724 	.word	0x0800d724

08003530 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003538:	2300      	movs	r3, #0
 800353a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003540:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d11f      	bne.n	800358a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	2b03      	cmp	r3, #3
 800354e:	d856      	bhi.n	80035fe <DMA_CheckFifoParam+0xce>
 8003550:	a201      	add	r2, pc, #4	@ (adr r2, 8003558 <DMA_CheckFifoParam+0x28>)
 8003552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003556:	bf00      	nop
 8003558:	08003569 	.word	0x08003569
 800355c:	0800357b 	.word	0x0800357b
 8003560:	08003569 	.word	0x08003569
 8003564:	080035ff 	.word	0x080035ff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800356c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d046      	beq.n	8003602 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003578:	e043      	b.n	8003602 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800357e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003582:	d140      	bne.n	8003606 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003588:	e03d      	b.n	8003606 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003592:	d121      	bne.n	80035d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	2b03      	cmp	r3, #3
 8003598:	d837      	bhi.n	800360a <DMA_CheckFifoParam+0xda>
 800359a:	a201      	add	r2, pc, #4	@ (adr r2, 80035a0 <DMA_CheckFifoParam+0x70>)
 800359c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a0:	080035b1 	.word	0x080035b1
 80035a4:	080035b7 	.word	0x080035b7
 80035a8:	080035b1 	.word	0x080035b1
 80035ac:	080035c9 	.word	0x080035c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	73fb      	strb	r3, [r7, #15]
      break;
 80035b4:	e030      	b.n	8003618 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d025      	beq.n	800360e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035c6:	e022      	b.n	800360e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035cc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80035d0:	d11f      	bne.n	8003612 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80035d6:	e01c      	b.n	8003612 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d903      	bls.n	80035e6 <DMA_CheckFifoParam+0xb6>
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2b03      	cmp	r3, #3
 80035e2:	d003      	beq.n	80035ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80035e4:	e018      	b.n	8003618 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	73fb      	strb	r3, [r7, #15]
      break;
 80035ea:	e015      	b.n	8003618 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00e      	beq.n	8003616 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	73fb      	strb	r3, [r7, #15]
      break;
 80035fc:	e00b      	b.n	8003616 <DMA_CheckFifoParam+0xe6>
      break;
 80035fe:	bf00      	nop
 8003600:	e00a      	b.n	8003618 <DMA_CheckFifoParam+0xe8>
      break;
 8003602:	bf00      	nop
 8003604:	e008      	b.n	8003618 <DMA_CheckFifoParam+0xe8>
      break;
 8003606:	bf00      	nop
 8003608:	e006      	b.n	8003618 <DMA_CheckFifoParam+0xe8>
      break;
 800360a:	bf00      	nop
 800360c:	e004      	b.n	8003618 <DMA_CheckFifoParam+0xe8>
      break;
 800360e:	bf00      	nop
 8003610:	e002      	b.n	8003618 <DMA_CheckFifoParam+0xe8>
      break;   
 8003612:	bf00      	nop
 8003614:	e000      	b.n	8003618 <DMA_CheckFifoParam+0xe8>
      break;
 8003616:	bf00      	nop
    }
  } 
  
  return status; 
 8003618:	7bfb      	ldrb	r3, [r7, #15]
}
 800361a:	4618      	mov	r0, r3
 800361c:	3714      	adds	r7, #20
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop

08003628 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003628:	b480      	push	{r7}
 800362a:	b089      	sub	sp, #36	@ 0x24
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003632:	2300      	movs	r3, #0
 8003634:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003636:	2300      	movs	r3, #0
 8003638:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800363a:	2300      	movs	r3, #0
 800363c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800363e:	2300      	movs	r3, #0
 8003640:	61fb      	str	r3, [r7, #28]
 8003642:	e16b      	b.n	800391c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003644:	2201      	movs	r2, #1
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	4013      	ands	r3, r2
 8003656:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	429a      	cmp	r2, r3
 800365e:	f040 815a 	bne.w	8003916 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f003 0303 	and.w	r3, r3, #3
 800366a:	2b01      	cmp	r3, #1
 800366c:	d005      	beq.n	800367a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003676:	2b02      	cmp	r3, #2
 8003678:	d130      	bne.n	80036dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	2203      	movs	r2, #3
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	43db      	mvns	r3, r3
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	4013      	ands	r3, r2
 8003690:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	68da      	ldr	r2, [r3, #12]
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	fa02 f303 	lsl.w	r3, r2, r3
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036b0:	2201      	movs	r2, #1
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	43db      	mvns	r3, r3
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	4013      	ands	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	091b      	lsrs	r3, r3, #4
 80036c6:	f003 0201 	and.w	r2, r3, #1
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f003 0303 	and.w	r3, r3, #3
 80036e4:	2b03      	cmp	r3, #3
 80036e6:	d017      	beq.n	8003718 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	2203      	movs	r2, #3
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	43db      	mvns	r3, r3
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	4013      	ands	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	fa02 f303 	lsl.w	r3, r2, r3
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	4313      	orrs	r3, r2
 8003710:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f003 0303 	and.w	r3, r3, #3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d123      	bne.n	800376c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	08da      	lsrs	r2, r3, #3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3208      	adds	r2, #8
 800372c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003730:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	220f      	movs	r2, #15
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	43db      	mvns	r3, r3
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	4013      	ands	r3, r2
 8003746:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	691a      	ldr	r2, [r3, #16]
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	4313      	orrs	r3, r2
 800375c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	08da      	lsrs	r2, r3, #3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	3208      	adds	r2, #8
 8003766:	69b9      	ldr	r1, [r7, #24]
 8003768:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	2203      	movs	r2, #3
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	43db      	mvns	r3, r3
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	4013      	ands	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f003 0203 	and.w	r2, r3, #3
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	4313      	orrs	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 80b4 	beq.w	8003916 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ae:	2300      	movs	r3, #0
 80037b0:	60fb      	str	r3, [r7, #12]
 80037b2:	4b60      	ldr	r3, [pc, #384]	@ (8003934 <HAL_GPIO_Init+0x30c>)
 80037b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037b6:	4a5f      	ldr	r2, [pc, #380]	@ (8003934 <HAL_GPIO_Init+0x30c>)
 80037b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80037be:	4b5d      	ldr	r3, [pc, #372]	@ (8003934 <HAL_GPIO_Init+0x30c>)
 80037c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037c6:	60fb      	str	r3, [r7, #12]
 80037c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037ca:	4a5b      	ldr	r2, [pc, #364]	@ (8003938 <HAL_GPIO_Init+0x310>)
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	089b      	lsrs	r3, r3, #2
 80037d0:	3302      	adds	r3, #2
 80037d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	f003 0303 	and.w	r3, r3, #3
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	220f      	movs	r2, #15
 80037e2:	fa02 f303 	lsl.w	r3, r2, r3
 80037e6:	43db      	mvns	r3, r3
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	4013      	ands	r3, r2
 80037ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a52      	ldr	r2, [pc, #328]	@ (800393c <HAL_GPIO_Init+0x314>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d02b      	beq.n	800384e <HAL_GPIO_Init+0x226>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a51      	ldr	r2, [pc, #324]	@ (8003940 <HAL_GPIO_Init+0x318>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d025      	beq.n	800384a <HAL_GPIO_Init+0x222>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a50      	ldr	r2, [pc, #320]	@ (8003944 <HAL_GPIO_Init+0x31c>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d01f      	beq.n	8003846 <HAL_GPIO_Init+0x21e>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a4f      	ldr	r2, [pc, #316]	@ (8003948 <HAL_GPIO_Init+0x320>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d019      	beq.n	8003842 <HAL_GPIO_Init+0x21a>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a4e      	ldr	r2, [pc, #312]	@ (800394c <HAL_GPIO_Init+0x324>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d013      	beq.n	800383e <HAL_GPIO_Init+0x216>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a4d      	ldr	r2, [pc, #308]	@ (8003950 <HAL_GPIO_Init+0x328>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d00d      	beq.n	800383a <HAL_GPIO_Init+0x212>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a4c      	ldr	r2, [pc, #304]	@ (8003954 <HAL_GPIO_Init+0x32c>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d007      	beq.n	8003836 <HAL_GPIO_Init+0x20e>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a4b      	ldr	r2, [pc, #300]	@ (8003958 <HAL_GPIO_Init+0x330>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d101      	bne.n	8003832 <HAL_GPIO_Init+0x20a>
 800382e:	2307      	movs	r3, #7
 8003830:	e00e      	b.n	8003850 <HAL_GPIO_Init+0x228>
 8003832:	2308      	movs	r3, #8
 8003834:	e00c      	b.n	8003850 <HAL_GPIO_Init+0x228>
 8003836:	2306      	movs	r3, #6
 8003838:	e00a      	b.n	8003850 <HAL_GPIO_Init+0x228>
 800383a:	2305      	movs	r3, #5
 800383c:	e008      	b.n	8003850 <HAL_GPIO_Init+0x228>
 800383e:	2304      	movs	r3, #4
 8003840:	e006      	b.n	8003850 <HAL_GPIO_Init+0x228>
 8003842:	2303      	movs	r3, #3
 8003844:	e004      	b.n	8003850 <HAL_GPIO_Init+0x228>
 8003846:	2302      	movs	r3, #2
 8003848:	e002      	b.n	8003850 <HAL_GPIO_Init+0x228>
 800384a:	2301      	movs	r3, #1
 800384c:	e000      	b.n	8003850 <HAL_GPIO_Init+0x228>
 800384e:	2300      	movs	r3, #0
 8003850:	69fa      	ldr	r2, [r7, #28]
 8003852:	f002 0203 	and.w	r2, r2, #3
 8003856:	0092      	lsls	r2, r2, #2
 8003858:	4093      	lsls	r3, r2
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	4313      	orrs	r3, r2
 800385e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003860:	4935      	ldr	r1, [pc, #212]	@ (8003938 <HAL_GPIO_Init+0x310>)
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	089b      	lsrs	r3, r3, #2
 8003866:	3302      	adds	r3, #2
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800386e:	4b3b      	ldr	r3, [pc, #236]	@ (800395c <HAL_GPIO_Init+0x334>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	43db      	mvns	r3, r3
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	4013      	ands	r3, r2
 800387c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d003      	beq.n	8003892 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	4313      	orrs	r3, r2
 8003890:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003892:	4a32      	ldr	r2, [pc, #200]	@ (800395c <HAL_GPIO_Init+0x334>)
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003898:	4b30      	ldr	r3, [pc, #192]	@ (800395c <HAL_GPIO_Init+0x334>)
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	43db      	mvns	r3, r3
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	4013      	ands	r3, r2
 80038a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d003      	beq.n	80038bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038bc:	4a27      	ldr	r2, [pc, #156]	@ (800395c <HAL_GPIO_Init+0x334>)
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038c2:	4b26      	ldr	r3, [pc, #152]	@ (800395c <HAL_GPIO_Init+0x334>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	43db      	mvns	r3, r3
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	4013      	ands	r3, r2
 80038d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d003      	beq.n	80038e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038e6:	4a1d      	ldr	r2, [pc, #116]	@ (800395c <HAL_GPIO_Init+0x334>)
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038ec:	4b1b      	ldr	r3, [pc, #108]	@ (800395c <HAL_GPIO_Init+0x334>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	43db      	mvns	r3, r3
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	4013      	ands	r3, r2
 80038fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	4313      	orrs	r3, r2
 800390e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003910:	4a12      	ldr	r2, [pc, #72]	@ (800395c <HAL_GPIO_Init+0x334>)
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	3301      	adds	r3, #1
 800391a:	61fb      	str	r3, [r7, #28]
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	2b0f      	cmp	r3, #15
 8003920:	f67f ae90 	bls.w	8003644 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003924:	bf00      	nop
 8003926:	bf00      	nop
 8003928:	3724      	adds	r7, #36	@ 0x24
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	40023800 	.word	0x40023800
 8003938:	40013800 	.word	0x40013800
 800393c:	40020000 	.word	0x40020000
 8003940:	40020400 	.word	0x40020400
 8003944:	40020800 	.word	0x40020800
 8003948:	40020c00 	.word	0x40020c00
 800394c:	40021000 	.word	0x40021000
 8003950:	40021400 	.word	0x40021400
 8003954:	40021800 	.word	0x40021800
 8003958:	40021c00 	.word	0x40021c00
 800395c:	40013c00 	.word	0x40013c00

08003960 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	460b      	mov	r3, r1
 800396a:	807b      	strh	r3, [r7, #2]
 800396c:	4613      	mov	r3, r2
 800396e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003970:	787b      	ldrb	r3, [r7, #1]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003976:	887a      	ldrh	r2, [r7, #2]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800397c:	e003      	b.n	8003986 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800397e:	887b      	ldrh	r3, [r7, #2]
 8003980:	041a      	lsls	r2, r3, #16
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	619a      	str	r2, [r3, #24]
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b086      	sub	sp, #24
 8003996:	af02      	add	r7, sp, #8
 8003998:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e059      	b.n	8003a58 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d106      	bne.n	80039c4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f008 fbc4 	bl	800c14c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2203      	movs	r2, #3
 80039c8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039d2:	d102      	bne.n	80039da <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f005 f9dd 	bl	8008d9e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6818      	ldr	r0, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	7c1a      	ldrb	r2, [r3, #16]
 80039ec:	f88d 2000 	strb.w	r2, [sp]
 80039f0:	3304      	adds	r3, #4
 80039f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039f4:	f005 f95e 	bl	8008cb4 <USB_CoreInit>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d005      	beq.n	8003a0a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2202      	movs	r2, #2
 8003a02:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e026      	b.n	8003a58 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2101      	movs	r1, #1
 8003a10:	4618      	mov	r0, r3
 8003a12:	f005 f9d5 	bl	8008dc0 <USB_SetCurrentMode>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d005      	beq.n	8003a28 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2202      	movs	r2, #2
 8003a20:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e017      	b.n	8003a58 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6818      	ldr	r0, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	7c1a      	ldrb	r2, [r3, #16]
 8003a30:	f88d 2000 	strb.w	r2, [sp]
 8003a34:	3304      	adds	r3, #4
 8003a36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a38:	f005 fb78 	bl	800912c <USB_HostInit>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d005      	beq.n	8003a4e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2202      	movs	r2, #2
 8003a46:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e004      	b.n	8003a58 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8003a60:	b590      	push	{r4, r7, lr}
 8003a62:	b08b      	sub	sp, #44	@ 0x2c
 8003a64:	af04      	add	r7, sp, #16
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	4608      	mov	r0, r1
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	4603      	mov	r3, r0
 8003a70:	70fb      	strb	r3, [r7, #3]
 8003a72:	460b      	mov	r3, r1
 8003a74:	70bb      	strb	r3, [r7, #2]
 8003a76:	4613      	mov	r3, r2
 8003a78:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8003a7a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003a7c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d101      	bne.n	8003a8c <HAL_HCD_HC_Init+0x2c>
 8003a88:	2302      	movs	r3, #2
 8003a8a:	e09d      	b.n	8003bc8 <HAL_HCD_HC_Init+0x168>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8003a94:	78fa      	ldrb	r2, [r7, #3]
 8003a96:	6879      	ldr	r1, [r7, #4]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	011b      	lsls	r3, r3, #4
 8003a9c:	1a9b      	subs	r3, r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	440b      	add	r3, r1
 8003aa2:	3319      	adds	r3, #25
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003aa8:	78fa      	ldrb	r2, [r7, #3]
 8003aaa:	6879      	ldr	r1, [r7, #4]
 8003aac:	4613      	mov	r3, r2
 8003aae:	011b      	lsls	r3, r3, #4
 8003ab0:	1a9b      	subs	r3, r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	440b      	add	r3, r1
 8003ab6:	3314      	adds	r3, #20
 8003ab8:	787a      	ldrb	r2, [r7, #1]
 8003aba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003abc:	78fa      	ldrb	r2, [r7, #3]
 8003abe:	6879      	ldr	r1, [r7, #4]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	011b      	lsls	r3, r3, #4
 8003ac4:	1a9b      	subs	r3, r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	3315      	adds	r3, #21
 8003acc:	78fa      	ldrb	r2, [r7, #3]
 8003ace:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003ad0:	78fa      	ldrb	r2, [r7, #3]
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	011b      	lsls	r3, r3, #4
 8003ad8:	1a9b      	subs	r3, r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	3326      	adds	r3, #38	@ 0x26
 8003ae0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8003ae4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003ae6:	78fa      	ldrb	r2, [r7, #3]
 8003ae8:	78bb      	ldrb	r3, [r7, #2]
 8003aea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003aee:	b2d8      	uxtb	r0, r3
 8003af0:	6879      	ldr	r1, [r7, #4]
 8003af2:	4613      	mov	r3, r2
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	1a9b      	subs	r3, r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	440b      	add	r3, r1
 8003afc:	3316      	adds	r3, #22
 8003afe:	4602      	mov	r2, r0
 8003b00:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8003b02:	78fb      	ldrb	r3, [r7, #3]
 8003b04:	4619      	mov	r1, r3
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 fbc8 	bl	800429c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8003b0c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	da0a      	bge.n	8003b2a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003b14:	78fa      	ldrb	r2, [r7, #3]
 8003b16:	6879      	ldr	r1, [r7, #4]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	011b      	lsls	r3, r3, #4
 8003b1c:	1a9b      	subs	r3, r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	440b      	add	r3, r1
 8003b22:	3317      	adds	r3, #23
 8003b24:	2201      	movs	r2, #1
 8003b26:	701a      	strb	r2, [r3, #0]
 8003b28:	e009      	b.n	8003b3e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003b2a:	78fa      	ldrb	r2, [r7, #3]
 8003b2c:	6879      	ldr	r1, [r7, #4]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	011b      	lsls	r3, r3, #4
 8003b32:	1a9b      	subs	r3, r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	440b      	add	r3, r1
 8003b38:	3317      	adds	r3, #23
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f005 fc56 	bl	80093f4 <USB_GetHostSpeed>
 8003b48:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8003b4a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d10b      	bne.n	8003b6a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8003b52:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d107      	bne.n	8003b6a <HAL_HCD_HC_Init+0x10a>
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d104      	bne.n	8003b6a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	2bbc      	cmp	r3, #188	@ 0xbc
 8003b64:	d901      	bls.n	8003b6a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8003b66:	23bc      	movs	r3, #188	@ 0xbc
 8003b68:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8003b6a:	78fa      	ldrb	r2, [r7, #3]
 8003b6c:	6879      	ldr	r1, [r7, #4]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	011b      	lsls	r3, r3, #4
 8003b72:	1a9b      	subs	r3, r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	440b      	add	r3, r1
 8003b78:	3318      	adds	r3, #24
 8003b7a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003b7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8003b80:	78fa      	ldrb	r2, [r7, #3]
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	b298      	uxth	r0, r3
 8003b86:	6879      	ldr	r1, [r7, #4]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	011b      	lsls	r3, r3, #4
 8003b8c:	1a9b      	subs	r3, r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	440b      	add	r3, r1
 8003b92:	3328      	adds	r3, #40	@ 0x28
 8003b94:	4602      	mov	r2, r0
 8003b96:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6818      	ldr	r0, [r3, #0]
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	787c      	ldrb	r4, [r7, #1]
 8003ba2:	78ba      	ldrb	r2, [r7, #2]
 8003ba4:	78f9      	ldrb	r1, [r7, #3]
 8003ba6:	9302      	str	r3, [sp, #8]
 8003ba8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003bac:	9301      	str	r3, [sp, #4]
 8003bae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003bb2:	9300      	str	r3, [sp, #0]
 8003bb4:	4623      	mov	r3, r4
 8003bb6:	f005 fc45 	bl	8009444 <USB_HC_Init>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	371c      	adds	r7, #28
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd90      	pop	{r4, r7, pc}

08003bd0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	460b      	mov	r3, r1
 8003bda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d101      	bne.n	8003bee <HAL_HCD_HC_Halt+0x1e>
 8003bea:	2302      	movs	r3, #2
 8003bec:	e00f      	b.n	8003c0e <HAL_HCD_HC_Halt+0x3e>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	78fa      	ldrb	r2, [r7, #3]
 8003bfc:	4611      	mov	r1, r2
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f005 ffd7 	bl	8009bb2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
	...

08003c18 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	4608      	mov	r0, r1
 8003c22:	4611      	mov	r1, r2
 8003c24:	461a      	mov	r2, r3
 8003c26:	4603      	mov	r3, r0
 8003c28:	70fb      	strb	r3, [r7, #3]
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	70bb      	strb	r3, [r7, #2]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003c32:	78fa      	ldrb	r2, [r7, #3]
 8003c34:	6879      	ldr	r1, [r7, #4]
 8003c36:	4613      	mov	r3, r2
 8003c38:	011b      	lsls	r3, r3, #4
 8003c3a:	1a9b      	subs	r3, r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	440b      	add	r3, r1
 8003c40:	3317      	adds	r3, #23
 8003c42:	78ba      	ldrb	r2, [r7, #2]
 8003c44:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003c46:	78fa      	ldrb	r2, [r7, #3]
 8003c48:	6879      	ldr	r1, [r7, #4]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	011b      	lsls	r3, r3, #4
 8003c4e:	1a9b      	subs	r3, r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	440b      	add	r3, r1
 8003c54:	3326      	adds	r3, #38	@ 0x26
 8003c56:	787a      	ldrb	r2, [r7, #1]
 8003c58:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003c5a:	7c3b      	ldrb	r3, [r7, #16]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d114      	bne.n	8003c8a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003c60:	78fa      	ldrb	r2, [r7, #3]
 8003c62:	6879      	ldr	r1, [r7, #4]
 8003c64:	4613      	mov	r3, r2
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	1a9b      	subs	r3, r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	332a      	adds	r3, #42	@ 0x2a
 8003c70:	2203      	movs	r2, #3
 8003c72:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003c74:	78fa      	ldrb	r2, [r7, #3]
 8003c76:	6879      	ldr	r1, [r7, #4]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	011b      	lsls	r3, r3, #4
 8003c7c:	1a9b      	subs	r3, r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	440b      	add	r3, r1
 8003c82:	3319      	adds	r3, #25
 8003c84:	7f3a      	ldrb	r2, [r7, #28]
 8003c86:	701a      	strb	r2, [r3, #0]
 8003c88:	e009      	b.n	8003c9e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c8a:	78fa      	ldrb	r2, [r7, #3]
 8003c8c:	6879      	ldr	r1, [r7, #4]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	011b      	lsls	r3, r3, #4
 8003c92:	1a9b      	subs	r3, r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	440b      	add	r3, r1
 8003c98:	332a      	adds	r3, #42	@ 0x2a
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003c9e:	787b      	ldrb	r3, [r7, #1]
 8003ca0:	2b03      	cmp	r3, #3
 8003ca2:	f200 8102 	bhi.w	8003eaa <HAL_HCD_HC_SubmitRequest+0x292>
 8003ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8003cac <HAL_HCD_HC_SubmitRequest+0x94>)
 8003ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cac:	08003cbd 	.word	0x08003cbd
 8003cb0:	08003e95 	.word	0x08003e95
 8003cb4:	08003d81 	.word	0x08003d81
 8003cb8:	08003e0b 	.word	0x08003e0b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8003cbc:	7c3b      	ldrb	r3, [r7, #16]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	f040 80f5 	bne.w	8003eae <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8003cc4:	78bb      	ldrb	r3, [r7, #2]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d12d      	bne.n	8003d26 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8003cca:	8b3b      	ldrh	r3, [r7, #24]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d109      	bne.n	8003ce4 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003cd0:	78fa      	ldrb	r2, [r7, #3]
 8003cd2:	6879      	ldr	r1, [r7, #4]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	011b      	lsls	r3, r3, #4
 8003cd8:	1a9b      	subs	r3, r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	440b      	add	r3, r1
 8003cde:	333d      	adds	r3, #61	@ 0x3d
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003ce4:	78fa      	ldrb	r2, [r7, #3]
 8003ce6:	6879      	ldr	r1, [r7, #4]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	011b      	lsls	r3, r3, #4
 8003cec:	1a9b      	subs	r3, r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	440b      	add	r3, r1
 8003cf2:	333d      	adds	r3, #61	@ 0x3d
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10a      	bne.n	8003d10 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003cfa:	78fa      	ldrb	r2, [r7, #3]
 8003cfc:	6879      	ldr	r1, [r7, #4]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	011b      	lsls	r3, r3, #4
 8003d02:	1a9b      	subs	r3, r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	440b      	add	r3, r1
 8003d08:	332a      	adds	r3, #42	@ 0x2a
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8003d0e:	e0ce      	b.n	8003eae <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003d10:	78fa      	ldrb	r2, [r7, #3]
 8003d12:	6879      	ldr	r1, [r7, #4]
 8003d14:	4613      	mov	r3, r2
 8003d16:	011b      	lsls	r3, r3, #4
 8003d18:	1a9b      	subs	r3, r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	440b      	add	r3, r1
 8003d1e:	332a      	adds	r3, #42	@ 0x2a
 8003d20:	2202      	movs	r2, #2
 8003d22:	701a      	strb	r2, [r3, #0]
      break;
 8003d24:	e0c3      	b.n	8003eae <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8003d26:	78fa      	ldrb	r2, [r7, #3]
 8003d28:	6879      	ldr	r1, [r7, #4]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	011b      	lsls	r3, r3, #4
 8003d2e:	1a9b      	subs	r3, r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	440b      	add	r3, r1
 8003d34:	331a      	adds	r3, #26
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	f040 80b8 	bne.w	8003eae <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8003d3e:	78fa      	ldrb	r2, [r7, #3]
 8003d40:	6879      	ldr	r1, [r7, #4]
 8003d42:	4613      	mov	r3, r2
 8003d44:	011b      	lsls	r3, r3, #4
 8003d46:	1a9b      	subs	r3, r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	440b      	add	r3, r1
 8003d4c:	333c      	adds	r3, #60	@ 0x3c
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10a      	bne.n	8003d6a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003d54:	78fa      	ldrb	r2, [r7, #3]
 8003d56:	6879      	ldr	r1, [r7, #4]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	011b      	lsls	r3, r3, #4
 8003d5c:	1a9b      	subs	r3, r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	440b      	add	r3, r1
 8003d62:	332a      	adds	r3, #42	@ 0x2a
 8003d64:	2200      	movs	r2, #0
 8003d66:	701a      	strb	r2, [r3, #0]
      break;
 8003d68:	e0a1      	b.n	8003eae <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003d6a:	78fa      	ldrb	r2, [r7, #3]
 8003d6c:	6879      	ldr	r1, [r7, #4]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	011b      	lsls	r3, r3, #4
 8003d72:	1a9b      	subs	r3, r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	440b      	add	r3, r1
 8003d78:	332a      	adds	r3, #42	@ 0x2a
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	701a      	strb	r2, [r3, #0]
      break;
 8003d7e:	e096      	b.n	8003eae <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003d80:	78bb      	ldrb	r3, [r7, #2]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d120      	bne.n	8003dc8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003d86:	78fa      	ldrb	r2, [r7, #3]
 8003d88:	6879      	ldr	r1, [r7, #4]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	011b      	lsls	r3, r3, #4
 8003d8e:	1a9b      	subs	r3, r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	440b      	add	r3, r1
 8003d94:	333d      	adds	r3, #61	@ 0x3d
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10a      	bne.n	8003db2 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003d9c:	78fa      	ldrb	r2, [r7, #3]
 8003d9e:	6879      	ldr	r1, [r7, #4]
 8003da0:	4613      	mov	r3, r2
 8003da2:	011b      	lsls	r3, r3, #4
 8003da4:	1a9b      	subs	r3, r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	440b      	add	r3, r1
 8003daa:	332a      	adds	r3, #42	@ 0x2a
 8003dac:	2200      	movs	r2, #0
 8003dae:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003db0:	e07e      	b.n	8003eb0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003db2:	78fa      	ldrb	r2, [r7, #3]
 8003db4:	6879      	ldr	r1, [r7, #4]
 8003db6:	4613      	mov	r3, r2
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	1a9b      	subs	r3, r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	440b      	add	r3, r1
 8003dc0:	332a      	adds	r3, #42	@ 0x2a
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	701a      	strb	r2, [r3, #0]
      break;
 8003dc6:	e073      	b.n	8003eb0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003dc8:	78fa      	ldrb	r2, [r7, #3]
 8003dca:	6879      	ldr	r1, [r7, #4]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	011b      	lsls	r3, r3, #4
 8003dd0:	1a9b      	subs	r3, r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	440b      	add	r3, r1
 8003dd6:	333c      	adds	r3, #60	@ 0x3c
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10a      	bne.n	8003df4 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003dde:	78fa      	ldrb	r2, [r7, #3]
 8003de0:	6879      	ldr	r1, [r7, #4]
 8003de2:	4613      	mov	r3, r2
 8003de4:	011b      	lsls	r3, r3, #4
 8003de6:	1a9b      	subs	r3, r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	440b      	add	r3, r1
 8003dec:	332a      	adds	r3, #42	@ 0x2a
 8003dee:	2200      	movs	r2, #0
 8003df0:	701a      	strb	r2, [r3, #0]
      break;
 8003df2:	e05d      	b.n	8003eb0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003df4:	78fa      	ldrb	r2, [r7, #3]
 8003df6:	6879      	ldr	r1, [r7, #4]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	011b      	lsls	r3, r3, #4
 8003dfc:	1a9b      	subs	r3, r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	440b      	add	r3, r1
 8003e02:	332a      	adds	r3, #42	@ 0x2a
 8003e04:	2202      	movs	r2, #2
 8003e06:	701a      	strb	r2, [r3, #0]
      break;
 8003e08:	e052      	b.n	8003eb0 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003e0a:	78bb      	ldrb	r3, [r7, #2]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d120      	bne.n	8003e52 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003e10:	78fa      	ldrb	r2, [r7, #3]
 8003e12:	6879      	ldr	r1, [r7, #4]
 8003e14:	4613      	mov	r3, r2
 8003e16:	011b      	lsls	r3, r3, #4
 8003e18:	1a9b      	subs	r3, r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	440b      	add	r3, r1
 8003e1e:	333d      	adds	r3, #61	@ 0x3d
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10a      	bne.n	8003e3c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003e26:	78fa      	ldrb	r2, [r7, #3]
 8003e28:	6879      	ldr	r1, [r7, #4]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	011b      	lsls	r3, r3, #4
 8003e2e:	1a9b      	subs	r3, r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	440b      	add	r3, r1
 8003e34:	332a      	adds	r3, #42	@ 0x2a
 8003e36:	2200      	movs	r2, #0
 8003e38:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003e3a:	e039      	b.n	8003eb0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003e3c:	78fa      	ldrb	r2, [r7, #3]
 8003e3e:	6879      	ldr	r1, [r7, #4]
 8003e40:	4613      	mov	r3, r2
 8003e42:	011b      	lsls	r3, r3, #4
 8003e44:	1a9b      	subs	r3, r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	440b      	add	r3, r1
 8003e4a:	332a      	adds	r3, #42	@ 0x2a
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	701a      	strb	r2, [r3, #0]
      break;
 8003e50:	e02e      	b.n	8003eb0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003e52:	78fa      	ldrb	r2, [r7, #3]
 8003e54:	6879      	ldr	r1, [r7, #4]
 8003e56:	4613      	mov	r3, r2
 8003e58:	011b      	lsls	r3, r3, #4
 8003e5a:	1a9b      	subs	r3, r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	440b      	add	r3, r1
 8003e60:	333c      	adds	r3, #60	@ 0x3c
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d10a      	bne.n	8003e7e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003e68:	78fa      	ldrb	r2, [r7, #3]
 8003e6a:	6879      	ldr	r1, [r7, #4]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	011b      	lsls	r3, r3, #4
 8003e70:	1a9b      	subs	r3, r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	440b      	add	r3, r1
 8003e76:	332a      	adds	r3, #42	@ 0x2a
 8003e78:	2200      	movs	r2, #0
 8003e7a:	701a      	strb	r2, [r3, #0]
      break;
 8003e7c:	e018      	b.n	8003eb0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003e7e:	78fa      	ldrb	r2, [r7, #3]
 8003e80:	6879      	ldr	r1, [r7, #4]
 8003e82:	4613      	mov	r3, r2
 8003e84:	011b      	lsls	r3, r3, #4
 8003e86:	1a9b      	subs	r3, r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	440b      	add	r3, r1
 8003e8c:	332a      	adds	r3, #42	@ 0x2a
 8003e8e:	2202      	movs	r2, #2
 8003e90:	701a      	strb	r2, [r3, #0]
      break;
 8003e92:	e00d      	b.n	8003eb0 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003e94:	78fa      	ldrb	r2, [r7, #3]
 8003e96:	6879      	ldr	r1, [r7, #4]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	011b      	lsls	r3, r3, #4
 8003e9c:	1a9b      	subs	r3, r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	440b      	add	r3, r1
 8003ea2:	332a      	adds	r3, #42	@ 0x2a
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	701a      	strb	r2, [r3, #0]
      break;
 8003ea8:	e002      	b.n	8003eb0 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8003eaa:	bf00      	nop
 8003eac:	e000      	b.n	8003eb0 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8003eae:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003eb0:	78fa      	ldrb	r2, [r7, #3]
 8003eb2:	6879      	ldr	r1, [r7, #4]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	011b      	lsls	r3, r3, #4
 8003eb8:	1a9b      	subs	r3, r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	440b      	add	r3, r1
 8003ebe:	332c      	adds	r3, #44	@ 0x2c
 8003ec0:	697a      	ldr	r2, [r7, #20]
 8003ec2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003ec4:	78fa      	ldrb	r2, [r7, #3]
 8003ec6:	8b39      	ldrh	r1, [r7, #24]
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	011b      	lsls	r3, r3, #4
 8003ece:	1a9b      	subs	r3, r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4403      	add	r3, r0
 8003ed4:	3334      	adds	r3, #52	@ 0x34
 8003ed6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003ed8:	78fa      	ldrb	r2, [r7, #3]
 8003eda:	6879      	ldr	r1, [r7, #4]
 8003edc:	4613      	mov	r3, r2
 8003ede:	011b      	lsls	r3, r3, #4
 8003ee0:	1a9b      	subs	r3, r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	440b      	add	r3, r1
 8003ee6:	334c      	adds	r3, #76	@ 0x4c
 8003ee8:	2200      	movs	r2, #0
 8003eea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003eec:	78fa      	ldrb	r2, [r7, #3]
 8003eee:	6879      	ldr	r1, [r7, #4]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	011b      	lsls	r3, r3, #4
 8003ef4:	1a9b      	subs	r3, r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	440b      	add	r3, r1
 8003efa:	3338      	adds	r3, #56	@ 0x38
 8003efc:	2200      	movs	r2, #0
 8003efe:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003f00:	78fa      	ldrb	r2, [r7, #3]
 8003f02:	6879      	ldr	r1, [r7, #4]
 8003f04:	4613      	mov	r3, r2
 8003f06:	011b      	lsls	r3, r3, #4
 8003f08:	1a9b      	subs	r3, r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	440b      	add	r3, r1
 8003f0e:	3315      	adds	r3, #21
 8003f10:	78fa      	ldrb	r2, [r7, #3]
 8003f12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003f14:	78fa      	ldrb	r2, [r7, #3]
 8003f16:	6879      	ldr	r1, [r7, #4]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	011b      	lsls	r3, r3, #4
 8003f1c:	1a9b      	subs	r3, r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	440b      	add	r3, r1
 8003f22:	334d      	adds	r3, #77	@ 0x4d
 8003f24:	2200      	movs	r2, #0
 8003f26:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6818      	ldr	r0, [r3, #0]
 8003f2c:	78fa      	ldrb	r2, [r7, #3]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	011b      	lsls	r3, r3, #4
 8003f32:	1a9b      	subs	r3, r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	3310      	adds	r3, #16
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	1d19      	adds	r1, r3, #4
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	799b      	ldrb	r3, [r3, #6]
 8003f42:	461a      	mov	r2, r3
 8003f44:	f005 fbaa 	bl	800969c <USB_HC_StartXfer>
 8003f48:	4603      	mov	r3, r0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop

08003f54 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f005 f89e 	bl	80090ac <USB_GetMode>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	f040 80fb 	bne.w	800416e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f005 f861 	bl	8009044 <USB_ReadInterrupts>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f000 80f1 	beq.w	800416c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f005 f858 	bl	8009044 <USB_ReadInterrupts>
 8003f94:	4603      	mov	r3, r0
 8003f96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f9e:	d104      	bne.n	8003faa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003fa8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f005 f848 	bl	8009044 <USB_ReadInterrupts>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fbe:	d104      	bne.n	8003fca <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003fc8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f005 f838 	bl	8009044 <USB_ReadInterrupts>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003fda:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fde:	d104      	bne.n	8003fea <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003fe8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f005 f828 	bl	8009044 <USB_ReadInterrupts>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d103      	bne.n	8004006 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2202      	movs	r2, #2
 8004004:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	f005 f81a 	bl	8009044 <USB_ReadInterrupts>
 8004010:	4603      	mov	r3, r0
 8004012:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004016:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800401a:	d120      	bne.n	800405e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004024:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b00      	cmp	r3, #0
 8004034:	d113      	bne.n	800405e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004036:	2110      	movs	r1, #16
 8004038:	6938      	ldr	r0, [r7, #16]
 800403a:	f004 ff0d 	bl	8008e58 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800403e:	6938      	ldr	r0, [r7, #16]
 8004040:	f004 ff3c 	bl	8008ebc <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	7a5b      	ldrb	r3, [r3, #9]
 8004048:	2b02      	cmp	r3, #2
 800404a:	d105      	bne.n	8004058 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2101      	movs	r1, #1
 8004052:	4618      	mov	r0, r3
 8004054:	f005 f92e 	bl	80092b4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f008 f8f5 	bl	800c248 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4618      	mov	r0, r3
 8004064:	f004 ffee 	bl	8009044 <USB_ReadInterrupts>
 8004068:	4603      	mov	r3, r0
 800406a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800406e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004072:	d102      	bne.n	800407a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f001 fd4d 	bl	8005b14 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4618      	mov	r0, r3
 8004080:	f004 ffe0 	bl	8009044 <USB_ReadInterrupts>
 8004084:	4603      	mov	r3, r0
 8004086:	f003 0308 	and.w	r3, r3, #8
 800408a:	2b08      	cmp	r3, #8
 800408c:	d106      	bne.n	800409c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f008 f8be 	bl	800c210 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2208      	movs	r2, #8
 800409a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f004 ffcf 	bl	8009044 <USB_ReadInterrupts>
 80040a6:	4603      	mov	r3, r0
 80040a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80040b0:	d139      	bne.n	8004126 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f005 fd6a 	bl	8009b90 <USB_HC_ReadInterrupt>
 80040bc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80040be:	2300      	movs	r3, #0
 80040c0:	617b      	str	r3, [r7, #20]
 80040c2:	e025      	b.n	8004110 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	f003 030f 	and.w	r3, r3, #15
 80040ca:	68ba      	ldr	r2, [r7, #8]
 80040cc:	fa22 f303 	lsr.w	r3, r2, r3
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d018      	beq.n	800410a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	015a      	lsls	r2, r3, #5
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	4413      	add	r3, r2
 80040e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040ee:	d106      	bne.n	80040fe <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	4619      	mov	r1, r3
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f905 	bl	8004306 <HCD_HC_IN_IRQHandler>
 80040fc:	e005      	b.n	800410a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	b2db      	uxtb	r3, r3
 8004102:	4619      	mov	r1, r3
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 ff67 	bl	8004fd8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	3301      	adds	r3, #1
 800410e:	617b      	str	r3, [r7, #20]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	795b      	ldrb	r3, [r3, #5]
 8004114:	461a      	mov	r2, r3
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	4293      	cmp	r3, r2
 800411a:	d3d3      	bcc.n	80040c4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004124:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4618      	mov	r0, r3
 800412c:	f004 ff8a 	bl	8009044 <USB_ReadInterrupts>
 8004130:	4603      	mov	r3, r0
 8004132:	f003 0310 	and.w	r3, r3, #16
 8004136:	2b10      	cmp	r3, #16
 8004138:	d101      	bne.n	800413e <HAL_HCD_IRQHandler+0x1ea>
 800413a:	2301      	movs	r3, #1
 800413c:	e000      	b.n	8004140 <HAL_HCD_IRQHandler+0x1ec>
 800413e:	2300      	movs	r3, #0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d014      	beq.n	800416e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	699a      	ldr	r2, [r3, #24]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f022 0210 	bic.w	r2, r2, #16
 8004152:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f001 fbfe 	bl	8005956 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	699a      	ldr	r2, [r3, #24]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f042 0210 	orr.w	r2, r2, #16
 8004168:	619a      	str	r2, [r3, #24]
 800416a:	e000      	b.n	800416e <HAL_HCD_IRQHandler+0x21a>
      return;
 800416c:	bf00      	nop
    }
  }
}
 800416e:	3718      	adds	r7, #24
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004182:	2b01      	cmp	r3, #1
 8004184:	d101      	bne.n	800418a <HAL_HCD_Start+0x16>
 8004186:	2302      	movs	r3, #2
 8004188:	e013      	b.n	80041b2 <HAL_HCD_Start+0x3e>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2101      	movs	r1, #1
 8004198:	4618      	mov	r0, r3
 800419a:	f005 f8f2 	bl	8009382 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f004 fdea 	bl	8008d7c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b082      	sub	sp, #8
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d101      	bne.n	80041d0 <HAL_HCD_Stop+0x16>
 80041cc:	2302      	movs	r3, #2
 80041ce:	e00d      	b.n	80041ec <HAL_HCD_Stop+0x32>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4618      	mov	r0, r3
 80041de:	f005 fe45 	bl	8009e6c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3708      	adds	r7, #8
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4618      	mov	r0, r3
 8004202:	f005 f894 	bl	800932e <USB_ResetPort>
 8004206:	4603      	mov	r3, r0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	460b      	mov	r3, r1
 800421a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800421c:	78fa      	ldrb	r2, [r7, #3]
 800421e:	6879      	ldr	r1, [r7, #4]
 8004220:	4613      	mov	r3, r2
 8004222:	011b      	lsls	r3, r3, #4
 8004224:	1a9b      	subs	r3, r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	440b      	add	r3, r1
 800422a:	334c      	adds	r3, #76	@ 0x4c
 800422c:	781b      	ldrb	r3, [r3, #0]
}
 800422e:	4618      	mov	r0, r3
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800423a:	b480      	push	{r7}
 800423c:	b083      	sub	sp, #12
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
 8004242:	460b      	mov	r3, r1
 8004244:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004246:	78fa      	ldrb	r2, [r7, #3]
 8004248:	6879      	ldr	r1, [r7, #4]
 800424a:	4613      	mov	r3, r2
 800424c:	011b      	lsls	r3, r3, #4
 800424e:	1a9b      	subs	r3, r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	440b      	add	r3, r1
 8004254:	3338      	adds	r3, #56	@ 0x38
 8004256:	681b      	ldr	r3, [r3, #0]
}
 8004258:	4618      	mov	r0, r3
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4618      	mov	r0, r3
 8004272:	f005 f8d6 	bl	8009422 <USB_GetCurrentFrame>
 8004276:	4603      	mov	r3, r0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3708      	adds	r7, #8
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4618      	mov	r0, r3
 800428e:	f005 f8b1 	bl	80093f4 <USB_GetHostSpeed>
 8004292:	4603      	mov	r3, r0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3708      	adds	r7, #8
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	460b      	mov	r3, r1
 80042a6:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80042a8:	78fa      	ldrb	r2, [r7, #3]
 80042aa:	6879      	ldr	r1, [r7, #4]
 80042ac:	4613      	mov	r3, r2
 80042ae:	011b      	lsls	r3, r3, #4
 80042b0:	1a9b      	subs	r3, r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	440b      	add	r3, r1
 80042b6:	331a      	adds	r3, #26
 80042b8:	2200      	movs	r2, #0
 80042ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80042bc:	78fa      	ldrb	r2, [r7, #3]
 80042be:	6879      	ldr	r1, [r7, #4]
 80042c0:	4613      	mov	r3, r2
 80042c2:	011b      	lsls	r3, r3, #4
 80042c4:	1a9b      	subs	r3, r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	440b      	add	r3, r1
 80042ca:	331b      	adds	r3, #27
 80042cc:	2200      	movs	r2, #0
 80042ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80042d0:	78fa      	ldrb	r2, [r7, #3]
 80042d2:	6879      	ldr	r1, [r7, #4]
 80042d4:	4613      	mov	r3, r2
 80042d6:	011b      	lsls	r3, r3, #4
 80042d8:	1a9b      	subs	r3, r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	440b      	add	r3, r1
 80042de:	3325      	adds	r3, #37	@ 0x25
 80042e0:	2200      	movs	r2, #0
 80042e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80042e4:	78fa      	ldrb	r2, [r7, #3]
 80042e6:	6879      	ldr	r1, [r7, #4]
 80042e8:	4613      	mov	r3, r2
 80042ea:	011b      	lsls	r3, r3, #4
 80042ec:	1a9b      	subs	r3, r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	440b      	add	r3, r1
 80042f2:	3324      	adds	r3, #36	@ 0x24
 80042f4:	2200      	movs	r2, #0
 80042f6:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b086      	sub	sp, #24
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
 800430e:	460b      	mov	r3, r1
 8004310:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	78fa      	ldrb	r2, [r7, #3]
 8004322:	4611      	mov	r1, r2
 8004324:	4618      	mov	r0, r3
 8004326:	f004 fea0 	bl	800906a <USB_ReadChInterrupts>
 800432a:	4603      	mov	r3, r0
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b04      	cmp	r3, #4
 8004332:	d11a      	bne.n	800436a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004334:	78fb      	ldrb	r3, [r7, #3]
 8004336:	015a      	lsls	r2, r3, #5
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	4413      	add	r3, r2
 800433c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004340:	461a      	mov	r2, r3
 8004342:	2304      	movs	r3, #4
 8004344:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004346:	78fa      	ldrb	r2, [r7, #3]
 8004348:	6879      	ldr	r1, [r7, #4]
 800434a:	4613      	mov	r3, r2
 800434c:	011b      	lsls	r3, r3, #4
 800434e:	1a9b      	subs	r3, r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	440b      	add	r3, r1
 8004354:	334d      	adds	r3, #77	@ 0x4d
 8004356:	2207      	movs	r2, #7
 8004358:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	78fa      	ldrb	r2, [r7, #3]
 8004360:	4611      	mov	r1, r2
 8004362:	4618      	mov	r0, r3
 8004364:	f005 fc25 	bl	8009bb2 <USB_HC_Halt>
 8004368:	e09e      	b.n	80044a8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	78fa      	ldrb	r2, [r7, #3]
 8004370:	4611      	mov	r1, r2
 8004372:	4618      	mov	r0, r3
 8004374:	f004 fe79 	bl	800906a <USB_ReadChInterrupts>
 8004378:	4603      	mov	r3, r0
 800437a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800437e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004382:	d11b      	bne.n	80043bc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8004384:	78fb      	ldrb	r3, [r7, #3]
 8004386:	015a      	lsls	r2, r3, #5
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	4413      	add	r3, r2
 800438c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004390:	461a      	mov	r2, r3
 8004392:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004396:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8004398:	78fa      	ldrb	r2, [r7, #3]
 800439a:	6879      	ldr	r1, [r7, #4]
 800439c:	4613      	mov	r3, r2
 800439e:	011b      	lsls	r3, r3, #4
 80043a0:	1a9b      	subs	r3, r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	440b      	add	r3, r1
 80043a6:	334d      	adds	r3, #77	@ 0x4d
 80043a8:	2208      	movs	r2, #8
 80043aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	78fa      	ldrb	r2, [r7, #3]
 80043b2:	4611      	mov	r1, r2
 80043b4:	4618      	mov	r0, r3
 80043b6:	f005 fbfc 	bl	8009bb2 <USB_HC_Halt>
 80043ba:	e075      	b.n	80044a8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	78fa      	ldrb	r2, [r7, #3]
 80043c2:	4611      	mov	r1, r2
 80043c4:	4618      	mov	r0, r3
 80043c6:	f004 fe50 	bl	800906a <USB_ReadChInterrupts>
 80043ca:	4603      	mov	r3, r0
 80043cc:	f003 0308 	and.w	r3, r3, #8
 80043d0:	2b08      	cmp	r3, #8
 80043d2:	d11a      	bne.n	800440a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80043d4:	78fb      	ldrb	r3, [r7, #3]
 80043d6:	015a      	lsls	r2, r3, #5
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	4413      	add	r3, r2
 80043dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043e0:	461a      	mov	r2, r3
 80043e2:	2308      	movs	r3, #8
 80043e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80043e6:	78fa      	ldrb	r2, [r7, #3]
 80043e8:	6879      	ldr	r1, [r7, #4]
 80043ea:	4613      	mov	r3, r2
 80043ec:	011b      	lsls	r3, r3, #4
 80043ee:	1a9b      	subs	r3, r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	440b      	add	r3, r1
 80043f4:	334d      	adds	r3, #77	@ 0x4d
 80043f6:	2206      	movs	r2, #6
 80043f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	78fa      	ldrb	r2, [r7, #3]
 8004400:	4611      	mov	r1, r2
 8004402:	4618      	mov	r0, r3
 8004404:	f005 fbd5 	bl	8009bb2 <USB_HC_Halt>
 8004408:	e04e      	b.n	80044a8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	78fa      	ldrb	r2, [r7, #3]
 8004410:	4611      	mov	r1, r2
 8004412:	4618      	mov	r0, r3
 8004414:	f004 fe29 	bl	800906a <USB_ReadChInterrupts>
 8004418:	4603      	mov	r3, r0
 800441a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800441e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004422:	d11b      	bne.n	800445c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004424:	78fb      	ldrb	r3, [r7, #3]
 8004426:	015a      	lsls	r2, r3, #5
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	4413      	add	r3, r2
 800442c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004430:	461a      	mov	r2, r3
 8004432:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004436:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004438:	78fa      	ldrb	r2, [r7, #3]
 800443a:	6879      	ldr	r1, [r7, #4]
 800443c:	4613      	mov	r3, r2
 800443e:	011b      	lsls	r3, r3, #4
 8004440:	1a9b      	subs	r3, r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	440b      	add	r3, r1
 8004446:	334d      	adds	r3, #77	@ 0x4d
 8004448:	2209      	movs	r2, #9
 800444a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	78fa      	ldrb	r2, [r7, #3]
 8004452:	4611      	mov	r1, r2
 8004454:	4618      	mov	r0, r3
 8004456:	f005 fbac 	bl	8009bb2 <USB_HC_Halt>
 800445a:	e025      	b.n	80044a8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	78fa      	ldrb	r2, [r7, #3]
 8004462:	4611      	mov	r1, r2
 8004464:	4618      	mov	r0, r3
 8004466:	f004 fe00 	bl	800906a <USB_ReadChInterrupts>
 800446a:	4603      	mov	r3, r0
 800446c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004470:	2b80      	cmp	r3, #128	@ 0x80
 8004472:	d119      	bne.n	80044a8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004474:	78fb      	ldrb	r3, [r7, #3]
 8004476:	015a      	lsls	r2, r3, #5
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	4413      	add	r3, r2
 800447c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004480:	461a      	mov	r2, r3
 8004482:	2380      	movs	r3, #128	@ 0x80
 8004484:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004486:	78fa      	ldrb	r2, [r7, #3]
 8004488:	6879      	ldr	r1, [r7, #4]
 800448a:	4613      	mov	r3, r2
 800448c:	011b      	lsls	r3, r3, #4
 800448e:	1a9b      	subs	r3, r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	440b      	add	r3, r1
 8004494:	334d      	adds	r3, #77	@ 0x4d
 8004496:	2207      	movs	r2, #7
 8004498:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	78fa      	ldrb	r2, [r7, #3]
 80044a0:	4611      	mov	r1, r2
 80044a2:	4618      	mov	r0, r3
 80044a4:	f005 fb85 	bl	8009bb2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	78fa      	ldrb	r2, [r7, #3]
 80044ae:	4611      	mov	r1, r2
 80044b0:	4618      	mov	r0, r3
 80044b2:	f004 fdda 	bl	800906a <USB_ReadChInterrupts>
 80044b6:	4603      	mov	r3, r0
 80044b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044c0:	d112      	bne.n	80044e8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	78fa      	ldrb	r2, [r7, #3]
 80044c8:	4611      	mov	r1, r2
 80044ca:	4618      	mov	r0, r3
 80044cc:	f005 fb71 	bl	8009bb2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80044d0:	78fb      	ldrb	r3, [r7, #3]
 80044d2:	015a      	lsls	r2, r3, #5
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	4413      	add	r3, r2
 80044d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044dc:	461a      	mov	r2, r3
 80044de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80044e2:	6093      	str	r3, [r2, #8]
 80044e4:	f000 bd75 	b.w	8004fd2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	78fa      	ldrb	r2, [r7, #3]
 80044ee:	4611      	mov	r1, r2
 80044f0:	4618      	mov	r0, r3
 80044f2:	f004 fdba 	bl	800906a <USB_ReadChInterrupts>
 80044f6:	4603      	mov	r3, r0
 80044f8:	f003 0301 	and.w	r3, r3, #1
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	f040 8128 	bne.w	8004752 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004502:	78fb      	ldrb	r3, [r7, #3]
 8004504:	015a      	lsls	r2, r3, #5
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	4413      	add	r3, r2
 800450a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800450e:	461a      	mov	r2, r3
 8004510:	2320      	movs	r3, #32
 8004512:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004514:	78fa      	ldrb	r2, [r7, #3]
 8004516:	6879      	ldr	r1, [r7, #4]
 8004518:	4613      	mov	r3, r2
 800451a:	011b      	lsls	r3, r3, #4
 800451c:	1a9b      	subs	r3, r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	440b      	add	r3, r1
 8004522:	331b      	adds	r3, #27
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d119      	bne.n	800455e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800452a:	78fa      	ldrb	r2, [r7, #3]
 800452c:	6879      	ldr	r1, [r7, #4]
 800452e:	4613      	mov	r3, r2
 8004530:	011b      	lsls	r3, r3, #4
 8004532:	1a9b      	subs	r3, r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	440b      	add	r3, r1
 8004538:	331b      	adds	r3, #27
 800453a:	2200      	movs	r2, #0
 800453c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800453e:	78fb      	ldrb	r3, [r7, #3]
 8004540:	015a      	lsls	r2, r3, #5
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	4413      	add	r3, r2
 8004546:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	78fa      	ldrb	r2, [r7, #3]
 800454e:	0151      	lsls	r1, r2, #5
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	440a      	add	r2, r1
 8004554:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004558:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800455c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	799b      	ldrb	r3, [r3, #6]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d01b      	beq.n	800459e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004566:	78fa      	ldrb	r2, [r7, #3]
 8004568:	6879      	ldr	r1, [r7, #4]
 800456a:	4613      	mov	r3, r2
 800456c:	011b      	lsls	r3, r3, #4
 800456e:	1a9b      	subs	r3, r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	440b      	add	r3, r1
 8004574:	3330      	adds	r3, #48	@ 0x30
 8004576:	6819      	ldr	r1, [r3, #0]
 8004578:	78fb      	ldrb	r3, [r7, #3]
 800457a:	015a      	lsls	r2, r3, #5
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	4413      	add	r3, r2
 8004580:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800458a:	78fa      	ldrb	r2, [r7, #3]
 800458c:	1ac9      	subs	r1, r1, r3
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	4613      	mov	r3, r2
 8004592:	011b      	lsls	r3, r3, #4
 8004594:	1a9b      	subs	r3, r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	4403      	add	r3, r0
 800459a:	3338      	adds	r3, #56	@ 0x38
 800459c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800459e:	78fa      	ldrb	r2, [r7, #3]
 80045a0:	6879      	ldr	r1, [r7, #4]
 80045a2:	4613      	mov	r3, r2
 80045a4:	011b      	lsls	r3, r3, #4
 80045a6:	1a9b      	subs	r3, r3, r2
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	440b      	add	r3, r1
 80045ac:	334d      	adds	r3, #77	@ 0x4d
 80045ae:	2201      	movs	r2, #1
 80045b0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80045b2:	78fa      	ldrb	r2, [r7, #3]
 80045b4:	6879      	ldr	r1, [r7, #4]
 80045b6:	4613      	mov	r3, r2
 80045b8:	011b      	lsls	r3, r3, #4
 80045ba:	1a9b      	subs	r3, r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	440b      	add	r3, r1
 80045c0:	3344      	adds	r3, #68	@ 0x44
 80045c2:	2200      	movs	r2, #0
 80045c4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80045c6:	78fb      	ldrb	r3, [r7, #3]
 80045c8:	015a      	lsls	r2, r3, #5
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	4413      	add	r3, r2
 80045ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045d2:	461a      	mov	r2, r3
 80045d4:	2301      	movs	r3, #1
 80045d6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80045d8:	78fa      	ldrb	r2, [r7, #3]
 80045da:	6879      	ldr	r1, [r7, #4]
 80045dc:	4613      	mov	r3, r2
 80045de:	011b      	lsls	r3, r3, #4
 80045e0:	1a9b      	subs	r3, r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	440b      	add	r3, r1
 80045e6:	3326      	adds	r3, #38	@ 0x26
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00a      	beq.n	8004604 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80045ee:	78fa      	ldrb	r2, [r7, #3]
 80045f0:	6879      	ldr	r1, [r7, #4]
 80045f2:	4613      	mov	r3, r2
 80045f4:	011b      	lsls	r3, r3, #4
 80045f6:	1a9b      	subs	r3, r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	440b      	add	r3, r1
 80045fc:	3326      	adds	r3, #38	@ 0x26
 80045fe:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004600:	2b02      	cmp	r3, #2
 8004602:	d110      	bne.n	8004626 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	78fa      	ldrb	r2, [r7, #3]
 800460a:	4611      	mov	r1, r2
 800460c:	4618      	mov	r0, r3
 800460e:	f005 fad0 	bl	8009bb2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004612:	78fb      	ldrb	r3, [r7, #3]
 8004614:	015a      	lsls	r2, r3, #5
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	4413      	add	r3, r2
 800461a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800461e:	461a      	mov	r2, r3
 8004620:	2310      	movs	r3, #16
 8004622:	6093      	str	r3, [r2, #8]
 8004624:	e03d      	b.n	80046a2 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004626:	78fa      	ldrb	r2, [r7, #3]
 8004628:	6879      	ldr	r1, [r7, #4]
 800462a:	4613      	mov	r3, r2
 800462c:	011b      	lsls	r3, r3, #4
 800462e:	1a9b      	subs	r3, r3, r2
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	440b      	add	r3, r1
 8004634:	3326      	adds	r3, #38	@ 0x26
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	2b03      	cmp	r3, #3
 800463a:	d00a      	beq.n	8004652 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800463c:	78fa      	ldrb	r2, [r7, #3]
 800463e:	6879      	ldr	r1, [r7, #4]
 8004640:	4613      	mov	r3, r2
 8004642:	011b      	lsls	r3, r3, #4
 8004644:	1a9b      	subs	r3, r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	440b      	add	r3, r1
 800464a:	3326      	adds	r3, #38	@ 0x26
 800464c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800464e:	2b01      	cmp	r3, #1
 8004650:	d127      	bne.n	80046a2 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004652:	78fb      	ldrb	r3, [r7, #3]
 8004654:	015a      	lsls	r2, r3, #5
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	4413      	add	r3, r2
 800465a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	78fa      	ldrb	r2, [r7, #3]
 8004662:	0151      	lsls	r1, r2, #5
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	440a      	add	r2, r1
 8004668:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800466c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004670:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004672:	78fa      	ldrb	r2, [r7, #3]
 8004674:	6879      	ldr	r1, [r7, #4]
 8004676:	4613      	mov	r3, r2
 8004678:	011b      	lsls	r3, r3, #4
 800467a:	1a9b      	subs	r3, r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	440b      	add	r3, r1
 8004680:	334c      	adds	r3, #76	@ 0x4c
 8004682:	2201      	movs	r2, #1
 8004684:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004686:	78fa      	ldrb	r2, [r7, #3]
 8004688:	6879      	ldr	r1, [r7, #4]
 800468a:	4613      	mov	r3, r2
 800468c:	011b      	lsls	r3, r3, #4
 800468e:	1a9b      	subs	r3, r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	440b      	add	r3, r1
 8004694:	334c      	adds	r3, #76	@ 0x4c
 8004696:	781a      	ldrb	r2, [r3, #0]
 8004698:	78fb      	ldrb	r3, [r7, #3]
 800469a:	4619      	mov	r1, r3
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f007 fde1 	bl	800c264 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	799b      	ldrb	r3, [r3, #6]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d13b      	bne.n	8004722 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80046aa:	78fa      	ldrb	r2, [r7, #3]
 80046ac:	6879      	ldr	r1, [r7, #4]
 80046ae:	4613      	mov	r3, r2
 80046b0:	011b      	lsls	r3, r3, #4
 80046b2:	1a9b      	subs	r3, r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	440b      	add	r3, r1
 80046b8:	3338      	adds	r3, #56	@ 0x38
 80046ba:	6819      	ldr	r1, [r3, #0]
 80046bc:	78fa      	ldrb	r2, [r7, #3]
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	4613      	mov	r3, r2
 80046c2:	011b      	lsls	r3, r3, #4
 80046c4:	1a9b      	subs	r3, r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4403      	add	r3, r0
 80046ca:	3328      	adds	r3, #40	@ 0x28
 80046cc:	881b      	ldrh	r3, [r3, #0]
 80046ce:	440b      	add	r3, r1
 80046d0:	1e59      	subs	r1, r3, #1
 80046d2:	78fa      	ldrb	r2, [r7, #3]
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	4613      	mov	r3, r2
 80046d8:	011b      	lsls	r3, r3, #4
 80046da:	1a9b      	subs	r3, r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4403      	add	r3, r0
 80046e0:	3328      	adds	r3, #40	@ 0x28
 80046e2:	881b      	ldrh	r3, [r3, #0]
 80046e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 8470 	beq.w	8004fd2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80046f2:	78fa      	ldrb	r2, [r7, #3]
 80046f4:	6879      	ldr	r1, [r7, #4]
 80046f6:	4613      	mov	r3, r2
 80046f8:	011b      	lsls	r3, r3, #4
 80046fa:	1a9b      	subs	r3, r3, r2
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	440b      	add	r3, r1
 8004700:	333c      	adds	r3, #60	@ 0x3c
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	78fa      	ldrb	r2, [r7, #3]
 8004706:	f083 0301 	eor.w	r3, r3, #1
 800470a:	b2d8      	uxtb	r0, r3
 800470c:	6879      	ldr	r1, [r7, #4]
 800470e:	4613      	mov	r3, r2
 8004710:	011b      	lsls	r3, r3, #4
 8004712:	1a9b      	subs	r3, r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	440b      	add	r3, r1
 8004718:	333c      	adds	r3, #60	@ 0x3c
 800471a:	4602      	mov	r2, r0
 800471c:	701a      	strb	r2, [r3, #0]
 800471e:	f000 bc58 	b.w	8004fd2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8004722:	78fa      	ldrb	r2, [r7, #3]
 8004724:	6879      	ldr	r1, [r7, #4]
 8004726:	4613      	mov	r3, r2
 8004728:	011b      	lsls	r3, r3, #4
 800472a:	1a9b      	subs	r3, r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	440b      	add	r3, r1
 8004730:	333c      	adds	r3, #60	@ 0x3c
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	78fa      	ldrb	r2, [r7, #3]
 8004736:	f083 0301 	eor.w	r3, r3, #1
 800473a:	b2d8      	uxtb	r0, r3
 800473c:	6879      	ldr	r1, [r7, #4]
 800473e:	4613      	mov	r3, r2
 8004740:	011b      	lsls	r3, r3, #4
 8004742:	1a9b      	subs	r3, r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	440b      	add	r3, r1
 8004748:	333c      	adds	r3, #60	@ 0x3c
 800474a:	4602      	mov	r2, r0
 800474c:	701a      	strb	r2, [r3, #0]
 800474e:	f000 bc40 	b.w	8004fd2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	78fa      	ldrb	r2, [r7, #3]
 8004758:	4611      	mov	r1, r2
 800475a:	4618      	mov	r0, r3
 800475c:	f004 fc85 	bl	800906a <USB_ReadChInterrupts>
 8004760:	4603      	mov	r3, r0
 8004762:	f003 0320 	and.w	r3, r3, #32
 8004766:	2b20      	cmp	r3, #32
 8004768:	d131      	bne.n	80047ce <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800476a:	78fb      	ldrb	r3, [r7, #3]
 800476c:	015a      	lsls	r2, r3, #5
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	4413      	add	r3, r2
 8004772:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004776:	461a      	mov	r2, r3
 8004778:	2320      	movs	r3, #32
 800477a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800477c:	78fa      	ldrb	r2, [r7, #3]
 800477e:	6879      	ldr	r1, [r7, #4]
 8004780:	4613      	mov	r3, r2
 8004782:	011b      	lsls	r3, r3, #4
 8004784:	1a9b      	subs	r3, r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	440b      	add	r3, r1
 800478a:	331a      	adds	r3, #26
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	2b01      	cmp	r3, #1
 8004790:	f040 841f 	bne.w	8004fd2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8004794:	78fa      	ldrb	r2, [r7, #3]
 8004796:	6879      	ldr	r1, [r7, #4]
 8004798:	4613      	mov	r3, r2
 800479a:	011b      	lsls	r3, r3, #4
 800479c:	1a9b      	subs	r3, r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	440b      	add	r3, r1
 80047a2:	331b      	adds	r3, #27
 80047a4:	2201      	movs	r2, #1
 80047a6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80047a8:	78fa      	ldrb	r2, [r7, #3]
 80047aa:	6879      	ldr	r1, [r7, #4]
 80047ac:	4613      	mov	r3, r2
 80047ae:	011b      	lsls	r3, r3, #4
 80047b0:	1a9b      	subs	r3, r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	440b      	add	r3, r1
 80047b6:	334d      	adds	r3, #77	@ 0x4d
 80047b8:	2203      	movs	r2, #3
 80047ba:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	78fa      	ldrb	r2, [r7, #3]
 80047c2:	4611      	mov	r1, r2
 80047c4:	4618      	mov	r0, r3
 80047c6:	f005 f9f4 	bl	8009bb2 <USB_HC_Halt>
 80047ca:	f000 bc02 	b.w	8004fd2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	78fa      	ldrb	r2, [r7, #3]
 80047d4:	4611      	mov	r1, r2
 80047d6:	4618      	mov	r0, r3
 80047d8:	f004 fc47 	bl	800906a <USB_ReadChInterrupts>
 80047dc:	4603      	mov	r3, r0
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	f040 8305 	bne.w	8004df2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80047e8:	78fb      	ldrb	r3, [r7, #3]
 80047ea:	015a      	lsls	r2, r3, #5
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	4413      	add	r3, r2
 80047f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047f4:	461a      	mov	r2, r3
 80047f6:	2302      	movs	r3, #2
 80047f8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80047fa:	78fa      	ldrb	r2, [r7, #3]
 80047fc:	6879      	ldr	r1, [r7, #4]
 80047fe:	4613      	mov	r3, r2
 8004800:	011b      	lsls	r3, r3, #4
 8004802:	1a9b      	subs	r3, r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	440b      	add	r3, r1
 8004808:	334d      	adds	r3, #77	@ 0x4d
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d114      	bne.n	800483a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004810:	78fa      	ldrb	r2, [r7, #3]
 8004812:	6879      	ldr	r1, [r7, #4]
 8004814:	4613      	mov	r3, r2
 8004816:	011b      	lsls	r3, r3, #4
 8004818:	1a9b      	subs	r3, r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	440b      	add	r3, r1
 800481e:	334d      	adds	r3, #77	@ 0x4d
 8004820:	2202      	movs	r2, #2
 8004822:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004824:	78fa      	ldrb	r2, [r7, #3]
 8004826:	6879      	ldr	r1, [r7, #4]
 8004828:	4613      	mov	r3, r2
 800482a:	011b      	lsls	r3, r3, #4
 800482c:	1a9b      	subs	r3, r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	440b      	add	r3, r1
 8004832:	334c      	adds	r3, #76	@ 0x4c
 8004834:	2201      	movs	r2, #1
 8004836:	701a      	strb	r2, [r3, #0]
 8004838:	e2cc      	b.n	8004dd4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800483a:	78fa      	ldrb	r2, [r7, #3]
 800483c:	6879      	ldr	r1, [r7, #4]
 800483e:	4613      	mov	r3, r2
 8004840:	011b      	lsls	r3, r3, #4
 8004842:	1a9b      	subs	r3, r3, r2
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	440b      	add	r3, r1
 8004848:	334d      	adds	r3, #77	@ 0x4d
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	2b06      	cmp	r3, #6
 800484e:	d114      	bne.n	800487a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004850:	78fa      	ldrb	r2, [r7, #3]
 8004852:	6879      	ldr	r1, [r7, #4]
 8004854:	4613      	mov	r3, r2
 8004856:	011b      	lsls	r3, r3, #4
 8004858:	1a9b      	subs	r3, r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	440b      	add	r3, r1
 800485e:	334d      	adds	r3, #77	@ 0x4d
 8004860:	2202      	movs	r2, #2
 8004862:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8004864:	78fa      	ldrb	r2, [r7, #3]
 8004866:	6879      	ldr	r1, [r7, #4]
 8004868:	4613      	mov	r3, r2
 800486a:	011b      	lsls	r3, r3, #4
 800486c:	1a9b      	subs	r3, r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	440b      	add	r3, r1
 8004872:	334c      	adds	r3, #76	@ 0x4c
 8004874:	2205      	movs	r2, #5
 8004876:	701a      	strb	r2, [r3, #0]
 8004878:	e2ac      	b.n	8004dd4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800487a:	78fa      	ldrb	r2, [r7, #3]
 800487c:	6879      	ldr	r1, [r7, #4]
 800487e:	4613      	mov	r3, r2
 8004880:	011b      	lsls	r3, r3, #4
 8004882:	1a9b      	subs	r3, r3, r2
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	440b      	add	r3, r1
 8004888:	334d      	adds	r3, #77	@ 0x4d
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	2b07      	cmp	r3, #7
 800488e:	d00b      	beq.n	80048a8 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004890:	78fa      	ldrb	r2, [r7, #3]
 8004892:	6879      	ldr	r1, [r7, #4]
 8004894:	4613      	mov	r3, r2
 8004896:	011b      	lsls	r3, r3, #4
 8004898:	1a9b      	subs	r3, r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	440b      	add	r3, r1
 800489e:	334d      	adds	r3, #77	@ 0x4d
 80048a0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80048a2:	2b09      	cmp	r3, #9
 80048a4:	f040 80a6 	bne.w	80049f4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80048a8:	78fa      	ldrb	r2, [r7, #3]
 80048aa:	6879      	ldr	r1, [r7, #4]
 80048ac:	4613      	mov	r3, r2
 80048ae:	011b      	lsls	r3, r3, #4
 80048b0:	1a9b      	subs	r3, r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	440b      	add	r3, r1
 80048b6:	334d      	adds	r3, #77	@ 0x4d
 80048b8:	2202      	movs	r2, #2
 80048ba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80048bc:	78fa      	ldrb	r2, [r7, #3]
 80048be:	6879      	ldr	r1, [r7, #4]
 80048c0:	4613      	mov	r3, r2
 80048c2:	011b      	lsls	r3, r3, #4
 80048c4:	1a9b      	subs	r3, r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	440b      	add	r3, r1
 80048ca:	3344      	adds	r3, #68	@ 0x44
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	1c59      	adds	r1, r3, #1
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	4613      	mov	r3, r2
 80048d4:	011b      	lsls	r3, r3, #4
 80048d6:	1a9b      	subs	r3, r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	4403      	add	r3, r0
 80048dc:	3344      	adds	r3, #68	@ 0x44
 80048de:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80048e0:	78fa      	ldrb	r2, [r7, #3]
 80048e2:	6879      	ldr	r1, [r7, #4]
 80048e4:	4613      	mov	r3, r2
 80048e6:	011b      	lsls	r3, r3, #4
 80048e8:	1a9b      	subs	r3, r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	440b      	add	r3, r1
 80048ee:	3344      	adds	r3, #68	@ 0x44
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d943      	bls.n	800497e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80048f6:	78fa      	ldrb	r2, [r7, #3]
 80048f8:	6879      	ldr	r1, [r7, #4]
 80048fa:	4613      	mov	r3, r2
 80048fc:	011b      	lsls	r3, r3, #4
 80048fe:	1a9b      	subs	r3, r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	440b      	add	r3, r1
 8004904:	3344      	adds	r3, #68	@ 0x44
 8004906:	2200      	movs	r2, #0
 8004908:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800490a:	78fa      	ldrb	r2, [r7, #3]
 800490c:	6879      	ldr	r1, [r7, #4]
 800490e:	4613      	mov	r3, r2
 8004910:	011b      	lsls	r3, r3, #4
 8004912:	1a9b      	subs	r3, r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	440b      	add	r3, r1
 8004918:	331a      	adds	r3, #26
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d123      	bne.n	8004968 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8004920:	78fa      	ldrb	r2, [r7, #3]
 8004922:	6879      	ldr	r1, [r7, #4]
 8004924:	4613      	mov	r3, r2
 8004926:	011b      	lsls	r3, r3, #4
 8004928:	1a9b      	subs	r3, r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	440b      	add	r3, r1
 800492e:	331b      	adds	r3, #27
 8004930:	2200      	movs	r2, #0
 8004932:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8004934:	78fa      	ldrb	r2, [r7, #3]
 8004936:	6879      	ldr	r1, [r7, #4]
 8004938:	4613      	mov	r3, r2
 800493a:	011b      	lsls	r3, r3, #4
 800493c:	1a9b      	subs	r3, r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	440b      	add	r3, r1
 8004942:	331c      	adds	r3, #28
 8004944:	2200      	movs	r2, #0
 8004946:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004948:	78fb      	ldrb	r3, [r7, #3]
 800494a:	015a      	lsls	r2, r3, #5
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	4413      	add	r3, r2
 8004950:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	78fa      	ldrb	r2, [r7, #3]
 8004958:	0151      	lsls	r1, r2, #5
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	440a      	add	r2, r1
 800495e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004962:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004966:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004968:	78fa      	ldrb	r2, [r7, #3]
 800496a:	6879      	ldr	r1, [r7, #4]
 800496c:	4613      	mov	r3, r2
 800496e:	011b      	lsls	r3, r3, #4
 8004970:	1a9b      	subs	r3, r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	440b      	add	r3, r1
 8004976:	334c      	adds	r3, #76	@ 0x4c
 8004978:	2204      	movs	r2, #4
 800497a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800497c:	e229      	b.n	8004dd2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800497e:	78fa      	ldrb	r2, [r7, #3]
 8004980:	6879      	ldr	r1, [r7, #4]
 8004982:	4613      	mov	r3, r2
 8004984:	011b      	lsls	r3, r3, #4
 8004986:	1a9b      	subs	r3, r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	440b      	add	r3, r1
 800498c:	334c      	adds	r3, #76	@ 0x4c
 800498e:	2202      	movs	r2, #2
 8004990:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004992:	78fa      	ldrb	r2, [r7, #3]
 8004994:	6879      	ldr	r1, [r7, #4]
 8004996:	4613      	mov	r3, r2
 8004998:	011b      	lsls	r3, r3, #4
 800499a:	1a9b      	subs	r3, r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	440b      	add	r3, r1
 80049a0:	3326      	adds	r3, #38	@ 0x26
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00b      	beq.n	80049c0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80049a8:	78fa      	ldrb	r2, [r7, #3]
 80049aa:	6879      	ldr	r1, [r7, #4]
 80049ac:	4613      	mov	r3, r2
 80049ae:	011b      	lsls	r3, r3, #4
 80049b0:	1a9b      	subs	r3, r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	440b      	add	r3, r1
 80049b6:	3326      	adds	r3, #38	@ 0x26
 80049b8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	f040 8209 	bne.w	8004dd2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80049c0:	78fb      	ldrb	r3, [r7, #3]
 80049c2:	015a      	lsls	r2, r3, #5
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	4413      	add	r3, r2
 80049c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80049d6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80049de:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80049e0:	78fb      	ldrb	r3, [r7, #3]
 80049e2:	015a      	lsls	r2, r3, #5
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	4413      	add	r3, r2
 80049e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049ec:	461a      	mov	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80049f2:	e1ee      	b.n	8004dd2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80049f4:	78fa      	ldrb	r2, [r7, #3]
 80049f6:	6879      	ldr	r1, [r7, #4]
 80049f8:	4613      	mov	r3, r2
 80049fa:	011b      	lsls	r3, r3, #4
 80049fc:	1a9b      	subs	r3, r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	440b      	add	r3, r1
 8004a02:	334d      	adds	r3, #77	@ 0x4d
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	2b05      	cmp	r3, #5
 8004a08:	f040 80c8 	bne.w	8004b9c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a0c:	78fa      	ldrb	r2, [r7, #3]
 8004a0e:	6879      	ldr	r1, [r7, #4]
 8004a10:	4613      	mov	r3, r2
 8004a12:	011b      	lsls	r3, r3, #4
 8004a14:	1a9b      	subs	r3, r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	440b      	add	r3, r1
 8004a1a:	334d      	adds	r3, #77	@ 0x4d
 8004a1c:	2202      	movs	r2, #2
 8004a1e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004a20:	78fa      	ldrb	r2, [r7, #3]
 8004a22:	6879      	ldr	r1, [r7, #4]
 8004a24:	4613      	mov	r3, r2
 8004a26:	011b      	lsls	r3, r3, #4
 8004a28:	1a9b      	subs	r3, r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	440b      	add	r3, r1
 8004a2e:	331b      	adds	r3, #27
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	f040 81ce 	bne.w	8004dd4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004a38:	78fa      	ldrb	r2, [r7, #3]
 8004a3a:	6879      	ldr	r1, [r7, #4]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	011b      	lsls	r3, r3, #4
 8004a40:	1a9b      	subs	r3, r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	440b      	add	r3, r1
 8004a46:	3326      	adds	r3, #38	@ 0x26
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	2b03      	cmp	r3, #3
 8004a4c:	d16b      	bne.n	8004b26 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8004a4e:	78fa      	ldrb	r2, [r7, #3]
 8004a50:	6879      	ldr	r1, [r7, #4]
 8004a52:	4613      	mov	r3, r2
 8004a54:	011b      	lsls	r3, r3, #4
 8004a56:	1a9b      	subs	r3, r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	440b      	add	r3, r1
 8004a5c:	3348      	adds	r3, #72	@ 0x48
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	1c59      	adds	r1, r3, #1
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	4613      	mov	r3, r2
 8004a66:	011b      	lsls	r3, r3, #4
 8004a68:	1a9b      	subs	r3, r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4403      	add	r3, r0
 8004a6e:	3348      	adds	r3, #72	@ 0x48
 8004a70:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8004a72:	78fa      	ldrb	r2, [r7, #3]
 8004a74:	6879      	ldr	r1, [r7, #4]
 8004a76:	4613      	mov	r3, r2
 8004a78:	011b      	lsls	r3, r3, #4
 8004a7a:	1a9b      	subs	r3, r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	440b      	add	r3, r1
 8004a80:	3348      	adds	r3, #72	@ 0x48
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d943      	bls.n	8004b10 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004a88:	78fa      	ldrb	r2, [r7, #3]
 8004a8a:	6879      	ldr	r1, [r7, #4]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	011b      	lsls	r3, r3, #4
 8004a90:	1a9b      	subs	r3, r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	440b      	add	r3, r1
 8004a96:	3348      	adds	r3, #72	@ 0x48
 8004a98:	2200      	movs	r2, #0
 8004a9a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8004a9c:	78fa      	ldrb	r2, [r7, #3]
 8004a9e:	6879      	ldr	r1, [r7, #4]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	011b      	lsls	r3, r3, #4
 8004aa4:	1a9b      	subs	r3, r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	440b      	add	r3, r1
 8004aaa:	331b      	adds	r3, #27
 8004aac:	2200      	movs	r2, #0
 8004aae:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8004ab0:	78fa      	ldrb	r2, [r7, #3]
 8004ab2:	6879      	ldr	r1, [r7, #4]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	011b      	lsls	r3, r3, #4
 8004ab8:	1a9b      	subs	r3, r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	440b      	add	r3, r1
 8004abe:	3344      	adds	r3, #68	@ 0x44
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d809      	bhi.n	8004ada <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8004ac6:	78fa      	ldrb	r2, [r7, #3]
 8004ac8:	6879      	ldr	r1, [r7, #4]
 8004aca:	4613      	mov	r3, r2
 8004acc:	011b      	lsls	r3, r3, #4
 8004ace:	1a9b      	subs	r3, r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	440b      	add	r3, r1
 8004ad4:	331c      	adds	r3, #28
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004ada:	78fb      	ldrb	r3, [r7, #3]
 8004adc:	015a      	lsls	r2, r3, #5
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	78fa      	ldrb	r2, [r7, #3]
 8004aea:	0151      	lsls	r1, r2, #5
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	440a      	add	r2, r1
 8004af0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004af4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004af8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8004afa:	78fa      	ldrb	r2, [r7, #3]
 8004afc:	6879      	ldr	r1, [r7, #4]
 8004afe:	4613      	mov	r3, r2
 8004b00:	011b      	lsls	r3, r3, #4
 8004b02:	1a9b      	subs	r3, r3, r2
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	440b      	add	r3, r1
 8004b08:	334c      	adds	r3, #76	@ 0x4c
 8004b0a:	2204      	movs	r2, #4
 8004b0c:	701a      	strb	r2, [r3, #0]
 8004b0e:	e014      	b.n	8004b3a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004b10:	78fa      	ldrb	r2, [r7, #3]
 8004b12:	6879      	ldr	r1, [r7, #4]
 8004b14:	4613      	mov	r3, r2
 8004b16:	011b      	lsls	r3, r3, #4
 8004b18:	1a9b      	subs	r3, r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	440b      	add	r3, r1
 8004b1e:	334c      	adds	r3, #76	@ 0x4c
 8004b20:	2202      	movs	r2, #2
 8004b22:	701a      	strb	r2, [r3, #0]
 8004b24:	e009      	b.n	8004b3a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004b26:	78fa      	ldrb	r2, [r7, #3]
 8004b28:	6879      	ldr	r1, [r7, #4]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	011b      	lsls	r3, r3, #4
 8004b2e:	1a9b      	subs	r3, r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	440b      	add	r3, r1
 8004b34:	334c      	adds	r3, #76	@ 0x4c
 8004b36:	2202      	movs	r2, #2
 8004b38:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004b3a:	78fa      	ldrb	r2, [r7, #3]
 8004b3c:	6879      	ldr	r1, [r7, #4]
 8004b3e:	4613      	mov	r3, r2
 8004b40:	011b      	lsls	r3, r3, #4
 8004b42:	1a9b      	subs	r3, r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	440b      	add	r3, r1
 8004b48:	3326      	adds	r3, #38	@ 0x26
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00b      	beq.n	8004b68 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004b50:	78fa      	ldrb	r2, [r7, #3]
 8004b52:	6879      	ldr	r1, [r7, #4]
 8004b54:	4613      	mov	r3, r2
 8004b56:	011b      	lsls	r3, r3, #4
 8004b58:	1a9b      	subs	r3, r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	440b      	add	r3, r1
 8004b5e:	3326      	adds	r3, #38	@ 0x26
 8004b60:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	f040 8136 	bne.w	8004dd4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004b68:	78fb      	ldrb	r3, [r7, #3]
 8004b6a:	015a      	lsls	r2, r3, #5
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	4413      	add	r3, r2
 8004b70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004b7e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004b86:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004b88:	78fb      	ldrb	r3, [r7, #3]
 8004b8a:	015a      	lsls	r2, r3, #5
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	4413      	add	r3, r2
 8004b90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b94:	461a      	mov	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6013      	str	r3, [r2, #0]
 8004b9a:	e11b      	b.n	8004dd4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004b9c:	78fa      	ldrb	r2, [r7, #3]
 8004b9e:	6879      	ldr	r1, [r7, #4]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	011b      	lsls	r3, r3, #4
 8004ba4:	1a9b      	subs	r3, r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	440b      	add	r3, r1
 8004baa:	334d      	adds	r3, #77	@ 0x4d
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	2b03      	cmp	r3, #3
 8004bb0:	f040 8081 	bne.w	8004cb6 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004bb4:	78fa      	ldrb	r2, [r7, #3]
 8004bb6:	6879      	ldr	r1, [r7, #4]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	011b      	lsls	r3, r3, #4
 8004bbc:	1a9b      	subs	r3, r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	440b      	add	r3, r1
 8004bc2:	334d      	adds	r3, #77	@ 0x4d
 8004bc4:	2202      	movs	r2, #2
 8004bc6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004bc8:	78fa      	ldrb	r2, [r7, #3]
 8004bca:	6879      	ldr	r1, [r7, #4]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	011b      	lsls	r3, r3, #4
 8004bd0:	1a9b      	subs	r3, r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	440b      	add	r3, r1
 8004bd6:	331b      	adds	r3, #27
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	f040 80fa 	bne.w	8004dd4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004be0:	78fa      	ldrb	r2, [r7, #3]
 8004be2:	6879      	ldr	r1, [r7, #4]
 8004be4:	4613      	mov	r3, r2
 8004be6:	011b      	lsls	r3, r3, #4
 8004be8:	1a9b      	subs	r3, r3, r2
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	440b      	add	r3, r1
 8004bee:	334c      	adds	r3, #76	@ 0x4c
 8004bf0:	2202      	movs	r2, #2
 8004bf2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004bf4:	78fb      	ldrb	r3, [r7, #3]
 8004bf6:	015a      	lsls	r2, r3, #5
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	78fa      	ldrb	r2, [r7, #3]
 8004c04:	0151      	lsls	r1, r2, #5
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	440a      	add	r2, r1
 8004c0a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004c0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c12:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004c14:	78fb      	ldrb	r3, [r7, #3]
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	78fa      	ldrb	r2, [r7, #3]
 8004c24:	0151      	lsls	r1, r2, #5
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	440a      	add	r2, r1
 8004c2a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004c2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c32:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004c34:	78fb      	ldrb	r3, [r7, #3]
 8004c36:	015a      	lsls	r2, r3, #5
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	78fa      	ldrb	r2, [r7, #3]
 8004c44:	0151      	lsls	r1, r2, #5
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	440a      	add	r2, r1
 8004c4a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004c4e:	f023 0320 	bic.w	r3, r3, #32
 8004c52:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004c54:	78fa      	ldrb	r2, [r7, #3]
 8004c56:	6879      	ldr	r1, [r7, #4]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	011b      	lsls	r3, r3, #4
 8004c5c:	1a9b      	subs	r3, r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	440b      	add	r3, r1
 8004c62:	3326      	adds	r3, #38	@ 0x26
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00b      	beq.n	8004c82 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004c6a:	78fa      	ldrb	r2, [r7, #3]
 8004c6c:	6879      	ldr	r1, [r7, #4]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	011b      	lsls	r3, r3, #4
 8004c72:	1a9b      	subs	r3, r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	440b      	add	r3, r1
 8004c78:	3326      	adds	r3, #38	@ 0x26
 8004c7a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	f040 80a9 	bne.w	8004dd4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004c82:	78fb      	ldrb	r3, [r7, #3]
 8004c84:	015a      	lsls	r2, r3, #5
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	4413      	add	r3, r2
 8004c8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004c98:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004ca0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004ca2:	78fb      	ldrb	r3, [r7, #3]
 8004ca4:	015a      	lsls	r2, r3, #5
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	4413      	add	r3, r2
 8004caa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cae:	461a      	mov	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6013      	str	r3, [r2, #0]
 8004cb4:	e08e      	b.n	8004dd4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004cb6:	78fa      	ldrb	r2, [r7, #3]
 8004cb8:	6879      	ldr	r1, [r7, #4]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	011b      	lsls	r3, r3, #4
 8004cbe:	1a9b      	subs	r3, r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	440b      	add	r3, r1
 8004cc4:	334d      	adds	r3, #77	@ 0x4d
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	2b04      	cmp	r3, #4
 8004cca:	d143      	bne.n	8004d54 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004ccc:	78fa      	ldrb	r2, [r7, #3]
 8004cce:	6879      	ldr	r1, [r7, #4]
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	011b      	lsls	r3, r3, #4
 8004cd4:	1a9b      	subs	r3, r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	440b      	add	r3, r1
 8004cda:	334d      	adds	r3, #77	@ 0x4d
 8004cdc:	2202      	movs	r2, #2
 8004cde:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004ce0:	78fa      	ldrb	r2, [r7, #3]
 8004ce2:	6879      	ldr	r1, [r7, #4]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	011b      	lsls	r3, r3, #4
 8004ce8:	1a9b      	subs	r3, r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	440b      	add	r3, r1
 8004cee:	334c      	adds	r3, #76	@ 0x4c
 8004cf0:	2202      	movs	r2, #2
 8004cf2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004cf4:	78fa      	ldrb	r2, [r7, #3]
 8004cf6:	6879      	ldr	r1, [r7, #4]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	011b      	lsls	r3, r3, #4
 8004cfc:	1a9b      	subs	r3, r3, r2
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	440b      	add	r3, r1
 8004d02:	3326      	adds	r3, #38	@ 0x26
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00a      	beq.n	8004d20 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004d0a:	78fa      	ldrb	r2, [r7, #3]
 8004d0c:	6879      	ldr	r1, [r7, #4]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	011b      	lsls	r3, r3, #4
 8004d12:	1a9b      	subs	r3, r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	440b      	add	r3, r1
 8004d18:	3326      	adds	r3, #38	@ 0x26
 8004d1a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d159      	bne.n	8004dd4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004d20:	78fb      	ldrb	r3, [r7, #3]
 8004d22:	015a      	lsls	r2, r3, #5
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	4413      	add	r3, r2
 8004d28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004d36:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004d3e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004d40:	78fb      	ldrb	r3, [r7, #3]
 8004d42:	015a      	lsls	r2, r3, #5
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	4413      	add	r3, r2
 8004d48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6013      	str	r3, [r2, #0]
 8004d52:	e03f      	b.n	8004dd4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004d54:	78fa      	ldrb	r2, [r7, #3]
 8004d56:	6879      	ldr	r1, [r7, #4]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	011b      	lsls	r3, r3, #4
 8004d5c:	1a9b      	subs	r3, r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	440b      	add	r3, r1
 8004d62:	334d      	adds	r3, #77	@ 0x4d
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	2b08      	cmp	r3, #8
 8004d68:	d126      	bne.n	8004db8 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004d6a:	78fa      	ldrb	r2, [r7, #3]
 8004d6c:	6879      	ldr	r1, [r7, #4]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	011b      	lsls	r3, r3, #4
 8004d72:	1a9b      	subs	r3, r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	440b      	add	r3, r1
 8004d78:	334d      	adds	r3, #77	@ 0x4d
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004d7e:	78fa      	ldrb	r2, [r7, #3]
 8004d80:	6879      	ldr	r1, [r7, #4]
 8004d82:	4613      	mov	r3, r2
 8004d84:	011b      	lsls	r3, r3, #4
 8004d86:	1a9b      	subs	r3, r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	440b      	add	r3, r1
 8004d8c:	3344      	adds	r3, #68	@ 0x44
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	1c59      	adds	r1, r3, #1
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	4613      	mov	r3, r2
 8004d96:	011b      	lsls	r3, r3, #4
 8004d98:	1a9b      	subs	r3, r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4403      	add	r3, r0
 8004d9e:	3344      	adds	r3, #68	@ 0x44
 8004da0:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004da2:	78fa      	ldrb	r2, [r7, #3]
 8004da4:	6879      	ldr	r1, [r7, #4]
 8004da6:	4613      	mov	r3, r2
 8004da8:	011b      	lsls	r3, r3, #4
 8004daa:	1a9b      	subs	r3, r3, r2
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	440b      	add	r3, r1
 8004db0:	334c      	adds	r3, #76	@ 0x4c
 8004db2:	2204      	movs	r2, #4
 8004db4:	701a      	strb	r2, [r3, #0]
 8004db6:	e00d      	b.n	8004dd4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004db8:	78fa      	ldrb	r2, [r7, #3]
 8004dba:	6879      	ldr	r1, [r7, #4]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	011b      	lsls	r3, r3, #4
 8004dc0:	1a9b      	subs	r3, r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	440b      	add	r3, r1
 8004dc6:	334d      	adds	r3, #77	@ 0x4d
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	f000 8100 	beq.w	8004fd0 <HCD_HC_IN_IRQHandler+0xcca>
 8004dd0:	e000      	b.n	8004dd4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004dd2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004dd4:	78fa      	ldrb	r2, [r7, #3]
 8004dd6:	6879      	ldr	r1, [r7, #4]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	011b      	lsls	r3, r3, #4
 8004ddc:	1a9b      	subs	r3, r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	440b      	add	r3, r1
 8004de2:	334c      	adds	r3, #76	@ 0x4c
 8004de4:	781a      	ldrb	r2, [r3, #0]
 8004de6:	78fb      	ldrb	r3, [r7, #3]
 8004de8:	4619      	mov	r1, r3
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f007 fa3a 	bl	800c264 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004df0:	e0ef      	b.n	8004fd2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	78fa      	ldrb	r2, [r7, #3]
 8004df8:	4611      	mov	r1, r2
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f004 f935 	bl	800906a <USB_ReadChInterrupts>
 8004e00:	4603      	mov	r3, r0
 8004e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e06:	2b40      	cmp	r3, #64	@ 0x40
 8004e08:	d12f      	bne.n	8004e6a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004e0a:	78fb      	ldrb	r3, [r7, #3]
 8004e0c:	015a      	lsls	r2, r3, #5
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	4413      	add	r3, r2
 8004e12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e16:	461a      	mov	r2, r3
 8004e18:	2340      	movs	r3, #64	@ 0x40
 8004e1a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004e1c:	78fa      	ldrb	r2, [r7, #3]
 8004e1e:	6879      	ldr	r1, [r7, #4]
 8004e20:	4613      	mov	r3, r2
 8004e22:	011b      	lsls	r3, r3, #4
 8004e24:	1a9b      	subs	r3, r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	440b      	add	r3, r1
 8004e2a:	334d      	adds	r3, #77	@ 0x4d
 8004e2c:	2205      	movs	r2, #5
 8004e2e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004e30:	78fa      	ldrb	r2, [r7, #3]
 8004e32:	6879      	ldr	r1, [r7, #4]
 8004e34:	4613      	mov	r3, r2
 8004e36:	011b      	lsls	r3, r3, #4
 8004e38:	1a9b      	subs	r3, r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	440b      	add	r3, r1
 8004e3e:	331a      	adds	r3, #26
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d109      	bne.n	8004e5a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004e46:	78fa      	ldrb	r2, [r7, #3]
 8004e48:	6879      	ldr	r1, [r7, #4]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	011b      	lsls	r3, r3, #4
 8004e4e:	1a9b      	subs	r3, r3, r2
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	440b      	add	r3, r1
 8004e54:	3344      	adds	r3, #68	@ 0x44
 8004e56:	2200      	movs	r2, #0
 8004e58:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	78fa      	ldrb	r2, [r7, #3]
 8004e60:	4611      	mov	r1, r2
 8004e62:	4618      	mov	r0, r3
 8004e64:	f004 fea5 	bl	8009bb2 <USB_HC_Halt>
 8004e68:	e0b3      	b.n	8004fd2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	78fa      	ldrb	r2, [r7, #3]
 8004e70:	4611      	mov	r1, r2
 8004e72:	4618      	mov	r0, r3
 8004e74:	f004 f8f9 	bl	800906a <USB_ReadChInterrupts>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	f003 0310 	and.w	r3, r3, #16
 8004e7e:	2b10      	cmp	r3, #16
 8004e80:	f040 80a7 	bne.w	8004fd2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004e84:	78fa      	ldrb	r2, [r7, #3]
 8004e86:	6879      	ldr	r1, [r7, #4]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	011b      	lsls	r3, r3, #4
 8004e8c:	1a9b      	subs	r3, r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	440b      	add	r3, r1
 8004e92:	3326      	adds	r3, #38	@ 0x26
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	2b03      	cmp	r3, #3
 8004e98:	d11b      	bne.n	8004ed2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004e9a:	78fa      	ldrb	r2, [r7, #3]
 8004e9c:	6879      	ldr	r1, [r7, #4]
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	011b      	lsls	r3, r3, #4
 8004ea2:	1a9b      	subs	r3, r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	440b      	add	r3, r1
 8004ea8:	3344      	adds	r3, #68	@ 0x44
 8004eaa:	2200      	movs	r2, #0
 8004eac:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004eae:	78fa      	ldrb	r2, [r7, #3]
 8004eb0:	6879      	ldr	r1, [r7, #4]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	011b      	lsls	r3, r3, #4
 8004eb6:	1a9b      	subs	r3, r3, r2
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	440b      	add	r3, r1
 8004ebc:	334d      	adds	r3, #77	@ 0x4d
 8004ebe:	2204      	movs	r2, #4
 8004ec0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	78fa      	ldrb	r2, [r7, #3]
 8004ec8:	4611      	mov	r1, r2
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f004 fe71 	bl	8009bb2 <USB_HC_Halt>
 8004ed0:	e03f      	b.n	8004f52 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004ed2:	78fa      	ldrb	r2, [r7, #3]
 8004ed4:	6879      	ldr	r1, [r7, #4]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	011b      	lsls	r3, r3, #4
 8004eda:	1a9b      	subs	r3, r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	440b      	add	r3, r1
 8004ee0:	3326      	adds	r3, #38	@ 0x26
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00a      	beq.n	8004efe <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004ee8:	78fa      	ldrb	r2, [r7, #3]
 8004eea:	6879      	ldr	r1, [r7, #4]
 8004eec:	4613      	mov	r3, r2
 8004eee:	011b      	lsls	r3, r3, #4
 8004ef0:	1a9b      	subs	r3, r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	440b      	add	r3, r1
 8004ef6:	3326      	adds	r3, #38	@ 0x26
 8004ef8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d129      	bne.n	8004f52 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004efe:	78fa      	ldrb	r2, [r7, #3]
 8004f00:	6879      	ldr	r1, [r7, #4]
 8004f02:	4613      	mov	r3, r2
 8004f04:	011b      	lsls	r3, r3, #4
 8004f06:	1a9b      	subs	r3, r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	440b      	add	r3, r1
 8004f0c:	3344      	adds	r3, #68	@ 0x44
 8004f0e:	2200      	movs	r2, #0
 8004f10:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	799b      	ldrb	r3, [r3, #6]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00a      	beq.n	8004f30 <HCD_HC_IN_IRQHandler+0xc2a>
 8004f1a:	78fa      	ldrb	r2, [r7, #3]
 8004f1c:	6879      	ldr	r1, [r7, #4]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	011b      	lsls	r3, r3, #4
 8004f22:	1a9b      	subs	r3, r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	440b      	add	r3, r1
 8004f28:	331b      	adds	r3, #27
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d110      	bne.n	8004f52 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004f30:	78fa      	ldrb	r2, [r7, #3]
 8004f32:	6879      	ldr	r1, [r7, #4]
 8004f34:	4613      	mov	r3, r2
 8004f36:	011b      	lsls	r3, r3, #4
 8004f38:	1a9b      	subs	r3, r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	440b      	add	r3, r1
 8004f3e:	334d      	adds	r3, #77	@ 0x4d
 8004f40:	2204      	movs	r2, #4
 8004f42:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	78fa      	ldrb	r2, [r7, #3]
 8004f4a:	4611      	mov	r1, r2
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f004 fe30 	bl	8009bb2 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004f52:	78fa      	ldrb	r2, [r7, #3]
 8004f54:	6879      	ldr	r1, [r7, #4]
 8004f56:	4613      	mov	r3, r2
 8004f58:	011b      	lsls	r3, r3, #4
 8004f5a:	1a9b      	subs	r3, r3, r2
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	440b      	add	r3, r1
 8004f60:	331b      	adds	r3, #27
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d129      	bne.n	8004fbc <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004f68:	78fa      	ldrb	r2, [r7, #3]
 8004f6a:	6879      	ldr	r1, [r7, #4]
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	011b      	lsls	r3, r3, #4
 8004f70:	1a9b      	subs	r3, r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	440b      	add	r3, r1
 8004f76:	331b      	adds	r3, #27
 8004f78:	2200      	movs	r2, #0
 8004f7a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004f7c:	78fb      	ldrb	r3, [r7, #3]
 8004f7e:	015a      	lsls	r2, r3, #5
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	4413      	add	r3, r2
 8004f84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	78fa      	ldrb	r2, [r7, #3]
 8004f8c:	0151      	lsls	r1, r2, #5
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	440a      	add	r2, r1
 8004f92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004f96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f9a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004f9c:	78fb      	ldrb	r3, [r7, #3]
 8004f9e:	015a      	lsls	r2, r3, #5
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	78fa      	ldrb	r2, [r7, #3]
 8004fac:	0151      	lsls	r1, r2, #5
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	440a      	add	r2, r1
 8004fb2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004fb6:	f043 0320 	orr.w	r3, r3, #32
 8004fba:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004fbc:	78fb      	ldrb	r3, [r7, #3]
 8004fbe:	015a      	lsls	r2, r3, #5
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fc8:	461a      	mov	r2, r3
 8004fca:	2310      	movs	r3, #16
 8004fcc:	6093      	str	r3, [r2, #8]
 8004fce:	e000      	b.n	8004fd2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004fd0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004fd2:	3718      	adds	r7, #24
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b086      	sub	sp, #24
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	78fa      	ldrb	r2, [r7, #3]
 8004ff4:	4611      	mov	r1, r2
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f004 f837 	bl	800906a <USB_ReadChInterrupts>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	f003 0304 	and.w	r3, r3, #4
 8005002:	2b04      	cmp	r3, #4
 8005004:	d11b      	bne.n	800503e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8005006:	78fb      	ldrb	r3, [r7, #3]
 8005008:	015a      	lsls	r2, r3, #5
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	4413      	add	r3, r2
 800500e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005012:	461a      	mov	r2, r3
 8005014:	2304      	movs	r3, #4
 8005016:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005018:	78fa      	ldrb	r2, [r7, #3]
 800501a:	6879      	ldr	r1, [r7, #4]
 800501c:	4613      	mov	r3, r2
 800501e:	011b      	lsls	r3, r3, #4
 8005020:	1a9b      	subs	r3, r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	440b      	add	r3, r1
 8005026:	334d      	adds	r3, #77	@ 0x4d
 8005028:	2207      	movs	r2, #7
 800502a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	78fa      	ldrb	r2, [r7, #3]
 8005032:	4611      	mov	r1, r2
 8005034:	4618      	mov	r0, r3
 8005036:	f004 fdbc 	bl	8009bb2 <USB_HC_Halt>
 800503a:	f000 bc89 	b.w	8005950 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	78fa      	ldrb	r2, [r7, #3]
 8005044:	4611      	mov	r1, r2
 8005046:	4618      	mov	r0, r3
 8005048:	f004 f80f 	bl	800906a <USB_ReadChInterrupts>
 800504c:	4603      	mov	r3, r0
 800504e:	f003 0320 	and.w	r3, r3, #32
 8005052:	2b20      	cmp	r3, #32
 8005054:	f040 8082 	bne.w	800515c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005058:	78fb      	ldrb	r3, [r7, #3]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	4413      	add	r3, r2
 8005060:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005064:	461a      	mov	r2, r3
 8005066:	2320      	movs	r3, #32
 8005068:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800506a:	78fa      	ldrb	r2, [r7, #3]
 800506c:	6879      	ldr	r1, [r7, #4]
 800506e:	4613      	mov	r3, r2
 8005070:	011b      	lsls	r3, r3, #4
 8005072:	1a9b      	subs	r3, r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	440b      	add	r3, r1
 8005078:	3319      	adds	r3, #25
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d124      	bne.n	80050ca <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8005080:	78fa      	ldrb	r2, [r7, #3]
 8005082:	6879      	ldr	r1, [r7, #4]
 8005084:	4613      	mov	r3, r2
 8005086:	011b      	lsls	r3, r3, #4
 8005088:	1a9b      	subs	r3, r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	440b      	add	r3, r1
 800508e:	3319      	adds	r3, #25
 8005090:	2200      	movs	r2, #0
 8005092:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005094:	78fa      	ldrb	r2, [r7, #3]
 8005096:	6879      	ldr	r1, [r7, #4]
 8005098:	4613      	mov	r3, r2
 800509a:	011b      	lsls	r3, r3, #4
 800509c:	1a9b      	subs	r3, r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	440b      	add	r3, r1
 80050a2:	334c      	adds	r3, #76	@ 0x4c
 80050a4:	2202      	movs	r2, #2
 80050a6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80050a8:	78fa      	ldrb	r2, [r7, #3]
 80050aa:	6879      	ldr	r1, [r7, #4]
 80050ac:	4613      	mov	r3, r2
 80050ae:	011b      	lsls	r3, r3, #4
 80050b0:	1a9b      	subs	r3, r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	440b      	add	r3, r1
 80050b6:	334d      	adds	r3, #77	@ 0x4d
 80050b8:	2203      	movs	r2, #3
 80050ba:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	78fa      	ldrb	r2, [r7, #3]
 80050c2:	4611      	mov	r1, r2
 80050c4:	4618      	mov	r0, r3
 80050c6:	f004 fd74 	bl	8009bb2 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80050ca:	78fa      	ldrb	r2, [r7, #3]
 80050cc:	6879      	ldr	r1, [r7, #4]
 80050ce:	4613      	mov	r3, r2
 80050d0:	011b      	lsls	r3, r3, #4
 80050d2:	1a9b      	subs	r3, r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	440b      	add	r3, r1
 80050d8:	331a      	adds	r3, #26
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	f040 8437 	bne.w	8005950 <HCD_HC_OUT_IRQHandler+0x978>
 80050e2:	78fa      	ldrb	r2, [r7, #3]
 80050e4:	6879      	ldr	r1, [r7, #4]
 80050e6:	4613      	mov	r3, r2
 80050e8:	011b      	lsls	r3, r3, #4
 80050ea:	1a9b      	subs	r3, r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	440b      	add	r3, r1
 80050f0:	331b      	adds	r3, #27
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f040 842b 	bne.w	8005950 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80050fa:	78fa      	ldrb	r2, [r7, #3]
 80050fc:	6879      	ldr	r1, [r7, #4]
 80050fe:	4613      	mov	r3, r2
 8005100:	011b      	lsls	r3, r3, #4
 8005102:	1a9b      	subs	r3, r3, r2
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	440b      	add	r3, r1
 8005108:	3326      	adds	r3, #38	@ 0x26
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d009      	beq.n	8005124 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8005110:	78fa      	ldrb	r2, [r7, #3]
 8005112:	6879      	ldr	r1, [r7, #4]
 8005114:	4613      	mov	r3, r2
 8005116:	011b      	lsls	r3, r3, #4
 8005118:	1a9b      	subs	r3, r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	440b      	add	r3, r1
 800511e:	331b      	adds	r3, #27
 8005120:	2201      	movs	r2, #1
 8005122:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8005124:	78fa      	ldrb	r2, [r7, #3]
 8005126:	6879      	ldr	r1, [r7, #4]
 8005128:	4613      	mov	r3, r2
 800512a:	011b      	lsls	r3, r3, #4
 800512c:	1a9b      	subs	r3, r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	440b      	add	r3, r1
 8005132:	334d      	adds	r3, #77	@ 0x4d
 8005134:	2203      	movs	r2, #3
 8005136:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	78fa      	ldrb	r2, [r7, #3]
 800513e:	4611      	mov	r1, r2
 8005140:	4618      	mov	r0, r3
 8005142:	f004 fd36 	bl	8009bb2 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8005146:	78fa      	ldrb	r2, [r7, #3]
 8005148:	6879      	ldr	r1, [r7, #4]
 800514a:	4613      	mov	r3, r2
 800514c:	011b      	lsls	r3, r3, #4
 800514e:	1a9b      	subs	r3, r3, r2
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	440b      	add	r3, r1
 8005154:	3344      	adds	r3, #68	@ 0x44
 8005156:	2200      	movs	r2, #0
 8005158:	601a      	str	r2, [r3, #0]
 800515a:	e3f9      	b.n	8005950 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	78fa      	ldrb	r2, [r7, #3]
 8005162:	4611      	mov	r1, r2
 8005164:	4618      	mov	r0, r3
 8005166:	f003 ff80 	bl	800906a <USB_ReadChInterrupts>
 800516a:	4603      	mov	r3, r0
 800516c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005170:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005174:	d111      	bne.n	800519a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8005176:	78fb      	ldrb	r3, [r7, #3]
 8005178:	015a      	lsls	r2, r3, #5
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	4413      	add	r3, r2
 800517e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005182:	461a      	mov	r2, r3
 8005184:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005188:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	78fa      	ldrb	r2, [r7, #3]
 8005190:	4611      	mov	r1, r2
 8005192:	4618      	mov	r0, r3
 8005194:	f004 fd0d 	bl	8009bb2 <USB_HC_Halt>
 8005198:	e3da      	b.n	8005950 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	78fa      	ldrb	r2, [r7, #3]
 80051a0:	4611      	mov	r1, r2
 80051a2:	4618      	mov	r0, r3
 80051a4:	f003 ff61 	bl	800906a <USB_ReadChInterrupts>
 80051a8:	4603      	mov	r3, r0
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d168      	bne.n	8005284 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80051b2:	78fa      	ldrb	r2, [r7, #3]
 80051b4:	6879      	ldr	r1, [r7, #4]
 80051b6:	4613      	mov	r3, r2
 80051b8:	011b      	lsls	r3, r3, #4
 80051ba:	1a9b      	subs	r3, r3, r2
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	440b      	add	r3, r1
 80051c0:	3344      	adds	r3, #68	@ 0x44
 80051c2:	2200      	movs	r2, #0
 80051c4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	78fa      	ldrb	r2, [r7, #3]
 80051cc:	4611      	mov	r1, r2
 80051ce:	4618      	mov	r0, r3
 80051d0:	f003 ff4b 	bl	800906a <USB_ReadChInterrupts>
 80051d4:	4603      	mov	r3, r0
 80051d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051da:	2b40      	cmp	r3, #64	@ 0x40
 80051dc:	d112      	bne.n	8005204 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80051de:	78fa      	ldrb	r2, [r7, #3]
 80051e0:	6879      	ldr	r1, [r7, #4]
 80051e2:	4613      	mov	r3, r2
 80051e4:	011b      	lsls	r3, r3, #4
 80051e6:	1a9b      	subs	r3, r3, r2
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	440b      	add	r3, r1
 80051ec:	3319      	adds	r3, #25
 80051ee:	2201      	movs	r2, #1
 80051f0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80051f2:	78fb      	ldrb	r3, [r7, #3]
 80051f4:	015a      	lsls	r2, r3, #5
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	4413      	add	r3, r2
 80051fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051fe:	461a      	mov	r2, r3
 8005200:	2340      	movs	r3, #64	@ 0x40
 8005202:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8005204:	78fa      	ldrb	r2, [r7, #3]
 8005206:	6879      	ldr	r1, [r7, #4]
 8005208:	4613      	mov	r3, r2
 800520a:	011b      	lsls	r3, r3, #4
 800520c:	1a9b      	subs	r3, r3, r2
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	440b      	add	r3, r1
 8005212:	331b      	adds	r3, #27
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d019      	beq.n	800524e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800521a:	78fa      	ldrb	r2, [r7, #3]
 800521c:	6879      	ldr	r1, [r7, #4]
 800521e:	4613      	mov	r3, r2
 8005220:	011b      	lsls	r3, r3, #4
 8005222:	1a9b      	subs	r3, r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	440b      	add	r3, r1
 8005228:	331b      	adds	r3, #27
 800522a:	2200      	movs	r2, #0
 800522c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800522e:	78fb      	ldrb	r3, [r7, #3]
 8005230:	015a      	lsls	r2, r3, #5
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	4413      	add	r3, r2
 8005236:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	78fa      	ldrb	r2, [r7, #3]
 800523e:	0151      	lsls	r1, r2, #5
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	440a      	add	r2, r1
 8005244:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005248:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800524c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800524e:	78fb      	ldrb	r3, [r7, #3]
 8005250:	015a      	lsls	r2, r3, #5
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	4413      	add	r3, r2
 8005256:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800525a:	461a      	mov	r2, r3
 800525c:	2301      	movs	r3, #1
 800525e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8005260:	78fa      	ldrb	r2, [r7, #3]
 8005262:	6879      	ldr	r1, [r7, #4]
 8005264:	4613      	mov	r3, r2
 8005266:	011b      	lsls	r3, r3, #4
 8005268:	1a9b      	subs	r3, r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	440b      	add	r3, r1
 800526e:	334d      	adds	r3, #77	@ 0x4d
 8005270:	2201      	movs	r2, #1
 8005272:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	78fa      	ldrb	r2, [r7, #3]
 800527a:	4611      	mov	r1, r2
 800527c:	4618      	mov	r0, r3
 800527e:	f004 fc98 	bl	8009bb2 <USB_HC_Halt>
 8005282:	e365      	b.n	8005950 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	78fa      	ldrb	r2, [r7, #3]
 800528a:	4611      	mov	r1, r2
 800528c:	4618      	mov	r0, r3
 800528e:	f003 feec 	bl	800906a <USB_ReadChInterrupts>
 8005292:	4603      	mov	r3, r0
 8005294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005298:	2b40      	cmp	r3, #64	@ 0x40
 800529a:	d139      	bne.n	8005310 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800529c:	78fa      	ldrb	r2, [r7, #3]
 800529e:	6879      	ldr	r1, [r7, #4]
 80052a0:	4613      	mov	r3, r2
 80052a2:	011b      	lsls	r3, r3, #4
 80052a4:	1a9b      	subs	r3, r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	440b      	add	r3, r1
 80052aa:	334d      	adds	r3, #77	@ 0x4d
 80052ac:	2205      	movs	r2, #5
 80052ae:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80052b0:	78fa      	ldrb	r2, [r7, #3]
 80052b2:	6879      	ldr	r1, [r7, #4]
 80052b4:	4613      	mov	r3, r2
 80052b6:	011b      	lsls	r3, r3, #4
 80052b8:	1a9b      	subs	r3, r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	440b      	add	r3, r1
 80052be:	331a      	adds	r3, #26
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d109      	bne.n	80052da <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80052c6:	78fa      	ldrb	r2, [r7, #3]
 80052c8:	6879      	ldr	r1, [r7, #4]
 80052ca:	4613      	mov	r3, r2
 80052cc:	011b      	lsls	r3, r3, #4
 80052ce:	1a9b      	subs	r3, r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	440b      	add	r3, r1
 80052d4:	3319      	adds	r3, #25
 80052d6:	2201      	movs	r2, #1
 80052d8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80052da:	78fa      	ldrb	r2, [r7, #3]
 80052dc:	6879      	ldr	r1, [r7, #4]
 80052de:	4613      	mov	r3, r2
 80052e0:	011b      	lsls	r3, r3, #4
 80052e2:	1a9b      	subs	r3, r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	440b      	add	r3, r1
 80052e8:	3344      	adds	r3, #68	@ 0x44
 80052ea:	2200      	movs	r2, #0
 80052ec:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	78fa      	ldrb	r2, [r7, #3]
 80052f4:	4611      	mov	r1, r2
 80052f6:	4618      	mov	r0, r3
 80052f8:	f004 fc5b 	bl	8009bb2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80052fc:	78fb      	ldrb	r3, [r7, #3]
 80052fe:	015a      	lsls	r2, r3, #5
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	4413      	add	r3, r2
 8005304:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005308:	461a      	mov	r2, r3
 800530a:	2340      	movs	r3, #64	@ 0x40
 800530c:	6093      	str	r3, [r2, #8]
 800530e:	e31f      	b.n	8005950 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	78fa      	ldrb	r2, [r7, #3]
 8005316:	4611      	mov	r1, r2
 8005318:	4618      	mov	r0, r3
 800531a:	f003 fea6 	bl	800906a <USB_ReadChInterrupts>
 800531e:	4603      	mov	r3, r0
 8005320:	f003 0308 	and.w	r3, r3, #8
 8005324:	2b08      	cmp	r3, #8
 8005326:	d11a      	bne.n	800535e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005328:	78fb      	ldrb	r3, [r7, #3]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	4413      	add	r3, r2
 8005330:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005334:	461a      	mov	r2, r3
 8005336:	2308      	movs	r3, #8
 8005338:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800533a:	78fa      	ldrb	r2, [r7, #3]
 800533c:	6879      	ldr	r1, [r7, #4]
 800533e:	4613      	mov	r3, r2
 8005340:	011b      	lsls	r3, r3, #4
 8005342:	1a9b      	subs	r3, r3, r2
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	440b      	add	r3, r1
 8005348:	334d      	adds	r3, #77	@ 0x4d
 800534a:	2206      	movs	r2, #6
 800534c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	78fa      	ldrb	r2, [r7, #3]
 8005354:	4611      	mov	r1, r2
 8005356:	4618      	mov	r0, r3
 8005358:	f004 fc2b 	bl	8009bb2 <USB_HC_Halt>
 800535c:	e2f8      	b.n	8005950 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	78fa      	ldrb	r2, [r7, #3]
 8005364:	4611      	mov	r1, r2
 8005366:	4618      	mov	r0, r3
 8005368:	f003 fe7f 	bl	800906a <USB_ReadChInterrupts>
 800536c:	4603      	mov	r3, r0
 800536e:	f003 0310 	and.w	r3, r3, #16
 8005372:	2b10      	cmp	r3, #16
 8005374:	d144      	bne.n	8005400 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005376:	78fa      	ldrb	r2, [r7, #3]
 8005378:	6879      	ldr	r1, [r7, #4]
 800537a:	4613      	mov	r3, r2
 800537c:	011b      	lsls	r3, r3, #4
 800537e:	1a9b      	subs	r3, r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	440b      	add	r3, r1
 8005384:	3344      	adds	r3, #68	@ 0x44
 8005386:	2200      	movs	r2, #0
 8005388:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800538a:	78fa      	ldrb	r2, [r7, #3]
 800538c:	6879      	ldr	r1, [r7, #4]
 800538e:	4613      	mov	r3, r2
 8005390:	011b      	lsls	r3, r3, #4
 8005392:	1a9b      	subs	r3, r3, r2
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	440b      	add	r3, r1
 8005398:	334d      	adds	r3, #77	@ 0x4d
 800539a:	2204      	movs	r2, #4
 800539c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800539e:	78fa      	ldrb	r2, [r7, #3]
 80053a0:	6879      	ldr	r1, [r7, #4]
 80053a2:	4613      	mov	r3, r2
 80053a4:	011b      	lsls	r3, r3, #4
 80053a6:	1a9b      	subs	r3, r3, r2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	440b      	add	r3, r1
 80053ac:	3319      	adds	r3, #25
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d114      	bne.n	80053de <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80053b4:	78fa      	ldrb	r2, [r7, #3]
 80053b6:	6879      	ldr	r1, [r7, #4]
 80053b8:	4613      	mov	r3, r2
 80053ba:	011b      	lsls	r3, r3, #4
 80053bc:	1a9b      	subs	r3, r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	440b      	add	r3, r1
 80053c2:	3318      	adds	r3, #24
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d109      	bne.n	80053de <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80053ca:	78fa      	ldrb	r2, [r7, #3]
 80053cc:	6879      	ldr	r1, [r7, #4]
 80053ce:	4613      	mov	r3, r2
 80053d0:	011b      	lsls	r3, r3, #4
 80053d2:	1a9b      	subs	r3, r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	440b      	add	r3, r1
 80053d8:	3319      	adds	r3, #25
 80053da:	2201      	movs	r2, #1
 80053dc:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	78fa      	ldrb	r2, [r7, #3]
 80053e4:	4611      	mov	r1, r2
 80053e6:	4618      	mov	r0, r3
 80053e8:	f004 fbe3 	bl	8009bb2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80053ec:	78fb      	ldrb	r3, [r7, #3]
 80053ee:	015a      	lsls	r2, r3, #5
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	4413      	add	r3, r2
 80053f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053f8:	461a      	mov	r2, r3
 80053fa:	2310      	movs	r3, #16
 80053fc:	6093      	str	r3, [r2, #8]
 80053fe:	e2a7      	b.n	8005950 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	78fa      	ldrb	r2, [r7, #3]
 8005406:	4611      	mov	r1, r2
 8005408:	4618      	mov	r0, r3
 800540a:	f003 fe2e 	bl	800906a <USB_ReadChInterrupts>
 800540e:	4603      	mov	r3, r0
 8005410:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005414:	2b80      	cmp	r3, #128	@ 0x80
 8005416:	f040 8083 	bne.w	8005520 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	799b      	ldrb	r3, [r3, #6]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d111      	bne.n	8005446 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8005422:	78fa      	ldrb	r2, [r7, #3]
 8005424:	6879      	ldr	r1, [r7, #4]
 8005426:	4613      	mov	r3, r2
 8005428:	011b      	lsls	r3, r3, #4
 800542a:	1a9b      	subs	r3, r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	440b      	add	r3, r1
 8005430:	334d      	adds	r3, #77	@ 0x4d
 8005432:	2207      	movs	r2, #7
 8005434:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	78fa      	ldrb	r2, [r7, #3]
 800543c:	4611      	mov	r1, r2
 800543e:	4618      	mov	r0, r3
 8005440:	f004 fbb7 	bl	8009bb2 <USB_HC_Halt>
 8005444:	e062      	b.n	800550c <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8005446:	78fa      	ldrb	r2, [r7, #3]
 8005448:	6879      	ldr	r1, [r7, #4]
 800544a:	4613      	mov	r3, r2
 800544c:	011b      	lsls	r3, r3, #4
 800544e:	1a9b      	subs	r3, r3, r2
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	440b      	add	r3, r1
 8005454:	3344      	adds	r3, #68	@ 0x44
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	1c59      	adds	r1, r3, #1
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	4613      	mov	r3, r2
 800545e:	011b      	lsls	r3, r3, #4
 8005460:	1a9b      	subs	r3, r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	4403      	add	r3, r0
 8005466:	3344      	adds	r3, #68	@ 0x44
 8005468:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800546a:	78fa      	ldrb	r2, [r7, #3]
 800546c:	6879      	ldr	r1, [r7, #4]
 800546e:	4613      	mov	r3, r2
 8005470:	011b      	lsls	r3, r3, #4
 8005472:	1a9b      	subs	r3, r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	440b      	add	r3, r1
 8005478:	3344      	adds	r3, #68	@ 0x44
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2b02      	cmp	r3, #2
 800547e:	d922      	bls.n	80054c6 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005480:	78fa      	ldrb	r2, [r7, #3]
 8005482:	6879      	ldr	r1, [r7, #4]
 8005484:	4613      	mov	r3, r2
 8005486:	011b      	lsls	r3, r3, #4
 8005488:	1a9b      	subs	r3, r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	440b      	add	r3, r1
 800548e:	3344      	adds	r3, #68	@ 0x44
 8005490:	2200      	movs	r2, #0
 8005492:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005494:	78fa      	ldrb	r2, [r7, #3]
 8005496:	6879      	ldr	r1, [r7, #4]
 8005498:	4613      	mov	r3, r2
 800549a:	011b      	lsls	r3, r3, #4
 800549c:	1a9b      	subs	r3, r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	440b      	add	r3, r1
 80054a2:	334c      	adds	r3, #76	@ 0x4c
 80054a4:	2204      	movs	r2, #4
 80054a6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80054a8:	78fa      	ldrb	r2, [r7, #3]
 80054aa:	6879      	ldr	r1, [r7, #4]
 80054ac:	4613      	mov	r3, r2
 80054ae:	011b      	lsls	r3, r3, #4
 80054b0:	1a9b      	subs	r3, r3, r2
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	440b      	add	r3, r1
 80054b6:	334c      	adds	r3, #76	@ 0x4c
 80054b8:	781a      	ldrb	r2, [r3, #0]
 80054ba:	78fb      	ldrb	r3, [r7, #3]
 80054bc:	4619      	mov	r1, r3
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f006 fed0 	bl	800c264 <HAL_HCD_HC_NotifyURBChange_Callback>
 80054c4:	e022      	b.n	800550c <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80054c6:	78fa      	ldrb	r2, [r7, #3]
 80054c8:	6879      	ldr	r1, [r7, #4]
 80054ca:	4613      	mov	r3, r2
 80054cc:	011b      	lsls	r3, r3, #4
 80054ce:	1a9b      	subs	r3, r3, r2
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	440b      	add	r3, r1
 80054d4:	334c      	adds	r3, #76	@ 0x4c
 80054d6:	2202      	movs	r2, #2
 80054d8:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80054da:	78fb      	ldrb	r3, [r7, #3]
 80054dc:	015a      	lsls	r2, r3, #5
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	4413      	add	r3, r2
 80054e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80054f0:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80054f8:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80054fa:	78fb      	ldrb	r3, [r7, #3]
 80054fc:	015a      	lsls	r2, r3, #5
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	4413      	add	r3, r2
 8005502:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005506:	461a      	mov	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800550c:	78fb      	ldrb	r3, [r7, #3]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	4413      	add	r3, r2
 8005514:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005518:	461a      	mov	r2, r3
 800551a:	2380      	movs	r3, #128	@ 0x80
 800551c:	6093      	str	r3, [r2, #8]
 800551e:	e217      	b.n	8005950 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	78fa      	ldrb	r2, [r7, #3]
 8005526:	4611      	mov	r1, r2
 8005528:	4618      	mov	r0, r3
 800552a:	f003 fd9e 	bl	800906a <USB_ReadChInterrupts>
 800552e:	4603      	mov	r3, r0
 8005530:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005534:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005538:	d11b      	bne.n	8005572 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800553a:	78fa      	ldrb	r2, [r7, #3]
 800553c:	6879      	ldr	r1, [r7, #4]
 800553e:	4613      	mov	r3, r2
 8005540:	011b      	lsls	r3, r3, #4
 8005542:	1a9b      	subs	r3, r3, r2
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	440b      	add	r3, r1
 8005548:	334d      	adds	r3, #77	@ 0x4d
 800554a:	2209      	movs	r2, #9
 800554c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	78fa      	ldrb	r2, [r7, #3]
 8005554:	4611      	mov	r1, r2
 8005556:	4618      	mov	r0, r3
 8005558:	f004 fb2b 	bl	8009bb2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800555c:	78fb      	ldrb	r3, [r7, #3]
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	4413      	add	r3, r2
 8005564:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005568:	461a      	mov	r2, r3
 800556a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800556e:	6093      	str	r3, [r2, #8]
 8005570:	e1ee      	b.n	8005950 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	78fa      	ldrb	r2, [r7, #3]
 8005578:	4611      	mov	r1, r2
 800557a:	4618      	mov	r0, r3
 800557c:	f003 fd75 	bl	800906a <USB_ReadChInterrupts>
 8005580:	4603      	mov	r3, r0
 8005582:	f003 0302 	and.w	r3, r3, #2
 8005586:	2b02      	cmp	r3, #2
 8005588:	f040 81df 	bne.w	800594a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800558c:	78fb      	ldrb	r3, [r7, #3]
 800558e:	015a      	lsls	r2, r3, #5
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	4413      	add	r3, r2
 8005594:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005598:	461a      	mov	r2, r3
 800559a:	2302      	movs	r3, #2
 800559c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800559e:	78fa      	ldrb	r2, [r7, #3]
 80055a0:	6879      	ldr	r1, [r7, #4]
 80055a2:	4613      	mov	r3, r2
 80055a4:	011b      	lsls	r3, r3, #4
 80055a6:	1a9b      	subs	r3, r3, r2
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	440b      	add	r3, r1
 80055ac:	334d      	adds	r3, #77	@ 0x4d
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	f040 8093 	bne.w	80056dc <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80055b6:	78fa      	ldrb	r2, [r7, #3]
 80055b8:	6879      	ldr	r1, [r7, #4]
 80055ba:	4613      	mov	r3, r2
 80055bc:	011b      	lsls	r3, r3, #4
 80055be:	1a9b      	subs	r3, r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	440b      	add	r3, r1
 80055c4:	334d      	adds	r3, #77	@ 0x4d
 80055c6:	2202      	movs	r2, #2
 80055c8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80055ca:	78fa      	ldrb	r2, [r7, #3]
 80055cc:	6879      	ldr	r1, [r7, #4]
 80055ce:	4613      	mov	r3, r2
 80055d0:	011b      	lsls	r3, r3, #4
 80055d2:	1a9b      	subs	r3, r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	440b      	add	r3, r1
 80055d8:	334c      	adds	r3, #76	@ 0x4c
 80055da:	2201      	movs	r2, #1
 80055dc:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80055de:	78fa      	ldrb	r2, [r7, #3]
 80055e0:	6879      	ldr	r1, [r7, #4]
 80055e2:	4613      	mov	r3, r2
 80055e4:	011b      	lsls	r3, r3, #4
 80055e6:	1a9b      	subs	r3, r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	440b      	add	r3, r1
 80055ec:	3326      	adds	r3, #38	@ 0x26
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d00b      	beq.n	800560c <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80055f4:	78fa      	ldrb	r2, [r7, #3]
 80055f6:	6879      	ldr	r1, [r7, #4]
 80055f8:	4613      	mov	r3, r2
 80055fa:	011b      	lsls	r3, r3, #4
 80055fc:	1a9b      	subs	r3, r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	440b      	add	r3, r1
 8005602:	3326      	adds	r3, #38	@ 0x26
 8005604:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005606:	2b03      	cmp	r3, #3
 8005608:	f040 8190 	bne.w	800592c <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	799b      	ldrb	r3, [r3, #6]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d115      	bne.n	8005640 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8005614:	78fa      	ldrb	r2, [r7, #3]
 8005616:	6879      	ldr	r1, [r7, #4]
 8005618:	4613      	mov	r3, r2
 800561a:	011b      	lsls	r3, r3, #4
 800561c:	1a9b      	subs	r3, r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	440b      	add	r3, r1
 8005622:	333d      	adds	r3, #61	@ 0x3d
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	78fa      	ldrb	r2, [r7, #3]
 8005628:	f083 0301 	eor.w	r3, r3, #1
 800562c:	b2d8      	uxtb	r0, r3
 800562e:	6879      	ldr	r1, [r7, #4]
 8005630:	4613      	mov	r3, r2
 8005632:	011b      	lsls	r3, r3, #4
 8005634:	1a9b      	subs	r3, r3, r2
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	440b      	add	r3, r1
 800563a:	333d      	adds	r3, #61	@ 0x3d
 800563c:	4602      	mov	r2, r0
 800563e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	799b      	ldrb	r3, [r3, #6]
 8005644:	2b01      	cmp	r3, #1
 8005646:	f040 8171 	bne.w	800592c <HCD_HC_OUT_IRQHandler+0x954>
 800564a:	78fa      	ldrb	r2, [r7, #3]
 800564c:	6879      	ldr	r1, [r7, #4]
 800564e:	4613      	mov	r3, r2
 8005650:	011b      	lsls	r3, r3, #4
 8005652:	1a9b      	subs	r3, r3, r2
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	440b      	add	r3, r1
 8005658:	3334      	adds	r3, #52	@ 0x34
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	f000 8165 	beq.w	800592c <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8005662:	78fa      	ldrb	r2, [r7, #3]
 8005664:	6879      	ldr	r1, [r7, #4]
 8005666:	4613      	mov	r3, r2
 8005668:	011b      	lsls	r3, r3, #4
 800566a:	1a9b      	subs	r3, r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	440b      	add	r3, r1
 8005670:	3334      	adds	r3, #52	@ 0x34
 8005672:	6819      	ldr	r1, [r3, #0]
 8005674:	78fa      	ldrb	r2, [r7, #3]
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	4613      	mov	r3, r2
 800567a:	011b      	lsls	r3, r3, #4
 800567c:	1a9b      	subs	r3, r3, r2
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	4403      	add	r3, r0
 8005682:	3328      	adds	r3, #40	@ 0x28
 8005684:	881b      	ldrh	r3, [r3, #0]
 8005686:	440b      	add	r3, r1
 8005688:	1e59      	subs	r1, r3, #1
 800568a:	78fa      	ldrb	r2, [r7, #3]
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	4613      	mov	r3, r2
 8005690:	011b      	lsls	r3, r3, #4
 8005692:	1a9b      	subs	r3, r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	4403      	add	r3, r0
 8005698:	3328      	adds	r3, #40	@ 0x28
 800569a:	881b      	ldrh	r3, [r3, #0]
 800569c:	fbb1 f3f3 	udiv	r3, r1, r3
 80056a0:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	f003 0301 	and.w	r3, r3, #1
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f000 813f 	beq.w	800592c <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80056ae:	78fa      	ldrb	r2, [r7, #3]
 80056b0:	6879      	ldr	r1, [r7, #4]
 80056b2:	4613      	mov	r3, r2
 80056b4:	011b      	lsls	r3, r3, #4
 80056b6:	1a9b      	subs	r3, r3, r2
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	440b      	add	r3, r1
 80056bc:	333d      	adds	r3, #61	@ 0x3d
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	78fa      	ldrb	r2, [r7, #3]
 80056c2:	f083 0301 	eor.w	r3, r3, #1
 80056c6:	b2d8      	uxtb	r0, r3
 80056c8:	6879      	ldr	r1, [r7, #4]
 80056ca:	4613      	mov	r3, r2
 80056cc:	011b      	lsls	r3, r3, #4
 80056ce:	1a9b      	subs	r3, r3, r2
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	440b      	add	r3, r1
 80056d4:	333d      	adds	r3, #61	@ 0x3d
 80056d6:	4602      	mov	r2, r0
 80056d8:	701a      	strb	r2, [r3, #0]
 80056da:	e127      	b.n	800592c <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80056dc:	78fa      	ldrb	r2, [r7, #3]
 80056de:	6879      	ldr	r1, [r7, #4]
 80056e0:	4613      	mov	r3, r2
 80056e2:	011b      	lsls	r3, r3, #4
 80056e4:	1a9b      	subs	r3, r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	440b      	add	r3, r1
 80056ea:	334d      	adds	r3, #77	@ 0x4d
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	2b03      	cmp	r3, #3
 80056f0:	d120      	bne.n	8005734 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80056f2:	78fa      	ldrb	r2, [r7, #3]
 80056f4:	6879      	ldr	r1, [r7, #4]
 80056f6:	4613      	mov	r3, r2
 80056f8:	011b      	lsls	r3, r3, #4
 80056fa:	1a9b      	subs	r3, r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	440b      	add	r3, r1
 8005700:	334d      	adds	r3, #77	@ 0x4d
 8005702:	2202      	movs	r2, #2
 8005704:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005706:	78fa      	ldrb	r2, [r7, #3]
 8005708:	6879      	ldr	r1, [r7, #4]
 800570a:	4613      	mov	r3, r2
 800570c:	011b      	lsls	r3, r3, #4
 800570e:	1a9b      	subs	r3, r3, r2
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	440b      	add	r3, r1
 8005714:	331b      	adds	r3, #27
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	2b01      	cmp	r3, #1
 800571a:	f040 8107 	bne.w	800592c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800571e:	78fa      	ldrb	r2, [r7, #3]
 8005720:	6879      	ldr	r1, [r7, #4]
 8005722:	4613      	mov	r3, r2
 8005724:	011b      	lsls	r3, r3, #4
 8005726:	1a9b      	subs	r3, r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	440b      	add	r3, r1
 800572c:	334c      	adds	r3, #76	@ 0x4c
 800572e:	2202      	movs	r2, #2
 8005730:	701a      	strb	r2, [r3, #0]
 8005732:	e0fb      	b.n	800592c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005734:	78fa      	ldrb	r2, [r7, #3]
 8005736:	6879      	ldr	r1, [r7, #4]
 8005738:	4613      	mov	r3, r2
 800573a:	011b      	lsls	r3, r3, #4
 800573c:	1a9b      	subs	r3, r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	440b      	add	r3, r1
 8005742:	334d      	adds	r3, #77	@ 0x4d
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	2b04      	cmp	r3, #4
 8005748:	d13a      	bne.n	80057c0 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800574a:	78fa      	ldrb	r2, [r7, #3]
 800574c:	6879      	ldr	r1, [r7, #4]
 800574e:	4613      	mov	r3, r2
 8005750:	011b      	lsls	r3, r3, #4
 8005752:	1a9b      	subs	r3, r3, r2
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	440b      	add	r3, r1
 8005758:	334d      	adds	r3, #77	@ 0x4d
 800575a:	2202      	movs	r2, #2
 800575c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800575e:	78fa      	ldrb	r2, [r7, #3]
 8005760:	6879      	ldr	r1, [r7, #4]
 8005762:	4613      	mov	r3, r2
 8005764:	011b      	lsls	r3, r3, #4
 8005766:	1a9b      	subs	r3, r3, r2
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	440b      	add	r3, r1
 800576c:	334c      	adds	r3, #76	@ 0x4c
 800576e:	2202      	movs	r2, #2
 8005770:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005772:	78fa      	ldrb	r2, [r7, #3]
 8005774:	6879      	ldr	r1, [r7, #4]
 8005776:	4613      	mov	r3, r2
 8005778:	011b      	lsls	r3, r3, #4
 800577a:	1a9b      	subs	r3, r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	440b      	add	r3, r1
 8005780:	331b      	adds	r3, #27
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	2b01      	cmp	r3, #1
 8005786:	f040 80d1 	bne.w	800592c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800578a:	78fa      	ldrb	r2, [r7, #3]
 800578c:	6879      	ldr	r1, [r7, #4]
 800578e:	4613      	mov	r3, r2
 8005790:	011b      	lsls	r3, r3, #4
 8005792:	1a9b      	subs	r3, r3, r2
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	440b      	add	r3, r1
 8005798:	331b      	adds	r3, #27
 800579a:	2200      	movs	r2, #0
 800579c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800579e:	78fb      	ldrb	r3, [r7, #3]
 80057a0:	015a      	lsls	r2, r3, #5
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	4413      	add	r3, r2
 80057a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	78fa      	ldrb	r2, [r7, #3]
 80057ae:	0151      	lsls	r1, r2, #5
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	440a      	add	r2, r1
 80057b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80057b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057bc:	6053      	str	r3, [r2, #4]
 80057be:	e0b5      	b.n	800592c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80057c0:	78fa      	ldrb	r2, [r7, #3]
 80057c2:	6879      	ldr	r1, [r7, #4]
 80057c4:	4613      	mov	r3, r2
 80057c6:	011b      	lsls	r3, r3, #4
 80057c8:	1a9b      	subs	r3, r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	440b      	add	r3, r1
 80057ce:	334d      	adds	r3, #77	@ 0x4d
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	2b05      	cmp	r3, #5
 80057d4:	d114      	bne.n	8005800 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80057d6:	78fa      	ldrb	r2, [r7, #3]
 80057d8:	6879      	ldr	r1, [r7, #4]
 80057da:	4613      	mov	r3, r2
 80057dc:	011b      	lsls	r3, r3, #4
 80057de:	1a9b      	subs	r3, r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	440b      	add	r3, r1
 80057e4:	334d      	adds	r3, #77	@ 0x4d
 80057e6:	2202      	movs	r2, #2
 80057e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80057ea:	78fa      	ldrb	r2, [r7, #3]
 80057ec:	6879      	ldr	r1, [r7, #4]
 80057ee:	4613      	mov	r3, r2
 80057f0:	011b      	lsls	r3, r3, #4
 80057f2:	1a9b      	subs	r3, r3, r2
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	440b      	add	r3, r1
 80057f8:	334c      	adds	r3, #76	@ 0x4c
 80057fa:	2202      	movs	r2, #2
 80057fc:	701a      	strb	r2, [r3, #0]
 80057fe:	e095      	b.n	800592c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005800:	78fa      	ldrb	r2, [r7, #3]
 8005802:	6879      	ldr	r1, [r7, #4]
 8005804:	4613      	mov	r3, r2
 8005806:	011b      	lsls	r3, r3, #4
 8005808:	1a9b      	subs	r3, r3, r2
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	440b      	add	r3, r1
 800580e:	334d      	adds	r3, #77	@ 0x4d
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	2b06      	cmp	r3, #6
 8005814:	d114      	bne.n	8005840 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005816:	78fa      	ldrb	r2, [r7, #3]
 8005818:	6879      	ldr	r1, [r7, #4]
 800581a:	4613      	mov	r3, r2
 800581c:	011b      	lsls	r3, r3, #4
 800581e:	1a9b      	subs	r3, r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	440b      	add	r3, r1
 8005824:	334d      	adds	r3, #77	@ 0x4d
 8005826:	2202      	movs	r2, #2
 8005828:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800582a:	78fa      	ldrb	r2, [r7, #3]
 800582c:	6879      	ldr	r1, [r7, #4]
 800582e:	4613      	mov	r3, r2
 8005830:	011b      	lsls	r3, r3, #4
 8005832:	1a9b      	subs	r3, r3, r2
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	440b      	add	r3, r1
 8005838:	334c      	adds	r3, #76	@ 0x4c
 800583a:	2205      	movs	r2, #5
 800583c:	701a      	strb	r2, [r3, #0]
 800583e:	e075      	b.n	800592c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005840:	78fa      	ldrb	r2, [r7, #3]
 8005842:	6879      	ldr	r1, [r7, #4]
 8005844:	4613      	mov	r3, r2
 8005846:	011b      	lsls	r3, r3, #4
 8005848:	1a9b      	subs	r3, r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	440b      	add	r3, r1
 800584e:	334d      	adds	r3, #77	@ 0x4d
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	2b07      	cmp	r3, #7
 8005854:	d00a      	beq.n	800586c <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005856:	78fa      	ldrb	r2, [r7, #3]
 8005858:	6879      	ldr	r1, [r7, #4]
 800585a:	4613      	mov	r3, r2
 800585c:	011b      	lsls	r3, r3, #4
 800585e:	1a9b      	subs	r3, r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	440b      	add	r3, r1
 8005864:	334d      	adds	r3, #77	@ 0x4d
 8005866:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005868:	2b09      	cmp	r3, #9
 800586a:	d170      	bne.n	800594e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800586c:	78fa      	ldrb	r2, [r7, #3]
 800586e:	6879      	ldr	r1, [r7, #4]
 8005870:	4613      	mov	r3, r2
 8005872:	011b      	lsls	r3, r3, #4
 8005874:	1a9b      	subs	r3, r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	440b      	add	r3, r1
 800587a:	334d      	adds	r3, #77	@ 0x4d
 800587c:	2202      	movs	r2, #2
 800587e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005880:	78fa      	ldrb	r2, [r7, #3]
 8005882:	6879      	ldr	r1, [r7, #4]
 8005884:	4613      	mov	r3, r2
 8005886:	011b      	lsls	r3, r3, #4
 8005888:	1a9b      	subs	r3, r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	440b      	add	r3, r1
 800588e:	3344      	adds	r3, #68	@ 0x44
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	1c59      	adds	r1, r3, #1
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	4613      	mov	r3, r2
 8005898:	011b      	lsls	r3, r3, #4
 800589a:	1a9b      	subs	r3, r3, r2
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	4403      	add	r3, r0
 80058a0:	3344      	adds	r3, #68	@ 0x44
 80058a2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80058a4:	78fa      	ldrb	r2, [r7, #3]
 80058a6:	6879      	ldr	r1, [r7, #4]
 80058a8:	4613      	mov	r3, r2
 80058aa:	011b      	lsls	r3, r3, #4
 80058ac:	1a9b      	subs	r3, r3, r2
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	440b      	add	r3, r1
 80058b2:	3344      	adds	r3, #68	@ 0x44
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d914      	bls.n	80058e4 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80058ba:	78fa      	ldrb	r2, [r7, #3]
 80058bc:	6879      	ldr	r1, [r7, #4]
 80058be:	4613      	mov	r3, r2
 80058c0:	011b      	lsls	r3, r3, #4
 80058c2:	1a9b      	subs	r3, r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	440b      	add	r3, r1
 80058c8:	3344      	adds	r3, #68	@ 0x44
 80058ca:	2200      	movs	r2, #0
 80058cc:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80058ce:	78fa      	ldrb	r2, [r7, #3]
 80058d0:	6879      	ldr	r1, [r7, #4]
 80058d2:	4613      	mov	r3, r2
 80058d4:	011b      	lsls	r3, r3, #4
 80058d6:	1a9b      	subs	r3, r3, r2
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	440b      	add	r3, r1
 80058dc:	334c      	adds	r3, #76	@ 0x4c
 80058de:	2204      	movs	r2, #4
 80058e0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80058e2:	e022      	b.n	800592a <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80058e4:	78fa      	ldrb	r2, [r7, #3]
 80058e6:	6879      	ldr	r1, [r7, #4]
 80058e8:	4613      	mov	r3, r2
 80058ea:	011b      	lsls	r3, r3, #4
 80058ec:	1a9b      	subs	r3, r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	440b      	add	r3, r1
 80058f2:	334c      	adds	r3, #76	@ 0x4c
 80058f4:	2202      	movs	r2, #2
 80058f6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80058f8:	78fb      	ldrb	r3, [r7, #3]
 80058fa:	015a      	lsls	r2, r3, #5
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	4413      	add	r3, r2
 8005900:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800590e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005916:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005918:	78fb      	ldrb	r3, [r7, #3]
 800591a:	015a      	lsls	r2, r3, #5
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	4413      	add	r3, r2
 8005920:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005924:	461a      	mov	r2, r3
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800592a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800592c:	78fa      	ldrb	r2, [r7, #3]
 800592e:	6879      	ldr	r1, [r7, #4]
 8005930:	4613      	mov	r3, r2
 8005932:	011b      	lsls	r3, r3, #4
 8005934:	1a9b      	subs	r3, r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	440b      	add	r3, r1
 800593a:	334c      	adds	r3, #76	@ 0x4c
 800593c:	781a      	ldrb	r2, [r3, #0]
 800593e:	78fb      	ldrb	r3, [r7, #3]
 8005940:	4619      	mov	r1, r3
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f006 fc8e 	bl	800c264 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005948:	e002      	b.n	8005950 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800594a:	bf00      	nop
 800594c:	e000      	b.n	8005950 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800594e:	bf00      	nop
  }
}
 8005950:	3718      	adds	r7, #24
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b08a      	sub	sp, #40	@ 0x28
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005966:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	6a1b      	ldr	r3, [r3, #32]
 800596e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	f003 030f 	and.w	r3, r3, #15
 8005976:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	0c5b      	lsrs	r3, r3, #17
 800597c:	f003 030f 	and.w	r3, r3, #15
 8005980:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	091b      	lsrs	r3, r3, #4
 8005986:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800598a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	2b02      	cmp	r3, #2
 8005990:	d004      	beq.n	800599c <HCD_RXQLVL_IRQHandler+0x46>
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	2b05      	cmp	r3, #5
 8005996:	f000 80b6 	beq.w	8005b06 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800599a:	e0b7      	b.n	8005b0c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	f000 80b3 	beq.w	8005b0a <HCD_RXQLVL_IRQHandler+0x1b4>
 80059a4:	6879      	ldr	r1, [r7, #4]
 80059a6:	69ba      	ldr	r2, [r7, #24]
 80059a8:	4613      	mov	r3, r2
 80059aa:	011b      	lsls	r3, r3, #4
 80059ac:	1a9b      	subs	r3, r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	440b      	add	r3, r1
 80059b2:	332c      	adds	r3, #44	@ 0x2c
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f000 80a7 	beq.w	8005b0a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80059bc:	6879      	ldr	r1, [r7, #4]
 80059be:	69ba      	ldr	r2, [r7, #24]
 80059c0:	4613      	mov	r3, r2
 80059c2:	011b      	lsls	r3, r3, #4
 80059c4:	1a9b      	subs	r3, r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	440b      	add	r3, r1
 80059ca:	3338      	adds	r3, #56	@ 0x38
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	18d1      	adds	r1, r2, r3
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	69ba      	ldr	r2, [r7, #24]
 80059d6:	4613      	mov	r3, r2
 80059d8:	011b      	lsls	r3, r3, #4
 80059da:	1a9b      	subs	r3, r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	4403      	add	r3, r0
 80059e0:	3334      	adds	r3, #52	@ 0x34
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4299      	cmp	r1, r3
 80059e6:	f200 8083 	bhi.w	8005af0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6818      	ldr	r0, [r3, #0]
 80059ee:	6879      	ldr	r1, [r7, #4]
 80059f0:	69ba      	ldr	r2, [r7, #24]
 80059f2:	4613      	mov	r3, r2
 80059f4:	011b      	lsls	r3, r3, #4
 80059f6:	1a9b      	subs	r3, r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	440b      	add	r3, r1
 80059fc:	332c      	adds	r3, #44	@ 0x2c
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	b292      	uxth	r2, r2
 8005a04:	4619      	mov	r1, r3
 8005a06:	f003 fac5 	bl	8008f94 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8005a0a:	6879      	ldr	r1, [r7, #4]
 8005a0c:	69ba      	ldr	r2, [r7, #24]
 8005a0e:	4613      	mov	r3, r2
 8005a10:	011b      	lsls	r3, r3, #4
 8005a12:	1a9b      	subs	r3, r3, r2
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	440b      	add	r3, r1
 8005a18:	332c      	adds	r3, #44	@ 0x2c
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	18d1      	adds	r1, r2, r3
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	69ba      	ldr	r2, [r7, #24]
 8005a24:	4613      	mov	r3, r2
 8005a26:	011b      	lsls	r3, r3, #4
 8005a28:	1a9b      	subs	r3, r3, r2
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4403      	add	r3, r0
 8005a2e:	332c      	adds	r3, #44	@ 0x2c
 8005a30:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8005a32:	6879      	ldr	r1, [r7, #4]
 8005a34:	69ba      	ldr	r2, [r7, #24]
 8005a36:	4613      	mov	r3, r2
 8005a38:	011b      	lsls	r3, r3, #4
 8005a3a:	1a9b      	subs	r3, r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	440b      	add	r3, r1
 8005a40:	3338      	adds	r3, #56	@ 0x38
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	18d1      	adds	r1, r2, r3
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	69ba      	ldr	r2, [r7, #24]
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	011b      	lsls	r3, r3, #4
 8005a50:	1a9b      	subs	r3, r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	4403      	add	r3, r0
 8005a56:	3338      	adds	r3, #56	@ 0x38
 8005a58:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	015a      	lsls	r2, r3, #5
 8005a5e:	6a3b      	ldr	r3, [r7, #32]
 8005a60:	4413      	add	r3, r2
 8005a62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	0cdb      	lsrs	r3, r3, #19
 8005a6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a6e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005a70:	6879      	ldr	r1, [r7, #4]
 8005a72:	69ba      	ldr	r2, [r7, #24]
 8005a74:	4613      	mov	r3, r2
 8005a76:	011b      	lsls	r3, r3, #4
 8005a78:	1a9b      	subs	r3, r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	440b      	add	r3, r1
 8005a7e:	3328      	adds	r3, #40	@ 0x28
 8005a80:	881b      	ldrh	r3, [r3, #0]
 8005a82:	461a      	mov	r2, r3
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d13f      	bne.n	8005b0a <HCD_RXQLVL_IRQHandler+0x1b4>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d03c      	beq.n	8005b0a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	015a      	lsls	r2, r3, #5
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	4413      	add	r3, r2
 8005a98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005aa6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005aae:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	015a      	lsls	r2, r3, #5
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005abc:	461a      	mov	r2, r3
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8005ac2:	6879      	ldr	r1, [r7, #4]
 8005ac4:	69ba      	ldr	r2, [r7, #24]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	011b      	lsls	r3, r3, #4
 8005aca:	1a9b      	subs	r3, r3, r2
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	440b      	add	r3, r1
 8005ad0:	333c      	adds	r3, #60	@ 0x3c
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	f083 0301 	eor.w	r3, r3, #1
 8005ad8:	b2d8      	uxtb	r0, r3
 8005ada:	6879      	ldr	r1, [r7, #4]
 8005adc:	69ba      	ldr	r2, [r7, #24]
 8005ade:	4613      	mov	r3, r2
 8005ae0:	011b      	lsls	r3, r3, #4
 8005ae2:	1a9b      	subs	r3, r3, r2
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	440b      	add	r3, r1
 8005ae8:	333c      	adds	r3, #60	@ 0x3c
 8005aea:	4602      	mov	r2, r0
 8005aec:	701a      	strb	r2, [r3, #0]
      break;
 8005aee:	e00c      	b.n	8005b0a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8005af0:	6879      	ldr	r1, [r7, #4]
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	4613      	mov	r3, r2
 8005af6:	011b      	lsls	r3, r3, #4
 8005af8:	1a9b      	subs	r3, r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	440b      	add	r3, r1
 8005afe:	334c      	adds	r3, #76	@ 0x4c
 8005b00:	2204      	movs	r2, #4
 8005b02:	701a      	strb	r2, [r3, #0]
      break;
 8005b04:	e001      	b.n	8005b0a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8005b06:	bf00      	nop
 8005b08:	e000      	b.n	8005b0c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8005b0a:	bf00      	nop
  }
}
 8005b0c:	bf00      	nop
 8005b0e:	3728      	adds	r7, #40	@ 0x28
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b086      	sub	sp, #24
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005b40:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f003 0302 	and.w	r3, r3, #2
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d10b      	bne.n	8005b64 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d102      	bne.n	8005b5c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f006 fb68 	bl	800c22c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	f043 0302 	orr.w	r3, r3, #2
 8005b62:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f003 0308 	and.w	r3, r3, #8
 8005b6a:	2b08      	cmp	r3, #8
 8005b6c:	d132      	bne.n	8005bd4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	f043 0308 	orr.w	r3, r3, #8
 8005b74:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f003 0304 	and.w	r3, r3, #4
 8005b7c:	2b04      	cmp	r3, #4
 8005b7e:	d126      	bne.n	8005bce <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	7a5b      	ldrb	r3, [r3, #9]
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d113      	bne.n	8005bb0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005b8e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b92:	d106      	bne.n	8005ba2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2102      	movs	r1, #2
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f003 fb8a 	bl	80092b4 <USB_InitFSLSPClkSel>
 8005ba0:	e011      	b.n	8005bc6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2101      	movs	r1, #1
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f003 fb83 	bl	80092b4 <USB_InitFSLSPClkSel>
 8005bae:	e00a      	b.n	8005bc6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	79db      	ldrb	r3, [r3, #7]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d106      	bne.n	8005bc6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005bc4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f006 fb5a 	bl	800c280 <HAL_HCD_PortEnabled_Callback>
 8005bcc:	e002      	b.n	8005bd4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f006 fb64 	bl	800c29c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f003 0320 	and.w	r3, r3, #32
 8005bda:	2b20      	cmp	r3, #32
 8005bdc:	d103      	bne.n	8005be6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	f043 0320 	orr.w	r3, r3, #32
 8005be4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005bec:	461a      	mov	r2, r3
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	6013      	str	r3, [r2, #0]
}
 8005bf2:	bf00      	nop
 8005bf4:	3718      	adds	r7, #24
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
	...

08005bfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d101      	bne.n	8005c0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e12b      	b.n	8005e66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d106      	bne.n	8005c28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f7fb fc6c 	bl	8001500 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2224      	movs	r2, #36	@ 0x24
 8005c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f022 0201 	bic.w	r2, r2, #1
 8005c3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005c5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005c60:	f001 fe72 	bl	8007948 <HAL_RCC_GetPCLK1Freq>
 8005c64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	4a81      	ldr	r2, [pc, #516]	@ (8005e70 <HAL_I2C_Init+0x274>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d807      	bhi.n	8005c80 <HAL_I2C_Init+0x84>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	4a80      	ldr	r2, [pc, #512]	@ (8005e74 <HAL_I2C_Init+0x278>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	bf94      	ite	ls
 8005c78:	2301      	movls	r3, #1
 8005c7a:	2300      	movhi	r3, #0
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	e006      	b.n	8005c8e <HAL_I2C_Init+0x92>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	4a7d      	ldr	r2, [pc, #500]	@ (8005e78 <HAL_I2C_Init+0x27c>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	bf94      	ite	ls
 8005c88:	2301      	movls	r3, #1
 8005c8a:	2300      	movhi	r3, #0
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d001      	beq.n	8005c96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e0e7      	b.n	8005e66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	4a78      	ldr	r2, [pc, #480]	@ (8005e7c <HAL_I2C_Init+0x280>)
 8005c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c9e:	0c9b      	lsrs	r3, r3, #18
 8005ca0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68ba      	ldr	r2, [r7, #8]
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	6a1b      	ldr	r3, [r3, #32]
 8005cbc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	4a6a      	ldr	r2, [pc, #424]	@ (8005e70 <HAL_I2C_Init+0x274>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d802      	bhi.n	8005cd0 <HAL_I2C_Init+0xd4>
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	3301      	adds	r3, #1
 8005cce:	e009      	b.n	8005ce4 <HAL_I2C_Init+0xe8>
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005cd6:	fb02 f303 	mul.w	r3, r2, r3
 8005cda:	4a69      	ldr	r2, [pc, #420]	@ (8005e80 <HAL_I2C_Init+0x284>)
 8005cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce0:	099b      	lsrs	r3, r3, #6
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	6812      	ldr	r2, [r2, #0]
 8005ce8:	430b      	orrs	r3, r1
 8005cea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	69db      	ldr	r3, [r3, #28]
 8005cf2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005cf6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	495c      	ldr	r1, [pc, #368]	@ (8005e70 <HAL_I2C_Init+0x274>)
 8005d00:	428b      	cmp	r3, r1
 8005d02:	d819      	bhi.n	8005d38 <HAL_I2C_Init+0x13c>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	1e59      	subs	r1, r3, #1
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	005b      	lsls	r3, r3, #1
 8005d0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d12:	1c59      	adds	r1, r3, #1
 8005d14:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005d18:	400b      	ands	r3, r1
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00a      	beq.n	8005d34 <HAL_I2C_Init+0x138>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	1e59      	subs	r1, r3, #1
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	005b      	lsls	r3, r3, #1
 8005d28:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d32:	e051      	b.n	8005dd8 <HAL_I2C_Init+0x1dc>
 8005d34:	2304      	movs	r3, #4
 8005d36:	e04f      	b.n	8005dd8 <HAL_I2C_Init+0x1dc>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d111      	bne.n	8005d64 <HAL_I2C_Init+0x168>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	1e58      	subs	r0, r3, #1
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6859      	ldr	r1, [r3, #4]
 8005d48:	460b      	mov	r3, r1
 8005d4a:	005b      	lsls	r3, r3, #1
 8005d4c:	440b      	add	r3, r1
 8005d4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d52:	3301      	adds	r3, #1
 8005d54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	bf0c      	ite	eq
 8005d5c:	2301      	moveq	r3, #1
 8005d5e:	2300      	movne	r3, #0
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	e012      	b.n	8005d8a <HAL_I2C_Init+0x18e>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	1e58      	subs	r0, r3, #1
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6859      	ldr	r1, [r3, #4]
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	440b      	add	r3, r1
 8005d72:	0099      	lsls	r1, r3, #2
 8005d74:	440b      	add	r3, r1
 8005d76:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	bf0c      	ite	eq
 8005d84:	2301      	moveq	r3, #1
 8005d86:	2300      	movne	r3, #0
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d001      	beq.n	8005d92 <HAL_I2C_Init+0x196>
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e022      	b.n	8005dd8 <HAL_I2C_Init+0x1dc>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10e      	bne.n	8005db8 <HAL_I2C_Init+0x1bc>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	1e58      	subs	r0, r3, #1
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6859      	ldr	r1, [r3, #4]
 8005da2:	460b      	mov	r3, r1
 8005da4:	005b      	lsls	r3, r3, #1
 8005da6:	440b      	add	r3, r1
 8005da8:	fbb0 f3f3 	udiv	r3, r0, r3
 8005dac:	3301      	adds	r3, #1
 8005dae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005db2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005db6:	e00f      	b.n	8005dd8 <HAL_I2C_Init+0x1dc>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	1e58      	subs	r0, r3, #1
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6859      	ldr	r1, [r3, #4]
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	440b      	add	r3, r1
 8005dc6:	0099      	lsls	r1, r3, #2
 8005dc8:	440b      	add	r3, r1
 8005dca:	fbb0 f3f3 	udiv	r3, r0, r3
 8005dce:	3301      	adds	r3, #1
 8005dd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dd4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005dd8:	6879      	ldr	r1, [r7, #4]
 8005dda:	6809      	ldr	r1, [r1, #0]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	69da      	ldr	r2, [r3, #28]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	431a      	orrs	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	430a      	orrs	r2, r1
 8005dfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005e06:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	6911      	ldr	r1, [r2, #16]
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	68d2      	ldr	r2, [r2, #12]
 8005e12:	4311      	orrs	r1, r2
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	6812      	ldr	r2, [r2, #0]
 8005e18:	430b      	orrs	r3, r1
 8005e1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	695a      	ldr	r2, [r3, #20]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	431a      	orrs	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	430a      	orrs	r2, r1
 8005e36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f042 0201 	orr.w	r2, r2, #1
 8005e46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2220      	movs	r2, #32
 8005e52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	000186a0 	.word	0x000186a0
 8005e74:	001e847f 	.word	0x001e847f
 8005e78:	003d08ff 	.word	0x003d08ff
 8005e7c:	431bde83 	.word	0x431bde83
 8005e80:	10624dd3 	.word	0x10624dd3

08005e84 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b088      	sub	sp, #32
 8005e88:	af02      	add	r7, sp, #8
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	607a      	str	r2, [r7, #4]
 8005e8e:	461a      	mov	r2, r3
 8005e90:	460b      	mov	r3, r1
 8005e92:	817b      	strh	r3, [r7, #10]
 8005e94:	4613      	mov	r3, r2
 8005e96:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e98:	f7fc fb16 	bl	80024c8 <HAL_GetTick>
 8005e9c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	2b20      	cmp	r3, #32
 8005ea8:	f040 80e0 	bne.w	800606c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	9300      	str	r3, [sp, #0]
 8005eb0:	2319      	movs	r3, #25
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	4970      	ldr	r1, [pc, #448]	@ (8006078 <HAL_I2C_Master_Transmit+0x1f4>)
 8005eb6:	68f8      	ldr	r0, [r7, #12]
 8005eb8:	f000 f964 	bl	8006184 <I2C_WaitOnFlagUntilTimeout>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d001      	beq.n	8005ec6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	e0d3      	b.n	800606e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d101      	bne.n	8005ed4 <HAL_I2C_Master_Transmit+0x50>
 8005ed0:	2302      	movs	r3, #2
 8005ed2:	e0cc      	b.n	800606e <HAL_I2C_Master_Transmit+0x1ea>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0301 	and.w	r3, r3, #1
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d007      	beq.n	8005efa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f042 0201 	orr.w	r2, r2, #1
 8005ef8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f08:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2221      	movs	r2, #33	@ 0x21
 8005f0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2210      	movs	r2, #16
 8005f16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	893a      	ldrh	r2, [r7, #8]
 8005f2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	4a50      	ldr	r2, [pc, #320]	@ (800607c <HAL_I2C_Master_Transmit+0x1f8>)
 8005f3a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005f3c:	8979      	ldrh	r1, [r7, #10]
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	6a3a      	ldr	r2, [r7, #32]
 8005f42:	68f8      	ldr	r0, [r7, #12]
 8005f44:	f000 f89c 	bl	8006080 <I2C_MasterRequestWrite>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d001      	beq.n	8005f52 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e08d      	b.n	800606e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f52:	2300      	movs	r3, #0
 8005f54:	613b      	str	r3, [r7, #16]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	613b      	str	r3, [r7, #16]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	613b      	str	r3, [r7, #16]
 8005f66:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005f68:	e066      	b.n	8006038 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	6a39      	ldr	r1, [r7, #32]
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f000 fa22 	bl	80063b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00d      	beq.n	8005f96 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f7e:	2b04      	cmp	r3, #4
 8005f80:	d107      	bne.n	8005f92 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e06b      	b.n	800606e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f9a:	781a      	ldrb	r2, [r3, #0]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa6:	1c5a      	adds	r2, r3, #1
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	695b      	ldr	r3, [r3, #20]
 8005fcc:	f003 0304 	and.w	r3, r3, #4
 8005fd0:	2b04      	cmp	r3, #4
 8005fd2:	d11b      	bne.n	800600c <HAL_I2C_Master_Transmit+0x188>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d017      	beq.n	800600c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe0:	781a      	ldrb	r2, [r3, #0]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fec:	1c5a      	adds	r2, r3, #1
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006004:	3b01      	subs	r3, #1
 8006006:	b29a      	uxth	r2, r3
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	6a39      	ldr	r1, [r7, #32]
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f000 fa19 	bl	8006448 <I2C_WaitOnBTFFlagUntilTimeout>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00d      	beq.n	8006038 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006020:	2b04      	cmp	r3, #4
 8006022:	d107      	bne.n	8006034 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006032:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e01a      	b.n	800606e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800603c:	2b00      	cmp	r3, #0
 800603e:	d194      	bne.n	8005f6a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800604e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2220      	movs	r2, #32
 8006054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006068:	2300      	movs	r3, #0
 800606a:	e000      	b.n	800606e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800606c:	2302      	movs	r3, #2
  }
}
 800606e:	4618      	mov	r0, r3
 8006070:	3718      	adds	r7, #24
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	00100002 	.word	0x00100002
 800607c:	ffff0000 	.word	0xffff0000

08006080 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b088      	sub	sp, #32
 8006084:	af02      	add	r7, sp, #8
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	607a      	str	r2, [r7, #4]
 800608a:	603b      	str	r3, [r7, #0]
 800608c:	460b      	mov	r3, r1
 800608e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006094:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	2b08      	cmp	r3, #8
 800609a:	d006      	beq.n	80060aa <I2C_MasterRequestWrite+0x2a>
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d003      	beq.n	80060aa <I2C_MasterRequestWrite+0x2a>
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80060a8:	d108      	bne.n	80060bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80060b8:	601a      	str	r2, [r3, #0]
 80060ba:	e00b      	b.n	80060d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060c0:	2b12      	cmp	r3, #18
 80060c2:	d107      	bne.n	80060d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80060d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	9300      	str	r3, [sp, #0]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f000 f84f 	bl	8006184 <I2C_WaitOnFlagUntilTimeout>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00d      	beq.n	8006108 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060fa:	d103      	bne.n	8006104 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006102:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	e035      	b.n	8006174 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006110:	d108      	bne.n	8006124 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006112:	897b      	ldrh	r3, [r7, #10]
 8006114:	b2db      	uxtb	r3, r3
 8006116:	461a      	mov	r2, r3
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006120:	611a      	str	r2, [r3, #16]
 8006122:	e01b      	b.n	800615c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006124:	897b      	ldrh	r3, [r7, #10]
 8006126:	11db      	asrs	r3, r3, #7
 8006128:	b2db      	uxtb	r3, r3
 800612a:	f003 0306 	and.w	r3, r3, #6
 800612e:	b2db      	uxtb	r3, r3
 8006130:	f063 030f 	orn	r3, r3, #15
 8006134:	b2da      	uxtb	r2, r3
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	490e      	ldr	r1, [pc, #56]	@ (800617c <I2C_MasterRequestWrite+0xfc>)
 8006142:	68f8      	ldr	r0, [r7, #12]
 8006144:	f000 f898 	bl	8006278 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d001      	beq.n	8006152 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e010      	b.n	8006174 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006152:	897b      	ldrh	r3, [r7, #10]
 8006154:	b2da      	uxtb	r2, r3
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	4907      	ldr	r1, [pc, #28]	@ (8006180 <I2C_MasterRequestWrite+0x100>)
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f000 f888 	bl	8006278 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d001      	beq.n	8006172 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e000      	b.n	8006174 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3718      	adds	r7, #24
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	00010008 	.word	0x00010008
 8006180:	00010002 	.word	0x00010002

08006184 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	603b      	str	r3, [r7, #0]
 8006190:	4613      	mov	r3, r2
 8006192:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006194:	e048      	b.n	8006228 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800619c:	d044      	beq.n	8006228 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800619e:	f7fc f993 	bl	80024c8 <HAL_GetTick>
 80061a2:	4602      	mov	r2, r0
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	683a      	ldr	r2, [r7, #0]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d302      	bcc.n	80061b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d139      	bne.n	8006228 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	0c1b      	lsrs	r3, r3, #16
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d10d      	bne.n	80061da <I2C_WaitOnFlagUntilTimeout+0x56>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	695b      	ldr	r3, [r3, #20]
 80061c4:	43da      	mvns	r2, r3
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	4013      	ands	r3, r2
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	bf0c      	ite	eq
 80061d0:	2301      	moveq	r3, #1
 80061d2:	2300      	movne	r3, #0
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	461a      	mov	r2, r3
 80061d8:	e00c      	b.n	80061f4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	43da      	mvns	r2, r3
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	4013      	ands	r3, r2
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	bf0c      	ite	eq
 80061ec:	2301      	moveq	r3, #1
 80061ee:	2300      	movne	r3, #0
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	461a      	mov	r2, r3
 80061f4:	79fb      	ldrb	r3, [r7, #7]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d116      	bne.n	8006228 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2220      	movs	r2, #32
 8006204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2200      	movs	r2, #0
 800620c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006214:	f043 0220 	orr.w	r2, r3, #32
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e023      	b.n	8006270 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	0c1b      	lsrs	r3, r3, #16
 800622c:	b2db      	uxtb	r3, r3
 800622e:	2b01      	cmp	r3, #1
 8006230:	d10d      	bne.n	800624e <I2C_WaitOnFlagUntilTimeout+0xca>
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	695b      	ldr	r3, [r3, #20]
 8006238:	43da      	mvns	r2, r3
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	4013      	ands	r3, r2
 800623e:	b29b      	uxth	r3, r3
 8006240:	2b00      	cmp	r3, #0
 8006242:	bf0c      	ite	eq
 8006244:	2301      	moveq	r3, #1
 8006246:	2300      	movne	r3, #0
 8006248:	b2db      	uxtb	r3, r3
 800624a:	461a      	mov	r2, r3
 800624c:	e00c      	b.n	8006268 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	699b      	ldr	r3, [r3, #24]
 8006254:	43da      	mvns	r2, r3
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	4013      	ands	r3, r2
 800625a:	b29b      	uxth	r3, r3
 800625c:	2b00      	cmp	r3, #0
 800625e:	bf0c      	ite	eq
 8006260:	2301      	moveq	r3, #1
 8006262:	2300      	movne	r3, #0
 8006264:	b2db      	uxtb	r3, r3
 8006266:	461a      	mov	r2, r3
 8006268:	79fb      	ldrb	r3, [r7, #7]
 800626a:	429a      	cmp	r2, r3
 800626c:	d093      	beq.n	8006196 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3710      	adds	r7, #16
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
 8006284:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006286:	e071      	b.n	800636c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006292:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006296:	d123      	bne.n	80062e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062a6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80062b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2220      	movs	r2, #32
 80062bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062cc:	f043 0204 	orr.w	r2, r3, #4
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e067      	b.n	80063b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80062e6:	d041      	beq.n	800636c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062e8:	f7fc f8ee 	bl	80024c8 <HAL_GetTick>
 80062ec:	4602      	mov	r2, r0
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d302      	bcc.n	80062fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d136      	bne.n	800636c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	0c1b      	lsrs	r3, r3, #16
 8006302:	b2db      	uxtb	r3, r3
 8006304:	2b01      	cmp	r3, #1
 8006306:	d10c      	bne.n	8006322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	43da      	mvns	r2, r3
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	4013      	ands	r3, r2
 8006314:	b29b      	uxth	r3, r3
 8006316:	2b00      	cmp	r3, #0
 8006318:	bf14      	ite	ne
 800631a:	2301      	movne	r3, #1
 800631c:	2300      	moveq	r3, #0
 800631e:	b2db      	uxtb	r3, r3
 8006320:	e00b      	b.n	800633a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	699b      	ldr	r3, [r3, #24]
 8006328:	43da      	mvns	r2, r3
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	4013      	ands	r3, r2
 800632e:	b29b      	uxth	r3, r3
 8006330:	2b00      	cmp	r3, #0
 8006332:	bf14      	ite	ne
 8006334:	2301      	movne	r3, #1
 8006336:	2300      	moveq	r3, #0
 8006338:	b2db      	uxtb	r3, r3
 800633a:	2b00      	cmp	r3, #0
 800633c:	d016      	beq.n	800636c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2220      	movs	r2, #32
 8006348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006358:	f043 0220 	orr.w	r2, r3, #32
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e021      	b.n	80063b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	0c1b      	lsrs	r3, r3, #16
 8006370:	b2db      	uxtb	r3, r3
 8006372:	2b01      	cmp	r3, #1
 8006374:	d10c      	bne.n	8006390 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	695b      	ldr	r3, [r3, #20]
 800637c:	43da      	mvns	r2, r3
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	4013      	ands	r3, r2
 8006382:	b29b      	uxth	r3, r3
 8006384:	2b00      	cmp	r3, #0
 8006386:	bf14      	ite	ne
 8006388:	2301      	movne	r3, #1
 800638a:	2300      	moveq	r3, #0
 800638c:	b2db      	uxtb	r3, r3
 800638e:	e00b      	b.n	80063a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	43da      	mvns	r2, r3
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	4013      	ands	r3, r2
 800639c:	b29b      	uxth	r3, r3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	bf14      	ite	ne
 80063a2:	2301      	movne	r3, #1
 80063a4:	2300      	moveq	r3, #0
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f47f af6d 	bne.w	8006288 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80063c4:	e034      	b.n	8006430 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	f000 f886 	bl	80064d8 <I2C_IsAcknowledgeFailed>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d001      	beq.n	80063d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e034      	b.n	8006440 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80063dc:	d028      	beq.n	8006430 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063de:	f7fc f873 	bl	80024c8 <HAL_GetTick>
 80063e2:	4602      	mov	r2, r0
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	1ad3      	subs	r3, r2, r3
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d302      	bcc.n	80063f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d11d      	bne.n	8006430 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	695b      	ldr	r3, [r3, #20]
 80063fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063fe:	2b80      	cmp	r3, #128	@ 0x80
 8006400:	d016      	beq.n	8006430 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2220      	movs	r2, #32
 800640c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800641c:	f043 0220 	orr.w	r2, r3, #32
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	e007      	b.n	8006440 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	695b      	ldr	r3, [r3, #20]
 8006436:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800643a:	2b80      	cmp	r3, #128	@ 0x80
 800643c:	d1c3      	bne.n	80063c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800643e:	2300      	movs	r3, #0
}
 8006440:	4618      	mov	r0, r3
 8006442:	3710      	adds	r7, #16
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006454:	e034      	b.n	80064c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	f000 f83e 	bl	80064d8 <I2C_IsAcknowledgeFailed>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d001      	beq.n	8006466 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e034      	b.n	80064d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800646c:	d028      	beq.n	80064c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800646e:	f7fc f82b 	bl	80024c8 <HAL_GetTick>
 8006472:	4602      	mov	r2, r0
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	1ad3      	subs	r3, r2, r3
 8006478:	68ba      	ldr	r2, [r7, #8]
 800647a:	429a      	cmp	r2, r3
 800647c:	d302      	bcc.n	8006484 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d11d      	bne.n	80064c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	695b      	ldr	r3, [r3, #20]
 800648a:	f003 0304 	and.w	r3, r3, #4
 800648e:	2b04      	cmp	r3, #4
 8006490:	d016      	beq.n	80064c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2220      	movs	r2, #32
 800649c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ac:	f043 0220 	orr.w	r2, r3, #32
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	e007      	b.n	80064d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	f003 0304 	and.w	r3, r3, #4
 80064ca:	2b04      	cmp	r3, #4
 80064cc:	d1c3      	bne.n	8006456 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064ee:	d11b      	bne.n	8006528 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80064f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2220      	movs	r2, #32
 8006504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006514:	f043 0204 	orr.w	r2, r3, #4
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e000      	b.n	800652a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	370c      	adds	r7, #12
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr
	...

08006538 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b088      	sub	sp, #32
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d101      	bne.n	800654a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e128      	b.n	800679c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006550:	b2db      	uxtb	r3, r3
 8006552:	2b00      	cmp	r3, #0
 8006554:	d109      	bne.n	800656a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a90      	ldr	r2, [pc, #576]	@ (80067a4 <HAL_I2S_Init+0x26c>)
 8006562:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f7fb f841 	bl	80015ec <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2202      	movs	r2, #2
 800656e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	69db      	ldr	r3, [r3, #28]
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	6812      	ldr	r2, [r2, #0]
 800657c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006580:	f023 030f 	bic.w	r3, r3, #15
 8006584:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2202      	movs	r2, #2
 800658c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	2b02      	cmp	r3, #2
 8006594:	d060      	beq.n	8006658 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d102      	bne.n	80065a4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800659e:	2310      	movs	r3, #16
 80065a0:	617b      	str	r3, [r7, #20]
 80065a2:	e001      	b.n	80065a8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80065a4:	2320      	movs	r3, #32
 80065a6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	2b20      	cmp	r3, #32
 80065ae:	d802      	bhi.n	80065b6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	005b      	lsls	r3, r3, #1
 80065b4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80065b6:	2001      	movs	r0, #1
 80065b8:	f001 fad0 	bl	8007b5c <HAL_RCCEx_GetPeriphCLKFreq>
 80065bc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065c6:	d125      	bne.n	8006614 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d010      	beq.n	80065f2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	68fa      	ldr	r2, [r7, #12]
 80065d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80065da:	4613      	mov	r3, r2
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	4413      	add	r3, r2
 80065e0:	005b      	lsls	r3, r3, #1
 80065e2:	461a      	mov	r2, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	695b      	ldr	r3, [r3, #20]
 80065e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ec:	3305      	adds	r3, #5
 80065ee:	613b      	str	r3, [r7, #16]
 80065f0:	e01f      	b.n	8006632 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	00db      	lsls	r3, r3, #3
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80065fc:	4613      	mov	r3, r2
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	4413      	add	r3, r2
 8006602:	005b      	lsls	r3, r3, #1
 8006604:	461a      	mov	r2, r3
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	695b      	ldr	r3, [r3, #20]
 800660a:	fbb2 f3f3 	udiv	r3, r2, r3
 800660e:	3305      	adds	r3, #5
 8006610:	613b      	str	r3, [r7, #16]
 8006612:	e00e      	b.n	8006632 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	fbb2 f2f3 	udiv	r2, r2, r3
 800661c:	4613      	mov	r3, r2
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	4413      	add	r3, r2
 8006622:	005b      	lsls	r3, r3, #1
 8006624:	461a      	mov	r2, r3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	fbb2 f3f3 	udiv	r3, r2, r3
 800662e:	3305      	adds	r3, #5
 8006630:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	4a5c      	ldr	r2, [pc, #368]	@ (80067a8 <HAL_I2S_Init+0x270>)
 8006636:	fba2 2303 	umull	r2, r3, r2, r3
 800663a:	08db      	lsrs	r3, r3, #3
 800663c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	f003 0301 	and.w	r3, r3, #1
 8006644:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006646:	693a      	ldr	r2, [r7, #16]
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	085b      	lsrs	r3, r3, #1
 800664e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	021b      	lsls	r3, r3, #8
 8006654:	61bb      	str	r3, [r7, #24]
 8006656:	e003      	b.n	8006660 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006658:	2302      	movs	r3, #2
 800665a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800665c:	2300      	movs	r3, #0
 800665e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	2b01      	cmp	r3, #1
 8006664:	d902      	bls.n	800666c <HAL_I2S_Init+0x134>
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	2bff      	cmp	r3, #255	@ 0xff
 800666a:	d907      	bls.n	800667c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006670:	f043 0210 	orr.w	r2, r3, #16
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e08f      	b.n	800679c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	691a      	ldr	r2, [r3, #16]
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	ea42 0103 	orr.w	r1, r2, r3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	69fa      	ldr	r2, [r7, #28]
 800668c:	430a      	orrs	r2, r1
 800668e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	69db      	ldr	r3, [r3, #28]
 8006696:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800669a:	f023 030f 	bic.w	r3, r3, #15
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	6851      	ldr	r1, [r2, #4]
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	6892      	ldr	r2, [r2, #8]
 80066a6:	4311      	orrs	r1, r2
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	68d2      	ldr	r2, [r2, #12]
 80066ac:	4311      	orrs	r1, r2
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	6992      	ldr	r2, [r2, #24]
 80066b2:	430a      	orrs	r2, r1
 80066b4:	431a      	orrs	r2, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80066be:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6a1b      	ldr	r3, [r3, #32]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d161      	bne.n	800678c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a38      	ldr	r2, [pc, #224]	@ (80067ac <HAL_I2S_Init+0x274>)
 80066cc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a37      	ldr	r2, [pc, #220]	@ (80067b0 <HAL_I2S_Init+0x278>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d101      	bne.n	80066dc <HAL_I2S_Init+0x1a4>
 80066d8:	4b36      	ldr	r3, [pc, #216]	@ (80067b4 <HAL_I2S_Init+0x27c>)
 80066da:	e001      	b.n	80066e0 <HAL_I2S_Init+0x1a8>
 80066dc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80066e0:	69db      	ldr	r3, [r3, #28]
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	6812      	ldr	r2, [r2, #0]
 80066e6:	4932      	ldr	r1, [pc, #200]	@ (80067b0 <HAL_I2S_Init+0x278>)
 80066e8:	428a      	cmp	r2, r1
 80066ea:	d101      	bne.n	80066f0 <HAL_I2S_Init+0x1b8>
 80066ec:	4a31      	ldr	r2, [pc, #196]	@ (80067b4 <HAL_I2S_Init+0x27c>)
 80066ee:	e001      	b.n	80066f4 <HAL_I2S_Init+0x1bc>
 80066f0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80066f4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80066f8:	f023 030f 	bic.w	r3, r3, #15
 80066fc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a2b      	ldr	r2, [pc, #172]	@ (80067b0 <HAL_I2S_Init+0x278>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d101      	bne.n	800670c <HAL_I2S_Init+0x1d4>
 8006708:	4b2a      	ldr	r3, [pc, #168]	@ (80067b4 <HAL_I2S_Init+0x27c>)
 800670a:	e001      	b.n	8006710 <HAL_I2S_Init+0x1d8>
 800670c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006710:	2202      	movs	r2, #2
 8006712:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a25      	ldr	r2, [pc, #148]	@ (80067b0 <HAL_I2S_Init+0x278>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d101      	bne.n	8006722 <HAL_I2S_Init+0x1ea>
 800671e:	4b25      	ldr	r3, [pc, #148]	@ (80067b4 <HAL_I2S_Init+0x27c>)
 8006720:	e001      	b.n	8006726 <HAL_I2S_Init+0x1ee>
 8006722:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006726:	69db      	ldr	r3, [r3, #28]
 8006728:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006732:	d003      	beq.n	800673c <HAL_I2S_Init+0x204>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d103      	bne.n	8006744 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800673c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006740:	613b      	str	r3, [r7, #16]
 8006742:	e001      	b.n	8006748 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006744:	2300      	movs	r3, #0
 8006746:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006752:	4313      	orrs	r3, r2
 8006754:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800675c:	4313      	orrs	r3, r2
 800675e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006766:	4313      	orrs	r3, r2
 8006768:	b29a      	uxth	r2, r3
 800676a:	897b      	ldrh	r3, [r7, #10]
 800676c:	4313      	orrs	r3, r2
 800676e:	b29b      	uxth	r3, r3
 8006770:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006774:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a0d      	ldr	r2, [pc, #52]	@ (80067b0 <HAL_I2S_Init+0x278>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d101      	bne.n	8006784 <HAL_I2S_Init+0x24c>
 8006780:	4b0c      	ldr	r3, [pc, #48]	@ (80067b4 <HAL_I2S_Init+0x27c>)
 8006782:	e001      	b.n	8006788 <HAL_I2S_Init+0x250>
 8006784:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006788:	897a      	ldrh	r2, [r7, #10]
 800678a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2201      	movs	r2, #1
 8006796:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3720      	adds	r7, #32
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	08006aa1 	.word	0x08006aa1
 80067a8:	cccccccd 	.word	0xcccccccd
 80067ac:	08006bb5 	.word	0x08006bb5
 80067b0:	40003800 	.word	0x40003800
 80067b4:	40003400 	.word	0x40003400

080067b8 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b086      	sub	sp, #24
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	4613      	mov	r3, r2
 80067c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d002      	beq.n	80067d2 <HAL_I2S_Transmit_DMA+0x1a>
 80067cc:	88fb      	ldrh	r3, [r7, #6]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d101      	bne.n	80067d6 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e08a      	b.n	80068ec <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d001      	beq.n	80067e6 <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 80067e2:	2302      	movs	r3, #2
 80067e4:	e082      	b.n	80068ec <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d101      	bne.n	80067f6 <HAL_I2S_Transmit_DMA+0x3e>
 80067f2:	2302      	movs	r3, #2
 80067f4:	e07a      	b.n	80068ec <HAL_I2S_Transmit_DMA+0x134>
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2203      	movs	r2, #3
 8006802:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	68ba      	ldr	r2, [r7, #8]
 8006810:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	69db      	ldr	r3, [r3, #28]
 8006818:	f003 0307 	and.w	r3, r3, #7
 800681c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	2b03      	cmp	r3, #3
 8006822:	d002      	beq.n	800682a <HAL_I2S_Transmit_DMA+0x72>
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	2b05      	cmp	r3, #5
 8006828:	d10a      	bne.n	8006840 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 800682a:	88fb      	ldrh	r3, [r7, #6]
 800682c:	005b      	lsls	r3, r3, #1
 800682e:	b29a      	uxth	r2, r3
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8006834:	88fb      	ldrh	r3, [r7, #6]
 8006836:	005b      	lsls	r3, r3, #1
 8006838:	b29a      	uxth	r2, r3
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800683e:	e005      	b.n	800684c <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	88fa      	ldrh	r2, [r7, #6]
 8006844:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	88fa      	ldrh	r2, [r7, #6]
 800684a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006850:	4a28      	ldr	r2, [pc, #160]	@ (80068f4 <HAL_I2S_Transmit_DMA+0x13c>)
 8006852:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006858:	4a27      	ldr	r2, [pc, #156]	@ (80068f8 <HAL_I2S_Transmit_DMA+0x140>)
 800685a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006860:	4a26      	ldr	r2, [pc, #152]	@ (80068fc <HAL_I2S_Transmit_DMA+0x144>)
 8006862:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800686c:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006874:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800687a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800687c:	f7fc fc12 	bl	80030a4 <HAL_DMA_Start_IT>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00f      	beq.n	80068a6 <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800688a:	f043 0208 	orr.w	r2, r3, #8
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e022      	b.n	80068ec <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	f003 0302 	and.w	r3, r3, #2
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d107      	bne.n	80068cc <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	685a      	ldr	r2, [r3, #4]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f042 0202 	orr.w	r2, r2, #2
 80068ca:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	69db      	ldr	r3, [r3, #28]
 80068d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d107      	bne.n	80068ea <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	69da      	ldr	r2, [r3, #28]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80068e8:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3718      	adds	r7, #24
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	0800697f 	.word	0x0800697f
 80068f8:	0800693d 	.word	0x0800693d
 80068fc:	0800699b 	.word	0x0800699b

08006900 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006908:	bf00      	nop
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800691c:	bf00      	nop
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006930:	bf00      	nop
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006948:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	69db      	ldr	r3, [r3, #28]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d10e      	bne.n	8006970 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	685a      	ldr	r2, [r3, #4]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f022 0202 	bic.w	r2, r2, #2
 8006960:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8006970:	68f8      	ldr	r0, [r7, #12]
 8006972:	f7fb faaf 	bl	8001ed4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006976:	bf00      	nop
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800697e:	b580      	push	{r7, lr}
 8006980:	b084      	sub	sp, #16
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800698a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	f7ff ffb7 	bl	8006900 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006992:	bf00      	nop
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}

0800699a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800699a:	b580      	push	{r7, lr}
 800699c:	b084      	sub	sp, #16
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069a6:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	685a      	ldr	r2, [r3, #4]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f022 0203 	bic.w	r2, r2, #3
 80069b6:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2200      	movs	r2, #0
 80069c2:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069d0:	f043 0208 	orr.w	r2, r3, #8
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	f7ff ffa5 	bl	8006928 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80069de:	bf00      	nop
 80069e0:	3710      	adds	r7, #16
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b082      	sub	sp, #8
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f2:	881a      	ldrh	r2, [r3, #0]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069fe:	1c9a      	adds	r2, r3, #2
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	3b01      	subs	r3, #1
 8006a0c:	b29a      	uxth	r2, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d10e      	bne.n	8006a3a <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	685a      	ldr	r2, [r3, #4]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006a2a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f7fb fa4d 	bl	8001ed4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006a3a:	bf00      	nop
 8006a3c:	3708      	adds	r7, #8
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b082      	sub	sp, #8
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68da      	ldr	r2, [r3, #12]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a54:	b292      	uxth	r2, r2
 8006a56:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a5c:	1c9a      	adds	r2, r3, #2
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	b29a      	uxth	r2, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d10e      	bne.n	8006a98 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	685a      	ldr	r2, [r3, #4]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006a88:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f7ff ff3e 	bl	8006914 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006a98:	bf00      	nop
 8006a9a:	3708      	adds	r7, #8
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b086      	sub	sp, #24
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	2b04      	cmp	r3, #4
 8006aba:	d13a      	bne.n	8006b32 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	f003 0301 	and.w	r3, r3, #1
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d109      	bne.n	8006ada <I2S_IRQHandler+0x3a>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ad0:	2b40      	cmp	r3, #64	@ 0x40
 8006ad2:	d102      	bne.n	8006ada <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f7ff ffb4 	bl	8006a42 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ae0:	2b40      	cmp	r3, #64	@ 0x40
 8006ae2:	d126      	bne.n	8006b32 <I2S_IRQHandler+0x92>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	f003 0320 	and.w	r3, r3, #32
 8006aee:	2b20      	cmp	r3, #32
 8006af0:	d11f      	bne.n	8006b32 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	685a      	ldr	r2, [r3, #4]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006b00:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006b02:	2300      	movs	r3, #0
 8006b04:	613b      	str	r3, [r7, #16]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	613b      	str	r3, [r7, #16]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	613b      	str	r3, [r7, #16]
 8006b16:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b24:	f043 0202 	orr.w	r2, r3, #2
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f7ff fefb 	bl	8006928 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b03      	cmp	r3, #3
 8006b3c:	d136      	bne.n	8006bac <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	f003 0302 	and.w	r3, r3, #2
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d109      	bne.n	8006b5c <I2S_IRQHandler+0xbc>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b52:	2b80      	cmp	r3, #128	@ 0x80
 8006b54:	d102      	bne.n	8006b5c <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f7ff ff45 	bl	80069e6 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	f003 0308 	and.w	r3, r3, #8
 8006b62:	2b08      	cmp	r3, #8
 8006b64:	d122      	bne.n	8006bac <I2S_IRQHandler+0x10c>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	f003 0320 	and.w	r3, r3, #32
 8006b70:	2b20      	cmp	r3, #32
 8006b72:	d11b      	bne.n	8006bac <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	685a      	ldr	r2, [r3, #4]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006b82:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006b84:	2300      	movs	r3, #0
 8006b86:	60fb      	str	r3, [r7, #12]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	60fb      	str	r3, [r7, #12]
 8006b90:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2201      	movs	r2, #1
 8006b96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b9e:	f043 0204 	orr.w	r2, r3, #4
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f7ff febe 	bl	8006928 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006bac:	bf00      	nop
 8006bae:	3718      	adds	r7, #24
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b088      	sub	sp, #32
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a92      	ldr	r2, [pc, #584]	@ (8006e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d101      	bne.n	8006bd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006bce:	4b92      	ldr	r3, [pc, #584]	@ (8006e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006bd0:	e001      	b.n	8006bd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006bd2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a8b      	ldr	r2, [pc, #556]	@ (8006e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d101      	bne.n	8006bf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006bec:	4b8a      	ldr	r3, [pc, #552]	@ (8006e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006bee:	e001      	b.n	8006bf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006bf0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c00:	d004      	beq.n	8006c0c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	f040 8099 	bne.w	8006d3e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	f003 0302 	and.w	r3, r3, #2
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d107      	bne.n	8006c26 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d002      	beq.n	8006c26 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 f925 	bl	8006e70 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	f003 0301 	and.w	r3, r3, #1
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d107      	bne.n	8006c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d002      	beq.n	8006c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f9c8 	bl	8006fd0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c46:	2b40      	cmp	r3, #64	@ 0x40
 8006c48:	d13a      	bne.n	8006cc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	f003 0320 	and.w	r3, r3, #32
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d035      	beq.n	8006cc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a6e      	ldr	r2, [pc, #440]	@ (8006e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d101      	bne.n	8006c62 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006c5e:	4b6e      	ldr	r3, [pc, #440]	@ (8006e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006c60:	e001      	b.n	8006c66 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006c62:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006c66:	685a      	ldr	r2, [r3, #4]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4969      	ldr	r1, [pc, #420]	@ (8006e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006c6e:	428b      	cmp	r3, r1
 8006c70:	d101      	bne.n	8006c76 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006c72:	4b69      	ldr	r3, [pc, #420]	@ (8006e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006c74:	e001      	b.n	8006c7a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006c76:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006c7a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006c7e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	685a      	ldr	r2, [r3, #4]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006c8e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006c90:	2300      	movs	r3, #0
 8006c92:	60fb      	str	r3, [r7, #12]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	60fb      	str	r3, [r7, #12]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	60fb      	str	r3, [r7, #12]
 8006ca4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cb2:	f043 0202 	orr.w	r2, r3, #2
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f7ff fe34 	bl	8006928 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	f003 0308 	and.w	r3, r3, #8
 8006cc6:	2b08      	cmp	r3, #8
 8006cc8:	f040 80c3 	bne.w	8006e52 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	f003 0320 	and.w	r3, r3, #32
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f000 80bd 	beq.w	8006e52 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	685a      	ldr	r2, [r3, #4]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006ce6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a49      	ldr	r2, [pc, #292]	@ (8006e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d101      	bne.n	8006cf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006cf2:	4b49      	ldr	r3, [pc, #292]	@ (8006e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006cf4:	e001      	b.n	8006cfa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006cf6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006cfa:	685a      	ldr	r2, [r3, #4]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4944      	ldr	r1, [pc, #272]	@ (8006e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006d02:	428b      	cmp	r3, r1
 8006d04:	d101      	bne.n	8006d0a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006d06:	4b44      	ldr	r3, [pc, #272]	@ (8006e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006d08:	e001      	b.n	8006d0e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006d0a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006d0e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006d12:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006d14:	2300      	movs	r3, #0
 8006d16:	60bb      	str	r3, [r7, #8]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	60bb      	str	r3, [r7, #8]
 8006d20:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2201      	movs	r2, #1
 8006d26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d2e:	f043 0204 	orr.w	r2, r3, #4
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f7ff fdf6 	bl	8006928 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006d3c:	e089      	b.n	8006e52 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	f003 0302 	and.w	r3, r3, #2
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	d107      	bne.n	8006d58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d002      	beq.n	8006d58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 f8be 	bl	8006ed4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d107      	bne.n	8006d72 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d002      	beq.n	8006d72 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 f8fd 	bl	8006f6c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d78:	2b40      	cmp	r3, #64	@ 0x40
 8006d7a:	d12f      	bne.n	8006ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	f003 0320 	and.w	r3, r3, #32
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d02a      	beq.n	8006ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	685a      	ldr	r2, [r3, #4]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006d94:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a1e      	ldr	r2, [pc, #120]	@ (8006e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d101      	bne.n	8006da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006da0:	4b1d      	ldr	r3, [pc, #116]	@ (8006e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006da2:	e001      	b.n	8006da8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006da4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006da8:	685a      	ldr	r2, [r3, #4]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4919      	ldr	r1, [pc, #100]	@ (8006e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006db0:	428b      	cmp	r3, r1
 8006db2:	d101      	bne.n	8006db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006db4:	4b18      	ldr	r3, [pc, #96]	@ (8006e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006db6:	e001      	b.n	8006dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006db8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006dbc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006dc0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dce:	f043 0202 	orr.w	r2, r3, #2
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f7ff fda6 	bl	8006928 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	f003 0308 	and.w	r3, r3, #8
 8006de2:	2b08      	cmp	r3, #8
 8006de4:	d136      	bne.n	8006e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	f003 0320 	and.w	r3, r3, #32
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d031      	beq.n	8006e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a07      	ldr	r2, [pc, #28]	@ (8006e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d101      	bne.n	8006dfe <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006dfa:	4b07      	ldr	r3, [pc, #28]	@ (8006e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006dfc:	e001      	b.n	8006e02 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006dfe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006e02:	685a      	ldr	r2, [r3, #4]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4902      	ldr	r1, [pc, #8]	@ (8006e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006e0a:	428b      	cmp	r3, r1
 8006e0c:	d106      	bne.n	8006e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8006e0e:	4b02      	ldr	r3, [pc, #8]	@ (8006e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006e10:	e006      	b.n	8006e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006e12:	bf00      	nop
 8006e14:	40003800 	.word	0x40003800
 8006e18:	40003400 	.word	0x40003400
 8006e1c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006e20:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006e24:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	685a      	ldr	r2, [r3, #4]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006e34:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e42:	f043 0204 	orr.w	r2, r3, #4
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f7ff fd6c 	bl	8006928 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006e50:	e000      	b.n	8006e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006e52:	bf00      	nop
}
 8006e54:	bf00      	nop
 8006e56:	3720      	adds	r7, #32
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006e64:	bf00      	nop
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e7c:	1c99      	adds	r1, r3, #2
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	6251      	str	r1, [r2, #36]	@ 0x24
 8006e82:	881a      	ldrh	r2, [r3, #0]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	3b01      	subs	r3, #1
 8006e92:	b29a      	uxth	r2, r3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d113      	bne.n	8006eca <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	685a      	ldr	r2, [r3, #4]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006eb0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d106      	bne.n	8006eca <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f7ff ffc9 	bl	8006e5c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006eca:	bf00      	nop
 8006ecc:	3708      	adds	r7, #8
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
	...

08006ed4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ee0:	1c99      	adds	r1, r3, #2
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	6251      	str	r1, [r2, #36]	@ 0x24
 8006ee6:	8819      	ldrh	r1, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a1d      	ldr	r2, [pc, #116]	@ (8006f64 <I2SEx_TxISR_I2SExt+0x90>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d101      	bne.n	8006ef6 <I2SEx_TxISR_I2SExt+0x22>
 8006ef2:	4b1d      	ldr	r3, [pc, #116]	@ (8006f68 <I2SEx_TxISR_I2SExt+0x94>)
 8006ef4:	e001      	b.n	8006efa <I2SEx_TxISR_I2SExt+0x26>
 8006ef6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006efa:	460a      	mov	r2, r1
 8006efc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	3b01      	subs	r3, #1
 8006f06:	b29a      	uxth	r2, r3
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d121      	bne.n	8006f5a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a12      	ldr	r2, [pc, #72]	@ (8006f64 <I2SEx_TxISR_I2SExt+0x90>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d101      	bne.n	8006f24 <I2SEx_TxISR_I2SExt+0x50>
 8006f20:	4b11      	ldr	r3, [pc, #68]	@ (8006f68 <I2SEx_TxISR_I2SExt+0x94>)
 8006f22:	e001      	b.n	8006f28 <I2SEx_TxISR_I2SExt+0x54>
 8006f24:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006f28:	685a      	ldr	r2, [r3, #4]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	490d      	ldr	r1, [pc, #52]	@ (8006f64 <I2SEx_TxISR_I2SExt+0x90>)
 8006f30:	428b      	cmp	r3, r1
 8006f32:	d101      	bne.n	8006f38 <I2SEx_TxISR_I2SExt+0x64>
 8006f34:	4b0c      	ldr	r3, [pc, #48]	@ (8006f68 <I2SEx_TxISR_I2SExt+0x94>)
 8006f36:	e001      	b.n	8006f3c <I2SEx_TxISR_I2SExt+0x68>
 8006f38:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006f3c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006f40:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d106      	bne.n	8006f5a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f7ff ff81 	bl	8006e5c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006f5a:	bf00      	nop
 8006f5c:	3708      	adds	r7, #8
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	40003800 	.word	0x40003800
 8006f68:	40003400 	.word	0x40003400

08006f6c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68d8      	ldr	r0, [r3, #12]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f7e:	1c99      	adds	r1, r3, #2
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006f84:	b282      	uxth	r2, r0
 8006f86:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	3b01      	subs	r3, #1
 8006f90:	b29a      	uxth	r2, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d113      	bne.n	8006fc8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	685a      	ldr	r2, [r3, #4]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006fae:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d106      	bne.n	8006fc8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f7ff ff4a 	bl	8006e5c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006fc8:	bf00      	nop
 8006fca:	3708      	adds	r7, #8
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a20      	ldr	r2, [pc, #128]	@ (8007060 <I2SEx_RxISR_I2SExt+0x90>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d101      	bne.n	8006fe6 <I2SEx_RxISR_I2SExt+0x16>
 8006fe2:	4b20      	ldr	r3, [pc, #128]	@ (8007064 <I2SEx_RxISR_I2SExt+0x94>)
 8006fe4:	e001      	b.n	8006fea <I2SEx_RxISR_I2SExt+0x1a>
 8006fe6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006fea:	68d8      	ldr	r0, [r3, #12]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ff0:	1c99      	adds	r1, r3, #2
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006ff6:	b282      	uxth	r2, r0
 8006ff8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	3b01      	subs	r3, #1
 8007002:	b29a      	uxth	r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800700c:	b29b      	uxth	r3, r3
 800700e:	2b00      	cmp	r3, #0
 8007010:	d121      	bne.n	8007056 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a12      	ldr	r2, [pc, #72]	@ (8007060 <I2SEx_RxISR_I2SExt+0x90>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d101      	bne.n	8007020 <I2SEx_RxISR_I2SExt+0x50>
 800701c:	4b11      	ldr	r3, [pc, #68]	@ (8007064 <I2SEx_RxISR_I2SExt+0x94>)
 800701e:	e001      	b.n	8007024 <I2SEx_RxISR_I2SExt+0x54>
 8007020:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007024:	685a      	ldr	r2, [r3, #4]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	490d      	ldr	r1, [pc, #52]	@ (8007060 <I2SEx_RxISR_I2SExt+0x90>)
 800702c:	428b      	cmp	r3, r1
 800702e:	d101      	bne.n	8007034 <I2SEx_RxISR_I2SExt+0x64>
 8007030:	4b0c      	ldr	r3, [pc, #48]	@ (8007064 <I2SEx_RxISR_I2SExt+0x94>)
 8007032:	e001      	b.n	8007038 <I2SEx_RxISR_I2SExt+0x68>
 8007034:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007038:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800703c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007042:	b29b      	uxth	r3, r3
 8007044:	2b00      	cmp	r3, #0
 8007046:	d106      	bne.n	8007056 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f7ff ff03 	bl	8006e5c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007056:	bf00      	nop
 8007058:	3708      	adds	r7, #8
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	40003800 	.word	0x40003800
 8007064:	40003400 	.word	0x40003400

08007068 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b086      	sub	sp, #24
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d101      	bne.n	800707a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e267      	b.n	800754a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0301 	and.w	r3, r3, #1
 8007082:	2b00      	cmp	r3, #0
 8007084:	d075      	beq.n	8007172 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007086:	4b88      	ldr	r3, [pc, #544]	@ (80072a8 <HAL_RCC_OscConfig+0x240>)
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f003 030c 	and.w	r3, r3, #12
 800708e:	2b04      	cmp	r3, #4
 8007090:	d00c      	beq.n	80070ac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007092:	4b85      	ldr	r3, [pc, #532]	@ (80072a8 <HAL_RCC_OscConfig+0x240>)
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800709a:	2b08      	cmp	r3, #8
 800709c:	d112      	bne.n	80070c4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800709e:	4b82      	ldr	r3, [pc, #520]	@ (80072a8 <HAL_RCC_OscConfig+0x240>)
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80070aa:	d10b      	bne.n	80070c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070ac:	4b7e      	ldr	r3, [pc, #504]	@ (80072a8 <HAL_RCC_OscConfig+0x240>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d05b      	beq.n	8007170 <HAL_RCC_OscConfig+0x108>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d157      	bne.n	8007170 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	e242      	b.n	800754a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070cc:	d106      	bne.n	80070dc <HAL_RCC_OscConfig+0x74>
 80070ce:	4b76      	ldr	r3, [pc, #472]	@ (80072a8 <HAL_RCC_OscConfig+0x240>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a75      	ldr	r2, [pc, #468]	@ (80072a8 <HAL_RCC_OscConfig+0x240>)
 80070d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070d8:	6013      	str	r3, [r2, #0]
 80070da:	e01d      	b.n	8007118 <HAL_RCC_OscConfig+0xb0>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80070e4:	d10c      	bne.n	8007100 <HAL_RCC_OscConfig+0x98>
 80070e6:	4b70      	ldr	r3, [pc, #448]	@ (80072a8 <HAL_RCC_OscConfig+0x240>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a6f      	ldr	r2, [pc, #444]	@ (80072a8 <HAL_RCC_OscConfig+0x240>)
 80070ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80070f0:	6013      	str	r3, [r2, #0]
 80070f2:	4b6d      	ldr	r3, [pc, #436]	@ (80072a8 <HAL_RCC_OscConfig+0x240>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a6c      	ldr	r2, [pc, #432]	@ (80072a8 <HAL_RCC_OscConfig+0x240>)
 80070f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070fc:	6013      	str	r3, [r2, #0]
 80070fe:	e00b      	b.n	8007118 <HAL_RCC_OscConfig+0xb0>
 8007100:	4b69      	ldr	r3, [pc, #420]	@ (80072a8 <HAL_RCC_OscConfig+0x240>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a68      	ldr	r2, [pc, #416]	@ (80072a8 <HAL_RCC_OscConfig+0x240>)
 8007106:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800710a:	6013      	str	r3, [r2, #0]
 800710c:	4b66      	ldr	r3, [pc, #408]	@ (80072a8 <HAL_RCC_OscConfig+0x240>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a65      	ldr	r2, [pc, #404]	@ (80072a8 <HAL_RCC_OscConfig+0x240>)
 8007112:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007116:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d013      	beq.n	8007148 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007120:	f7fb f9d2 	bl	80024c8 <HAL_GetTick>
 8007124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007126:	e008      	b.n	800713a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007128:	f7fb f9ce 	bl	80024c8 <HAL_GetTick>
 800712c:	4602      	mov	r2, r0
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	2b64      	cmp	r3, #100	@ 0x64
 8007134:	d901      	bls.n	800713a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007136:	2303      	movs	r3, #3
 8007138:	e207      	b.n	800754a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800713a:	4b5b      	ldr	r3, [pc, #364]	@ (80072a8 <HAL_RCC_OscConfig+0x240>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007142:	2b00      	cmp	r3, #0
 8007144:	d0f0      	beq.n	8007128 <HAL_RCC_OscConfig+0xc0>
 8007146:	e014      	b.n	8007172 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007148:	f7fb f9be 	bl	80024c8 <HAL_GetTick>
 800714c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800714e:	e008      	b.n	8007162 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007150:	f7fb f9ba 	bl	80024c8 <HAL_GetTick>
 8007154:	4602      	mov	r2, r0
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	2b64      	cmp	r3, #100	@ 0x64
 800715c:	d901      	bls.n	8007162 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800715e:	2303      	movs	r3, #3
 8007160:	e1f3      	b.n	800754a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007162:	4b51      	ldr	r3, [pc, #324]	@ (80072a8 <HAL_RCC_OscConfig+0x240>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1f0      	bne.n	8007150 <HAL_RCC_OscConfig+0xe8>
 800716e:	e000      	b.n	8007172 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 0302 	and.w	r3, r3, #2
 800717a:	2b00      	cmp	r3, #0
 800717c:	d063      	beq.n	8007246 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800717e:	4b4a      	ldr	r3, [pc, #296]	@ (80072a8 <HAL_RCC_OscConfig+0x240>)
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	f003 030c 	and.w	r3, r3, #12
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00b      	beq.n	80071a2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800718a:	4b47      	ldr	r3, [pc, #284]	@ (80072a8 <HAL_RCC_OscConfig+0x240>)
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007192:	2b08      	cmp	r3, #8
 8007194:	d11c      	bne.n	80071d0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007196:	4b44      	ldr	r3, [pc, #272]	@ (80072a8 <HAL_RCC_OscConfig+0x240>)
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d116      	bne.n	80071d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071a2:	4b41      	ldr	r3, [pc, #260]	@ (80072a8 <HAL_RCC_OscConfig+0x240>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f003 0302 	and.w	r3, r3, #2
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d005      	beq.n	80071ba <HAL_RCC_OscConfig+0x152>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d001      	beq.n	80071ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	e1c7      	b.n	800754a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071ba:	4b3b      	ldr	r3, [pc, #236]	@ (80072a8 <HAL_RCC_OscConfig+0x240>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	00db      	lsls	r3, r3, #3
 80071c8:	4937      	ldr	r1, [pc, #220]	@ (80072a8 <HAL_RCC_OscConfig+0x240>)
 80071ca:	4313      	orrs	r3, r2
 80071cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071ce:	e03a      	b.n	8007246 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d020      	beq.n	800721a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80071d8:	4b34      	ldr	r3, [pc, #208]	@ (80072ac <HAL_RCC_OscConfig+0x244>)
 80071da:	2201      	movs	r2, #1
 80071dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071de:	f7fb f973 	bl	80024c8 <HAL_GetTick>
 80071e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071e4:	e008      	b.n	80071f8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071e6:	f7fb f96f 	bl	80024c8 <HAL_GetTick>
 80071ea:	4602      	mov	r2, r0
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	1ad3      	subs	r3, r2, r3
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	d901      	bls.n	80071f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80071f4:	2303      	movs	r3, #3
 80071f6:	e1a8      	b.n	800754a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071f8:	4b2b      	ldr	r3, [pc, #172]	@ (80072a8 <HAL_RCC_OscConfig+0x240>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 0302 	and.w	r3, r3, #2
 8007200:	2b00      	cmp	r3, #0
 8007202:	d0f0      	beq.n	80071e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007204:	4b28      	ldr	r3, [pc, #160]	@ (80072a8 <HAL_RCC_OscConfig+0x240>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	00db      	lsls	r3, r3, #3
 8007212:	4925      	ldr	r1, [pc, #148]	@ (80072a8 <HAL_RCC_OscConfig+0x240>)
 8007214:	4313      	orrs	r3, r2
 8007216:	600b      	str	r3, [r1, #0]
 8007218:	e015      	b.n	8007246 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800721a:	4b24      	ldr	r3, [pc, #144]	@ (80072ac <HAL_RCC_OscConfig+0x244>)
 800721c:	2200      	movs	r2, #0
 800721e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007220:	f7fb f952 	bl	80024c8 <HAL_GetTick>
 8007224:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007226:	e008      	b.n	800723a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007228:	f7fb f94e 	bl	80024c8 <HAL_GetTick>
 800722c:	4602      	mov	r2, r0
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	2b02      	cmp	r3, #2
 8007234:	d901      	bls.n	800723a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	e187      	b.n	800754a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800723a:	4b1b      	ldr	r3, [pc, #108]	@ (80072a8 <HAL_RCC_OscConfig+0x240>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 0302 	and.w	r3, r3, #2
 8007242:	2b00      	cmp	r3, #0
 8007244:	d1f0      	bne.n	8007228 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f003 0308 	and.w	r3, r3, #8
 800724e:	2b00      	cmp	r3, #0
 8007250:	d036      	beq.n	80072c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	695b      	ldr	r3, [r3, #20]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d016      	beq.n	8007288 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800725a:	4b15      	ldr	r3, [pc, #84]	@ (80072b0 <HAL_RCC_OscConfig+0x248>)
 800725c:	2201      	movs	r2, #1
 800725e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007260:	f7fb f932 	bl	80024c8 <HAL_GetTick>
 8007264:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007266:	e008      	b.n	800727a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007268:	f7fb f92e 	bl	80024c8 <HAL_GetTick>
 800726c:	4602      	mov	r2, r0
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	2b02      	cmp	r3, #2
 8007274:	d901      	bls.n	800727a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e167      	b.n	800754a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800727a:	4b0b      	ldr	r3, [pc, #44]	@ (80072a8 <HAL_RCC_OscConfig+0x240>)
 800727c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800727e:	f003 0302 	and.w	r3, r3, #2
 8007282:	2b00      	cmp	r3, #0
 8007284:	d0f0      	beq.n	8007268 <HAL_RCC_OscConfig+0x200>
 8007286:	e01b      	b.n	80072c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007288:	4b09      	ldr	r3, [pc, #36]	@ (80072b0 <HAL_RCC_OscConfig+0x248>)
 800728a:	2200      	movs	r2, #0
 800728c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800728e:	f7fb f91b 	bl	80024c8 <HAL_GetTick>
 8007292:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007294:	e00e      	b.n	80072b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007296:	f7fb f917 	bl	80024c8 <HAL_GetTick>
 800729a:	4602      	mov	r2, r0
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	1ad3      	subs	r3, r2, r3
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	d907      	bls.n	80072b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80072a4:	2303      	movs	r3, #3
 80072a6:	e150      	b.n	800754a <HAL_RCC_OscConfig+0x4e2>
 80072a8:	40023800 	.word	0x40023800
 80072ac:	42470000 	.word	0x42470000
 80072b0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072b4:	4b88      	ldr	r3, [pc, #544]	@ (80074d8 <HAL_RCC_OscConfig+0x470>)
 80072b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072b8:	f003 0302 	and.w	r3, r3, #2
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d1ea      	bne.n	8007296 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 0304 	and.w	r3, r3, #4
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f000 8097 	beq.w	80073fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80072ce:	2300      	movs	r3, #0
 80072d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80072d2:	4b81      	ldr	r3, [pc, #516]	@ (80074d8 <HAL_RCC_OscConfig+0x470>)
 80072d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d10f      	bne.n	80072fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072de:	2300      	movs	r3, #0
 80072e0:	60bb      	str	r3, [r7, #8]
 80072e2:	4b7d      	ldr	r3, [pc, #500]	@ (80074d8 <HAL_RCC_OscConfig+0x470>)
 80072e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072e6:	4a7c      	ldr	r2, [pc, #496]	@ (80074d8 <HAL_RCC_OscConfig+0x470>)
 80072e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80072ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80072ee:	4b7a      	ldr	r3, [pc, #488]	@ (80074d8 <HAL_RCC_OscConfig+0x470>)
 80072f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072f6:	60bb      	str	r3, [r7, #8]
 80072f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072fa:	2301      	movs	r3, #1
 80072fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072fe:	4b77      	ldr	r3, [pc, #476]	@ (80074dc <HAL_RCC_OscConfig+0x474>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007306:	2b00      	cmp	r3, #0
 8007308:	d118      	bne.n	800733c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800730a:	4b74      	ldr	r3, [pc, #464]	@ (80074dc <HAL_RCC_OscConfig+0x474>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a73      	ldr	r2, [pc, #460]	@ (80074dc <HAL_RCC_OscConfig+0x474>)
 8007310:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007314:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007316:	f7fb f8d7 	bl	80024c8 <HAL_GetTick>
 800731a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800731c:	e008      	b.n	8007330 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800731e:	f7fb f8d3 	bl	80024c8 <HAL_GetTick>
 8007322:	4602      	mov	r2, r0
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	1ad3      	subs	r3, r2, r3
 8007328:	2b02      	cmp	r3, #2
 800732a:	d901      	bls.n	8007330 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800732c:	2303      	movs	r3, #3
 800732e:	e10c      	b.n	800754a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007330:	4b6a      	ldr	r3, [pc, #424]	@ (80074dc <HAL_RCC_OscConfig+0x474>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007338:	2b00      	cmp	r3, #0
 800733a:	d0f0      	beq.n	800731e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	2b01      	cmp	r3, #1
 8007342:	d106      	bne.n	8007352 <HAL_RCC_OscConfig+0x2ea>
 8007344:	4b64      	ldr	r3, [pc, #400]	@ (80074d8 <HAL_RCC_OscConfig+0x470>)
 8007346:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007348:	4a63      	ldr	r2, [pc, #396]	@ (80074d8 <HAL_RCC_OscConfig+0x470>)
 800734a:	f043 0301 	orr.w	r3, r3, #1
 800734e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007350:	e01c      	b.n	800738c <HAL_RCC_OscConfig+0x324>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	2b05      	cmp	r3, #5
 8007358:	d10c      	bne.n	8007374 <HAL_RCC_OscConfig+0x30c>
 800735a:	4b5f      	ldr	r3, [pc, #380]	@ (80074d8 <HAL_RCC_OscConfig+0x470>)
 800735c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800735e:	4a5e      	ldr	r2, [pc, #376]	@ (80074d8 <HAL_RCC_OscConfig+0x470>)
 8007360:	f043 0304 	orr.w	r3, r3, #4
 8007364:	6713      	str	r3, [r2, #112]	@ 0x70
 8007366:	4b5c      	ldr	r3, [pc, #368]	@ (80074d8 <HAL_RCC_OscConfig+0x470>)
 8007368:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800736a:	4a5b      	ldr	r2, [pc, #364]	@ (80074d8 <HAL_RCC_OscConfig+0x470>)
 800736c:	f043 0301 	orr.w	r3, r3, #1
 8007370:	6713      	str	r3, [r2, #112]	@ 0x70
 8007372:	e00b      	b.n	800738c <HAL_RCC_OscConfig+0x324>
 8007374:	4b58      	ldr	r3, [pc, #352]	@ (80074d8 <HAL_RCC_OscConfig+0x470>)
 8007376:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007378:	4a57      	ldr	r2, [pc, #348]	@ (80074d8 <HAL_RCC_OscConfig+0x470>)
 800737a:	f023 0301 	bic.w	r3, r3, #1
 800737e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007380:	4b55      	ldr	r3, [pc, #340]	@ (80074d8 <HAL_RCC_OscConfig+0x470>)
 8007382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007384:	4a54      	ldr	r2, [pc, #336]	@ (80074d8 <HAL_RCC_OscConfig+0x470>)
 8007386:	f023 0304 	bic.w	r3, r3, #4
 800738a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d015      	beq.n	80073c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007394:	f7fb f898 	bl	80024c8 <HAL_GetTick>
 8007398:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800739a:	e00a      	b.n	80073b2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800739c:	f7fb f894 	bl	80024c8 <HAL_GetTick>
 80073a0:	4602      	mov	r2, r0
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	1ad3      	subs	r3, r2, r3
 80073a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d901      	bls.n	80073b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e0cb      	b.n	800754a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073b2:	4b49      	ldr	r3, [pc, #292]	@ (80074d8 <HAL_RCC_OscConfig+0x470>)
 80073b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073b6:	f003 0302 	and.w	r3, r3, #2
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d0ee      	beq.n	800739c <HAL_RCC_OscConfig+0x334>
 80073be:	e014      	b.n	80073ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073c0:	f7fb f882 	bl	80024c8 <HAL_GetTick>
 80073c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073c6:	e00a      	b.n	80073de <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073c8:	f7fb f87e 	bl	80024c8 <HAL_GetTick>
 80073cc:	4602      	mov	r2, r0
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	1ad3      	subs	r3, r2, r3
 80073d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d901      	bls.n	80073de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80073da:	2303      	movs	r3, #3
 80073dc:	e0b5      	b.n	800754a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073de:	4b3e      	ldr	r3, [pc, #248]	@ (80074d8 <HAL_RCC_OscConfig+0x470>)
 80073e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073e2:	f003 0302 	and.w	r3, r3, #2
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d1ee      	bne.n	80073c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80073ea:	7dfb      	ldrb	r3, [r7, #23]
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d105      	bne.n	80073fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073f0:	4b39      	ldr	r3, [pc, #228]	@ (80074d8 <HAL_RCC_OscConfig+0x470>)
 80073f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073f4:	4a38      	ldr	r2, [pc, #224]	@ (80074d8 <HAL_RCC_OscConfig+0x470>)
 80073f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80073fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	699b      	ldr	r3, [r3, #24]
 8007400:	2b00      	cmp	r3, #0
 8007402:	f000 80a1 	beq.w	8007548 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007406:	4b34      	ldr	r3, [pc, #208]	@ (80074d8 <HAL_RCC_OscConfig+0x470>)
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	f003 030c 	and.w	r3, r3, #12
 800740e:	2b08      	cmp	r3, #8
 8007410:	d05c      	beq.n	80074cc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	699b      	ldr	r3, [r3, #24]
 8007416:	2b02      	cmp	r3, #2
 8007418:	d141      	bne.n	800749e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800741a:	4b31      	ldr	r3, [pc, #196]	@ (80074e0 <HAL_RCC_OscConfig+0x478>)
 800741c:	2200      	movs	r2, #0
 800741e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007420:	f7fb f852 	bl	80024c8 <HAL_GetTick>
 8007424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007426:	e008      	b.n	800743a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007428:	f7fb f84e 	bl	80024c8 <HAL_GetTick>
 800742c:	4602      	mov	r2, r0
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	2b02      	cmp	r3, #2
 8007434:	d901      	bls.n	800743a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007436:	2303      	movs	r3, #3
 8007438:	e087      	b.n	800754a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800743a:	4b27      	ldr	r3, [pc, #156]	@ (80074d8 <HAL_RCC_OscConfig+0x470>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007442:	2b00      	cmp	r3, #0
 8007444:	d1f0      	bne.n	8007428 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	69da      	ldr	r2, [r3, #28]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a1b      	ldr	r3, [r3, #32]
 800744e:	431a      	orrs	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007454:	019b      	lsls	r3, r3, #6
 8007456:	431a      	orrs	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800745c:	085b      	lsrs	r3, r3, #1
 800745e:	3b01      	subs	r3, #1
 8007460:	041b      	lsls	r3, r3, #16
 8007462:	431a      	orrs	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007468:	061b      	lsls	r3, r3, #24
 800746a:	491b      	ldr	r1, [pc, #108]	@ (80074d8 <HAL_RCC_OscConfig+0x470>)
 800746c:	4313      	orrs	r3, r2
 800746e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007470:	4b1b      	ldr	r3, [pc, #108]	@ (80074e0 <HAL_RCC_OscConfig+0x478>)
 8007472:	2201      	movs	r2, #1
 8007474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007476:	f7fb f827 	bl	80024c8 <HAL_GetTick>
 800747a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800747c:	e008      	b.n	8007490 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800747e:	f7fb f823 	bl	80024c8 <HAL_GetTick>
 8007482:	4602      	mov	r2, r0
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	1ad3      	subs	r3, r2, r3
 8007488:	2b02      	cmp	r3, #2
 800748a:	d901      	bls.n	8007490 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800748c:	2303      	movs	r3, #3
 800748e:	e05c      	b.n	800754a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007490:	4b11      	ldr	r3, [pc, #68]	@ (80074d8 <HAL_RCC_OscConfig+0x470>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007498:	2b00      	cmp	r3, #0
 800749a:	d0f0      	beq.n	800747e <HAL_RCC_OscConfig+0x416>
 800749c:	e054      	b.n	8007548 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800749e:	4b10      	ldr	r3, [pc, #64]	@ (80074e0 <HAL_RCC_OscConfig+0x478>)
 80074a0:	2200      	movs	r2, #0
 80074a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074a4:	f7fb f810 	bl	80024c8 <HAL_GetTick>
 80074a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074aa:	e008      	b.n	80074be <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074ac:	f7fb f80c 	bl	80024c8 <HAL_GetTick>
 80074b0:	4602      	mov	r2, r0
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	1ad3      	subs	r3, r2, r3
 80074b6:	2b02      	cmp	r3, #2
 80074b8:	d901      	bls.n	80074be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80074ba:	2303      	movs	r3, #3
 80074bc:	e045      	b.n	800754a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074be:	4b06      	ldr	r3, [pc, #24]	@ (80074d8 <HAL_RCC_OscConfig+0x470>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d1f0      	bne.n	80074ac <HAL_RCC_OscConfig+0x444>
 80074ca:	e03d      	b.n	8007548 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	699b      	ldr	r3, [r3, #24]
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d107      	bne.n	80074e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e038      	b.n	800754a <HAL_RCC_OscConfig+0x4e2>
 80074d8:	40023800 	.word	0x40023800
 80074dc:	40007000 	.word	0x40007000
 80074e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80074e4:	4b1b      	ldr	r3, [pc, #108]	@ (8007554 <HAL_RCC_OscConfig+0x4ec>)
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	699b      	ldr	r3, [r3, #24]
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d028      	beq.n	8007544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d121      	bne.n	8007544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800750a:	429a      	cmp	r2, r3
 800750c:	d11a      	bne.n	8007544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800750e:	68fa      	ldr	r2, [r7, #12]
 8007510:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007514:	4013      	ands	r3, r2
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800751a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800751c:	4293      	cmp	r3, r2
 800751e:	d111      	bne.n	8007544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800752a:	085b      	lsrs	r3, r3, #1
 800752c:	3b01      	subs	r3, #1
 800752e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007530:	429a      	cmp	r2, r3
 8007532:	d107      	bne.n	8007544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800753e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007540:	429a      	cmp	r2, r3
 8007542:	d001      	beq.n	8007548 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	e000      	b.n	800754a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3718      	adds	r7, #24
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop
 8007554:	40023800 	.word	0x40023800

08007558 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b084      	sub	sp, #16
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d101      	bne.n	800756c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	e0cc      	b.n	8007706 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800756c:	4b68      	ldr	r3, [pc, #416]	@ (8007710 <HAL_RCC_ClockConfig+0x1b8>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 0307 	and.w	r3, r3, #7
 8007574:	683a      	ldr	r2, [r7, #0]
 8007576:	429a      	cmp	r2, r3
 8007578:	d90c      	bls.n	8007594 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800757a:	4b65      	ldr	r3, [pc, #404]	@ (8007710 <HAL_RCC_ClockConfig+0x1b8>)
 800757c:	683a      	ldr	r2, [r7, #0]
 800757e:	b2d2      	uxtb	r2, r2
 8007580:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007582:	4b63      	ldr	r3, [pc, #396]	@ (8007710 <HAL_RCC_ClockConfig+0x1b8>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 0307 	and.w	r3, r3, #7
 800758a:	683a      	ldr	r2, [r7, #0]
 800758c:	429a      	cmp	r2, r3
 800758e:	d001      	beq.n	8007594 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	e0b8      	b.n	8007706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f003 0302 	and.w	r3, r3, #2
 800759c:	2b00      	cmp	r3, #0
 800759e:	d020      	beq.n	80075e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 0304 	and.w	r3, r3, #4
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d005      	beq.n	80075b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80075ac:	4b59      	ldr	r3, [pc, #356]	@ (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	4a58      	ldr	r2, [pc, #352]	@ (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 80075b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80075b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 0308 	and.w	r3, r3, #8
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d005      	beq.n	80075d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80075c4:	4b53      	ldr	r3, [pc, #332]	@ (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	4a52      	ldr	r2, [pc, #328]	@ (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 80075ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80075ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075d0:	4b50      	ldr	r3, [pc, #320]	@ (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	494d      	ldr	r1, [pc, #308]	@ (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 80075de:	4313      	orrs	r3, r2
 80075e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f003 0301 	and.w	r3, r3, #1
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d044      	beq.n	8007678 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d107      	bne.n	8007606 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075f6:	4b47      	ldr	r3, [pc, #284]	@ (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d119      	bne.n	8007636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e07f      	b.n	8007706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	2b02      	cmp	r3, #2
 800760c:	d003      	beq.n	8007616 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007612:	2b03      	cmp	r3, #3
 8007614:	d107      	bne.n	8007626 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007616:	4b3f      	ldr	r3, [pc, #252]	@ (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800761e:	2b00      	cmp	r3, #0
 8007620:	d109      	bne.n	8007636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	e06f      	b.n	8007706 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007626:	4b3b      	ldr	r3, [pc, #236]	@ (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 0302 	and.w	r3, r3, #2
 800762e:	2b00      	cmp	r3, #0
 8007630:	d101      	bne.n	8007636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	e067      	b.n	8007706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007636:	4b37      	ldr	r3, [pc, #220]	@ (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	f023 0203 	bic.w	r2, r3, #3
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	4934      	ldr	r1, [pc, #208]	@ (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 8007644:	4313      	orrs	r3, r2
 8007646:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007648:	f7fa ff3e 	bl	80024c8 <HAL_GetTick>
 800764c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800764e:	e00a      	b.n	8007666 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007650:	f7fa ff3a 	bl	80024c8 <HAL_GetTick>
 8007654:	4602      	mov	r2, r0
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	1ad3      	subs	r3, r2, r3
 800765a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800765e:	4293      	cmp	r3, r2
 8007660:	d901      	bls.n	8007666 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007662:	2303      	movs	r3, #3
 8007664:	e04f      	b.n	8007706 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007666:	4b2b      	ldr	r3, [pc, #172]	@ (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	f003 020c 	and.w	r2, r3, #12
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	429a      	cmp	r2, r3
 8007676:	d1eb      	bne.n	8007650 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007678:	4b25      	ldr	r3, [pc, #148]	@ (8007710 <HAL_RCC_ClockConfig+0x1b8>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f003 0307 	and.w	r3, r3, #7
 8007680:	683a      	ldr	r2, [r7, #0]
 8007682:	429a      	cmp	r2, r3
 8007684:	d20c      	bcs.n	80076a0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007686:	4b22      	ldr	r3, [pc, #136]	@ (8007710 <HAL_RCC_ClockConfig+0x1b8>)
 8007688:	683a      	ldr	r2, [r7, #0]
 800768a:	b2d2      	uxtb	r2, r2
 800768c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800768e:	4b20      	ldr	r3, [pc, #128]	@ (8007710 <HAL_RCC_ClockConfig+0x1b8>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f003 0307 	and.w	r3, r3, #7
 8007696:	683a      	ldr	r2, [r7, #0]
 8007698:	429a      	cmp	r2, r3
 800769a:	d001      	beq.n	80076a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	e032      	b.n	8007706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f003 0304 	and.w	r3, r3, #4
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d008      	beq.n	80076be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076ac:	4b19      	ldr	r3, [pc, #100]	@ (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	4916      	ldr	r1, [pc, #88]	@ (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 80076ba:	4313      	orrs	r3, r2
 80076bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 0308 	and.w	r3, r3, #8
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d009      	beq.n	80076de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80076ca:	4b12      	ldr	r3, [pc, #72]	@ (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	00db      	lsls	r3, r3, #3
 80076d8:	490e      	ldr	r1, [pc, #56]	@ (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 80076da:	4313      	orrs	r3, r2
 80076dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80076de:	f000 f821 	bl	8007724 <HAL_RCC_GetSysClockFreq>
 80076e2:	4602      	mov	r2, r0
 80076e4:	4b0b      	ldr	r3, [pc, #44]	@ (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	091b      	lsrs	r3, r3, #4
 80076ea:	f003 030f 	and.w	r3, r3, #15
 80076ee:	490a      	ldr	r1, [pc, #40]	@ (8007718 <HAL_RCC_ClockConfig+0x1c0>)
 80076f0:	5ccb      	ldrb	r3, [r1, r3]
 80076f2:	fa22 f303 	lsr.w	r3, r2, r3
 80076f6:	4a09      	ldr	r2, [pc, #36]	@ (800771c <HAL_RCC_ClockConfig+0x1c4>)
 80076f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80076fa:	4b09      	ldr	r3, [pc, #36]	@ (8007720 <HAL_RCC_ClockConfig+0x1c8>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4618      	mov	r0, r3
 8007700:	f7fa fe9e 	bl	8002440 <HAL_InitTick>

  return HAL_OK;
 8007704:	2300      	movs	r3, #0
}
 8007706:	4618      	mov	r0, r3
 8007708:	3710      	adds	r7, #16
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	40023c00 	.word	0x40023c00
 8007714:	40023800 	.word	0x40023800
 8007718:	0800d70c 	.word	0x0800d70c
 800771c:	20000010 	.word	0x20000010
 8007720:	20000014 	.word	0x20000014

08007724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007724:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007728:	b094      	sub	sp, #80	@ 0x50
 800772a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800772c:	2300      	movs	r3, #0
 800772e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8007730:	2300      	movs	r3, #0
 8007732:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007734:	2300      	movs	r3, #0
 8007736:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007738:	2300      	movs	r3, #0
 800773a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800773c:	4b79      	ldr	r3, [pc, #484]	@ (8007924 <HAL_RCC_GetSysClockFreq+0x200>)
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	f003 030c 	and.w	r3, r3, #12
 8007744:	2b08      	cmp	r3, #8
 8007746:	d00d      	beq.n	8007764 <HAL_RCC_GetSysClockFreq+0x40>
 8007748:	2b08      	cmp	r3, #8
 800774a:	f200 80e1 	bhi.w	8007910 <HAL_RCC_GetSysClockFreq+0x1ec>
 800774e:	2b00      	cmp	r3, #0
 8007750:	d002      	beq.n	8007758 <HAL_RCC_GetSysClockFreq+0x34>
 8007752:	2b04      	cmp	r3, #4
 8007754:	d003      	beq.n	800775e <HAL_RCC_GetSysClockFreq+0x3a>
 8007756:	e0db      	b.n	8007910 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007758:	4b73      	ldr	r3, [pc, #460]	@ (8007928 <HAL_RCC_GetSysClockFreq+0x204>)
 800775a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800775c:	e0db      	b.n	8007916 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800775e:	4b73      	ldr	r3, [pc, #460]	@ (800792c <HAL_RCC_GetSysClockFreq+0x208>)
 8007760:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007762:	e0d8      	b.n	8007916 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007764:	4b6f      	ldr	r3, [pc, #444]	@ (8007924 <HAL_RCC_GetSysClockFreq+0x200>)
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800776c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800776e:	4b6d      	ldr	r3, [pc, #436]	@ (8007924 <HAL_RCC_GetSysClockFreq+0x200>)
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007776:	2b00      	cmp	r3, #0
 8007778:	d063      	beq.n	8007842 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800777a:	4b6a      	ldr	r3, [pc, #424]	@ (8007924 <HAL_RCC_GetSysClockFreq+0x200>)
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	099b      	lsrs	r3, r3, #6
 8007780:	2200      	movs	r2, #0
 8007782:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007784:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800778c:	633b      	str	r3, [r7, #48]	@ 0x30
 800778e:	2300      	movs	r3, #0
 8007790:	637b      	str	r3, [r7, #52]	@ 0x34
 8007792:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007796:	4622      	mov	r2, r4
 8007798:	462b      	mov	r3, r5
 800779a:	f04f 0000 	mov.w	r0, #0
 800779e:	f04f 0100 	mov.w	r1, #0
 80077a2:	0159      	lsls	r1, r3, #5
 80077a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80077a8:	0150      	lsls	r0, r2, #5
 80077aa:	4602      	mov	r2, r0
 80077ac:	460b      	mov	r3, r1
 80077ae:	4621      	mov	r1, r4
 80077b0:	1a51      	subs	r1, r2, r1
 80077b2:	6139      	str	r1, [r7, #16]
 80077b4:	4629      	mov	r1, r5
 80077b6:	eb63 0301 	sbc.w	r3, r3, r1
 80077ba:	617b      	str	r3, [r7, #20]
 80077bc:	f04f 0200 	mov.w	r2, #0
 80077c0:	f04f 0300 	mov.w	r3, #0
 80077c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80077c8:	4659      	mov	r1, fp
 80077ca:	018b      	lsls	r3, r1, #6
 80077cc:	4651      	mov	r1, sl
 80077ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80077d2:	4651      	mov	r1, sl
 80077d4:	018a      	lsls	r2, r1, #6
 80077d6:	4651      	mov	r1, sl
 80077d8:	ebb2 0801 	subs.w	r8, r2, r1
 80077dc:	4659      	mov	r1, fp
 80077de:	eb63 0901 	sbc.w	r9, r3, r1
 80077e2:	f04f 0200 	mov.w	r2, #0
 80077e6:	f04f 0300 	mov.w	r3, #0
 80077ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80077ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80077f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80077f6:	4690      	mov	r8, r2
 80077f8:	4699      	mov	r9, r3
 80077fa:	4623      	mov	r3, r4
 80077fc:	eb18 0303 	adds.w	r3, r8, r3
 8007800:	60bb      	str	r3, [r7, #8]
 8007802:	462b      	mov	r3, r5
 8007804:	eb49 0303 	adc.w	r3, r9, r3
 8007808:	60fb      	str	r3, [r7, #12]
 800780a:	f04f 0200 	mov.w	r2, #0
 800780e:	f04f 0300 	mov.w	r3, #0
 8007812:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007816:	4629      	mov	r1, r5
 8007818:	024b      	lsls	r3, r1, #9
 800781a:	4621      	mov	r1, r4
 800781c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007820:	4621      	mov	r1, r4
 8007822:	024a      	lsls	r2, r1, #9
 8007824:	4610      	mov	r0, r2
 8007826:	4619      	mov	r1, r3
 8007828:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800782a:	2200      	movs	r2, #0
 800782c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800782e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007830:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007834:	f7f9 f9bc 	bl	8000bb0 <__aeabi_uldivmod>
 8007838:	4602      	mov	r2, r0
 800783a:	460b      	mov	r3, r1
 800783c:	4613      	mov	r3, r2
 800783e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007840:	e058      	b.n	80078f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007842:	4b38      	ldr	r3, [pc, #224]	@ (8007924 <HAL_RCC_GetSysClockFreq+0x200>)
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	099b      	lsrs	r3, r3, #6
 8007848:	2200      	movs	r2, #0
 800784a:	4618      	mov	r0, r3
 800784c:	4611      	mov	r1, r2
 800784e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007852:	623b      	str	r3, [r7, #32]
 8007854:	2300      	movs	r3, #0
 8007856:	627b      	str	r3, [r7, #36]	@ 0x24
 8007858:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800785c:	4642      	mov	r2, r8
 800785e:	464b      	mov	r3, r9
 8007860:	f04f 0000 	mov.w	r0, #0
 8007864:	f04f 0100 	mov.w	r1, #0
 8007868:	0159      	lsls	r1, r3, #5
 800786a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800786e:	0150      	lsls	r0, r2, #5
 8007870:	4602      	mov	r2, r0
 8007872:	460b      	mov	r3, r1
 8007874:	4641      	mov	r1, r8
 8007876:	ebb2 0a01 	subs.w	sl, r2, r1
 800787a:	4649      	mov	r1, r9
 800787c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007880:	f04f 0200 	mov.w	r2, #0
 8007884:	f04f 0300 	mov.w	r3, #0
 8007888:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800788c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007890:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007894:	ebb2 040a 	subs.w	r4, r2, sl
 8007898:	eb63 050b 	sbc.w	r5, r3, fp
 800789c:	f04f 0200 	mov.w	r2, #0
 80078a0:	f04f 0300 	mov.w	r3, #0
 80078a4:	00eb      	lsls	r3, r5, #3
 80078a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80078aa:	00e2      	lsls	r2, r4, #3
 80078ac:	4614      	mov	r4, r2
 80078ae:	461d      	mov	r5, r3
 80078b0:	4643      	mov	r3, r8
 80078b2:	18e3      	adds	r3, r4, r3
 80078b4:	603b      	str	r3, [r7, #0]
 80078b6:	464b      	mov	r3, r9
 80078b8:	eb45 0303 	adc.w	r3, r5, r3
 80078bc:	607b      	str	r3, [r7, #4]
 80078be:	f04f 0200 	mov.w	r2, #0
 80078c2:	f04f 0300 	mov.w	r3, #0
 80078c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80078ca:	4629      	mov	r1, r5
 80078cc:	028b      	lsls	r3, r1, #10
 80078ce:	4621      	mov	r1, r4
 80078d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80078d4:	4621      	mov	r1, r4
 80078d6:	028a      	lsls	r2, r1, #10
 80078d8:	4610      	mov	r0, r2
 80078da:	4619      	mov	r1, r3
 80078dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078de:	2200      	movs	r2, #0
 80078e0:	61bb      	str	r3, [r7, #24]
 80078e2:	61fa      	str	r2, [r7, #28]
 80078e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80078e8:	f7f9 f962 	bl	8000bb0 <__aeabi_uldivmod>
 80078ec:	4602      	mov	r2, r0
 80078ee:	460b      	mov	r3, r1
 80078f0:	4613      	mov	r3, r2
 80078f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80078f4:	4b0b      	ldr	r3, [pc, #44]	@ (8007924 <HAL_RCC_GetSysClockFreq+0x200>)
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	0c1b      	lsrs	r3, r3, #16
 80078fa:	f003 0303 	and.w	r3, r3, #3
 80078fe:	3301      	adds	r3, #1
 8007900:	005b      	lsls	r3, r3, #1
 8007902:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007904:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007906:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007908:	fbb2 f3f3 	udiv	r3, r2, r3
 800790c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800790e:	e002      	b.n	8007916 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007910:	4b05      	ldr	r3, [pc, #20]	@ (8007928 <HAL_RCC_GetSysClockFreq+0x204>)
 8007912:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007914:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007916:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007918:	4618      	mov	r0, r3
 800791a:	3750      	adds	r7, #80	@ 0x50
 800791c:	46bd      	mov	sp, r7
 800791e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007922:	bf00      	nop
 8007924:	40023800 	.word	0x40023800
 8007928:	00f42400 	.word	0x00f42400
 800792c:	007a1200 	.word	0x007a1200

08007930 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007930:	b480      	push	{r7}
 8007932:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007934:	4b03      	ldr	r3, [pc, #12]	@ (8007944 <HAL_RCC_GetHCLKFreq+0x14>)
 8007936:	681b      	ldr	r3, [r3, #0]
}
 8007938:	4618      	mov	r0, r3
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr
 8007942:	bf00      	nop
 8007944:	20000010 	.word	0x20000010

08007948 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800794c:	f7ff fff0 	bl	8007930 <HAL_RCC_GetHCLKFreq>
 8007950:	4602      	mov	r2, r0
 8007952:	4b05      	ldr	r3, [pc, #20]	@ (8007968 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	0a9b      	lsrs	r3, r3, #10
 8007958:	f003 0307 	and.w	r3, r3, #7
 800795c:	4903      	ldr	r1, [pc, #12]	@ (800796c <HAL_RCC_GetPCLK1Freq+0x24>)
 800795e:	5ccb      	ldrb	r3, [r1, r3]
 8007960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007964:	4618      	mov	r0, r3
 8007966:	bd80      	pop	{r7, pc}
 8007968:	40023800 	.word	0x40023800
 800796c:	0800d71c 	.word	0x0800d71c

08007970 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007974:	f7ff ffdc 	bl	8007930 <HAL_RCC_GetHCLKFreq>
 8007978:	4602      	mov	r2, r0
 800797a:	4b05      	ldr	r3, [pc, #20]	@ (8007990 <HAL_RCC_GetPCLK2Freq+0x20>)
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	0b5b      	lsrs	r3, r3, #13
 8007980:	f003 0307 	and.w	r3, r3, #7
 8007984:	4903      	ldr	r1, [pc, #12]	@ (8007994 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007986:	5ccb      	ldrb	r3, [r1, r3]
 8007988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800798c:	4618      	mov	r0, r3
 800798e:	bd80      	pop	{r7, pc}
 8007990:	40023800 	.word	0x40023800
 8007994:	0800d71c 	.word	0x0800d71c

08007998 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b086      	sub	sp, #24
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80079a0:	2300      	movs	r3, #0
 80079a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80079a4:	2300      	movs	r3, #0
 80079a6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 0301 	and.w	r3, r3, #1
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d105      	bne.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d035      	beq.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80079c0:	4b62      	ldr	r3, [pc, #392]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80079c2:	2200      	movs	r2, #0
 80079c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80079c6:	f7fa fd7f 	bl	80024c8 <HAL_GetTick>
 80079ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80079cc:	e008      	b.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80079ce:	f7fa fd7b 	bl	80024c8 <HAL_GetTick>
 80079d2:	4602      	mov	r2, r0
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	1ad3      	subs	r3, r2, r3
 80079d8:	2b02      	cmp	r3, #2
 80079da:	d901      	bls.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80079dc:	2303      	movs	r3, #3
 80079de:	e0b0      	b.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80079e0:	4b5b      	ldr	r3, [pc, #364]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d1f0      	bne.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	019a      	lsls	r2, r3, #6
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	071b      	lsls	r3, r3, #28
 80079f8:	4955      	ldr	r1, [pc, #340]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80079fa:	4313      	orrs	r3, r2
 80079fc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007a00:	4b52      	ldr	r3, [pc, #328]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007a02:	2201      	movs	r2, #1
 8007a04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007a06:	f7fa fd5f 	bl	80024c8 <HAL_GetTick>
 8007a0a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007a0c:	e008      	b.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007a0e:	f7fa fd5b 	bl	80024c8 <HAL_GetTick>
 8007a12:	4602      	mov	r2, r0
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	1ad3      	subs	r3, r2, r3
 8007a18:	2b02      	cmp	r3, #2
 8007a1a:	d901      	bls.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a1c:	2303      	movs	r3, #3
 8007a1e:	e090      	b.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007a20:	4b4b      	ldr	r3, [pc, #300]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d0f0      	beq.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f003 0302 	and.w	r3, r3, #2
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	f000 8083 	beq.w	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	60fb      	str	r3, [r7, #12]
 8007a3e:	4b44      	ldr	r3, [pc, #272]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a42:	4a43      	ldr	r2, [pc, #268]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a48:	6413      	str	r3, [r2, #64]	@ 0x40
 8007a4a:	4b41      	ldr	r3, [pc, #260]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a52:	60fb      	str	r3, [r7, #12]
 8007a54:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007a56:	4b3f      	ldr	r3, [pc, #252]	@ (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a3e      	ldr	r2, [pc, #248]	@ (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007a5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a60:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007a62:	f7fa fd31 	bl	80024c8 <HAL_GetTick>
 8007a66:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007a68:	e008      	b.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a6a:	f7fa fd2d 	bl	80024c8 <HAL_GetTick>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	1ad3      	subs	r3, r2, r3
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	d901      	bls.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007a78:	2303      	movs	r3, #3
 8007a7a:	e062      	b.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007a7c:	4b35      	ldr	r3, [pc, #212]	@ (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d0f0      	beq.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007a88:	4b31      	ldr	r3, [pc, #196]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a90:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d02f      	beq.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	68db      	ldr	r3, [r3, #12]
 8007a9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007aa0:	693a      	ldr	r2, [r7, #16]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d028      	beq.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007aa6:	4b2a      	ldr	r3, [pc, #168]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007aaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007aae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007ab0:	4b29      	ldr	r3, [pc, #164]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007ab6:	4b28      	ldr	r3, [pc, #160]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007ab8:	2200      	movs	r2, #0
 8007aba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007abc:	4a24      	ldr	r2, [pc, #144]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007ac2:	4b23      	ldr	r3, [pc, #140]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ac6:	f003 0301 	and.w	r3, r3, #1
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d114      	bne.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007ace:	f7fa fcfb 	bl	80024c8 <HAL_GetTick>
 8007ad2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ad4:	e00a      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ad6:	f7fa fcf7 	bl	80024c8 <HAL_GetTick>
 8007ada:	4602      	mov	r2, r0
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	1ad3      	subs	r3, r2, r3
 8007ae0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d901      	bls.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007ae8:	2303      	movs	r3, #3
 8007aea:	e02a      	b.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007aec:	4b18      	ldr	r3, [pc, #96]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007aee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007af0:	f003 0302 	and.w	r3, r3, #2
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d0ee      	beq.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b04:	d10d      	bne.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007b06:	4b12      	ldr	r3, [pc, #72]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007b16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b1a:	490d      	ldr	r1, [pc, #52]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	608b      	str	r3, [r1, #8]
 8007b20:	e005      	b.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007b22:	4b0b      	ldr	r3, [pc, #44]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	4a0a      	ldr	r2, [pc, #40]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b28:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007b2c:	6093      	str	r3, [r2, #8]
 8007b2e:	4b08      	ldr	r3, [pc, #32]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b30:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b3a:	4905      	ldr	r1, [pc, #20]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3718      	adds	r7, #24
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	42470068 	.word	0x42470068
 8007b50:	40023800 	.word	0x40023800
 8007b54:	40007000 	.word	0x40007000
 8007b58:	42470e40 	.word	0x42470e40

08007b5c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b087      	sub	sp, #28
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007b64:	2300      	movs	r3, #0
 8007b66:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007b70:	2300      	movs	r3, #0
 8007b72:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d13f      	bne.n	8007bfa <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007b7a:	4b24      	ldr	r3, [pc, #144]	@ (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b82:	60fb      	str	r3, [r7, #12]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d006      	beq.n	8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007b90:	d12f      	bne.n	8007bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007b92:	4b1f      	ldr	r3, [pc, #124]	@ (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007b94:	617b      	str	r3, [r7, #20]
          break;
 8007b96:	e02f      	b.n	8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007b98:	4b1c      	ldr	r3, [pc, #112]	@ (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ba0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ba4:	d108      	bne.n	8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007ba6:	4b19      	ldr	r3, [pc, #100]	@ (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007bae:	4a19      	ldr	r2, [pc, #100]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bb4:	613b      	str	r3, [r7, #16]
 8007bb6:	e007      	b.n	8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007bb8:	4b14      	ldr	r3, [pc, #80]	@ (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007bc0:	4a15      	ldr	r2, [pc, #84]	@ (8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8007bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bc6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007bc8:	4b10      	ldr	r3, [pc, #64]	@ (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007bce:	099b      	lsrs	r3, r3, #6
 8007bd0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	fb02 f303 	mul.w	r3, r2, r3
 8007bda:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007bde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007be2:	0f1b      	lsrs	r3, r3, #28
 8007be4:	f003 0307 	and.w	r3, r3, #7
 8007be8:	68ba      	ldr	r2, [r7, #8]
 8007bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bee:	617b      	str	r3, [r7, #20]
          break;
 8007bf0:	e002      	b.n	8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	617b      	str	r3, [r7, #20]
          break;
 8007bf6:	bf00      	nop
        }
      }
      break;
 8007bf8:	e000      	b.n	8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8007bfa:	bf00      	nop
    }
  }
  return frequency;
 8007bfc:	697b      	ldr	r3, [r7, #20]
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	371c      	adds	r7, #28
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr
 8007c0a:	bf00      	nop
 8007c0c:	40023800 	.word	0x40023800
 8007c10:	00bb8000 	.word	0x00bb8000
 8007c14:	007a1200 	.word	0x007a1200
 8007c18:	00f42400 	.word	0x00f42400

08007c1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d101      	bne.n	8007c2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e07b      	b.n	8007d26 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d108      	bne.n	8007c48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c3e:	d009      	beq.n	8007c54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	61da      	str	r2, [r3, #28]
 8007c46:	e005      	b.n	8007c54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d106      	bne.n	8007c74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f7fa f976 	bl	8001f60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2202      	movs	r2, #2
 8007c78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007c9c:	431a      	orrs	r2, r3
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	68db      	ldr	r3, [r3, #12]
 8007ca2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ca6:	431a      	orrs	r2, r3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	691b      	ldr	r3, [r3, #16]
 8007cac:	f003 0302 	and.w	r3, r3, #2
 8007cb0:	431a      	orrs	r2, r3
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	695b      	ldr	r3, [r3, #20]
 8007cb6:	f003 0301 	and.w	r3, r3, #1
 8007cba:	431a      	orrs	r2, r3
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	699b      	ldr	r3, [r3, #24]
 8007cc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007cc4:	431a      	orrs	r2, r3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	69db      	ldr	r3, [r3, #28]
 8007cca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007cce:	431a      	orrs	r2, r3
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6a1b      	ldr	r3, [r3, #32]
 8007cd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cd8:	ea42 0103 	orr.w	r1, r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ce0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	430a      	orrs	r2, r1
 8007cea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	699b      	ldr	r3, [r3, #24]
 8007cf0:	0c1b      	lsrs	r3, r3, #16
 8007cf2:	f003 0104 	and.w	r1, r3, #4
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cfa:	f003 0210 	and.w	r2, r3, #16
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	430a      	orrs	r2, r1
 8007d04:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	69da      	ldr	r2, [r3, #28]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007d14:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3708      	adds	r7, #8
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}

08007d2e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b082      	sub	sp, #8
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d101      	bne.n	8007d40 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	e041      	b.n	8007dc4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d106      	bne.n	8007d5a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f7fa fa5f 	bl	8002218 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2202      	movs	r2, #2
 8007d5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	3304      	adds	r3, #4
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	4610      	mov	r0, r2
 8007d6e:	f000 f95d 	bl	800802c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2201      	movs	r2, #1
 8007d76:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2201      	movs	r2, #1
 8007d86:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2201      	movs	r2, #1
 8007d96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2201      	movs	r2, #1
 8007da6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2201      	movs	r2, #1
 8007db6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007dc2:	2300      	movs	r3, #0
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3708      	adds	r7, #8
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b085      	sub	sp, #20
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d001      	beq.n	8007de4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	e046      	b.n	8007e72 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2202      	movs	r2, #2
 8007de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a23      	ldr	r2, [pc, #140]	@ (8007e80 <HAL_TIM_Base_Start+0xb4>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d022      	beq.n	8007e3c <HAL_TIM_Base_Start+0x70>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dfe:	d01d      	beq.n	8007e3c <HAL_TIM_Base_Start+0x70>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a1f      	ldr	r2, [pc, #124]	@ (8007e84 <HAL_TIM_Base_Start+0xb8>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d018      	beq.n	8007e3c <HAL_TIM_Base_Start+0x70>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a1e      	ldr	r2, [pc, #120]	@ (8007e88 <HAL_TIM_Base_Start+0xbc>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d013      	beq.n	8007e3c <HAL_TIM_Base_Start+0x70>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a1c      	ldr	r2, [pc, #112]	@ (8007e8c <HAL_TIM_Base_Start+0xc0>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d00e      	beq.n	8007e3c <HAL_TIM_Base_Start+0x70>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a1b      	ldr	r2, [pc, #108]	@ (8007e90 <HAL_TIM_Base_Start+0xc4>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d009      	beq.n	8007e3c <HAL_TIM_Base_Start+0x70>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a19      	ldr	r2, [pc, #100]	@ (8007e94 <HAL_TIM_Base_Start+0xc8>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d004      	beq.n	8007e3c <HAL_TIM_Base_Start+0x70>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a18      	ldr	r2, [pc, #96]	@ (8007e98 <HAL_TIM_Base_Start+0xcc>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d111      	bne.n	8007e60 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	f003 0307 	and.w	r3, r3, #7
 8007e46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2b06      	cmp	r3, #6
 8007e4c:	d010      	beq.n	8007e70 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f042 0201 	orr.w	r2, r2, #1
 8007e5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e5e:	e007      	b.n	8007e70 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f042 0201 	orr.w	r2, r2, #1
 8007e6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3714      	adds	r7, #20
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	40010000 	.word	0x40010000
 8007e84:	40000400 	.word	0x40000400
 8007e88:	40000800 	.word	0x40000800
 8007e8c:	40000c00 	.word	0x40000c00
 8007e90:	40010400 	.word	0x40010400
 8007e94:	40014000 	.word	0x40014000
 8007e98:	40001800 	.word	0x40001800

08007e9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d101      	bne.n	8007eb8 <HAL_TIM_ConfigClockSource+0x1c>
 8007eb4:	2302      	movs	r3, #2
 8007eb6:	e0b4      	b.n	8008022 <HAL_TIM_ConfigClockSource+0x186>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2202      	movs	r2, #2
 8007ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007ed6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007ede:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	68ba      	ldr	r2, [r7, #8]
 8007ee6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ef0:	d03e      	beq.n	8007f70 <HAL_TIM_ConfigClockSource+0xd4>
 8007ef2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ef6:	f200 8087 	bhi.w	8008008 <HAL_TIM_ConfigClockSource+0x16c>
 8007efa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007efe:	f000 8086 	beq.w	800800e <HAL_TIM_ConfigClockSource+0x172>
 8007f02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f06:	d87f      	bhi.n	8008008 <HAL_TIM_ConfigClockSource+0x16c>
 8007f08:	2b70      	cmp	r3, #112	@ 0x70
 8007f0a:	d01a      	beq.n	8007f42 <HAL_TIM_ConfigClockSource+0xa6>
 8007f0c:	2b70      	cmp	r3, #112	@ 0x70
 8007f0e:	d87b      	bhi.n	8008008 <HAL_TIM_ConfigClockSource+0x16c>
 8007f10:	2b60      	cmp	r3, #96	@ 0x60
 8007f12:	d050      	beq.n	8007fb6 <HAL_TIM_ConfigClockSource+0x11a>
 8007f14:	2b60      	cmp	r3, #96	@ 0x60
 8007f16:	d877      	bhi.n	8008008 <HAL_TIM_ConfigClockSource+0x16c>
 8007f18:	2b50      	cmp	r3, #80	@ 0x50
 8007f1a:	d03c      	beq.n	8007f96 <HAL_TIM_ConfigClockSource+0xfa>
 8007f1c:	2b50      	cmp	r3, #80	@ 0x50
 8007f1e:	d873      	bhi.n	8008008 <HAL_TIM_ConfigClockSource+0x16c>
 8007f20:	2b40      	cmp	r3, #64	@ 0x40
 8007f22:	d058      	beq.n	8007fd6 <HAL_TIM_ConfigClockSource+0x13a>
 8007f24:	2b40      	cmp	r3, #64	@ 0x40
 8007f26:	d86f      	bhi.n	8008008 <HAL_TIM_ConfigClockSource+0x16c>
 8007f28:	2b30      	cmp	r3, #48	@ 0x30
 8007f2a:	d064      	beq.n	8007ff6 <HAL_TIM_ConfigClockSource+0x15a>
 8007f2c:	2b30      	cmp	r3, #48	@ 0x30
 8007f2e:	d86b      	bhi.n	8008008 <HAL_TIM_ConfigClockSource+0x16c>
 8007f30:	2b20      	cmp	r3, #32
 8007f32:	d060      	beq.n	8007ff6 <HAL_TIM_ConfigClockSource+0x15a>
 8007f34:	2b20      	cmp	r3, #32
 8007f36:	d867      	bhi.n	8008008 <HAL_TIM_ConfigClockSource+0x16c>
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d05c      	beq.n	8007ff6 <HAL_TIM_ConfigClockSource+0x15a>
 8007f3c:	2b10      	cmp	r3, #16
 8007f3e:	d05a      	beq.n	8007ff6 <HAL_TIM_ConfigClockSource+0x15a>
 8007f40:	e062      	b.n	8008008 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f52:	f000 f991 	bl	8008278 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007f64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	68ba      	ldr	r2, [r7, #8]
 8007f6c:	609a      	str	r2, [r3, #8]
      break;
 8007f6e:	e04f      	b.n	8008010 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f80:	f000 f97a 	bl	8008278 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	689a      	ldr	r2, [r3, #8]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007f92:	609a      	str	r2, [r3, #8]
      break;
 8007f94:	e03c      	b.n	8008010 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	f000 f8ee 	bl	8008184 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	2150      	movs	r1, #80	@ 0x50
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f000 f947 	bl	8008242 <TIM_ITRx_SetConfig>
      break;
 8007fb4:	e02c      	b.n	8008010 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	f000 f90d 	bl	80081e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	2160      	movs	r1, #96	@ 0x60
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f000 f937 	bl	8008242 <TIM_ITRx_SetConfig>
      break;
 8007fd4:	e01c      	b.n	8008010 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	f000 f8ce 	bl	8008184 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2140      	movs	r1, #64	@ 0x40
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f000 f927 	bl	8008242 <TIM_ITRx_SetConfig>
      break;
 8007ff4:	e00c      	b.n	8008010 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4619      	mov	r1, r3
 8008000:	4610      	mov	r0, r2
 8008002:	f000 f91e 	bl	8008242 <TIM_ITRx_SetConfig>
      break;
 8008006:	e003      	b.n	8008010 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008008:	2301      	movs	r3, #1
 800800a:	73fb      	strb	r3, [r7, #15]
      break;
 800800c:	e000      	b.n	8008010 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800800e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2201      	movs	r2, #1
 8008014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008020:	7bfb      	ldrb	r3, [r7, #15]
}
 8008022:	4618      	mov	r0, r3
 8008024:	3710      	adds	r7, #16
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
	...

0800802c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800802c:	b480      	push	{r7}
 800802e:	b085      	sub	sp, #20
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4a46      	ldr	r2, [pc, #280]	@ (8008158 <TIM_Base_SetConfig+0x12c>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d013      	beq.n	800806c <TIM_Base_SetConfig+0x40>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800804a:	d00f      	beq.n	800806c <TIM_Base_SetConfig+0x40>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4a43      	ldr	r2, [pc, #268]	@ (800815c <TIM_Base_SetConfig+0x130>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d00b      	beq.n	800806c <TIM_Base_SetConfig+0x40>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	4a42      	ldr	r2, [pc, #264]	@ (8008160 <TIM_Base_SetConfig+0x134>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d007      	beq.n	800806c <TIM_Base_SetConfig+0x40>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	4a41      	ldr	r2, [pc, #260]	@ (8008164 <TIM_Base_SetConfig+0x138>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d003      	beq.n	800806c <TIM_Base_SetConfig+0x40>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	4a40      	ldr	r2, [pc, #256]	@ (8008168 <TIM_Base_SetConfig+0x13c>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d108      	bne.n	800807e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008072:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	68fa      	ldr	r2, [r7, #12]
 800807a:	4313      	orrs	r3, r2
 800807c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	4a35      	ldr	r2, [pc, #212]	@ (8008158 <TIM_Base_SetConfig+0x12c>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d02b      	beq.n	80080de <TIM_Base_SetConfig+0xb2>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800808c:	d027      	beq.n	80080de <TIM_Base_SetConfig+0xb2>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	4a32      	ldr	r2, [pc, #200]	@ (800815c <TIM_Base_SetConfig+0x130>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d023      	beq.n	80080de <TIM_Base_SetConfig+0xb2>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	4a31      	ldr	r2, [pc, #196]	@ (8008160 <TIM_Base_SetConfig+0x134>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d01f      	beq.n	80080de <TIM_Base_SetConfig+0xb2>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	4a30      	ldr	r2, [pc, #192]	@ (8008164 <TIM_Base_SetConfig+0x138>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d01b      	beq.n	80080de <TIM_Base_SetConfig+0xb2>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4a2f      	ldr	r2, [pc, #188]	@ (8008168 <TIM_Base_SetConfig+0x13c>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d017      	beq.n	80080de <TIM_Base_SetConfig+0xb2>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4a2e      	ldr	r2, [pc, #184]	@ (800816c <TIM_Base_SetConfig+0x140>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d013      	beq.n	80080de <TIM_Base_SetConfig+0xb2>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	4a2d      	ldr	r2, [pc, #180]	@ (8008170 <TIM_Base_SetConfig+0x144>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d00f      	beq.n	80080de <TIM_Base_SetConfig+0xb2>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	4a2c      	ldr	r2, [pc, #176]	@ (8008174 <TIM_Base_SetConfig+0x148>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d00b      	beq.n	80080de <TIM_Base_SetConfig+0xb2>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4a2b      	ldr	r2, [pc, #172]	@ (8008178 <TIM_Base_SetConfig+0x14c>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d007      	beq.n	80080de <TIM_Base_SetConfig+0xb2>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4a2a      	ldr	r2, [pc, #168]	@ (800817c <TIM_Base_SetConfig+0x150>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d003      	beq.n	80080de <TIM_Base_SetConfig+0xb2>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4a29      	ldr	r2, [pc, #164]	@ (8008180 <TIM_Base_SetConfig+0x154>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d108      	bne.n	80080f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	68fa      	ldr	r2, [r7, #12]
 80080ec:	4313      	orrs	r3, r2
 80080ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	695b      	ldr	r3, [r3, #20]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	68fa      	ldr	r2, [r7, #12]
 8008102:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	689a      	ldr	r2, [r3, #8]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	4a10      	ldr	r2, [pc, #64]	@ (8008158 <TIM_Base_SetConfig+0x12c>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d003      	beq.n	8008124 <TIM_Base_SetConfig+0xf8>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	4a12      	ldr	r2, [pc, #72]	@ (8008168 <TIM_Base_SetConfig+0x13c>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d103      	bne.n	800812c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	691a      	ldr	r2, [r3, #16]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	f003 0301 	and.w	r3, r3, #1
 800813a:	2b01      	cmp	r3, #1
 800813c:	d105      	bne.n	800814a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	691b      	ldr	r3, [r3, #16]
 8008142:	f023 0201 	bic.w	r2, r3, #1
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	611a      	str	r2, [r3, #16]
  }
}
 800814a:	bf00      	nop
 800814c:	3714      	adds	r7, #20
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr
 8008156:	bf00      	nop
 8008158:	40010000 	.word	0x40010000
 800815c:	40000400 	.word	0x40000400
 8008160:	40000800 	.word	0x40000800
 8008164:	40000c00 	.word	0x40000c00
 8008168:	40010400 	.word	0x40010400
 800816c:	40014000 	.word	0x40014000
 8008170:	40014400 	.word	0x40014400
 8008174:	40014800 	.word	0x40014800
 8008178:	40001800 	.word	0x40001800
 800817c:	40001c00 	.word	0x40001c00
 8008180:	40002000 	.word	0x40002000

08008184 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008184:	b480      	push	{r7}
 8008186:	b087      	sub	sp, #28
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6a1b      	ldr	r3, [r3, #32]
 8008194:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	6a1b      	ldr	r3, [r3, #32]
 800819a:	f023 0201 	bic.w	r2, r3, #1
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80081ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	011b      	lsls	r3, r3, #4
 80081b4:	693a      	ldr	r2, [r7, #16]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	f023 030a 	bic.w	r3, r3, #10
 80081c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80081c2:	697a      	ldr	r2, [r7, #20]
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	693a      	ldr	r2, [r7, #16]
 80081ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	697a      	ldr	r2, [r7, #20]
 80081d4:	621a      	str	r2, [r3, #32]
}
 80081d6:	bf00      	nop
 80081d8:	371c      	adds	r7, #28
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr

080081e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081e2:	b480      	push	{r7}
 80081e4:	b087      	sub	sp, #28
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	60f8      	str	r0, [r7, #12]
 80081ea:	60b9      	str	r1, [r7, #8]
 80081ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	6a1b      	ldr	r3, [r3, #32]
 80081f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	6a1b      	ldr	r3, [r3, #32]
 80081f8:	f023 0210 	bic.w	r2, r3, #16
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	699b      	ldr	r3, [r3, #24]
 8008204:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800820c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	031b      	lsls	r3, r3, #12
 8008212:	693a      	ldr	r2, [r7, #16]
 8008214:	4313      	orrs	r3, r2
 8008216:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800821e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	011b      	lsls	r3, r3, #4
 8008224:	697a      	ldr	r2, [r7, #20]
 8008226:	4313      	orrs	r3, r2
 8008228:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	693a      	ldr	r2, [r7, #16]
 800822e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	697a      	ldr	r2, [r7, #20]
 8008234:	621a      	str	r2, [r3, #32]
}
 8008236:	bf00      	nop
 8008238:	371c      	adds	r7, #28
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr

08008242 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008242:	b480      	push	{r7}
 8008244:	b085      	sub	sp, #20
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
 800824a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008258:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800825a:	683a      	ldr	r2, [r7, #0]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	4313      	orrs	r3, r2
 8008260:	f043 0307 	orr.w	r3, r3, #7
 8008264:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	68fa      	ldr	r2, [r7, #12]
 800826a:	609a      	str	r2, [r3, #8]
}
 800826c:	bf00      	nop
 800826e:	3714      	adds	r7, #20
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr

08008278 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008278:	b480      	push	{r7}
 800827a:	b087      	sub	sp, #28
 800827c:	af00      	add	r7, sp, #0
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	607a      	str	r2, [r7, #4]
 8008284:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008292:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	021a      	lsls	r2, r3, #8
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	431a      	orrs	r2, r3
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	4313      	orrs	r3, r2
 80082a0:	697a      	ldr	r2, [r7, #20]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	697a      	ldr	r2, [r7, #20]
 80082aa:	609a      	str	r2, [r3, #8]
}
 80082ac:	bf00      	nop
 80082ae:	371c      	adds	r7, #28
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b085      	sub	sp, #20
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d101      	bne.n	80082d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80082cc:	2302      	movs	r3, #2
 80082ce:	e05a      	b.n	8008386 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2201      	movs	r2, #1
 80082d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2202      	movs	r2, #2
 80082dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	68fa      	ldr	r2, [r7, #12]
 80082fe:	4313      	orrs	r3, r2
 8008300:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	68fa      	ldr	r2, [r7, #12]
 8008308:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a21      	ldr	r2, [pc, #132]	@ (8008394 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d022      	beq.n	800835a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800831c:	d01d      	beq.n	800835a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a1d      	ldr	r2, [pc, #116]	@ (8008398 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d018      	beq.n	800835a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a1b      	ldr	r2, [pc, #108]	@ (800839c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d013      	beq.n	800835a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a1a      	ldr	r2, [pc, #104]	@ (80083a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d00e      	beq.n	800835a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a18      	ldr	r2, [pc, #96]	@ (80083a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d009      	beq.n	800835a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a17      	ldr	r2, [pc, #92]	@ (80083a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d004      	beq.n	800835a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a15      	ldr	r2, [pc, #84]	@ (80083ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d10c      	bne.n	8008374 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008360:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	68ba      	ldr	r2, [r7, #8]
 8008368:	4313      	orrs	r3, r2
 800836a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	68ba      	ldr	r2, [r7, #8]
 8008372:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2201      	movs	r2, #1
 8008378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008384:	2300      	movs	r3, #0
}
 8008386:	4618      	mov	r0, r3
 8008388:	3714      	adds	r7, #20
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr
 8008392:	bf00      	nop
 8008394:	40010000 	.word	0x40010000
 8008398:	40000400 	.word	0x40000400
 800839c:	40000800 	.word	0x40000800
 80083a0:	40000c00 	.word	0x40000c00
 80083a4:	40010400 	.word	0x40010400
 80083a8:	40014000 	.word	0x40014000
 80083ac:	40001800 	.word	0x40001800

080083b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b082      	sub	sp, #8
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d101      	bne.n	80083c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083be:	2301      	movs	r3, #1
 80083c0:	e042      	b.n	8008448 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d106      	bne.n	80083dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2200      	movs	r2, #0
 80083d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f7f9 ff68 	bl	80022ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2224      	movs	r2, #36	@ 0x24
 80083e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	68da      	ldr	r2, [r3, #12]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80083f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 f9e9 	bl	80087cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	691a      	ldr	r2, [r3, #16]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008408:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	695a      	ldr	r2, [r3, #20]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008418:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	68da      	ldr	r2, [r3, #12]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008428:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2200      	movs	r2, #0
 800842e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2220      	movs	r2, #32
 8008434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2220      	movs	r2, #32
 800843c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008446:	2300      	movs	r3, #0
}
 8008448:	4618      	mov	r0, r3
 800844a:	3708      	adds	r7, #8
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b08c      	sub	sp, #48	@ 0x30
 8008454:	af00      	add	r7, sp, #0
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	60b9      	str	r1, [r7, #8]
 800845a:	4613      	mov	r3, r2
 800845c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008464:	b2db      	uxtb	r3, r3
 8008466:	2b20      	cmp	r3, #32
 8008468:	d156      	bne.n	8008518 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d002      	beq.n	8008476 <HAL_UART_Transmit_DMA+0x26>
 8008470:	88fb      	ldrh	r3, [r7, #6]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d101      	bne.n	800847a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008476:	2301      	movs	r3, #1
 8008478:	e04f      	b.n	800851a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800847a:	68ba      	ldr	r2, [r7, #8]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	88fa      	ldrh	r2, [r7, #6]
 8008484:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	88fa      	ldrh	r2, [r7, #6]
 800848a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2200      	movs	r2, #0
 8008490:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2221      	movs	r2, #33	@ 0x21
 8008496:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800849e:	4a21      	ldr	r2, [pc, #132]	@ (8008524 <HAL_UART_Transmit_DMA+0xd4>)
 80084a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084a6:	4a20      	ldr	r2, [pc, #128]	@ (8008528 <HAL_UART_Transmit_DMA+0xd8>)
 80084a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ae:	4a1f      	ldr	r2, [pc, #124]	@ (800852c <HAL_UART_Transmit_DMA+0xdc>)
 80084b0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084b6:	2200      	movs	r2, #0
 80084b8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80084ba:	f107 0308 	add.w	r3, r7, #8
 80084be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80084c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084c6:	6819      	ldr	r1, [r3, #0]
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	3304      	adds	r3, #4
 80084ce:	461a      	mov	r2, r3
 80084d0:	88fb      	ldrh	r3, [r7, #6]
 80084d2:	f7fa fde7 	bl	80030a4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80084de:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	3314      	adds	r3, #20
 80084e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e8:	69bb      	ldr	r3, [r7, #24]
 80084ea:	e853 3f00 	ldrex	r3, [r3]
 80084ee:	617b      	str	r3, [r7, #20]
   return(result);
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	3314      	adds	r3, #20
 80084fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008500:	627a      	str	r2, [r7, #36]	@ 0x24
 8008502:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008504:	6a39      	ldr	r1, [r7, #32]
 8008506:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008508:	e841 2300 	strex	r3, r2, [r1]
 800850c:	61fb      	str	r3, [r7, #28]
   return(result);
 800850e:	69fb      	ldr	r3, [r7, #28]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d1e5      	bne.n	80084e0 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8008514:	2300      	movs	r3, #0
 8008516:	e000      	b.n	800851a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8008518:	2302      	movs	r3, #2
  }
}
 800851a:	4618      	mov	r0, r3
 800851c:	3730      	adds	r7, #48	@ 0x30
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	0800856d 	.word	0x0800856d
 8008528:	08008607 	.word	0x08008607
 800852c:	08008623 	.word	0x08008623

08008530 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008538:	bf00      	nop
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800854c:	bf00      	nop
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008560:	bf00      	nop
 8008562:	370c      	adds	r7, #12
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b090      	sub	sp, #64	@ 0x40
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008578:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008584:	2b00      	cmp	r3, #0
 8008586:	d137      	bne.n	80085f8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008588:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800858a:	2200      	movs	r2, #0
 800858c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800858e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	3314      	adds	r3, #20
 8008594:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008598:	e853 3f00 	ldrex	r3, [r3]
 800859c:	623b      	str	r3, [r7, #32]
   return(result);
 800859e:	6a3b      	ldr	r3, [r7, #32]
 80085a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80085a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80085a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	3314      	adds	r3, #20
 80085ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80085ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80085b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80085b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085b6:	e841 2300 	strex	r3, r2, [r1]
 80085ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80085bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d1e5      	bne.n	800858e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80085c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	330c      	adds	r3, #12
 80085c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	e853 3f00 	ldrex	r3, [r3]
 80085d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80085da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	330c      	adds	r3, #12
 80085e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80085e2:	61fa      	str	r2, [r7, #28]
 80085e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e6:	69b9      	ldr	r1, [r7, #24]
 80085e8:	69fa      	ldr	r2, [r7, #28]
 80085ea:	e841 2300 	strex	r3, r2, [r1]
 80085ee:	617b      	str	r3, [r7, #20]
   return(result);
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d1e5      	bne.n	80085c2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80085f6:	e002      	b.n	80085fe <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80085f8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80085fa:	f7ff ff99 	bl	8008530 <HAL_UART_TxCpltCallback>
}
 80085fe:	bf00      	nop
 8008600:	3740      	adds	r7, #64	@ 0x40
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b084      	sub	sp, #16
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008612:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008614:	68f8      	ldr	r0, [r7, #12]
 8008616:	f7ff ff95 	bl	8008544 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800861a:	bf00      	nop
 800861c:	3710      	adds	r7, #16
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}

08008622 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008622:	b580      	push	{r7, lr}
 8008624:	b084      	sub	sp, #16
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800862a:	2300      	movs	r3, #0
 800862c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008632:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	695b      	ldr	r3, [r3, #20]
 800863a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800863e:	2b80      	cmp	r3, #128	@ 0x80
 8008640:	bf0c      	ite	eq
 8008642:	2301      	moveq	r3, #1
 8008644:	2300      	movne	r3, #0
 8008646:	b2db      	uxtb	r3, r3
 8008648:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008650:	b2db      	uxtb	r3, r3
 8008652:	2b21      	cmp	r3, #33	@ 0x21
 8008654:	d108      	bne.n	8008668 <UART_DMAError+0x46>
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d005      	beq.n	8008668 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	2200      	movs	r2, #0
 8008660:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8008662:	68b8      	ldr	r0, [r7, #8]
 8008664:	f000 f827 	bl	80086b6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	695b      	ldr	r3, [r3, #20]
 800866e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008672:	2b40      	cmp	r3, #64	@ 0x40
 8008674:	bf0c      	ite	eq
 8008676:	2301      	moveq	r3, #1
 8008678:	2300      	movne	r3, #0
 800867a:	b2db      	uxtb	r3, r3
 800867c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008684:	b2db      	uxtb	r3, r3
 8008686:	2b22      	cmp	r3, #34	@ 0x22
 8008688:	d108      	bne.n	800869c <UART_DMAError+0x7a>
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d005      	beq.n	800869c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	2200      	movs	r2, #0
 8008694:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8008696:	68b8      	ldr	r0, [r7, #8]
 8008698:	f000 f835 	bl	8008706 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086a0:	f043 0210 	orr.w	r2, r3, #16
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80086a8:	68b8      	ldr	r0, [r7, #8]
 80086aa:	f7ff ff55 	bl	8008558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086ae:	bf00      	nop
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80086b6:	b480      	push	{r7}
 80086b8:	b089      	sub	sp, #36	@ 0x24
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	330c      	adds	r3, #12
 80086c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	e853 3f00 	ldrex	r3, [r3]
 80086cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80086d4:	61fb      	str	r3, [r7, #28]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	330c      	adds	r3, #12
 80086dc:	69fa      	ldr	r2, [r7, #28]
 80086de:	61ba      	str	r2, [r7, #24]
 80086e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e2:	6979      	ldr	r1, [r7, #20]
 80086e4:	69ba      	ldr	r2, [r7, #24]
 80086e6:	e841 2300 	strex	r3, r2, [r1]
 80086ea:	613b      	str	r3, [r7, #16]
   return(result);
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d1e5      	bne.n	80086be <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2220      	movs	r2, #32
 80086f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80086fa:	bf00      	nop
 80086fc:	3724      	adds	r7, #36	@ 0x24
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr

08008706 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008706:	b480      	push	{r7}
 8008708:	b095      	sub	sp, #84	@ 0x54
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	330c      	adds	r3, #12
 8008714:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008716:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008718:	e853 3f00 	ldrex	r3, [r3]
 800871c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800871e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008720:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008724:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	330c      	adds	r3, #12
 800872c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800872e:	643a      	str	r2, [r7, #64]	@ 0x40
 8008730:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008732:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008734:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008736:	e841 2300 	strex	r3, r2, [r1]
 800873a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800873c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800873e:	2b00      	cmp	r3, #0
 8008740:	d1e5      	bne.n	800870e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	3314      	adds	r3, #20
 8008748:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800874a:	6a3b      	ldr	r3, [r7, #32]
 800874c:	e853 3f00 	ldrex	r3, [r3]
 8008750:	61fb      	str	r3, [r7, #28]
   return(result);
 8008752:	69fb      	ldr	r3, [r7, #28]
 8008754:	f023 0301 	bic.w	r3, r3, #1
 8008758:	64bb      	str	r3, [r7, #72]	@ 0x48
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	3314      	adds	r3, #20
 8008760:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008762:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008764:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008766:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008768:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800876a:	e841 2300 	strex	r3, r2, [r1]
 800876e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008772:	2b00      	cmp	r3, #0
 8008774:	d1e5      	bne.n	8008742 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800877a:	2b01      	cmp	r3, #1
 800877c:	d119      	bne.n	80087b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	330c      	adds	r3, #12
 8008784:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	e853 3f00 	ldrex	r3, [r3]
 800878c:	60bb      	str	r3, [r7, #8]
   return(result);
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	f023 0310 	bic.w	r3, r3, #16
 8008794:	647b      	str	r3, [r7, #68]	@ 0x44
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	330c      	adds	r3, #12
 800879c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800879e:	61ba      	str	r2, [r7, #24]
 80087a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a2:	6979      	ldr	r1, [r7, #20]
 80087a4:	69ba      	ldr	r2, [r7, #24]
 80087a6:	e841 2300 	strex	r3, r2, [r1]
 80087aa:	613b      	str	r3, [r7, #16]
   return(result);
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d1e5      	bne.n	800877e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2220      	movs	r2, #32
 80087b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80087c0:	bf00      	nop
 80087c2:	3754      	adds	r7, #84	@ 0x54
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr

080087cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80087cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80087d0:	b0c0      	sub	sp, #256	@ 0x100
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	691b      	ldr	r3, [r3, #16]
 80087e0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80087e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087e8:	68d9      	ldr	r1, [r3, #12]
 80087ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	ea40 0301 	orr.w	r3, r0, r1
 80087f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80087f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087fa:	689a      	ldr	r2, [r3, #8]
 80087fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008800:	691b      	ldr	r3, [r3, #16]
 8008802:	431a      	orrs	r2, r3
 8008804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008808:	695b      	ldr	r3, [r3, #20]
 800880a:	431a      	orrs	r2, r3
 800880c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008810:	69db      	ldr	r3, [r3, #28]
 8008812:	4313      	orrs	r3, r2
 8008814:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	68db      	ldr	r3, [r3, #12]
 8008820:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008824:	f021 010c 	bic.w	r1, r1, #12
 8008828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008832:	430b      	orrs	r3, r1
 8008834:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	695b      	ldr	r3, [r3, #20]
 800883e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008846:	6999      	ldr	r1, [r3, #24]
 8008848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	ea40 0301 	orr.w	r3, r0, r1
 8008852:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	4b8f      	ldr	r3, [pc, #572]	@ (8008a98 <UART_SetConfig+0x2cc>)
 800885c:	429a      	cmp	r2, r3
 800885e:	d005      	beq.n	800886c <UART_SetConfig+0xa0>
 8008860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008864:	681a      	ldr	r2, [r3, #0]
 8008866:	4b8d      	ldr	r3, [pc, #564]	@ (8008a9c <UART_SetConfig+0x2d0>)
 8008868:	429a      	cmp	r2, r3
 800886a:	d104      	bne.n	8008876 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800886c:	f7ff f880 	bl	8007970 <HAL_RCC_GetPCLK2Freq>
 8008870:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008874:	e003      	b.n	800887e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008876:	f7ff f867 	bl	8007948 <HAL_RCC_GetPCLK1Freq>
 800887a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800887e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008882:	69db      	ldr	r3, [r3, #28]
 8008884:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008888:	f040 810c 	bne.w	8008aa4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800888c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008890:	2200      	movs	r2, #0
 8008892:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008896:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800889a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800889e:	4622      	mov	r2, r4
 80088a0:	462b      	mov	r3, r5
 80088a2:	1891      	adds	r1, r2, r2
 80088a4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80088a6:	415b      	adcs	r3, r3
 80088a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80088aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80088ae:	4621      	mov	r1, r4
 80088b0:	eb12 0801 	adds.w	r8, r2, r1
 80088b4:	4629      	mov	r1, r5
 80088b6:	eb43 0901 	adc.w	r9, r3, r1
 80088ba:	f04f 0200 	mov.w	r2, #0
 80088be:	f04f 0300 	mov.w	r3, #0
 80088c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80088c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80088ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80088ce:	4690      	mov	r8, r2
 80088d0:	4699      	mov	r9, r3
 80088d2:	4623      	mov	r3, r4
 80088d4:	eb18 0303 	adds.w	r3, r8, r3
 80088d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80088dc:	462b      	mov	r3, r5
 80088de:	eb49 0303 	adc.w	r3, r9, r3
 80088e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80088e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80088f2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80088f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80088fa:	460b      	mov	r3, r1
 80088fc:	18db      	adds	r3, r3, r3
 80088fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8008900:	4613      	mov	r3, r2
 8008902:	eb42 0303 	adc.w	r3, r2, r3
 8008906:	657b      	str	r3, [r7, #84]	@ 0x54
 8008908:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800890c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008910:	f7f8 f94e 	bl	8000bb0 <__aeabi_uldivmod>
 8008914:	4602      	mov	r2, r0
 8008916:	460b      	mov	r3, r1
 8008918:	4b61      	ldr	r3, [pc, #388]	@ (8008aa0 <UART_SetConfig+0x2d4>)
 800891a:	fba3 2302 	umull	r2, r3, r3, r2
 800891e:	095b      	lsrs	r3, r3, #5
 8008920:	011c      	lsls	r4, r3, #4
 8008922:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008926:	2200      	movs	r2, #0
 8008928:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800892c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008930:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008934:	4642      	mov	r2, r8
 8008936:	464b      	mov	r3, r9
 8008938:	1891      	adds	r1, r2, r2
 800893a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800893c:	415b      	adcs	r3, r3
 800893e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008940:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008944:	4641      	mov	r1, r8
 8008946:	eb12 0a01 	adds.w	sl, r2, r1
 800894a:	4649      	mov	r1, r9
 800894c:	eb43 0b01 	adc.w	fp, r3, r1
 8008950:	f04f 0200 	mov.w	r2, #0
 8008954:	f04f 0300 	mov.w	r3, #0
 8008958:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800895c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008960:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008964:	4692      	mov	sl, r2
 8008966:	469b      	mov	fp, r3
 8008968:	4643      	mov	r3, r8
 800896a:	eb1a 0303 	adds.w	r3, sl, r3
 800896e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008972:	464b      	mov	r3, r9
 8008974:	eb4b 0303 	adc.w	r3, fp, r3
 8008978:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800897c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	2200      	movs	r2, #0
 8008984:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008988:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800898c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008990:	460b      	mov	r3, r1
 8008992:	18db      	adds	r3, r3, r3
 8008994:	643b      	str	r3, [r7, #64]	@ 0x40
 8008996:	4613      	mov	r3, r2
 8008998:	eb42 0303 	adc.w	r3, r2, r3
 800899c:	647b      	str	r3, [r7, #68]	@ 0x44
 800899e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80089a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80089a6:	f7f8 f903 	bl	8000bb0 <__aeabi_uldivmod>
 80089aa:	4602      	mov	r2, r0
 80089ac:	460b      	mov	r3, r1
 80089ae:	4611      	mov	r1, r2
 80089b0:	4b3b      	ldr	r3, [pc, #236]	@ (8008aa0 <UART_SetConfig+0x2d4>)
 80089b2:	fba3 2301 	umull	r2, r3, r3, r1
 80089b6:	095b      	lsrs	r3, r3, #5
 80089b8:	2264      	movs	r2, #100	@ 0x64
 80089ba:	fb02 f303 	mul.w	r3, r2, r3
 80089be:	1acb      	subs	r3, r1, r3
 80089c0:	00db      	lsls	r3, r3, #3
 80089c2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80089c6:	4b36      	ldr	r3, [pc, #216]	@ (8008aa0 <UART_SetConfig+0x2d4>)
 80089c8:	fba3 2302 	umull	r2, r3, r3, r2
 80089cc:	095b      	lsrs	r3, r3, #5
 80089ce:	005b      	lsls	r3, r3, #1
 80089d0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80089d4:	441c      	add	r4, r3
 80089d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80089da:	2200      	movs	r2, #0
 80089dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80089e0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80089e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80089e8:	4642      	mov	r2, r8
 80089ea:	464b      	mov	r3, r9
 80089ec:	1891      	adds	r1, r2, r2
 80089ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80089f0:	415b      	adcs	r3, r3
 80089f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80089f8:	4641      	mov	r1, r8
 80089fa:	1851      	adds	r1, r2, r1
 80089fc:	6339      	str	r1, [r7, #48]	@ 0x30
 80089fe:	4649      	mov	r1, r9
 8008a00:	414b      	adcs	r3, r1
 8008a02:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a04:	f04f 0200 	mov.w	r2, #0
 8008a08:	f04f 0300 	mov.w	r3, #0
 8008a0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008a10:	4659      	mov	r1, fp
 8008a12:	00cb      	lsls	r3, r1, #3
 8008a14:	4651      	mov	r1, sl
 8008a16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a1a:	4651      	mov	r1, sl
 8008a1c:	00ca      	lsls	r2, r1, #3
 8008a1e:	4610      	mov	r0, r2
 8008a20:	4619      	mov	r1, r3
 8008a22:	4603      	mov	r3, r0
 8008a24:	4642      	mov	r2, r8
 8008a26:	189b      	adds	r3, r3, r2
 8008a28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008a2c:	464b      	mov	r3, r9
 8008a2e:	460a      	mov	r2, r1
 8008a30:	eb42 0303 	adc.w	r3, r2, r3
 8008a34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008a44:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008a48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	18db      	adds	r3, r3, r3
 8008a50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008a52:	4613      	mov	r3, r2
 8008a54:	eb42 0303 	adc.w	r3, r2, r3
 8008a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008a5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008a62:	f7f8 f8a5 	bl	8000bb0 <__aeabi_uldivmod>
 8008a66:	4602      	mov	r2, r0
 8008a68:	460b      	mov	r3, r1
 8008a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8008aa0 <UART_SetConfig+0x2d4>)
 8008a6c:	fba3 1302 	umull	r1, r3, r3, r2
 8008a70:	095b      	lsrs	r3, r3, #5
 8008a72:	2164      	movs	r1, #100	@ 0x64
 8008a74:	fb01 f303 	mul.w	r3, r1, r3
 8008a78:	1ad3      	subs	r3, r2, r3
 8008a7a:	00db      	lsls	r3, r3, #3
 8008a7c:	3332      	adds	r3, #50	@ 0x32
 8008a7e:	4a08      	ldr	r2, [pc, #32]	@ (8008aa0 <UART_SetConfig+0x2d4>)
 8008a80:	fba2 2303 	umull	r2, r3, r2, r3
 8008a84:	095b      	lsrs	r3, r3, #5
 8008a86:	f003 0207 	and.w	r2, r3, #7
 8008a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4422      	add	r2, r4
 8008a92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008a94:	e106      	b.n	8008ca4 <UART_SetConfig+0x4d8>
 8008a96:	bf00      	nop
 8008a98:	40011000 	.word	0x40011000
 8008a9c:	40011400 	.word	0x40011400
 8008aa0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008aa4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008aae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008ab2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008ab6:	4642      	mov	r2, r8
 8008ab8:	464b      	mov	r3, r9
 8008aba:	1891      	adds	r1, r2, r2
 8008abc:	6239      	str	r1, [r7, #32]
 8008abe:	415b      	adcs	r3, r3
 8008ac0:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ac2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008ac6:	4641      	mov	r1, r8
 8008ac8:	1854      	adds	r4, r2, r1
 8008aca:	4649      	mov	r1, r9
 8008acc:	eb43 0501 	adc.w	r5, r3, r1
 8008ad0:	f04f 0200 	mov.w	r2, #0
 8008ad4:	f04f 0300 	mov.w	r3, #0
 8008ad8:	00eb      	lsls	r3, r5, #3
 8008ada:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008ade:	00e2      	lsls	r2, r4, #3
 8008ae0:	4614      	mov	r4, r2
 8008ae2:	461d      	mov	r5, r3
 8008ae4:	4643      	mov	r3, r8
 8008ae6:	18e3      	adds	r3, r4, r3
 8008ae8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008aec:	464b      	mov	r3, r9
 8008aee:	eb45 0303 	adc.w	r3, r5, r3
 8008af2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	2200      	movs	r2, #0
 8008afe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008b02:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008b06:	f04f 0200 	mov.w	r2, #0
 8008b0a:	f04f 0300 	mov.w	r3, #0
 8008b0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008b12:	4629      	mov	r1, r5
 8008b14:	008b      	lsls	r3, r1, #2
 8008b16:	4621      	mov	r1, r4
 8008b18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b1c:	4621      	mov	r1, r4
 8008b1e:	008a      	lsls	r2, r1, #2
 8008b20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008b24:	f7f8 f844 	bl	8000bb0 <__aeabi_uldivmod>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	4b60      	ldr	r3, [pc, #384]	@ (8008cb0 <UART_SetConfig+0x4e4>)
 8008b2e:	fba3 2302 	umull	r2, r3, r3, r2
 8008b32:	095b      	lsrs	r3, r3, #5
 8008b34:	011c      	lsls	r4, r3, #4
 8008b36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008b40:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008b44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008b48:	4642      	mov	r2, r8
 8008b4a:	464b      	mov	r3, r9
 8008b4c:	1891      	adds	r1, r2, r2
 8008b4e:	61b9      	str	r1, [r7, #24]
 8008b50:	415b      	adcs	r3, r3
 8008b52:	61fb      	str	r3, [r7, #28]
 8008b54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008b58:	4641      	mov	r1, r8
 8008b5a:	1851      	adds	r1, r2, r1
 8008b5c:	6139      	str	r1, [r7, #16]
 8008b5e:	4649      	mov	r1, r9
 8008b60:	414b      	adcs	r3, r1
 8008b62:	617b      	str	r3, [r7, #20]
 8008b64:	f04f 0200 	mov.w	r2, #0
 8008b68:	f04f 0300 	mov.w	r3, #0
 8008b6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008b70:	4659      	mov	r1, fp
 8008b72:	00cb      	lsls	r3, r1, #3
 8008b74:	4651      	mov	r1, sl
 8008b76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b7a:	4651      	mov	r1, sl
 8008b7c:	00ca      	lsls	r2, r1, #3
 8008b7e:	4610      	mov	r0, r2
 8008b80:	4619      	mov	r1, r3
 8008b82:	4603      	mov	r3, r0
 8008b84:	4642      	mov	r2, r8
 8008b86:	189b      	adds	r3, r3, r2
 8008b88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008b8c:	464b      	mov	r3, r9
 8008b8e:	460a      	mov	r2, r1
 8008b90:	eb42 0303 	adc.w	r3, r2, r3
 8008b94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008ba2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008ba4:	f04f 0200 	mov.w	r2, #0
 8008ba8:	f04f 0300 	mov.w	r3, #0
 8008bac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008bb0:	4649      	mov	r1, r9
 8008bb2:	008b      	lsls	r3, r1, #2
 8008bb4:	4641      	mov	r1, r8
 8008bb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008bba:	4641      	mov	r1, r8
 8008bbc:	008a      	lsls	r2, r1, #2
 8008bbe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008bc2:	f7f7 fff5 	bl	8000bb0 <__aeabi_uldivmod>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	460b      	mov	r3, r1
 8008bca:	4611      	mov	r1, r2
 8008bcc:	4b38      	ldr	r3, [pc, #224]	@ (8008cb0 <UART_SetConfig+0x4e4>)
 8008bce:	fba3 2301 	umull	r2, r3, r3, r1
 8008bd2:	095b      	lsrs	r3, r3, #5
 8008bd4:	2264      	movs	r2, #100	@ 0x64
 8008bd6:	fb02 f303 	mul.w	r3, r2, r3
 8008bda:	1acb      	subs	r3, r1, r3
 8008bdc:	011b      	lsls	r3, r3, #4
 8008bde:	3332      	adds	r3, #50	@ 0x32
 8008be0:	4a33      	ldr	r2, [pc, #204]	@ (8008cb0 <UART_SetConfig+0x4e4>)
 8008be2:	fba2 2303 	umull	r2, r3, r2, r3
 8008be6:	095b      	lsrs	r3, r3, #5
 8008be8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008bec:	441c      	add	r4, r3
 8008bee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	673b      	str	r3, [r7, #112]	@ 0x70
 8008bf6:	677a      	str	r2, [r7, #116]	@ 0x74
 8008bf8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008bfc:	4642      	mov	r2, r8
 8008bfe:	464b      	mov	r3, r9
 8008c00:	1891      	adds	r1, r2, r2
 8008c02:	60b9      	str	r1, [r7, #8]
 8008c04:	415b      	adcs	r3, r3
 8008c06:	60fb      	str	r3, [r7, #12]
 8008c08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008c0c:	4641      	mov	r1, r8
 8008c0e:	1851      	adds	r1, r2, r1
 8008c10:	6039      	str	r1, [r7, #0]
 8008c12:	4649      	mov	r1, r9
 8008c14:	414b      	adcs	r3, r1
 8008c16:	607b      	str	r3, [r7, #4]
 8008c18:	f04f 0200 	mov.w	r2, #0
 8008c1c:	f04f 0300 	mov.w	r3, #0
 8008c20:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008c24:	4659      	mov	r1, fp
 8008c26:	00cb      	lsls	r3, r1, #3
 8008c28:	4651      	mov	r1, sl
 8008c2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c2e:	4651      	mov	r1, sl
 8008c30:	00ca      	lsls	r2, r1, #3
 8008c32:	4610      	mov	r0, r2
 8008c34:	4619      	mov	r1, r3
 8008c36:	4603      	mov	r3, r0
 8008c38:	4642      	mov	r2, r8
 8008c3a:	189b      	adds	r3, r3, r2
 8008c3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008c3e:	464b      	mov	r3, r9
 8008c40:	460a      	mov	r2, r1
 8008c42:	eb42 0303 	adc.w	r3, r2, r3
 8008c46:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	663b      	str	r3, [r7, #96]	@ 0x60
 8008c52:	667a      	str	r2, [r7, #100]	@ 0x64
 8008c54:	f04f 0200 	mov.w	r2, #0
 8008c58:	f04f 0300 	mov.w	r3, #0
 8008c5c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008c60:	4649      	mov	r1, r9
 8008c62:	008b      	lsls	r3, r1, #2
 8008c64:	4641      	mov	r1, r8
 8008c66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c6a:	4641      	mov	r1, r8
 8008c6c:	008a      	lsls	r2, r1, #2
 8008c6e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008c72:	f7f7 ff9d 	bl	8000bb0 <__aeabi_uldivmod>
 8008c76:	4602      	mov	r2, r0
 8008c78:	460b      	mov	r3, r1
 8008c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8008cb0 <UART_SetConfig+0x4e4>)
 8008c7c:	fba3 1302 	umull	r1, r3, r3, r2
 8008c80:	095b      	lsrs	r3, r3, #5
 8008c82:	2164      	movs	r1, #100	@ 0x64
 8008c84:	fb01 f303 	mul.w	r3, r1, r3
 8008c88:	1ad3      	subs	r3, r2, r3
 8008c8a:	011b      	lsls	r3, r3, #4
 8008c8c:	3332      	adds	r3, #50	@ 0x32
 8008c8e:	4a08      	ldr	r2, [pc, #32]	@ (8008cb0 <UART_SetConfig+0x4e4>)
 8008c90:	fba2 2303 	umull	r2, r3, r2, r3
 8008c94:	095b      	lsrs	r3, r3, #5
 8008c96:	f003 020f 	and.w	r2, r3, #15
 8008c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4422      	add	r2, r4
 8008ca2:	609a      	str	r2, [r3, #8]
}
 8008ca4:	bf00      	nop
 8008ca6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008caa:	46bd      	mov	sp, r7
 8008cac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008cb0:	51eb851f 	.word	0x51eb851f

08008cb4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008cb4:	b084      	sub	sp, #16
 8008cb6:	b580      	push	{r7, lr}
 8008cb8:	b084      	sub	sp, #16
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
 8008cbe:	f107 001c 	add.w	r0, r7, #28
 8008cc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008cc6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	d123      	bne.n	8008d16 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cd2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	68db      	ldr	r3, [r3, #12]
 8008cde:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008ce2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	68db      	ldr	r3, [r3, #12]
 8008cee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008cf6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	d105      	bne.n	8008d0a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	68db      	ldr	r3, [r3, #12]
 8008d02:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 f9dc 	bl	80090c8 <USB_CoreReset>
 8008d10:	4603      	mov	r3, r0
 8008d12:	73fb      	strb	r3, [r7, #15]
 8008d14:	e01b      	b.n	8008d4e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	68db      	ldr	r3, [r3, #12]
 8008d1a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 f9d0 	bl	80090c8 <USB_CoreReset>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008d2c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d106      	bne.n	8008d42 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d38:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	639a      	str	r2, [r3, #56]	@ 0x38
 8008d40:	e005      	b.n	8008d4e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d46:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008d4e:	7fbb      	ldrb	r3, [r7, #30]
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d10b      	bne.n	8008d6c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	689b      	ldr	r3, [r3, #8]
 8008d58:	f043 0206 	orr.w	r2, r3, #6
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	f043 0220 	orr.w	r2, r3, #32
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3710      	adds	r7, #16
 8008d72:	46bd      	mov	sp, r7
 8008d74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d78:	b004      	add	sp, #16
 8008d7a:	4770      	bx	lr

08008d7c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	f043 0201 	orr.w	r2, r3, #1
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	370c      	adds	r7, #12
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr

08008d9e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d9e:	b480      	push	{r7}
 8008da0:	b083      	sub	sp, #12
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	689b      	ldr	r3, [r3, #8]
 8008daa:	f023 0201 	bic.w	r2, r3, #1
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008db2:	2300      	movs	r3, #0
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	370c      	adds	r7, #12
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr

08008dc0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b084      	sub	sp, #16
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	460b      	mov	r3, r1
 8008dca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	68db      	ldr	r3, [r3, #12]
 8008dd4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008ddc:	78fb      	ldrb	r3, [r7, #3]
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	d115      	bne.n	8008e0e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008dee:	200a      	movs	r0, #10
 8008df0:	f7f9 fb76 	bl	80024e0 <HAL_Delay>
      ms += 10U;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	330a      	adds	r3, #10
 8008df8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 f956 	bl	80090ac <USB_GetMode>
 8008e00:	4603      	mov	r3, r0
 8008e02:	2b01      	cmp	r3, #1
 8008e04:	d01e      	beq.n	8008e44 <USB_SetCurrentMode+0x84>
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2bc7      	cmp	r3, #199	@ 0xc7
 8008e0a:	d9f0      	bls.n	8008dee <USB_SetCurrentMode+0x2e>
 8008e0c:	e01a      	b.n	8008e44 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008e0e:	78fb      	ldrb	r3, [r7, #3]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d115      	bne.n	8008e40 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008e20:	200a      	movs	r0, #10
 8008e22:	f7f9 fb5d 	bl	80024e0 <HAL_Delay>
      ms += 10U;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	330a      	adds	r3, #10
 8008e2a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 f93d 	bl	80090ac <USB_GetMode>
 8008e32:	4603      	mov	r3, r0
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d005      	beq.n	8008e44 <USB_SetCurrentMode+0x84>
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2bc7      	cmp	r3, #199	@ 0xc7
 8008e3c:	d9f0      	bls.n	8008e20 <USB_SetCurrentMode+0x60>
 8008e3e:	e001      	b.n	8008e44 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008e40:	2301      	movs	r3, #1
 8008e42:	e005      	b.n	8008e50 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2bc8      	cmp	r3, #200	@ 0xc8
 8008e48:	d101      	bne.n	8008e4e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	e000      	b.n	8008e50 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008e4e:	2300      	movs	r3, #0
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3710      	adds	r7, #16
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b085      	sub	sp, #20
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008e62:	2300      	movs	r3, #0
 8008e64:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	3301      	adds	r3, #1
 8008e6a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008e72:	d901      	bls.n	8008e78 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008e74:	2303      	movs	r3, #3
 8008e76:	e01b      	b.n	8008eb0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	691b      	ldr	r3, [r3, #16]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	daf2      	bge.n	8008e66 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008e80:	2300      	movs	r3, #0
 8008e82:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	019b      	lsls	r3, r3, #6
 8008e88:	f043 0220 	orr.w	r2, r3, #32
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	3301      	adds	r3, #1
 8008e94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008e9c:	d901      	bls.n	8008ea2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008e9e:	2303      	movs	r3, #3
 8008ea0:	e006      	b.n	8008eb0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	691b      	ldr	r3, [r3, #16]
 8008ea6:	f003 0320 	and.w	r3, r3, #32
 8008eaa:	2b20      	cmp	r3, #32
 8008eac:	d0f0      	beq.n	8008e90 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008eae:	2300      	movs	r3, #0
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3714      	adds	r7, #20
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr

08008ebc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b085      	sub	sp, #20
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	3301      	adds	r3, #1
 8008ecc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008ed4:	d901      	bls.n	8008eda <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008ed6:	2303      	movs	r3, #3
 8008ed8:	e018      	b.n	8008f0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	691b      	ldr	r3, [r3, #16]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	daf2      	bge.n	8008ec8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2210      	movs	r2, #16
 8008eea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	3301      	adds	r3, #1
 8008ef0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008ef8:	d901      	bls.n	8008efe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008efa:	2303      	movs	r3, #3
 8008efc:	e006      	b.n	8008f0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	691b      	ldr	r3, [r3, #16]
 8008f02:	f003 0310 	and.w	r3, r3, #16
 8008f06:	2b10      	cmp	r3, #16
 8008f08:	d0f0      	beq.n	8008eec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008f0a:	2300      	movs	r3, #0
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3714      	adds	r7, #20
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr

08008f18 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b089      	sub	sp, #36	@ 0x24
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	4611      	mov	r1, r2
 8008f24:	461a      	mov	r2, r3
 8008f26:	460b      	mov	r3, r1
 8008f28:	71fb      	strb	r3, [r7, #7]
 8008f2a:	4613      	mov	r3, r2
 8008f2c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008f36:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d123      	bne.n	8008f86 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008f3e:	88bb      	ldrh	r3, [r7, #4]
 8008f40:	3303      	adds	r3, #3
 8008f42:	089b      	lsrs	r3, r3, #2
 8008f44:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008f46:	2300      	movs	r3, #0
 8008f48:	61bb      	str	r3, [r7, #24]
 8008f4a:	e018      	b.n	8008f7e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008f4c:	79fb      	ldrb	r3, [r7, #7]
 8008f4e:	031a      	lsls	r2, r3, #12
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	4413      	add	r3, r2
 8008f54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008f58:	461a      	mov	r2, r3
 8008f5a:	69fb      	ldr	r3, [r7, #28]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008f60:	69fb      	ldr	r3, [r7, #28]
 8008f62:	3301      	adds	r3, #1
 8008f64:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008f66:	69fb      	ldr	r3, [r7, #28]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008f6c:	69fb      	ldr	r3, [r7, #28]
 8008f6e:	3301      	adds	r3, #1
 8008f70:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008f72:	69fb      	ldr	r3, [r7, #28]
 8008f74:	3301      	adds	r3, #1
 8008f76:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008f78:	69bb      	ldr	r3, [r7, #24]
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	61bb      	str	r3, [r7, #24]
 8008f7e:	69ba      	ldr	r2, [r7, #24]
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	429a      	cmp	r2, r3
 8008f84:	d3e2      	bcc.n	8008f4c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008f86:	2300      	movs	r3, #0
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3724      	adds	r7, #36	@ 0x24
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr

08008f94 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b08b      	sub	sp, #44	@ 0x2c
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	60b9      	str	r1, [r7, #8]
 8008f9e:	4613      	mov	r3, r2
 8008fa0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008faa:	88fb      	ldrh	r3, [r7, #6]
 8008fac:	089b      	lsrs	r3, r3, #2
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008fb2:	88fb      	ldrh	r3, [r7, #6]
 8008fb4:	f003 0303 	and.w	r3, r3, #3
 8008fb8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008fba:	2300      	movs	r3, #0
 8008fbc:	623b      	str	r3, [r7, #32]
 8008fbe:	e014      	b.n	8008fea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008fc0:	69bb      	ldr	r3, [r7, #24]
 8008fc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fca:	601a      	str	r2, [r3, #0]
    pDest++;
 8008fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fce:	3301      	adds	r3, #1
 8008fd0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fda:	3301      	adds	r3, #1
 8008fdc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008fe4:	6a3b      	ldr	r3, [r7, #32]
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	623b      	str	r3, [r7, #32]
 8008fea:	6a3a      	ldr	r2, [r7, #32]
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d3e6      	bcc.n	8008fc0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008ff2:	8bfb      	ldrh	r3, [r7, #30]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d01e      	beq.n	8009036 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008ffc:	69bb      	ldr	r3, [r7, #24]
 8008ffe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009002:	461a      	mov	r2, r3
 8009004:	f107 0310 	add.w	r3, r7, #16
 8009008:	6812      	ldr	r2, [r2, #0]
 800900a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800900c:	693a      	ldr	r2, [r7, #16]
 800900e:	6a3b      	ldr	r3, [r7, #32]
 8009010:	b2db      	uxtb	r3, r3
 8009012:	00db      	lsls	r3, r3, #3
 8009014:	fa22 f303 	lsr.w	r3, r2, r3
 8009018:	b2da      	uxtb	r2, r3
 800901a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800901c:	701a      	strb	r2, [r3, #0]
      i++;
 800901e:	6a3b      	ldr	r3, [r7, #32]
 8009020:	3301      	adds	r3, #1
 8009022:	623b      	str	r3, [r7, #32]
      pDest++;
 8009024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009026:	3301      	adds	r3, #1
 8009028:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800902a:	8bfb      	ldrh	r3, [r7, #30]
 800902c:	3b01      	subs	r3, #1
 800902e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009030:	8bfb      	ldrh	r3, [r7, #30]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d1ea      	bne.n	800900c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009038:	4618      	mov	r0, r3
 800903a:	372c      	adds	r7, #44	@ 0x2c
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr

08009044 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009044:	b480      	push	{r7}
 8009046:	b085      	sub	sp, #20
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	695b      	ldr	r3, [r3, #20]
 8009050:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	699b      	ldr	r3, [r3, #24]
 8009056:	68fa      	ldr	r2, [r7, #12]
 8009058:	4013      	ands	r3, r2
 800905a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800905c:	68fb      	ldr	r3, [r7, #12]
}
 800905e:	4618      	mov	r0, r3
 8009060:	3714      	adds	r7, #20
 8009062:	46bd      	mov	sp, r7
 8009064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009068:	4770      	bx	lr

0800906a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800906a:	b480      	push	{r7}
 800906c:	b085      	sub	sp, #20
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
 8009072:	460b      	mov	r3, r1
 8009074:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800907a:	78fb      	ldrb	r3, [r7, #3]
 800907c:	015a      	lsls	r2, r3, #5
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	4413      	add	r3, r2
 8009082:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800908a:	78fb      	ldrb	r3, [r7, #3]
 800908c:	015a      	lsls	r2, r3, #5
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	4413      	add	r3, r2
 8009092:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	68ba      	ldr	r2, [r7, #8]
 800909a:	4013      	ands	r3, r2
 800909c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800909e:	68bb      	ldr	r3, [r7, #8]
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3714      	adds	r7, #20
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	695b      	ldr	r3, [r3, #20]
 80090b8:	f003 0301 	and.w	r3, r3, #1
}
 80090bc:	4618      	mov	r0, r3
 80090be:	370c      	adds	r7, #12
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr

080090c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b085      	sub	sp, #20
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80090d0:	2300      	movs	r3, #0
 80090d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	3301      	adds	r3, #1
 80090d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80090e0:	d901      	bls.n	80090e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80090e2:	2303      	movs	r3, #3
 80090e4:	e01b      	b.n	800911e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	691b      	ldr	r3, [r3, #16]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	daf2      	bge.n	80090d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80090ee:	2300      	movs	r3, #0
 80090f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	691b      	ldr	r3, [r3, #16]
 80090f6:	f043 0201 	orr.w	r2, r3, #1
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	3301      	adds	r3, #1
 8009102:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800910a:	d901      	bls.n	8009110 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800910c:	2303      	movs	r3, #3
 800910e:	e006      	b.n	800911e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	691b      	ldr	r3, [r3, #16]
 8009114:	f003 0301 	and.w	r3, r3, #1
 8009118:	2b01      	cmp	r3, #1
 800911a:	d0f0      	beq.n	80090fe <USB_CoreReset+0x36>

  return HAL_OK;
 800911c:	2300      	movs	r3, #0
}
 800911e:	4618      	mov	r0, r3
 8009120:	3714      	adds	r7, #20
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr
	...

0800912c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800912c:	b084      	sub	sp, #16
 800912e:	b580      	push	{r7, lr}
 8009130:	b086      	sub	sp, #24
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
 8009136:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800913a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800913e:	2300      	movs	r3, #0
 8009140:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800914c:	461a      	mov	r2, r3
 800914e:	2300      	movs	r3, #0
 8009150:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009156:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009162:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800916e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	68db      	ldr	r3, [r3, #12]
 800917a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800917e:	2b00      	cmp	r3, #0
 8009180:	d119      	bne.n	80091b6 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009182:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009186:	2b01      	cmp	r3, #1
 8009188:	d10a      	bne.n	80091a0 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	68fa      	ldr	r2, [r7, #12]
 8009194:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009198:	f043 0304 	orr.w	r3, r3, #4
 800919c:	6013      	str	r3, [r2, #0]
 800919e:	e014      	b.n	80091ca <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	68fa      	ldr	r2, [r7, #12]
 80091aa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80091ae:	f023 0304 	bic.w	r3, r3, #4
 80091b2:	6013      	str	r3, [r2, #0]
 80091b4:	e009      	b.n	80091ca <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	68fa      	ldr	r2, [r7, #12]
 80091c0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80091c4:	f023 0304 	bic.w	r3, r3, #4
 80091c8:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80091ca:	2110      	movs	r1, #16
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f7ff fe43 	bl	8008e58 <USB_FlushTxFifo>
 80091d2:	4603      	mov	r3, r0
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d001      	beq.n	80091dc <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80091d8:	2301      	movs	r3, #1
 80091da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f7ff fe6d 	bl	8008ebc <USB_FlushRxFifo>
 80091e2:	4603      	mov	r3, r0
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d001      	beq.n	80091ec <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80091e8:	2301      	movs	r3, #1
 80091ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80091ec:	2300      	movs	r3, #0
 80091ee:	613b      	str	r3, [r7, #16]
 80091f0:	e015      	b.n	800921e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	015a      	lsls	r2, r3, #5
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	4413      	add	r3, r2
 80091fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091fe:	461a      	mov	r2, r3
 8009200:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009204:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	015a      	lsls	r2, r3, #5
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	4413      	add	r3, r2
 800920e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009212:	461a      	mov	r2, r3
 8009214:	2300      	movs	r3, #0
 8009216:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	3301      	adds	r3, #1
 800921c:	613b      	str	r3, [r7, #16]
 800921e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009222:	461a      	mov	r2, r3
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	4293      	cmp	r3, r2
 8009228:	d3e3      	bcc.n	80091f2 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2200      	movs	r2, #0
 800922e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009236:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	4a18      	ldr	r2, [pc, #96]	@ (800929c <USB_HostInit+0x170>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d10b      	bne.n	8009258 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009246:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	4a15      	ldr	r2, [pc, #84]	@ (80092a0 <USB_HostInit+0x174>)
 800924c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	4a14      	ldr	r2, [pc, #80]	@ (80092a4 <USB_HostInit+0x178>)
 8009252:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8009256:	e009      	b.n	800926c <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2280      	movs	r2, #128	@ 0x80
 800925c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	4a11      	ldr	r2, [pc, #68]	@ (80092a8 <USB_HostInit+0x17c>)
 8009262:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	4a11      	ldr	r2, [pc, #68]	@ (80092ac <USB_HostInit+0x180>)
 8009268:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800926c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009270:	2b00      	cmp	r3, #0
 8009272:	d105      	bne.n	8009280 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	699b      	ldr	r3, [r3, #24]
 8009278:	f043 0210 	orr.w	r2, r3, #16
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	699a      	ldr	r2, [r3, #24]
 8009284:	4b0a      	ldr	r3, [pc, #40]	@ (80092b0 <USB_HostInit+0x184>)
 8009286:	4313      	orrs	r3, r2
 8009288:	687a      	ldr	r2, [r7, #4]
 800928a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800928c:	7dfb      	ldrb	r3, [r7, #23]
}
 800928e:	4618      	mov	r0, r3
 8009290:	3718      	adds	r7, #24
 8009292:	46bd      	mov	sp, r7
 8009294:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009298:	b004      	add	sp, #16
 800929a:	4770      	bx	lr
 800929c:	40040000 	.word	0x40040000
 80092a0:	01000200 	.word	0x01000200
 80092a4:	00e00300 	.word	0x00e00300
 80092a8:	00600080 	.word	0x00600080
 80092ac:	004000e0 	.word	0x004000e0
 80092b0:	a3200008 	.word	0xa3200008

080092b4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b085      	sub	sp, #20
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
 80092bc:	460b      	mov	r3, r1
 80092be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	68fa      	ldr	r2, [r7, #12]
 80092ce:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80092d2:	f023 0303 	bic.w	r3, r3, #3
 80092d6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	78fb      	ldrb	r3, [r7, #3]
 80092e2:	f003 0303 	and.w	r3, r3, #3
 80092e6:	68f9      	ldr	r1, [r7, #12]
 80092e8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80092ec:	4313      	orrs	r3, r2
 80092ee:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80092f0:	78fb      	ldrb	r3, [r7, #3]
 80092f2:	2b01      	cmp	r3, #1
 80092f4:	d107      	bne.n	8009306 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80092fc:	461a      	mov	r2, r3
 80092fe:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8009302:	6053      	str	r3, [r2, #4]
 8009304:	e00c      	b.n	8009320 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8009306:	78fb      	ldrb	r3, [r7, #3]
 8009308:	2b02      	cmp	r3, #2
 800930a:	d107      	bne.n	800931c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009312:	461a      	mov	r2, r3
 8009314:	f241 7370 	movw	r3, #6000	@ 0x1770
 8009318:	6053      	str	r3, [r2, #4]
 800931a:	e001      	b.n	8009320 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800931c:	2301      	movs	r3, #1
 800931e:	e000      	b.n	8009322 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8009320:	2300      	movs	r3, #0
}
 8009322:	4618      	mov	r0, r3
 8009324:	3714      	adds	r7, #20
 8009326:	46bd      	mov	sp, r7
 8009328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932c:	4770      	bx	lr

0800932e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800932e:	b580      	push	{r7, lr}
 8009330:	b084      	sub	sp, #16
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800933a:	2300      	movs	r3, #0
 800933c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800934e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	68fa      	ldr	r2, [r7, #12]
 8009354:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009358:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800935c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800935e:	2064      	movs	r0, #100	@ 0x64
 8009360:	f7f9 f8be 	bl	80024e0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	68fa      	ldr	r2, [r7, #12]
 8009368:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800936c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009370:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009372:	200a      	movs	r0, #10
 8009374:	f7f9 f8b4 	bl	80024e0 <HAL_Delay>

  return HAL_OK;
 8009378:	2300      	movs	r3, #0
}
 800937a:	4618      	mov	r0, r3
 800937c:	3710      	adds	r7, #16
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}

08009382 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009382:	b480      	push	{r7}
 8009384:	b085      	sub	sp, #20
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
 800938a:	460b      	mov	r3, r1
 800938c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009392:	2300      	movs	r3, #0
 8009394:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80093a6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d109      	bne.n	80093c6 <USB_DriveVbus+0x44>
 80093b2:	78fb      	ldrb	r3, [r7, #3]
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d106      	bne.n	80093c6 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	68fa      	ldr	r2, [r7, #12]
 80093bc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80093c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80093c4:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80093cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80093d0:	d109      	bne.n	80093e6 <USB_DriveVbus+0x64>
 80093d2:	78fb      	ldrb	r3, [r7, #3]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d106      	bne.n	80093e6 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	68fa      	ldr	r2, [r7, #12]
 80093dc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80093e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80093e4:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80093e6:	2300      	movs	r3, #0
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3714      	adds	r7, #20
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr

080093f4 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b085      	sub	sp, #20
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009400:	2300      	movs	r3, #0
 8009402:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	0c5b      	lsrs	r3, r3, #17
 8009412:	f003 0303 	and.w	r3, r3, #3
}
 8009416:	4618      	mov	r0, r3
 8009418:	3714      	adds	r7, #20
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr

08009422 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8009422:	b480      	push	{r7}
 8009424:	b085      	sub	sp, #20
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009434:	689b      	ldr	r3, [r3, #8]
 8009436:	b29b      	uxth	r3, r3
}
 8009438:	4618      	mov	r0, r3
 800943a:	3714      	adds	r7, #20
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr

08009444 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b088      	sub	sp, #32
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	4608      	mov	r0, r1
 800944e:	4611      	mov	r1, r2
 8009450:	461a      	mov	r2, r3
 8009452:	4603      	mov	r3, r0
 8009454:	70fb      	strb	r3, [r7, #3]
 8009456:	460b      	mov	r3, r1
 8009458:	70bb      	strb	r3, [r7, #2]
 800945a:	4613      	mov	r3, r2
 800945c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800945e:	2300      	movs	r3, #0
 8009460:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8009466:	78fb      	ldrb	r3, [r7, #3]
 8009468:	015a      	lsls	r2, r3, #5
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	4413      	add	r3, r2
 800946e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009472:	461a      	mov	r2, r3
 8009474:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009478:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800947a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800947e:	2b03      	cmp	r3, #3
 8009480:	d87c      	bhi.n	800957c <USB_HC_Init+0x138>
 8009482:	a201      	add	r2, pc, #4	@ (adr r2, 8009488 <USB_HC_Init+0x44>)
 8009484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009488:	08009499 	.word	0x08009499
 800948c:	0800953f 	.word	0x0800953f
 8009490:	08009499 	.word	0x08009499
 8009494:	08009501 	.word	0x08009501
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009498:	78fb      	ldrb	r3, [r7, #3]
 800949a:	015a      	lsls	r2, r3, #5
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	4413      	add	r3, r2
 80094a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094a4:	461a      	mov	r2, r3
 80094a6:	f240 439d 	movw	r3, #1181	@ 0x49d
 80094aa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80094ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	da10      	bge.n	80094d6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80094b4:	78fb      	ldrb	r3, [r7, #3]
 80094b6:	015a      	lsls	r2, r3, #5
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	4413      	add	r3, r2
 80094bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094c0:	68db      	ldr	r3, [r3, #12]
 80094c2:	78fa      	ldrb	r2, [r7, #3]
 80094c4:	0151      	lsls	r1, r2, #5
 80094c6:	693a      	ldr	r2, [r7, #16]
 80094c8:	440a      	add	r2, r1
 80094ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80094ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80094d2:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80094d4:	e055      	b.n	8009582 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	4a6f      	ldr	r2, [pc, #444]	@ (8009698 <USB_HC_Init+0x254>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d151      	bne.n	8009582 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80094de:	78fb      	ldrb	r3, [r7, #3]
 80094e0:	015a      	lsls	r2, r3, #5
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	4413      	add	r3, r2
 80094e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094ea:	68db      	ldr	r3, [r3, #12]
 80094ec:	78fa      	ldrb	r2, [r7, #3]
 80094ee:	0151      	lsls	r1, r2, #5
 80094f0:	693a      	ldr	r2, [r7, #16]
 80094f2:	440a      	add	r2, r1
 80094f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80094f8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80094fc:	60d3      	str	r3, [r2, #12]
      break;
 80094fe:	e040      	b.n	8009582 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009500:	78fb      	ldrb	r3, [r7, #3]
 8009502:	015a      	lsls	r2, r3, #5
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	4413      	add	r3, r2
 8009508:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800950c:	461a      	mov	r2, r3
 800950e:	f240 639d 	movw	r3, #1693	@ 0x69d
 8009512:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009514:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009518:	2b00      	cmp	r3, #0
 800951a:	da34      	bge.n	8009586 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800951c:	78fb      	ldrb	r3, [r7, #3]
 800951e:	015a      	lsls	r2, r3, #5
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	4413      	add	r3, r2
 8009524:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009528:	68db      	ldr	r3, [r3, #12]
 800952a:	78fa      	ldrb	r2, [r7, #3]
 800952c:	0151      	lsls	r1, r2, #5
 800952e:	693a      	ldr	r2, [r7, #16]
 8009530:	440a      	add	r2, r1
 8009532:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009536:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800953a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800953c:	e023      	b.n	8009586 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800953e:	78fb      	ldrb	r3, [r7, #3]
 8009540:	015a      	lsls	r2, r3, #5
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	4413      	add	r3, r2
 8009546:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800954a:	461a      	mov	r2, r3
 800954c:	f240 2325 	movw	r3, #549	@ 0x225
 8009550:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009552:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009556:	2b00      	cmp	r3, #0
 8009558:	da17      	bge.n	800958a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800955a:	78fb      	ldrb	r3, [r7, #3]
 800955c:	015a      	lsls	r2, r3, #5
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	4413      	add	r3, r2
 8009562:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009566:	68db      	ldr	r3, [r3, #12]
 8009568:	78fa      	ldrb	r2, [r7, #3]
 800956a:	0151      	lsls	r1, r2, #5
 800956c:	693a      	ldr	r2, [r7, #16]
 800956e:	440a      	add	r2, r1
 8009570:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009574:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8009578:	60d3      	str	r3, [r2, #12]
      }
      break;
 800957a:	e006      	b.n	800958a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800957c:	2301      	movs	r3, #1
 800957e:	77fb      	strb	r3, [r7, #31]
      break;
 8009580:	e004      	b.n	800958c <USB_HC_Init+0x148>
      break;
 8009582:	bf00      	nop
 8009584:	e002      	b.n	800958c <USB_HC_Init+0x148>
      break;
 8009586:	bf00      	nop
 8009588:	e000      	b.n	800958c <USB_HC_Init+0x148>
      break;
 800958a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800958c:	78fb      	ldrb	r3, [r7, #3]
 800958e:	015a      	lsls	r2, r3, #5
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	4413      	add	r3, r2
 8009594:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009598:	461a      	mov	r2, r3
 800959a:	2300      	movs	r3, #0
 800959c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800959e:	78fb      	ldrb	r3, [r7, #3]
 80095a0:	015a      	lsls	r2, r3, #5
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	4413      	add	r3, r2
 80095a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	78fa      	ldrb	r2, [r7, #3]
 80095ae:	0151      	lsls	r1, r2, #5
 80095b0:	693a      	ldr	r2, [r7, #16]
 80095b2:	440a      	add	r2, r1
 80095b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80095b8:	f043 0302 	orr.w	r3, r3, #2
 80095bc:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80095c4:	699a      	ldr	r2, [r3, #24]
 80095c6:	78fb      	ldrb	r3, [r7, #3]
 80095c8:	f003 030f 	and.w	r3, r3, #15
 80095cc:	2101      	movs	r1, #1
 80095ce:	fa01 f303 	lsl.w	r3, r1, r3
 80095d2:	6939      	ldr	r1, [r7, #16]
 80095d4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80095d8:	4313      	orrs	r3, r2
 80095da:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	699b      	ldr	r3, [r3, #24]
 80095e0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80095e8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	da03      	bge.n	80095f8 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80095f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80095f4:	61bb      	str	r3, [r7, #24]
 80095f6:	e001      	b.n	80095fc <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80095f8:	2300      	movs	r3, #0
 80095fa:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f7ff fef9 	bl	80093f4 <USB_GetHostSpeed>
 8009602:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009604:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009608:	2b02      	cmp	r3, #2
 800960a:	d106      	bne.n	800961a <USB_HC_Init+0x1d6>
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2b02      	cmp	r3, #2
 8009610:	d003      	beq.n	800961a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009612:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009616:	617b      	str	r3, [r7, #20]
 8009618:	e001      	b.n	800961e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800961a:	2300      	movs	r3, #0
 800961c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800961e:	787b      	ldrb	r3, [r7, #1]
 8009620:	059b      	lsls	r3, r3, #22
 8009622:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009626:	78bb      	ldrb	r3, [r7, #2]
 8009628:	02db      	lsls	r3, r3, #11
 800962a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800962e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009630:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009634:	049b      	lsls	r3, r3, #18
 8009636:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800963a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800963c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800963e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009642:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8009644:	69bb      	ldr	r3, [r7, #24]
 8009646:	431a      	orrs	r2, r3
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800964c:	78fa      	ldrb	r2, [r7, #3]
 800964e:	0151      	lsls	r1, r2, #5
 8009650:	693a      	ldr	r2, [r7, #16]
 8009652:	440a      	add	r2, r1
 8009654:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8009658:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800965c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800965e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009662:	2b03      	cmp	r3, #3
 8009664:	d003      	beq.n	800966e <USB_HC_Init+0x22a>
 8009666:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800966a:	2b01      	cmp	r3, #1
 800966c:	d10f      	bne.n	800968e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800966e:	78fb      	ldrb	r3, [r7, #3]
 8009670:	015a      	lsls	r2, r3, #5
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	4413      	add	r3, r2
 8009676:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	78fa      	ldrb	r2, [r7, #3]
 800967e:	0151      	lsls	r1, r2, #5
 8009680:	693a      	ldr	r2, [r7, #16]
 8009682:	440a      	add	r2, r1
 8009684:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009688:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800968c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800968e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009690:	4618      	mov	r0, r3
 8009692:	3720      	adds	r7, #32
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}
 8009698:	40040000 	.word	0x40040000

0800969c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b08c      	sub	sp, #48	@ 0x30
 80096a0:	af02      	add	r7, sp, #8
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	4613      	mov	r3, r2
 80096a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	785b      	ldrb	r3, [r3, #1]
 80096b2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80096b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80096b8:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	4a5d      	ldr	r2, [pc, #372]	@ (8009834 <USB_HC_StartXfer+0x198>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d12f      	bne.n	8009722 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80096c2:	79fb      	ldrb	r3, [r7, #7]
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d11c      	bne.n	8009702 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	7c9b      	ldrb	r3, [r3, #18]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d003      	beq.n	80096d8 <USB_HC_StartXfer+0x3c>
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	7c9b      	ldrb	r3, [r3, #18]
 80096d4:	2b02      	cmp	r3, #2
 80096d6:	d124      	bne.n	8009722 <USB_HC_StartXfer+0x86>
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	799b      	ldrb	r3, [r3, #6]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d120      	bne.n	8009722 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80096e0:	69fb      	ldr	r3, [r7, #28]
 80096e2:	015a      	lsls	r2, r3, #5
 80096e4:	6a3b      	ldr	r3, [r7, #32]
 80096e6:	4413      	add	r3, r2
 80096e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096ec:	68db      	ldr	r3, [r3, #12]
 80096ee:	69fa      	ldr	r2, [r7, #28]
 80096f0:	0151      	lsls	r1, r2, #5
 80096f2:	6a3a      	ldr	r2, [r7, #32]
 80096f4:	440a      	add	r2, r1
 80096f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80096fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096fe:	60d3      	str	r3, [r2, #12]
 8009700:	e00f      	b.n	8009722 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	791b      	ldrb	r3, [r3, #4]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d10b      	bne.n	8009722 <USB_HC_StartXfer+0x86>
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	795b      	ldrb	r3, [r3, #5]
 800970e:	2b01      	cmp	r3, #1
 8009710:	d107      	bne.n	8009722 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	785b      	ldrb	r3, [r3, #1]
 8009716:	4619      	mov	r1, r3
 8009718:	68f8      	ldr	r0, [r7, #12]
 800971a:	f000 fb6b 	bl	8009df4 <USB_DoPing>
        return HAL_OK;
 800971e:	2300      	movs	r3, #0
 8009720:	e232      	b.n	8009b88 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	799b      	ldrb	r3, [r3, #6]
 8009726:	2b01      	cmp	r3, #1
 8009728:	d158      	bne.n	80097dc <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800972a:	2301      	movs	r3, #1
 800972c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	78db      	ldrb	r3, [r3, #3]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d007      	beq.n	8009746 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009736:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009738:	68ba      	ldr	r2, [r7, #8]
 800973a:	8a92      	ldrh	r2, [r2, #20]
 800973c:	fb03 f202 	mul.w	r2, r3, r2
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	61da      	str	r2, [r3, #28]
 8009744:	e07c      	b.n	8009840 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	7c9b      	ldrb	r3, [r3, #18]
 800974a:	2b01      	cmp	r3, #1
 800974c:	d130      	bne.n	80097b0 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	6a1b      	ldr	r3, [r3, #32]
 8009752:	2bbc      	cmp	r3, #188	@ 0xbc
 8009754:	d918      	bls.n	8009788 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	8a9b      	ldrh	r3, [r3, #20]
 800975a:	461a      	mov	r2, r3
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	69da      	ldr	r2, [r3, #28]
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	68db      	ldr	r3, [r3, #12]
 800976c:	2b01      	cmp	r3, #1
 800976e:	d003      	beq.n	8009778 <USB_HC_StartXfer+0xdc>
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	2b02      	cmp	r3, #2
 8009776:	d103      	bne.n	8009780 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	2202      	movs	r2, #2
 800977c:	60da      	str	r2, [r3, #12]
 800977e:	e05f      	b.n	8009840 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	2201      	movs	r2, #1
 8009784:	60da      	str	r2, [r3, #12]
 8009786:	e05b      	b.n	8009840 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	6a1a      	ldr	r2, [r3, #32]
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	68db      	ldr	r3, [r3, #12]
 8009794:	2b01      	cmp	r3, #1
 8009796:	d007      	beq.n	80097a8 <USB_HC_StartXfer+0x10c>
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	68db      	ldr	r3, [r3, #12]
 800979c:	2b02      	cmp	r3, #2
 800979e:	d003      	beq.n	80097a8 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	2204      	movs	r2, #4
 80097a4:	60da      	str	r2, [r3, #12]
 80097a6:	e04b      	b.n	8009840 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	2203      	movs	r2, #3
 80097ac:	60da      	str	r2, [r3, #12]
 80097ae:	e047      	b.n	8009840 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80097b0:	79fb      	ldrb	r3, [r7, #7]
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d10d      	bne.n	80097d2 <USB_HC_StartXfer+0x136>
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	6a1b      	ldr	r3, [r3, #32]
 80097ba:	68ba      	ldr	r2, [r7, #8]
 80097bc:	8a92      	ldrh	r2, [r2, #20]
 80097be:	4293      	cmp	r3, r2
 80097c0:	d907      	bls.n	80097d2 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80097c2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80097c4:	68ba      	ldr	r2, [r7, #8]
 80097c6:	8a92      	ldrh	r2, [r2, #20]
 80097c8:	fb03 f202 	mul.w	r2, r3, r2
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	61da      	str	r2, [r3, #28]
 80097d0:	e036      	b.n	8009840 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	6a1a      	ldr	r2, [r3, #32]
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	61da      	str	r2, [r3, #28]
 80097da:	e031      	b.n	8009840 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	6a1b      	ldr	r3, [r3, #32]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d018      	beq.n	8009816 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	6a1b      	ldr	r3, [r3, #32]
 80097e8:	68ba      	ldr	r2, [r7, #8]
 80097ea:	8a92      	ldrh	r2, [r2, #20]
 80097ec:	4413      	add	r3, r2
 80097ee:	3b01      	subs	r3, #1
 80097f0:	68ba      	ldr	r2, [r7, #8]
 80097f2:	8a92      	ldrh	r2, [r2, #20]
 80097f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80097f8:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80097fa:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80097fc:	8b7b      	ldrh	r3, [r7, #26]
 80097fe:	429a      	cmp	r2, r3
 8009800:	d90b      	bls.n	800981a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8009802:	8b7b      	ldrh	r3, [r7, #26]
 8009804:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009806:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009808:	68ba      	ldr	r2, [r7, #8]
 800980a:	8a92      	ldrh	r2, [r2, #20]
 800980c:	fb03 f202 	mul.w	r2, r3, r2
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	61da      	str	r2, [r3, #28]
 8009814:	e001      	b.n	800981a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8009816:	2301      	movs	r3, #1
 8009818:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	78db      	ldrb	r3, [r3, #3]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d00a      	beq.n	8009838 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009822:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009824:	68ba      	ldr	r2, [r7, #8]
 8009826:	8a92      	ldrh	r2, [r2, #20]
 8009828:	fb03 f202 	mul.w	r2, r3, r2
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	61da      	str	r2, [r3, #28]
 8009830:	e006      	b.n	8009840 <USB_HC_StartXfer+0x1a4>
 8009832:	bf00      	nop
 8009834:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	6a1a      	ldr	r2, [r3, #32]
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	69db      	ldr	r3, [r3, #28]
 8009844:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009848:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800984a:	04d9      	lsls	r1, r3, #19
 800984c:	4ba3      	ldr	r3, [pc, #652]	@ (8009adc <USB_HC_StartXfer+0x440>)
 800984e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009850:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	7d9b      	ldrb	r3, [r3, #22]
 8009856:	075b      	lsls	r3, r3, #29
 8009858:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800985c:	69f9      	ldr	r1, [r7, #28]
 800985e:	0148      	lsls	r0, r1, #5
 8009860:	6a39      	ldr	r1, [r7, #32]
 8009862:	4401      	add	r1, r0
 8009864:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009868:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800986a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800986c:	79fb      	ldrb	r3, [r7, #7]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d009      	beq.n	8009886 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	6999      	ldr	r1, [r3, #24]
 8009876:	69fb      	ldr	r3, [r7, #28]
 8009878:	015a      	lsls	r2, r3, #5
 800987a:	6a3b      	ldr	r3, [r7, #32]
 800987c:	4413      	add	r3, r2
 800987e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009882:	460a      	mov	r2, r1
 8009884:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009886:	6a3b      	ldr	r3, [r7, #32]
 8009888:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800988c:	689b      	ldr	r3, [r3, #8]
 800988e:	f003 0301 	and.w	r3, r3, #1
 8009892:	2b00      	cmp	r3, #0
 8009894:	bf0c      	ite	eq
 8009896:	2301      	moveq	r3, #1
 8009898:	2300      	movne	r3, #0
 800989a:	b2db      	uxtb	r3, r3
 800989c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800989e:	69fb      	ldr	r3, [r7, #28]
 80098a0:	015a      	lsls	r2, r3, #5
 80098a2:	6a3b      	ldr	r3, [r7, #32]
 80098a4:	4413      	add	r3, r2
 80098a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	69fa      	ldr	r2, [r7, #28]
 80098ae:	0151      	lsls	r1, r2, #5
 80098b0:	6a3a      	ldr	r2, [r7, #32]
 80098b2:	440a      	add	r2, r1
 80098b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80098b8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80098bc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80098be:	69fb      	ldr	r3, [r7, #28]
 80098c0:	015a      	lsls	r2, r3, #5
 80098c2:	6a3b      	ldr	r3, [r7, #32]
 80098c4:	4413      	add	r3, r2
 80098c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	7e7b      	ldrb	r3, [r7, #25]
 80098ce:	075b      	lsls	r3, r3, #29
 80098d0:	69f9      	ldr	r1, [r7, #28]
 80098d2:	0148      	lsls	r0, r1, #5
 80098d4:	6a39      	ldr	r1, [r7, #32]
 80098d6:	4401      	add	r1, r0
 80098d8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80098dc:	4313      	orrs	r3, r2
 80098de:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	799b      	ldrb	r3, [r3, #6]
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	f040 80c3 	bne.w	8009a70 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	7c5b      	ldrb	r3, [r3, #17]
 80098ee:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80098f0:	68ba      	ldr	r2, [r7, #8]
 80098f2:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80098f4:	4313      	orrs	r3, r2
 80098f6:	69fa      	ldr	r2, [r7, #28]
 80098f8:	0151      	lsls	r1, r2, #5
 80098fa:	6a3a      	ldr	r2, [r7, #32]
 80098fc:	440a      	add	r2, r1
 80098fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8009902:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009906:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8009908:	69fb      	ldr	r3, [r7, #28]
 800990a:	015a      	lsls	r2, r3, #5
 800990c:	6a3b      	ldr	r3, [r7, #32]
 800990e:	4413      	add	r3, r2
 8009910:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009914:	68db      	ldr	r3, [r3, #12]
 8009916:	69fa      	ldr	r2, [r7, #28]
 8009918:	0151      	lsls	r1, r2, #5
 800991a:	6a3a      	ldr	r2, [r7, #32]
 800991c:	440a      	add	r2, r1
 800991e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009922:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009926:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	79db      	ldrb	r3, [r3, #7]
 800992c:	2b01      	cmp	r3, #1
 800992e:	d123      	bne.n	8009978 <USB_HC_StartXfer+0x2dc>
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	78db      	ldrb	r3, [r3, #3]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d11f      	bne.n	8009978 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8009938:	69fb      	ldr	r3, [r7, #28]
 800993a:	015a      	lsls	r2, r3, #5
 800993c:	6a3b      	ldr	r3, [r7, #32]
 800993e:	4413      	add	r3, r2
 8009940:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	69fa      	ldr	r2, [r7, #28]
 8009948:	0151      	lsls	r1, r2, #5
 800994a:	6a3a      	ldr	r2, [r7, #32]
 800994c:	440a      	add	r2, r1
 800994e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009952:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009956:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8009958:	69fb      	ldr	r3, [r7, #28]
 800995a:	015a      	lsls	r2, r3, #5
 800995c:	6a3b      	ldr	r3, [r7, #32]
 800995e:	4413      	add	r3, r2
 8009960:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009964:	68db      	ldr	r3, [r3, #12]
 8009966:	69fa      	ldr	r2, [r7, #28]
 8009968:	0151      	lsls	r1, r2, #5
 800996a:	6a3a      	ldr	r2, [r7, #32]
 800996c:	440a      	add	r2, r1
 800996e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009972:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009976:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	7c9b      	ldrb	r3, [r3, #18]
 800997c:	2b01      	cmp	r3, #1
 800997e:	d003      	beq.n	8009988 <USB_HC_StartXfer+0x2ec>
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	7c9b      	ldrb	r3, [r3, #18]
 8009984:	2b03      	cmp	r3, #3
 8009986:	d117      	bne.n	80099b8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800998c:	2b01      	cmp	r3, #1
 800998e:	d113      	bne.n	80099b8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	78db      	ldrb	r3, [r3, #3]
 8009994:	2b01      	cmp	r3, #1
 8009996:	d10f      	bne.n	80099b8 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8009998:	69fb      	ldr	r3, [r7, #28]
 800999a:	015a      	lsls	r2, r3, #5
 800999c:	6a3b      	ldr	r3, [r7, #32]
 800999e:	4413      	add	r3, r2
 80099a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	69fa      	ldr	r2, [r7, #28]
 80099a8:	0151      	lsls	r1, r2, #5
 80099aa:	6a3a      	ldr	r2, [r7, #32]
 80099ac:	440a      	add	r2, r1
 80099ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80099b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80099b6:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	7c9b      	ldrb	r3, [r3, #18]
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d162      	bne.n	8009a86 <USB_HC_StartXfer+0x3ea>
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	78db      	ldrb	r3, [r3, #3]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d15e      	bne.n	8009a86 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	68db      	ldr	r3, [r3, #12]
 80099cc:	3b01      	subs	r3, #1
 80099ce:	2b03      	cmp	r3, #3
 80099d0:	d858      	bhi.n	8009a84 <USB_HC_StartXfer+0x3e8>
 80099d2:	a201      	add	r2, pc, #4	@ (adr r2, 80099d8 <USB_HC_StartXfer+0x33c>)
 80099d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099d8:	080099e9 	.word	0x080099e9
 80099dc:	08009a0b 	.word	0x08009a0b
 80099e0:	08009a2d 	.word	0x08009a2d
 80099e4:	08009a4f 	.word	0x08009a4f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80099e8:	69fb      	ldr	r3, [r7, #28]
 80099ea:	015a      	lsls	r2, r3, #5
 80099ec:	6a3b      	ldr	r3, [r7, #32]
 80099ee:	4413      	add	r3, r2
 80099f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	69fa      	ldr	r2, [r7, #28]
 80099f8:	0151      	lsls	r1, r2, #5
 80099fa:	6a3a      	ldr	r2, [r7, #32]
 80099fc:	440a      	add	r2, r1
 80099fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009a02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009a06:	6053      	str	r3, [r2, #4]
          break;
 8009a08:	e03d      	b.n	8009a86 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8009a0a:	69fb      	ldr	r3, [r7, #28]
 8009a0c:	015a      	lsls	r2, r3, #5
 8009a0e:	6a3b      	ldr	r3, [r7, #32]
 8009a10:	4413      	add	r3, r2
 8009a12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	69fa      	ldr	r2, [r7, #28]
 8009a1a:	0151      	lsls	r1, r2, #5
 8009a1c:	6a3a      	ldr	r2, [r7, #32]
 8009a1e:	440a      	add	r2, r1
 8009a20:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009a24:	f043 030e 	orr.w	r3, r3, #14
 8009a28:	6053      	str	r3, [r2, #4]
          break;
 8009a2a:	e02c      	b.n	8009a86 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8009a2c:	69fb      	ldr	r3, [r7, #28]
 8009a2e:	015a      	lsls	r2, r3, #5
 8009a30:	6a3b      	ldr	r3, [r7, #32]
 8009a32:	4413      	add	r3, r2
 8009a34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	69fa      	ldr	r2, [r7, #28]
 8009a3c:	0151      	lsls	r1, r2, #5
 8009a3e:	6a3a      	ldr	r2, [r7, #32]
 8009a40:	440a      	add	r2, r1
 8009a42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009a46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009a4a:	6053      	str	r3, [r2, #4]
          break;
 8009a4c:	e01b      	b.n	8009a86 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8009a4e:	69fb      	ldr	r3, [r7, #28]
 8009a50:	015a      	lsls	r2, r3, #5
 8009a52:	6a3b      	ldr	r3, [r7, #32]
 8009a54:	4413      	add	r3, r2
 8009a56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	69fa      	ldr	r2, [r7, #28]
 8009a5e:	0151      	lsls	r1, r2, #5
 8009a60:	6a3a      	ldr	r2, [r7, #32]
 8009a62:	440a      	add	r2, r1
 8009a64:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009a68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009a6c:	6053      	str	r3, [r2, #4]
          break;
 8009a6e:	e00a      	b.n	8009a86 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8009a70:	69fb      	ldr	r3, [r7, #28]
 8009a72:	015a      	lsls	r2, r3, #5
 8009a74:	6a3b      	ldr	r3, [r7, #32]
 8009a76:	4413      	add	r3, r2
 8009a78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	2300      	movs	r3, #0
 8009a80:	6053      	str	r3, [r2, #4]
 8009a82:	e000      	b.n	8009a86 <USB_HC_StartXfer+0x3ea>
          break;
 8009a84:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009a86:	69fb      	ldr	r3, [r7, #28]
 8009a88:	015a      	lsls	r2, r3, #5
 8009a8a:	6a3b      	ldr	r3, [r7, #32]
 8009a8c:	4413      	add	r3, r2
 8009a8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009a9c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	78db      	ldrb	r3, [r3, #3]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d004      	beq.n	8009ab0 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009aac:	613b      	str	r3, [r7, #16]
 8009aae:	e003      	b.n	8009ab8 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009ab6:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009abe:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009ac0:	69fb      	ldr	r3, [r7, #28]
 8009ac2:	015a      	lsls	r2, r3, #5
 8009ac4:	6a3b      	ldr	r3, [r7, #32]
 8009ac6:	4413      	add	r3, r2
 8009ac8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009acc:	461a      	mov	r2, r3
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009ad2:	79fb      	ldrb	r3, [r7, #7]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d003      	beq.n	8009ae0 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	e055      	b.n	8009b88 <USB_HC_StartXfer+0x4ec>
 8009adc:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	78db      	ldrb	r3, [r3, #3]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d14e      	bne.n	8009b86 <USB_HC_StartXfer+0x4ea>
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	6a1b      	ldr	r3, [r3, #32]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d04a      	beq.n	8009b86 <USB_HC_StartXfer+0x4ea>
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	79db      	ldrb	r3, [r3, #7]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d146      	bne.n	8009b86 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	7c9b      	ldrb	r3, [r3, #18]
 8009afc:	2b03      	cmp	r3, #3
 8009afe:	d831      	bhi.n	8009b64 <USB_HC_StartXfer+0x4c8>
 8009b00:	a201      	add	r2, pc, #4	@ (adr r2, 8009b08 <USB_HC_StartXfer+0x46c>)
 8009b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b06:	bf00      	nop
 8009b08:	08009b19 	.word	0x08009b19
 8009b0c:	08009b3d 	.word	0x08009b3d
 8009b10:	08009b19 	.word	0x08009b19
 8009b14:	08009b3d 	.word	0x08009b3d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	6a1b      	ldr	r3, [r3, #32]
 8009b1c:	3303      	adds	r3, #3
 8009b1e:	089b      	lsrs	r3, r3, #2
 8009b20:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009b22:	8afa      	ldrh	r2, [r7, #22]
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d91c      	bls.n	8009b68 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	699b      	ldr	r3, [r3, #24]
 8009b32:	f043 0220 	orr.w	r2, r3, #32
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	619a      	str	r2, [r3, #24]
        }
        break;
 8009b3a:	e015      	b.n	8009b68 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	6a1b      	ldr	r3, [r3, #32]
 8009b40:	3303      	adds	r3, #3
 8009b42:	089b      	lsrs	r3, r3, #2
 8009b44:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009b46:	8afa      	ldrh	r2, [r7, #22]
 8009b48:	6a3b      	ldr	r3, [r7, #32]
 8009b4a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009b4e:	691b      	ldr	r3, [r3, #16]
 8009b50:	b29b      	uxth	r3, r3
 8009b52:	429a      	cmp	r2, r3
 8009b54:	d90a      	bls.n	8009b6c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	699b      	ldr	r3, [r3, #24]
 8009b5a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	619a      	str	r2, [r3, #24]
        }
        break;
 8009b62:	e003      	b.n	8009b6c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8009b64:	bf00      	nop
 8009b66:	e002      	b.n	8009b6e <USB_HC_StartXfer+0x4d2>
        break;
 8009b68:	bf00      	nop
 8009b6a:	e000      	b.n	8009b6e <USB_HC_StartXfer+0x4d2>
        break;
 8009b6c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	6999      	ldr	r1, [r3, #24]
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	785a      	ldrb	r2, [r3, #1]
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	6a1b      	ldr	r3, [r3, #32]
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	2000      	movs	r0, #0
 8009b7e:	9000      	str	r0, [sp, #0]
 8009b80:	68f8      	ldr	r0, [r7, #12]
 8009b82:	f7ff f9c9 	bl	8008f18 <USB_WritePacket>
  }

  return HAL_OK;
 8009b86:	2300      	movs	r3, #0
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3728      	adds	r7, #40	@ 0x28
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}

08009b90 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b085      	sub	sp, #20
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009ba2:	695b      	ldr	r3, [r3, #20]
 8009ba4:	b29b      	uxth	r3, r3
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3714      	adds	r7, #20
 8009baa:	46bd      	mov	sp, r7
 8009bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb0:	4770      	bx	lr

08009bb2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009bb2:	b480      	push	{r7}
 8009bb4:	b089      	sub	sp, #36	@ 0x24
 8009bb6:	af00      	add	r7, sp, #0
 8009bb8:	6078      	str	r0, [r7, #4]
 8009bba:	460b      	mov	r3, r1
 8009bbc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8009bc2:	78fb      	ldrb	r3, [r7, #3]
 8009bc4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009bca:	69bb      	ldr	r3, [r7, #24]
 8009bcc:	015a      	lsls	r2, r3, #5
 8009bce:	69fb      	ldr	r3, [r7, #28]
 8009bd0:	4413      	add	r3, r2
 8009bd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	0c9b      	lsrs	r3, r3, #18
 8009bda:	f003 0303 	and.w	r3, r3, #3
 8009bde:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009be0:	69bb      	ldr	r3, [r7, #24]
 8009be2:	015a      	lsls	r2, r3, #5
 8009be4:	69fb      	ldr	r3, [r7, #28]
 8009be6:	4413      	add	r3, r2
 8009be8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	0fdb      	lsrs	r3, r3, #31
 8009bf0:	f003 0301 	and.w	r3, r3, #1
 8009bf4:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8009bf6:	69bb      	ldr	r3, [r7, #24]
 8009bf8:	015a      	lsls	r2, r3, #5
 8009bfa:	69fb      	ldr	r3, [r7, #28]
 8009bfc:	4413      	add	r3, r2
 8009bfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009c02:	685b      	ldr	r3, [r3, #4]
 8009c04:	0fdb      	lsrs	r3, r3, #31
 8009c06:	f003 0301 	and.w	r3, r3, #1
 8009c0a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	689b      	ldr	r3, [r3, #8]
 8009c10:	f003 0320 	and.w	r3, r3, #32
 8009c14:	2b20      	cmp	r3, #32
 8009c16:	d10d      	bne.n	8009c34 <USB_HC_Halt+0x82>
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d10a      	bne.n	8009c34 <USB_HC_Halt+0x82>
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d005      	beq.n	8009c30 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	d002      	beq.n	8009c30 <USB_HC_Halt+0x7e>
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	2b03      	cmp	r3, #3
 8009c2e:	d101      	bne.n	8009c34 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8009c30:	2300      	movs	r3, #0
 8009c32:	e0d8      	b.n	8009de6 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d002      	beq.n	8009c40 <USB_HC_Halt+0x8e>
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	2b02      	cmp	r3, #2
 8009c3e:	d173      	bne.n	8009d28 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009c40:	69bb      	ldr	r3, [r7, #24]
 8009c42:	015a      	lsls	r2, r3, #5
 8009c44:	69fb      	ldr	r3, [r7, #28]
 8009c46:	4413      	add	r3, r2
 8009c48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	69ba      	ldr	r2, [r7, #24]
 8009c50:	0151      	lsls	r1, r2, #5
 8009c52:	69fa      	ldr	r2, [r7, #28]
 8009c54:	440a      	add	r2, r1
 8009c56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009c5a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009c5e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	689b      	ldr	r3, [r3, #8]
 8009c64:	f003 0320 	and.w	r3, r3, #32
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d14a      	bne.n	8009d02 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c70:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d133      	bne.n	8009ce0 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009c78:	69bb      	ldr	r3, [r7, #24]
 8009c7a:	015a      	lsls	r2, r3, #5
 8009c7c:	69fb      	ldr	r3, [r7, #28]
 8009c7e:	4413      	add	r3, r2
 8009c80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	69ba      	ldr	r2, [r7, #24]
 8009c88:	0151      	lsls	r1, r2, #5
 8009c8a:	69fa      	ldr	r2, [r7, #28]
 8009c8c:	440a      	add	r2, r1
 8009c8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009c92:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009c96:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009c98:	69bb      	ldr	r3, [r7, #24]
 8009c9a:	015a      	lsls	r2, r3, #5
 8009c9c:	69fb      	ldr	r3, [r7, #28]
 8009c9e:	4413      	add	r3, r2
 8009ca0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	69ba      	ldr	r2, [r7, #24]
 8009ca8:	0151      	lsls	r1, r2, #5
 8009caa:	69fa      	ldr	r2, [r7, #28]
 8009cac:	440a      	add	r2, r1
 8009cae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009cb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009cb6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	3301      	adds	r3, #1
 8009cbc:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009cc4:	d82e      	bhi.n	8009d24 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009cc6:	69bb      	ldr	r3, [r7, #24]
 8009cc8:	015a      	lsls	r2, r3, #5
 8009cca:	69fb      	ldr	r3, [r7, #28]
 8009ccc:	4413      	add	r3, r2
 8009cce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009cd8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009cdc:	d0ec      	beq.n	8009cb8 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009cde:	e081      	b.n	8009de4 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009ce0:	69bb      	ldr	r3, [r7, #24]
 8009ce2:	015a      	lsls	r2, r3, #5
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	4413      	add	r3, r2
 8009ce8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	69ba      	ldr	r2, [r7, #24]
 8009cf0:	0151      	lsls	r1, r2, #5
 8009cf2:	69fa      	ldr	r2, [r7, #28]
 8009cf4:	440a      	add	r2, r1
 8009cf6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009cfa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009cfe:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009d00:	e070      	b.n	8009de4 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	015a      	lsls	r2, r3, #5
 8009d06:	69fb      	ldr	r3, [r7, #28]
 8009d08:	4413      	add	r3, r2
 8009d0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	69ba      	ldr	r2, [r7, #24]
 8009d12:	0151      	lsls	r1, r2, #5
 8009d14:	69fa      	ldr	r2, [r7, #28]
 8009d16:	440a      	add	r2, r1
 8009d18:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009d1c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009d20:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009d22:	e05f      	b.n	8009de4 <USB_HC_Halt+0x232>
            break;
 8009d24:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009d26:	e05d      	b.n	8009de4 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009d28:	69bb      	ldr	r3, [r7, #24]
 8009d2a:	015a      	lsls	r2, r3, #5
 8009d2c:	69fb      	ldr	r3, [r7, #28]
 8009d2e:	4413      	add	r3, r2
 8009d30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	69ba      	ldr	r2, [r7, #24]
 8009d38:	0151      	lsls	r1, r2, #5
 8009d3a:	69fa      	ldr	r2, [r7, #28]
 8009d3c:	440a      	add	r2, r1
 8009d3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009d42:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009d46:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009d48:	69fb      	ldr	r3, [r7, #28]
 8009d4a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009d4e:	691b      	ldr	r3, [r3, #16]
 8009d50:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d133      	bne.n	8009dc0 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009d58:	69bb      	ldr	r3, [r7, #24]
 8009d5a:	015a      	lsls	r2, r3, #5
 8009d5c:	69fb      	ldr	r3, [r7, #28]
 8009d5e:	4413      	add	r3, r2
 8009d60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	69ba      	ldr	r2, [r7, #24]
 8009d68:	0151      	lsls	r1, r2, #5
 8009d6a:	69fa      	ldr	r2, [r7, #28]
 8009d6c:	440a      	add	r2, r1
 8009d6e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009d72:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009d76:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009d78:	69bb      	ldr	r3, [r7, #24]
 8009d7a:	015a      	lsls	r2, r3, #5
 8009d7c:	69fb      	ldr	r3, [r7, #28]
 8009d7e:	4413      	add	r3, r2
 8009d80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	69ba      	ldr	r2, [r7, #24]
 8009d88:	0151      	lsls	r1, r2, #5
 8009d8a:	69fa      	ldr	r2, [r7, #28]
 8009d8c:	440a      	add	r2, r1
 8009d8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009d92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009d96:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009da4:	d81d      	bhi.n	8009de2 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009da6:	69bb      	ldr	r3, [r7, #24]
 8009da8:	015a      	lsls	r2, r3, #5
 8009daa:	69fb      	ldr	r3, [r7, #28]
 8009dac:	4413      	add	r3, r2
 8009dae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009db8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009dbc:	d0ec      	beq.n	8009d98 <USB_HC_Halt+0x1e6>
 8009dbe:	e011      	b.n	8009de4 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009dc0:	69bb      	ldr	r3, [r7, #24]
 8009dc2:	015a      	lsls	r2, r3, #5
 8009dc4:	69fb      	ldr	r3, [r7, #28]
 8009dc6:	4413      	add	r3, r2
 8009dc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	69ba      	ldr	r2, [r7, #24]
 8009dd0:	0151      	lsls	r1, r2, #5
 8009dd2:	69fa      	ldr	r2, [r7, #28]
 8009dd4:	440a      	add	r2, r1
 8009dd6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009dda:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009dde:	6013      	str	r3, [r2, #0]
 8009de0:	e000      	b.n	8009de4 <USB_HC_Halt+0x232>
          break;
 8009de2:	bf00      	nop
    }
  }

  return HAL_OK;
 8009de4:	2300      	movs	r3, #0
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3724      	adds	r7, #36	@ 0x24
 8009dea:	46bd      	mov	sp, r7
 8009dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df0:	4770      	bx	lr
	...

08009df4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b087      	sub	sp, #28
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009e04:	78fb      	ldrb	r3, [r7, #3]
 8009e06:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	04da      	lsls	r2, r3, #19
 8009e10:	4b15      	ldr	r3, [pc, #84]	@ (8009e68 <USB_DoPing+0x74>)
 8009e12:	4013      	ands	r3, r2
 8009e14:	693a      	ldr	r2, [r7, #16]
 8009e16:	0151      	lsls	r1, r2, #5
 8009e18:	697a      	ldr	r2, [r7, #20]
 8009e1a:	440a      	add	r2, r1
 8009e1c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009e20:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009e24:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	015a      	lsls	r2, r3, #5
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	4413      	add	r3, r2
 8009e2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009e3c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009e44:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	015a      	lsls	r2, r3, #5
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	4413      	add	r3, r2
 8009e4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009e52:	461a      	mov	r2, r3
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009e58:	2300      	movs	r3, #0
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	371c      	adds	r7, #28
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e64:	4770      	bx	lr
 8009e66:	bf00      	nop
 8009e68:	1ff80000 	.word	0x1ff80000

08009e6c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b088      	sub	sp, #32
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009e74:	2300      	movs	r3, #0
 8009e76:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f7fe ff8c 	bl	8008d9e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009e86:	2110      	movs	r1, #16
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f7fe ffe5 	bl	8008e58 <USB_FlushTxFifo>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d001      	beq.n	8009e98 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8009e94:	2301      	movs	r3, #1
 8009e96:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f7ff f80f 	bl	8008ebc <USB_FlushRxFifo>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d001      	beq.n	8009ea8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	61bb      	str	r3, [r7, #24]
 8009eac:	e01f      	b.n	8009eee <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8009eae:	69bb      	ldr	r3, [r7, #24]
 8009eb0:	015a      	lsls	r2, r3, #5
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	4413      	add	r3, r2
 8009eb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009ec4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009ecc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009ed4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009ed6:	69bb      	ldr	r3, [r7, #24]
 8009ed8:	015a      	lsls	r2, r3, #5
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	4413      	add	r3, r2
 8009ede:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009ee2:	461a      	mov	r2, r3
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009ee8:	69bb      	ldr	r3, [r7, #24]
 8009eea:	3301      	adds	r3, #1
 8009eec:	61bb      	str	r3, [r7, #24]
 8009eee:	69bb      	ldr	r3, [r7, #24]
 8009ef0:	2b0f      	cmp	r3, #15
 8009ef2:	d9dc      	bls.n	8009eae <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	61bb      	str	r3, [r7, #24]
 8009ef8:	e034      	b.n	8009f64 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8009efa:	69bb      	ldr	r3, [r7, #24]
 8009efc:	015a      	lsls	r2, r3, #5
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	4413      	add	r3, r2
 8009f02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009f10:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009f18:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009f20:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009f22:	69bb      	ldr	r3, [r7, #24]
 8009f24:	015a      	lsls	r2, r3, #5
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	4413      	add	r3, r2
 8009f2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009f2e:	461a      	mov	r2, r3
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	3301      	adds	r3, #1
 8009f38:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009f40:	d80c      	bhi.n	8009f5c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009f42:	69bb      	ldr	r3, [r7, #24]
 8009f44:	015a      	lsls	r2, r3, #5
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	4413      	add	r3, r2
 8009f4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009f54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009f58:	d0ec      	beq.n	8009f34 <USB_StopHost+0xc8>
 8009f5a:	e000      	b.n	8009f5e <USB_StopHost+0xf2>
        break;
 8009f5c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009f5e:	69bb      	ldr	r3, [r7, #24]
 8009f60:	3301      	adds	r3, #1
 8009f62:	61bb      	str	r3, [r7, #24]
 8009f64:	69bb      	ldr	r3, [r7, #24]
 8009f66:	2b0f      	cmp	r3, #15
 8009f68:	d9c7      	bls.n	8009efa <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009f70:	461a      	mov	r2, r3
 8009f72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009f76:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009f7e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f7fe fefb 	bl	8008d7c <USB_EnableGlobalInt>

  return ret;
 8009f86:	7ffb      	ldrb	r3, [r7, #31]
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3720      	adds	r7, #32
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}

08009f90 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009f90:	b590      	push	{r4, r7, lr}
 8009f92:	b089      	sub	sp, #36	@ 0x24
 8009f94:	af04      	add	r7, sp, #16
 8009f96:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009f98:	2301      	movs	r3, #1
 8009f9a:	2202      	movs	r2, #2
 8009f9c:	2102      	movs	r1, #2
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 fc85 	bl	800a8ae <USBH_FindInterface>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009fa8:	7bfb      	ldrb	r3, [r7, #15]
 8009faa:	2bff      	cmp	r3, #255	@ 0xff
 8009fac:	d002      	beq.n	8009fb4 <USBH_CDC_InterfaceInit+0x24>
 8009fae:	7bfb      	ldrb	r3, [r7, #15]
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	d901      	bls.n	8009fb8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009fb4:	2302      	movs	r3, #2
 8009fb6:	e13d      	b.n	800a234 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009fb8:	7bfb      	ldrb	r3, [r7, #15]
 8009fba:	4619      	mov	r1, r3
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f000 fc5a 	bl	800a876 <USBH_SelectInterface>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009fc6:	7bbb      	ldrb	r3, [r7, #14]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d001      	beq.n	8009fd0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009fcc:	2302      	movs	r3, #2
 8009fce:	e131      	b.n	800a234 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8009fd6:	2050      	movs	r0, #80	@ 0x50
 8009fd8:	f003 f92a 	bl	800d230 <malloc>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009fe6:	69db      	ldr	r3, [r3, #28]
 8009fe8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d101      	bne.n	8009ff4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009ff0:	2302      	movs	r3, #2
 8009ff2:	e11f      	b.n	800a234 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009ff4:	2250      	movs	r2, #80	@ 0x50
 8009ff6:	2100      	movs	r1, #0
 8009ff8:	68b8      	ldr	r0, [r7, #8]
 8009ffa:	f003 f9d7 	bl	800d3ac <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009ffe:	7bfb      	ldrb	r3, [r7, #15]
 800a000:	687a      	ldr	r2, [r7, #4]
 800a002:	211a      	movs	r1, #26
 800a004:	fb01 f303 	mul.w	r3, r1, r3
 800a008:	4413      	add	r3, r2
 800a00a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a00e:	781b      	ldrb	r3, [r3, #0]
 800a010:	b25b      	sxtb	r3, r3
 800a012:	2b00      	cmp	r3, #0
 800a014:	da15      	bge.n	800a042 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a016:	7bfb      	ldrb	r3, [r7, #15]
 800a018:	687a      	ldr	r2, [r7, #4]
 800a01a:	211a      	movs	r1, #26
 800a01c:	fb01 f303 	mul.w	r3, r1, r3
 800a020:	4413      	add	r3, r2
 800a022:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a026:	781a      	ldrb	r2, [r3, #0]
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a02c:	7bfb      	ldrb	r3, [r7, #15]
 800a02e:	687a      	ldr	r2, [r7, #4]
 800a030:	211a      	movs	r1, #26
 800a032:	fb01 f303 	mul.w	r3, r1, r3
 800a036:	4413      	add	r3, r2
 800a038:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800a03c:	881a      	ldrh	r2, [r3, #0]
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	785b      	ldrb	r3, [r3, #1]
 800a046:	4619      	mov	r1, r3
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f001 ffbe 	bl	800bfca <USBH_AllocPipe>
 800a04e:	4603      	mov	r3, r0
 800a050:	461a      	mov	r2, r3
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	7819      	ldrb	r1, [r3, #0]
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	7858      	ldrb	r0, [r3, #1]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a06a:	68ba      	ldr	r2, [r7, #8]
 800a06c:	8952      	ldrh	r2, [r2, #10]
 800a06e:	9202      	str	r2, [sp, #8]
 800a070:	2203      	movs	r2, #3
 800a072:	9201      	str	r2, [sp, #4]
 800a074:	9300      	str	r3, [sp, #0]
 800a076:	4623      	mov	r3, r4
 800a078:	4602      	mov	r2, r0
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f001 ff76 	bl	800bf6c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	781b      	ldrb	r3, [r3, #0]
 800a084:	2200      	movs	r2, #0
 800a086:	4619      	mov	r1, r3
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f002 fa85 	bl	800c598 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800a08e:	2300      	movs	r3, #0
 800a090:	2200      	movs	r2, #0
 800a092:	210a      	movs	r1, #10
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f000 fc0a 	bl	800a8ae <USBH_FindInterface>
 800a09a:	4603      	mov	r3, r0
 800a09c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a09e:	7bfb      	ldrb	r3, [r7, #15]
 800a0a0:	2bff      	cmp	r3, #255	@ 0xff
 800a0a2:	d002      	beq.n	800a0aa <USBH_CDC_InterfaceInit+0x11a>
 800a0a4:	7bfb      	ldrb	r3, [r7, #15]
 800a0a6:	2b01      	cmp	r3, #1
 800a0a8:	d901      	bls.n	800a0ae <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a0aa:	2302      	movs	r3, #2
 800a0ac:	e0c2      	b.n	800a234 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a0ae:	7bfb      	ldrb	r3, [r7, #15]
 800a0b0:	687a      	ldr	r2, [r7, #4]
 800a0b2:	211a      	movs	r1, #26
 800a0b4:	fb01 f303 	mul.w	r3, r1, r3
 800a0b8:	4413      	add	r3, r2
 800a0ba:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	b25b      	sxtb	r3, r3
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	da16      	bge.n	800a0f4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a0c6:	7bfb      	ldrb	r3, [r7, #15]
 800a0c8:	687a      	ldr	r2, [r7, #4]
 800a0ca:	211a      	movs	r1, #26
 800a0cc:	fb01 f303 	mul.w	r3, r1, r3
 800a0d0:	4413      	add	r3, r2
 800a0d2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a0d6:	781a      	ldrb	r2, [r3, #0]
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a0dc:	7bfb      	ldrb	r3, [r7, #15]
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	211a      	movs	r1, #26
 800a0e2:	fb01 f303 	mul.w	r3, r1, r3
 800a0e6:	4413      	add	r3, r2
 800a0e8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800a0ec:	881a      	ldrh	r2, [r3, #0]
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	835a      	strh	r2, [r3, #26]
 800a0f2:	e015      	b.n	800a120 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a0f4:	7bfb      	ldrb	r3, [r7, #15]
 800a0f6:	687a      	ldr	r2, [r7, #4]
 800a0f8:	211a      	movs	r1, #26
 800a0fa:	fb01 f303 	mul.w	r3, r1, r3
 800a0fe:	4413      	add	r3, r2
 800a100:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a104:	781a      	ldrb	r2, [r3, #0]
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a10a:	7bfb      	ldrb	r3, [r7, #15]
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	211a      	movs	r1, #26
 800a110:	fb01 f303 	mul.w	r3, r1, r3
 800a114:	4413      	add	r3, r2
 800a116:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800a11a:	881a      	ldrh	r2, [r3, #0]
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800a120:	7bfb      	ldrb	r3, [r7, #15]
 800a122:	687a      	ldr	r2, [r7, #4]
 800a124:	211a      	movs	r1, #26
 800a126:	fb01 f303 	mul.w	r3, r1, r3
 800a12a:	4413      	add	r3, r2
 800a12c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	b25b      	sxtb	r3, r3
 800a134:	2b00      	cmp	r3, #0
 800a136:	da16      	bge.n	800a166 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a138:	7bfb      	ldrb	r3, [r7, #15]
 800a13a:	687a      	ldr	r2, [r7, #4]
 800a13c:	211a      	movs	r1, #26
 800a13e:	fb01 f303 	mul.w	r3, r1, r3
 800a142:	4413      	add	r3, r2
 800a144:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800a148:	781a      	ldrb	r2, [r3, #0]
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a14e:	7bfb      	ldrb	r3, [r7, #15]
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	211a      	movs	r1, #26
 800a154:	fb01 f303 	mul.w	r3, r1, r3
 800a158:	4413      	add	r3, r2
 800a15a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800a15e:	881a      	ldrh	r2, [r3, #0]
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	835a      	strh	r2, [r3, #26]
 800a164:	e015      	b.n	800a192 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a166:	7bfb      	ldrb	r3, [r7, #15]
 800a168:	687a      	ldr	r2, [r7, #4]
 800a16a:	211a      	movs	r1, #26
 800a16c:	fb01 f303 	mul.w	r3, r1, r3
 800a170:	4413      	add	r3, r2
 800a172:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800a176:	781a      	ldrb	r2, [r3, #0]
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a17c:	7bfb      	ldrb	r3, [r7, #15]
 800a17e:	687a      	ldr	r2, [r7, #4]
 800a180:	211a      	movs	r1, #26
 800a182:	fb01 f303 	mul.w	r3, r1, r3
 800a186:	4413      	add	r3, r2
 800a188:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800a18c:	881a      	ldrh	r2, [r3, #0]
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	7b9b      	ldrb	r3, [r3, #14]
 800a196:	4619      	mov	r1, r3
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f001 ff16 	bl	800bfca <USBH_AllocPipe>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	461a      	mov	r2, r3
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	7bdb      	ldrb	r3, [r3, #15]
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f001 ff0c 	bl	800bfca <USBH_AllocPipe>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	461a      	mov	r2, r3
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	7b59      	ldrb	r1, [r3, #13]
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	7b98      	ldrb	r0, [r3, #14]
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a1ce:	68ba      	ldr	r2, [r7, #8]
 800a1d0:	8b12      	ldrh	r2, [r2, #24]
 800a1d2:	9202      	str	r2, [sp, #8]
 800a1d4:	2202      	movs	r2, #2
 800a1d6:	9201      	str	r2, [sp, #4]
 800a1d8:	9300      	str	r3, [sp, #0]
 800a1da:	4623      	mov	r3, r4
 800a1dc:	4602      	mov	r2, r0
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f001 fec4 	bl	800bf6c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	7b19      	ldrb	r1, [r3, #12]
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	7bd8      	ldrb	r0, [r3, #15]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a1f8:	68ba      	ldr	r2, [r7, #8]
 800a1fa:	8b52      	ldrh	r2, [r2, #26]
 800a1fc:	9202      	str	r2, [sp, #8]
 800a1fe:	2202      	movs	r2, #2
 800a200:	9201      	str	r2, [sp, #4]
 800a202:	9300      	str	r3, [sp, #0]
 800a204:	4623      	mov	r3, r4
 800a206:	4602      	mov	r2, r0
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f001 feaf 	bl	800bf6c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	2200      	movs	r2, #0
 800a212:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	7b5b      	ldrb	r3, [r3, #13]
 800a21a:	2200      	movs	r2, #0
 800a21c:	4619      	mov	r1, r3
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f002 f9ba 	bl	800c598 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	7b1b      	ldrb	r3, [r3, #12]
 800a228:	2200      	movs	r2, #0
 800a22a:	4619      	mov	r1, r3
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f002 f9b3 	bl	800c598 <USBH_LL_SetToggle>

  return USBH_OK;
 800a232:	2300      	movs	r3, #0
}
 800a234:	4618      	mov	r0, r3
 800a236:	3714      	adds	r7, #20
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd90      	pop	{r4, r7, pc}

0800a23c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b084      	sub	sp, #16
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a24a:	69db      	ldr	r3, [r3, #28]
 800a24c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d00e      	beq.n	800a274 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	4619      	mov	r1, r3
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f001 fea4 	bl	800bfaa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	781b      	ldrb	r3, [r3, #0]
 800a266:	4619      	mov	r1, r3
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f001 fecf 	bl	800c00c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2200      	movs	r2, #0
 800a272:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	7b1b      	ldrb	r3, [r3, #12]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d00e      	beq.n	800a29a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	7b1b      	ldrb	r3, [r3, #12]
 800a280:	4619      	mov	r1, r3
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f001 fe91 	bl	800bfaa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	7b1b      	ldrb	r3, [r3, #12]
 800a28c:	4619      	mov	r1, r3
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f001 febc 	bl	800c00c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2200      	movs	r2, #0
 800a298:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	7b5b      	ldrb	r3, [r3, #13]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d00e      	beq.n	800a2c0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	7b5b      	ldrb	r3, [r3, #13]
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f001 fe7e 	bl	800bfaa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	7b5b      	ldrb	r3, [r3, #13]
 800a2b2:	4619      	mov	r1, r3
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f001 fea9 	bl	800c00c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a2c6:	69db      	ldr	r3, [r3, #28]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d00b      	beq.n	800a2e4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a2d2:	69db      	ldr	r3, [r3, #28]
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f002 ffb3 	bl	800d240 <free>
    phost->pActiveClass->pData = 0U;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a2e4:	2300      	movs	r3, #0
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3710      	adds	r7, #16
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}

0800a2ee <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a2ee:	b580      	push	{r7, lr}
 800a2f0:	b084      	sub	sp, #16
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a2fc:	69db      	ldr	r3, [r3, #28]
 800a2fe:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	3340      	adds	r3, #64	@ 0x40
 800a304:	4619      	mov	r1, r3
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f000 f8b1 	bl	800a46e <GetLineCoding>
 800a30c:	4603      	mov	r3, r0
 800a30e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800a310:	7afb      	ldrb	r3, [r7, #11]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d105      	bne.n	800a322 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a31c:	2102      	movs	r1, #2
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800a322:	7afb      	ldrb	r3, [r7, #11]
}
 800a324:	4618      	mov	r0, r3
 800a326:	3710      	adds	r7, #16
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}

0800a32c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b084      	sub	sp, #16
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a334:	2301      	movs	r3, #1
 800a336:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800a338:	2300      	movs	r3, #0
 800a33a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a342:	69db      	ldr	r3, [r3, #28]
 800a344:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800a34c:	2b04      	cmp	r3, #4
 800a34e:	d877      	bhi.n	800a440 <USBH_CDC_Process+0x114>
 800a350:	a201      	add	r2, pc, #4	@ (adr r2, 800a358 <USBH_CDC_Process+0x2c>)
 800a352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a356:	bf00      	nop
 800a358:	0800a36d 	.word	0x0800a36d
 800a35c:	0800a373 	.word	0x0800a373
 800a360:	0800a3a3 	.word	0x0800a3a3
 800a364:	0800a417 	.word	0x0800a417
 800a368:	0800a425 	.word	0x0800a425
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800a36c:	2300      	movs	r3, #0
 800a36e:	73fb      	strb	r3, [r7, #15]
      break;
 800a370:	e06d      	b.n	800a44e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a376:	4619      	mov	r1, r3
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f000 f897 	bl	800a4ac <SetLineCoding>
 800a37e:	4603      	mov	r3, r0
 800a380:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a382:	7bbb      	ldrb	r3, [r7, #14]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d104      	bne.n	800a392 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	2202      	movs	r2, #2
 800a38c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a390:	e058      	b.n	800a444 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800a392:	7bbb      	ldrb	r3, [r7, #14]
 800a394:	2b01      	cmp	r3, #1
 800a396:	d055      	beq.n	800a444 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	2204      	movs	r2, #4
 800a39c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800a3a0:	e050      	b.n	800a444 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	3340      	adds	r3, #64	@ 0x40
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f000 f860 	bl	800a46e <GetLineCoding>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a3b2:	7bbb      	ldrb	r3, [r7, #14]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d126      	bne.n	800a406 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a3ca:	791b      	ldrb	r3, [r3, #4]
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d13b      	bne.n	800a448 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a3da:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	d133      	bne.n	800a448 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a3ea:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	d12b      	bne.n	800a448 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a3f8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d124      	bne.n	800a448 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f000 f958 	bl	800a6b4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a404:	e020      	b.n	800a448 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800a406:	7bbb      	ldrb	r3, [r7, #14]
 800a408:	2b01      	cmp	r3, #1
 800a40a:	d01d      	beq.n	800a448 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	2204      	movs	r2, #4
 800a410:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800a414:	e018      	b.n	800a448 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f000 f867 	bl	800a4ea <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f000 f8da 	bl	800a5d6 <CDC_ProcessReception>
      break;
 800a422:	e014      	b.n	800a44e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800a424:	2100      	movs	r1, #0
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f001 f81a 	bl	800b460 <USBH_ClrFeature>
 800a42c:	4603      	mov	r3, r0
 800a42e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a430:	7bbb      	ldrb	r3, [r7, #14]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d10a      	bne.n	800a44c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	2200      	movs	r2, #0
 800a43a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800a43e:	e005      	b.n	800a44c <USBH_CDC_Process+0x120>

    default:
      break;
 800a440:	bf00      	nop
 800a442:	e004      	b.n	800a44e <USBH_CDC_Process+0x122>
      break;
 800a444:	bf00      	nop
 800a446:	e002      	b.n	800a44e <USBH_CDC_Process+0x122>
      break;
 800a448:	bf00      	nop
 800a44a:	e000      	b.n	800a44e <USBH_CDC_Process+0x122>
      break;
 800a44c:	bf00      	nop

  }

  return status;
 800a44e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a450:	4618      	mov	r0, r3
 800a452:	3710      	adds	r7, #16
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}

0800a458 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a458:	b480      	push	{r7}
 800a45a:	b083      	sub	sp, #12
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a460:	2300      	movs	r3, #0
}
 800a462:	4618      	mov	r0, r3
 800a464:	370c      	adds	r7, #12
 800a466:	46bd      	mov	sp, r7
 800a468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46c:	4770      	bx	lr

0800a46e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800a46e:	b580      	push	{r7, lr}
 800a470:	b082      	sub	sp, #8
 800a472:	af00      	add	r7, sp, #0
 800a474:	6078      	str	r0, [r7, #4]
 800a476:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	22a1      	movs	r2, #161	@ 0xa1
 800a47c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2221      	movs	r2, #33	@ 0x21
 800a482:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2200      	movs	r2, #0
 800a488:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2200      	movs	r2, #0
 800a48e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2207      	movs	r2, #7
 800a494:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	2207      	movs	r2, #7
 800a49a:	4619      	mov	r1, r3
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f001 fb14 	bl	800baca <USBH_CtlReq>
 800a4a2:	4603      	mov	r3, r0
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3708      	adds	r7, #8
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b082      	sub	sp, #8
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2221      	movs	r2, #33	@ 0x21
 800a4ba:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2220      	movs	r2, #32
 800a4c0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2207      	movs	r2, #7
 800a4d2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	2207      	movs	r2, #7
 800a4d8:	4619      	mov	r1, r3
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f001 faf5 	bl	800baca <USBH_CtlReq>
 800a4e0:	4603      	mov	r3, r0
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3708      	adds	r7, #8
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}

0800a4ea <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800a4ea:	b580      	push	{r7, lr}
 800a4ec:	b086      	sub	sp, #24
 800a4ee:	af02      	add	r7, sp, #8
 800a4f0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a4f8:	69db      	ldr	r3, [r3, #28]
 800a4fa:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800a506:	2b01      	cmp	r3, #1
 800a508:	d002      	beq.n	800a510 <CDC_ProcessTransmission+0x26>
 800a50a:	2b02      	cmp	r3, #2
 800a50c:	d023      	beq.n	800a556 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800a50e:	e05e      	b.n	800a5ce <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a514:	68fa      	ldr	r2, [r7, #12]
 800a516:	8b12      	ldrh	r2, [r2, #24]
 800a518:	4293      	cmp	r3, r2
 800a51a:	d90b      	bls.n	800a534 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	69d9      	ldr	r1, [r3, #28]
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	8b1a      	ldrh	r2, [r3, #24]
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	7b5b      	ldrb	r3, [r3, #13]
 800a528:	2001      	movs	r0, #1
 800a52a:	9000      	str	r0, [sp, #0]
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f001 fcda 	bl	800bee6 <USBH_BulkSendData>
 800a532:	e00b      	b.n	800a54c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800a53c:	b29a      	uxth	r2, r3
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	7b5b      	ldrb	r3, [r3, #13]
 800a542:	2001      	movs	r0, #1
 800a544:	9000      	str	r0, [sp, #0]
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f001 fccd 	bl	800bee6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2202      	movs	r2, #2
 800a550:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800a554:	e03b      	b.n	800a5ce <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	7b5b      	ldrb	r3, [r3, #13]
 800a55a:	4619      	mov	r1, r3
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f001 fff1 	bl	800c544 <USBH_LL_GetURBState>
 800a562:	4603      	mov	r3, r0
 800a564:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800a566:	7afb      	ldrb	r3, [r7, #11]
 800a568:	2b01      	cmp	r3, #1
 800a56a:	d128      	bne.n	800a5be <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a570:	68fa      	ldr	r2, [r7, #12]
 800a572:	8b12      	ldrh	r2, [r2, #24]
 800a574:	4293      	cmp	r3, r2
 800a576:	d90e      	bls.n	800a596 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a57c:	68fa      	ldr	r2, [r7, #12]
 800a57e:	8b12      	ldrh	r2, [r2, #24]
 800a580:	1a9a      	subs	r2, r3, r2
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	69db      	ldr	r3, [r3, #28]
 800a58a:	68fa      	ldr	r2, [r7, #12]
 800a58c:	8b12      	ldrh	r2, [r2, #24]
 800a58e:	441a      	add	r2, r3
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	61da      	str	r2, [r3, #28]
 800a594:	e002      	b.n	800a59c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2200      	movs	r2, #0
 800a59a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d004      	beq.n	800a5ae <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800a5ac:	e00e      	b.n	800a5cc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 f868 	bl	800a68c <USBH_CDC_TransmitCallback>
      break;
 800a5bc:	e006      	b.n	800a5cc <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800a5be:	7afb      	ldrb	r3, [r7, #11]
 800a5c0:	2b02      	cmp	r3, #2
 800a5c2:	d103      	bne.n	800a5cc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800a5cc:	bf00      	nop
  }
}
 800a5ce:	bf00      	nop
 800a5d0:	3710      	adds	r7, #16
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}

0800a5d6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a5d6:	b580      	push	{r7, lr}
 800a5d8:	b086      	sub	sp, #24
 800a5da:	af00      	add	r7, sp, #0
 800a5dc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a5e4:	69db      	ldr	r3, [r3, #28]
 800a5e6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800a5f2:	2b03      	cmp	r3, #3
 800a5f4:	d002      	beq.n	800a5fc <CDC_ProcessReception+0x26>
 800a5f6:	2b04      	cmp	r3, #4
 800a5f8:	d00e      	beq.n	800a618 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800a5fa:	e043      	b.n	800a684 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	6a19      	ldr	r1, [r3, #32]
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	8b5a      	ldrh	r2, [r3, #26]
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	7b1b      	ldrb	r3, [r3, #12]
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f001 fc91 	bl	800bf30 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	2204      	movs	r2, #4
 800a612:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800a616:	e035      	b.n	800a684 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	7b1b      	ldrb	r3, [r3, #12]
 800a61c:	4619      	mov	r1, r3
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f001 ff90 	bl	800c544 <USBH_LL_GetURBState>
 800a624:	4603      	mov	r3, r0
 800a626:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a628:	7cfb      	ldrb	r3, [r7, #19]
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	d129      	bne.n	800a682 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	7b1b      	ldrb	r3, [r3, #12]
 800a632:	4619      	mov	r1, r3
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f001 fef3 	bl	800c420 <USBH_LL_GetLastXferSize>
 800a63a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a640:	68fa      	ldr	r2, [r7, #12]
 800a642:	429a      	cmp	r2, r3
 800a644:	d016      	beq.n	800a674 <CDC_ProcessReception+0x9e>
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	8b5b      	ldrh	r3, [r3, #26]
 800a64a:	461a      	mov	r2, r3
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	4293      	cmp	r3, r2
 800a650:	d110      	bne.n	800a674 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	1ad2      	subs	r2, r2, r3
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800a65e:	697b      	ldr	r3, [r7, #20]
 800a660:	6a1a      	ldr	r2, [r3, #32]
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	441a      	add	r2, r3
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	2203      	movs	r2, #3
 800a66e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800a672:	e006      	b.n	800a682 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	2200      	movs	r2, #0
 800a678:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f000 f80f 	bl	800a6a0 <USBH_CDC_ReceiveCallback>
      break;
 800a682:	bf00      	nop
  }
}
 800a684:	bf00      	nop
 800a686:	3718      	adds	r7, #24
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}

0800a68c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a68c:	b480      	push	{r7}
 800a68e:	b083      	sub	sp, #12
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a694:	bf00      	nop
 800a696:	370c      	adds	r7, #12
 800a698:	46bd      	mov	sp, r7
 800a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69e:	4770      	bx	lr

0800a6a0 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b083      	sub	sp, #12
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a6a8:	bf00      	nop
 800a6aa:	370c      	adds	r7, #12
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b2:	4770      	bx	lr

0800a6b4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b083      	sub	sp, #12
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a6bc:	bf00      	nop
 800a6be:	370c      	adds	r7, #12
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr

0800a6c8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	60f8      	str	r0, [r7, #12]
 800a6d0:	60b9      	str	r1, [r7, #8]
 800a6d2:	4613      	mov	r3, r2
 800a6d4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d101      	bne.n	800a6e0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a6dc:	2302      	movs	r3, #2
 800a6de:	e029      	b.n	800a734 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	79fa      	ldrb	r2, [r7, #7]
 800a6e4:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800a6f8:	68f8      	ldr	r0, [r7, #12]
 800a6fa:	f000 f81f 	bl	800a73c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	2200      	movs	r2, #0
 800a702:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	2200      	movs	r2, #0
 800a70a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	2200      	movs	r2, #0
 800a712:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2200      	movs	r2, #0
 800a71a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d003      	beq.n	800a72c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	68ba      	ldr	r2, [r7, #8]
 800a728:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800a72c:	68f8      	ldr	r0, [r7, #12]
 800a72e:	f001 fdc3 	bl	800c2b8 <USBH_LL_Init>

  return USBH_OK;
 800a732:	2300      	movs	r3, #0
}
 800a734:	4618      	mov	r0, r3
 800a736:	3710      	adds	r7, #16
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}

0800a73c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b084      	sub	sp, #16
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a744:	2300      	movs	r3, #0
 800a746:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a748:	2300      	movs	r3, #0
 800a74a:	60fb      	str	r3, [r7, #12]
 800a74c:	e009      	b.n	800a762 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a74e:	687a      	ldr	r2, [r7, #4]
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	33e0      	adds	r3, #224	@ 0xe0
 800a754:	009b      	lsls	r3, r3, #2
 800a756:	4413      	add	r3, r2
 800a758:	2200      	movs	r2, #0
 800a75a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	3301      	adds	r3, #1
 800a760:	60fb      	str	r3, [r7, #12]
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	2b0f      	cmp	r3, #15
 800a766:	d9f2      	bls.n	800a74e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a768:	2300      	movs	r3, #0
 800a76a:	60fb      	str	r3, [r7, #12]
 800a76c:	e009      	b.n	800a782 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a76e:	687a      	ldr	r2, [r7, #4]
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	4413      	add	r3, r2
 800a774:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a778:	2200      	movs	r2, #0
 800a77a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	3301      	adds	r3, #1
 800a780:	60fb      	str	r3, [r7, #12]
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a788:	d3f1      	bcc.n	800a76e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2200      	movs	r2, #0
 800a78e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2200      	movs	r2, #0
 800a794:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2201      	movs	r2, #1
 800a79a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2240      	movs	r2, #64	@ 0x40
 800a7ae:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2201      	movs	r2, #1
 800a7c2:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	331c      	adds	r3, #28
 800a7da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a7de:	2100      	movs	r1, #0
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f002 fde3 	bl	800d3ac <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a7ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a7f0:	2100      	movs	r1, #0
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f002 fdda 	bl	800d3ac <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a7fe:	2212      	movs	r2, #18
 800a800:	2100      	movs	r1, #0
 800a802:	4618      	mov	r0, r3
 800a804:	f002 fdd2 	bl	800d3ac <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a80e:	223e      	movs	r2, #62	@ 0x3e
 800a810:	2100      	movs	r1, #0
 800a812:	4618      	mov	r0, r3
 800a814:	f002 fdca 	bl	800d3ac <memset>

  return USBH_OK;
 800a818:	2300      	movs	r3, #0
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3710      	adds	r7, #16
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}

0800a822 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a822:	b480      	push	{r7}
 800a824:	b085      	sub	sp, #20
 800a826:	af00      	add	r7, sp, #0
 800a828:	6078      	str	r0, [r7, #4]
 800a82a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a82c:	2300      	movs	r3, #0
 800a82e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d016      	beq.n	800a864 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d10e      	bne.n	800a85e <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a846:	1c59      	adds	r1, r3, #1
 800a848:	687a      	ldr	r2, [r7, #4]
 800a84a:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800a84e:	687a      	ldr	r2, [r7, #4]
 800a850:	33de      	adds	r3, #222	@ 0xde
 800a852:	6839      	ldr	r1, [r7, #0]
 800a854:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a858:	2300      	movs	r3, #0
 800a85a:	73fb      	strb	r3, [r7, #15]
 800a85c:	e004      	b.n	800a868 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a85e:	2302      	movs	r3, #2
 800a860:	73fb      	strb	r3, [r7, #15]
 800a862:	e001      	b.n	800a868 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a864:	2302      	movs	r3, #2
 800a866:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a868:	7bfb      	ldrb	r3, [r7, #15]
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3714      	adds	r7, #20
 800a86e:	46bd      	mov	sp, r7
 800a870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a874:	4770      	bx	lr

0800a876 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a876:	b480      	push	{r7}
 800a878:	b085      	sub	sp, #20
 800a87a:	af00      	add	r7, sp, #0
 800a87c:	6078      	str	r0, [r7, #4]
 800a87e:	460b      	mov	r3, r1
 800a880:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a882:	2300      	movs	r3, #0
 800a884:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800a88c:	78fa      	ldrb	r2, [r7, #3]
 800a88e:	429a      	cmp	r2, r3
 800a890:	d204      	bcs.n	800a89c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	78fa      	ldrb	r2, [r7, #3]
 800a896:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800a89a:	e001      	b.n	800a8a0 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a89c:	2302      	movs	r3, #2
 800a89e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a8a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3714      	adds	r7, #20
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ac:	4770      	bx	lr

0800a8ae <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a8ae:	b480      	push	{r7}
 800a8b0:	b087      	sub	sp, #28
 800a8b2:	af00      	add	r7, sp, #0
 800a8b4:	6078      	str	r0, [r7, #4]
 800a8b6:	4608      	mov	r0, r1
 800a8b8:	4611      	mov	r1, r2
 800a8ba:	461a      	mov	r2, r3
 800a8bc:	4603      	mov	r3, r0
 800a8be:	70fb      	strb	r3, [r7, #3]
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	70bb      	strb	r3, [r7, #2]
 800a8c4:	4613      	mov	r3, r2
 800a8c6:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a8d6:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a8d8:	e025      	b.n	800a926 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a8da:	7dfb      	ldrb	r3, [r7, #23]
 800a8dc:	221a      	movs	r2, #26
 800a8de:	fb02 f303 	mul.w	r3, r2, r3
 800a8e2:	3308      	adds	r3, #8
 800a8e4:	68fa      	ldr	r2, [r7, #12]
 800a8e6:	4413      	add	r3, r2
 800a8e8:	3302      	adds	r3, #2
 800a8ea:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	795b      	ldrb	r3, [r3, #5]
 800a8f0:	78fa      	ldrb	r2, [r7, #3]
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	d002      	beq.n	800a8fc <USBH_FindInterface+0x4e>
 800a8f6:	78fb      	ldrb	r3, [r7, #3]
 800a8f8:	2bff      	cmp	r3, #255	@ 0xff
 800a8fa:	d111      	bne.n	800a920 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a900:	78ba      	ldrb	r2, [r7, #2]
 800a902:	429a      	cmp	r2, r3
 800a904:	d002      	beq.n	800a90c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a906:	78bb      	ldrb	r3, [r7, #2]
 800a908:	2bff      	cmp	r3, #255	@ 0xff
 800a90a:	d109      	bne.n	800a920 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a910:	787a      	ldrb	r2, [r7, #1]
 800a912:	429a      	cmp	r2, r3
 800a914:	d002      	beq.n	800a91c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a916:	787b      	ldrb	r3, [r7, #1]
 800a918:	2bff      	cmp	r3, #255	@ 0xff
 800a91a:	d101      	bne.n	800a920 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a91c:	7dfb      	ldrb	r3, [r7, #23]
 800a91e:	e006      	b.n	800a92e <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a920:	7dfb      	ldrb	r3, [r7, #23]
 800a922:	3301      	adds	r3, #1
 800a924:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a926:	7dfb      	ldrb	r3, [r7, #23]
 800a928:	2b01      	cmp	r3, #1
 800a92a:	d9d6      	bls.n	800a8da <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a92c:	23ff      	movs	r3, #255	@ 0xff
}
 800a92e:	4618      	mov	r0, r3
 800a930:	371c      	adds	r7, #28
 800a932:	46bd      	mov	sp, r7
 800a934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a938:	4770      	bx	lr

0800a93a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800a93a:	b580      	push	{r7, lr}
 800a93c:	b082      	sub	sp, #8
 800a93e:	af00      	add	r7, sp, #0
 800a940:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f001 fcf4 	bl	800c330 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800a948:	2101      	movs	r1, #1
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f001 fe0d 	bl	800c56a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a950:	2300      	movs	r3, #0
}
 800a952:	4618      	mov	r0, r3
 800a954:	3708      	adds	r7, #8
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}
	...

0800a95c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b088      	sub	sp, #32
 800a960:	af04      	add	r7, sp, #16
 800a962:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a964:	2302      	movs	r3, #2
 800a966:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a968:	2300      	movs	r3, #0
 800a96a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800a972:	b2db      	uxtb	r3, r3
 800a974:	2b01      	cmp	r3, #1
 800a976:	d102      	bne.n	800a97e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2203      	movs	r2, #3
 800a97c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	781b      	ldrb	r3, [r3, #0]
 800a982:	b2db      	uxtb	r3, r3
 800a984:	2b0b      	cmp	r3, #11
 800a986:	f200 81bb 	bhi.w	800ad00 <USBH_Process+0x3a4>
 800a98a:	a201      	add	r2, pc, #4	@ (adr r2, 800a990 <USBH_Process+0x34>)
 800a98c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a990:	0800a9c1 	.word	0x0800a9c1
 800a994:	0800a9f3 	.word	0x0800a9f3
 800a998:	0800aa5b 	.word	0x0800aa5b
 800a99c:	0800ac9b 	.word	0x0800ac9b
 800a9a0:	0800ad01 	.word	0x0800ad01
 800a9a4:	0800aafb 	.word	0x0800aafb
 800a9a8:	0800ac41 	.word	0x0800ac41
 800a9ac:	0800ab31 	.word	0x0800ab31
 800a9b0:	0800ab51 	.word	0x0800ab51
 800a9b4:	0800ab6f 	.word	0x0800ab6f
 800a9b8:	0800abb3 	.word	0x0800abb3
 800a9bc:	0800ac83 	.word	0x0800ac83
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	f000 819b 	beq.w	800ad04 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2201      	movs	r2, #1
 800a9d2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a9d4:	20c8      	movs	r0, #200	@ 0xc8
 800a9d6:	f001 fe12 	bl	800c5fe <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f001 fd05 	bl	800c3ea <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a9f0:	e188      	b.n	800ad04 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800a9f8:	2b01      	cmp	r3, #1
 800a9fa:	d107      	bne.n	800aa0c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2202      	movs	r2, #2
 800aa08:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800aa0a:	e18a      	b.n	800ad22 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800aa12:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800aa16:	d914      	bls.n	800aa42 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800aa1e:	3301      	adds	r3, #1
 800aa20:	b2da      	uxtb	r2, r3
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800aa2e:	2b03      	cmp	r3, #3
 800aa30:	d903      	bls.n	800aa3a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	220d      	movs	r2, #13
 800aa36:	701a      	strb	r2, [r3, #0]
      break;
 800aa38:	e173      	b.n	800ad22 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	701a      	strb	r2, [r3, #0]
      break;
 800aa40:	e16f      	b.n	800ad22 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800aa48:	f103 020a 	add.w	r2, r3, #10
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800aa52:	200a      	movs	r0, #10
 800aa54:	f001 fdd3 	bl	800c5fe <USBH_Delay>
      break;
 800aa58:	e163      	b.n	800ad22 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d005      	beq.n	800aa70 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800aa6a:	2104      	movs	r1, #4
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800aa70:	2064      	movs	r0, #100	@ 0x64
 800aa72:	f001 fdc4 	bl	800c5fe <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f001 fc90 	bl	800c39c <USBH_LL_GetSpeed>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	461a      	mov	r2, r3
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2205      	movs	r2, #5
 800aa8a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800aa8c:	2100      	movs	r1, #0
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f001 fa9b 	bl	800bfca <USBH_AllocPipe>
 800aa94:	4603      	mov	r3, r0
 800aa96:	461a      	mov	r2, r3
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800aa9c:	2180      	movs	r1, #128	@ 0x80
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f001 fa93 	bl	800bfca <USBH_AllocPipe>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	461a      	mov	r2, r3
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	7919      	ldrb	r1, [r3, #4]
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800aabc:	687a      	ldr	r2, [r7, #4]
 800aabe:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800aac0:	9202      	str	r2, [sp, #8]
 800aac2:	2200      	movs	r2, #0
 800aac4:	9201      	str	r2, [sp, #4]
 800aac6:	9300      	str	r3, [sp, #0]
 800aac8:	4603      	mov	r3, r0
 800aaca:	2280      	movs	r2, #128	@ 0x80
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f001 fa4d 	bl	800bf6c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	7959      	ldrb	r1, [r3, #5]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800aae2:	687a      	ldr	r2, [r7, #4]
 800aae4:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800aae6:	9202      	str	r2, [sp, #8]
 800aae8:	2200      	movs	r2, #0
 800aaea:	9201      	str	r2, [sp, #4]
 800aaec:	9300      	str	r3, [sp, #0]
 800aaee:	4603      	mov	r3, r0
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f001 fa3a 	bl	800bf6c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800aaf8:	e113      	b.n	800ad22 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f000 f916 	bl	800ad2c <USBH_HandleEnum>
 800ab00:	4603      	mov	r3, r0
 800ab02:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800ab04:	7bbb      	ldrb	r3, [r7, #14]
 800ab06:	b2db      	uxtb	r3, r3
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	f040 80fd 	bne.w	800ad08 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2200      	movs	r2, #0
 800ab12:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	d103      	bne.n	800ab28 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2208      	movs	r2, #8
 800ab24:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ab26:	e0ef      	b.n	800ad08 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2207      	movs	r2, #7
 800ab2c:	701a      	strb	r2, [r3, #0]
      break;
 800ab2e:	e0eb      	b.n	800ad08 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	f000 80e8 	beq.w	800ad0c <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ab42:	2101      	movs	r1, #1
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2208      	movs	r2, #8
 800ab4c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800ab4e:	e0dd      	b.n	800ad0c <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800ab56:	4619      	mov	r1, r3
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f000 fc3a 	bl	800b3d2 <USBH_SetCfg>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	f040 80d5 	bne.w	800ad10 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2209      	movs	r2, #9
 800ab6a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ab6c:	e0d0      	b.n	800ad10 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800ab74:	f003 0320 	and.w	r3, r3, #32
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d016      	beq.n	800abaa <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800ab7c:	2101      	movs	r1, #1
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f000 fc4a 	bl	800b418 <USBH_SetFeature>
 800ab84:	4603      	mov	r3, r0
 800ab86:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ab88:	7bbb      	ldrb	r3, [r7, #14]
 800ab8a:	b2db      	uxtb	r3, r3
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d103      	bne.n	800ab98 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	220a      	movs	r2, #10
 800ab94:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ab96:	e0bd      	b.n	800ad14 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 800ab98:	7bbb      	ldrb	r3, [r7, #14]
 800ab9a:	b2db      	uxtb	r3, r3
 800ab9c:	2b03      	cmp	r3, #3
 800ab9e:	f040 80b9 	bne.w	800ad14 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	220a      	movs	r2, #10
 800aba6:	701a      	strb	r2, [r3, #0]
      break;
 800aba8:	e0b4      	b.n	800ad14 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	220a      	movs	r2, #10
 800abae:	701a      	strb	r2, [r3, #0]
      break;
 800abb0:	e0b0      	b.n	800ad14 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800abb8:	2b00      	cmp	r3, #0
 800abba:	f000 80ad 	beq.w	800ad18 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2200      	movs	r2, #0
 800abc2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800abc6:	2300      	movs	r3, #0
 800abc8:	73fb      	strb	r3, [r7, #15]
 800abca:	e016      	b.n	800abfa <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800abcc:	7bfa      	ldrb	r2, [r7, #15]
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	32de      	adds	r2, #222	@ 0xde
 800abd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abd6:	791a      	ldrb	r2, [r3, #4]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800abde:	429a      	cmp	r2, r3
 800abe0:	d108      	bne.n	800abf4 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800abe2:	7bfa      	ldrb	r2, [r7, #15]
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	32de      	adds	r2, #222	@ 0xde
 800abe8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800abf2:	e005      	b.n	800ac00 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800abf4:	7bfb      	ldrb	r3, [r7, #15]
 800abf6:	3301      	adds	r3, #1
 800abf8:	73fb      	strb	r3, [r7, #15]
 800abfa:	7bfb      	ldrb	r3, [r7, #15]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d0e5      	beq.n	800abcc <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d016      	beq.n	800ac38 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ac10:	689b      	ldr	r3, [r3, #8]
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	4798      	blx	r3
 800ac16:	4603      	mov	r3, r0
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d109      	bne.n	800ac30 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2206      	movs	r2, #6
 800ac20:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ac28:	2103      	movs	r1, #3
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ac2e:	e073      	b.n	800ad18 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	220d      	movs	r2, #13
 800ac34:	701a      	strb	r2, [r3, #0]
      break;
 800ac36:	e06f      	b.n	800ad18 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	220d      	movs	r2, #13
 800ac3c:	701a      	strb	r2, [r3, #0]
      break;
 800ac3e:	e06b      	b.n	800ad18 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d017      	beq.n	800ac7a <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ac50:	691b      	ldr	r3, [r3, #16]
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	4798      	blx	r3
 800ac56:	4603      	mov	r3, r0
 800ac58:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ac5a:	7bbb      	ldrb	r3, [r7, #14]
 800ac5c:	b2db      	uxtb	r3, r3
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d103      	bne.n	800ac6a <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	220b      	movs	r2, #11
 800ac66:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ac68:	e058      	b.n	800ad1c <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800ac6a:	7bbb      	ldrb	r3, [r7, #14]
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	2b02      	cmp	r3, #2
 800ac70:	d154      	bne.n	800ad1c <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	220d      	movs	r2, #13
 800ac76:	701a      	strb	r2, [r3, #0]
      break;
 800ac78:	e050      	b.n	800ad1c <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	220d      	movs	r2, #13
 800ac7e:	701a      	strb	r2, [r3, #0]
      break;
 800ac80:	e04c      	b.n	800ad1c <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d049      	beq.n	800ad20 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ac92:	695b      	ldr	r3, [r3, #20]
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	4798      	blx	r3
      }
      break;
 800ac98:	e042      	b.n	800ad20 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f7ff fd4a 	bl	800a73c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d009      	beq.n	800acc6 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800acb8:	68db      	ldr	r3, [r3, #12]
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2200      	movs	r2, #0
 800acc2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800accc:	2b00      	cmp	r3, #0
 800acce:	d005      	beq.n	800acdc <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800acd6:	2105      	movs	r1, #5
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800ace2:	b2db      	uxtb	r3, r3
 800ace4:	2b01      	cmp	r3, #1
 800ace6:	d107      	bne.n	800acf8 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2200      	movs	r2, #0
 800acec:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f7ff fe22 	bl	800a93a <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800acf6:	e014      	b.n	800ad22 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f001 fb19 	bl	800c330 <USBH_LL_Start>
      break;
 800acfe:	e010      	b.n	800ad22 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800ad00:	bf00      	nop
 800ad02:	e00e      	b.n	800ad22 <USBH_Process+0x3c6>
      break;
 800ad04:	bf00      	nop
 800ad06:	e00c      	b.n	800ad22 <USBH_Process+0x3c6>
      break;
 800ad08:	bf00      	nop
 800ad0a:	e00a      	b.n	800ad22 <USBH_Process+0x3c6>
    break;
 800ad0c:	bf00      	nop
 800ad0e:	e008      	b.n	800ad22 <USBH_Process+0x3c6>
      break;
 800ad10:	bf00      	nop
 800ad12:	e006      	b.n	800ad22 <USBH_Process+0x3c6>
      break;
 800ad14:	bf00      	nop
 800ad16:	e004      	b.n	800ad22 <USBH_Process+0x3c6>
      break;
 800ad18:	bf00      	nop
 800ad1a:	e002      	b.n	800ad22 <USBH_Process+0x3c6>
      break;
 800ad1c:	bf00      	nop
 800ad1e:	e000      	b.n	800ad22 <USBH_Process+0x3c6>
      break;
 800ad20:	bf00      	nop
  }
  return USBH_OK;
 800ad22:	2300      	movs	r3, #0
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3710      	adds	r7, #16
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}

0800ad2c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b088      	sub	sp, #32
 800ad30:	af04      	add	r7, sp, #16
 800ad32:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800ad34:	2301      	movs	r3, #1
 800ad36:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800ad38:	2301      	movs	r3, #1
 800ad3a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	785b      	ldrb	r3, [r3, #1]
 800ad40:	2b07      	cmp	r3, #7
 800ad42:	f200 81bd 	bhi.w	800b0c0 <USBH_HandleEnum+0x394>
 800ad46:	a201      	add	r2, pc, #4	@ (adr r2, 800ad4c <USBH_HandleEnum+0x20>)
 800ad48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad4c:	0800ad6d 	.word	0x0800ad6d
 800ad50:	0800ae27 	.word	0x0800ae27
 800ad54:	0800ae91 	.word	0x0800ae91
 800ad58:	0800af1b 	.word	0x0800af1b
 800ad5c:	0800af85 	.word	0x0800af85
 800ad60:	0800aff5 	.word	0x0800aff5
 800ad64:	0800b03b 	.word	0x0800b03b
 800ad68:	0800b081 	.word	0x0800b081
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800ad6c:	2108      	movs	r1, #8
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f000 fa4c 	bl	800b20c <USBH_Get_DevDesc>
 800ad74:	4603      	mov	r3, r0
 800ad76:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ad78:	7bbb      	ldrb	r3, [r7, #14]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d12e      	bne.n	800addc <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	7919      	ldrb	r1, [r3, #4]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ada2:	9202      	str	r2, [sp, #8]
 800ada4:	2200      	movs	r2, #0
 800ada6:	9201      	str	r2, [sp, #4]
 800ada8:	9300      	str	r3, [sp, #0]
 800adaa:	4603      	mov	r3, r0
 800adac:	2280      	movs	r2, #128	@ 0x80
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f001 f8dc 	bl	800bf6c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	7959      	ldrb	r1, [r3, #5]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800adc4:	687a      	ldr	r2, [r7, #4]
 800adc6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800adc8:	9202      	str	r2, [sp, #8]
 800adca:	2200      	movs	r2, #0
 800adcc:	9201      	str	r2, [sp, #4]
 800adce:	9300      	str	r3, [sp, #0]
 800add0:	4603      	mov	r3, r0
 800add2:	2200      	movs	r2, #0
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f001 f8c9 	bl	800bf6c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800adda:	e173      	b.n	800b0c4 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800addc:	7bbb      	ldrb	r3, [r7, #14]
 800adde:	2b03      	cmp	r3, #3
 800ade0:	f040 8170 	bne.w	800b0c4 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800adea:	3301      	adds	r3, #1
 800adec:	b2da      	uxtb	r2, r3
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800adfa:	2b03      	cmp	r3, #3
 800adfc:	d903      	bls.n	800ae06 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	220d      	movs	r2, #13
 800ae02:	701a      	strb	r2, [r3, #0]
      break;
 800ae04:	e15e      	b.n	800b0c4 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	795b      	ldrb	r3, [r3, #5]
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f001 f8fd 	bl	800c00c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	791b      	ldrb	r3, [r3, #4]
 800ae16:	4619      	mov	r1, r3
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f001 f8f7 	bl	800c00c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2200      	movs	r2, #0
 800ae22:	701a      	strb	r2, [r3, #0]
      break;
 800ae24:	e14e      	b.n	800b0c4 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800ae26:	2112      	movs	r1, #18
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f000 f9ef 	bl	800b20c <USBH_Get_DevDesc>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ae32:	7bbb      	ldrb	r3, [r7, #14]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d103      	bne.n	800ae40 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2202      	movs	r2, #2
 800ae3c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ae3e:	e143      	b.n	800b0c8 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ae40:	7bbb      	ldrb	r3, [r7, #14]
 800ae42:	2b03      	cmp	r3, #3
 800ae44:	f040 8140 	bne.w	800b0c8 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ae4e:	3301      	adds	r3, #1
 800ae50:	b2da      	uxtb	r2, r3
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ae5e:	2b03      	cmp	r3, #3
 800ae60:	d903      	bls.n	800ae6a <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	220d      	movs	r2, #13
 800ae66:	701a      	strb	r2, [r3, #0]
      break;
 800ae68:	e12e      	b.n	800b0c8 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	795b      	ldrb	r3, [r3, #5]
 800ae6e:	4619      	mov	r1, r3
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f001 f8cb 	bl	800c00c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	791b      	ldrb	r3, [r3, #4]
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f001 f8c5 	bl	800c00c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2200      	movs	r2, #0
 800ae86:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	701a      	strb	r2, [r3, #0]
      break;
 800ae8e:	e11b      	b.n	800b0c8 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800ae90:	2101      	movs	r1, #1
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f000 fa79 	bl	800b38a <USBH_SetAddress>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ae9c:	7bbb      	ldrb	r3, [r7, #14]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d130      	bne.n	800af04 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800aea2:	2002      	movs	r0, #2
 800aea4:	f001 fbab 	bl	800c5fe <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2201      	movs	r2, #1
 800aeac:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2203      	movs	r2, #3
 800aeb4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	7919      	ldrb	r1, [r3, #4]
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800aeca:	9202      	str	r2, [sp, #8]
 800aecc:	2200      	movs	r2, #0
 800aece:	9201      	str	r2, [sp, #4]
 800aed0:	9300      	str	r3, [sp, #0]
 800aed2:	4603      	mov	r3, r0
 800aed4:	2280      	movs	r2, #128	@ 0x80
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f001 f848 	bl	800bf6c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	7959      	ldrb	r1, [r3, #5]
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800aeec:	687a      	ldr	r2, [r7, #4]
 800aeee:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aef0:	9202      	str	r2, [sp, #8]
 800aef2:	2200      	movs	r2, #0
 800aef4:	9201      	str	r2, [sp, #4]
 800aef6:	9300      	str	r3, [sp, #0]
 800aef8:	4603      	mov	r3, r0
 800aefa:	2200      	movs	r2, #0
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f001 f835 	bl	800bf6c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800af02:	e0e3      	b.n	800b0cc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800af04:	7bbb      	ldrb	r3, [r7, #14]
 800af06:	2b03      	cmp	r3, #3
 800af08:	f040 80e0 	bne.w	800b0cc <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	220d      	movs	r2, #13
 800af10:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2200      	movs	r2, #0
 800af16:	705a      	strb	r2, [r3, #1]
      break;
 800af18:	e0d8      	b.n	800b0cc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800af1a:	2109      	movs	r1, #9
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f000 f9a1 	bl	800b264 <USBH_Get_CfgDesc>
 800af22:	4603      	mov	r3, r0
 800af24:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800af26:	7bbb      	ldrb	r3, [r7, #14]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d103      	bne.n	800af34 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2204      	movs	r2, #4
 800af30:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800af32:	e0cd      	b.n	800b0d0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800af34:	7bbb      	ldrb	r3, [r7, #14]
 800af36:	2b03      	cmp	r3, #3
 800af38:	f040 80ca 	bne.w	800b0d0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800af42:	3301      	adds	r3, #1
 800af44:	b2da      	uxtb	r2, r3
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800af52:	2b03      	cmp	r3, #3
 800af54:	d903      	bls.n	800af5e <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	220d      	movs	r2, #13
 800af5a:	701a      	strb	r2, [r3, #0]
      break;
 800af5c:	e0b8      	b.n	800b0d0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	795b      	ldrb	r3, [r3, #5]
 800af62:	4619      	mov	r1, r3
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f001 f851 	bl	800c00c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	791b      	ldrb	r3, [r3, #4]
 800af6e:	4619      	mov	r1, r3
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f001 f84b 	bl	800c00c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2200      	movs	r2, #0
 800af7a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2200      	movs	r2, #0
 800af80:	701a      	strb	r2, [r3, #0]
      break;
 800af82:	e0a5      	b.n	800b0d0 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800af8a:	4619      	mov	r1, r3
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f000 f969 	bl	800b264 <USBH_Get_CfgDesc>
 800af92:	4603      	mov	r3, r0
 800af94:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800af96:	7bbb      	ldrb	r3, [r7, #14]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d103      	bne.n	800afa4 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2205      	movs	r2, #5
 800afa0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800afa2:	e097      	b.n	800b0d4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800afa4:	7bbb      	ldrb	r3, [r7, #14]
 800afa6:	2b03      	cmp	r3, #3
 800afa8:	f040 8094 	bne.w	800b0d4 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800afb2:	3301      	adds	r3, #1
 800afb4:	b2da      	uxtb	r2, r3
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800afc2:	2b03      	cmp	r3, #3
 800afc4:	d903      	bls.n	800afce <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	220d      	movs	r2, #13
 800afca:	701a      	strb	r2, [r3, #0]
      break;
 800afcc:	e082      	b.n	800b0d4 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	795b      	ldrb	r3, [r3, #5]
 800afd2:	4619      	mov	r1, r3
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f001 f819 	bl	800c00c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	791b      	ldrb	r3, [r3, #4]
 800afde:	4619      	mov	r1, r3
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f001 f813 	bl	800c00c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2200      	movs	r2, #0
 800afea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2200      	movs	r2, #0
 800aff0:	701a      	strb	r2, [r3, #0]
      break;
 800aff2:	e06f      	b.n	800b0d4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800affa:	2b00      	cmp	r3, #0
 800affc:	d019      	beq.n	800b032 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b00a:	23ff      	movs	r3, #255	@ 0xff
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f000 f953 	bl	800b2b8 <USBH_Get_StringDesc>
 800b012:	4603      	mov	r3, r0
 800b014:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b016:	7bbb      	ldrb	r3, [r7, #14]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d103      	bne.n	800b024 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2206      	movs	r2, #6
 800b020:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b022:	e059      	b.n	800b0d8 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b024:	7bbb      	ldrb	r3, [r7, #14]
 800b026:	2b03      	cmp	r3, #3
 800b028:	d156      	bne.n	800b0d8 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2206      	movs	r2, #6
 800b02e:	705a      	strb	r2, [r3, #1]
      break;
 800b030:	e052      	b.n	800b0d8 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2206      	movs	r2, #6
 800b036:	705a      	strb	r2, [r3, #1]
      break;
 800b038:	e04e      	b.n	800b0d8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800b040:	2b00      	cmp	r3, #0
 800b042:	d019      	beq.n	800b078 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b050:	23ff      	movs	r3, #255	@ 0xff
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f000 f930 	bl	800b2b8 <USBH_Get_StringDesc>
 800b058:	4603      	mov	r3, r0
 800b05a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b05c:	7bbb      	ldrb	r3, [r7, #14]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d103      	bne.n	800b06a <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2207      	movs	r2, #7
 800b066:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b068:	e038      	b.n	800b0dc <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b06a:	7bbb      	ldrb	r3, [r7, #14]
 800b06c:	2b03      	cmp	r3, #3
 800b06e:	d135      	bne.n	800b0dc <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2207      	movs	r2, #7
 800b074:	705a      	strb	r2, [r3, #1]
      break;
 800b076:	e031      	b.n	800b0dc <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2207      	movs	r2, #7
 800b07c:	705a      	strb	r2, [r3, #1]
      break;
 800b07e:	e02d      	b.n	800b0dc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800b086:	2b00      	cmp	r3, #0
 800b088:	d017      	beq.n	800b0ba <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b096:	23ff      	movs	r3, #255	@ 0xff
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f000 f90d 	bl	800b2b8 <USBH_Get_StringDesc>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b0a2:	7bbb      	ldrb	r3, [r7, #14]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d102      	bne.n	800b0ae <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b0ac:	e018      	b.n	800b0e0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b0ae:	7bbb      	ldrb	r3, [r7, #14]
 800b0b0:	2b03      	cmp	r3, #3
 800b0b2:	d115      	bne.n	800b0e0 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	73fb      	strb	r3, [r7, #15]
      break;
 800b0b8:	e012      	b.n	800b0e0 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	73fb      	strb	r3, [r7, #15]
      break;
 800b0be:	e00f      	b.n	800b0e0 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800b0c0:	bf00      	nop
 800b0c2:	e00e      	b.n	800b0e2 <USBH_HandleEnum+0x3b6>
      break;
 800b0c4:	bf00      	nop
 800b0c6:	e00c      	b.n	800b0e2 <USBH_HandleEnum+0x3b6>
      break;
 800b0c8:	bf00      	nop
 800b0ca:	e00a      	b.n	800b0e2 <USBH_HandleEnum+0x3b6>
      break;
 800b0cc:	bf00      	nop
 800b0ce:	e008      	b.n	800b0e2 <USBH_HandleEnum+0x3b6>
      break;
 800b0d0:	bf00      	nop
 800b0d2:	e006      	b.n	800b0e2 <USBH_HandleEnum+0x3b6>
      break;
 800b0d4:	bf00      	nop
 800b0d6:	e004      	b.n	800b0e2 <USBH_HandleEnum+0x3b6>
      break;
 800b0d8:	bf00      	nop
 800b0da:	e002      	b.n	800b0e2 <USBH_HandleEnum+0x3b6>
      break;
 800b0dc:	bf00      	nop
 800b0de:	e000      	b.n	800b0e2 <USBH_HandleEnum+0x3b6>
      break;
 800b0e0:	bf00      	nop
  }
  return Status;
 800b0e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3710      	adds	r7, #16
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}

0800b0ec <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b083      	sub	sp, #12
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	683a      	ldr	r2, [r7, #0]
 800b0fa:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800b0fe:	bf00      	nop
 800b100:	370c      	adds	r7, #12
 800b102:	46bd      	mov	sp, r7
 800b104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b108:	4770      	bx	lr

0800b10a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b10a:	b580      	push	{r7, lr}
 800b10c:	b082      	sub	sp, #8
 800b10e:	af00      	add	r7, sp, #0
 800b110:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b118:	1c5a      	adds	r2, r3, #1
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f000 f804 	bl	800b12e <USBH_HandleSof>
}
 800b126:	bf00      	nop
 800b128:	3708      	adds	r7, #8
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}

0800b12e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b12e:	b580      	push	{r7, lr}
 800b130:	b082      	sub	sp, #8
 800b132:	af00      	add	r7, sp, #0
 800b134:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	781b      	ldrb	r3, [r3, #0]
 800b13a:	b2db      	uxtb	r3, r3
 800b13c:	2b0b      	cmp	r3, #11
 800b13e:	d10a      	bne.n	800b156 <USBH_HandleSof+0x28>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b146:	2b00      	cmp	r3, #0
 800b148:	d005      	beq.n	800b156 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b150:	699b      	ldr	r3, [r3, #24]
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	4798      	blx	r3
  }
}
 800b156:	bf00      	nop
 800b158:	3708      	adds	r7, #8
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}

0800b15e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b15e:	b480      	push	{r7}
 800b160:	b083      	sub	sp, #12
 800b162:	af00      	add	r7, sp, #0
 800b164:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2201      	movs	r2, #1
 800b16a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800b16e:	bf00      	nop
}
 800b170:	370c      	adds	r7, #12
 800b172:	46bd      	mov	sp, r7
 800b174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b178:	4770      	bx	lr

0800b17a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b17a:	b480      	push	{r7}
 800b17c:	b083      	sub	sp, #12
 800b17e:	af00      	add	r7, sp, #0
 800b180:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2200      	movs	r2, #0
 800b186:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800b18a:	bf00      	nop
}
 800b18c:	370c      	adds	r7, #12
 800b18e:	46bd      	mov	sp, r7
 800b190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b194:	4770      	bx	lr

0800b196 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b196:	b480      	push	{r7}
 800b198:	b083      	sub	sp, #12
 800b19a:	af00      	add	r7, sp, #0
 800b19c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2201      	movs	r2, #1
 800b1a2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b1b6:	2300      	movs	r3, #0
}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	370c      	adds	r7, #12
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c2:	4770      	bx	lr

0800b1c4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b082      	sub	sp, #8
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2201      	movs	r2, #1
 800b1d0:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f001 f8be 	bl	800c366 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	791b      	ldrb	r3, [r3, #4]
 800b1ee:	4619      	mov	r1, r3
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f000 ff0b 	bl	800c00c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	795b      	ldrb	r3, [r3, #5]
 800b1fa:	4619      	mov	r1, r3
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f000 ff05 	bl	800c00c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b202:	2300      	movs	r3, #0
}
 800b204:	4618      	mov	r0, r3
 800b206:	3708      	adds	r7, #8
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}

0800b20c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b086      	sub	sp, #24
 800b210:	af02      	add	r7, sp, #8
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	460b      	mov	r3, r1
 800b216:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800b218:	887b      	ldrh	r3, [r7, #2]
 800b21a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b21e:	d901      	bls.n	800b224 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b220:	2303      	movs	r3, #3
 800b222:	e01b      	b.n	800b25c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800b22a:	887b      	ldrh	r3, [r7, #2]
 800b22c:	9300      	str	r3, [sp, #0]
 800b22e:	4613      	mov	r3, r2
 800b230:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b234:	2100      	movs	r1, #0
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f000 f872 	bl	800b320 <USBH_GetDescriptor>
 800b23c:	4603      	mov	r3, r0
 800b23e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800b240:	7bfb      	ldrb	r3, [r7, #15]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d109      	bne.n	800b25a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800b24c:	887a      	ldrh	r2, [r7, #2]
 800b24e:	4619      	mov	r1, r3
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f000 f929 	bl	800b4a8 <USBH_ParseDevDesc>
 800b256:	4603      	mov	r3, r0
 800b258:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b25a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	3710      	adds	r7, #16
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}

0800b264 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b086      	sub	sp, #24
 800b268:	af02      	add	r7, sp, #8
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	460b      	mov	r3, r1
 800b26e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	331c      	adds	r3, #28
 800b274:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800b276:	887b      	ldrh	r3, [r7, #2]
 800b278:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b27c:	d901      	bls.n	800b282 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b27e:	2303      	movs	r3, #3
 800b280:	e016      	b.n	800b2b0 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b282:	887b      	ldrh	r3, [r7, #2]
 800b284:	9300      	str	r3, [sp, #0]
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b28c:	2100      	movs	r1, #0
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f000 f846 	bl	800b320 <USBH_GetDescriptor>
 800b294:	4603      	mov	r3, r0
 800b296:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800b298:	7bfb      	ldrb	r3, [r7, #15]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d107      	bne.n	800b2ae <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800b29e:	887b      	ldrh	r3, [r7, #2]
 800b2a0:	461a      	mov	r2, r3
 800b2a2:	68b9      	ldr	r1, [r7, #8]
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f000 f9af 	bl	800b608 <USBH_ParseCfgDesc>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b2ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3710      	adds	r7, #16
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}

0800b2b8 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b088      	sub	sp, #32
 800b2bc:	af02      	add	r7, sp, #8
 800b2be:	60f8      	str	r0, [r7, #12]
 800b2c0:	607a      	str	r2, [r7, #4]
 800b2c2:	461a      	mov	r2, r3
 800b2c4:	460b      	mov	r3, r1
 800b2c6:	72fb      	strb	r3, [r7, #11]
 800b2c8:	4613      	mov	r3, r2
 800b2ca:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800b2cc:	893b      	ldrh	r3, [r7, #8]
 800b2ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b2d2:	d802      	bhi.n	800b2da <USBH_Get_StringDesc+0x22>
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d101      	bne.n	800b2de <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b2da:	2303      	movs	r3, #3
 800b2dc:	e01c      	b.n	800b318 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800b2de:	7afb      	ldrb	r3, [r7, #11]
 800b2e0:	b29b      	uxth	r3, r3
 800b2e2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800b2e6:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800b2ee:	893b      	ldrh	r3, [r7, #8]
 800b2f0:	9300      	str	r3, [sp, #0]
 800b2f2:	460b      	mov	r3, r1
 800b2f4:	2100      	movs	r1, #0
 800b2f6:	68f8      	ldr	r0, [r7, #12]
 800b2f8:	f000 f812 	bl	800b320 <USBH_GetDescriptor>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800b300:	7dfb      	ldrb	r3, [r7, #23]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d107      	bne.n	800b316 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800b30c:	893a      	ldrh	r2, [r7, #8]
 800b30e:	6879      	ldr	r1, [r7, #4]
 800b310:	4618      	mov	r0, r3
 800b312:	f000 fb8d 	bl	800ba30 <USBH_ParseStringDesc>
  }

  return status;
 800b316:	7dfb      	ldrb	r3, [r7, #23]
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3718      	adds	r7, #24
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}

0800b320 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b084      	sub	sp, #16
 800b324:	af00      	add	r7, sp, #0
 800b326:	60f8      	str	r0, [r7, #12]
 800b328:	607b      	str	r3, [r7, #4]
 800b32a:	460b      	mov	r3, r1
 800b32c:	72fb      	strb	r3, [r7, #11]
 800b32e:	4613      	mov	r3, r2
 800b330:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	789b      	ldrb	r3, [r3, #2]
 800b336:	2b01      	cmp	r3, #1
 800b338:	d11c      	bne.n	800b374 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b33a:	7afb      	ldrb	r3, [r7, #11]
 800b33c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b340:	b2da      	uxtb	r2, r3
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	2206      	movs	r2, #6
 800b34a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	893a      	ldrh	r2, [r7, #8]
 800b350:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b352:	893b      	ldrh	r3, [r7, #8]
 800b354:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b358:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b35c:	d104      	bne.n	800b368 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	f240 4209 	movw	r2, #1033	@ 0x409
 800b364:	829a      	strh	r2, [r3, #20]
 800b366:	e002      	b.n	800b36e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	2200      	movs	r2, #0
 800b36c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	8b3a      	ldrh	r2, [r7, #24]
 800b372:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b374:	8b3b      	ldrh	r3, [r7, #24]
 800b376:	461a      	mov	r2, r3
 800b378:	6879      	ldr	r1, [r7, #4]
 800b37a:	68f8      	ldr	r0, [r7, #12]
 800b37c:	f000 fba5 	bl	800baca <USBH_CtlReq>
 800b380:	4603      	mov	r3, r0
}
 800b382:	4618      	mov	r0, r3
 800b384:	3710      	adds	r7, #16
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}

0800b38a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b38a:	b580      	push	{r7, lr}
 800b38c:	b082      	sub	sp, #8
 800b38e:	af00      	add	r7, sp, #0
 800b390:	6078      	str	r0, [r7, #4]
 800b392:	460b      	mov	r3, r1
 800b394:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	789b      	ldrb	r3, [r3, #2]
 800b39a:	2b01      	cmp	r3, #1
 800b39c:	d10f      	bne.n	800b3be <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2205      	movs	r2, #5
 800b3a8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b3aa:	78fb      	ldrb	r3, [r7, #3]
 800b3ac:	b29a      	uxth	r2, r3
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b3be:	2200      	movs	r2, #0
 800b3c0:	2100      	movs	r1, #0
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f000 fb81 	bl	800baca <USBH_CtlReq>
 800b3c8:	4603      	mov	r3, r0
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3708      	adds	r7, #8
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}

0800b3d2 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b3d2:	b580      	push	{r7, lr}
 800b3d4:	b082      	sub	sp, #8
 800b3d6:	af00      	add	r7, sp, #0
 800b3d8:	6078      	str	r0, [r7, #4]
 800b3da:	460b      	mov	r3, r1
 800b3dc:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	789b      	ldrb	r3, [r3, #2]
 800b3e2:	2b01      	cmp	r3, #1
 800b3e4:	d10e      	bne.n	800b404 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2209      	movs	r2, #9
 800b3f0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	887a      	ldrh	r2, [r7, #2]
 800b3f6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2200      	movs	r2, #0
 800b402:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b404:	2200      	movs	r2, #0
 800b406:	2100      	movs	r1, #0
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f000 fb5e 	bl	800baca <USBH_CtlReq>
 800b40e:	4603      	mov	r3, r0
}
 800b410:	4618      	mov	r0, r3
 800b412:	3708      	adds	r7, #8
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}

0800b418 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b082      	sub	sp, #8
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	460b      	mov	r3, r1
 800b422:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	789b      	ldrb	r3, [r3, #2]
 800b428:	2b01      	cmp	r3, #1
 800b42a:	d10f      	bne.n	800b44c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2200      	movs	r2, #0
 800b430:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2203      	movs	r2, #3
 800b436:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b438:	78fb      	ldrb	r3, [r7, #3]
 800b43a:	b29a      	uxth	r2, r3
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2200      	movs	r2, #0
 800b444:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2200      	movs	r2, #0
 800b44a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b44c:	2200      	movs	r2, #0
 800b44e:	2100      	movs	r1, #0
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f000 fb3a 	bl	800baca <USBH_CtlReq>
 800b456:	4603      	mov	r3, r0
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3708      	adds	r7, #8
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}

0800b460 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b082      	sub	sp, #8
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
 800b468:	460b      	mov	r3, r1
 800b46a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	789b      	ldrb	r3, [r3, #2]
 800b470:	2b01      	cmp	r3, #1
 800b472:	d10f      	bne.n	800b494 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2202      	movs	r2, #2
 800b478:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2201      	movs	r2, #1
 800b47e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2200      	movs	r2, #0
 800b484:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b486:	78fb      	ldrb	r3, [r7, #3]
 800b488:	b29a      	uxth	r2, r3
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2200      	movs	r2, #0
 800b492:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b494:	2200      	movs	r2, #0
 800b496:	2100      	movs	r1, #0
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f000 fb16 	bl	800baca <USBH_CtlReq>
 800b49e:	4603      	mov	r3, r0
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3708      	adds	r7, #8
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}

0800b4a8 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b087      	sub	sp, #28
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	60f8      	str	r0, [r7, #12]
 800b4b0:	60b9      	str	r1, [r7, #8]
 800b4b2:	4613      	mov	r3, r2
 800b4b4:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800b4bc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d101      	bne.n	800b4cc <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800b4c8:	2302      	movs	r3, #2
 800b4ca:	e094      	b.n	800b5f6 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	781a      	ldrb	r2, [r3, #0]
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	785a      	ldrb	r2, [r3, #1]
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	3302      	adds	r3, #2
 800b4e0:	781b      	ldrb	r3, [r3, #0]
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	3303      	adds	r3, #3
 800b4e8:	781b      	ldrb	r3, [r3, #0]
 800b4ea:	021b      	lsls	r3, r3, #8
 800b4ec:	b29b      	uxth	r3, r3
 800b4ee:	4313      	orrs	r3, r2
 800b4f0:	b29a      	uxth	r2, r3
 800b4f2:	693b      	ldr	r3, [r7, #16]
 800b4f4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	791a      	ldrb	r2, [r3, #4]
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	795a      	ldrb	r2, [r3, #5]
 800b502:	693b      	ldr	r3, [r7, #16]
 800b504:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	799a      	ldrb	r2, [r3, #6]
 800b50a:	693b      	ldr	r3, [r7, #16]
 800b50c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	79da      	ldrb	r2, [r3, #7]
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d004      	beq.n	800b52a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800b526:	2b01      	cmp	r3, #1
 800b528:	d11b      	bne.n	800b562 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	79db      	ldrb	r3, [r3, #7]
 800b52e:	2b20      	cmp	r3, #32
 800b530:	dc0f      	bgt.n	800b552 <USBH_ParseDevDesc+0xaa>
 800b532:	2b08      	cmp	r3, #8
 800b534:	db0f      	blt.n	800b556 <USBH_ParseDevDesc+0xae>
 800b536:	3b08      	subs	r3, #8
 800b538:	4a32      	ldr	r2, [pc, #200]	@ (800b604 <USBH_ParseDevDesc+0x15c>)
 800b53a:	fa22 f303 	lsr.w	r3, r2, r3
 800b53e:	f003 0301 	and.w	r3, r3, #1
 800b542:	2b00      	cmp	r3, #0
 800b544:	bf14      	ite	ne
 800b546:	2301      	movne	r3, #1
 800b548:	2300      	moveq	r3, #0
 800b54a:	b2db      	uxtb	r3, r3
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d106      	bne.n	800b55e <USBH_ParseDevDesc+0xb6>
 800b550:	e001      	b.n	800b556 <USBH_ParseDevDesc+0xae>
 800b552:	2b40      	cmp	r3, #64	@ 0x40
 800b554:	d003      	beq.n	800b55e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	2208      	movs	r2, #8
 800b55a:	71da      	strb	r2, [r3, #7]
        break;
 800b55c:	e000      	b.n	800b560 <USBH_ParseDevDesc+0xb8>
        break;
 800b55e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800b560:	e00e      	b.n	800b580 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b568:	2b02      	cmp	r3, #2
 800b56a:	d107      	bne.n	800b57c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800b56c:	693b      	ldr	r3, [r7, #16]
 800b56e:	79db      	ldrb	r3, [r3, #7]
 800b570:	2b08      	cmp	r3, #8
 800b572:	d005      	beq.n	800b580 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	2208      	movs	r2, #8
 800b578:	71da      	strb	r2, [r3, #7]
 800b57a:	e001      	b.n	800b580 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800b57c:	2303      	movs	r3, #3
 800b57e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800b580:	88fb      	ldrh	r3, [r7, #6]
 800b582:	2b08      	cmp	r3, #8
 800b584:	d936      	bls.n	800b5f4 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	3308      	adds	r3, #8
 800b58a:	781b      	ldrb	r3, [r3, #0]
 800b58c:	461a      	mov	r2, r3
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	3309      	adds	r3, #9
 800b592:	781b      	ldrb	r3, [r3, #0]
 800b594:	021b      	lsls	r3, r3, #8
 800b596:	b29b      	uxth	r3, r3
 800b598:	4313      	orrs	r3, r2
 800b59a:	b29a      	uxth	r2, r3
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	330a      	adds	r3, #10
 800b5a4:	781b      	ldrb	r3, [r3, #0]
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	330b      	adds	r3, #11
 800b5ac:	781b      	ldrb	r3, [r3, #0]
 800b5ae:	021b      	lsls	r3, r3, #8
 800b5b0:	b29b      	uxth	r3, r3
 800b5b2:	4313      	orrs	r3, r2
 800b5b4:	b29a      	uxth	r2, r3
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	330c      	adds	r3, #12
 800b5be:	781b      	ldrb	r3, [r3, #0]
 800b5c0:	461a      	mov	r2, r3
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	330d      	adds	r3, #13
 800b5c6:	781b      	ldrb	r3, [r3, #0]
 800b5c8:	021b      	lsls	r3, r3, #8
 800b5ca:	b29b      	uxth	r3, r3
 800b5cc:	4313      	orrs	r3, r2
 800b5ce:	b29a      	uxth	r2, r3
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	7b9a      	ldrb	r2, [r3, #14]
 800b5d8:	693b      	ldr	r3, [r7, #16]
 800b5da:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	7bda      	ldrb	r2, [r3, #15]
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	7c1a      	ldrb	r2, [r3, #16]
 800b5e8:	693b      	ldr	r3, [r7, #16]
 800b5ea:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	7c5a      	ldrb	r2, [r3, #17]
 800b5f0:	693b      	ldr	r3, [r7, #16]
 800b5f2:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800b5f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	371c      	adds	r7, #28
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b600:	4770      	bx	lr
 800b602:	bf00      	nop
 800b604:	01000101 	.word	0x01000101

0800b608 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b08c      	sub	sp, #48	@ 0x30
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	60f8      	str	r0, [r7, #12]
 800b610:	60b9      	str	r1, [r7, #8]
 800b612:	4613      	mov	r3, r2
 800b614:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800b61c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800b61e:	2300      	movs	r3, #0
 800b620:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b624:	2300      	movs	r3, #0
 800b626:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800b62a:	2300      	movs	r3, #0
 800b62c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d101      	bne.n	800b63a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800b636:	2302      	movs	r3, #2
 800b638:	e0da      	b.n	800b7f0 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800b63e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b640:	781b      	ldrb	r3, [r3, #0]
 800b642:	2b09      	cmp	r3, #9
 800b644:	d002      	beq.n	800b64c <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800b646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b648:	2209      	movs	r2, #9
 800b64a:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	781a      	ldrb	r2, [r3, #0]
 800b650:	6a3b      	ldr	r3, [r7, #32]
 800b652:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	785a      	ldrb	r2, [r3, #1]
 800b658:	6a3b      	ldr	r3, [r7, #32]
 800b65a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	3302      	adds	r3, #2
 800b660:	781b      	ldrb	r3, [r3, #0]
 800b662:	461a      	mov	r2, r3
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	3303      	adds	r3, #3
 800b668:	781b      	ldrb	r3, [r3, #0]
 800b66a:	021b      	lsls	r3, r3, #8
 800b66c:	b29b      	uxth	r3, r3
 800b66e:	4313      	orrs	r3, r2
 800b670:	b29b      	uxth	r3, r3
 800b672:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b676:	bf28      	it	cs
 800b678:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800b67c:	b29a      	uxth	r2, r3
 800b67e:	6a3b      	ldr	r3, [r7, #32]
 800b680:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	791a      	ldrb	r2, [r3, #4]
 800b686:	6a3b      	ldr	r3, [r7, #32]
 800b688:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	795a      	ldrb	r2, [r3, #5]
 800b68e:	6a3b      	ldr	r3, [r7, #32]
 800b690:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	799a      	ldrb	r2, [r3, #6]
 800b696:	6a3b      	ldr	r3, [r7, #32]
 800b698:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	79da      	ldrb	r2, [r3, #7]
 800b69e:	6a3b      	ldr	r3, [r7, #32]
 800b6a0:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	7a1a      	ldrb	r2, [r3, #8]
 800b6a6:	6a3b      	ldr	r3, [r7, #32]
 800b6a8:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b6aa:	88fb      	ldrh	r3, [r7, #6]
 800b6ac:	2b09      	cmp	r3, #9
 800b6ae:	f240 809d 	bls.w	800b7ec <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800b6b2:	2309      	movs	r3, #9
 800b6b4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b6ba:	e081      	b.n	800b7c0 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b6bc:	f107 0316 	add.w	r3, r7, #22
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b6c4:	f000 f9e7 	bl	800ba96 <USBH_GetNextDesc>
 800b6c8:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800b6ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6cc:	785b      	ldrb	r3, [r3, #1]
 800b6ce:	2b04      	cmp	r3, #4
 800b6d0:	d176      	bne.n	800b7c0 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800b6d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6d4:	781b      	ldrb	r3, [r3, #0]
 800b6d6:	2b09      	cmp	r3, #9
 800b6d8:	d002      	beq.n	800b6e0 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800b6da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6dc:	2209      	movs	r2, #9
 800b6de:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800b6e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b6e4:	221a      	movs	r2, #26
 800b6e6:	fb02 f303 	mul.w	r3, r2, r3
 800b6ea:	3308      	adds	r3, #8
 800b6ec:	6a3a      	ldr	r2, [r7, #32]
 800b6ee:	4413      	add	r3, r2
 800b6f0:	3302      	adds	r3, #2
 800b6f2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b6f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b6f6:	69f8      	ldr	r0, [r7, #28]
 800b6f8:	f000 f87e 	bl	800b7f8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800b702:	2300      	movs	r3, #0
 800b704:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b706:	e043      	b.n	800b790 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b708:	f107 0316 	add.w	r3, r7, #22
 800b70c:	4619      	mov	r1, r3
 800b70e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b710:	f000 f9c1 	bl	800ba96 <USBH_GetNextDesc>
 800b714:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b718:	785b      	ldrb	r3, [r3, #1]
 800b71a:	2b05      	cmp	r3, #5
 800b71c:	d138      	bne.n	800b790 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800b71e:	69fb      	ldr	r3, [r7, #28]
 800b720:	795b      	ldrb	r3, [r3, #5]
 800b722:	2b01      	cmp	r3, #1
 800b724:	d113      	bne.n	800b74e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800b726:	69fb      	ldr	r3, [r7, #28]
 800b728:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800b72a:	2b02      	cmp	r3, #2
 800b72c:	d003      	beq.n	800b736 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800b72e:	69fb      	ldr	r3, [r7, #28]
 800b730:	799b      	ldrb	r3, [r3, #6]
 800b732:	2b03      	cmp	r3, #3
 800b734:	d10b      	bne.n	800b74e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b736:	69fb      	ldr	r3, [r7, #28]
 800b738:	79db      	ldrb	r3, [r3, #7]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d10b      	bne.n	800b756 <USBH_ParseCfgDesc+0x14e>
 800b73e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b740:	781b      	ldrb	r3, [r3, #0]
 800b742:	2b09      	cmp	r3, #9
 800b744:	d007      	beq.n	800b756 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800b746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b748:	2209      	movs	r2, #9
 800b74a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b74c:	e003      	b.n	800b756 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800b74e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b750:	2207      	movs	r2, #7
 800b752:	701a      	strb	r2, [r3, #0]
 800b754:	e000      	b.n	800b758 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b756:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b758:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b75c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b760:	3201      	adds	r2, #1
 800b762:	00d2      	lsls	r2, r2, #3
 800b764:	211a      	movs	r1, #26
 800b766:	fb01 f303 	mul.w	r3, r1, r3
 800b76a:	4413      	add	r3, r2
 800b76c:	3308      	adds	r3, #8
 800b76e:	6a3a      	ldr	r2, [r7, #32]
 800b770:	4413      	add	r3, r2
 800b772:	3304      	adds	r3, #4
 800b774:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800b776:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b778:	69b9      	ldr	r1, [r7, #24]
 800b77a:	68f8      	ldr	r0, [r7, #12]
 800b77c:	f000 f870 	bl	800b860 <USBH_ParseEPDesc>
 800b780:	4603      	mov	r3, r0
 800b782:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800b786:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b78a:	3301      	adds	r3, #1
 800b78c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b790:	69fb      	ldr	r3, [r7, #28]
 800b792:	791b      	ldrb	r3, [r3, #4]
 800b794:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b798:	429a      	cmp	r2, r3
 800b79a:	d204      	bcs.n	800b7a6 <USBH_ParseCfgDesc+0x19e>
 800b79c:	6a3b      	ldr	r3, [r7, #32]
 800b79e:	885a      	ldrh	r2, [r3, #2]
 800b7a0:	8afb      	ldrh	r3, [r7, #22]
 800b7a2:	429a      	cmp	r2, r3
 800b7a4:	d8b0      	bhi.n	800b708 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800b7a6:	69fb      	ldr	r3, [r7, #28]
 800b7a8:	791b      	ldrb	r3, [r3, #4]
 800b7aa:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b7ae:	429a      	cmp	r2, r3
 800b7b0:	d201      	bcs.n	800b7b6 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800b7b2:	2303      	movs	r3, #3
 800b7b4:	e01c      	b.n	800b7f0 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800b7b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b7ba:	3301      	adds	r3, #1
 800b7bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b7c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b7c4:	2b01      	cmp	r3, #1
 800b7c6:	d805      	bhi.n	800b7d4 <USBH_ParseCfgDesc+0x1cc>
 800b7c8:	6a3b      	ldr	r3, [r7, #32]
 800b7ca:	885a      	ldrh	r2, [r3, #2]
 800b7cc:	8afb      	ldrh	r3, [r7, #22]
 800b7ce:	429a      	cmp	r2, r3
 800b7d0:	f63f af74 	bhi.w	800b6bc <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800b7d4:	6a3b      	ldr	r3, [r7, #32]
 800b7d6:	791b      	ldrb	r3, [r3, #4]
 800b7d8:	2b02      	cmp	r3, #2
 800b7da:	bf28      	it	cs
 800b7dc:	2302      	movcs	r3, #2
 800b7de:	b2db      	uxtb	r3, r3
 800b7e0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	d201      	bcs.n	800b7ec <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800b7e8:	2303      	movs	r3, #3
 800b7ea:	e001      	b.n	800b7f0 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800b7ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3730      	adds	r7, #48	@ 0x30
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b083      	sub	sp, #12
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
 800b800:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	781a      	ldrb	r2, [r3, #0]
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	785a      	ldrb	r2, [r3, #1]
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	789a      	ldrb	r2, [r3, #2]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	78da      	ldrb	r2, [r3, #3]
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	3304      	adds	r3, #4
 800b826:	781b      	ldrb	r3, [r3, #0]
 800b828:	2b02      	cmp	r3, #2
 800b82a:	bf28      	it	cs
 800b82c:	2302      	movcs	r3, #2
 800b82e:	b2da      	uxtb	r2, r3
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	795a      	ldrb	r2, [r3, #5]
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	799a      	ldrb	r2, [r3, #6]
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	79da      	ldrb	r2, [r3, #7]
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	7a1a      	ldrb	r2, [r3, #8]
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	721a      	strb	r2, [r3, #8]
}
 800b854:	bf00      	nop
 800b856:	370c      	adds	r7, #12
 800b858:	46bd      	mov	sp, r7
 800b85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85e:	4770      	bx	lr

0800b860 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800b860:	b480      	push	{r7}
 800b862:	b087      	sub	sp, #28
 800b864:	af00      	add	r7, sp, #0
 800b866:	60f8      	str	r0, [r7, #12]
 800b868:	60b9      	str	r1, [r7, #8]
 800b86a:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800b86c:	2300      	movs	r3, #0
 800b86e:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	781a      	ldrb	r2, [r3, #0]
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	785a      	ldrb	r2, [r3, #1]
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	789a      	ldrb	r2, [r3, #2]
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	78da      	ldrb	r2, [r3, #3]
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	3304      	adds	r3, #4
 800b894:	781b      	ldrb	r3, [r3, #0]
 800b896:	461a      	mov	r2, r3
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	3305      	adds	r3, #5
 800b89c:	781b      	ldrb	r3, [r3, #0]
 800b89e:	021b      	lsls	r3, r3, #8
 800b8a0:	b29b      	uxth	r3, r3
 800b8a2:	4313      	orrs	r3, r2
 800b8a4:	b29a      	uxth	r2, r3
 800b8a6:	68bb      	ldr	r3, [r7, #8]
 800b8a8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	799a      	ldrb	r2, [r3, #6]
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	889b      	ldrh	r3, [r3, #4]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d009      	beq.n	800b8ce <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800b8be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b8c2:	d804      	bhi.n	800b8ce <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800b8c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b8cc:	d901      	bls.n	800b8d2 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800b8ce:	2303      	movs	r3, #3
 800b8d0:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d136      	bne.n	800b94a <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	78db      	ldrb	r3, [r3, #3]
 800b8e0:	f003 0303 	and.w	r3, r3, #3
 800b8e4:	2b02      	cmp	r3, #2
 800b8e6:	d108      	bne.n	800b8fa <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	889b      	ldrh	r3, [r3, #4]
 800b8ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b8f0:	f240 8097 	bls.w	800ba22 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b8f4:	2303      	movs	r3, #3
 800b8f6:	75fb      	strb	r3, [r7, #23]
 800b8f8:	e093      	b.n	800ba22 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	78db      	ldrb	r3, [r3, #3]
 800b8fe:	f003 0303 	and.w	r3, r3, #3
 800b902:	2b00      	cmp	r3, #0
 800b904:	d107      	bne.n	800b916 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	889b      	ldrh	r3, [r3, #4]
 800b90a:	2b40      	cmp	r3, #64	@ 0x40
 800b90c:	f240 8089 	bls.w	800ba22 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b910:	2303      	movs	r3, #3
 800b912:	75fb      	strb	r3, [r7, #23]
 800b914:	e085      	b.n	800ba22 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	78db      	ldrb	r3, [r3, #3]
 800b91a:	f003 0303 	and.w	r3, r3, #3
 800b91e:	2b01      	cmp	r3, #1
 800b920:	d005      	beq.n	800b92e <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	78db      	ldrb	r3, [r3, #3]
 800b926:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b92a:	2b03      	cmp	r3, #3
 800b92c:	d10a      	bne.n	800b944 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	799b      	ldrb	r3, [r3, #6]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d003      	beq.n	800b93e <USBH_ParseEPDesc+0xde>
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	799b      	ldrb	r3, [r3, #6]
 800b93a:	2b10      	cmp	r3, #16
 800b93c:	d970      	bls.n	800ba20 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800b93e:	2303      	movs	r3, #3
 800b940:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b942:	e06d      	b.n	800ba20 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b944:	2303      	movs	r3, #3
 800b946:	75fb      	strb	r3, [r7, #23]
 800b948:	e06b      	b.n	800ba22 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b950:	2b01      	cmp	r3, #1
 800b952:	d13c      	bne.n	800b9ce <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	78db      	ldrb	r3, [r3, #3]
 800b958:	f003 0303 	and.w	r3, r3, #3
 800b95c:	2b02      	cmp	r3, #2
 800b95e:	d005      	beq.n	800b96c <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	78db      	ldrb	r3, [r3, #3]
 800b964:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d106      	bne.n	800b97a <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	889b      	ldrh	r3, [r3, #4]
 800b970:	2b40      	cmp	r3, #64	@ 0x40
 800b972:	d956      	bls.n	800ba22 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b974:	2303      	movs	r3, #3
 800b976:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b978:	e053      	b.n	800ba22 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	78db      	ldrb	r3, [r3, #3]
 800b97e:	f003 0303 	and.w	r3, r3, #3
 800b982:	2b01      	cmp	r3, #1
 800b984:	d10e      	bne.n	800b9a4 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	799b      	ldrb	r3, [r3, #6]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d007      	beq.n	800b99e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800b992:	2b10      	cmp	r3, #16
 800b994:	d803      	bhi.n	800b99e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800b99a:	2b40      	cmp	r3, #64	@ 0x40
 800b99c:	d941      	bls.n	800ba22 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b99e:	2303      	movs	r3, #3
 800b9a0:	75fb      	strb	r3, [r7, #23]
 800b9a2:	e03e      	b.n	800ba22 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	78db      	ldrb	r3, [r3, #3]
 800b9a8:	f003 0303 	and.w	r3, r3, #3
 800b9ac:	2b03      	cmp	r3, #3
 800b9ae:	d10b      	bne.n	800b9c8 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	799b      	ldrb	r3, [r3, #6]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d004      	beq.n	800b9c2 <USBH_ParseEPDesc+0x162>
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	889b      	ldrh	r3, [r3, #4]
 800b9bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b9c0:	d32f      	bcc.n	800ba22 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b9c2:	2303      	movs	r3, #3
 800b9c4:	75fb      	strb	r3, [r7, #23]
 800b9c6:	e02c      	b.n	800ba22 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b9c8:	2303      	movs	r3, #3
 800b9ca:	75fb      	strb	r3, [r7, #23]
 800b9cc:	e029      	b.n	800ba22 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b9d4:	2b02      	cmp	r3, #2
 800b9d6:	d120      	bne.n	800ba1a <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	78db      	ldrb	r3, [r3, #3]
 800b9dc:	f003 0303 	and.w	r3, r3, #3
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d106      	bne.n	800b9f2 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	889b      	ldrh	r3, [r3, #4]
 800b9e8:	2b08      	cmp	r3, #8
 800b9ea:	d01a      	beq.n	800ba22 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b9ec:	2303      	movs	r3, #3
 800b9ee:	75fb      	strb	r3, [r7, #23]
 800b9f0:	e017      	b.n	800ba22 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	78db      	ldrb	r3, [r3, #3]
 800b9f6:	f003 0303 	and.w	r3, r3, #3
 800b9fa:	2b03      	cmp	r3, #3
 800b9fc:	d10a      	bne.n	800ba14 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	799b      	ldrb	r3, [r3, #6]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d003      	beq.n	800ba0e <USBH_ParseEPDesc+0x1ae>
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	889b      	ldrh	r3, [r3, #4]
 800ba0a:	2b08      	cmp	r3, #8
 800ba0c:	d909      	bls.n	800ba22 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ba0e:	2303      	movs	r3, #3
 800ba10:	75fb      	strb	r3, [r7, #23]
 800ba12:	e006      	b.n	800ba22 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800ba14:	2303      	movs	r3, #3
 800ba16:	75fb      	strb	r3, [r7, #23]
 800ba18:	e003      	b.n	800ba22 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800ba1a:	2303      	movs	r3, #3
 800ba1c:	75fb      	strb	r3, [r7, #23]
 800ba1e:	e000      	b.n	800ba22 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800ba20:	bf00      	nop
  }

  return status;
 800ba22:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	371c      	adds	r7, #28
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2e:	4770      	bx	lr

0800ba30 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800ba30:	b480      	push	{r7}
 800ba32:	b087      	sub	sp, #28
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	60f8      	str	r0, [r7, #12]
 800ba38:	60b9      	str	r1, [r7, #8]
 800ba3a:	4613      	mov	r3, r2
 800ba3c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	3301      	adds	r3, #1
 800ba42:	781b      	ldrb	r3, [r3, #0]
 800ba44:	2b03      	cmp	r3, #3
 800ba46:	d120      	bne.n	800ba8a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	781b      	ldrb	r3, [r3, #0]
 800ba4c:	1e9a      	subs	r2, r3, #2
 800ba4e:	88fb      	ldrh	r3, [r7, #6]
 800ba50:	4293      	cmp	r3, r2
 800ba52:	bf28      	it	cs
 800ba54:	4613      	movcs	r3, r2
 800ba56:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	3302      	adds	r3, #2
 800ba5c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800ba5e:	2300      	movs	r3, #0
 800ba60:	82fb      	strh	r3, [r7, #22]
 800ba62:	e00b      	b.n	800ba7c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800ba64:	8afb      	ldrh	r3, [r7, #22]
 800ba66:	68fa      	ldr	r2, [r7, #12]
 800ba68:	4413      	add	r3, r2
 800ba6a:	781a      	ldrb	r2, [r3, #0]
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	3301      	adds	r3, #1
 800ba74:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800ba76:	8afb      	ldrh	r3, [r7, #22]
 800ba78:	3302      	adds	r3, #2
 800ba7a:	82fb      	strh	r3, [r7, #22]
 800ba7c:	8afa      	ldrh	r2, [r7, #22]
 800ba7e:	8abb      	ldrh	r3, [r7, #20]
 800ba80:	429a      	cmp	r2, r3
 800ba82:	d3ef      	bcc.n	800ba64 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	2200      	movs	r2, #0
 800ba88:	701a      	strb	r2, [r3, #0]
  }
}
 800ba8a:	bf00      	nop
 800ba8c:	371c      	adds	r7, #28
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba94:	4770      	bx	lr

0800ba96 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ba96:	b480      	push	{r7}
 800ba98:	b085      	sub	sp, #20
 800ba9a:	af00      	add	r7, sp, #0
 800ba9c:	6078      	str	r0, [r7, #4]
 800ba9e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	881b      	ldrh	r3, [r3, #0]
 800baa4:	687a      	ldr	r2, [r7, #4]
 800baa6:	7812      	ldrb	r2, [r2, #0]
 800baa8:	4413      	add	r3, r2
 800baaa:	b29a      	uxth	r2, r3
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	781b      	ldrb	r3, [r3, #0]
 800bab4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	4413      	add	r3, r2
 800baba:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800babc:	68fb      	ldr	r3, [r7, #12]
}
 800babe:	4618      	mov	r0, r3
 800bac0:	3714      	adds	r7, #20
 800bac2:	46bd      	mov	sp, r7
 800bac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac8:	4770      	bx	lr

0800baca <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800baca:	b580      	push	{r7, lr}
 800bacc:	b086      	sub	sp, #24
 800bace:	af00      	add	r7, sp, #0
 800bad0:	60f8      	str	r0, [r7, #12]
 800bad2:	60b9      	str	r1, [r7, #8]
 800bad4:	4613      	mov	r3, r2
 800bad6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800bad8:	2301      	movs	r3, #1
 800bada:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	789b      	ldrb	r3, [r3, #2]
 800bae0:	2b01      	cmp	r3, #1
 800bae2:	d002      	beq.n	800baea <USBH_CtlReq+0x20>
 800bae4:	2b02      	cmp	r3, #2
 800bae6:	d00f      	beq.n	800bb08 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800bae8:	e027      	b.n	800bb3a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	68ba      	ldr	r2, [r7, #8]
 800baee:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	88fa      	ldrh	r2, [r7, #6]
 800baf4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	2201      	movs	r2, #1
 800bafa:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	2202      	movs	r2, #2
 800bb00:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800bb02:	2301      	movs	r3, #1
 800bb04:	75fb      	strb	r3, [r7, #23]
      break;
 800bb06:	e018      	b.n	800bb3a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800bb08:	68f8      	ldr	r0, [r7, #12]
 800bb0a:	f000 f81b 	bl	800bb44 <USBH_HandleControl>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800bb12:	7dfb      	ldrb	r3, [r7, #23]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d002      	beq.n	800bb1e <USBH_CtlReq+0x54>
 800bb18:	7dfb      	ldrb	r3, [r7, #23]
 800bb1a:	2b03      	cmp	r3, #3
 800bb1c:	d106      	bne.n	800bb2c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	2201      	movs	r2, #1
 800bb22:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	2200      	movs	r2, #0
 800bb28:	761a      	strb	r2, [r3, #24]
      break;
 800bb2a:	e005      	b.n	800bb38 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800bb2c:	7dfb      	ldrb	r3, [r7, #23]
 800bb2e:	2b02      	cmp	r3, #2
 800bb30:	d102      	bne.n	800bb38 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	2201      	movs	r2, #1
 800bb36:	709a      	strb	r2, [r3, #2]
      break;
 800bb38:	bf00      	nop
  }
  return status;
 800bb3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3718      	adds	r7, #24
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}

0800bb44 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b086      	sub	sp, #24
 800bb48:	af02      	add	r7, sp, #8
 800bb4a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bb50:	2300      	movs	r3, #0
 800bb52:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	7e1b      	ldrb	r3, [r3, #24]
 800bb58:	3b01      	subs	r3, #1
 800bb5a:	2b0a      	cmp	r3, #10
 800bb5c:	f200 8156 	bhi.w	800be0c <USBH_HandleControl+0x2c8>
 800bb60:	a201      	add	r2, pc, #4	@ (adr r2, 800bb68 <USBH_HandleControl+0x24>)
 800bb62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb66:	bf00      	nop
 800bb68:	0800bb95 	.word	0x0800bb95
 800bb6c:	0800bbaf 	.word	0x0800bbaf
 800bb70:	0800bc19 	.word	0x0800bc19
 800bb74:	0800bc3f 	.word	0x0800bc3f
 800bb78:	0800bc77 	.word	0x0800bc77
 800bb7c:	0800bca1 	.word	0x0800bca1
 800bb80:	0800bcf3 	.word	0x0800bcf3
 800bb84:	0800bd15 	.word	0x0800bd15
 800bb88:	0800bd51 	.word	0x0800bd51
 800bb8c:	0800bd77 	.word	0x0800bd77
 800bb90:	0800bdb5 	.word	0x0800bdb5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f103 0110 	add.w	r1, r3, #16
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	795b      	ldrb	r3, [r3, #5]
 800bb9e:	461a      	mov	r2, r3
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f000 f943 	bl	800be2c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2202      	movs	r2, #2
 800bbaa:	761a      	strb	r2, [r3, #24]
      break;
 800bbac:	e139      	b.n	800be22 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	795b      	ldrb	r3, [r3, #5]
 800bbb2:	4619      	mov	r1, r3
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f000 fcc5 	bl	800c544 <USBH_LL_GetURBState>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800bbbe:	7bbb      	ldrb	r3, [r7, #14]
 800bbc0:	2b01      	cmp	r3, #1
 800bbc2:	d11e      	bne.n	800bc02 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	7c1b      	ldrb	r3, [r3, #16]
 800bbc8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bbcc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	8adb      	ldrh	r3, [r3, #22]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d00a      	beq.n	800bbec <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800bbd6:	7b7b      	ldrb	r3, [r7, #13]
 800bbd8:	2b80      	cmp	r3, #128	@ 0x80
 800bbda:	d103      	bne.n	800bbe4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2203      	movs	r2, #3
 800bbe0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bbe2:	e115      	b.n	800be10 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2205      	movs	r2, #5
 800bbe8:	761a      	strb	r2, [r3, #24]
      break;
 800bbea:	e111      	b.n	800be10 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800bbec:	7b7b      	ldrb	r3, [r7, #13]
 800bbee:	2b80      	cmp	r3, #128	@ 0x80
 800bbf0:	d103      	bne.n	800bbfa <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2209      	movs	r2, #9
 800bbf6:	761a      	strb	r2, [r3, #24]
      break;
 800bbf8:	e10a      	b.n	800be10 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	2207      	movs	r2, #7
 800bbfe:	761a      	strb	r2, [r3, #24]
      break;
 800bc00:	e106      	b.n	800be10 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800bc02:	7bbb      	ldrb	r3, [r7, #14]
 800bc04:	2b04      	cmp	r3, #4
 800bc06:	d003      	beq.n	800bc10 <USBH_HandleControl+0xcc>
 800bc08:	7bbb      	ldrb	r3, [r7, #14]
 800bc0a:	2b02      	cmp	r3, #2
 800bc0c:	f040 8100 	bne.w	800be10 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	220b      	movs	r2, #11
 800bc14:	761a      	strb	r2, [r3, #24]
      break;
 800bc16:	e0fb      	b.n	800be10 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800bc1e:	b29a      	uxth	r2, r3
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	6899      	ldr	r1, [r3, #8]
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	899a      	ldrh	r2, [r3, #12]
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	791b      	ldrb	r3, [r3, #4]
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f000 f93a 	bl	800beaa <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2204      	movs	r2, #4
 800bc3a:	761a      	strb	r2, [r3, #24]
      break;
 800bc3c:	e0f1      	b.n	800be22 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	791b      	ldrb	r3, [r3, #4]
 800bc42:	4619      	mov	r1, r3
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f000 fc7d 	bl	800c544 <USBH_LL_GetURBState>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800bc4e:	7bbb      	ldrb	r3, [r7, #14]
 800bc50:	2b01      	cmp	r3, #1
 800bc52:	d102      	bne.n	800bc5a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2209      	movs	r2, #9
 800bc58:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800bc5a:	7bbb      	ldrb	r3, [r7, #14]
 800bc5c:	2b05      	cmp	r3, #5
 800bc5e:	d102      	bne.n	800bc66 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800bc60:	2303      	movs	r3, #3
 800bc62:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bc64:	e0d6      	b.n	800be14 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800bc66:	7bbb      	ldrb	r3, [r7, #14]
 800bc68:	2b04      	cmp	r3, #4
 800bc6a:	f040 80d3 	bne.w	800be14 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	220b      	movs	r2, #11
 800bc72:	761a      	strb	r2, [r3, #24]
      break;
 800bc74:	e0ce      	b.n	800be14 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6899      	ldr	r1, [r3, #8]
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	899a      	ldrh	r2, [r3, #12]
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	795b      	ldrb	r3, [r3, #5]
 800bc82:	2001      	movs	r0, #1
 800bc84:	9000      	str	r0, [sp, #0]
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f000 f8ea 	bl	800be60 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800bc92:	b29a      	uxth	r2, r3
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2206      	movs	r2, #6
 800bc9c:	761a      	strb	r2, [r3, #24]
      break;
 800bc9e:	e0c0      	b.n	800be22 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	795b      	ldrb	r3, [r3, #5]
 800bca4:	4619      	mov	r1, r3
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f000 fc4c 	bl	800c544 <USBH_LL_GetURBState>
 800bcac:	4603      	mov	r3, r0
 800bcae:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bcb0:	7bbb      	ldrb	r3, [r7, #14]
 800bcb2:	2b01      	cmp	r3, #1
 800bcb4:	d103      	bne.n	800bcbe <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	2207      	movs	r2, #7
 800bcba:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bcbc:	e0ac      	b.n	800be18 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800bcbe:	7bbb      	ldrb	r3, [r7, #14]
 800bcc0:	2b05      	cmp	r3, #5
 800bcc2:	d105      	bne.n	800bcd0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	220c      	movs	r2, #12
 800bcc8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800bcca:	2303      	movs	r3, #3
 800bccc:	73fb      	strb	r3, [r7, #15]
      break;
 800bcce:	e0a3      	b.n	800be18 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bcd0:	7bbb      	ldrb	r3, [r7, #14]
 800bcd2:	2b02      	cmp	r3, #2
 800bcd4:	d103      	bne.n	800bcde <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2205      	movs	r2, #5
 800bcda:	761a      	strb	r2, [r3, #24]
      break;
 800bcdc:	e09c      	b.n	800be18 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800bcde:	7bbb      	ldrb	r3, [r7, #14]
 800bce0:	2b04      	cmp	r3, #4
 800bce2:	f040 8099 	bne.w	800be18 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	220b      	movs	r2, #11
 800bcea:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800bcec:	2302      	movs	r3, #2
 800bcee:	73fb      	strb	r3, [r7, #15]
      break;
 800bcf0:	e092      	b.n	800be18 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	791b      	ldrb	r3, [r3, #4]
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	2100      	movs	r1, #0
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f000 f8d5 	bl	800beaa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800bd06:	b29a      	uxth	r2, r3
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2208      	movs	r2, #8
 800bd10:	761a      	strb	r2, [r3, #24]

      break;
 800bd12:	e086      	b.n	800be22 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	791b      	ldrb	r3, [r3, #4]
 800bd18:	4619      	mov	r1, r3
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f000 fc12 	bl	800c544 <USBH_LL_GetURBState>
 800bd20:	4603      	mov	r3, r0
 800bd22:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bd24:	7bbb      	ldrb	r3, [r7, #14]
 800bd26:	2b01      	cmp	r3, #1
 800bd28:	d105      	bne.n	800bd36 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	220d      	movs	r2, #13
 800bd2e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800bd30:	2300      	movs	r3, #0
 800bd32:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bd34:	e072      	b.n	800be1c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800bd36:	7bbb      	ldrb	r3, [r7, #14]
 800bd38:	2b04      	cmp	r3, #4
 800bd3a:	d103      	bne.n	800bd44 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	220b      	movs	r2, #11
 800bd40:	761a      	strb	r2, [r3, #24]
      break;
 800bd42:	e06b      	b.n	800be1c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800bd44:	7bbb      	ldrb	r3, [r7, #14]
 800bd46:	2b05      	cmp	r3, #5
 800bd48:	d168      	bne.n	800be1c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800bd4a:	2303      	movs	r3, #3
 800bd4c:	73fb      	strb	r3, [r7, #15]
      break;
 800bd4e:	e065      	b.n	800be1c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	795b      	ldrb	r3, [r3, #5]
 800bd54:	2201      	movs	r2, #1
 800bd56:	9200      	str	r2, [sp, #0]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	2100      	movs	r1, #0
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f000 f87f 	bl	800be60 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800bd68:	b29a      	uxth	r2, r3
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	220a      	movs	r2, #10
 800bd72:	761a      	strb	r2, [r3, #24]
      break;
 800bd74:	e055      	b.n	800be22 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	795b      	ldrb	r3, [r3, #5]
 800bd7a:	4619      	mov	r1, r3
 800bd7c:	6878      	ldr	r0, [r7, #4]
 800bd7e:	f000 fbe1 	bl	800c544 <USBH_LL_GetURBState>
 800bd82:	4603      	mov	r3, r0
 800bd84:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800bd86:	7bbb      	ldrb	r3, [r7, #14]
 800bd88:	2b01      	cmp	r3, #1
 800bd8a:	d105      	bne.n	800bd98 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	220d      	movs	r2, #13
 800bd94:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bd96:	e043      	b.n	800be20 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bd98:	7bbb      	ldrb	r3, [r7, #14]
 800bd9a:	2b02      	cmp	r3, #2
 800bd9c:	d103      	bne.n	800bda6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2209      	movs	r2, #9
 800bda2:	761a      	strb	r2, [r3, #24]
      break;
 800bda4:	e03c      	b.n	800be20 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800bda6:	7bbb      	ldrb	r3, [r7, #14]
 800bda8:	2b04      	cmp	r3, #4
 800bdaa:	d139      	bne.n	800be20 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	220b      	movs	r2, #11
 800bdb0:	761a      	strb	r2, [r3, #24]
      break;
 800bdb2:	e035      	b.n	800be20 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	7e5b      	ldrb	r3, [r3, #25]
 800bdb8:	3301      	adds	r3, #1
 800bdba:	b2da      	uxtb	r2, r3
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	765a      	strb	r2, [r3, #25]
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	7e5b      	ldrb	r3, [r3, #25]
 800bdc4:	2b02      	cmp	r3, #2
 800bdc6:	d806      	bhi.n	800bdd6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2201      	movs	r2, #1
 800bdcc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2201      	movs	r2, #1
 800bdd2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800bdd4:	e025      	b.n	800be22 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800bddc:	2106      	movs	r1, #6
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2200      	movs	r2, #0
 800bde6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	795b      	ldrb	r3, [r3, #5]
 800bdec:	4619      	mov	r1, r3
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f000 f90c 	bl	800c00c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	791b      	ldrb	r3, [r3, #4]
 800bdf8:	4619      	mov	r1, r3
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f000 f906 	bl	800c00c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2200      	movs	r2, #0
 800be04:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800be06:	2302      	movs	r3, #2
 800be08:	73fb      	strb	r3, [r7, #15]
      break;
 800be0a:	e00a      	b.n	800be22 <USBH_HandleControl+0x2de>

    default:
      break;
 800be0c:	bf00      	nop
 800be0e:	e008      	b.n	800be22 <USBH_HandleControl+0x2de>
      break;
 800be10:	bf00      	nop
 800be12:	e006      	b.n	800be22 <USBH_HandleControl+0x2de>
      break;
 800be14:	bf00      	nop
 800be16:	e004      	b.n	800be22 <USBH_HandleControl+0x2de>
      break;
 800be18:	bf00      	nop
 800be1a:	e002      	b.n	800be22 <USBH_HandleControl+0x2de>
      break;
 800be1c:	bf00      	nop
 800be1e:	e000      	b.n	800be22 <USBH_HandleControl+0x2de>
      break;
 800be20:	bf00      	nop
  }

  return status;
 800be22:	7bfb      	ldrb	r3, [r7, #15]
}
 800be24:	4618      	mov	r0, r3
 800be26:	3710      	adds	r7, #16
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}

0800be2c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b088      	sub	sp, #32
 800be30:	af04      	add	r7, sp, #16
 800be32:	60f8      	str	r0, [r7, #12]
 800be34:	60b9      	str	r1, [r7, #8]
 800be36:	4613      	mov	r3, r2
 800be38:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800be3a:	79f9      	ldrb	r1, [r7, #7]
 800be3c:	2300      	movs	r3, #0
 800be3e:	9303      	str	r3, [sp, #12]
 800be40:	2308      	movs	r3, #8
 800be42:	9302      	str	r3, [sp, #8]
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	9301      	str	r3, [sp, #4]
 800be48:	2300      	movs	r3, #0
 800be4a:	9300      	str	r3, [sp, #0]
 800be4c:	2300      	movs	r3, #0
 800be4e:	2200      	movs	r2, #0
 800be50:	68f8      	ldr	r0, [r7, #12]
 800be52:	f000 fb46 	bl	800c4e2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800be56:	2300      	movs	r3, #0
}
 800be58:	4618      	mov	r0, r3
 800be5a:	3710      	adds	r7, #16
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}

0800be60 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b088      	sub	sp, #32
 800be64:	af04      	add	r7, sp, #16
 800be66:	60f8      	str	r0, [r7, #12]
 800be68:	60b9      	str	r1, [r7, #8]
 800be6a:	4611      	mov	r1, r2
 800be6c:	461a      	mov	r2, r3
 800be6e:	460b      	mov	r3, r1
 800be70:	80fb      	strh	r3, [r7, #6]
 800be72:	4613      	mov	r3, r2
 800be74:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d001      	beq.n	800be84 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800be80:	2300      	movs	r3, #0
 800be82:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800be84:	7979      	ldrb	r1, [r7, #5]
 800be86:	7e3b      	ldrb	r3, [r7, #24]
 800be88:	9303      	str	r3, [sp, #12]
 800be8a:	88fb      	ldrh	r3, [r7, #6]
 800be8c:	9302      	str	r3, [sp, #8]
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	9301      	str	r3, [sp, #4]
 800be92:	2301      	movs	r3, #1
 800be94:	9300      	str	r3, [sp, #0]
 800be96:	2300      	movs	r3, #0
 800be98:	2200      	movs	r2, #0
 800be9a:	68f8      	ldr	r0, [r7, #12]
 800be9c:	f000 fb21 	bl	800c4e2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800bea0:	2300      	movs	r3, #0
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	3710      	adds	r7, #16
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}

0800beaa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800beaa:	b580      	push	{r7, lr}
 800beac:	b088      	sub	sp, #32
 800beae:	af04      	add	r7, sp, #16
 800beb0:	60f8      	str	r0, [r7, #12]
 800beb2:	60b9      	str	r1, [r7, #8]
 800beb4:	4611      	mov	r1, r2
 800beb6:	461a      	mov	r2, r3
 800beb8:	460b      	mov	r3, r1
 800beba:	80fb      	strh	r3, [r7, #6]
 800bebc:	4613      	mov	r3, r2
 800bebe:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bec0:	7979      	ldrb	r1, [r7, #5]
 800bec2:	2300      	movs	r3, #0
 800bec4:	9303      	str	r3, [sp, #12]
 800bec6:	88fb      	ldrh	r3, [r7, #6]
 800bec8:	9302      	str	r3, [sp, #8]
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	9301      	str	r3, [sp, #4]
 800bece:	2301      	movs	r3, #1
 800bed0:	9300      	str	r3, [sp, #0]
 800bed2:	2300      	movs	r3, #0
 800bed4:	2201      	movs	r2, #1
 800bed6:	68f8      	ldr	r0, [r7, #12]
 800bed8:	f000 fb03 	bl	800c4e2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800bedc:	2300      	movs	r3, #0

}
 800bede:	4618      	mov	r0, r3
 800bee0:	3710      	adds	r7, #16
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}

0800bee6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800bee6:	b580      	push	{r7, lr}
 800bee8:	b088      	sub	sp, #32
 800beea:	af04      	add	r7, sp, #16
 800beec:	60f8      	str	r0, [r7, #12]
 800beee:	60b9      	str	r1, [r7, #8]
 800bef0:	4611      	mov	r1, r2
 800bef2:	461a      	mov	r2, r3
 800bef4:	460b      	mov	r3, r1
 800bef6:	80fb      	strh	r3, [r7, #6]
 800bef8:	4613      	mov	r3, r2
 800befa:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d001      	beq.n	800bf0a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800bf06:	2300      	movs	r3, #0
 800bf08:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bf0a:	7979      	ldrb	r1, [r7, #5]
 800bf0c:	7e3b      	ldrb	r3, [r7, #24]
 800bf0e:	9303      	str	r3, [sp, #12]
 800bf10:	88fb      	ldrh	r3, [r7, #6]
 800bf12:	9302      	str	r3, [sp, #8]
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	9301      	str	r3, [sp, #4]
 800bf18:	2301      	movs	r3, #1
 800bf1a:	9300      	str	r3, [sp, #0]
 800bf1c:	2302      	movs	r3, #2
 800bf1e:	2200      	movs	r2, #0
 800bf20:	68f8      	ldr	r0, [r7, #12]
 800bf22:	f000 fade 	bl	800c4e2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800bf26:	2300      	movs	r3, #0
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3710      	adds	r7, #16
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}

0800bf30 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b088      	sub	sp, #32
 800bf34:	af04      	add	r7, sp, #16
 800bf36:	60f8      	str	r0, [r7, #12]
 800bf38:	60b9      	str	r1, [r7, #8]
 800bf3a:	4611      	mov	r1, r2
 800bf3c:	461a      	mov	r2, r3
 800bf3e:	460b      	mov	r3, r1
 800bf40:	80fb      	strh	r3, [r7, #6]
 800bf42:	4613      	mov	r3, r2
 800bf44:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bf46:	7979      	ldrb	r1, [r7, #5]
 800bf48:	2300      	movs	r3, #0
 800bf4a:	9303      	str	r3, [sp, #12]
 800bf4c:	88fb      	ldrh	r3, [r7, #6]
 800bf4e:	9302      	str	r3, [sp, #8]
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	9301      	str	r3, [sp, #4]
 800bf54:	2301      	movs	r3, #1
 800bf56:	9300      	str	r3, [sp, #0]
 800bf58:	2302      	movs	r3, #2
 800bf5a:	2201      	movs	r2, #1
 800bf5c:	68f8      	ldr	r0, [r7, #12]
 800bf5e:	f000 fac0 	bl	800c4e2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800bf62:	2300      	movs	r3, #0
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	3710      	adds	r7, #16
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}

0800bf6c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b086      	sub	sp, #24
 800bf70:	af04      	add	r7, sp, #16
 800bf72:	6078      	str	r0, [r7, #4]
 800bf74:	4608      	mov	r0, r1
 800bf76:	4611      	mov	r1, r2
 800bf78:	461a      	mov	r2, r3
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	70fb      	strb	r3, [r7, #3]
 800bf7e:	460b      	mov	r3, r1
 800bf80:	70bb      	strb	r3, [r7, #2]
 800bf82:	4613      	mov	r3, r2
 800bf84:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800bf86:	7878      	ldrb	r0, [r7, #1]
 800bf88:	78ba      	ldrb	r2, [r7, #2]
 800bf8a:	78f9      	ldrb	r1, [r7, #3]
 800bf8c:	8b3b      	ldrh	r3, [r7, #24]
 800bf8e:	9302      	str	r3, [sp, #8]
 800bf90:	7d3b      	ldrb	r3, [r7, #20]
 800bf92:	9301      	str	r3, [sp, #4]
 800bf94:	7c3b      	ldrb	r3, [r7, #16]
 800bf96:	9300      	str	r3, [sp, #0]
 800bf98:	4603      	mov	r3, r0
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f000 fa53 	bl	800c446 <USBH_LL_OpenPipe>

  return USBH_OK;
 800bfa0:	2300      	movs	r3, #0
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3708      	adds	r7, #8
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}

0800bfaa <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800bfaa:	b580      	push	{r7, lr}
 800bfac:	b082      	sub	sp, #8
 800bfae:	af00      	add	r7, sp, #0
 800bfb0:	6078      	str	r0, [r7, #4]
 800bfb2:	460b      	mov	r3, r1
 800bfb4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800bfb6:	78fb      	ldrb	r3, [r7, #3]
 800bfb8:	4619      	mov	r1, r3
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f000 fa72 	bl	800c4a4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800bfc0:	2300      	movs	r3, #0
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	3708      	adds	r7, #8
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}

0800bfca <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800bfca:	b580      	push	{r7, lr}
 800bfcc:	b084      	sub	sp, #16
 800bfce:	af00      	add	r7, sp, #0
 800bfd0:	6078      	str	r0, [r7, #4]
 800bfd2:	460b      	mov	r3, r1
 800bfd4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f000 f836 	bl	800c048 <USBH_GetFreePipe>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800bfe0:	89fb      	ldrh	r3, [r7, #14]
 800bfe2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bfe6:	4293      	cmp	r3, r2
 800bfe8:	d00a      	beq.n	800c000 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800bfea:	78fa      	ldrb	r2, [r7, #3]
 800bfec:	89fb      	ldrh	r3, [r7, #14]
 800bfee:	f003 030f 	and.w	r3, r3, #15
 800bff2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bff6:	6879      	ldr	r1, [r7, #4]
 800bff8:	33e0      	adds	r3, #224	@ 0xe0
 800bffa:	009b      	lsls	r3, r3, #2
 800bffc:	440b      	add	r3, r1
 800bffe:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c000:	89fb      	ldrh	r3, [r7, #14]
 800c002:	b2db      	uxtb	r3, r3
}
 800c004:	4618      	mov	r0, r3
 800c006:	3710      	adds	r7, #16
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}

0800c00c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c00c:	b480      	push	{r7}
 800c00e:	b083      	sub	sp, #12
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
 800c014:	460b      	mov	r3, r1
 800c016:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800c018:	78fb      	ldrb	r3, [r7, #3]
 800c01a:	2b0f      	cmp	r3, #15
 800c01c:	d80d      	bhi.n	800c03a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c01e:	78fb      	ldrb	r3, [r7, #3]
 800c020:	687a      	ldr	r2, [r7, #4]
 800c022:	33e0      	adds	r3, #224	@ 0xe0
 800c024:	009b      	lsls	r3, r3, #2
 800c026:	4413      	add	r3, r2
 800c028:	685a      	ldr	r2, [r3, #4]
 800c02a:	78fb      	ldrb	r3, [r7, #3]
 800c02c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c030:	6879      	ldr	r1, [r7, #4]
 800c032:	33e0      	adds	r3, #224	@ 0xe0
 800c034:	009b      	lsls	r3, r3, #2
 800c036:	440b      	add	r3, r1
 800c038:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c03a:	2300      	movs	r3, #0
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	370c      	adds	r7, #12
 800c040:	46bd      	mov	sp, r7
 800c042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c046:	4770      	bx	lr

0800c048 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c048:	b480      	push	{r7}
 800c04a:	b085      	sub	sp, #20
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c050:	2300      	movs	r3, #0
 800c052:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800c054:	2300      	movs	r3, #0
 800c056:	73fb      	strb	r3, [r7, #15]
 800c058:	e00f      	b.n	800c07a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c05a:	7bfb      	ldrb	r3, [r7, #15]
 800c05c:	687a      	ldr	r2, [r7, #4]
 800c05e:	33e0      	adds	r3, #224	@ 0xe0
 800c060:	009b      	lsls	r3, r3, #2
 800c062:	4413      	add	r3, r2
 800c064:	685b      	ldr	r3, [r3, #4]
 800c066:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d102      	bne.n	800c074 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c06e:	7bfb      	ldrb	r3, [r7, #15]
 800c070:	b29b      	uxth	r3, r3
 800c072:	e007      	b.n	800c084 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800c074:	7bfb      	ldrb	r3, [r7, #15]
 800c076:	3301      	adds	r3, #1
 800c078:	73fb      	strb	r3, [r7, #15]
 800c07a:	7bfb      	ldrb	r3, [r7, #15]
 800c07c:	2b0f      	cmp	r3, #15
 800c07e:	d9ec      	bls.n	800c05a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c080:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800c084:	4618      	mov	r0, r3
 800c086:	3714      	adds	r7, #20
 800c088:	46bd      	mov	sp, r7
 800c08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08e:	4770      	bx	lr

0800c090 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c094:	2201      	movs	r2, #1
 800c096:	490e      	ldr	r1, [pc, #56]	@ (800c0d0 <MX_USB_HOST_Init+0x40>)
 800c098:	480e      	ldr	r0, [pc, #56]	@ (800c0d4 <MX_USB_HOST_Init+0x44>)
 800c09a:	f7fe fb15 	bl	800a6c8 <USBH_Init>
 800c09e:	4603      	mov	r3, r0
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d001      	beq.n	800c0a8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c0a4:	f7f5 ff20 	bl	8001ee8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800c0a8:	490b      	ldr	r1, [pc, #44]	@ (800c0d8 <MX_USB_HOST_Init+0x48>)
 800c0aa:	480a      	ldr	r0, [pc, #40]	@ (800c0d4 <MX_USB_HOST_Init+0x44>)
 800c0ac:	f7fe fbb9 	bl	800a822 <USBH_RegisterClass>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d001      	beq.n	800c0ba <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c0b6:	f7f5 ff17 	bl	8001ee8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c0ba:	4806      	ldr	r0, [pc, #24]	@ (800c0d4 <MX_USB_HOST_Init+0x44>)
 800c0bc:	f7fe fc3d 	bl	800a93a <USBH_Start>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d001      	beq.n	800c0ca <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c0c6:	f7f5 ff0f 	bl	8001ee8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c0ca:	bf00      	nop
 800c0cc:	bd80      	pop	{r7, pc}
 800c0ce:	bf00      	nop
 800c0d0:	0800c0f1 	.word	0x0800c0f1
 800c0d4:	200035e8 	.word	0x200035e8
 800c0d8:	2000001c 	.word	0x2000001c

0800c0dc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800c0e0:	4802      	ldr	r0, [pc, #8]	@ (800c0ec <MX_USB_HOST_Process+0x10>)
 800c0e2:	f7fe fc3b 	bl	800a95c <USBH_Process>
}
 800c0e6:	bf00      	nop
 800c0e8:	bd80      	pop	{r7, pc}
 800c0ea:	bf00      	nop
 800c0ec:	200035e8 	.word	0x200035e8

0800c0f0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	b083      	sub	sp, #12
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
 800c0f8:	460b      	mov	r3, r1
 800c0fa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c0fc:	78fb      	ldrb	r3, [r7, #3]
 800c0fe:	3b01      	subs	r3, #1
 800c100:	2b04      	cmp	r3, #4
 800c102:	d819      	bhi.n	800c138 <USBH_UserProcess+0x48>
 800c104:	a201      	add	r2, pc, #4	@ (adr r2, 800c10c <USBH_UserProcess+0x1c>)
 800c106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c10a:	bf00      	nop
 800c10c:	0800c139 	.word	0x0800c139
 800c110:	0800c129 	.word	0x0800c129
 800c114:	0800c139 	.word	0x0800c139
 800c118:	0800c131 	.word	0x0800c131
 800c11c:	0800c121 	.word	0x0800c121
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c120:	4b09      	ldr	r3, [pc, #36]	@ (800c148 <USBH_UserProcess+0x58>)
 800c122:	2203      	movs	r2, #3
 800c124:	701a      	strb	r2, [r3, #0]
  break;
 800c126:	e008      	b.n	800c13a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c128:	4b07      	ldr	r3, [pc, #28]	@ (800c148 <USBH_UserProcess+0x58>)
 800c12a:	2202      	movs	r2, #2
 800c12c:	701a      	strb	r2, [r3, #0]
  break;
 800c12e:	e004      	b.n	800c13a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c130:	4b05      	ldr	r3, [pc, #20]	@ (800c148 <USBH_UserProcess+0x58>)
 800c132:	2201      	movs	r2, #1
 800c134:	701a      	strb	r2, [r3, #0]
  break;
 800c136:	e000      	b.n	800c13a <USBH_UserProcess+0x4a>

  default:
  break;
 800c138:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c13a:	bf00      	nop
 800c13c:	370c      	adds	r7, #12
 800c13e:	46bd      	mov	sp, r7
 800c140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c144:	4770      	bx	lr
 800c146:	bf00      	nop
 800c148:	200039c0 	.word	0x200039c0

0800c14c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b08a      	sub	sp, #40	@ 0x28
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c154:	f107 0314 	add.w	r3, r7, #20
 800c158:	2200      	movs	r2, #0
 800c15a:	601a      	str	r2, [r3, #0]
 800c15c:	605a      	str	r2, [r3, #4]
 800c15e:	609a      	str	r2, [r3, #8]
 800c160:	60da      	str	r2, [r3, #12]
 800c162:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c16c:	d147      	bne.n	800c1fe <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c16e:	2300      	movs	r3, #0
 800c170:	613b      	str	r3, [r7, #16]
 800c172:	4b25      	ldr	r3, [pc, #148]	@ (800c208 <HAL_HCD_MspInit+0xbc>)
 800c174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c176:	4a24      	ldr	r2, [pc, #144]	@ (800c208 <HAL_HCD_MspInit+0xbc>)
 800c178:	f043 0301 	orr.w	r3, r3, #1
 800c17c:	6313      	str	r3, [r2, #48]	@ 0x30
 800c17e:	4b22      	ldr	r3, [pc, #136]	@ (800c208 <HAL_HCD_MspInit+0xbc>)
 800c180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c182:	f003 0301 	and.w	r3, r3, #1
 800c186:	613b      	str	r3, [r7, #16]
 800c188:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800c18a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c18e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c190:	2300      	movs	r3, #0
 800c192:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c194:	2300      	movs	r3, #0
 800c196:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800c198:	f107 0314 	add.w	r3, r7, #20
 800c19c:	4619      	mov	r1, r3
 800c19e:	481b      	ldr	r0, [pc, #108]	@ (800c20c <HAL_HCD_MspInit+0xc0>)
 800c1a0:	f7f7 fa42 	bl	8003628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c1a4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800c1a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c1aa:	2302      	movs	r3, #2
 800c1ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c1b6:	230a      	movs	r3, #10
 800c1b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c1ba:	f107 0314 	add.w	r3, r7, #20
 800c1be:	4619      	mov	r1, r3
 800c1c0:	4812      	ldr	r0, [pc, #72]	@ (800c20c <HAL_HCD_MspInit+0xc0>)
 800c1c2:	f7f7 fa31 	bl	8003628 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c1c6:	4b10      	ldr	r3, [pc, #64]	@ (800c208 <HAL_HCD_MspInit+0xbc>)
 800c1c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1ca:	4a0f      	ldr	r2, [pc, #60]	@ (800c208 <HAL_HCD_MspInit+0xbc>)
 800c1cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1d0:	6353      	str	r3, [r2, #52]	@ 0x34
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	60fb      	str	r3, [r7, #12]
 800c1d6:	4b0c      	ldr	r3, [pc, #48]	@ (800c208 <HAL_HCD_MspInit+0xbc>)
 800c1d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1da:	4a0b      	ldr	r2, [pc, #44]	@ (800c208 <HAL_HCD_MspInit+0xbc>)
 800c1dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c1e0:	6453      	str	r3, [r2, #68]	@ 0x44
 800c1e2:	4b09      	ldr	r3, [pc, #36]	@ (800c208 <HAL_HCD_MspInit+0xbc>)
 800c1e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c1ea:	60fb      	str	r3, [r7, #12]
 800c1ec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	2100      	movs	r1, #0
 800c1f2:	2043      	movs	r0, #67	@ 0x43
 800c1f4:	f7f6 fe71 	bl	8002eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c1f8:	2043      	movs	r0, #67	@ 0x43
 800c1fa:	f7f6 fe8a 	bl	8002f12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c1fe:	bf00      	nop
 800c200:	3728      	adds	r7, #40	@ 0x28
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}
 800c206:	bf00      	nop
 800c208:	40023800 	.word	0x40023800
 800c20c:	40020000 	.word	0x40020000

0800c210 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b082      	sub	sp, #8
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c21e:	4618      	mov	r0, r3
 800c220:	f7fe ff73 	bl	800b10a <USBH_LL_IncTimer>
}
 800c224:	bf00      	nop
 800c226:	3708      	adds	r7, #8
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}

0800c22c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b082      	sub	sp, #8
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c23a:	4618      	mov	r0, r3
 800c23c:	f7fe ffab 	bl	800b196 <USBH_LL_Connect>
}
 800c240:	bf00      	nop
 800c242:	3708      	adds	r7, #8
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}

0800c248 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b082      	sub	sp, #8
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c256:	4618      	mov	r0, r3
 800c258:	f7fe ffb4 	bl	800b1c4 <USBH_LL_Disconnect>
}
 800c25c:	bf00      	nop
 800c25e:	3708      	adds	r7, #8
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}

0800c264 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c264:	b480      	push	{r7}
 800c266:	b083      	sub	sp, #12
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
 800c26c:	460b      	mov	r3, r1
 800c26e:	70fb      	strb	r3, [r7, #3]
 800c270:	4613      	mov	r3, r2
 800c272:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800c274:	bf00      	nop
 800c276:	370c      	adds	r7, #12
 800c278:	46bd      	mov	sp, r7
 800c27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27e:	4770      	bx	lr

0800c280 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b082      	sub	sp, #8
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c28e:	4618      	mov	r0, r3
 800c290:	f7fe ff65 	bl	800b15e <USBH_LL_PortEnabled>
}
 800c294:	bf00      	nop
 800c296:	3708      	adds	r7, #8
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}

0800c29c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b082      	sub	sp, #8
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f7fe ff65 	bl	800b17a <USBH_LL_PortDisabled>
}
 800c2b0:	bf00      	nop
 800c2b2:	3708      	adds	r7, #8
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}

0800c2b8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b082      	sub	sp, #8
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800c2c6:	2b01      	cmp	r3, #1
 800c2c8:	d12a      	bne.n	800c320 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c2ca:	4a18      	ldr	r2, [pc, #96]	@ (800c32c <USBH_LL_Init+0x74>)
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	4a15      	ldr	r2, [pc, #84]	@ (800c32c <USBH_LL_Init+0x74>)
 800c2d6:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c2da:	4b14      	ldr	r3, [pc, #80]	@ (800c32c <USBH_LL_Init+0x74>)
 800c2dc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c2e0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800c2e2:	4b12      	ldr	r3, [pc, #72]	@ (800c32c <USBH_LL_Init+0x74>)
 800c2e4:	2208      	movs	r2, #8
 800c2e6:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c2e8:	4b10      	ldr	r3, [pc, #64]	@ (800c32c <USBH_LL_Init+0x74>)
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c2ee:	4b0f      	ldr	r3, [pc, #60]	@ (800c32c <USBH_LL_Init+0x74>)
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c2f4:	4b0d      	ldr	r3, [pc, #52]	@ (800c32c <USBH_LL_Init+0x74>)
 800c2f6:	2202      	movs	r2, #2
 800c2f8:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c2fa:	4b0c      	ldr	r3, [pc, #48]	@ (800c32c <USBH_LL_Init+0x74>)
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c300:	480a      	ldr	r0, [pc, #40]	@ (800c32c <USBH_LL_Init+0x74>)
 800c302:	f7f7 fb46 	bl	8003992 <HAL_HCD_Init>
 800c306:	4603      	mov	r3, r0
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d001      	beq.n	800c310 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c30c:	f7f5 fdec 	bl	8001ee8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c310:	4806      	ldr	r0, [pc, #24]	@ (800c32c <USBH_LL_Init+0x74>)
 800c312:	f7f7 ffa7 	bl	8004264 <HAL_HCD_GetCurrentFrame>
 800c316:	4603      	mov	r3, r0
 800c318:	4619      	mov	r1, r3
 800c31a:	6878      	ldr	r0, [r7, #4]
 800c31c:	f7fe fee6 	bl	800b0ec <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c320:	2300      	movs	r3, #0
}
 800c322:	4618      	mov	r0, r3
 800c324:	3708      	adds	r7, #8
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
 800c32a:	bf00      	nop
 800c32c:	200039c4 	.word	0x200039c4

0800c330 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b084      	sub	sp, #16
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c338:	2300      	movs	r3, #0
 800c33a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c33c:	2300      	movs	r3, #0
 800c33e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c346:	4618      	mov	r0, r3
 800c348:	f7f7 ff14 	bl	8004174 <HAL_HCD_Start>
 800c34c:	4603      	mov	r3, r0
 800c34e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c350:	7bfb      	ldrb	r3, [r7, #15]
 800c352:	4618      	mov	r0, r3
 800c354:	f000 f95e 	bl	800c614 <USBH_Get_USB_Status>
 800c358:	4603      	mov	r3, r0
 800c35a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c35c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3710      	adds	r7, #16
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}

0800c366 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c366:	b580      	push	{r7, lr}
 800c368:	b084      	sub	sp, #16
 800c36a:	af00      	add	r7, sp, #0
 800c36c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c36e:	2300      	movs	r3, #0
 800c370:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c372:	2300      	movs	r3, #0
 800c374:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c37c:	4618      	mov	r0, r3
 800c37e:	f7f7 ff1c 	bl	80041ba <HAL_HCD_Stop>
 800c382:	4603      	mov	r3, r0
 800c384:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c386:	7bfb      	ldrb	r3, [r7, #15]
 800c388:	4618      	mov	r0, r3
 800c38a:	f000 f943 	bl	800c614 <USBH_Get_USB_Status>
 800c38e:	4603      	mov	r3, r0
 800c390:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c392:	7bbb      	ldrb	r3, [r7, #14]
}
 800c394:	4618      	mov	r0, r3
 800c396:	3710      	adds	r7, #16
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}

0800c39c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b084      	sub	sp, #16
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f7f7 ff66 	bl	8004280 <HAL_HCD_GetCurrentSpeed>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	2b02      	cmp	r3, #2
 800c3b8:	d00c      	beq.n	800c3d4 <USBH_LL_GetSpeed+0x38>
 800c3ba:	2b02      	cmp	r3, #2
 800c3bc:	d80d      	bhi.n	800c3da <USBH_LL_GetSpeed+0x3e>
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d002      	beq.n	800c3c8 <USBH_LL_GetSpeed+0x2c>
 800c3c2:	2b01      	cmp	r3, #1
 800c3c4:	d003      	beq.n	800c3ce <USBH_LL_GetSpeed+0x32>
 800c3c6:	e008      	b.n	800c3da <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	73fb      	strb	r3, [r7, #15]
    break;
 800c3cc:	e008      	b.n	800c3e0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	73fb      	strb	r3, [r7, #15]
    break;
 800c3d2:	e005      	b.n	800c3e0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c3d4:	2302      	movs	r3, #2
 800c3d6:	73fb      	strb	r3, [r7, #15]
    break;
 800c3d8:	e002      	b.n	800c3e0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800c3da:	2301      	movs	r3, #1
 800c3dc:	73fb      	strb	r3, [r7, #15]
    break;
 800c3de:	bf00      	nop
  }
  return  speed;
 800c3e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3710      	adds	r7, #16
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}

0800c3ea <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c3ea:	b580      	push	{r7, lr}
 800c3ec:	b084      	sub	sp, #16
 800c3ee:	af00      	add	r7, sp, #0
 800c3f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c400:	4618      	mov	r0, r3
 800c402:	f7f7 fef7 	bl	80041f4 <HAL_HCD_ResetPort>
 800c406:	4603      	mov	r3, r0
 800c408:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c40a:	7bfb      	ldrb	r3, [r7, #15]
 800c40c:	4618      	mov	r0, r3
 800c40e:	f000 f901 	bl	800c614 <USBH_Get_USB_Status>
 800c412:	4603      	mov	r3, r0
 800c414:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c416:	7bbb      	ldrb	r3, [r7, #14]
}
 800c418:	4618      	mov	r0, r3
 800c41a:	3710      	adds	r7, #16
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}

0800c420 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b082      	sub	sp, #8
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
 800c428:	460b      	mov	r3, r1
 800c42a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c432:	78fa      	ldrb	r2, [r7, #3]
 800c434:	4611      	mov	r1, r2
 800c436:	4618      	mov	r0, r3
 800c438:	f7f7 feff 	bl	800423a <HAL_HCD_HC_GetXferCount>
 800c43c:	4603      	mov	r3, r0
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3708      	adds	r7, #8
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}

0800c446 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c446:	b590      	push	{r4, r7, lr}
 800c448:	b089      	sub	sp, #36	@ 0x24
 800c44a:	af04      	add	r7, sp, #16
 800c44c:	6078      	str	r0, [r7, #4]
 800c44e:	4608      	mov	r0, r1
 800c450:	4611      	mov	r1, r2
 800c452:	461a      	mov	r2, r3
 800c454:	4603      	mov	r3, r0
 800c456:	70fb      	strb	r3, [r7, #3]
 800c458:	460b      	mov	r3, r1
 800c45a:	70bb      	strb	r3, [r7, #2]
 800c45c:	4613      	mov	r3, r2
 800c45e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c460:	2300      	movs	r3, #0
 800c462:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c464:	2300      	movs	r3, #0
 800c466:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800c46e:	787c      	ldrb	r4, [r7, #1]
 800c470:	78ba      	ldrb	r2, [r7, #2]
 800c472:	78f9      	ldrb	r1, [r7, #3]
 800c474:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c476:	9302      	str	r3, [sp, #8]
 800c478:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c47c:	9301      	str	r3, [sp, #4]
 800c47e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c482:	9300      	str	r3, [sp, #0]
 800c484:	4623      	mov	r3, r4
 800c486:	f7f7 faeb 	bl	8003a60 <HAL_HCD_HC_Init>
 800c48a:	4603      	mov	r3, r0
 800c48c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c48e:	7bfb      	ldrb	r3, [r7, #15]
 800c490:	4618      	mov	r0, r3
 800c492:	f000 f8bf 	bl	800c614 <USBH_Get_USB_Status>
 800c496:	4603      	mov	r3, r0
 800c498:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c49a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c49c:	4618      	mov	r0, r3
 800c49e:	3714      	adds	r7, #20
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	bd90      	pop	{r4, r7, pc}

0800c4a4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b084      	sub	sp, #16
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
 800c4ac:	460b      	mov	r3, r1
 800c4ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c4be:	78fa      	ldrb	r2, [r7, #3]
 800c4c0:	4611      	mov	r1, r2
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f7f7 fb84 	bl	8003bd0 <HAL_HCD_HC_Halt>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c4cc:	7bfb      	ldrb	r3, [r7, #15]
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f000 f8a0 	bl	800c614 <USBH_Get_USB_Status>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3710      	adds	r7, #16
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}

0800c4e2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c4e2:	b590      	push	{r4, r7, lr}
 800c4e4:	b089      	sub	sp, #36	@ 0x24
 800c4e6:	af04      	add	r7, sp, #16
 800c4e8:	6078      	str	r0, [r7, #4]
 800c4ea:	4608      	mov	r0, r1
 800c4ec:	4611      	mov	r1, r2
 800c4ee:	461a      	mov	r2, r3
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	70fb      	strb	r3, [r7, #3]
 800c4f4:	460b      	mov	r3, r1
 800c4f6:	70bb      	strb	r3, [r7, #2]
 800c4f8:	4613      	mov	r3, r2
 800c4fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c500:	2300      	movs	r3, #0
 800c502:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800c50a:	787c      	ldrb	r4, [r7, #1]
 800c50c:	78ba      	ldrb	r2, [r7, #2]
 800c50e:	78f9      	ldrb	r1, [r7, #3]
 800c510:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c514:	9303      	str	r3, [sp, #12]
 800c516:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c518:	9302      	str	r3, [sp, #8]
 800c51a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c51c:	9301      	str	r3, [sp, #4]
 800c51e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c522:	9300      	str	r3, [sp, #0]
 800c524:	4623      	mov	r3, r4
 800c526:	f7f7 fb77 	bl	8003c18 <HAL_HCD_HC_SubmitRequest>
 800c52a:	4603      	mov	r3, r0
 800c52c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c52e:	7bfb      	ldrb	r3, [r7, #15]
 800c530:	4618      	mov	r0, r3
 800c532:	f000 f86f 	bl	800c614 <USBH_Get_USB_Status>
 800c536:	4603      	mov	r3, r0
 800c538:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c53a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	3714      	adds	r7, #20
 800c540:	46bd      	mov	sp, r7
 800c542:	bd90      	pop	{r4, r7, pc}

0800c544 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b082      	sub	sp, #8
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
 800c54c:	460b      	mov	r3, r1
 800c54e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c556:	78fa      	ldrb	r2, [r7, #3]
 800c558:	4611      	mov	r1, r2
 800c55a:	4618      	mov	r0, r3
 800c55c:	f7f7 fe58 	bl	8004210 <HAL_HCD_HC_GetURBState>
 800c560:	4603      	mov	r3, r0
}
 800c562:	4618      	mov	r0, r3
 800c564:	3708      	adds	r7, #8
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}

0800c56a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c56a:	b580      	push	{r7, lr}
 800c56c:	b082      	sub	sp, #8
 800c56e:	af00      	add	r7, sp, #0
 800c570:	6078      	str	r0, [r7, #4]
 800c572:	460b      	mov	r3, r1
 800c574:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800c57c:	2b01      	cmp	r3, #1
 800c57e:	d103      	bne.n	800c588 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c580:	78fb      	ldrb	r3, [r7, #3]
 800c582:	4618      	mov	r0, r3
 800c584:	f000 f872 	bl	800c66c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c588:	20c8      	movs	r0, #200	@ 0xc8
 800c58a:	f7f5 ffa9 	bl	80024e0 <HAL_Delay>
  return USBH_OK;
 800c58e:	2300      	movs	r3, #0
}
 800c590:	4618      	mov	r0, r3
 800c592:	3708      	adds	r7, #8
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}

0800c598 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c598:	b480      	push	{r7}
 800c59a:	b085      	sub	sp, #20
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
 800c5a0:	460b      	mov	r3, r1
 800c5a2:	70fb      	strb	r3, [r7, #3]
 800c5a4:	4613      	mov	r3, r2
 800c5a6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c5ae:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c5b0:	78fa      	ldrb	r2, [r7, #3]
 800c5b2:	68f9      	ldr	r1, [r7, #12]
 800c5b4:	4613      	mov	r3, r2
 800c5b6:	011b      	lsls	r3, r3, #4
 800c5b8:	1a9b      	subs	r3, r3, r2
 800c5ba:	009b      	lsls	r3, r3, #2
 800c5bc:	440b      	add	r3, r1
 800c5be:	3317      	adds	r3, #23
 800c5c0:	781b      	ldrb	r3, [r3, #0]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d00a      	beq.n	800c5dc <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c5c6:	78fa      	ldrb	r2, [r7, #3]
 800c5c8:	68f9      	ldr	r1, [r7, #12]
 800c5ca:	4613      	mov	r3, r2
 800c5cc:	011b      	lsls	r3, r3, #4
 800c5ce:	1a9b      	subs	r3, r3, r2
 800c5d0:	009b      	lsls	r3, r3, #2
 800c5d2:	440b      	add	r3, r1
 800c5d4:	333c      	adds	r3, #60	@ 0x3c
 800c5d6:	78ba      	ldrb	r2, [r7, #2]
 800c5d8:	701a      	strb	r2, [r3, #0]
 800c5da:	e009      	b.n	800c5f0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c5dc:	78fa      	ldrb	r2, [r7, #3]
 800c5de:	68f9      	ldr	r1, [r7, #12]
 800c5e0:	4613      	mov	r3, r2
 800c5e2:	011b      	lsls	r3, r3, #4
 800c5e4:	1a9b      	subs	r3, r3, r2
 800c5e6:	009b      	lsls	r3, r3, #2
 800c5e8:	440b      	add	r3, r1
 800c5ea:	333d      	adds	r3, #61	@ 0x3d
 800c5ec:	78ba      	ldrb	r2, [r7, #2]
 800c5ee:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c5f0:	2300      	movs	r3, #0
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3714      	adds	r7, #20
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fc:	4770      	bx	lr

0800c5fe <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c5fe:	b580      	push	{r7, lr}
 800c600:	b082      	sub	sp, #8
 800c602:	af00      	add	r7, sp, #0
 800c604:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f7f5 ff6a 	bl	80024e0 <HAL_Delay>
}
 800c60c:	bf00      	nop
 800c60e:	3708      	adds	r7, #8
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}

0800c614 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c614:	b480      	push	{r7}
 800c616:	b085      	sub	sp, #20
 800c618:	af00      	add	r7, sp, #0
 800c61a:	4603      	mov	r3, r0
 800c61c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c61e:	2300      	movs	r3, #0
 800c620:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c622:	79fb      	ldrb	r3, [r7, #7]
 800c624:	2b03      	cmp	r3, #3
 800c626:	d817      	bhi.n	800c658 <USBH_Get_USB_Status+0x44>
 800c628:	a201      	add	r2, pc, #4	@ (adr r2, 800c630 <USBH_Get_USB_Status+0x1c>)
 800c62a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c62e:	bf00      	nop
 800c630:	0800c641 	.word	0x0800c641
 800c634:	0800c647 	.word	0x0800c647
 800c638:	0800c64d 	.word	0x0800c64d
 800c63c:	0800c653 	.word	0x0800c653
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c640:	2300      	movs	r3, #0
 800c642:	73fb      	strb	r3, [r7, #15]
    break;
 800c644:	e00b      	b.n	800c65e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c646:	2302      	movs	r3, #2
 800c648:	73fb      	strb	r3, [r7, #15]
    break;
 800c64a:	e008      	b.n	800c65e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c64c:	2301      	movs	r3, #1
 800c64e:	73fb      	strb	r3, [r7, #15]
    break;
 800c650:	e005      	b.n	800c65e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c652:	2302      	movs	r3, #2
 800c654:	73fb      	strb	r3, [r7, #15]
    break;
 800c656:	e002      	b.n	800c65e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c658:	2302      	movs	r3, #2
 800c65a:	73fb      	strb	r3, [r7, #15]
    break;
 800c65c:	bf00      	nop
  }
  return usb_status;
 800c65e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c660:	4618      	mov	r0, r3
 800c662:	3714      	adds	r7, #20
 800c664:	46bd      	mov	sp, r7
 800c666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66a:	4770      	bx	lr

0800c66c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b084      	sub	sp, #16
 800c670:	af00      	add	r7, sp, #0
 800c672:	4603      	mov	r3, r0
 800c674:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c676:	79fb      	ldrb	r3, [r7, #7]
 800c678:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c67a:	79fb      	ldrb	r3, [r7, #7]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d102      	bne.n	800c686 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800c680:	2300      	movs	r3, #0
 800c682:	73fb      	strb	r3, [r7, #15]
 800c684:	e001      	b.n	800c68a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800c686:	2301      	movs	r3, #1
 800c688:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800c68a:	7bfb      	ldrb	r3, [r7, #15]
 800c68c:	461a      	mov	r2, r3
 800c68e:	2101      	movs	r1, #1
 800c690:	4803      	ldr	r0, [pc, #12]	@ (800c6a0 <MX_DriverVbusFS+0x34>)
 800c692:	f7f7 f965 	bl	8003960 <HAL_GPIO_WritePin>
}
 800c696:	bf00      	nop
 800c698:	3710      	adds	r7, #16
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}
 800c69e:	bf00      	nop
 800c6a0:	40020800 	.word	0x40020800

0800c6a4 <arm_mean_q15>:
 800c6a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6a6:	ea5f 0e91 	movs.w	lr, r1, lsr #2
 800c6aa:	d021      	beq.n	800c6f0 <arm_mean_q15+0x4c>
 800c6ac:	f100 0408 	add.w	r4, r0, #8
 800c6b0:	4675      	mov	r5, lr
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	f854 7c08 	ldr.w	r7, [r4, #-8]
 800c6b8:	f854 6c04 	ldr.w	r6, [r4, #-4]
 800c6bc:	fa03 f387 	sxtah	r3, r3, r7
 800c6c0:	eb03 4327 	add.w	r3, r3, r7, asr #16
 800c6c4:	fa03 f386 	sxtah	r3, r3, r6
 800c6c8:	3d01      	subs	r5, #1
 800c6ca:	eb03 4326 	add.w	r3, r3, r6, asr #16
 800c6ce:	f104 0408 	add.w	r4, r4, #8
 800c6d2:	d1ef      	bne.n	800c6b4 <arm_mean_q15+0x10>
 800c6d4:	eb00 00ce 	add.w	r0, r0, lr, lsl #3
 800c6d8:	f011 0403 	ands.w	r4, r1, #3
 800c6dc:	d004      	beq.n	800c6e8 <arm_mean_q15+0x44>
 800c6de:	f930 5b02 	ldrsh.w	r5, [r0], #2
 800c6e2:	3c01      	subs	r4, #1
 800c6e4:	442b      	add	r3, r5
 800c6e6:	d1fa      	bne.n	800c6de <arm_mean_q15+0x3a>
 800c6e8:	fb93 f3f1 	sdiv	r3, r3, r1
 800c6ec:	8013      	strh	r3, [r2, #0]
 800c6ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6f0:	4673      	mov	r3, lr
 800c6f2:	e7f1      	b.n	800c6d8 <arm_mean_q15+0x34>

0800c6f4 <arm_split_rfft_q15>:
 800c6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6f8:	b083      	sub	sp, #12
 800c6fa:	f101 4480 	add.w	r4, r1, #1073741824	@ 0x40000000
 800c6fe:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800c700:	9001      	str	r0, [sp, #4]
 800c702:	3c01      	subs	r4, #1
 800c704:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 800c708:	00a0      	lsls	r0, r4, #2
 800c70a:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800c70e:	3901      	subs	r1, #1
 800c710:	9000      	str	r0, [sp, #0]
 800c712:	4452      	add	r2, sl
 800c714:	4453      	add	r3, sl
 800c716:	d02f      	beq.n	800c778 <arm_split_rfft_q15+0x84>
 800c718:	f100 0904 	add.w	r9, r0, #4
 800c71c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800c71e:	9c01      	ldr	r4, [sp, #4]
 800c720:	f1ae 0e08 	sub.w	lr, lr, #8
 800c724:	4486      	add	lr, r0
 800c726:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800c728:	44a1      	add	r9, r4
 800c72a:	f100 0808 	add.w	r8, r0, #8
 800c72e:	46a3      	mov	fp, r4
 800c730:	f04f 0c00 	mov.w	ip, #0
 800c734:	f85b 4f04 	ldr.w	r4, [fp, #4]!
 800c738:	f852 000c 	ldr.w	r0, [r2, ip]
 800c73c:	fb44 f500 	smusd	r5, r4, r0
 800c740:	f859 6d04 	ldr.w	r6, [r9, #-4]!
 800c744:	f853 700c 	ldr.w	r7, [r3, ip]
 800c748:	fb26 5507 	smlad	r5, r6, r7, r5
 800c74c:	fb46 f617 	smusdx	r6, r6, r7
 800c750:	fb24 6010 	smladx	r0, r4, r0, r6
 800c754:	1400      	asrs	r0, r0, #16
 800c756:	0c2c      	lsrs	r4, r5, #16
 800c758:	4246      	negs	r6, r0
 800c75a:	3901      	subs	r1, #1
 800c75c:	f828 0c02 	strh.w	r0, [r8, #-2]
 800c760:	f828 4c04 	strh.w	r4, [r8, #-4]
 800c764:	44d4      	add	ip, sl
 800c766:	f8ae 6006 	strh.w	r6, [lr, #6]
 800c76a:	f8ae 4004 	strh.w	r4, [lr, #4]
 800c76e:	f108 0804 	add.w	r8, r8, #4
 800c772:	f1ae 0e04 	sub.w	lr, lr, #4
 800c776:	d1dd      	bne.n	800c734 <arm_split_rfft_q15+0x40>
 800c778:	9801      	ldr	r0, [sp, #4]
 800c77a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800c77c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800c780:	f9b0 3000 	ldrsh.w	r3, [r0]
 800c784:	9900      	ldr	r1, [sp, #0]
 800c786:	1a9b      	subs	r3, r3, r2
 800c788:	4421      	add	r1, r4
 800c78a:	2200      	movs	r2, #0
 800c78c:	105b      	asrs	r3, r3, #1
 800c78e:	808b      	strh	r3, [r1, #4]
 800c790:	80ca      	strh	r2, [r1, #6]
 800c792:	f9b0 1000 	ldrsh.w	r1, [r0]
 800c796:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800c79a:	8062      	strh	r2, [r4, #2]
 800c79c:	440b      	add	r3, r1
 800c79e:	105b      	asrs	r3, r3, #1
 800c7a0:	8023      	strh	r3, [r4, #0]
 800c7a2:	b003      	add	sp, #12
 800c7a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c7a8 <arm_rfft_q15>:
 800c7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7ac:	4617      	mov	r7, r2
 800c7ae:	7902      	ldrb	r2, [r0, #4]
 800c7b0:	6805      	ldr	r5, [r0, #0]
 800c7b2:	6943      	ldr	r3, [r0, #20]
 800c7b4:	b085      	sub	sp, #20
 800c7b6:	2a01      	cmp	r2, #1
 800c7b8:	4606      	mov	r6, r0
 800c7ba:	9303      	str	r3, [sp, #12]
 800c7bc:	ea4f 0555 	mov.w	r5, r5, lsr #1
 800c7c0:	4688      	mov	r8, r1
 800c7c2:	d00f      	beq.n	800c7e4 <arm_rfft_q15+0x3c>
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	7973      	ldrb	r3, [r6, #5]
 800c7c8:	f000 fa78 	bl	800ccbc <arm_cfft_q15>
 800c7cc:	68b4      	ldr	r4, [r6, #8]
 800c7ce:	68f2      	ldr	r2, [r6, #12]
 800c7d0:	6933      	ldr	r3, [r6, #16]
 800c7d2:	9700      	str	r7, [sp, #0]
 800c7d4:	4640      	mov	r0, r8
 800c7d6:	4629      	mov	r1, r5
 800c7d8:	9401      	str	r4, [sp, #4]
 800c7da:	f7ff ff8b 	bl	800c6f4 <arm_split_rfft_q15>
 800c7de:	b005      	add	sp, #20
 800c7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7e4:	f100 0308 	add.w	r3, r0, #8
 800c7e8:	e893 5008 	ldmia.w	r3, {r3, ip, lr}
 800c7ec:	ea4f 0985 	mov.w	r9, r5, lsl #2
 800c7f0:	b31d      	cbz	r5, 800c83a <arm_rfft_q15+0x92>
 800c7f2:	f109 0904 	add.w	r9, r9, #4
 800c7f6:	4489      	add	r9, r1
 800c7f8:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800c7fc:	46bb      	mov	fp, r7
 800c7fe:	f859 1d04 	ldr.w	r1, [r9, #-4]!
 800c802:	f8de 4000 	ldr.w	r4, [lr]
 800c806:	fb41 f304 	smusd	r3, r1, r4
 800c80a:	f858 0b04 	ldr.w	r0, [r8], #4
 800c80e:	f8dc 2000 	ldr.w	r2, [ip]
 800c812:	fb20 3302 	smlad	r3, r0, r2, r3
 800c816:	fb21 f114 	smuadx	r1, r1, r4
 800c81a:	4249      	negs	r1, r1
 800c81c:	fb42 1210 	smlsdx	r2, r2, r0, r1
 800c820:	3d01      	subs	r5, #1
 800c822:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800c826:	ea4f 4222 	mov.w	r2, r2, asr #16
 800c82a:	44d6      	add	lr, sl
 800c82c:	eac3 4202 	pkhbt	r2, r3, r2, lsl #16
 800c830:	44d4      	add	ip, sl
 800c832:	f84b 2b04 	str.w	r2, [fp], #4
 800c836:	d1e2      	bne.n	800c7fe <arm_rfft_q15+0x56>
 800c838:	7932      	ldrb	r2, [r6, #4]
 800c83a:	7973      	ldrb	r3, [r6, #5]
 800c83c:	9803      	ldr	r0, [sp, #12]
 800c83e:	4639      	mov	r1, r7
 800c840:	f000 fa3c 	bl	800ccbc <arm_cfft_q15>
 800c844:	6833      	ldr	r3, [r6, #0]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d0c9      	beq.n	800c7de <arm_rfft_q15+0x36>
 800c84a:	3f02      	subs	r7, #2
 800c84c:	2200      	movs	r2, #0
 800c84e:	f937 3f02 	ldrsh.w	r3, [r7, #2]!
 800c852:	005b      	lsls	r3, r3, #1
 800c854:	803b      	strh	r3, [r7, #0]
 800c856:	6833      	ldr	r3, [r6, #0]
 800c858:	3201      	adds	r2, #1
 800c85a:	4293      	cmp	r3, r2
 800c85c:	d8f7      	bhi.n	800c84e <arm_rfft_q15+0xa6>
 800c85e:	b005      	add	sp, #20
 800c860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c864 <arm_rfft_init_q15>:
 800c864:	b289      	uxth	r1, r1
 800c866:	b430      	push	{r4, r5}
 800c868:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800c86c:	4d36      	ldr	r5, [pc, #216]	@ (800c948 <arm_rfft_init_q15+0xe4>)
 800c86e:	4c37      	ldr	r4, [pc, #220]	@ (800c94c <arm_rfft_init_q15+0xe8>)
 800c870:	7102      	strb	r2, [r0, #4]
 800c872:	7143      	strb	r3, [r0, #5]
 800c874:	6001      	str	r1, [r0, #0]
 800c876:	60c5      	str	r5, [r0, #12]
 800c878:	6104      	str	r4, [r0, #16]
 800c87a:	d050      	beq.n	800c91e <arm_rfft_init_q15+0xba>
 800c87c:	d911      	bls.n	800c8a2 <arm_rfft_init_q15+0x3e>
 800c87e:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 800c882:	d054      	beq.n	800c92e <arm_rfft_init_q15+0xca>
 800c884:	d938      	bls.n	800c8f8 <arm_rfft_init_q15+0x94>
 800c886:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800c88a:	d022      	beq.n	800c8d2 <arm_rfft_init_q15+0x6e>
 800c88c:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 800c890:	d155      	bne.n	800c93e <arm_rfft_init_q15+0xda>
 800c892:	2201      	movs	r2, #1
 800c894:	4b2e      	ldr	r3, [pc, #184]	@ (800c950 <arm_rfft_init_q15+0xec>)
 800c896:	6082      	str	r2, [r0, #8]
 800c898:	6143      	str	r3, [r0, #20]
 800c89a:	2000      	movs	r0, #0
 800c89c:	b240      	sxtb	r0, r0
 800c89e:	bc30      	pop	{r4, r5}
 800c8a0:	4770      	bx	lr
 800c8a2:	2940      	cmp	r1, #64	@ 0x40
 800c8a4:	d033      	beq.n	800c90e <arm_rfft_init_q15+0xaa>
 800c8a6:	d91c      	bls.n	800c8e2 <arm_rfft_init_q15+0x7e>
 800c8a8:	2980      	cmp	r1, #128	@ 0x80
 800c8aa:	d00a      	beq.n	800c8c2 <arm_rfft_init_q15+0x5e>
 800c8ac:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800c8b0:	d145      	bne.n	800c93e <arm_rfft_init_q15+0xda>
 800c8b2:	2220      	movs	r2, #32
 800c8b4:	4b27      	ldr	r3, [pc, #156]	@ (800c954 <arm_rfft_init_q15+0xf0>)
 800c8b6:	6082      	str	r2, [r0, #8]
 800c8b8:	6143      	str	r3, [r0, #20]
 800c8ba:	2000      	movs	r0, #0
 800c8bc:	b240      	sxtb	r0, r0
 800c8be:	bc30      	pop	{r4, r5}
 800c8c0:	4770      	bx	lr
 800c8c2:	2240      	movs	r2, #64	@ 0x40
 800c8c4:	4b24      	ldr	r3, [pc, #144]	@ (800c958 <arm_rfft_init_q15+0xf4>)
 800c8c6:	6082      	str	r2, [r0, #8]
 800c8c8:	6143      	str	r3, [r0, #20]
 800c8ca:	2000      	movs	r0, #0
 800c8cc:	b240      	sxtb	r0, r0
 800c8ce:	bc30      	pop	{r4, r5}
 800c8d0:	4770      	bx	lr
 800c8d2:	2202      	movs	r2, #2
 800c8d4:	4b21      	ldr	r3, [pc, #132]	@ (800c95c <arm_rfft_init_q15+0xf8>)
 800c8d6:	6082      	str	r2, [r0, #8]
 800c8d8:	6143      	str	r3, [r0, #20]
 800c8da:	2000      	movs	r0, #0
 800c8dc:	b240      	sxtb	r0, r0
 800c8de:	bc30      	pop	{r4, r5}
 800c8e0:	4770      	bx	lr
 800c8e2:	2920      	cmp	r1, #32
 800c8e4:	d12b      	bne.n	800c93e <arm_rfft_init_q15+0xda>
 800c8e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c8ea:	4b1d      	ldr	r3, [pc, #116]	@ (800c960 <arm_rfft_init_q15+0xfc>)
 800c8ec:	6082      	str	r2, [r0, #8]
 800c8ee:	6143      	str	r3, [r0, #20]
 800c8f0:	2000      	movs	r0, #0
 800c8f2:	b240      	sxtb	r0, r0
 800c8f4:	bc30      	pop	{r4, r5}
 800c8f6:	4770      	bx	lr
 800c8f8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800c8fc:	d11f      	bne.n	800c93e <arm_rfft_init_q15+0xda>
 800c8fe:	2208      	movs	r2, #8
 800c900:	4b18      	ldr	r3, [pc, #96]	@ (800c964 <arm_rfft_init_q15+0x100>)
 800c902:	6082      	str	r2, [r0, #8]
 800c904:	6143      	str	r3, [r0, #20]
 800c906:	2000      	movs	r0, #0
 800c908:	b240      	sxtb	r0, r0
 800c90a:	bc30      	pop	{r4, r5}
 800c90c:	4770      	bx	lr
 800c90e:	2280      	movs	r2, #128	@ 0x80
 800c910:	4b15      	ldr	r3, [pc, #84]	@ (800c968 <arm_rfft_init_q15+0x104>)
 800c912:	6082      	str	r2, [r0, #8]
 800c914:	6143      	str	r3, [r0, #20]
 800c916:	2000      	movs	r0, #0
 800c918:	b240      	sxtb	r0, r0
 800c91a:	bc30      	pop	{r4, r5}
 800c91c:	4770      	bx	lr
 800c91e:	2210      	movs	r2, #16
 800c920:	4b12      	ldr	r3, [pc, #72]	@ (800c96c <arm_rfft_init_q15+0x108>)
 800c922:	6082      	str	r2, [r0, #8]
 800c924:	6143      	str	r3, [r0, #20]
 800c926:	2000      	movs	r0, #0
 800c928:	b240      	sxtb	r0, r0
 800c92a:	bc30      	pop	{r4, r5}
 800c92c:	4770      	bx	lr
 800c92e:	2204      	movs	r2, #4
 800c930:	4b0f      	ldr	r3, [pc, #60]	@ (800c970 <arm_rfft_init_q15+0x10c>)
 800c932:	6082      	str	r2, [r0, #8]
 800c934:	6143      	str	r3, [r0, #20]
 800c936:	2000      	movs	r0, #0
 800c938:	b240      	sxtb	r0, r0
 800c93a:	bc30      	pop	{r4, r5}
 800c93c:	4770      	bx	lr
 800c93e:	20ff      	movs	r0, #255	@ 0xff
 800c940:	b240      	sxtb	r0, r0
 800c942:	bc30      	pop	{r4, r5}
 800c944:	4770      	bx	lr
 800c946:	bf00      	nop
 800c948:	0800d72c 	.word	0x0800d72c
 800c94c:	0801172c 	.word	0x0801172c
 800c950:	0801575c 	.word	0x0801575c
 800c954:	0801579c 	.word	0x0801579c
 800c958:	0801577c 	.word	0x0801577c
 800c95c:	080157ac 	.word	0x080157ac
 800c960:	0801573c 	.word	0x0801573c
 800c964:	0801576c 	.word	0x0801576c
 800c968:	0801574c 	.word	0x0801574c
 800c96c:	0801578c 	.word	0x0801578c
 800c970:	0801572c 	.word	0x0801572c

0800c974 <arm_biquad_cascade_df1_q15>:
 800c974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c978:	b08b      	sub	sp, #44	@ 0x2c
 800c97a:	085c      	lsrs	r4, r3, #1
 800c97c:	f990 800c 	ldrsb.w	r8, [r0, #12]
 800c980:	6885      	ldr	r5, [r0, #8]
 800c982:	9407      	str	r4, [sp, #28]
 800c984:	4626      	mov	r6, r4
 800c986:	f003 0301 	and.w	r3, r3, #1
 800c98a:	6844      	ldr	r4, [r0, #4]
 800c98c:	f990 0000 	ldrsb.w	r0, [r0]
 800c990:	9004      	str	r0, [sp, #16]
 800c992:	9306      	str	r3, [sp, #24]
 800c994:	00b0      	lsls	r0, r6, #2
 800c996:	4613      	mov	r3, r2
 800c998:	4403      	add	r3, r0
 800c99a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c99c:	f105 030c 	add.w	r3, r5, #12
 800c9a0:	9302      	str	r3, [sp, #8]
 800c9a2:	f104 0308 	add.w	r3, r4, #8
 800c9a6:	f1c8 090f 	rsb	r9, r8, #15
 800c9aa:	9205      	str	r2, [sp, #20]
 800c9ac:	9008      	str	r0, [sp, #32]
 800c9ae:	9101      	str	r1, [sp, #4]
 800c9b0:	f108 0811 	add.w	r8, r8, #17
 800c9b4:	9303      	str	r3, [sp, #12]
 800c9b6:	9a02      	ldr	r2, [sp, #8]
 800c9b8:	f852 4c0c 	ldr.w	r4, [r2, #-12]
 800c9bc:	e912 0003 	ldmdb	r2, {r0, r1}
 800c9c0:	9a03      	ldr	r2, [sp, #12]
 800c9c2:	f852 ac08 	ldr.w	sl, [r2, #-8]
 800c9c6:	f852 3c04 	ldr.w	r3, [r2, #-4]
 800c9ca:	9a07      	ldr	r2, [sp, #28]
 800c9cc:	2a00      	cmp	r2, #0
 800c9ce:	d06c      	beq.n	800caaa <arm_biquad_cascade_df1_q15+0x136>
 800c9d0:	f8dd c004 	ldr.w	ip, [sp, #4]
 800c9d4:	f8dd e014 	ldr.w	lr, [sp, #20]
 800c9d8:	4615      	mov	r5, r2
 800c9da:	461f      	mov	r7, r3
 800c9dc:	f85c 6b04 	ldr.w	r6, [ip], #4
 800c9e0:	fb24 fb06 	smuad	fp, r4, r6
 800c9e4:	465a      	mov	r2, fp
 800c9e6:	17d3      	asrs	r3, r2, #31
 800c9e8:	461a      	mov	r2, r3
 800c9ea:	465b      	mov	r3, fp
 800c9ec:	fbc0 32ca 	smlald	r3, r2, r0, sl
 800c9f0:	fbc1 32c7 	smlald	r3, r2, r1, r7
 800c9f4:	fa23 f309 	lsr.w	r3, r3, r9
 800c9f8:	fa02 f208 	lsl.w	r2, r2, r8
 800c9fc:	431a      	orrs	r2, r3
 800c9fe:	eac6 430a 	pkhbt	r3, r6, sl, lsl #16
 800ca02:	f302 020f 	ssat	r2, #16, r2
 800ca06:	eac2 4707 	pkhbt	r7, r2, r7, lsl #16
 800ca0a:	fb24 f216 	smuadx	r2, r4, r6
 800ca0e:	ea4f 7be2 	mov.w	fp, r2, asr #31
 800ca12:	46da      	mov	sl, fp
 800ca14:	fbc0 2ac3 	smlald	r2, sl, r0, r3
 800ca18:	fbc1 2ac7 	smlald	r2, sl, r1, r7
 800ca1c:	fa0a fa08 	lsl.w	sl, sl, r8
 800ca20:	fa22 f209 	lsr.w	r2, r2, r9
 800ca24:	3d01      	subs	r5, #1
 800ca26:	ea4a 0202 	orr.w	r2, sl, r2
 800ca2a:	ea4f 4626 	mov.w	r6, r6, asr #16
 800ca2e:	f302 020f 	ssat	r2, #16, r2
 800ca32:	eac6 4a03 	pkhbt	sl, r6, r3, lsl #16
 800ca36:	eac7 4302 	pkhbt	r3, r7, r2, lsl #16
 800ca3a:	eac2 4707 	pkhbt	r7, r2, r7, lsl #16
 800ca3e:	f84e 3b04 	str.w	r3, [lr], #4
 800ca42:	d1cb      	bne.n	800c9dc <arm_biquad_cascade_df1_q15+0x68>
 800ca44:	9a01      	ldr	r2, [sp, #4]
 800ca46:	9d08      	ldr	r5, [sp, #32]
 800ca48:	442a      	add	r2, r5
 800ca4a:	9201      	str	r2, [sp, #4]
 800ca4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca4e:	463b      	mov	r3, r7
 800ca50:	9d06      	ldr	r5, [sp, #24]
 800ca52:	b1b5      	cbz	r5, 800ca82 <arm_biquad_cascade_df1_q15+0x10e>
 800ca54:	9d01      	ldr	r5, [sp, #4]
 800ca56:	f9b5 5000 	ldrsh.w	r5, [r5]
 800ca5a:	fb24 f405 	smuad	r4, r4, r5
 800ca5e:	17e7      	asrs	r7, r4, #31
 800ca60:	463e      	mov	r6, r7
 800ca62:	fbc0 46ca 	smlald	r4, r6, r0, sl
 800ca66:	fbc1 46c3 	smlald	r4, r6, r1, r3
 800ca6a:	fa06 f608 	lsl.w	r6, r6, r8
 800ca6e:	fa24 f409 	lsr.w	r4, r4, r9
 800ca72:	4326      	orrs	r6, r4
 800ca74:	f306 060f 	ssat	r6, #16, r6
 800ca78:	8016      	strh	r6, [r2, #0]
 800ca7a:	eac6 4303 	pkhbt	r3, r6, r3, lsl #16
 800ca7e:	eac5 4a0a 	pkhbt	sl, r5, sl, lsl #16
 800ca82:	9903      	ldr	r1, [sp, #12]
 800ca84:	f841 3c04 	str.w	r3, [r1, #-4]
 800ca88:	9b02      	ldr	r3, [sp, #8]
 800ca8a:	f841 ac08 	str.w	sl, [r1, #-8]
 800ca8e:	330c      	adds	r3, #12
 800ca90:	9302      	str	r3, [sp, #8]
 800ca92:	f101 0308 	add.w	r3, r1, #8
 800ca96:	9303      	str	r3, [sp, #12]
 800ca98:	9b05      	ldr	r3, [sp, #20]
 800ca9a:	9301      	str	r3, [sp, #4]
 800ca9c:	9b04      	ldr	r3, [sp, #16]
 800ca9e:	3b01      	subs	r3, #1
 800caa0:	9304      	str	r3, [sp, #16]
 800caa2:	d188      	bne.n	800c9b6 <arm_biquad_cascade_df1_q15+0x42>
 800caa4:	b00b      	add	sp, #44	@ 0x2c
 800caa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caaa:	9a05      	ldr	r2, [sp, #20]
 800caac:	e7d0      	b.n	800ca50 <arm_biquad_cascade_df1_q15+0xdc>
 800caae:	bf00      	nop

0800cab0 <arm_biquad_cascade_df1_init_q15>:
 800cab0:	b538      	push	{r3, r4, r5, lr}
 800cab2:	461d      	mov	r5, r3
 800cab4:	4604      	mov	r4, r0
 800cab6:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 800caba:	6082      	str	r2, [r0, #8]
 800cabc:	7001      	strb	r1, [r0, #0]
 800cabe:	00ca      	lsls	r2, r1, #3
 800cac0:	7303      	strb	r3, [r0, #12]
 800cac2:	2100      	movs	r1, #0
 800cac4:	4628      	mov	r0, r5
 800cac6:	f000 fc71 	bl	800d3ac <memset>
 800caca:	6065      	str	r5, [r4, #4]
 800cacc:	bd38      	pop	{r3, r4, r5, pc}
 800cace:	bf00      	nop

0800cad0 <arm_offset_q15>:
 800cad0:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 800cad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cad6:	eac1 4e01 	pkhbt	lr, r1, r1, lsl #16
 800cada:	d01a      	beq.n	800cb12 <arm_offset_q15+0x42>
 800cadc:	f102 0508 	add.w	r5, r2, #8
 800cae0:	f100 0408 	add.w	r4, r0, #8
 800cae4:	4667      	mov	r7, ip
 800cae6:	f854 6c08 	ldr.w	r6, [r4, #-8]
 800caea:	fa96 f61e 	qadd16	r6, r6, lr
 800caee:	f845 6c08 	str.w	r6, [r5, #-8]
 800caf2:	f854 6c04 	ldr.w	r6, [r4, #-4]
 800caf6:	fa96 f61e 	qadd16	r6, r6, lr
 800cafa:	3f01      	subs	r7, #1
 800cafc:	f845 6c04 	str.w	r6, [r5, #-4]
 800cb00:	f104 0408 	add.w	r4, r4, #8
 800cb04:	f105 0508 	add.w	r5, r5, #8
 800cb08:	d1ed      	bne.n	800cae6 <arm_offset_q15+0x16>
 800cb0a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800cb0e:	4462      	add	r2, ip
 800cb10:	4460      	add	r0, ip
 800cb12:	f013 0303 	ands.w	r3, r3, #3
 800cb16:	d008      	beq.n	800cb2a <arm_offset_q15+0x5a>
 800cb18:	3a02      	subs	r2, #2
 800cb1a:	f930 4b02 	ldrsh.w	r4, [r0], #2
 800cb1e:	fa94 f411 	qadd16	r4, r4, r1
 800cb22:	3b01      	subs	r3, #1
 800cb24:	f822 4f02 	strh.w	r4, [r2, #2]!
 800cb28:	d1f7      	bne.n	800cb1a <arm_offset_q15+0x4a>
 800cb2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cb2c <arm_cfft_radix4by2_q15>:
 800cb2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb30:	084d      	lsrs	r5, r1, #1
 800cb32:	b081      	sub	sp, #4
 800cb34:	4604      	mov	r4, r0
 800cb36:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 800cb3a:	4616      	mov	r6, r2
 800cb3c:	d04c      	beq.n	800cbd8 <arm_cfft_radix4by2_q15+0xac>
 800cb3e:	46bc      	mov	ip, r7
 800cb40:	4686      	mov	lr, r0
 800cb42:	4691      	mov	r9, r2
 800cb44:	4629      	mov	r1, r5
 800cb46:	f04f 0800 	mov.w	r8, #0
 800cb4a:	f859 2b04 	ldr.w	r2, [r9], #4
 800cb4e:	f8de 3000 	ldr.w	r3, [lr]
 800cb52:	fa93 fa28 	shadd16	sl, r3, r8
 800cb56:	f8dc 0000 	ldr.w	r0, [ip]
 800cb5a:	fa90 f028 	shadd16	r0, r0, r8
 800cb5e:	fada fb10 	qsub16	fp, sl, r0
 800cb62:	fa9a f020 	shadd16	r0, sl, r0
 800cb66:	f84e 0b04 	str.w	r0, [lr], #4
 800cb6a:	fb22 f00b 	smuad	r0, r2, fp
 800cb6e:	fb42 f21b 	smusdx	r2, r2, fp
 800cb72:	0c13      	lsrs	r3, r2, #16
 800cb74:	041b      	lsls	r3, r3, #16
 800cb76:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 800cb7a:	3901      	subs	r1, #1
 800cb7c:	f84c 3b04 	str.w	r3, [ip], #4
 800cb80:	d1e3      	bne.n	800cb4a <arm_cfft_radix4by2_q15+0x1e>
 800cb82:	4629      	mov	r1, r5
 800cb84:	4620      	mov	r0, r4
 800cb86:	4632      	mov	r2, r6
 800cb88:	2302      	movs	r3, #2
 800cb8a:	f000 f8f5 	bl	800cd78 <arm_radix4_butterfly_q15>
 800cb8e:	4629      	mov	r1, r5
 800cb90:	2302      	movs	r3, #2
 800cb92:	4638      	mov	r0, r7
 800cb94:	4632      	mov	r2, r6
 800cb96:	f000 f8ef 	bl	800cd78 <arm_radix4_butterfly_q15>
 800cb9a:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800cb9e:	1ca3      	adds	r3, r4, #2
 800cba0:	f933 7c02 	ldrsh.w	r7, [r3, #-2]
 800cba4:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
 800cba8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800cbac:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800cbb0:	007f      	lsls	r7, r7, #1
 800cbb2:	0076      	lsls	r6, r6, #1
 800cbb4:	0040      	lsls	r0, r0, #1
 800cbb6:	0052      	lsls	r2, r2, #1
 800cbb8:	f823 7c02 	strh.w	r7, [r3, #-2]
 800cbbc:	3408      	adds	r4, #8
 800cbbe:	f824 6c06 	strh.w	r6, [r4, #-6]
 800cbc2:	f824 0c04 	strh.w	r0, [r4, #-4]
 800cbc6:	f824 2c02 	strh.w	r2, [r4, #-2]
 800cbca:	42ac      	cmp	r4, r5
 800cbcc:	f103 0308 	add.w	r3, r3, #8
 800cbd0:	d1e6      	bne.n	800cba0 <arm_cfft_radix4by2_q15+0x74>
 800cbd2:	b001      	add	sp, #4
 800cbd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbd8:	4629      	mov	r1, r5
 800cbda:	2302      	movs	r3, #2
 800cbdc:	f000 f8cc 	bl	800cd78 <arm_radix4_butterfly_q15>
 800cbe0:	4638      	mov	r0, r7
 800cbe2:	4629      	mov	r1, r5
 800cbe4:	4632      	mov	r2, r6
 800cbe6:	2302      	movs	r3, #2
 800cbe8:	b001      	add	sp, #4
 800cbea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbee:	f000 b8c3 	b.w	800cd78 <arm_radix4_butterfly_q15>
 800cbf2:	bf00      	nop

0800cbf4 <arm_cfft_radix4by2_inverse_q15>:
 800cbf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbf8:	084d      	lsrs	r5, r1, #1
 800cbfa:	b081      	sub	sp, #4
 800cbfc:	4604      	mov	r4, r0
 800cbfe:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 800cc02:	4616      	mov	r6, r2
 800cc04:	d04c      	beq.n	800cca0 <arm_cfft_radix4by2_inverse_q15+0xac>
 800cc06:	46bc      	mov	ip, r7
 800cc08:	4686      	mov	lr, r0
 800cc0a:	4691      	mov	r9, r2
 800cc0c:	4629      	mov	r1, r5
 800cc0e:	f04f 0800 	mov.w	r8, #0
 800cc12:	f859 2b04 	ldr.w	r2, [r9], #4
 800cc16:	f8de 3000 	ldr.w	r3, [lr]
 800cc1a:	fa93 fa28 	shadd16	sl, r3, r8
 800cc1e:	f8dc 0000 	ldr.w	r0, [ip]
 800cc22:	fa90 f028 	shadd16	r0, r0, r8
 800cc26:	fada fb10 	qsub16	fp, sl, r0
 800cc2a:	fa9a f020 	shadd16	r0, sl, r0
 800cc2e:	f84e 0b04 	str.w	r0, [lr], #4
 800cc32:	fb42 f00b 	smusd	r0, r2, fp
 800cc36:	fb22 f21b 	smuadx	r2, r2, fp
 800cc3a:	0c13      	lsrs	r3, r2, #16
 800cc3c:	041b      	lsls	r3, r3, #16
 800cc3e:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 800cc42:	3901      	subs	r1, #1
 800cc44:	f84c 3b04 	str.w	r3, [ip], #4
 800cc48:	d1e3      	bne.n	800cc12 <arm_cfft_radix4by2_inverse_q15+0x1e>
 800cc4a:	4629      	mov	r1, r5
 800cc4c:	4620      	mov	r0, r4
 800cc4e:	4632      	mov	r2, r6
 800cc50:	2302      	movs	r3, #2
 800cc52:	f000 f9bf 	bl	800cfd4 <arm_radix4_butterfly_inverse_q15>
 800cc56:	4629      	mov	r1, r5
 800cc58:	2302      	movs	r3, #2
 800cc5a:	4638      	mov	r0, r7
 800cc5c:	4632      	mov	r2, r6
 800cc5e:	f000 f9b9 	bl	800cfd4 <arm_radix4_butterfly_inverse_q15>
 800cc62:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800cc66:	1ca3      	adds	r3, r4, #2
 800cc68:	f933 7c02 	ldrsh.w	r7, [r3, #-2]
 800cc6c:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
 800cc70:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800cc74:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800cc78:	007f      	lsls	r7, r7, #1
 800cc7a:	0076      	lsls	r6, r6, #1
 800cc7c:	0040      	lsls	r0, r0, #1
 800cc7e:	0052      	lsls	r2, r2, #1
 800cc80:	f823 7c02 	strh.w	r7, [r3, #-2]
 800cc84:	3408      	adds	r4, #8
 800cc86:	f824 6c06 	strh.w	r6, [r4, #-6]
 800cc8a:	f824 0c04 	strh.w	r0, [r4, #-4]
 800cc8e:	f824 2c02 	strh.w	r2, [r4, #-2]
 800cc92:	42ac      	cmp	r4, r5
 800cc94:	f103 0308 	add.w	r3, r3, #8
 800cc98:	d1e6      	bne.n	800cc68 <arm_cfft_radix4by2_inverse_q15+0x74>
 800cc9a:	b001      	add	sp, #4
 800cc9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cca0:	4629      	mov	r1, r5
 800cca2:	2302      	movs	r3, #2
 800cca4:	f000 f996 	bl	800cfd4 <arm_radix4_butterfly_inverse_q15>
 800cca8:	4638      	mov	r0, r7
 800ccaa:	4629      	mov	r1, r5
 800ccac:	4632      	mov	r2, r6
 800ccae:	2302      	movs	r3, #2
 800ccb0:	b001      	add	sp, #4
 800ccb2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccb6:	f000 b98d 	b.w	800cfd4 <arm_radix4_butterfly_inverse_q15>
 800ccba:	bf00      	nop

0800ccbc <arm_cfft_q15>:
 800ccbc:	b570      	push	{r4, r5, r6, lr}
 800ccbe:	2a01      	cmp	r2, #1
 800ccc0:	460d      	mov	r5, r1
 800ccc2:	4604      	mov	r4, r0
 800ccc4:	461e      	mov	r6, r3
 800ccc6:	8801      	ldrh	r1, [r0, #0]
 800ccc8:	d024      	beq.n	800cd14 <arm_cfft_q15+0x58>
 800ccca:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800ccce:	d013      	beq.n	800ccf8 <arm_cfft_q15+0x3c>
 800ccd0:	d808      	bhi.n	800cce4 <arm_cfft_q15+0x28>
 800ccd2:	2920      	cmp	r1, #32
 800ccd4:	d031      	beq.n	800cd3a <arm_cfft_q15+0x7e>
 800ccd6:	d945      	bls.n	800cd64 <arm_cfft_q15+0xa8>
 800ccd8:	2940      	cmp	r1, #64	@ 0x40
 800ccda:	d00d      	beq.n	800ccf8 <arm_cfft_q15+0x3c>
 800ccdc:	2980      	cmp	r1, #128	@ 0x80
 800ccde:	d02c      	beq.n	800cd3a <arm_cfft_q15+0x7e>
 800cce0:	b98e      	cbnz	r6, 800cd06 <arm_cfft_q15+0x4a>
 800cce2:	bd70      	pop	{r4, r5, r6, pc}
 800cce4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800cce8:	d006      	beq.n	800ccf8 <arm_cfft_q15+0x3c>
 800ccea:	d923      	bls.n	800cd34 <arm_cfft_q15+0x78>
 800ccec:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 800ccf0:	d023      	beq.n	800cd3a <arm_cfft_q15+0x7e>
 800ccf2:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800ccf6:	d1f3      	bne.n	800cce0 <arm_cfft_q15+0x24>
 800ccf8:	4628      	mov	r0, r5
 800ccfa:	6862      	ldr	r2, [r4, #4]
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	f000 f83b 	bl	800cd78 <arm_radix4_butterfly_q15>
 800cd02:	2e00      	cmp	r6, #0
 800cd04:	d0ed      	beq.n	800cce2 <arm_cfft_q15+0x26>
 800cd06:	4628      	mov	r0, r5
 800cd08:	89a1      	ldrh	r1, [r4, #12]
 800cd0a:	68a2      	ldr	r2, [r4, #8]
 800cd0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cd10:	f7f3 ba8f 	b.w	8000232 <arm_bitreversal_16>
 800cd14:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800cd18:	d01e      	beq.n	800cd58 <arm_cfft_q15+0x9c>
 800cd1a:	d813      	bhi.n	800cd44 <arm_cfft_q15+0x88>
 800cd1c:	2920      	cmp	r1, #32
 800cd1e:	d004      	beq.n	800cd2a <arm_cfft_q15+0x6e>
 800cd20:	d927      	bls.n	800cd72 <arm_cfft_q15+0xb6>
 800cd22:	2940      	cmp	r1, #64	@ 0x40
 800cd24:	d018      	beq.n	800cd58 <arm_cfft_q15+0x9c>
 800cd26:	2980      	cmp	r1, #128	@ 0x80
 800cd28:	d1da      	bne.n	800cce0 <arm_cfft_q15+0x24>
 800cd2a:	4628      	mov	r0, r5
 800cd2c:	6862      	ldr	r2, [r4, #4]
 800cd2e:	f7ff ff61 	bl	800cbf4 <arm_cfft_radix4by2_inverse_q15>
 800cd32:	e7d5      	b.n	800cce0 <arm_cfft_q15+0x24>
 800cd34:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800cd38:	d1d2      	bne.n	800cce0 <arm_cfft_q15+0x24>
 800cd3a:	4628      	mov	r0, r5
 800cd3c:	6862      	ldr	r2, [r4, #4]
 800cd3e:	f7ff fef5 	bl	800cb2c <arm_cfft_radix4by2_q15>
 800cd42:	e7cd      	b.n	800cce0 <arm_cfft_q15+0x24>
 800cd44:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800cd48:	d006      	beq.n	800cd58 <arm_cfft_q15+0x9c>
 800cd4a:	d90e      	bls.n	800cd6a <arm_cfft_q15+0xae>
 800cd4c:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 800cd50:	d0eb      	beq.n	800cd2a <arm_cfft_q15+0x6e>
 800cd52:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800cd56:	d1c3      	bne.n	800cce0 <arm_cfft_q15+0x24>
 800cd58:	4628      	mov	r0, r5
 800cd5a:	6862      	ldr	r2, [r4, #4]
 800cd5c:	2301      	movs	r3, #1
 800cd5e:	f000 f939 	bl	800cfd4 <arm_radix4_butterfly_inverse_q15>
 800cd62:	e7bd      	b.n	800cce0 <arm_cfft_q15+0x24>
 800cd64:	2910      	cmp	r1, #16
 800cd66:	d1bb      	bne.n	800cce0 <arm_cfft_q15+0x24>
 800cd68:	e7c6      	b.n	800ccf8 <arm_cfft_q15+0x3c>
 800cd6a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800cd6e:	d0dc      	beq.n	800cd2a <arm_cfft_q15+0x6e>
 800cd70:	e7b6      	b.n	800cce0 <arm_cfft_q15+0x24>
 800cd72:	2910      	cmp	r1, #16
 800cd74:	d1b4      	bne.n	800cce0 <arm_cfft_q15+0x24>
 800cd76:	e7ef      	b.n	800cd58 <arm_cfft_q15+0x9c>

0800cd78 <arm_radix4_butterfly_q15>:
 800cd78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd7c:	b08f      	sub	sp, #60	@ 0x3c
 800cd7e:	469b      	mov	fp, r3
 800cd80:	9101      	str	r1, [sp, #4]
 800cd82:	0889      	lsrs	r1, r1, #2
 800cd84:	460e      	mov	r6, r1
 800cd86:	910d      	str	r1, [sp, #52]	@ 0x34
 800cd88:	0089      	lsls	r1, r1, #2
 800cd8a:	4607      	mov	r7, r0
 800cd8c:	900c      	str	r0, [sp, #48]	@ 0x30
 800cd8e:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 800cd92:	4408      	add	r0, r1
 800cd94:	2400      	movs	r4, #0
 800cd96:	1845      	adds	r5, r0, r1
 800cd98:	009b      	lsls	r3, r3, #2
 800cd9a:	4696      	mov	lr, r2
 800cd9c:	9209      	str	r2, [sp, #36]	@ 0x24
 800cd9e:	46b2      	mov	sl, r6
 800cda0:	4429      	add	r1, r5
 800cda2:	9302      	str	r3, [sp, #8]
 800cda4:	4626      	mov	r6, r4
 800cda6:	4622      	mov	r2, r4
 800cda8:	f8cd b000 	str.w	fp, [sp]
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	fa93 fc22 	shadd16	ip, r3, r2
 800cdb2:	fa9c fc22 	shadd16	ip, ip, r2
 800cdb6:	682b      	ldr	r3, [r5, #0]
 800cdb8:	fa93 f322 	shadd16	r3, r3, r2
 800cdbc:	fa93 f322 	shadd16	r3, r3, r2
 800cdc0:	fa9c f813 	qadd16	r8, ip, r3
 800cdc4:	fadc fc13 	qsub16	ip, ip, r3
 800cdc8:	6803      	ldr	r3, [r0, #0]
 800cdca:	fa93 f322 	shadd16	r3, r3, r2
 800cdce:	fa93 f922 	shadd16	r9, r3, r2
 800cdd2:	680b      	ldr	r3, [r1, #0]
 800cdd4:	fa93 f322 	shadd16	r3, r3, r2
 800cdd8:	fa93 f322 	shadd16	r3, r3, r2
 800cddc:	fa99 f313 	qadd16	r3, r9, r3
 800cde0:	fa98 f923 	shadd16	r9, r8, r3
 800cde4:	f847 9b04 	str.w	r9, [r7], #4
 800cde8:	fad8 f313 	qsub16	r3, r8, r3
 800cdec:	f85e 9036 	ldr.w	r9, [lr, r6, lsl #3]
 800cdf0:	fb29 fb03 	smuad	fp, r9, r3
 800cdf4:	fb49 f913 	smusdx	r9, r9, r3
 800cdf8:	6803      	ldr	r3, [r0, #0]
 800cdfa:	fa93 f322 	shadd16	r3, r3, r2
 800cdfe:	fa93 f822 	shadd16	r8, r3, r2
 800ce02:	ea4f 4919 	mov.w	r9, r9, lsr #16
 800ce06:	ea4f 4909 	mov.w	r9, r9, lsl #16
 800ce0a:	ea49 431b 	orr.w	r3, r9, fp, lsr #16
 800ce0e:	f840 3b04 	str.w	r3, [r0], #4
 800ce12:	680b      	ldr	r3, [r1, #0]
 800ce14:	fa93 f322 	shadd16	r3, r3, r2
 800ce18:	fa93 f322 	shadd16	r3, r3, r2
 800ce1c:	fad8 f313 	qsub16	r3, r8, r3
 800ce20:	faac f913 	qasx	r9, ip, r3
 800ce24:	faec fc13 	qsax	ip, ip, r3
 800ce28:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 800ce2c:	fb23 f80c 	smuad	r8, r3, ip
 800ce30:	fb43 f31c 	smusdx	r3, r3, ip
 800ce34:	0c1b      	lsrs	r3, r3, #16
 800ce36:	041b      	lsls	r3, r3, #16
 800ce38:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800ce3c:	f845 3b04 	str.w	r3, [r5], #4
 800ce40:	f85e 3004 	ldr.w	r3, [lr, r4]
 800ce44:	fb23 fc09 	smuad	ip, r3, r9
 800ce48:	fb43 f319 	smusdx	r3, r3, r9
 800ce4c:	0c1b      	lsrs	r3, r3, #16
 800ce4e:	041b      	lsls	r3, r3, #16
 800ce50:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 800ce54:	f841 3b04 	str.w	r3, [r1], #4
 800ce58:	9b00      	ldr	r3, [sp, #0]
 800ce5a:	441e      	add	r6, r3
 800ce5c:	9b02      	ldr	r3, [sp, #8]
 800ce5e:	f1ba 0a01 	subs.w	sl, sl, #1
 800ce62:	441c      	add	r4, r3
 800ce64:	d1a2      	bne.n	800cdac <arm_radix4_butterfly_q15+0x34>
 800ce66:	f8dd b000 	ldr.w	fp, [sp]
 800ce6a:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800ce6e:	9306      	str	r3, [sp, #24]
 800ce70:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ce72:	2b04      	cmp	r3, #4
 800ce74:	f240 8081 	bls.w	800cf7a <arm_radix4_butterfly_q15+0x202>
 800ce78:	f8cd a008 	str.w	sl, [sp, #8]
 800ce7c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce7e:	469a      	mov	sl, r3
 800ce80:	ea4f 039a 	mov.w	r3, sl, lsr #2
 800ce84:	2200      	movs	r2, #0
 800ce86:	4611      	mov	r1, r2
 800ce88:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ce8a:	9204      	str	r2, [sp, #16]
 800ce8c:	1e5a      	subs	r2, r3, #1
 800ce8e:	009b      	lsls	r3, r3, #2
 800ce90:	9308      	str	r3, [sp, #32]
 800ce92:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ce94:	9207      	str	r2, [sp, #28]
 800ce96:	9105      	str	r1, [sp, #20]
 800ce98:	ea4f 078a 	mov.w	r7, sl, lsl #2
 800ce9c:	9303      	str	r3, [sp, #12]
 800ce9e:	9908      	ldr	r1, [sp, #32]
 800cea0:	9a03      	ldr	r2, [sp, #12]
 800cea2:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800cea4:	1850      	adds	r0, r2, r1
 800cea6:	9a05      	ldr	r2, [sp, #20]
 800cea8:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800ceac:	f856 c022 	ldr.w	ip, [r6, r2, lsl #2]
 800ceb0:	f856 9023 	ldr.w	r9, [r6, r3, lsl #2]
 800ceb4:	9b06      	ldr	r3, [sp, #24]
 800ceb6:	f856 8032 	ldr.w	r8, [r6, r2, lsl #3]
 800ceba:	18d3      	adds	r3, r2, r3
 800cebc:	9305      	str	r3, [sp, #20]
 800cebe:	9a04      	ldr	r2, [sp, #16]
 800cec0:	9b01      	ldr	r3, [sp, #4]
 800cec2:	1845      	adds	r5, r0, r1
 800cec4:	4293      	cmp	r3, r2
 800cec6:	46b6      	mov	lr, r6
 800cec8:	eb05 0401 	add.w	r4, r5, r1
 800cecc:	9e03      	ldr	r6, [sp, #12]
 800cece:	d941      	bls.n	800cf54 <arm_radix4_butterfly_q15+0x1dc>
 800ced0:	eb02 0e0a 	add.w	lr, r2, sl
 800ced4:	6833      	ldr	r3, [r6, #0]
 800ced6:	682a      	ldr	r2, [r5, #0]
 800ced8:	fa93 fb12 	qadd16	fp, r3, r2
 800cedc:	fad3 f312 	qsub16	r3, r3, r2
 800cee0:	9300      	str	r3, [sp, #0]
 800cee2:	6802      	ldr	r2, [r0, #0]
 800cee4:	6821      	ldr	r1, [r4, #0]
 800cee6:	fa92 f211 	qadd16	r2, r2, r1
 800ceea:	fa9b f322 	shadd16	r3, fp, r2
 800ceee:	9902      	ldr	r1, [sp, #8]
 800cef0:	fa93 f121 	shadd16	r1, r3, r1
 800cef4:	6031      	str	r1, [r6, #0]
 800cef6:	443e      	add	r6, r7
 800cef8:	fadb f222 	shsub16	r2, fp, r2
 800cefc:	fb28 f102 	smuad	r1, r8, r2
 800cf00:	fb48 f212 	smusdx	r2, r8, r2
 800cf04:	0c12      	lsrs	r2, r2, #16
 800cf06:	0412      	lsls	r2, r2, #16
 800cf08:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 800cf0c:	6801      	ldr	r1, [r0, #0]
 800cf0e:	6002      	str	r2, [r0, #0]
 800cf10:	6822      	ldr	r2, [r4, #0]
 800cf12:	4438      	add	r0, r7
 800cf14:	fad1 f212 	qsub16	r2, r1, r2
 800cf18:	9b00      	ldr	r3, [sp, #0]
 800cf1a:	faa3 f122 	shasx	r1, r3, r2
 800cf1e:	fae3 f322 	shsax	r3, r3, r2
 800cf22:	fb2c fb03 	smuad	fp, ip, r3
 800cf26:	fb4c f313 	smusdx	r3, ip, r3
 800cf2a:	0c1b      	lsrs	r3, r3, #16
 800cf2c:	041b      	lsls	r3, r3, #16
 800cf2e:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 800cf32:	602b      	str	r3, [r5, #0]
 800cf34:	443d      	add	r5, r7
 800cf36:	fb29 f301 	smuad	r3, r9, r1
 800cf3a:	fb49 f111 	smusdx	r1, r9, r1
 800cf3e:	0c09      	lsrs	r1, r1, #16
 800cf40:	0409      	lsls	r1, r1, #16
 800cf42:	9a01      	ldr	r2, [sp, #4]
 800cf44:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
 800cf48:	4673      	mov	r3, lr
 800cf4a:	429a      	cmp	r2, r3
 800cf4c:	6021      	str	r1, [r4, #0]
 800cf4e:	44d6      	add	lr, sl
 800cf50:	443c      	add	r4, r7
 800cf52:	d8bf      	bhi.n	800ced4 <arm_radix4_butterfly_q15+0x15c>
 800cf54:	9a03      	ldr	r2, [sp, #12]
 800cf56:	9b04      	ldr	r3, [sp, #16]
 800cf58:	3204      	adds	r2, #4
 800cf5a:	9203      	str	r2, [sp, #12]
 800cf5c:	9a07      	ldr	r2, [sp, #28]
 800cf5e:	3301      	adds	r3, #1
 800cf60:	4293      	cmp	r3, r2
 800cf62:	9304      	str	r3, [sp, #16]
 800cf64:	d99b      	bls.n	800ce9e <arm_radix4_butterfly_q15+0x126>
 800cf66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf68:	9a06      	ldr	r2, [sp, #24]
 800cf6a:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
 800cf6e:	089b      	lsrs	r3, r3, #2
 800cf70:	0092      	lsls	r2, r2, #2
 800cf72:	2b04      	cmp	r3, #4
 800cf74:	930a      	str	r3, [sp, #40]	@ 0x28
 800cf76:	9206      	str	r2, [sp, #24]
 800cf78:	d882      	bhi.n	800ce80 <arm_radix4_butterfly_q15+0x108>
 800cf7a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800cf7c:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 800cf7e:	3410      	adds	r4, #16
 800cf80:	f854 3c10 	ldr.w	r3, [r4, #-16]
 800cf84:	f854 7c08 	ldr.w	r7, [r4, #-8]
 800cf88:	fa93 f117 	qadd16	r1, r3, r7
 800cf8c:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 800cf90:	f854 0c04 	ldr.w	r0, [r4, #-4]
 800cf94:	fa92 f510 	qadd16	r5, r2, r0
 800cf98:	fa91 f525 	shadd16	r5, r1, r5
 800cf9c:	f844 5c10 	str.w	r5, [r4, #-16]
 800cfa0:	fa92 f510 	qadd16	r5, r2, r0
 800cfa4:	fad1 f125 	shsub16	r1, r1, r5
 800cfa8:	f844 1c0c 	str.w	r1, [r4, #-12]
 800cfac:	fad3 f317 	qsub16	r3, r3, r7
 800cfb0:	fad2 f210 	qsub16	r2, r2, r0
 800cfb4:	fae3 f122 	shsax	r1, r3, r2
 800cfb8:	f844 1c08 	str.w	r1, [r4, #-8]
 800cfbc:	faa3 f322 	shasx	r3, r3, r2
 800cfc0:	3e01      	subs	r6, #1
 800cfc2:	f844 3c04 	str.w	r3, [r4, #-4]
 800cfc6:	f104 0410 	add.w	r4, r4, #16
 800cfca:	d1d9      	bne.n	800cf80 <arm_radix4_butterfly_q15+0x208>
 800cfcc:	b00f      	add	sp, #60	@ 0x3c
 800cfce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfd2:	bf00      	nop

0800cfd4 <arm_radix4_butterfly_inverse_q15>:
 800cfd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfd8:	b08f      	sub	sp, #60	@ 0x3c
 800cfda:	469b      	mov	fp, r3
 800cfdc:	9101      	str	r1, [sp, #4]
 800cfde:	0889      	lsrs	r1, r1, #2
 800cfe0:	460e      	mov	r6, r1
 800cfe2:	910d      	str	r1, [sp, #52]	@ 0x34
 800cfe4:	0089      	lsls	r1, r1, #2
 800cfe6:	4607      	mov	r7, r0
 800cfe8:	900c      	str	r0, [sp, #48]	@ 0x30
 800cfea:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 800cfee:	4408      	add	r0, r1
 800cff0:	2400      	movs	r4, #0
 800cff2:	1845      	adds	r5, r0, r1
 800cff4:	009b      	lsls	r3, r3, #2
 800cff6:	4696      	mov	lr, r2
 800cff8:	9209      	str	r2, [sp, #36]	@ 0x24
 800cffa:	46b2      	mov	sl, r6
 800cffc:	4429      	add	r1, r5
 800cffe:	9302      	str	r3, [sp, #8]
 800d000:	4626      	mov	r6, r4
 800d002:	4622      	mov	r2, r4
 800d004:	f8cd b000 	str.w	fp, [sp]
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	fa93 fc22 	shadd16	ip, r3, r2
 800d00e:	fa9c fc22 	shadd16	ip, ip, r2
 800d012:	682b      	ldr	r3, [r5, #0]
 800d014:	fa93 f322 	shadd16	r3, r3, r2
 800d018:	fa93 f322 	shadd16	r3, r3, r2
 800d01c:	fa9c f813 	qadd16	r8, ip, r3
 800d020:	fadc fc13 	qsub16	ip, ip, r3
 800d024:	6803      	ldr	r3, [r0, #0]
 800d026:	fa93 f322 	shadd16	r3, r3, r2
 800d02a:	fa93 f922 	shadd16	r9, r3, r2
 800d02e:	680b      	ldr	r3, [r1, #0]
 800d030:	fa93 f322 	shadd16	r3, r3, r2
 800d034:	fa93 f322 	shadd16	r3, r3, r2
 800d038:	fa99 f313 	qadd16	r3, r9, r3
 800d03c:	fa98 f923 	shadd16	r9, r8, r3
 800d040:	f847 9b04 	str.w	r9, [r7], #4
 800d044:	fad8 f313 	qsub16	r3, r8, r3
 800d048:	f85e 9036 	ldr.w	r9, [lr, r6, lsl #3]
 800d04c:	fb49 fb03 	smusd	fp, r9, r3
 800d050:	fb29 f913 	smuadx	r9, r9, r3
 800d054:	6803      	ldr	r3, [r0, #0]
 800d056:	fa93 f322 	shadd16	r3, r3, r2
 800d05a:	fa93 f822 	shadd16	r8, r3, r2
 800d05e:	ea4f 4919 	mov.w	r9, r9, lsr #16
 800d062:	ea4f 4909 	mov.w	r9, r9, lsl #16
 800d066:	ea49 431b 	orr.w	r3, r9, fp, lsr #16
 800d06a:	f840 3b04 	str.w	r3, [r0], #4
 800d06e:	680b      	ldr	r3, [r1, #0]
 800d070:	fa93 f322 	shadd16	r3, r3, r2
 800d074:	fa93 f322 	shadd16	r3, r3, r2
 800d078:	fad8 f313 	qsub16	r3, r8, r3
 800d07c:	faec f913 	qsax	r9, ip, r3
 800d080:	faac fc13 	qasx	ip, ip, r3
 800d084:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 800d088:	fb43 f80c 	smusd	r8, r3, ip
 800d08c:	fb23 f31c 	smuadx	r3, r3, ip
 800d090:	0c1b      	lsrs	r3, r3, #16
 800d092:	041b      	lsls	r3, r3, #16
 800d094:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800d098:	f845 3b04 	str.w	r3, [r5], #4
 800d09c:	f85e 3004 	ldr.w	r3, [lr, r4]
 800d0a0:	fb43 fc09 	smusd	ip, r3, r9
 800d0a4:	fb23 f319 	smuadx	r3, r3, r9
 800d0a8:	0c1b      	lsrs	r3, r3, #16
 800d0aa:	041b      	lsls	r3, r3, #16
 800d0ac:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 800d0b0:	f841 3b04 	str.w	r3, [r1], #4
 800d0b4:	9b00      	ldr	r3, [sp, #0]
 800d0b6:	441e      	add	r6, r3
 800d0b8:	9b02      	ldr	r3, [sp, #8]
 800d0ba:	f1ba 0a01 	subs.w	sl, sl, #1
 800d0be:	441c      	add	r4, r3
 800d0c0:	d1a2      	bne.n	800d008 <arm_radix4_butterfly_inverse_q15+0x34>
 800d0c2:	f8dd b000 	ldr.w	fp, [sp]
 800d0c6:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d0ca:	9306      	str	r3, [sp, #24]
 800d0cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d0ce:	2b04      	cmp	r3, #4
 800d0d0:	f240 8081 	bls.w	800d1d6 <arm_radix4_butterfly_inverse_q15+0x202>
 800d0d4:	f8cd a008 	str.w	sl, [sp, #8]
 800d0d8:	930a      	str	r3, [sp, #40]	@ 0x28
 800d0da:	469a      	mov	sl, r3
 800d0dc:	ea4f 039a 	mov.w	r3, sl, lsr #2
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	4611      	mov	r1, r2
 800d0e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d0e6:	9204      	str	r2, [sp, #16]
 800d0e8:	1e5a      	subs	r2, r3, #1
 800d0ea:	009b      	lsls	r3, r3, #2
 800d0ec:	9308      	str	r3, [sp, #32]
 800d0ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d0f0:	9207      	str	r2, [sp, #28]
 800d0f2:	9105      	str	r1, [sp, #20]
 800d0f4:	ea4f 078a 	mov.w	r7, sl, lsl #2
 800d0f8:	9303      	str	r3, [sp, #12]
 800d0fa:	9908      	ldr	r1, [sp, #32]
 800d0fc:	9a03      	ldr	r2, [sp, #12]
 800d0fe:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800d100:	1850      	adds	r0, r2, r1
 800d102:	9a05      	ldr	r2, [sp, #20]
 800d104:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800d108:	f856 c022 	ldr.w	ip, [r6, r2, lsl #2]
 800d10c:	f856 9023 	ldr.w	r9, [r6, r3, lsl #2]
 800d110:	9b06      	ldr	r3, [sp, #24]
 800d112:	f856 8032 	ldr.w	r8, [r6, r2, lsl #3]
 800d116:	18d3      	adds	r3, r2, r3
 800d118:	9305      	str	r3, [sp, #20]
 800d11a:	9a04      	ldr	r2, [sp, #16]
 800d11c:	9b01      	ldr	r3, [sp, #4]
 800d11e:	1845      	adds	r5, r0, r1
 800d120:	4293      	cmp	r3, r2
 800d122:	46b6      	mov	lr, r6
 800d124:	eb05 0401 	add.w	r4, r5, r1
 800d128:	9e03      	ldr	r6, [sp, #12]
 800d12a:	d941      	bls.n	800d1b0 <arm_radix4_butterfly_inverse_q15+0x1dc>
 800d12c:	eb02 0e0a 	add.w	lr, r2, sl
 800d130:	6833      	ldr	r3, [r6, #0]
 800d132:	682a      	ldr	r2, [r5, #0]
 800d134:	fa93 fb12 	qadd16	fp, r3, r2
 800d138:	fad3 f312 	qsub16	r3, r3, r2
 800d13c:	9300      	str	r3, [sp, #0]
 800d13e:	6802      	ldr	r2, [r0, #0]
 800d140:	6821      	ldr	r1, [r4, #0]
 800d142:	fa92 f211 	qadd16	r2, r2, r1
 800d146:	fa9b f322 	shadd16	r3, fp, r2
 800d14a:	9902      	ldr	r1, [sp, #8]
 800d14c:	fa93 f121 	shadd16	r1, r3, r1
 800d150:	6031      	str	r1, [r6, #0]
 800d152:	443e      	add	r6, r7
 800d154:	fadb f222 	shsub16	r2, fp, r2
 800d158:	fb48 f102 	smusd	r1, r8, r2
 800d15c:	fb28 f212 	smuadx	r2, r8, r2
 800d160:	0c12      	lsrs	r2, r2, #16
 800d162:	0412      	lsls	r2, r2, #16
 800d164:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 800d168:	6801      	ldr	r1, [r0, #0]
 800d16a:	6002      	str	r2, [r0, #0]
 800d16c:	6822      	ldr	r2, [r4, #0]
 800d16e:	4438      	add	r0, r7
 800d170:	fad1 f212 	qsub16	r2, r1, r2
 800d174:	9b00      	ldr	r3, [sp, #0]
 800d176:	fae3 f122 	shsax	r1, r3, r2
 800d17a:	faa3 f322 	shasx	r3, r3, r2
 800d17e:	fb4c fb03 	smusd	fp, ip, r3
 800d182:	fb2c f313 	smuadx	r3, ip, r3
 800d186:	0c1b      	lsrs	r3, r3, #16
 800d188:	041b      	lsls	r3, r3, #16
 800d18a:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 800d18e:	602b      	str	r3, [r5, #0]
 800d190:	443d      	add	r5, r7
 800d192:	fb49 f301 	smusd	r3, r9, r1
 800d196:	fb29 f111 	smuadx	r1, r9, r1
 800d19a:	0c09      	lsrs	r1, r1, #16
 800d19c:	0409      	lsls	r1, r1, #16
 800d19e:	9a01      	ldr	r2, [sp, #4]
 800d1a0:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
 800d1a4:	4673      	mov	r3, lr
 800d1a6:	429a      	cmp	r2, r3
 800d1a8:	6021      	str	r1, [r4, #0]
 800d1aa:	44d6      	add	lr, sl
 800d1ac:	443c      	add	r4, r7
 800d1ae:	d8bf      	bhi.n	800d130 <arm_radix4_butterfly_inverse_q15+0x15c>
 800d1b0:	9a03      	ldr	r2, [sp, #12]
 800d1b2:	9b04      	ldr	r3, [sp, #16]
 800d1b4:	3204      	adds	r2, #4
 800d1b6:	9203      	str	r2, [sp, #12]
 800d1b8:	9a07      	ldr	r2, [sp, #28]
 800d1ba:	3301      	adds	r3, #1
 800d1bc:	4293      	cmp	r3, r2
 800d1be:	9304      	str	r3, [sp, #16]
 800d1c0:	d99b      	bls.n	800d0fa <arm_radix4_butterfly_inverse_q15+0x126>
 800d1c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d1c4:	9a06      	ldr	r2, [sp, #24]
 800d1c6:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
 800d1ca:	089b      	lsrs	r3, r3, #2
 800d1cc:	0092      	lsls	r2, r2, #2
 800d1ce:	2b04      	cmp	r3, #4
 800d1d0:	930a      	str	r3, [sp, #40]	@ 0x28
 800d1d2:	9206      	str	r2, [sp, #24]
 800d1d4:	d882      	bhi.n	800d0dc <arm_radix4_butterfly_inverse_q15+0x108>
 800d1d6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800d1d8:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 800d1da:	3410      	adds	r4, #16
 800d1dc:	f854 3c10 	ldr.w	r3, [r4, #-16]
 800d1e0:	f854 7c08 	ldr.w	r7, [r4, #-8]
 800d1e4:	fa93 f117 	qadd16	r1, r3, r7
 800d1e8:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 800d1ec:	f854 0c04 	ldr.w	r0, [r4, #-4]
 800d1f0:	fa92 f510 	qadd16	r5, r2, r0
 800d1f4:	fa91 f525 	shadd16	r5, r1, r5
 800d1f8:	f844 5c10 	str.w	r5, [r4, #-16]
 800d1fc:	fa92 f510 	qadd16	r5, r2, r0
 800d200:	fad1 f125 	shsub16	r1, r1, r5
 800d204:	f844 1c0c 	str.w	r1, [r4, #-12]
 800d208:	fad3 f317 	qsub16	r3, r3, r7
 800d20c:	fad2 f210 	qsub16	r2, r2, r0
 800d210:	faa3 f122 	shasx	r1, r3, r2
 800d214:	f844 1c08 	str.w	r1, [r4, #-8]
 800d218:	fae3 f322 	shsax	r3, r3, r2
 800d21c:	3e01      	subs	r6, #1
 800d21e:	f844 3c04 	str.w	r3, [r4, #-4]
 800d222:	f104 0410 	add.w	r4, r4, #16
 800d226:	d1d9      	bne.n	800d1dc <arm_radix4_butterfly_inverse_q15+0x208>
 800d228:	b00f      	add	sp, #60	@ 0x3c
 800d22a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d22e:	bf00      	nop

0800d230 <malloc>:
 800d230:	4b02      	ldr	r3, [pc, #8]	@ (800d23c <malloc+0xc>)
 800d232:	4601      	mov	r1, r0
 800d234:	6818      	ldr	r0, [r3, #0]
 800d236:	f000 b82d 	b.w	800d294 <_malloc_r>
 800d23a:	bf00      	nop
 800d23c:	2000003c 	.word	0x2000003c

0800d240 <free>:
 800d240:	4b02      	ldr	r3, [pc, #8]	@ (800d24c <free+0xc>)
 800d242:	4601      	mov	r1, r0
 800d244:	6818      	ldr	r0, [r3, #0]
 800d246:	f000 b903 	b.w	800d450 <_free_r>
 800d24a:	bf00      	nop
 800d24c:	2000003c 	.word	0x2000003c

0800d250 <sbrk_aligned>:
 800d250:	b570      	push	{r4, r5, r6, lr}
 800d252:	4e0f      	ldr	r6, [pc, #60]	@ (800d290 <sbrk_aligned+0x40>)
 800d254:	460c      	mov	r4, r1
 800d256:	6831      	ldr	r1, [r6, #0]
 800d258:	4605      	mov	r5, r0
 800d25a:	b911      	cbnz	r1, 800d262 <sbrk_aligned+0x12>
 800d25c:	f000 f8ae 	bl	800d3bc <_sbrk_r>
 800d260:	6030      	str	r0, [r6, #0]
 800d262:	4621      	mov	r1, r4
 800d264:	4628      	mov	r0, r5
 800d266:	f000 f8a9 	bl	800d3bc <_sbrk_r>
 800d26a:	1c43      	adds	r3, r0, #1
 800d26c:	d103      	bne.n	800d276 <sbrk_aligned+0x26>
 800d26e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d272:	4620      	mov	r0, r4
 800d274:	bd70      	pop	{r4, r5, r6, pc}
 800d276:	1cc4      	adds	r4, r0, #3
 800d278:	f024 0403 	bic.w	r4, r4, #3
 800d27c:	42a0      	cmp	r0, r4
 800d27e:	d0f8      	beq.n	800d272 <sbrk_aligned+0x22>
 800d280:	1a21      	subs	r1, r4, r0
 800d282:	4628      	mov	r0, r5
 800d284:	f000 f89a 	bl	800d3bc <_sbrk_r>
 800d288:	3001      	adds	r0, #1
 800d28a:	d1f2      	bne.n	800d272 <sbrk_aligned+0x22>
 800d28c:	e7ef      	b.n	800d26e <sbrk_aligned+0x1e>
 800d28e:	bf00      	nop
 800d290:	20003da4 	.word	0x20003da4

0800d294 <_malloc_r>:
 800d294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d298:	1ccd      	adds	r5, r1, #3
 800d29a:	f025 0503 	bic.w	r5, r5, #3
 800d29e:	3508      	adds	r5, #8
 800d2a0:	2d0c      	cmp	r5, #12
 800d2a2:	bf38      	it	cc
 800d2a4:	250c      	movcc	r5, #12
 800d2a6:	2d00      	cmp	r5, #0
 800d2a8:	4606      	mov	r6, r0
 800d2aa:	db01      	blt.n	800d2b0 <_malloc_r+0x1c>
 800d2ac:	42a9      	cmp	r1, r5
 800d2ae:	d904      	bls.n	800d2ba <_malloc_r+0x26>
 800d2b0:	230c      	movs	r3, #12
 800d2b2:	6033      	str	r3, [r6, #0]
 800d2b4:	2000      	movs	r0, #0
 800d2b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d390 <_malloc_r+0xfc>
 800d2be:	f000 f869 	bl	800d394 <__malloc_lock>
 800d2c2:	f8d8 3000 	ldr.w	r3, [r8]
 800d2c6:	461c      	mov	r4, r3
 800d2c8:	bb44      	cbnz	r4, 800d31c <_malloc_r+0x88>
 800d2ca:	4629      	mov	r1, r5
 800d2cc:	4630      	mov	r0, r6
 800d2ce:	f7ff ffbf 	bl	800d250 <sbrk_aligned>
 800d2d2:	1c43      	adds	r3, r0, #1
 800d2d4:	4604      	mov	r4, r0
 800d2d6:	d158      	bne.n	800d38a <_malloc_r+0xf6>
 800d2d8:	f8d8 4000 	ldr.w	r4, [r8]
 800d2dc:	4627      	mov	r7, r4
 800d2de:	2f00      	cmp	r7, #0
 800d2e0:	d143      	bne.n	800d36a <_malloc_r+0xd6>
 800d2e2:	2c00      	cmp	r4, #0
 800d2e4:	d04b      	beq.n	800d37e <_malloc_r+0xea>
 800d2e6:	6823      	ldr	r3, [r4, #0]
 800d2e8:	4639      	mov	r1, r7
 800d2ea:	4630      	mov	r0, r6
 800d2ec:	eb04 0903 	add.w	r9, r4, r3
 800d2f0:	f000 f864 	bl	800d3bc <_sbrk_r>
 800d2f4:	4581      	cmp	r9, r0
 800d2f6:	d142      	bne.n	800d37e <_malloc_r+0xea>
 800d2f8:	6821      	ldr	r1, [r4, #0]
 800d2fa:	1a6d      	subs	r5, r5, r1
 800d2fc:	4629      	mov	r1, r5
 800d2fe:	4630      	mov	r0, r6
 800d300:	f7ff ffa6 	bl	800d250 <sbrk_aligned>
 800d304:	3001      	adds	r0, #1
 800d306:	d03a      	beq.n	800d37e <_malloc_r+0xea>
 800d308:	6823      	ldr	r3, [r4, #0]
 800d30a:	442b      	add	r3, r5
 800d30c:	6023      	str	r3, [r4, #0]
 800d30e:	f8d8 3000 	ldr.w	r3, [r8]
 800d312:	685a      	ldr	r2, [r3, #4]
 800d314:	bb62      	cbnz	r2, 800d370 <_malloc_r+0xdc>
 800d316:	f8c8 7000 	str.w	r7, [r8]
 800d31a:	e00f      	b.n	800d33c <_malloc_r+0xa8>
 800d31c:	6822      	ldr	r2, [r4, #0]
 800d31e:	1b52      	subs	r2, r2, r5
 800d320:	d420      	bmi.n	800d364 <_malloc_r+0xd0>
 800d322:	2a0b      	cmp	r2, #11
 800d324:	d917      	bls.n	800d356 <_malloc_r+0xc2>
 800d326:	1961      	adds	r1, r4, r5
 800d328:	42a3      	cmp	r3, r4
 800d32a:	6025      	str	r5, [r4, #0]
 800d32c:	bf18      	it	ne
 800d32e:	6059      	strne	r1, [r3, #4]
 800d330:	6863      	ldr	r3, [r4, #4]
 800d332:	bf08      	it	eq
 800d334:	f8c8 1000 	streq.w	r1, [r8]
 800d338:	5162      	str	r2, [r4, r5]
 800d33a:	604b      	str	r3, [r1, #4]
 800d33c:	4630      	mov	r0, r6
 800d33e:	f000 f82f 	bl	800d3a0 <__malloc_unlock>
 800d342:	f104 000b 	add.w	r0, r4, #11
 800d346:	1d23      	adds	r3, r4, #4
 800d348:	f020 0007 	bic.w	r0, r0, #7
 800d34c:	1ac2      	subs	r2, r0, r3
 800d34e:	bf1c      	itt	ne
 800d350:	1a1b      	subne	r3, r3, r0
 800d352:	50a3      	strne	r3, [r4, r2]
 800d354:	e7af      	b.n	800d2b6 <_malloc_r+0x22>
 800d356:	6862      	ldr	r2, [r4, #4]
 800d358:	42a3      	cmp	r3, r4
 800d35a:	bf0c      	ite	eq
 800d35c:	f8c8 2000 	streq.w	r2, [r8]
 800d360:	605a      	strne	r2, [r3, #4]
 800d362:	e7eb      	b.n	800d33c <_malloc_r+0xa8>
 800d364:	4623      	mov	r3, r4
 800d366:	6864      	ldr	r4, [r4, #4]
 800d368:	e7ae      	b.n	800d2c8 <_malloc_r+0x34>
 800d36a:	463c      	mov	r4, r7
 800d36c:	687f      	ldr	r7, [r7, #4]
 800d36e:	e7b6      	b.n	800d2de <_malloc_r+0x4a>
 800d370:	461a      	mov	r2, r3
 800d372:	685b      	ldr	r3, [r3, #4]
 800d374:	42a3      	cmp	r3, r4
 800d376:	d1fb      	bne.n	800d370 <_malloc_r+0xdc>
 800d378:	2300      	movs	r3, #0
 800d37a:	6053      	str	r3, [r2, #4]
 800d37c:	e7de      	b.n	800d33c <_malloc_r+0xa8>
 800d37e:	230c      	movs	r3, #12
 800d380:	6033      	str	r3, [r6, #0]
 800d382:	4630      	mov	r0, r6
 800d384:	f000 f80c 	bl	800d3a0 <__malloc_unlock>
 800d388:	e794      	b.n	800d2b4 <_malloc_r+0x20>
 800d38a:	6005      	str	r5, [r0, #0]
 800d38c:	e7d6      	b.n	800d33c <_malloc_r+0xa8>
 800d38e:	bf00      	nop
 800d390:	20003da8 	.word	0x20003da8

0800d394 <__malloc_lock>:
 800d394:	4801      	ldr	r0, [pc, #4]	@ (800d39c <__malloc_lock+0x8>)
 800d396:	f000 b84b 	b.w	800d430 <__retarget_lock_acquire_recursive>
 800d39a:	bf00      	nop
 800d39c:	20003ee8 	.word	0x20003ee8

0800d3a0 <__malloc_unlock>:
 800d3a0:	4801      	ldr	r0, [pc, #4]	@ (800d3a8 <__malloc_unlock+0x8>)
 800d3a2:	f000 b846 	b.w	800d432 <__retarget_lock_release_recursive>
 800d3a6:	bf00      	nop
 800d3a8:	20003ee8 	.word	0x20003ee8

0800d3ac <memset>:
 800d3ac:	4402      	add	r2, r0
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	4293      	cmp	r3, r2
 800d3b2:	d100      	bne.n	800d3b6 <memset+0xa>
 800d3b4:	4770      	bx	lr
 800d3b6:	f803 1b01 	strb.w	r1, [r3], #1
 800d3ba:	e7f9      	b.n	800d3b0 <memset+0x4>

0800d3bc <_sbrk_r>:
 800d3bc:	b538      	push	{r3, r4, r5, lr}
 800d3be:	4d06      	ldr	r5, [pc, #24]	@ (800d3d8 <_sbrk_r+0x1c>)
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	4604      	mov	r4, r0
 800d3c4:	4608      	mov	r0, r1
 800d3c6:	602b      	str	r3, [r5, #0]
 800d3c8:	f7f4 fe92 	bl	80020f0 <_sbrk>
 800d3cc:	1c43      	adds	r3, r0, #1
 800d3ce:	d102      	bne.n	800d3d6 <_sbrk_r+0x1a>
 800d3d0:	682b      	ldr	r3, [r5, #0]
 800d3d2:	b103      	cbz	r3, 800d3d6 <_sbrk_r+0x1a>
 800d3d4:	6023      	str	r3, [r4, #0]
 800d3d6:	bd38      	pop	{r3, r4, r5, pc}
 800d3d8:	20003ee4 	.word	0x20003ee4

0800d3dc <__errno>:
 800d3dc:	4b01      	ldr	r3, [pc, #4]	@ (800d3e4 <__errno+0x8>)
 800d3de:	6818      	ldr	r0, [r3, #0]
 800d3e0:	4770      	bx	lr
 800d3e2:	bf00      	nop
 800d3e4:	2000003c 	.word	0x2000003c

0800d3e8 <__libc_init_array>:
 800d3e8:	b570      	push	{r4, r5, r6, lr}
 800d3ea:	4d0d      	ldr	r5, [pc, #52]	@ (800d420 <__libc_init_array+0x38>)
 800d3ec:	4c0d      	ldr	r4, [pc, #52]	@ (800d424 <__libc_init_array+0x3c>)
 800d3ee:	1b64      	subs	r4, r4, r5
 800d3f0:	10a4      	asrs	r4, r4, #2
 800d3f2:	2600      	movs	r6, #0
 800d3f4:	42a6      	cmp	r6, r4
 800d3f6:	d109      	bne.n	800d40c <__libc_init_array+0x24>
 800d3f8:	4d0b      	ldr	r5, [pc, #44]	@ (800d428 <__libc_init_array+0x40>)
 800d3fa:	4c0c      	ldr	r4, [pc, #48]	@ (800d42c <__libc_init_array+0x44>)
 800d3fc:	f000 f978 	bl	800d6f0 <_init>
 800d400:	1b64      	subs	r4, r4, r5
 800d402:	10a4      	asrs	r4, r4, #2
 800d404:	2600      	movs	r6, #0
 800d406:	42a6      	cmp	r6, r4
 800d408:	d105      	bne.n	800d416 <__libc_init_array+0x2e>
 800d40a:	bd70      	pop	{r4, r5, r6, pc}
 800d40c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d410:	4798      	blx	r3
 800d412:	3601      	adds	r6, #1
 800d414:	e7ee      	b.n	800d3f4 <__libc_init_array+0xc>
 800d416:	f855 3b04 	ldr.w	r3, [r5], #4
 800d41a:	4798      	blx	r3
 800d41c:	3601      	adds	r6, #1
 800d41e:	e7f2      	b.n	800d406 <__libc_init_array+0x1e>
 800d420:	0801f58c 	.word	0x0801f58c
 800d424:	0801f58c 	.word	0x0801f58c
 800d428:	0801f58c 	.word	0x0801f58c
 800d42c:	0801f590 	.word	0x0801f590

0800d430 <__retarget_lock_acquire_recursive>:
 800d430:	4770      	bx	lr

0800d432 <__retarget_lock_release_recursive>:
 800d432:	4770      	bx	lr

0800d434 <memcpy>:
 800d434:	440a      	add	r2, r1
 800d436:	4291      	cmp	r1, r2
 800d438:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d43c:	d100      	bne.n	800d440 <memcpy+0xc>
 800d43e:	4770      	bx	lr
 800d440:	b510      	push	{r4, lr}
 800d442:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d446:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d44a:	4291      	cmp	r1, r2
 800d44c:	d1f9      	bne.n	800d442 <memcpy+0xe>
 800d44e:	bd10      	pop	{r4, pc}

0800d450 <_free_r>:
 800d450:	b538      	push	{r3, r4, r5, lr}
 800d452:	4605      	mov	r5, r0
 800d454:	2900      	cmp	r1, #0
 800d456:	d041      	beq.n	800d4dc <_free_r+0x8c>
 800d458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d45c:	1f0c      	subs	r4, r1, #4
 800d45e:	2b00      	cmp	r3, #0
 800d460:	bfb8      	it	lt
 800d462:	18e4      	addlt	r4, r4, r3
 800d464:	f7ff ff96 	bl	800d394 <__malloc_lock>
 800d468:	4a1d      	ldr	r2, [pc, #116]	@ (800d4e0 <_free_r+0x90>)
 800d46a:	6813      	ldr	r3, [r2, #0]
 800d46c:	b933      	cbnz	r3, 800d47c <_free_r+0x2c>
 800d46e:	6063      	str	r3, [r4, #4]
 800d470:	6014      	str	r4, [r2, #0]
 800d472:	4628      	mov	r0, r5
 800d474:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d478:	f7ff bf92 	b.w	800d3a0 <__malloc_unlock>
 800d47c:	42a3      	cmp	r3, r4
 800d47e:	d908      	bls.n	800d492 <_free_r+0x42>
 800d480:	6820      	ldr	r0, [r4, #0]
 800d482:	1821      	adds	r1, r4, r0
 800d484:	428b      	cmp	r3, r1
 800d486:	bf01      	itttt	eq
 800d488:	6819      	ldreq	r1, [r3, #0]
 800d48a:	685b      	ldreq	r3, [r3, #4]
 800d48c:	1809      	addeq	r1, r1, r0
 800d48e:	6021      	streq	r1, [r4, #0]
 800d490:	e7ed      	b.n	800d46e <_free_r+0x1e>
 800d492:	461a      	mov	r2, r3
 800d494:	685b      	ldr	r3, [r3, #4]
 800d496:	b10b      	cbz	r3, 800d49c <_free_r+0x4c>
 800d498:	42a3      	cmp	r3, r4
 800d49a:	d9fa      	bls.n	800d492 <_free_r+0x42>
 800d49c:	6811      	ldr	r1, [r2, #0]
 800d49e:	1850      	adds	r0, r2, r1
 800d4a0:	42a0      	cmp	r0, r4
 800d4a2:	d10b      	bne.n	800d4bc <_free_r+0x6c>
 800d4a4:	6820      	ldr	r0, [r4, #0]
 800d4a6:	4401      	add	r1, r0
 800d4a8:	1850      	adds	r0, r2, r1
 800d4aa:	4283      	cmp	r3, r0
 800d4ac:	6011      	str	r1, [r2, #0]
 800d4ae:	d1e0      	bne.n	800d472 <_free_r+0x22>
 800d4b0:	6818      	ldr	r0, [r3, #0]
 800d4b2:	685b      	ldr	r3, [r3, #4]
 800d4b4:	6053      	str	r3, [r2, #4]
 800d4b6:	4408      	add	r0, r1
 800d4b8:	6010      	str	r0, [r2, #0]
 800d4ba:	e7da      	b.n	800d472 <_free_r+0x22>
 800d4bc:	d902      	bls.n	800d4c4 <_free_r+0x74>
 800d4be:	230c      	movs	r3, #12
 800d4c0:	602b      	str	r3, [r5, #0]
 800d4c2:	e7d6      	b.n	800d472 <_free_r+0x22>
 800d4c4:	6820      	ldr	r0, [r4, #0]
 800d4c6:	1821      	adds	r1, r4, r0
 800d4c8:	428b      	cmp	r3, r1
 800d4ca:	bf04      	itt	eq
 800d4cc:	6819      	ldreq	r1, [r3, #0]
 800d4ce:	685b      	ldreq	r3, [r3, #4]
 800d4d0:	6063      	str	r3, [r4, #4]
 800d4d2:	bf04      	itt	eq
 800d4d4:	1809      	addeq	r1, r1, r0
 800d4d6:	6021      	streq	r1, [r4, #0]
 800d4d8:	6054      	str	r4, [r2, #4]
 800d4da:	e7ca      	b.n	800d472 <_free_r+0x22>
 800d4dc:	bd38      	pop	{r3, r4, r5, pc}
 800d4de:	bf00      	nop
 800d4e0:	20003da8 	.word	0x20003da8

0800d4e4 <sqrt>:
 800d4e4:	b538      	push	{r3, r4, r5, lr}
 800d4e6:	ed2d 8b02 	vpush	{d8}
 800d4ea:	ec55 4b10 	vmov	r4, r5, d0
 800d4ee:	f000 f825 	bl	800d53c <__ieee754_sqrt>
 800d4f2:	4622      	mov	r2, r4
 800d4f4:	462b      	mov	r3, r5
 800d4f6:	4620      	mov	r0, r4
 800d4f8:	4629      	mov	r1, r5
 800d4fa:	eeb0 8a40 	vmov.f32	s16, s0
 800d4fe:	eef0 8a60 	vmov.f32	s17, s1
 800d502:	f7f3 fb17 	bl	8000b34 <__aeabi_dcmpun>
 800d506:	b990      	cbnz	r0, 800d52e <sqrt+0x4a>
 800d508:	2200      	movs	r2, #0
 800d50a:	2300      	movs	r3, #0
 800d50c:	4620      	mov	r0, r4
 800d50e:	4629      	mov	r1, r5
 800d510:	f7f3 fae8 	bl	8000ae4 <__aeabi_dcmplt>
 800d514:	b158      	cbz	r0, 800d52e <sqrt+0x4a>
 800d516:	f7ff ff61 	bl	800d3dc <__errno>
 800d51a:	2321      	movs	r3, #33	@ 0x21
 800d51c:	6003      	str	r3, [r0, #0]
 800d51e:	2200      	movs	r2, #0
 800d520:	2300      	movs	r3, #0
 800d522:	4610      	mov	r0, r2
 800d524:	4619      	mov	r1, r3
 800d526:	f7f3 f995 	bl	8000854 <__aeabi_ddiv>
 800d52a:	ec41 0b18 	vmov	d8, r0, r1
 800d52e:	eeb0 0a48 	vmov.f32	s0, s16
 800d532:	eef0 0a68 	vmov.f32	s1, s17
 800d536:	ecbd 8b02 	vpop	{d8}
 800d53a:	bd38      	pop	{r3, r4, r5, pc}

0800d53c <__ieee754_sqrt>:
 800d53c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d540:	4a68      	ldr	r2, [pc, #416]	@ (800d6e4 <__ieee754_sqrt+0x1a8>)
 800d542:	ec55 4b10 	vmov	r4, r5, d0
 800d546:	43aa      	bics	r2, r5
 800d548:	462b      	mov	r3, r5
 800d54a:	4621      	mov	r1, r4
 800d54c:	d110      	bne.n	800d570 <__ieee754_sqrt+0x34>
 800d54e:	4622      	mov	r2, r4
 800d550:	4620      	mov	r0, r4
 800d552:	4629      	mov	r1, r5
 800d554:	f7f3 f854 	bl	8000600 <__aeabi_dmul>
 800d558:	4602      	mov	r2, r0
 800d55a:	460b      	mov	r3, r1
 800d55c:	4620      	mov	r0, r4
 800d55e:	4629      	mov	r1, r5
 800d560:	f7f2 fe98 	bl	8000294 <__adddf3>
 800d564:	4604      	mov	r4, r0
 800d566:	460d      	mov	r5, r1
 800d568:	ec45 4b10 	vmov	d0, r4, r5
 800d56c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d570:	2d00      	cmp	r5, #0
 800d572:	dc0e      	bgt.n	800d592 <__ieee754_sqrt+0x56>
 800d574:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800d578:	4322      	orrs	r2, r4
 800d57a:	d0f5      	beq.n	800d568 <__ieee754_sqrt+0x2c>
 800d57c:	b19d      	cbz	r5, 800d5a6 <__ieee754_sqrt+0x6a>
 800d57e:	4622      	mov	r2, r4
 800d580:	4620      	mov	r0, r4
 800d582:	4629      	mov	r1, r5
 800d584:	f7f2 fe84 	bl	8000290 <__aeabi_dsub>
 800d588:	4602      	mov	r2, r0
 800d58a:	460b      	mov	r3, r1
 800d58c:	f7f3 f962 	bl	8000854 <__aeabi_ddiv>
 800d590:	e7e8      	b.n	800d564 <__ieee754_sqrt+0x28>
 800d592:	152a      	asrs	r2, r5, #20
 800d594:	d115      	bne.n	800d5c2 <__ieee754_sqrt+0x86>
 800d596:	2000      	movs	r0, #0
 800d598:	e009      	b.n	800d5ae <__ieee754_sqrt+0x72>
 800d59a:	0acb      	lsrs	r3, r1, #11
 800d59c:	3a15      	subs	r2, #21
 800d59e:	0549      	lsls	r1, r1, #21
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d0fa      	beq.n	800d59a <__ieee754_sqrt+0x5e>
 800d5a4:	e7f7      	b.n	800d596 <__ieee754_sqrt+0x5a>
 800d5a6:	462a      	mov	r2, r5
 800d5a8:	e7fa      	b.n	800d5a0 <__ieee754_sqrt+0x64>
 800d5aa:	005b      	lsls	r3, r3, #1
 800d5ac:	3001      	adds	r0, #1
 800d5ae:	02dc      	lsls	r4, r3, #11
 800d5b0:	d5fb      	bpl.n	800d5aa <__ieee754_sqrt+0x6e>
 800d5b2:	1e44      	subs	r4, r0, #1
 800d5b4:	1b12      	subs	r2, r2, r4
 800d5b6:	f1c0 0420 	rsb	r4, r0, #32
 800d5ba:	fa21 f404 	lsr.w	r4, r1, r4
 800d5be:	4323      	orrs	r3, r4
 800d5c0:	4081      	lsls	r1, r0
 800d5c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d5c6:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800d5ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d5ce:	07d2      	lsls	r2, r2, #31
 800d5d0:	bf5c      	itt	pl
 800d5d2:	005b      	lslpl	r3, r3, #1
 800d5d4:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800d5d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d5dc:	bf58      	it	pl
 800d5de:	0049      	lslpl	r1, r1, #1
 800d5e0:	2600      	movs	r6, #0
 800d5e2:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800d5e6:	106d      	asrs	r5, r5, #1
 800d5e8:	0049      	lsls	r1, r1, #1
 800d5ea:	2016      	movs	r0, #22
 800d5ec:	4632      	mov	r2, r6
 800d5ee:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800d5f2:	1917      	adds	r7, r2, r4
 800d5f4:	429f      	cmp	r7, r3
 800d5f6:	bfde      	ittt	le
 800d5f8:	193a      	addle	r2, r7, r4
 800d5fa:	1bdb      	suble	r3, r3, r7
 800d5fc:	1936      	addle	r6, r6, r4
 800d5fe:	0fcf      	lsrs	r7, r1, #31
 800d600:	3801      	subs	r0, #1
 800d602:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800d606:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d60a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800d60e:	d1f0      	bne.n	800d5f2 <__ieee754_sqrt+0xb6>
 800d610:	4604      	mov	r4, r0
 800d612:	2720      	movs	r7, #32
 800d614:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800d618:	429a      	cmp	r2, r3
 800d61a:	eb00 0e0c 	add.w	lr, r0, ip
 800d61e:	db02      	blt.n	800d626 <__ieee754_sqrt+0xea>
 800d620:	d113      	bne.n	800d64a <__ieee754_sqrt+0x10e>
 800d622:	458e      	cmp	lr, r1
 800d624:	d811      	bhi.n	800d64a <__ieee754_sqrt+0x10e>
 800d626:	f1be 0f00 	cmp.w	lr, #0
 800d62a:	eb0e 000c 	add.w	r0, lr, ip
 800d62e:	da42      	bge.n	800d6b6 <__ieee754_sqrt+0x17a>
 800d630:	2800      	cmp	r0, #0
 800d632:	db40      	blt.n	800d6b6 <__ieee754_sqrt+0x17a>
 800d634:	f102 0801 	add.w	r8, r2, #1
 800d638:	1a9b      	subs	r3, r3, r2
 800d63a:	458e      	cmp	lr, r1
 800d63c:	bf88      	it	hi
 800d63e:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800d642:	eba1 010e 	sub.w	r1, r1, lr
 800d646:	4464      	add	r4, ip
 800d648:	4642      	mov	r2, r8
 800d64a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800d64e:	3f01      	subs	r7, #1
 800d650:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800d654:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d658:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800d65c:	d1dc      	bne.n	800d618 <__ieee754_sqrt+0xdc>
 800d65e:	4319      	orrs	r1, r3
 800d660:	d01b      	beq.n	800d69a <__ieee754_sqrt+0x15e>
 800d662:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800d6e8 <__ieee754_sqrt+0x1ac>
 800d666:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800d6ec <__ieee754_sqrt+0x1b0>
 800d66a:	e9da 0100 	ldrd	r0, r1, [sl]
 800d66e:	e9db 2300 	ldrd	r2, r3, [fp]
 800d672:	f7f2 fe0d 	bl	8000290 <__aeabi_dsub>
 800d676:	e9da 8900 	ldrd	r8, r9, [sl]
 800d67a:	4602      	mov	r2, r0
 800d67c:	460b      	mov	r3, r1
 800d67e:	4640      	mov	r0, r8
 800d680:	4649      	mov	r1, r9
 800d682:	f7f3 fa39 	bl	8000af8 <__aeabi_dcmple>
 800d686:	b140      	cbz	r0, 800d69a <__ieee754_sqrt+0x15e>
 800d688:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 800d68c:	e9da 0100 	ldrd	r0, r1, [sl]
 800d690:	e9db 2300 	ldrd	r2, r3, [fp]
 800d694:	d111      	bne.n	800d6ba <__ieee754_sqrt+0x17e>
 800d696:	3601      	adds	r6, #1
 800d698:	463c      	mov	r4, r7
 800d69a:	1072      	asrs	r2, r6, #1
 800d69c:	0863      	lsrs	r3, r4, #1
 800d69e:	07f1      	lsls	r1, r6, #31
 800d6a0:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800d6a4:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800d6a8:	bf48      	it	mi
 800d6aa:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800d6ae:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	e756      	b.n	800d564 <__ieee754_sqrt+0x28>
 800d6b6:	4690      	mov	r8, r2
 800d6b8:	e7be      	b.n	800d638 <__ieee754_sqrt+0xfc>
 800d6ba:	f7f2 fdeb 	bl	8000294 <__adddf3>
 800d6be:	e9da 8900 	ldrd	r8, r9, [sl]
 800d6c2:	4602      	mov	r2, r0
 800d6c4:	460b      	mov	r3, r1
 800d6c6:	4640      	mov	r0, r8
 800d6c8:	4649      	mov	r1, r9
 800d6ca:	f7f3 fa0b 	bl	8000ae4 <__aeabi_dcmplt>
 800d6ce:	b120      	cbz	r0, 800d6da <__ieee754_sqrt+0x19e>
 800d6d0:	1ca0      	adds	r0, r4, #2
 800d6d2:	bf08      	it	eq
 800d6d4:	3601      	addeq	r6, #1
 800d6d6:	3402      	adds	r4, #2
 800d6d8:	e7df      	b.n	800d69a <__ieee754_sqrt+0x15e>
 800d6da:	1c63      	adds	r3, r4, #1
 800d6dc:	f023 0401 	bic.w	r4, r3, #1
 800d6e0:	e7db      	b.n	800d69a <__ieee754_sqrt+0x15e>
 800d6e2:	bf00      	nop
 800d6e4:	7ff00000 	.word	0x7ff00000
 800d6e8:	20000098 	.word	0x20000098
 800d6ec:	20000090 	.word	0x20000090

0800d6f0 <_init>:
 800d6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6f2:	bf00      	nop
 800d6f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6f6:	bc08      	pop	{r3}
 800d6f8:	469e      	mov	lr, r3
 800d6fa:	4770      	bx	lr

0800d6fc <_fini>:
 800d6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6fe:	bf00      	nop
 800d700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d702:	bc08      	pop	{r3}
 800d704:	469e      	mov	lr, r3
 800d706:	4770      	bx	lr
