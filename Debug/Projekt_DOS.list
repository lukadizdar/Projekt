
Projekt_DOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f54  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00011e78  080090dc  080090dc  0000a0dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801af54  0801af54  0001c01c  2**0
                  CONTENTS
  4 .ARM          00000008  0801af54  0801af54  0001bf54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801af5c  0801af5c  0001c01c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801af5c  0801af5c  0001bf5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801af60  0801af60  0001bf60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  0801af64  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001c01c  2**0
                  CONTENTS
 10 .bss          00003928  2000001c  2000001c  0001c01c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20003944  20003944  0001c01c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001c01c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000237e4  00000000  00000000  0001c04c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005669  00000000  00000000  0003f830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b50  00000000  00000000  00044ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013e2  00000000  00000000  000469f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026be7  00000000  00000000  00047dd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000243b6  00000000  00000000  0006e9b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3e5d  00000000  00000000  00092d6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000b3  00000000  00000000  00176bcc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006fa0  00000000  00000000  00176c80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  0017dc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    0000513b  00000000  00000000  0017dc83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000178  00000000  00000000  00182dbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080090c4 	.word	0x080090c4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	080090c4 	.word	0x080090c4

080001c8 <arm_bitreversal_32>:
 80001c8:	1c4b      	adds	r3, r1, #1
 80001ca:	2b01      	cmp	r3, #1
 80001cc:	bf98      	it	ls
 80001ce:	4770      	bxls	lr
 80001d0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001d4:	1c91      	adds	r1, r2, #2
 80001d6:	089b      	lsrs	r3, r3, #2

080001d8 <arm_bitreversal_32_0>:
 80001d8:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001dc:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001e0:	880a      	ldrh	r2, [r1, #0]
 80001e2:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001e6:	4480      	add	r8, r0
 80001e8:	4481      	add	r9, r0
 80001ea:	4402      	add	r2, r0
 80001ec:	4484      	add	ip, r0
 80001ee:	f8d9 7000 	ldr.w	r7, [r9]
 80001f2:	f8d8 6000 	ldr.w	r6, [r8]
 80001f6:	6815      	ldr	r5, [r2, #0]
 80001f8:	f8dc 4000 	ldr.w	r4, [ip]
 80001fc:	f8c9 6000 	str.w	r6, [r9]
 8000200:	f8c8 7000 	str.w	r7, [r8]
 8000204:	f8cc 5000 	str.w	r5, [ip]
 8000208:	6014      	str	r4, [r2, #0]
 800020a:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800020e:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8000212:	6855      	ldr	r5, [r2, #4]
 8000214:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000218:	f8c9 6004 	str.w	r6, [r9, #4]
 800021c:	f8c8 7004 	str.w	r7, [r8, #4]
 8000220:	f8cc 5004 	str.w	r5, [ip, #4]
 8000224:	6054      	str	r4, [r2, #4]
 8000226:	3108      	adds	r1, #8
 8000228:	3b01      	subs	r3, #1
 800022a:	d1d5      	bne.n	80001d8 <arm_bitreversal_32_0>
 800022c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000230:	4770      	bx	lr

08000232 <arm_bitreversal_16>:
 8000232:	1c4b      	adds	r3, r1, #1
 8000234:	2b01      	cmp	r3, #1
 8000236:	bf98      	it	ls
 8000238:	4770      	bxls	lr
 800023a:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800023e:	1c91      	adds	r1, r2, #2
 8000240:	089b      	lsrs	r3, r3, #2

08000242 <arm_bitreversal_16_0>:
 8000242:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000246:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 800024a:	880a      	ldrh	r2, [r1, #0]
 800024c:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000250:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 8000254:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000258:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 800025c:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000260:	f8d9 7000 	ldr.w	r7, [r9]
 8000264:	f8d8 6000 	ldr.w	r6, [r8]
 8000268:	6815      	ldr	r5, [r2, #0]
 800026a:	f8dc 4000 	ldr.w	r4, [ip]
 800026e:	f8c9 6000 	str.w	r6, [r9]
 8000272:	f8c8 7000 	str.w	r7, [r8]
 8000276:	f8cc 5000 	str.w	r5, [ip]
 800027a:	6014      	str	r4, [r2, #0]
 800027c:	3108      	adds	r1, #8
 800027e:	3b01      	subs	r3, #1
 8000280:	d1df      	bne.n	8000242 <arm_bitreversal_16_0>
 8000282:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	4770      	bx	lr

08000288 <__aeabi_uldivmod>:
 8000288:	b953      	cbnz	r3, 80002a0 <__aeabi_uldivmod+0x18>
 800028a:	b94a      	cbnz	r2, 80002a0 <__aeabi_uldivmod+0x18>
 800028c:	2900      	cmp	r1, #0
 800028e:	bf08      	it	eq
 8000290:	2800      	cmpeq	r0, #0
 8000292:	bf1c      	itt	ne
 8000294:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000298:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800029c:	f000 b96a 	b.w	8000574 <__aeabi_idiv0>
 80002a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a8:	f000 f806 	bl	80002b8 <__udivmoddi4>
 80002ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b4:	b004      	add	sp, #16
 80002b6:	4770      	bx	lr

080002b8 <__udivmoddi4>:
 80002b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002bc:	9d08      	ldr	r5, [sp, #32]
 80002be:	460c      	mov	r4, r1
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d14e      	bne.n	8000362 <__udivmoddi4+0xaa>
 80002c4:	4694      	mov	ip, r2
 80002c6:	458c      	cmp	ip, r1
 80002c8:	4686      	mov	lr, r0
 80002ca:	fab2 f282 	clz	r2, r2
 80002ce:	d962      	bls.n	8000396 <__udivmoddi4+0xde>
 80002d0:	b14a      	cbz	r2, 80002e6 <__udivmoddi4+0x2e>
 80002d2:	f1c2 0320 	rsb	r3, r2, #32
 80002d6:	4091      	lsls	r1, r2
 80002d8:	fa20 f303 	lsr.w	r3, r0, r3
 80002dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e0:	4319      	orrs	r1, r3
 80002e2:	fa00 fe02 	lsl.w	lr, r0, r2
 80002e6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ea:	fa1f f68c 	uxth.w	r6, ip
 80002ee:	fbb1 f4f7 	udiv	r4, r1, r7
 80002f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f6:	fb07 1114 	mls	r1, r7, r4, r1
 80002fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002fe:	fb04 f106 	mul.w	r1, r4, r6
 8000302:	4299      	cmp	r1, r3
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x64>
 8000306:	eb1c 0303 	adds.w	r3, ip, r3
 800030a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800030e:	f080 8112 	bcs.w	8000536 <__udivmoddi4+0x27e>
 8000312:	4299      	cmp	r1, r3
 8000314:	f240 810f 	bls.w	8000536 <__udivmoddi4+0x27e>
 8000318:	3c02      	subs	r4, #2
 800031a:	4463      	add	r3, ip
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb1 f0f7 	udiv	r0, r1, r7
 8000326:	fb07 1110 	mls	r1, r7, r0, r1
 800032a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032e:	fb00 f606 	mul.w	r6, r0, r6
 8000332:	429e      	cmp	r6, r3
 8000334:	d90a      	bls.n	800034c <__udivmoddi4+0x94>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800033e:	f080 80fc 	bcs.w	800053a <__udivmoddi4+0x282>
 8000342:	429e      	cmp	r6, r3
 8000344:	f240 80f9 	bls.w	800053a <__udivmoddi4+0x282>
 8000348:	4463      	add	r3, ip
 800034a:	3802      	subs	r0, #2
 800034c:	1b9b      	subs	r3, r3, r6
 800034e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000352:	2100      	movs	r1, #0
 8000354:	b11d      	cbz	r5, 800035e <__udivmoddi4+0xa6>
 8000356:	40d3      	lsrs	r3, r2
 8000358:	2200      	movs	r2, #0
 800035a:	e9c5 3200 	strd	r3, r2, [r5]
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	428b      	cmp	r3, r1
 8000364:	d905      	bls.n	8000372 <__udivmoddi4+0xba>
 8000366:	b10d      	cbz	r5, 800036c <__udivmoddi4+0xb4>
 8000368:	e9c5 0100 	strd	r0, r1, [r5]
 800036c:	2100      	movs	r1, #0
 800036e:	4608      	mov	r0, r1
 8000370:	e7f5      	b.n	800035e <__udivmoddi4+0xa6>
 8000372:	fab3 f183 	clz	r1, r3
 8000376:	2900      	cmp	r1, #0
 8000378:	d146      	bne.n	8000408 <__udivmoddi4+0x150>
 800037a:	42a3      	cmp	r3, r4
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xcc>
 800037e:	4290      	cmp	r0, r2
 8000380:	f0c0 80f0 	bcc.w	8000564 <__udivmoddi4+0x2ac>
 8000384:	1a86      	subs	r6, r0, r2
 8000386:	eb64 0303 	sbc.w	r3, r4, r3
 800038a:	2001      	movs	r0, #1
 800038c:	2d00      	cmp	r5, #0
 800038e:	d0e6      	beq.n	800035e <__udivmoddi4+0xa6>
 8000390:	e9c5 6300 	strd	r6, r3, [r5]
 8000394:	e7e3      	b.n	800035e <__udivmoddi4+0xa6>
 8000396:	2a00      	cmp	r2, #0
 8000398:	f040 8090 	bne.w	80004bc <__udivmoddi4+0x204>
 800039c:	eba1 040c 	sub.w	r4, r1, ip
 80003a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003a4:	fa1f f78c 	uxth.w	r7, ip
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003ae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003b2:	fb08 4416 	mls	r4, r8, r6, r4
 80003b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ba:	fb07 f006 	mul.w	r0, r7, r6
 80003be:	4298      	cmp	r0, r3
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x11c>
 80003c2:	eb1c 0303 	adds.w	r3, ip, r3
 80003c6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x11a>
 80003cc:	4298      	cmp	r0, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2b4>
 80003d2:	4626      	mov	r6, r4
 80003d4:	1a1c      	subs	r4, r3, r0
 80003d6:	fa1f f38e 	uxth.w	r3, lr
 80003da:	fbb4 f0f8 	udiv	r0, r4, r8
 80003de:	fb08 4410 	mls	r4, r8, r0, r4
 80003e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e6:	fb00 f707 	mul.w	r7, r0, r7
 80003ea:	429f      	cmp	r7, r3
 80003ec:	d908      	bls.n	8000400 <__udivmoddi4+0x148>
 80003ee:	eb1c 0303 	adds.w	r3, ip, r3
 80003f2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003f6:	d202      	bcs.n	80003fe <__udivmoddi4+0x146>
 80003f8:	429f      	cmp	r7, r3
 80003fa:	f200 80b0 	bhi.w	800055e <__udivmoddi4+0x2a6>
 80003fe:	4620      	mov	r0, r4
 8000400:	1bdb      	subs	r3, r3, r7
 8000402:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000406:	e7a5      	b.n	8000354 <__udivmoddi4+0x9c>
 8000408:	f1c1 0620 	rsb	r6, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 f706 	lsr.w	r7, r2, r6
 8000412:	431f      	orrs	r7, r3
 8000414:	fa20 fc06 	lsr.w	ip, r0, r6
 8000418:	fa04 f301 	lsl.w	r3, r4, r1
 800041c:	ea43 030c 	orr.w	r3, r3, ip
 8000420:	40f4      	lsrs	r4, r6
 8000422:	fa00 f801 	lsl.w	r8, r0, r1
 8000426:	0c38      	lsrs	r0, r7, #16
 8000428:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800042c:	fbb4 fef0 	udiv	lr, r4, r0
 8000430:	fa1f fc87 	uxth.w	ip, r7
 8000434:	fb00 441e 	mls	r4, r0, lr, r4
 8000438:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800043c:	fb0e f90c 	mul.w	r9, lr, ip
 8000440:	45a1      	cmp	r9, r4
 8000442:	fa02 f201 	lsl.w	r2, r2, r1
 8000446:	d90a      	bls.n	800045e <__udivmoddi4+0x1a6>
 8000448:	193c      	adds	r4, r7, r4
 800044a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800044e:	f080 8084 	bcs.w	800055a <__udivmoddi4+0x2a2>
 8000452:	45a1      	cmp	r9, r4
 8000454:	f240 8081 	bls.w	800055a <__udivmoddi4+0x2a2>
 8000458:	f1ae 0e02 	sub.w	lr, lr, #2
 800045c:	443c      	add	r4, r7
 800045e:	eba4 0409 	sub.w	r4, r4, r9
 8000462:	fa1f f983 	uxth.w	r9, r3
 8000466:	fbb4 f3f0 	udiv	r3, r4, r0
 800046a:	fb00 4413 	mls	r4, r0, r3, r4
 800046e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000472:	fb03 fc0c 	mul.w	ip, r3, ip
 8000476:	45a4      	cmp	ip, r4
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x1d2>
 800047a:	193c      	adds	r4, r7, r4
 800047c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000480:	d267      	bcs.n	8000552 <__udivmoddi4+0x29a>
 8000482:	45a4      	cmp	ip, r4
 8000484:	d965      	bls.n	8000552 <__udivmoddi4+0x29a>
 8000486:	3b02      	subs	r3, #2
 8000488:	443c      	add	r4, r7
 800048a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800048e:	fba0 9302 	umull	r9, r3, r0, r2
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	429c      	cmp	r4, r3
 8000498:	46ce      	mov	lr, r9
 800049a:	469c      	mov	ip, r3
 800049c:	d351      	bcc.n	8000542 <__udivmoddi4+0x28a>
 800049e:	d04e      	beq.n	800053e <__udivmoddi4+0x286>
 80004a0:	b155      	cbz	r5, 80004b8 <__udivmoddi4+0x200>
 80004a2:	ebb8 030e 	subs.w	r3, r8, lr
 80004a6:	eb64 040c 	sbc.w	r4, r4, ip
 80004aa:	fa04 f606 	lsl.w	r6, r4, r6
 80004ae:	40cb      	lsrs	r3, r1
 80004b0:	431e      	orrs	r6, r3
 80004b2:	40cc      	lsrs	r4, r1
 80004b4:	e9c5 6400 	strd	r6, r4, [r5]
 80004b8:	2100      	movs	r1, #0
 80004ba:	e750      	b.n	800035e <__udivmoddi4+0xa6>
 80004bc:	f1c2 0320 	rsb	r3, r2, #32
 80004c0:	fa20 f103 	lsr.w	r1, r0, r3
 80004c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c8:	fa24 f303 	lsr.w	r3, r4, r3
 80004cc:	4094      	lsls	r4, r2
 80004ce:	430c      	orrs	r4, r1
 80004d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004d4:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d8:	fa1f f78c 	uxth.w	r7, ip
 80004dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e0:	fb08 3110 	mls	r1, r8, r0, r3
 80004e4:	0c23      	lsrs	r3, r4, #16
 80004e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004ea:	fb00 f107 	mul.w	r1, r0, r7
 80004ee:	4299      	cmp	r1, r3
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x24c>
 80004f2:	eb1c 0303 	adds.w	r3, ip, r3
 80004f6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004fa:	d22c      	bcs.n	8000556 <__udivmoddi4+0x29e>
 80004fc:	4299      	cmp	r1, r3
 80004fe:	d92a      	bls.n	8000556 <__udivmoddi4+0x29e>
 8000500:	3802      	subs	r0, #2
 8000502:	4463      	add	r3, ip
 8000504:	1a5b      	subs	r3, r3, r1
 8000506:	b2a4      	uxth	r4, r4
 8000508:	fbb3 f1f8 	udiv	r1, r3, r8
 800050c:	fb08 3311 	mls	r3, r8, r1, r3
 8000510:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000514:	fb01 f307 	mul.w	r3, r1, r7
 8000518:	42a3      	cmp	r3, r4
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x276>
 800051c:	eb1c 0404 	adds.w	r4, ip, r4
 8000520:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000524:	d213      	bcs.n	800054e <__udivmoddi4+0x296>
 8000526:	42a3      	cmp	r3, r4
 8000528:	d911      	bls.n	800054e <__udivmoddi4+0x296>
 800052a:	3902      	subs	r1, #2
 800052c:	4464      	add	r4, ip
 800052e:	1ae4      	subs	r4, r4, r3
 8000530:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000534:	e739      	b.n	80003aa <__udivmoddi4+0xf2>
 8000536:	4604      	mov	r4, r0
 8000538:	e6f0      	b.n	800031c <__udivmoddi4+0x64>
 800053a:	4608      	mov	r0, r1
 800053c:	e706      	b.n	800034c <__udivmoddi4+0x94>
 800053e:	45c8      	cmp	r8, r9
 8000540:	d2ae      	bcs.n	80004a0 <__udivmoddi4+0x1e8>
 8000542:	ebb9 0e02 	subs.w	lr, r9, r2
 8000546:	eb63 0c07 	sbc.w	ip, r3, r7
 800054a:	3801      	subs	r0, #1
 800054c:	e7a8      	b.n	80004a0 <__udivmoddi4+0x1e8>
 800054e:	4631      	mov	r1, r6
 8000550:	e7ed      	b.n	800052e <__udivmoddi4+0x276>
 8000552:	4603      	mov	r3, r0
 8000554:	e799      	b.n	800048a <__udivmoddi4+0x1d2>
 8000556:	4630      	mov	r0, r6
 8000558:	e7d4      	b.n	8000504 <__udivmoddi4+0x24c>
 800055a:	46d6      	mov	lr, sl
 800055c:	e77f      	b.n	800045e <__udivmoddi4+0x1a6>
 800055e:	4463      	add	r3, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e74d      	b.n	8000400 <__udivmoddi4+0x148>
 8000564:	4606      	mov	r6, r0
 8000566:	4623      	mov	r3, r4
 8000568:	4608      	mov	r0, r1
 800056a:	e70f      	b.n	800038c <__udivmoddi4+0xd4>
 800056c:	3e02      	subs	r6, #2
 800056e:	4463      	add	r3, ip
 8000570:	e730      	b.n	80003d4 <__udivmoddi4+0x11c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800057e:	463b      	mov	r3, r7
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800058a:	4b22      	ldr	r3, [pc, #136]	@ (8000614 <MX_ADC1_Init+0x9c>)
 800058c:	4a22      	ldr	r2, [pc, #136]	@ (8000618 <MX_ADC1_Init+0xa0>)
 800058e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000590:	4b20      	ldr	r3, [pc, #128]	@ (8000614 <MX_ADC1_Init+0x9c>)
 8000592:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000596:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000598:	4b1e      	ldr	r3, [pc, #120]	@ (8000614 <MX_ADC1_Init+0x9c>)
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800059e:	4b1d      	ldr	r3, [pc, #116]	@ (8000614 <MX_ADC1_Init+0x9c>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000614 <MX_ADC1_Init+0x9c>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000614 <MX_ADC1_Init+0x9c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005b2:	4b18      	ldr	r3, [pc, #96]	@ (8000614 <MX_ADC1_Init+0x9c>)
 80005b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80005b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80005ba:	4b16      	ldr	r3, [pc, #88]	@ (8000614 <MX_ADC1_Init+0x9c>)
 80005bc:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80005c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005c2:	4b14      	ldr	r3, [pc, #80]	@ (8000614 <MX_ADC1_Init+0x9c>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005c8:	4b12      	ldr	r3, [pc, #72]	@ (8000614 <MX_ADC1_Init+0x9c>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005ce:	4b11      	ldr	r3, [pc, #68]	@ (8000614 <MX_ADC1_Init+0x9c>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000614 <MX_ADC1_Init+0x9c>)
 80005d8:	2201      	movs	r2, #1
 80005da:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005dc:	480d      	ldr	r0, [pc, #52]	@ (8000614 <MX_ADC1_Init+0x9c>)
 80005de:	f001 fa15 	bl	8001a0c <HAL_ADC_Init>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80005e8:	f000 ff4a 	bl	8001480 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005ec:	2301      	movs	r3, #1
 80005ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005f0:	2301      	movs	r3, #1
 80005f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005f4:	2300      	movs	r3, #0
 80005f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f8:	463b      	mov	r3, r7
 80005fa:	4619      	mov	r1, r3
 80005fc:	4805      	ldr	r0, [pc, #20]	@ (8000614 <MX_ADC1_Init+0x9c>)
 80005fe:	f001 fb63 	bl	8001cc8 <HAL_ADC_ConfigChannel>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000608:	f000 ff3a 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800060c:	bf00      	nop
 800060e:	3710      	adds	r7, #16
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000038 	.word	0x20000038
 8000618:	40012000 	.word	0x40012000

0800061c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b08a      	sub	sp, #40	@ 0x28
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000624:	f107 0314 	add.w	r3, r7, #20
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a2f      	ldr	r2, [pc, #188]	@ (80006f8 <HAL_ADC_MspInit+0xdc>)
 800063a:	4293      	cmp	r3, r2
 800063c:	d157      	bne.n	80006ee <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800063e:	2300      	movs	r3, #0
 8000640:	613b      	str	r3, [r7, #16]
 8000642:	4b2e      	ldr	r3, [pc, #184]	@ (80006fc <HAL_ADC_MspInit+0xe0>)
 8000644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000646:	4a2d      	ldr	r2, [pc, #180]	@ (80006fc <HAL_ADC_MspInit+0xe0>)
 8000648:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800064c:	6453      	str	r3, [r2, #68]	@ 0x44
 800064e:	4b2b      	ldr	r3, [pc, #172]	@ (80006fc <HAL_ADC_MspInit+0xe0>)
 8000650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000656:	613b      	str	r3, [r7, #16]
 8000658:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	4b27      	ldr	r3, [pc, #156]	@ (80006fc <HAL_ADC_MspInit+0xe0>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000662:	4a26      	ldr	r2, [pc, #152]	@ (80006fc <HAL_ADC_MspInit+0xe0>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6313      	str	r3, [r2, #48]	@ 0x30
 800066a:	4b24      	ldr	r3, [pc, #144]	@ (80006fc <HAL_ADC_MspInit+0xe0>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000676:	2302      	movs	r3, #2
 8000678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800067a:	2303      	movs	r3, #3
 800067c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	4619      	mov	r1, r3
 8000688:	481d      	ldr	r0, [pc, #116]	@ (8000700 <HAL_ADC_MspInit+0xe4>)
 800068a:	f002 fa3f 	bl	8002b0c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800068e:	4b1d      	ldr	r3, [pc, #116]	@ (8000704 <HAL_ADC_MspInit+0xe8>)
 8000690:	4a1d      	ldr	r2, [pc, #116]	@ (8000708 <HAL_ADC_MspInit+0xec>)
 8000692:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000694:	4b1b      	ldr	r3, [pc, #108]	@ (8000704 <HAL_ADC_MspInit+0xe8>)
 8000696:	2200      	movs	r2, #0
 8000698:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800069a:	4b1a      	ldr	r3, [pc, #104]	@ (8000704 <HAL_ADC_MspInit+0xe8>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006a0:	4b18      	ldr	r3, [pc, #96]	@ (8000704 <HAL_ADC_MspInit+0xe8>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006a6:	4b17      	ldr	r3, [pc, #92]	@ (8000704 <HAL_ADC_MspInit+0xe8>)
 80006a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006ac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006ae:	4b15      	ldr	r3, [pc, #84]	@ (8000704 <HAL_ADC_MspInit+0xe8>)
 80006b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80006b4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006b6:	4b13      	ldr	r3, [pc, #76]	@ (8000704 <HAL_ADC_MspInit+0xe8>)
 80006b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80006bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006be:	4b11      	ldr	r3, [pc, #68]	@ (8000704 <HAL_ADC_MspInit+0xe8>)
 80006c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006c4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000704 <HAL_ADC_MspInit+0xe8>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80006cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000704 <HAL_ADC_MspInit+0xe8>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006d2:	480c      	ldr	r0, [pc, #48]	@ (8000704 <HAL_ADC_MspInit+0xe8>)
 80006d4:	f001 feaa 	bl	800242c <HAL_DMA_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80006de:	f000 fecf 	bl	8001480 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4a07      	ldr	r2, [pc, #28]	@ (8000704 <HAL_ADC_MspInit+0xe8>)
 80006e6:	639a      	str	r2, [r3, #56]	@ 0x38
 80006e8:	4a06      	ldr	r2, [pc, #24]	@ (8000704 <HAL_ADC_MspInit+0xe8>)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ee:	bf00      	nop
 80006f0:	3728      	adds	r7, #40	@ 0x28
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40012000 	.word	0x40012000
 80006fc:	40023800 	.word	0x40023800
 8000700:	40020000 	.word	0x40020000
 8000704:	20000080 	.word	0x20000080
 8000708:	40026410 	.word	0x40026410

0800070c <init_AudioReset>:
#include "i2s.h"
#include "spi.h"
#include "usb_host.h"
#include "gpio.h"
#include "audio.h"
void init_AudioReset() {
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, AUDIO_RESET_PIN, GPIO_PIN_SET);
 8000710:	2201      	movs	r2, #1
 8000712:	2110      	movs	r1, #16
 8000714:	4802      	ldr	r0, [pc, #8]	@ (8000720 <init_AudioReset+0x14>)
 8000716:	f002 fb95 	bl	8002e44 <HAL_GPIO_WritePin>
}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40020c00 	.word	0x40020c00

08000724 <configAudio>:
void configAudio() {
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af02      	add	r7, sp, #8
    uint8_t bytes[2];
    init_AudioReset();
 800072a:	f7ff ffef 	bl	800070c <init_AudioReset>

    /* Power sequence */
    // Set Power Control Register to "on" state
    bytes[0] = 0x02;
 800072e:	2302      	movs	r3, #2
 8000730:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x01;
 8000732:	2301      	movs	r3, #1
 8000734:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000736:	1d3a      	adds	r2, r7, #4
 8000738:	2364      	movs	r3, #100	@ 0x64
 800073a:	9300      	str	r3, [sp, #0]
 800073c:	2302      	movs	r3, #2
 800073e:	2194      	movs	r1, #148	@ 0x94
 8000740:	486f      	ldr	r0, [pc, #444]	@ (8000900 <configAudio+0x1dc>)
 8000742:	f004 fa83 	bl	8004c4c <HAL_I2C_Master_Transmit>

    /* Initialization sequence */
    bytes[0] = 0x00;
 8000746:	2300      	movs	r3, #0
 8000748:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x99;
 800074a:	2399      	movs	r3, #153	@ 0x99
 800074c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800074e:	1d3a      	adds	r2, r7, #4
 8000750:	2364      	movs	r3, #100	@ 0x64
 8000752:	9300      	str	r3, [sp, #0]
 8000754:	2302      	movs	r3, #2
 8000756:	2194      	movs	r1, #148	@ 0x94
 8000758:	4869      	ldr	r0, [pc, #420]	@ (8000900 <configAudio+0x1dc>)
 800075a:	f004 fa77 	bl	8004c4c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x47;
 800075e:	2347      	movs	r3, #71	@ 0x47
 8000760:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x80;
 8000762:	2380      	movs	r3, #128	@ 0x80
 8000764:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000766:	1d3a      	adds	r2, r7, #4
 8000768:	2364      	movs	r3, #100	@ 0x64
 800076a:	9300      	str	r3, [sp, #0]
 800076c:	2302      	movs	r3, #2
 800076e:	2194      	movs	r1, #148	@ 0x94
 8000770:	4863      	ldr	r0, [pc, #396]	@ (8000900 <configAudio+0x1dc>)
 8000772:	f004 fa6b 	bl	8004c4c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x32;
 8000776:	2332      	movs	r3, #50	@ 0x32
 8000778:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x80;
 800077a:	2380      	movs	r3, #128	@ 0x80
 800077c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800077e:	1d3a      	adds	r2, r7, #4
 8000780:	2364      	movs	r3, #100	@ 0x64
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	2302      	movs	r3, #2
 8000786:	2194      	movs	r1, #148	@ 0x94
 8000788:	485d      	ldr	r0, [pc, #372]	@ (8000900 <configAudio+0x1dc>)
 800078a:	f004 fa5f 	bl	8004c4c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x32;
 800078e:	2332      	movs	r3, #50	@ 0x32
 8000790:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x00;
 8000792:	2300      	movs	r3, #0
 8000794:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000796:	1d3a      	adds	r2, r7, #4
 8000798:	2364      	movs	r3, #100	@ 0x64
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	2302      	movs	r3, #2
 800079e:	2194      	movs	r1, #148	@ 0x94
 80007a0:	4857      	ldr	r0, [pc, #348]	@ (8000900 <configAudio+0x1dc>)
 80007a2:	f004 fa53 	bl	8004c4c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x00;
 80007a6:	2300      	movs	r3, #0
 80007a8:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x00;
 80007aa:	2300      	movs	r3, #0
 80007ac:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80007ae:	1d3a      	adds	r2, r7, #4
 80007b0:	2364      	movs	r3, #100	@ 0x64
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	2302      	movs	r3, #2
 80007b6:	2194      	movs	r1, #148	@ 0x94
 80007b8:	4851      	ldr	r0, [pc, #324]	@ (8000900 <configAudio+0x1dc>)
 80007ba:	f004 fa47 	bl	8004c4c <HAL_I2C_Master_Transmit>

    /* Ctl registers configuration */
    bytes[0] = 0x04;
 80007be:	2304      	movs	r3, #4
 80007c0:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0xAF;
 80007c2:	23af      	movs	r3, #175	@ 0xaf
 80007c4:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80007c6:	1d3a      	adds	r2, r7, #4
 80007c8:	2364      	movs	r3, #100	@ 0x64
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	2302      	movs	r3, #2
 80007ce:	2194      	movs	r1, #148	@ 0x94
 80007d0:	484b      	ldr	r0, [pc, #300]	@ (8000900 <configAudio+0x1dc>)
 80007d2:	f004 fa3b 	bl	8004c4c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x0D;
 80007d6:	230d      	movs	r3, #13
 80007d8:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x70;
 80007da:	2370      	movs	r3, #112	@ 0x70
 80007dc:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80007de:	1d3a      	adds	r2, r7, #4
 80007e0:	2364      	movs	r3, #100	@ 0x64
 80007e2:	9300      	str	r3, [sp, #0]
 80007e4:	2302      	movs	r3, #2
 80007e6:	2194      	movs	r1, #148	@ 0x94
 80007e8:	4845      	ldr	r0, [pc, #276]	@ (8000900 <configAudio+0x1dc>)
 80007ea:	f004 fa2f 	bl	8004c4c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x05;
 80007ee:	2305      	movs	r3, #5
 80007f0:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x81;
 80007f2:	2381      	movs	r3, #129	@ 0x81
 80007f4:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80007f6:	1d3a      	adds	r2, r7, #4
 80007f8:	2364      	movs	r3, #100	@ 0x64
 80007fa:	9300      	str	r3, [sp, #0]
 80007fc:	2302      	movs	r3, #2
 80007fe:	2194      	movs	r1, #148	@ 0x94
 8000800:	483f      	ldr	r0, [pc, #252]	@ (8000900 <configAudio+0x1dc>)
 8000802:	f004 fa23 	bl	8004c4c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x06;
 8000806:	2306      	movs	r3, #6
 8000808:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x07;
 800080a:	2307      	movs	r3, #7
 800080c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800080e:	1d3a      	adds	r2, r7, #4
 8000810:	2364      	movs	r3, #100	@ 0x64
 8000812:	9300      	str	r3, [sp, #0]
 8000814:	2302      	movs	r3, #2
 8000816:	2194      	movs	r1, #148	@ 0x94
 8000818:	4839      	ldr	r0, [pc, #228]	@ (8000900 <configAudio+0x1dc>)
 800081a:	f004 fa17 	bl	8004c4c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x0A;
 800081e:	230a      	movs	r3, #10
 8000820:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x00;
 8000822:	2300      	movs	r3, #0
 8000824:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000826:	1d3a      	adds	r2, r7, #4
 8000828:	2364      	movs	r3, #100	@ 0x64
 800082a:	9300      	str	r3, [sp, #0]
 800082c:	2302      	movs	r3, #2
 800082e:	2194      	movs	r1, #148	@ 0x94
 8000830:	4833      	ldr	r0, [pc, #204]	@ (8000900 <configAudio+0x1dc>)
 8000832:	f004 fa0b 	bl	8004c4c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x27;
 8000836:	2327      	movs	r3, #39	@ 0x27
 8000838:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x00;
 800083a:	2300      	movs	r3, #0
 800083c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800083e:	1d3a      	adds	r2, r7, #4
 8000840:	2364      	movs	r3, #100	@ 0x64
 8000842:	9300      	str	r3, [sp, #0]
 8000844:	2302      	movs	r3, #2
 8000846:	2194      	movs	r1, #148	@ 0x94
 8000848:	482d      	ldr	r0, [pc, #180]	@ (8000900 <configAudio+0x1dc>)
 800084a:	f004 f9ff 	bl	8004c4c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x1F;
 800084e:	231f      	movs	r3, #31
 8000850:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x0F;
 8000852:	230f      	movs	r3, #15
 8000854:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000856:	1d3a      	adds	r2, r7, #4
 8000858:	2364      	movs	r3, #100	@ 0x64
 800085a:	9300      	str	r3, [sp, #0]
 800085c:	2302      	movs	r3, #2
 800085e:	2194      	movs	r1, #148	@ 0x94
 8000860:	4827      	ldr	r0, [pc, #156]	@ (8000900 <configAudio+0x1dc>)
 8000862:	f004 f9f3 	bl	8004c4c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x22;
 8000866:	2322      	movs	r3, #34	@ 0x22
 8000868:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0xC0;
 800086a:	23c0      	movs	r3, #192	@ 0xc0
 800086c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800086e:	1d3a      	adds	r2, r7, #4
 8000870:	2364      	movs	r3, #100	@ 0x64
 8000872:	9300      	str	r3, [sp, #0]
 8000874:	2302      	movs	r3, #2
 8000876:	2194      	movs	r1, #148	@ 0x94
 8000878:	4821      	ldr	r0, [pc, #132]	@ (8000900 <configAudio+0x1dc>)
 800087a:	f004 f9e7 	bl	8004c4c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x14;
 800087e:	2314      	movs	r3, #20
 8000880:	713b      	strb	r3, [r7, #4]
    bytes[1] = 2;
 8000882:	2302      	movs	r3, #2
 8000884:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000886:	1d3a      	adds	r2, r7, #4
 8000888:	2364      	movs	r3, #100	@ 0x64
 800088a:	9300      	str	r3, [sp, #0]
 800088c:	2302      	movs	r3, #2
 800088e:	2194      	movs	r1, #148	@ 0x94
 8000890:	481b      	ldr	r0, [pc, #108]	@ (8000900 <configAudio+0x1dc>)
 8000892:	f004 f9db 	bl	8004c4c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x15;
 8000896:	2315      	movs	r3, #21
 8000898:	713b      	strb	r3, [r7, #4]
    bytes[1] = 2;
 800089a:	2302      	movs	r3, #2
 800089c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800089e:	1d3a      	adds	r2, r7, #4
 80008a0:	2364      	movs	r3, #100	@ 0x64
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	2302      	movs	r3, #2
 80008a6:	2194      	movs	r1, #148	@ 0x94
 80008a8:	4815      	ldr	r0, [pc, #84]	@ (8000900 <configAudio+0x1dc>)
 80008aa:	f004 f9cf 	bl	8004c4c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x20;
 80008ae:	2320      	movs	r3, #32
 80008b0:	713b      	strb	r3, [r7, #4]
    bytes[1] = 24;
 80008b2:	2318      	movs	r3, #24
 80008b4:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80008b6:	1d3a      	adds	r2, r7, #4
 80008b8:	2364      	movs	r3, #100	@ 0x64
 80008ba:	9300      	str	r3, [sp, #0]
 80008bc:	2302      	movs	r3, #2
 80008be:	2194      	movs	r1, #148	@ 0x94
 80008c0:	480f      	ldr	r0, [pc, #60]	@ (8000900 <configAudio+0x1dc>)
 80008c2:	f004 f9c3 	bl	8004c4c <HAL_I2C_Master_Transmit>

    bytes[0] = 0x21;
 80008c6:	2321      	movs	r3, #33	@ 0x21
 80008c8:	713b      	strb	r3, [r7, #4]
    bytes[1] = 24;
 80008ca:	2318      	movs	r3, #24
 80008cc:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80008ce:	1d3a      	adds	r2, r7, #4
 80008d0:	2364      	movs	r3, #100	@ 0x64
 80008d2:	9300      	str	r3, [sp, #0]
 80008d4:	2302      	movs	r3, #2
 80008d6:	2194      	movs	r1, #148	@ 0x94
 80008d8:	4809      	ldr	r0, [pc, #36]	@ (8000900 <configAudio+0x1dc>)
 80008da:	f004 f9b7 	bl	8004c4c <HAL_I2C_Master_Transmit>

    /* Power up */
    bytes[0] = 0x02;
 80008de:	2302      	movs	r3, #2
 80008e0:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x9E;
 80008e2:	239e      	movs	r3, #158	@ 0x9e
 80008e4:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80008e6:	1d3a      	adds	r2, r7, #4
 80008e8:	2364      	movs	r3, #100	@ 0x64
 80008ea:	9300      	str	r3, [sp, #0]
 80008ec:	2302      	movs	r3, #2
 80008ee:	2194      	movs	r1, #148	@ 0x94
 80008f0:	4803      	ldr	r0, [pc, #12]	@ (8000900 <configAudio+0x1dc>)
 80008f2:	f004 f9ab 	bl	8004c4c <HAL_I2C_Master_Transmit>
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	200000e0 	.word	0x200000e0

08000904 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	4b1b      	ldr	r3, [pc, #108]	@ (800097c <MX_DMA_Init+0x78>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	4a1a      	ldr	r2, [pc, #104]	@ (800097c <MX_DMA_Init+0x78>)
 8000914:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000918:	6313      	str	r3, [r2, #48]	@ 0x30
 800091a:	4b18      	ldr	r3, [pc, #96]	@ (800097c <MX_DMA_Init+0x78>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	603b      	str	r3, [r7, #0]
 800092a:	4b14      	ldr	r3, [pc, #80]	@ (800097c <MX_DMA_Init+0x78>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	4a13      	ldr	r2, [pc, #76]	@ (800097c <MX_DMA_Init+0x78>)
 8000930:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000934:	6313      	str	r3, [r2, #48]	@ 0x30
 8000936:	4b11      	ldr	r3, [pc, #68]	@ (800097c <MX_DMA_Init+0x78>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000942:	2200      	movs	r2, #0
 8000944:	2100      	movs	r1, #0
 8000946:	2011      	movs	r0, #17
 8000948:	f001 fd39 	bl	80023be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800094c:	2011      	movs	r0, #17
 800094e:	f001 fd52 	bl	80023f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8000952:	2200      	movs	r2, #0
 8000954:	2100      	movs	r1, #0
 8000956:	202f      	movs	r0, #47	@ 0x2f
 8000958:	f001 fd31 	bl	80023be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800095c:	202f      	movs	r0, #47	@ 0x2f
 800095e:	f001 fd4a 	bl	80023f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	2100      	movs	r1, #0
 8000966:	2038      	movs	r0, #56	@ 0x38
 8000968:	f001 fd29 	bl	80023be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800096c:	2038      	movs	r0, #56	@ 0x38
 800096e:	f001 fd42 	bl	80023f6 <HAL_NVIC_EnableIRQ>

}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40023800 	.word	0x40023800

08000980 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08c      	sub	sp, #48	@ 0x30
 8000984:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
 8000994:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	61bb      	str	r3, [r7, #24]
 800099a:	4b72      	ldr	r3, [pc, #456]	@ (8000b64 <MX_GPIO_Init+0x1e4>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	4a71      	ldr	r2, [pc, #452]	@ (8000b64 <MX_GPIO_Init+0x1e4>)
 80009a0:	f043 0310 	orr.w	r3, r3, #16
 80009a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a6:	4b6f      	ldr	r3, [pc, #444]	@ (8000b64 <MX_GPIO_Init+0x1e4>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	f003 0310 	and.w	r3, r3, #16
 80009ae:	61bb      	str	r3, [r7, #24]
 80009b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	617b      	str	r3, [r7, #20]
 80009b6:	4b6b      	ldr	r3, [pc, #428]	@ (8000b64 <MX_GPIO_Init+0x1e4>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	4a6a      	ldr	r2, [pc, #424]	@ (8000b64 <MX_GPIO_Init+0x1e4>)
 80009bc:	f043 0304 	orr.w	r3, r3, #4
 80009c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c2:	4b68      	ldr	r3, [pc, #416]	@ (8000b64 <MX_GPIO_Init+0x1e4>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	f003 0304 	and.w	r3, r3, #4
 80009ca:	617b      	str	r3, [r7, #20]
 80009cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	4b64      	ldr	r3, [pc, #400]	@ (8000b64 <MX_GPIO_Init+0x1e4>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	4a63      	ldr	r2, [pc, #396]	@ (8000b64 <MX_GPIO_Init+0x1e4>)
 80009d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009de:	4b61      	ldr	r3, [pc, #388]	@ (8000b64 <MX_GPIO_Init+0x1e4>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	4b5d      	ldr	r3, [pc, #372]	@ (8000b64 <MX_GPIO_Init+0x1e4>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	4a5c      	ldr	r2, [pc, #368]	@ (8000b64 <MX_GPIO_Init+0x1e4>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fa:	4b5a      	ldr	r3, [pc, #360]	@ (8000b64 <MX_GPIO_Init+0x1e4>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	4b56      	ldr	r3, [pc, #344]	@ (8000b64 <MX_GPIO_Init+0x1e4>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	4a55      	ldr	r2, [pc, #340]	@ (8000b64 <MX_GPIO_Init+0x1e4>)
 8000a10:	f043 0302 	orr.w	r3, r3, #2
 8000a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a16:	4b53      	ldr	r3, [pc, #332]	@ (8000b64 <MX_GPIO_Init+0x1e4>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	4b4f      	ldr	r3, [pc, #316]	@ (8000b64 <MX_GPIO_Init+0x1e4>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	4a4e      	ldr	r2, [pc, #312]	@ (8000b64 <MX_GPIO_Init+0x1e4>)
 8000a2c:	f043 0308 	orr.w	r3, r3, #8
 8000a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a32:	4b4c      	ldr	r3, [pc, #304]	@ (8000b64 <MX_GPIO_Init+0x1e4>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	f003 0308 	and.w	r3, r3, #8
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2108      	movs	r1, #8
 8000a42:	4849      	ldr	r0, [pc, #292]	@ (8000b68 <MX_GPIO_Init+0x1e8>)
 8000a44:	f002 f9fe 	bl	8002e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	4847      	ldr	r0, [pc, #284]	@ (8000b6c <MX_GPIO_Init+0x1ec>)
 8000a4e:	f002 f9f9 	bl	8002e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a52:	2200      	movs	r2, #0
 8000a54:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000a58:	4845      	ldr	r0, [pc, #276]	@ (8000b70 <MX_GPIO_Init+0x1f0>)
 8000a5a:	f002 f9f3 	bl	8002e44 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a5e:	2308      	movs	r3, #8
 8000a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	4619      	mov	r1, r3
 8000a74:	483c      	ldr	r0, [pc, #240]	@ (8000b68 <MX_GPIO_Init+0x1e8>)
 8000a76:	f002 f849 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4836      	ldr	r0, [pc, #216]	@ (8000b6c <MX_GPIO_Init+0x1ec>)
 8000a92:	f002 f83b 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a96:	2308      	movs	r3, #8
 8000a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000aa6:	2305      	movs	r3, #5
 8000aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f107 031c 	add.w	r3, r7, #28
 8000aae:	4619      	mov	r1, r3
 8000ab0:	482e      	ldr	r0, [pc, #184]	@ (8000b6c <MX_GPIO_Init+0x1ec>)
 8000ab2:	f002 f82b 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000aba:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000abe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 031c 	add.w	r3, r7, #28
 8000ac8:	4619      	mov	r1, r3
 8000aca:	482a      	ldr	r0, [pc, #168]	@ (8000b74 <MX_GPIO_Init+0x1f4>)
 8000acc:	f002 f81e 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000adc:	f107 031c 	add.w	r3, r7, #28
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4825      	ldr	r0, [pc, #148]	@ (8000b78 <MX_GPIO_Init+0x1f8>)
 8000ae4:	f002 f812 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000ae8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000aec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	2302      	movs	r3, #2
 8000af0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000afa:	2305      	movs	r3, #5
 8000afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	4619      	mov	r1, r3
 8000b04:	481c      	ldr	r0, [pc, #112]	@ (8000b78 <MX_GPIO_Init+0x1f8>)
 8000b06:	f002 f801 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b0a:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000b0e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b1c:	f107 031c 	add.w	r3, r7, #28
 8000b20:	4619      	mov	r1, r3
 8000b22:	4813      	ldr	r0, [pc, #76]	@ (8000b70 <MX_GPIO_Init+0x1f0>)
 8000b24:	f001 fff2 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b28:	2320      	movs	r3, #32
 8000b2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	4619      	mov	r1, r3
 8000b3a:	480d      	ldr	r0, [pc, #52]	@ (8000b70 <MX_GPIO_Init+0x1f0>)
 8000b3c:	f001 ffe6 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b40:	2302      	movs	r3, #2
 8000b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b44:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000b48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b4e:	f107 031c 	add.w	r3, r7, #28
 8000b52:	4619      	mov	r1, r3
 8000b54:	4804      	ldr	r0, [pc, #16]	@ (8000b68 <MX_GPIO_Init+0x1e8>)
 8000b56:	f001 ffd9 	bl	8002b0c <HAL_GPIO_Init>

}
 8000b5a:	bf00      	nop
 8000b5c:	3730      	adds	r7, #48	@ 0x30
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	40020800 	.word	0x40020800
 8000b70:	40020c00 	.word	0x40020c00
 8000b74:	40020000 	.word	0x40020000
 8000b78:	40020400 	.word	0x40020400

08000b7c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b80:	4b12      	ldr	r3, [pc, #72]	@ (8000bcc <MX_I2C1_Init+0x50>)
 8000b82:	4a13      	ldr	r2, [pc, #76]	@ (8000bd0 <MX_I2C1_Init+0x54>)
 8000b84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b86:	4b11      	ldr	r3, [pc, #68]	@ (8000bcc <MX_I2C1_Init+0x50>)
 8000b88:	4a12      	ldr	r2, [pc, #72]	@ (8000bd4 <MX_I2C1_Init+0x58>)
 8000b8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bcc <MX_I2C1_Init+0x50>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b92:	4b0e      	ldr	r3, [pc, #56]	@ (8000bcc <MX_I2C1_Init+0x50>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b98:	4b0c      	ldr	r3, [pc, #48]	@ (8000bcc <MX_I2C1_Init+0x50>)
 8000b9a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b9e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bcc <MX_I2C1_Init+0x50>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ba6:	4b09      	ldr	r3, [pc, #36]	@ (8000bcc <MX_I2C1_Init+0x50>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bac:	4b07      	ldr	r3, [pc, #28]	@ (8000bcc <MX_I2C1_Init+0x50>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bb2:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <MX_I2C1_Init+0x50>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bb8:	4804      	ldr	r0, [pc, #16]	@ (8000bcc <MX_I2C1_Init+0x50>)
 8000bba:	f003 ff03 	bl	80049c4 <HAL_I2C_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bc4:	f000 fc5c 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	200000e0 	.word	0x200000e0
 8000bd0:	40005400 	.word	0x40005400
 8000bd4:	000186a0 	.word	0x000186a0

08000bd8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	@ 0x28
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a19      	ldr	r2, [pc, #100]	@ (8000c5c <HAL_I2C_MspInit+0x84>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d12c      	bne.n	8000c54 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	4b18      	ldr	r3, [pc, #96]	@ (8000c60 <HAL_I2C_MspInit+0x88>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	4a17      	ldr	r2, [pc, #92]	@ (8000c60 <HAL_I2C_MspInit+0x88>)
 8000c04:	f043 0302 	orr.w	r3, r3, #2
 8000c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0a:	4b15      	ldr	r3, [pc, #84]	@ (8000c60 <HAL_I2C_MspInit+0x88>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	f003 0302 	and.w	r3, r3, #2
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c16:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c1c:	2312      	movs	r3, #18
 8000c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c20:	2301      	movs	r3, #1
 8000c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	2300      	movs	r3, #0
 8000c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c28:	2304      	movs	r3, #4
 8000c2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	4619      	mov	r1, r3
 8000c32:	480c      	ldr	r0, [pc, #48]	@ (8000c64 <HAL_I2C_MspInit+0x8c>)
 8000c34:	f001 ff6a 	bl	8002b0c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <HAL_I2C_MspInit+0x88>)
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c40:	4a07      	ldr	r2, [pc, #28]	@ (8000c60 <HAL_I2C_MspInit+0x88>)
 8000c42:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c46:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c48:	4b05      	ldr	r3, [pc, #20]	@ (8000c60 <HAL_I2C_MspInit+0x88>)
 8000c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c54:	bf00      	nop
 8000c56:	3728      	adds	r7, #40	@ 0x28
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40005400 	.word	0x40005400
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40020400 	.word	0x40020400

08000c68 <MX_I2S3_Init>:
I2S_HandleTypeDef hi2s3;
DMA_HandleTypeDef hdma_spi3_tx;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000c6c:	4b13      	ldr	r3, [pc, #76]	@ (8000cbc <MX_I2S3_Init+0x54>)
 8000c6e:	4a14      	ldr	r2, [pc, #80]	@ (8000cc0 <MX_I2S3_Init+0x58>)
 8000c70:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000c72:	4b12      	ldr	r3, [pc, #72]	@ (8000cbc <MX_I2S3_Init+0x54>)
 8000c74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c78:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000c7a:	4b10      	ldr	r3, [pc, #64]	@ (8000cbc <MX_I2S3_Init+0x54>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000c80:	4b0e      	ldr	r3, [pc, #56]	@ (8000cbc <MX_I2S3_Init+0x54>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000c86:	4b0d      	ldr	r3, [pc, #52]	@ (8000cbc <MX_I2S3_Init+0x54>)
 8000c88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c8c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000cbc <MX_I2S3_Init+0x54>)
 8000c90:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8000c94:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000c96:	4b09      	ldr	r3, [pc, #36]	@ (8000cbc <MX_I2S3_Init+0x54>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000c9c:	4b07      	ldr	r3, [pc, #28]	@ (8000cbc <MX_I2S3_Init+0x54>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000ca2:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <MX_I2S3_Init+0x54>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000ca8:	4804      	ldr	r0, [pc, #16]	@ (8000cbc <MX_I2S3_Init+0x54>)
 8000caa:	f004 fb29 	bl	8005300 <HAL_I2S_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000cb4:	f000 fbe4 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000134 	.word	0x20000134
 8000cc0:	40003c00 	.word	0x40003c00

08000cc4 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08e      	sub	sp, #56	@ 0x38
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a49      	ldr	r2, [pc, #292]	@ (8000e14 <HAL_I2S_MspInit+0x150>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	f040 808b 	bne.w	8000e0c <HAL_I2S_MspInit+0x148>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000cfa:	23c0      	movs	r3, #192	@ 0xc0
 8000cfc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	4618      	mov	r0, r3
 8000d08:	f005 fd2a 	bl	8006760 <HAL_RCCEx_PeriphCLKConfig>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8000d12:	f000 fbb5 	bl	8001480 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	4b3f      	ldr	r3, [pc, #252]	@ (8000e18 <HAL_I2S_MspInit+0x154>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1e:	4a3e      	ldr	r2, [pc, #248]	@ (8000e18 <HAL_I2S_MspInit+0x154>)
 8000d20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d26:	4b3c      	ldr	r3, [pc, #240]	@ (8000e18 <HAL_I2S_MspInit+0x154>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	4b38      	ldr	r3, [pc, #224]	@ (8000e18 <HAL_I2S_MspInit+0x154>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	4a37      	ldr	r2, [pc, #220]	@ (8000e18 <HAL_I2S_MspInit+0x154>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d42:	4b35      	ldr	r3, [pc, #212]	@ (8000e18 <HAL_I2S_MspInit+0x154>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	4b31      	ldr	r3, [pc, #196]	@ (8000e18 <HAL_I2S_MspInit+0x154>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d56:	4a30      	ldr	r2, [pc, #192]	@ (8000e18 <HAL_I2S_MspInit+0x154>)
 8000d58:	f043 0304 	orr.w	r3, r3, #4
 8000d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5e:	4b2e      	ldr	r3, [pc, #184]	@ (8000e18 <HAL_I2S_MspInit+0x154>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d62:	f003 0304 	and.w	r3, r3, #4
 8000d66:	60bb      	str	r3, [r7, #8]
 8000d68:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d6a:	2310      	movs	r3, #16
 8000d6c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	2300      	movs	r3, #0
 8000d78:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d7a:	2306      	movs	r3, #6
 8000d7c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d82:	4619      	mov	r1, r3
 8000d84:	4825      	ldr	r0, [pc, #148]	@ (8000e1c <HAL_I2S_MspInit+0x158>)
 8000d86:	f001 fec1 	bl	8002b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d8a:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000d8e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d90:	2302      	movs	r3, #2
 8000d92:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d9c:	2306      	movs	r3, #6
 8000d9e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000da4:	4619      	mov	r1, r3
 8000da6:	481e      	ldr	r0, [pc, #120]	@ (8000e20 <HAL_I2S_MspInit+0x15c>)
 8000da8:	f001 feb0 	bl	8002b0c <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream7;
 8000dac:	4b1d      	ldr	r3, [pc, #116]	@ (8000e24 <HAL_I2S_MspInit+0x160>)
 8000dae:	4a1e      	ldr	r2, [pc, #120]	@ (8000e28 <HAL_I2S_MspInit+0x164>)
 8000db0:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8000db2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e24 <HAL_I2S_MspInit+0x160>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000db8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e24 <HAL_I2S_MspInit+0x160>)
 8000dba:	2240      	movs	r2, #64	@ 0x40
 8000dbc:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dbe:	4b19      	ldr	r3, [pc, #100]	@ (8000e24 <HAL_I2S_MspInit+0x160>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000dc4:	4b17      	ldr	r3, [pc, #92]	@ (8000e24 <HAL_I2S_MspInit+0x160>)
 8000dc6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000dca:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dcc:	4b15      	ldr	r3, [pc, #84]	@ (8000e24 <HAL_I2S_MspInit+0x160>)
 8000dce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000dd2:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dd4:	4b13      	ldr	r3, [pc, #76]	@ (8000e24 <HAL_I2S_MspInit+0x160>)
 8000dd6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000dda:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8000ddc:	4b11      	ldr	r3, [pc, #68]	@ (8000e24 <HAL_I2S_MspInit+0x160>)
 8000dde:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000de2:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000de4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e24 <HAL_I2S_MspInit+0x160>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dea:	4b0e      	ldr	r3, [pc, #56]	@ (8000e24 <HAL_I2S_MspInit+0x160>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000df0:	480c      	ldr	r0, [pc, #48]	@ (8000e24 <HAL_I2S_MspInit+0x160>)
 8000df2:	f001 fb1b 	bl	800242c <HAL_DMA_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <HAL_I2S_MspInit+0x13c>
    {
      Error_Handler();
 8000dfc:	f000 fb40 	bl	8001480 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi3_tx);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a08      	ldr	r2, [pc, #32]	@ (8000e24 <HAL_I2S_MspInit+0x160>)
 8000e04:	639a      	str	r2, [r3, #56]	@ 0x38
 8000e06:	4a07      	ldr	r2, [pc, #28]	@ (8000e24 <HAL_I2S_MspInit+0x160>)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000e0c:	bf00      	nop
 8000e0e:	3738      	adds	r7, #56	@ 0x38
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40003c00 	.word	0x40003c00
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40020000 	.word	0x40020000
 8000e20:	40020800 	.word	0x40020800
 8000e24:	2000017c 	.word	0x2000017c
 8000e28:	400260b8 	.word	0x400260b8

08000e2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e30:	f000 fd7a 	bl	8001928 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e34:	f000 f8e4 	bl	8001000 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e38:	f7ff fda2 	bl	8000980 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e3c:	f7ff fd62 	bl	8000904 <MX_DMA_Init>
  MX_I2C1_Init();
 8000e40:	f7ff fe9c 	bl	8000b7c <MX_I2C1_Init>
  MX_I2S3_Init();
 8000e44:	f7ff ff10 	bl	8000c68 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000e48:	f000 fb20 	bl	800148c <MX_SPI1_Init>
//  MX_USB_HOST_Init();
  MX_TIM2_Init();
 8000e4c:	f000 fc2e 	bl	80016ac <MX_TIM2_Init>
  MX_ADC1_Init();
 8000e50:	f7ff fb92 	bl	8000578 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000e54:	f000 fc96 	bl	8001784 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */
  configAudio();
 8000e58:	f7ff fc64 	bl	8000724 <configAudio>
  init_highpass_filter();
 8000e5c:	f000 fa4c 	bl	80012f8 <init_highpass_filter>
  arm_rfft_init_q15(&rfft_instance, FFT_SIZE, 0, 1);
 8000e60:	2301      	movs	r3, #1
 8000e62:	2200      	movs	r2, #0
 8000e64:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e68:	4854      	ldr	r0, [pc, #336]	@ (8000fbc <main+0x190>)
 8000e6a:	f007 fb3d 	bl	80084e8 <arm_rfft_init_q15>

  HAL_TIM_Base_Start(&htim2);
 8000e6e:	4854      	ldr	r0, [pc, #336]	@ (8000fc0 <main+0x194>)
 8000e70:	f005 fe90 	bl	8006b94 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, adc_signal, ADC_SIZE);
 8000e74:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e78:	4952      	ldr	r1, [pc, #328]	@ (8000fc4 <main+0x198>)
 8000e7a:	4853      	ldr	r0, [pc, #332]	@ (8000fc8 <main+0x19c>)
 8000e7c:	f000 fe0a 	bl	8001a94 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (adc_half_flag == 1) {
 8000e80:	4b52      	ldr	r3, [pc, #328]	@ (8000fcc <main+0x1a0>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d145      	bne.n	8000f16 <main+0xea>
    	adc_half_flag = 0;
 8000e8a:	4b50      	ldr	r3, [pc, #320]	@ (8000fcc <main+0x1a0>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	701a      	strb	r2, [r3, #0]
    	conv_flag = 0;
 8000e90:	4b4f      	ldr	r3, [pc, #316]	@ (8000fd0 <main+0x1a4>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	701a      	strb	r2, [r3, #0]
    	last_systick = HAL_GetTick();
 8000e96:	f000 fdad 	bl	80019f4 <HAL_GetTick>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	4a4d      	ldr	r2, [pc, #308]	@ (8000fd4 <main+0x1a8>)
 8000e9e:	6013      	str	r3, [r2, #0]

    	convert_to_q15(adc_signal, conv_signal, ADC_SIZE);
 8000ea0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ea4:	494c      	ldr	r1, [pc, #304]	@ (8000fd8 <main+0x1ac>)
 8000ea6:	4847      	ldr	r0, [pc, #284]	@ (8000fc4 <main+0x198>)
 8000ea8:	f000 f914 	bl	80010d4 <convert_to_q15>
    	center_signal(conv_signal, ADC_SIZE/2);
 8000eac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000eb0:	4849      	ldr	r0, [pc, #292]	@ (8000fd8 <main+0x1ac>)
 8000eb2:	f000 f965 	bl	8001180 <center_signal>
    	apply_highpass_filter(conv_signal, filtered_signal, ADC_SIZE/2);
 8000eb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000eba:	4948      	ldr	r1, [pc, #288]	@ (8000fdc <main+0x1b0>)
 8000ebc:	4846      	ldr	r0, [pc, #280]	@ (8000fd8 <main+0x1ac>)
 8000ebe:	f000 fa09 	bl	80012d4 <apply_highpass_filter>
    	center_signal(filtered_signal, ADC_SIZE/2);
 8000ec2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ec6:	4845      	ldr	r0, [pc, #276]	@ (8000fdc <main+0x1b0>)
 8000ec8:	f000 f95a 	bl	8001180 <center_signal>

    	memcpy(fft_signal, filtered_signal, FFT_SIZE*sizeof(q15_t));
 8000ecc:	4a44      	ldr	r2, [pc, #272]	@ (8000fe0 <main+0x1b4>)
 8000ece:	4b43      	ldr	r3, [pc, #268]	@ (8000fdc <main+0x1b0>)
 8000ed0:	4610      	mov	r0, r2
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ed8:	461a      	mov	r2, r3
 8000eda:	f008 f8e5 	bl	80090a8 <memcpy>
		rfft(fft_signal, fftOutput, magnitudeSpectrum);
 8000ede:	4a41      	ldr	r2, [pc, #260]	@ (8000fe4 <main+0x1b8>)
 8000ee0:	4941      	ldr	r1, [pc, #260]	@ (8000fe8 <main+0x1bc>)
 8000ee2:	483f      	ldr	r0, [pc, #252]	@ (8000fe0 <main+0x1b4>)
 8000ee4:	f000 fa1c 	bl	8001320 <rfft>
    	last_systick = HAL_GetTick();
 8000ee8:	f000 fd84 	bl	80019f4 <HAL_GetTick>
 8000eec:	4603      	mov	r3, r0
 8000eee:	4a39      	ldr	r2, [pc, #228]	@ (8000fd4 <main+0x1a8>)
 8000ef0:	6013      	str	r3, [r2, #0]
		peak_values_fft(magnitudeSpectrum);
 8000ef2:	483c      	ldr	r0, [pc, #240]	@ (8000fe4 <main+0x1b8>)
 8000ef4:	f000 fa32 	bl	800135c <peak_values_fft>
    	offset_signal(filtered_signal, output_signal, ADC_SIZE/2);
 8000ef8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000efc:	493b      	ldr	r1, [pc, #236]	@ (8000fec <main+0x1c0>)
 8000efe:	4837      	ldr	r0, [pc, #220]	@ (8000fdc <main+0x1b0>)
 8000f00:	f000 f96c 	bl	80011dc <offset_signal>


		i2s_send_flag = 0; //DA KRENE PRVU POLOVICU
 8000f04:	4b3a      	ldr	r3, [pc, #232]	@ (8000ff0 <main+0x1c4>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	701a      	strb	r2, [r3, #0]

		convert_to_i2s(output_signal, i2s_signal, ADC_SIZE);
 8000f0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f0e:	4939      	ldr	r1, [pc, #228]	@ (8000ff4 <main+0x1c8>)
 8000f10:	4836      	ldr	r0, [pc, #216]	@ (8000fec <main+0x1c0>)
 8000f12:	f000 f97b 	bl	800120c <convert_to_i2s>

    }

    if (adc_done_flag == 1) {
 8000f16:	4b38      	ldr	r3, [pc, #224]	@ (8000ff8 <main+0x1cc>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d1af      	bne.n	8000e80 <main+0x54>
    	adc_done_flag = 0;
 8000f20:	4b35      	ldr	r3, [pc, #212]	@ (8000ff8 <main+0x1cc>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	701a      	strb	r2, [r3, #0]
    	conv_flag = 1;
 8000f26:	4b2a      	ldr	r3, [pc, #168]	@ (8000fd0 <main+0x1a4>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	701a      	strb	r2, [r3, #0]

    	convert_to_q15(adc_signal, conv_signal, ADC_SIZE);
 8000f2c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f30:	4929      	ldr	r1, [pc, #164]	@ (8000fd8 <main+0x1ac>)
 8000f32:	4824      	ldr	r0, [pc, #144]	@ (8000fc4 <main+0x198>)
 8000f34:	f000 f8ce 	bl	80010d4 <convert_to_q15>
    	center_signal(conv_signal, ADC_SIZE/2);
 8000f38:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f3c:	4826      	ldr	r0, [pc, #152]	@ (8000fd8 <main+0x1ac>)
 8000f3e:	f000 f91f 	bl	8001180 <center_signal>
    	apply_highpass_filter(conv_signal, filtered_signal, ADC_SIZE/2);
 8000f42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f46:	4925      	ldr	r1, [pc, #148]	@ (8000fdc <main+0x1b0>)
 8000f48:	4823      	ldr	r0, [pc, #140]	@ (8000fd8 <main+0x1ac>)
 8000f4a:	f000 f9c3 	bl	80012d4 <apply_highpass_filter>
    	center_signal(filtered_signal, ADC_SIZE/2);
 8000f4e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f52:	4822      	ldr	r0, [pc, #136]	@ (8000fdc <main+0x1b0>)
 8000f54:	f000 f914 	bl	8001180 <center_signal>


    	memcpy(fft_signal, filtered_signal, FFT_SIZE*sizeof(q15_t));
 8000f58:	4a21      	ldr	r2, [pc, #132]	@ (8000fe0 <main+0x1b4>)
 8000f5a:	4b20      	ldr	r3, [pc, #128]	@ (8000fdc <main+0x1b0>)
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	4619      	mov	r1, r3
 8000f60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f64:	461a      	mov	r2, r3
 8000f66:	f008 f89f 	bl	80090a8 <memcpy>
		rfft(fft_signal, fftOutput, magnitudeSpectrum);
 8000f6a:	4a1e      	ldr	r2, [pc, #120]	@ (8000fe4 <main+0x1b8>)
 8000f6c:	491e      	ldr	r1, [pc, #120]	@ (8000fe8 <main+0x1bc>)
 8000f6e:	481c      	ldr	r0, [pc, #112]	@ (8000fe0 <main+0x1b4>)
 8000f70:	f000 f9d6 	bl	8001320 <rfft>
    	last_systick = HAL_GetTick();
 8000f74:	f000 fd3e 	bl	80019f4 <HAL_GetTick>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	4a16      	ldr	r2, [pc, #88]	@ (8000fd4 <main+0x1a8>)
 8000f7c:	6013      	str	r3, [r2, #0]
		peak_values_fft(magnitudeSpectrum);
 8000f7e:	4819      	ldr	r0, [pc, #100]	@ (8000fe4 <main+0x1b8>)
 8000f80:	f000 f9ec 	bl	800135c <peak_values_fft>
    	offset_signal(filtered_signal, output_signal, ADC_SIZE/2);
 8000f84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f88:	4918      	ldr	r1, [pc, #96]	@ (8000fec <main+0x1c0>)
 8000f8a:	4814      	ldr	r0, [pc, #80]	@ (8000fdc <main+0x1b0>)
 8000f8c:	f000 f926 	bl	80011dc <offset_signal>
    	i2s_send_flag = 1; //DA KRENE DRUGU POLOVICU
 8000f90:	4b17      	ldr	r3, [pc, #92]	@ (8000ff0 <main+0x1c4>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	701a      	strb	r2, [r3, #0]
    	convert_to_i2s(output_signal, i2s_signal, ADC_SIZE);
 8000f96:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f9a:	4916      	ldr	r1, [pc, #88]	@ (8000ff4 <main+0x1c8>)
 8000f9c:	4813      	ldr	r0, [pc, #76]	@ (8000fec <main+0x1c0>)
 8000f9e:	f000 f935 	bl	800120c <convert_to_i2s>
		if (flag_uart == 1) {
 8000fa2:	4b16      	ldr	r3, [pc, #88]	@ (8000ffc <main+0x1d0>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d102      	bne.n	8000fb2 <main+0x186>
			callUart(i2s_signal);
 8000fac:	4811      	ldr	r0, [pc, #68]	@ (8000ff4 <main+0x1c8>)
 8000fae:	f000 fa17 	bl	80013e0 <callUart>
		}
		flag_uart = 0;
 8000fb2:	4b12      	ldr	r3, [pc, #72]	@ (8000ffc <main+0x1d0>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	701a      	strb	r2, [r3, #0]
	  if (adc_half_flag == 1) {
 8000fb8:	e762      	b.n	8000e80 <main+0x54>
 8000fba:	bf00      	nop
 8000fbc:	200033ec 	.word	0x200033ec
 8000fc0:	20003470 	.word	0x20003470
 8000fc4:	200001dc 	.word	0x200001dc
 8000fc8:	20000038 	.word	0x20000038
 8000fcc:	200033e2 	.word	0x200033e2
 8000fd0:	200033e4 	.word	0x200033e4
 8000fd4:	200033e8 	.word	0x200033e8
 8000fd8:	200009dc 	.word	0x200009dc
 8000fdc:	200011dc 	.word	0x200011dc
 8000fe0:	200025dc 	.word	0x200025dc
 8000fe4:	200031dc 	.word	0x200031dc
 8000fe8:	200029dc 	.word	0x200029dc
 8000fec:	20000ddc 	.word	0x20000ddc
 8000ff0:	200033e5 	.word	0x200033e5
 8000ff4:	200015dc 	.word	0x200015dc
 8000ff8:	200033e3 	.word	0x200033e3
 8000ffc:	200033e6 	.word	0x200033e6

08001000 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b094      	sub	sp, #80	@ 0x50
 8001004:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001006:	f107 0320 	add.w	r3, r7, #32
 800100a:	2230      	movs	r2, #48	@ 0x30
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f008 f81e 	bl	8009050 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001014:	f107 030c 	add.w	r3, r7, #12
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001024:	2300      	movs	r3, #0
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	4b28      	ldr	r3, [pc, #160]	@ (80010cc <SystemClock_Config+0xcc>)
 800102a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102c:	4a27      	ldr	r2, [pc, #156]	@ (80010cc <SystemClock_Config+0xcc>)
 800102e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001032:	6413      	str	r3, [r2, #64]	@ 0x40
 8001034:	4b25      	ldr	r3, [pc, #148]	@ (80010cc <SystemClock_Config+0xcc>)
 8001036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001038:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001040:	2300      	movs	r3, #0
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	4b22      	ldr	r3, [pc, #136]	@ (80010d0 <SystemClock_Config+0xd0>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a21      	ldr	r2, [pc, #132]	@ (80010d0 <SystemClock_Config+0xd0>)
 800104a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800104e:	6013      	str	r3, [r2, #0]
 8001050:	4b1f      	ldr	r3, [pc, #124]	@ (80010d0 <SystemClock_Config+0xd0>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800105c:	2301      	movs	r3, #1
 800105e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001060:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001064:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001066:	2302      	movs	r3, #2
 8001068:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800106a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800106e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001070:	2304      	movs	r3, #4
 8001072:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001074:	23a8      	movs	r3, #168	@ 0xa8
 8001076:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001078:	2302      	movs	r3, #2
 800107a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800107c:	2307      	movs	r3, #7
 800107e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001080:	f107 0320 	add.w	r3, r7, #32
 8001084:	4618      	mov	r0, r3
 8001086:	f004 fed3 	bl	8005e30 <HAL_RCC_OscConfig>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001090:	f000 f9f6 	bl	8001480 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001094:	230f      	movs	r3, #15
 8001096:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001098:	2302      	movs	r3, #2
 800109a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010a0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80010a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	2105      	movs	r1, #5
 80010b2:	4618      	mov	r0, r3
 80010b4:	f005 f934 	bl	8006320 <HAL_RCC_ClockConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80010be:	f000 f9df 	bl	8001480 <Error_Handler>
  }
}
 80010c2:	bf00      	nop
 80010c4:	3750      	adds	r7, #80	@ 0x50
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40007000 	.word	0x40007000

080010d4 <convert_to_q15>:
//        echo_buffer[i] = buffer[i];
//    }
//}


void convert_to_q15(uint16_t *rawInput, q15_t *convertedSignal, int size) {
 80010d4:	b480      	push	{r7}
 80010d6:	b087      	sub	sp, #28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
    int i;
    if (conv_flag == 0) {
 80010e0:	4b25      	ldr	r3, [pc, #148]	@ (8001178 <convert_to_q15+0xa4>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d11d      	bne.n	8001126 <convert_to_q15+0x52>
    	for (i = 0; i < size / 2; i++) {
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
 80010ee:	e012      	b.n	8001116 <convert_to_q15+0x42>
            convertedSignal[i] = (q15_t)((rawInput[i]) * master_volume);
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	68fa      	ldr	r2, [r7, #12]
 80010f6:	4413      	add	r3, r2
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	4a20      	ldr	r2, [pc, #128]	@ (800117c <convert_to_q15+0xa8>)
 80010fc:	7812      	ldrb	r2, [r2, #0]
 80010fe:	fb13 f302 	smulbb	r3, r3, r2
 8001102:	b299      	uxth	r1, r3
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	68ba      	ldr	r2, [r7, #8]
 800110a:	4413      	add	r3, r2
 800110c:	b20a      	sxth	r2, r1
 800110e:	801a      	strh	r2, [r3, #0]
    	for (i = 0; i < size / 2; i++) {
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	3301      	adds	r3, #1
 8001114:	617b      	str	r3, [r7, #20]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	0fda      	lsrs	r2, r3, #31
 800111a:	4413      	add	r3, r2
 800111c:	105b      	asrs	r3, r3, #1
 800111e:	461a      	mov	r2, r3
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	4293      	cmp	r3, r2
 8001124:	dbe4      	blt.n	80010f0 <convert_to_q15+0x1c>
        }
    }
    if (conv_flag == 1) {
 8001126:	4b14      	ldr	r3, [pc, #80]	@ (8001178 <convert_to_q15+0xa4>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	b2db      	uxtb	r3, r3
 800112c:	2b01      	cmp	r3, #1
 800112e:	d11c      	bne.n	800116a <convert_to_q15+0x96>
    	for (i = size / 2; i < size; i++) {
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	0fda      	lsrs	r2, r3, #31
 8001134:	4413      	add	r3, r2
 8001136:	105b      	asrs	r3, r3, #1
 8001138:	617b      	str	r3, [r7, #20]
 800113a:	e012      	b.n	8001162 <convert_to_q15+0x8e>
            convertedSignal[i] = (q15_t)((rawInput[i]) * master_volume);
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	4413      	add	r3, r2
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	4a0d      	ldr	r2, [pc, #52]	@ (800117c <convert_to_q15+0xa8>)
 8001148:	7812      	ldrb	r2, [r2, #0]
 800114a:	fb13 f302 	smulbb	r3, r3, r2
 800114e:	b299      	uxth	r1, r3
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	68ba      	ldr	r2, [r7, #8]
 8001156:	4413      	add	r3, r2
 8001158:	b20a      	sxth	r2, r1
 800115a:	801a      	strh	r2, [r3, #0]
    	for (i = size / 2; i < size; i++) {
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	3301      	adds	r3, #1
 8001160:	617b      	str	r3, [r7, #20]
 8001162:	697a      	ldr	r2, [r7, #20]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	429a      	cmp	r2, r3
 8001168:	dbe8      	blt.n	800113c <convert_to_q15+0x68>
        }
    }
}
 800116a:	bf00      	nop
 800116c:	371c      	adds	r7, #28
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	200033e4 	.word	0x200033e4
 800117c:	20000000 	.word	0x20000000

08001180 <center_signal>:

void center_signal(q15_t *input, uint16_t size) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	807b      	strh	r3, [r7, #2]
    q15_t mean;
    arm_mean_q15(input, size, &mean);
 800118c:	887b      	ldrh	r3, [r7, #2]
 800118e:	f107 020c 	add.w	r2, r7, #12
 8001192:	4619      	mov	r1, r3
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f007 f8c7 	bl	8008328 <arm_mean_q15>
    for (uint16_t i = 0; i < size; i++) {
 800119a:	2300      	movs	r3, #0
 800119c:	81fb      	strh	r3, [r7, #14]
 800119e:	e014      	b.n	80011ca <center_signal+0x4a>
        input[i] -= mean; // Oduzimanje DC offseta
 80011a0:	89fb      	ldrh	r3, [r7, #14]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	4413      	add	r3, r2
 80011a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	b299      	uxth	r1, r3
 80011b8:	89fb      	ldrh	r3, [r7, #14]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	4413      	add	r3, r2
 80011c0:	b20a      	sxth	r2, r1
 80011c2:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++) {
 80011c4:	89fb      	ldrh	r3, [r7, #14]
 80011c6:	3301      	adds	r3, #1
 80011c8:	81fb      	strh	r3, [r7, #14]
 80011ca:	89fa      	ldrh	r2, [r7, #14]
 80011cc:	887b      	ldrh	r3, [r7, #2]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d3e6      	bcc.n	80011a0 <center_signal+0x20>
    }
}
 80011d2:	bf00      	nop
 80011d4:	bf00      	nop
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <offset_signal>:
void offset_signal(q15_t *input, q15_t *output, uint16_t size, q15_t offset) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	4611      	mov	r1, r2
 80011e8:	461a      	mov	r2, r3
 80011ea:	460b      	mov	r3, r1
 80011ec:	80fb      	strh	r3, [r7, #6]
 80011ee:	4613      	mov	r3, r2
 80011f0:	80bb      	strh	r3, [r7, #4]
	arm_offset_q15(input, -offset, output, size);
 80011f2:	88bb      	ldrh	r3, [r7, #4]
 80011f4:	425b      	negs	r3, r3
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	b219      	sxth	r1, r3
 80011fa:	88fb      	ldrh	r3, [r7, #6]
 80011fc:	68ba      	ldr	r2, [r7, #8]
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f007 fb76 	bl	80088f0 <arm_offset_q15>
}
 8001204:	bf00      	nop
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <convert_to_i2s>:



void convert_to_i2s(q15_t *rawInput, q15_t *convertedSignal, int size) {
 800120c:	b480      	push	{r7}
 800120e:	b089      	sub	sp, #36	@ 0x24
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
    int i = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	61fb      	str	r3, [r7, #28]
    	if (i2s_send_flag == 0) {
 800121c:	4b2c      	ldr	r3, [pc, #176]	@ (80012d0 <convert_to_i2s+0xc4>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	d123      	bne.n	800126e <convert_to_i2s+0x62>
        	for (int j = 0; j < size; j += 2) {
 8001226:	2300      	movs	r3, #0
 8001228:	61bb      	str	r3, [r7, #24]
 800122a:	e01c      	b.n	8001266 <convert_to_i2s+0x5a>
        		convertedSignal[j] = (q15_t)(rawInput[i]);
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	68fa      	ldr	r2, [r7, #12]
 8001232:	441a      	add	r2, r3
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	68b9      	ldr	r1, [r7, #8]
 800123a:	440b      	add	r3, r1
 800123c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001240:	801a      	strh	r2, [r3, #0]
        		convertedSignal[j+1] = (q15_t)(rawInput[i]);
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	441a      	add	r2, r3
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	3301      	adds	r3, #1
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	68b9      	ldr	r1, [r7, #8]
 8001252:	440b      	add	r3, r1
 8001254:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001258:	801a      	strh	r2, [r3, #0]
        		i++;
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3301      	adds	r3, #1
 800125e:	61fb      	str	r3, [r7, #28]
        	for (int j = 0; j < size; j += 2) {
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	3302      	adds	r3, #2
 8001264:	61bb      	str	r3, [r7, #24]
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	429a      	cmp	r2, r3
 800126c:	dbde      	blt.n	800122c <convert_to_i2s+0x20>
        	}
    	}

    	if (i2s_send_flag == 1) {
 800126e:	4b18      	ldr	r3, [pc, #96]	@ (80012d0 <convert_to_i2s+0xc4>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b01      	cmp	r3, #1
 8001276:	d124      	bne.n	80012c2 <convert_to_i2s+0xb6>
        	for (int j = size; j < size*2; j += 2) {
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	e01c      	b.n	80012b8 <convert_to_i2s+0xac>
        		convertedSignal[j] = (q15_t)(rawInput[i]);
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	441a      	add	r2, r3
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	68b9      	ldr	r1, [r7, #8]
 800128c:	440b      	add	r3, r1
 800128e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001292:	801a      	strh	r2, [r3, #0]
        		convertedSignal[j+1] = (q15_t)(rawInput[i]);
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	68fa      	ldr	r2, [r7, #12]
 800129a:	441a      	add	r2, r3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	3301      	adds	r3, #1
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	68b9      	ldr	r1, [r7, #8]
 80012a4:	440b      	add	r3, r1
 80012a6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80012aa:	801a      	strh	r2, [r3, #0]
        		i++;
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	3301      	adds	r3, #1
 80012b0:	61fb      	str	r3, [r7, #28]
        	for (int j = size; j < size*2; j += 2) {
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	3302      	adds	r3, #2
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	697a      	ldr	r2, [r7, #20]
 80012be:	429a      	cmp	r2, r3
 80012c0:	dbdd      	blt.n	800127e <convert_to_i2s+0x72>
        	}
    	}
}
 80012c2:	bf00      	nop
 80012c4:	3724      	adds	r7, #36	@ 0x24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	200033e5 	.word	0x200033e5

080012d4 <apply_highpass_filter>:

void apply_highpass_filter(q15_t *input, q15_t *output, uint32_t blockSize) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
    arm_biquad_cascade_df1_q15(&highPassFilter, input, output, blockSize);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	68f9      	ldr	r1, [r7, #12]
 80012e6:	4803      	ldr	r0, [pc, #12]	@ (80012f4 <apply_highpass_filter+0x20>)
 80012e8:	f007 f986 	bl	80085f8 <arm_biquad_cascade_df1_q15>
}
 80012ec:	bf00      	nop
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20003404 	.word	0x20003404

080012f8 <init_highpass_filter>:
void init_highpass_filter() {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af02      	add	r7, sp, #8
    arm_biquad_cascade_df1_init_q15(&highPassFilter, 1, highPassCoeffsQ15, highPassState, 0);
 80012fe:	2300      	movs	r3, #0
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	4b04      	ldr	r3, [pc, #16]	@ (8001314 <init_highpass_filter+0x1c>)
 8001304:	4a04      	ldr	r2, [pc, #16]	@ (8001318 <init_highpass_filter+0x20>)
 8001306:	2101      	movs	r1, #1
 8001308:	4804      	ldr	r0, [pc, #16]	@ (800131c <init_highpass_filter+0x24>)
 800130a:	f007 fa13 	bl	8008734 <arm_biquad_cascade_df1_init_q15>
}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20003414 	.word	0x20003414
 8001318:	20000004 	.word	0x20000004
 800131c:	20003404 	.word	0x20003404

08001320 <rfft>:


void rfft(q15_t *inputSignal, q15_t *fftOutput, q15_t *magnitudeSpectrum) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]

	arm_rfft_q15(&rfft_instance, inputSignal, fftOutput); //rfft buffer izgleda jako cudno tho, DC, Nyquist, real1, imag1,
 800132c:	68ba      	ldr	r2, [r7, #8]
 800132e:	68f9      	ldr	r1, [r7, #12]
 8001330:	4808      	ldr	r0, [pc, #32]	@ (8001354 <rfft+0x34>)
 8001332:	f007 f87b 	bl	800842c <arm_rfft_q15>
	offset = fftOutput[0];
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	f9b3 2000 	ldrsh.w	r2, [r3]
 800133c:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <rfft+0x38>)
 800133e:	801a      	strh	r2, [r3, #0]
    arm_cmplx_mag_q15(fftOutput, magnitudeSpectrum, FFT_SIZE / 2);
 8001340:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001344:	6879      	ldr	r1, [r7, #4]
 8001346:	68b8      	ldr	r0, [r7, #8]
 8001348:	f007 fa04 	bl	8008754 <arm_cmplx_mag_q15>

 //ovo je za magnitudes, mora biti /2 jer je simetrično, nyquistov dijagram iz automatskog samo poz frekv
}
 800134c:	bf00      	nop
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	200033ec 	.word	0x200033ec
 8001358:	200033e0 	.word	0x200033e0

0800135c <peak_values_fft>:

void peak_values_fft(q15_t *magnitudeSpectrum) {
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < FFT_SIZE/2; i++) {
 8001364:	2300      	movs	r3, #0
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	e029      	b.n	80013be <peak_values_fft+0x62>
		if (magnitudeSpectrum[i] > peakVal) {
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001376:	4b17      	ldr	r3, [pc, #92]	@ (80013d4 <peak_values_fft+0x78>)
 8001378:	f9b3 3000 	ldrsh.w	r3, [r3]
 800137c:	429a      	cmp	r2, r3
 800137e:	dd1b      	ble.n	80013b8 <peak_values_fft+0x5c>
			peakVal = magnitudeSpectrum[i];
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	4413      	add	r3, r2
 8001388:	f9b3 2000 	ldrsh.w	r2, [r3]
 800138c:	4b11      	ldr	r3, [pc, #68]	@ (80013d4 <peak_values_fft+0x78>)
 800138e:	801a      	strh	r2, [r3, #0]
			peakHz = (uint16_t)(i * SAMPLE_FREQ / (float)FFT_SIZE);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f24b 128f 	movw	r2, #45455	@ 0xb18f
 8001396:	fb02 f303 	mul.w	r3, r2, r3
 800139a:	ee07 3a90 	vmov	s15, r3
 800139e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013a2:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 80013d8 <peak_values_fft+0x7c>
 80013a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013ae:	ee17 3a90 	vmov	r3, s15
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	4b09      	ldr	r3, [pc, #36]	@ (80013dc <peak_values_fft+0x80>)
 80013b6:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < FFT_SIZE/2; i++) {
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	3301      	adds	r3, #1
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2bff      	cmp	r3, #255	@ 0xff
 80013c2:	ddd2      	ble.n	800136a <peak_values_fft+0xe>
		}
	}
}
 80013c4:	bf00      	nop
 80013c6:	bf00      	nop
 80013c8:	3714      	adds	r7, #20
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	200033dc 	.word	0x200033dc
 80013d8:	44000000 	.word	0x44000000
 80013dc:	200033de 	.word	0x200033de

080013e0 <callUart>:



void callUart(q15_t *input) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit_DMA(&huart2, (uint8_t *)input, sizeof(input));
 80013e8:	2204      	movs	r2, #4
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	4806      	ldr	r0, [pc, #24]	@ (8001408 <callUart+0x28>)
 80013ee:	f005 ff13 	bl	8007218 <HAL_UART_Transmit_DMA>
	  HAL_I2S_Transmit_DMA(&hi2s3, input, ADC_SIZE*2);
 80013f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	4804      	ldr	r0, [pc, #16]	@ (800140c <callUart+0x2c>)
 80013fa:	f004 f8c1 	bl	8005580 <HAL_I2S_Transmit_DMA>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	200034b8 	.word	0x200034b8
 800140c:	20000134 	.word	0x20000134

08001410 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc1) {
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
	adc_half_flag = 1;
 8001418:	4b04      	ldr	r3, [pc, #16]	@ (800142c <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 800141a:	2201      	movs	r2, #1
 800141c:	701a      	strb	r2, [r3, #0]
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	200033e2 	.word	0x200033e2

08001430 <HAL_ADC_ConvCpltCallback>:



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc1) {
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	adc_done_flag = 1;
 8001438:	4b09      	ldr	r3, [pc, #36]	@ (8001460 <HAL_ADC_ConvCpltCallback+0x30>)
 800143a:	2201      	movs	r2, #1
 800143c:	701a      	strb	r2, [r3, #0]
	if (call_uart_once == 1) {
 800143e:	4b09      	ldr	r3, [pc, #36]	@ (8001464 <HAL_ADC_ConvCpltCallback+0x34>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2b01      	cmp	r3, #1
 8001446:	d102      	bne.n	800144e <HAL_ADC_ConvCpltCallback+0x1e>
		flag_uart =  1;
 8001448:	4b07      	ldr	r3, [pc, #28]	@ (8001468 <HAL_ADC_ConvCpltCallback+0x38>)
 800144a:	2201      	movs	r2, #1
 800144c:	701a      	strb	r2, [r3, #0]
	}
	call_uart_once = 0;
 800144e:	4b05      	ldr	r3, [pc, #20]	@ (8001464 <HAL_ADC_ConvCpltCallback+0x34>)
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	200033e3 	.word	0x200033e3
 8001464:	20000001 	.word	0x20000001
 8001468:	200033e6 	.word	0x200033e6

0800146c <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
    if (hi2s->Instance == SPI3) {
    }
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001484:	b672      	cpsid	i
}
 8001486:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001488:	bf00      	nop
 800148a:	e7fd      	b.n	8001488 <Error_Handler+0x8>

0800148c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001490:	4b17      	ldr	r3, [pc, #92]	@ (80014f0 <MX_SPI1_Init+0x64>)
 8001492:	4a18      	ldr	r2, [pc, #96]	@ (80014f4 <MX_SPI1_Init+0x68>)
 8001494:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001496:	4b16      	ldr	r3, [pc, #88]	@ (80014f0 <MX_SPI1_Init+0x64>)
 8001498:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800149c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800149e:	4b14      	ldr	r3, [pc, #80]	@ (80014f0 <MX_SPI1_Init+0x64>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014a4:	4b12      	ldr	r3, [pc, #72]	@ (80014f0 <MX_SPI1_Init+0x64>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014aa:	4b11      	ldr	r3, [pc, #68]	@ (80014f0 <MX_SPI1_Init+0x64>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014b0:	4b0f      	ldr	r3, [pc, #60]	@ (80014f0 <MX_SPI1_Init+0x64>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014b6:	4b0e      	ldr	r3, [pc, #56]	@ (80014f0 <MX_SPI1_Init+0x64>)
 80014b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014be:	4b0c      	ldr	r3, [pc, #48]	@ (80014f0 <MX_SPI1_Init+0x64>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014c4:	4b0a      	ldr	r3, [pc, #40]	@ (80014f0 <MX_SPI1_Init+0x64>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014ca:	4b09      	ldr	r3, [pc, #36]	@ (80014f0 <MX_SPI1_Init+0x64>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014d0:	4b07      	ldr	r3, [pc, #28]	@ (80014f0 <MX_SPI1_Init+0x64>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80014d6:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <MX_SPI1_Init+0x64>)
 80014d8:	220a      	movs	r2, #10
 80014da:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014dc:	4804      	ldr	r0, [pc, #16]	@ (80014f0 <MX_SPI1_Init+0x64>)
 80014de:	f005 fa81 	bl	80069e4 <HAL_SPI_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80014e8:	f7ff ffca 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20003418 	.word	0x20003418
 80014f4:	40013000 	.word	0x40013000

080014f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08a      	sub	sp, #40	@ 0x28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a19      	ldr	r2, [pc, #100]	@ (800157c <HAL_SPI_MspInit+0x84>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d12b      	bne.n	8001572 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	613b      	str	r3, [r7, #16]
 800151e:	4b18      	ldr	r3, [pc, #96]	@ (8001580 <HAL_SPI_MspInit+0x88>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001522:	4a17      	ldr	r2, [pc, #92]	@ (8001580 <HAL_SPI_MspInit+0x88>)
 8001524:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001528:	6453      	str	r3, [r2, #68]	@ 0x44
 800152a:	4b15      	ldr	r3, [pc, #84]	@ (8001580 <HAL_SPI_MspInit+0x88>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800152e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001532:	613b      	str	r3, [r7, #16]
 8001534:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	4b11      	ldr	r3, [pc, #68]	@ (8001580 <HAL_SPI_MspInit+0x88>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153e:	4a10      	ldr	r2, [pc, #64]	@ (8001580 <HAL_SPI_MspInit+0x88>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6313      	str	r3, [r2, #48]	@ 0x30
 8001546:	4b0e      	ldr	r3, [pc, #56]	@ (8001580 <HAL_SPI_MspInit+0x88>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001552:	23e0      	movs	r3, #224	@ 0xe0
 8001554:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001556:	2302      	movs	r3, #2
 8001558:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2300      	movs	r3, #0
 8001560:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001562:	2305      	movs	r3, #5
 8001564:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001566:	f107 0314 	add.w	r3, r7, #20
 800156a:	4619      	mov	r1, r3
 800156c:	4805      	ldr	r0, [pc, #20]	@ (8001584 <HAL_SPI_MspInit+0x8c>)
 800156e:	f001 facd 	bl	8002b0c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001572:	bf00      	nop
 8001574:	3728      	adds	r7, #40	@ 0x28
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40013000 	.word	0x40013000
 8001580:	40023800 	.word	0x40023800
 8001584:	40020000 	.word	0x40020000

08001588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	4b10      	ldr	r3, [pc, #64]	@ (80015d4 <HAL_MspInit+0x4c>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001596:	4a0f      	ldr	r2, [pc, #60]	@ (80015d4 <HAL_MspInit+0x4c>)
 8001598:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800159c:	6453      	str	r3, [r2, #68]	@ 0x44
 800159e:	4b0d      	ldr	r3, [pc, #52]	@ (80015d4 <HAL_MspInit+0x4c>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	603b      	str	r3, [r7, #0]
 80015ae:	4b09      	ldr	r3, [pc, #36]	@ (80015d4 <HAL_MspInit+0x4c>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b2:	4a08      	ldr	r2, [pc, #32]	@ (80015d4 <HAL_MspInit+0x4c>)
 80015b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ba:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <HAL_MspInit+0x4c>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015c6:	2007      	movs	r0, #7
 80015c8:	f000 feee 	bl	80023a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40023800 	.word	0x40023800

080015d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015dc:	bf00      	nop
 80015de:	e7fd      	b.n	80015dc <NMI_Handler+0x4>

080015e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e4:	bf00      	nop
 80015e6:	e7fd      	b.n	80015e4 <HardFault_Handler+0x4>

080015e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015ec:	bf00      	nop
 80015ee:	e7fd      	b.n	80015ec <MemManage_Handler+0x4>

080015f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f4:	bf00      	nop
 80015f6:	e7fd      	b.n	80015f4 <BusFault_Handler+0x4>

080015f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015fc:	bf00      	nop
 80015fe:	e7fd      	b.n	80015fc <UsageFault_Handler+0x4>

08001600 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800162e:	f000 f9cd 	bl	80019cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800163c:	4802      	ldr	r0, [pc, #8]	@ (8001648 <DMA1_Stream6_IRQHandler+0x10>)
 800163e:	f000 fffb 	bl	8002638 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20003500 	.word	0x20003500

0800164c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001650:	4802      	ldr	r0, [pc, #8]	@ (800165c <DMA1_Stream7_IRQHandler+0x10>)
 8001652:	f000 fff1 	bl	8002638 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	2000017c 	.word	0x2000017c

08001660 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001664:	4802      	ldr	r0, [pc, #8]	@ (8001670 <DMA2_Stream0_IRQHandler+0x10>)
 8001666:	f000 ffe7 	bl	8002638 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000080 	.word	0x20000080

08001674 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001678:	4802      	ldr	r0, [pc, #8]	@ (8001684 <OTG_FS_IRQHandler+0x10>)
 800167a:	f001 fbfc 	bl	8002e76 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20003564 	.word	0x20003564

08001688 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800168c:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <SystemInit+0x20>)
 800168e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001692:	4a05      	ldr	r2, [pc, #20]	@ (80016a8 <SystemInit+0x20>)
 8001694:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001698:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016b2:	f107 0308 	add.w	r3, r7, #8
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c0:	463b      	mov	r3, r7
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001740 <MX_TIM2_Init+0x94>)
 80016ca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80016d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001740 <MX_TIM2_Init+0x94>)
 80016d2:	2253      	movs	r2, #83	@ 0x53
 80016d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001740 <MX_TIM2_Init+0x94>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 22-1;
 80016dc:	4b18      	ldr	r3, [pc, #96]	@ (8001740 <MX_TIM2_Init+0x94>)
 80016de:	2215      	movs	r2, #21
 80016e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e2:	4b17      	ldr	r3, [pc, #92]	@ (8001740 <MX_TIM2_Init+0x94>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e8:	4b15      	ldr	r3, [pc, #84]	@ (8001740 <MX_TIM2_Init+0x94>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016ee:	4814      	ldr	r0, [pc, #80]	@ (8001740 <MX_TIM2_Init+0x94>)
 80016f0:	f005 fa01 	bl	8006af6 <HAL_TIM_Base_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80016fa:	f7ff fec1 	bl	8001480 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001702:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001704:	f107 0308 	add.w	r3, r7, #8
 8001708:	4619      	mov	r1, r3
 800170a:	480d      	ldr	r0, [pc, #52]	@ (8001740 <MX_TIM2_Init+0x94>)
 800170c:	f005 faaa 	bl	8006c64 <HAL_TIM_ConfigClockSource>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001716:	f7ff feb3 	bl	8001480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800171a:	2320      	movs	r3, #32
 800171c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800171e:	2300      	movs	r3, #0
 8001720:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001722:	463b      	mov	r3, r7
 8001724:	4619      	mov	r1, r3
 8001726:	4806      	ldr	r0, [pc, #24]	@ (8001740 <MX_TIM2_Init+0x94>)
 8001728:	f005 fcaa 	bl	8007080 <HAL_TIMEx_MasterConfigSynchronization>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001732:	f7ff fea5 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001736:	bf00      	nop
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20003470 	.word	0x20003470

08001744 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001754:	d10d      	bne.n	8001772 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	4b09      	ldr	r3, [pc, #36]	@ (8001780 <HAL_TIM_Base_MspInit+0x3c>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175e:	4a08      	ldr	r2, [pc, #32]	@ (8001780 <HAL_TIM_Base_MspInit+0x3c>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	6413      	str	r3, [r2, #64]	@ 0x40
 8001766:	4b06      	ldr	r3, [pc, #24]	@ (8001780 <HAL_TIM_Base_MspInit+0x3c>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001772:	bf00      	nop
 8001774:	3714      	adds	r7, #20
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	40023800 	.word	0x40023800

08001784 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001788:	4b11      	ldr	r3, [pc, #68]	@ (80017d0 <MX_USART2_UART_Init+0x4c>)
 800178a:	4a12      	ldr	r2, [pc, #72]	@ (80017d4 <MX_USART2_UART_Init+0x50>)
 800178c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 800178e:	4b10      	ldr	r3, [pc, #64]	@ (80017d0 <MX_USART2_UART_Init+0x4c>)
 8001790:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8001794:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001796:	4b0e      	ldr	r3, [pc, #56]	@ (80017d0 <MX_USART2_UART_Init+0x4c>)
 8001798:	2200      	movs	r2, #0
 800179a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800179c:	4b0c      	ldr	r3, [pc, #48]	@ (80017d0 <MX_USART2_UART_Init+0x4c>)
 800179e:	2200      	movs	r2, #0
 80017a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017a2:	4b0b      	ldr	r3, [pc, #44]	@ (80017d0 <MX_USART2_UART_Init+0x4c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 80017a8:	4b09      	ldr	r3, [pc, #36]	@ (80017d0 <MX_USART2_UART_Init+0x4c>)
 80017aa:	2208      	movs	r2, #8
 80017ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ae:	4b08      	ldr	r3, [pc, #32]	@ (80017d0 <MX_USART2_UART_Init+0x4c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017b4:	4b06      	ldr	r3, [pc, #24]	@ (80017d0 <MX_USART2_UART_Init+0x4c>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017ba:	4805      	ldr	r0, [pc, #20]	@ (80017d0 <MX_USART2_UART_Init+0x4c>)
 80017bc:	f005 fcdc 	bl	8007178 <HAL_UART_Init>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017c6:	f7ff fe5b 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	200034b8 	.word	0x200034b8
 80017d4:	40004400 	.word	0x40004400

080017d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08a      	sub	sp, #40	@ 0x28
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e0:	f107 0314 	add.w	r3, r7, #20
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a32      	ldr	r2, [pc, #200]	@ (80018c0 <HAL_UART_MspInit+0xe8>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d15d      	bne.n	80018b6 <HAL_UART_MspInit+0xde>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	4b31      	ldr	r3, [pc, #196]	@ (80018c4 <HAL_UART_MspInit+0xec>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001802:	4a30      	ldr	r2, [pc, #192]	@ (80018c4 <HAL_UART_MspInit+0xec>)
 8001804:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001808:	6413      	str	r3, [r2, #64]	@ 0x40
 800180a:	4b2e      	ldr	r3, [pc, #184]	@ (80018c4 <HAL_UART_MspInit+0xec>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	4b2a      	ldr	r3, [pc, #168]	@ (80018c4 <HAL_UART_MspInit+0xec>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	4a29      	ldr	r2, [pc, #164]	@ (80018c4 <HAL_UART_MspInit+0xec>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6313      	str	r3, [r2, #48]	@ 0x30
 8001826:	4b27      	ldr	r3, [pc, #156]	@ (80018c4 <HAL_UART_MspInit+0xec>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001832:	230c      	movs	r3, #12
 8001834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001836:	2302      	movs	r3, #2
 8001838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183e:	2303      	movs	r3, #3
 8001840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001842:	2307      	movs	r3, #7
 8001844:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	4619      	mov	r1, r3
 800184c:	481e      	ldr	r0, [pc, #120]	@ (80018c8 <HAL_UART_MspInit+0xf0>)
 800184e:	f001 f95d 	bl	8002b0c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001852:	4b1e      	ldr	r3, [pc, #120]	@ (80018cc <HAL_UART_MspInit+0xf4>)
 8001854:	4a1e      	ldr	r2, [pc, #120]	@ (80018d0 <HAL_UART_MspInit+0xf8>)
 8001856:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001858:	4b1c      	ldr	r3, [pc, #112]	@ (80018cc <HAL_UART_MspInit+0xf4>)
 800185a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800185e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001860:	4b1a      	ldr	r3, [pc, #104]	@ (80018cc <HAL_UART_MspInit+0xf4>)
 8001862:	2240      	movs	r2, #64	@ 0x40
 8001864:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001866:	4b19      	ldr	r3, [pc, #100]	@ (80018cc <HAL_UART_MspInit+0xf4>)
 8001868:	2200      	movs	r2, #0
 800186a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800186c:	4b17      	ldr	r3, [pc, #92]	@ (80018cc <HAL_UART_MspInit+0xf4>)
 800186e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001872:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001874:	4b15      	ldr	r3, [pc, #84]	@ (80018cc <HAL_UART_MspInit+0xf4>)
 8001876:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800187a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800187c:	4b13      	ldr	r3, [pc, #76]	@ (80018cc <HAL_UART_MspInit+0xf4>)
 800187e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001882:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8001884:	4b11      	ldr	r3, [pc, #68]	@ (80018cc <HAL_UART_MspInit+0xf4>)
 8001886:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800188a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800188c:	4b0f      	ldr	r3, [pc, #60]	@ (80018cc <HAL_UART_MspInit+0xf4>)
 800188e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001892:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001894:	4b0d      	ldr	r3, [pc, #52]	@ (80018cc <HAL_UART_MspInit+0xf4>)
 8001896:	2200      	movs	r2, #0
 8001898:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800189a:	480c      	ldr	r0, [pc, #48]	@ (80018cc <HAL_UART_MspInit+0xf4>)
 800189c:	f000 fdc6 	bl	800242c <HAL_DMA_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 80018a6:	f7ff fdeb 	bl	8001480 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a07      	ldr	r2, [pc, #28]	@ (80018cc <HAL_UART_MspInit+0xf4>)
 80018ae:	639a      	str	r2, [r3, #56]	@ 0x38
 80018b0:	4a06      	ldr	r2, [pc, #24]	@ (80018cc <HAL_UART_MspInit+0xf4>)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80018b6:	bf00      	nop
 80018b8:	3728      	adds	r7, #40	@ 0x28
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40004400 	.word	0x40004400
 80018c4:	40023800 	.word	0x40023800
 80018c8:	40020000 	.word	0x40020000
 80018cc:	20003500 	.word	0x20003500
 80018d0:	400260a0 	.word	0x400260a0

080018d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800190c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80018d8:	f7ff fed6 	bl	8001688 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018dc:	480c      	ldr	r0, [pc, #48]	@ (8001910 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018de:	490d      	ldr	r1, [pc, #52]	@ (8001914 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001918 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018e4:	e002      	b.n	80018ec <LoopCopyDataInit>

080018e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ea:	3304      	adds	r3, #4

080018ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018f0:	d3f9      	bcc.n	80018e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018f2:	4a0a      	ldr	r2, [pc, #40]	@ (800191c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001920 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f8:	e001      	b.n	80018fe <LoopFillZerobss>

080018fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018fc:	3204      	adds	r2, #4

080018fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001900:	d3fb      	bcc.n	80018fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001902:	f007 fbad 	bl	8009060 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001906:	f7ff fa91 	bl	8000e2c <main>
  bx  lr    
 800190a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800190c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001914:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001918:	0801af64 	.word	0x0801af64
  ldr r2, =_sbss
 800191c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001920:	20003944 	.word	0x20003944

08001924 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001924:	e7fe      	b.n	8001924 <ADC_IRQHandler>
	...

08001928 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800192c:	4b0e      	ldr	r3, [pc, #56]	@ (8001968 <HAL_Init+0x40>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a0d      	ldr	r2, [pc, #52]	@ (8001968 <HAL_Init+0x40>)
 8001932:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001936:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001938:	4b0b      	ldr	r3, [pc, #44]	@ (8001968 <HAL_Init+0x40>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a0a      	ldr	r2, [pc, #40]	@ (8001968 <HAL_Init+0x40>)
 800193e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001942:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001944:	4b08      	ldr	r3, [pc, #32]	@ (8001968 <HAL_Init+0x40>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a07      	ldr	r2, [pc, #28]	@ (8001968 <HAL_Init+0x40>)
 800194a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800194e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001950:	2003      	movs	r0, #3
 8001952:	f000 fd29 	bl	80023a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001956:	2000      	movs	r0, #0
 8001958:	f000 f808 	bl	800196c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800195c:	f7ff fe14 	bl	8001588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40023c00 	.word	0x40023c00

0800196c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001974:	4b12      	ldr	r3, [pc, #72]	@ (80019c0 <HAL_InitTick+0x54>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4b12      	ldr	r3, [pc, #72]	@ (80019c4 <HAL_InitTick+0x58>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	4619      	mov	r1, r3
 800197e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001982:	fbb3 f3f1 	udiv	r3, r3, r1
 8001986:	fbb2 f3f3 	udiv	r3, r2, r3
 800198a:	4618      	mov	r0, r3
 800198c:	f000 fd41 	bl	8002412 <HAL_SYSTICK_Config>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e00e      	b.n	80019b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2b0f      	cmp	r3, #15
 800199e:	d80a      	bhi.n	80019b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019a0:	2200      	movs	r2, #0
 80019a2:	6879      	ldr	r1, [r7, #4]
 80019a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019a8:	f000 fd09 	bl	80023be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019ac:	4a06      	ldr	r2, [pc, #24]	@ (80019c8 <HAL_InitTick+0x5c>)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019b2:	2300      	movs	r3, #0
 80019b4:	e000      	b.n	80019b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20000010 	.word	0x20000010
 80019c4:	20000018 	.word	0x20000018
 80019c8:	20000014 	.word	0x20000014

080019cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019d0:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <HAL_IncTick+0x20>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	461a      	mov	r2, r3
 80019d6:	4b06      	ldr	r3, [pc, #24]	@ (80019f0 <HAL_IncTick+0x24>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4413      	add	r3, r2
 80019dc:	4a04      	ldr	r2, [pc, #16]	@ (80019f0 <HAL_IncTick+0x24>)
 80019de:	6013      	str	r3, [r2, #0]
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	20000018 	.word	0x20000018
 80019f0:	20003560 	.word	0x20003560

080019f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return uwTick;
 80019f8:	4b03      	ldr	r3, [pc, #12]	@ (8001a08 <HAL_GetTick+0x14>)
 80019fa:	681b      	ldr	r3, [r3, #0]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	20003560 	.word	0x20003560

08001a0c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a14:	2300      	movs	r3, #0
 8001a16:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e033      	b.n	8001a8a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d109      	bne.n	8001a3e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7fe fdf6 	bl	800061c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a42:	f003 0310 	and.w	r3, r3, #16
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d118      	bne.n	8001a7c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a52:	f023 0302 	bic.w	r3, r3, #2
 8001a56:	f043 0202 	orr.w	r2, r3, #2
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 fa54 	bl	8001f0c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6e:	f023 0303 	bic.w	r3, r3, #3
 8001a72:	f043 0201 	orr.w	r2, r3, #1
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a7a:	e001      	b.n	8001a80 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
	...

08001a94 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d101      	bne.n	8001ab2 <HAL_ADC_Start_DMA+0x1e>
 8001aae:	2302      	movs	r3, #2
 8001ab0:	e0e9      	b.n	8001c86 <HAL_ADC_Start_DMA+0x1f2>
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d018      	beq.n	8001afa <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	689a      	ldr	r2, [r3, #8]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f042 0201 	orr.w	r2, r2, #1
 8001ad6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ad8:	4b6d      	ldr	r3, [pc, #436]	@ (8001c90 <HAL_ADC_Start_DMA+0x1fc>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a6d      	ldr	r2, [pc, #436]	@ (8001c94 <HAL_ADC_Start_DMA+0x200>)
 8001ade:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae2:	0c9a      	lsrs	r2, r3, #18
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	4413      	add	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001aec:	e002      	b.n	8001af4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	3b01      	subs	r3, #1
 8001af2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f9      	bne.n	8001aee <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b08:	d107      	bne.n	8001b1a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b18:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	f040 80a1 	bne.w	8001c6c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001b32:	f023 0301 	bic.w	r3, r3, #1
 8001b36:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d007      	beq.n	8001b5c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b50:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b54:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b68:	d106      	bne.n	8001b78 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b6e:	f023 0206 	bic.w	r2, r3, #6
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	645a      	str	r2, [r3, #68]	@ 0x44
 8001b76:	e002      	b.n	8001b7e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b86:	4b44      	ldr	r3, [pc, #272]	@ (8001c98 <HAL_ADC_Start_DMA+0x204>)
 8001b88:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b8e:	4a43      	ldr	r2, [pc, #268]	@ (8001c9c <HAL_ADC_Start_DMA+0x208>)
 8001b90:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b96:	4a42      	ldr	r2, [pc, #264]	@ (8001ca0 <HAL_ADC_Start_DMA+0x20c>)
 8001b98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b9e:	4a41      	ldr	r2, [pc, #260]	@ (8001ca4 <HAL_ADC_Start_DMA+0x210>)
 8001ba0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001baa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	685a      	ldr	r2, [r3, #4]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001bba:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	689a      	ldr	r2, [r3, #8]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001bca:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	334c      	adds	r3, #76	@ 0x4c
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	68ba      	ldr	r2, [r7, #8]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f000 fcd4 	bl	8002588 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 031f 	and.w	r3, r3, #31
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d12a      	bne.n	8001c42 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a2d      	ldr	r2, [pc, #180]	@ (8001ca8 <HAL_ADC_Start_DMA+0x214>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d015      	beq.n	8001c22 <HAL_ADC_Start_DMA+0x18e>
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a2c      	ldr	r2, [pc, #176]	@ (8001cac <HAL_ADC_Start_DMA+0x218>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d105      	bne.n	8001c0c <HAL_ADC_Start_DMA+0x178>
 8001c00:	4b25      	ldr	r3, [pc, #148]	@ (8001c98 <HAL_ADC_Start_DMA+0x204>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 031f 	and.w	r3, r3, #31
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d00a      	beq.n	8001c22 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a27      	ldr	r2, [pc, #156]	@ (8001cb0 <HAL_ADC_Start_DMA+0x21c>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d136      	bne.n	8001c84 <HAL_ADC_Start_DMA+0x1f0>
 8001c16:	4b20      	ldr	r3, [pc, #128]	@ (8001c98 <HAL_ADC_Start_DMA+0x204>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 0310 	and.w	r3, r3, #16
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d130      	bne.n	8001c84 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d129      	bne.n	8001c84 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689a      	ldr	r2, [r3, #8]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	e020      	b.n	8001c84 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a18      	ldr	r2, [pc, #96]	@ (8001ca8 <HAL_ADC_Start_DMA+0x214>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d11b      	bne.n	8001c84 <HAL_ADC_Start_DMA+0x1f0>
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d114      	bne.n	8001c84 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001c68:	609a      	str	r2, [r3, #8]
 8001c6a:	e00b      	b.n	8001c84 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c70:	f043 0210 	orr.w	r2, r3, #16
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c7c:	f043 0201 	orr.w	r2, r3, #1
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3718      	adds	r7, #24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000010 	.word	0x20000010
 8001c94:	431bde83 	.word	0x431bde83
 8001c98:	40012300 	.word	0x40012300
 8001c9c:	08002105 	.word	0x08002105
 8001ca0:	080021bf 	.word	0x080021bf
 8001ca4:	080021db 	.word	0x080021db
 8001ca8:	40012000 	.word	0x40012000
 8001cac:	40012100 	.word	0x40012100
 8001cb0:	40012200 	.word	0x40012200

08001cb4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d101      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x1c>
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	e105      	b.n	8001ef0 <HAL_ADC_ConfigChannel+0x228>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2b09      	cmp	r3, #9
 8001cf2:	d925      	bls.n	8001d40 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68d9      	ldr	r1, [r3, #12]
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	461a      	mov	r2, r3
 8001d02:	4613      	mov	r3, r2
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	4413      	add	r3, r2
 8001d08:	3b1e      	subs	r3, #30
 8001d0a:	2207      	movs	r2, #7
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	43da      	mvns	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	400a      	ands	r2, r1
 8001d18:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68d9      	ldr	r1, [r3, #12]
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	4403      	add	r3, r0
 8001d32:	3b1e      	subs	r3, #30
 8001d34:	409a      	lsls	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	e022      	b.n	8001d86 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6919      	ldr	r1, [r3, #16]
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4613      	mov	r3, r2
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	4413      	add	r3, r2
 8001d54:	2207      	movs	r2, #7
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43da      	mvns	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	400a      	ands	r2, r1
 8001d62:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6919      	ldr	r1, [r3, #16]
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	689a      	ldr	r2, [r3, #8]
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	4618      	mov	r0, r3
 8001d76:	4603      	mov	r3, r0
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	4403      	add	r3, r0
 8001d7c:	409a      	lsls	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	430a      	orrs	r2, r1
 8001d84:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b06      	cmp	r3, #6
 8001d8c:	d824      	bhi.n	8001dd8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	3b05      	subs	r3, #5
 8001da0:	221f      	movs	r2, #31
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43da      	mvns	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	400a      	ands	r2, r1
 8001dae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	4413      	add	r3, r2
 8001dc8:	3b05      	subs	r3, #5
 8001dca:	fa00 f203 	lsl.w	r2, r0, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001dd6:	e04c      	b.n	8001e72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	2b0c      	cmp	r3, #12
 8001dde:	d824      	bhi.n	8001e2a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	4613      	mov	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	3b23      	subs	r3, #35	@ 0x23
 8001df2:	221f      	movs	r2, #31
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	43da      	mvns	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	400a      	ands	r2, r1
 8001e00:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	4618      	mov	r0, r3
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685a      	ldr	r2, [r3, #4]
 8001e14:	4613      	mov	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4413      	add	r3, r2
 8001e1a:	3b23      	subs	r3, #35	@ 0x23
 8001e1c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	430a      	orrs	r2, r1
 8001e26:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e28:	e023      	b.n	8001e72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	4613      	mov	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	3b41      	subs	r3, #65	@ 0x41
 8001e3c:	221f      	movs	r2, #31
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	43da      	mvns	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	400a      	ands	r2, r1
 8001e4a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	4618      	mov	r0, r3
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685a      	ldr	r2, [r3, #4]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	3b41      	subs	r3, #65	@ 0x41
 8001e66:	fa00 f203 	lsl.w	r2, r0, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e72:	4b22      	ldr	r3, [pc, #136]	@ (8001efc <HAL_ADC_ConfigChannel+0x234>)
 8001e74:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a21      	ldr	r2, [pc, #132]	@ (8001f00 <HAL_ADC_ConfigChannel+0x238>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d109      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x1cc>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b12      	cmp	r3, #18
 8001e86:	d105      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a19      	ldr	r2, [pc, #100]	@ (8001f00 <HAL_ADC_ConfigChannel+0x238>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d123      	bne.n	8001ee6 <HAL_ADC_ConfigChannel+0x21e>
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2b10      	cmp	r3, #16
 8001ea4:	d003      	beq.n	8001eae <HAL_ADC_ConfigChannel+0x1e6>
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2b11      	cmp	r3, #17
 8001eac:	d11b      	bne.n	8001ee6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2b10      	cmp	r3, #16
 8001ec0:	d111      	bne.n	8001ee6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ec2:	4b10      	ldr	r3, [pc, #64]	@ (8001f04 <HAL_ADC_ConfigChannel+0x23c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a10      	ldr	r2, [pc, #64]	@ (8001f08 <HAL_ADC_ConfigChannel+0x240>)
 8001ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ecc:	0c9a      	lsrs	r2, r3, #18
 8001ece:	4613      	mov	r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	4413      	add	r3, r2
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001ed8:	e002      	b.n	8001ee0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	3b01      	subs	r3, #1
 8001ede:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1f9      	bne.n	8001eda <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	40012300 	.word	0x40012300
 8001f00:	40012000 	.word	0x40012000
 8001f04:	20000010 	.word	0x20000010
 8001f08:	431bde83 	.word	0x431bde83

08001f0c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f14:	4b79      	ldr	r3, [pc, #484]	@ (80020fc <ADC_Init+0x1f0>)
 8001f16:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6859      	ldr	r1, [r3, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	021a      	lsls	r2, r3, #8
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001f64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6859      	ldr	r1, [r3, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	689a      	ldr	r2, [r3, #8]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6899      	ldr	r1, [r3, #8]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68da      	ldr	r2, [r3, #12]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	430a      	orrs	r2, r1
 8001f98:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f9e:	4a58      	ldr	r2, [pc, #352]	@ (8002100 <ADC_Init+0x1f4>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d022      	beq.n	8001fea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001fb2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6899      	ldr	r1, [r3, #8]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001fd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6899      	ldr	r1, [r3, #8]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	e00f      	b.n	800200a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ff8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002008:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 0202 	bic.w	r2, r2, #2
 8002018:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6899      	ldr	r1, [r3, #8]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	7e1b      	ldrb	r3, [r3, #24]
 8002024:	005a      	lsls	r2, r3, #1
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	430a      	orrs	r2, r1
 800202c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d01b      	beq.n	8002070 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002046:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002056:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6859      	ldr	r1, [r3, #4]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002062:	3b01      	subs	r3, #1
 8002064:	035a      	lsls	r2, r3, #13
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	430a      	orrs	r2, r1
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	e007      	b.n	8002080 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800207e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800208e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	3b01      	subs	r3, #1
 800209c:	051a      	lsls	r2, r3, #20
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	430a      	orrs	r2, r1
 80020a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80020b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6899      	ldr	r1, [r3, #8]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80020c2:	025a      	lsls	r2, r3, #9
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	430a      	orrs	r2, r1
 80020ca:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689a      	ldr	r2, [r3, #8]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6899      	ldr	r1, [r3, #8]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	029a      	lsls	r2, r3, #10
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	430a      	orrs	r2, r1
 80020ee:	609a      	str	r2, [r3, #8]
}
 80020f0:	bf00      	nop
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	40012300 	.word	0x40012300
 8002100:	0f000001 	.word	0x0f000001

08002104 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002110:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002116:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800211a:	2b00      	cmp	r3, #0
 800211c:	d13c      	bne.n	8002198 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002122:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d12b      	bne.n	8002190 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800213c:	2b00      	cmp	r3, #0
 800213e:	d127      	bne.n	8002190 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002146:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800214a:	2b00      	cmp	r3, #0
 800214c:	d006      	beq.n	800215c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002158:	2b00      	cmp	r3, #0
 800215a:	d119      	bne.n	8002190 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	685a      	ldr	r2, [r3, #4]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 0220 	bic.w	r2, r2, #32
 800216a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002170:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d105      	bne.n	8002190 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002188:	f043 0201 	orr.w	r2, r3, #1
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002190:	68f8      	ldr	r0, [r7, #12]
 8002192:	f7ff f94d 	bl	8001430 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002196:	e00e      	b.n	80021b6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219c:	f003 0310 	and.w	r3, r3, #16
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d003      	beq.n	80021ac <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f7ff fd85 	bl	8001cb4 <HAL_ADC_ErrorCallback>
}
 80021aa:	e004      	b.n	80021b6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	4798      	blx	r3
}
 80021b6:	bf00      	nop
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b084      	sub	sp, #16
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ca:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f7ff f91f 	bl	8001410 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021d2:	bf00      	nop
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b084      	sub	sp, #16
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021e6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2240      	movs	r2, #64	@ 0x40
 80021ec:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f2:	f043 0204 	orr.w	r2, r3, #4
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f7ff fd5a 	bl	8001cb4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002200:	bf00      	nop
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002218:	4b0c      	ldr	r3, [pc, #48]	@ (800224c <__NVIC_SetPriorityGrouping+0x44>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002224:	4013      	ands	r3, r2
 8002226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002230:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002234:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002238:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800223a:	4a04      	ldr	r2, [pc, #16]	@ (800224c <__NVIC_SetPriorityGrouping+0x44>)
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	60d3      	str	r3, [r2, #12]
}
 8002240:	bf00      	nop
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	e000ed00 	.word	0xe000ed00

08002250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002254:	4b04      	ldr	r3, [pc, #16]	@ (8002268 <__NVIC_GetPriorityGrouping+0x18>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	0a1b      	lsrs	r3, r3, #8
 800225a:	f003 0307 	and.w	r3, r3, #7
}
 800225e:	4618      	mov	r0, r3
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	e000ed00 	.word	0xe000ed00

0800226c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227a:	2b00      	cmp	r3, #0
 800227c:	db0b      	blt.n	8002296 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800227e:	79fb      	ldrb	r3, [r7, #7]
 8002280:	f003 021f 	and.w	r2, r3, #31
 8002284:	4907      	ldr	r1, [pc, #28]	@ (80022a4 <__NVIC_EnableIRQ+0x38>)
 8002286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228a:	095b      	lsrs	r3, r3, #5
 800228c:	2001      	movs	r0, #1
 800228e:	fa00 f202 	lsl.w	r2, r0, r2
 8002292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	e000e100 	.word	0xe000e100

080022a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	6039      	str	r1, [r7, #0]
 80022b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	db0a      	blt.n	80022d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	490c      	ldr	r1, [pc, #48]	@ (80022f4 <__NVIC_SetPriority+0x4c>)
 80022c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c6:	0112      	lsls	r2, r2, #4
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	440b      	add	r3, r1
 80022cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022d0:	e00a      	b.n	80022e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	4908      	ldr	r1, [pc, #32]	@ (80022f8 <__NVIC_SetPriority+0x50>)
 80022d8:	79fb      	ldrb	r3, [r7, #7]
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	3b04      	subs	r3, #4
 80022e0:	0112      	lsls	r2, r2, #4
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	440b      	add	r3, r1
 80022e6:	761a      	strb	r2, [r3, #24]
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	e000e100 	.word	0xe000e100
 80022f8:	e000ed00 	.word	0xe000ed00

080022fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b089      	sub	sp, #36	@ 0x24
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f1c3 0307 	rsb	r3, r3, #7
 8002316:	2b04      	cmp	r3, #4
 8002318:	bf28      	it	cs
 800231a:	2304      	movcs	r3, #4
 800231c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	3304      	adds	r3, #4
 8002322:	2b06      	cmp	r3, #6
 8002324:	d902      	bls.n	800232c <NVIC_EncodePriority+0x30>
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	3b03      	subs	r3, #3
 800232a:	e000      	b.n	800232e <NVIC_EncodePriority+0x32>
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002330:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	43da      	mvns	r2, r3
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	401a      	ands	r2, r3
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002344:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	fa01 f303 	lsl.w	r3, r1, r3
 800234e:	43d9      	mvns	r1, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002354:	4313      	orrs	r3, r2
         );
}
 8002356:	4618      	mov	r0, r3
 8002358:	3724      	adds	r7, #36	@ 0x24
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
	...

08002364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3b01      	subs	r3, #1
 8002370:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002374:	d301      	bcc.n	800237a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002376:	2301      	movs	r3, #1
 8002378:	e00f      	b.n	800239a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800237a:	4a0a      	ldr	r2, [pc, #40]	@ (80023a4 <SysTick_Config+0x40>)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3b01      	subs	r3, #1
 8002380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002382:	210f      	movs	r1, #15
 8002384:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002388:	f7ff ff8e 	bl	80022a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800238c:	4b05      	ldr	r3, [pc, #20]	@ (80023a4 <SysTick_Config+0x40>)
 800238e:	2200      	movs	r2, #0
 8002390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002392:	4b04      	ldr	r3, [pc, #16]	@ (80023a4 <SysTick_Config+0x40>)
 8002394:	2207      	movs	r2, #7
 8002396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	e000e010 	.word	0xe000e010

080023a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7ff ff29 	bl	8002208 <__NVIC_SetPriorityGrouping>
}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023be:	b580      	push	{r7, lr}
 80023c0:	b086      	sub	sp, #24
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	4603      	mov	r3, r0
 80023c6:	60b9      	str	r1, [r7, #8]
 80023c8:	607a      	str	r2, [r7, #4]
 80023ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023d0:	f7ff ff3e 	bl	8002250 <__NVIC_GetPriorityGrouping>
 80023d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	68b9      	ldr	r1, [r7, #8]
 80023da:	6978      	ldr	r0, [r7, #20]
 80023dc:	f7ff ff8e 	bl	80022fc <NVIC_EncodePriority>
 80023e0:	4602      	mov	r2, r0
 80023e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023e6:	4611      	mov	r1, r2
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ff5d 	bl	80022a8 <__NVIC_SetPriority>
}
 80023ee:	bf00      	nop
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	4603      	mov	r3, r0
 80023fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff ff31 	bl	800226c <__NVIC_EnableIRQ>
}
 800240a:	bf00      	nop
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7ff ffa2 	bl	8002364 <SysTick_Config>
 8002420:	4603      	mov	r3, r0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
	...

0800242c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002438:	f7ff fadc 	bl	80019f4 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e099      	b.n	800257c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2202      	movs	r2, #2
 800244c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 0201 	bic.w	r2, r2, #1
 8002466:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002468:	e00f      	b.n	800248a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800246a:	f7ff fac3 	bl	80019f4 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b05      	cmp	r3, #5
 8002476:	d908      	bls.n	800248a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2220      	movs	r2, #32
 800247c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2203      	movs	r2, #3
 8002482:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e078      	b.n	800257c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1e8      	bne.n	800246a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	4b38      	ldr	r3, [pc, #224]	@ (8002584 <HAL_DMA_Init+0x158>)
 80024a4:	4013      	ands	r3, r2
 80024a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	4313      	orrs	r3, r2
 80024da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e0:	2b04      	cmp	r3, #4
 80024e2:	d107      	bne.n	80024f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ec:	4313      	orrs	r3, r2
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	f023 0307 	bic.w	r3, r3, #7
 800250a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	4313      	orrs	r3, r2
 8002514:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251a:	2b04      	cmp	r3, #4
 800251c:	d117      	bne.n	800254e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	4313      	orrs	r3, r2
 8002526:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00e      	beq.n	800254e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 fa6f 	bl	8002a14 <DMA_CheckFifoParam>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d008      	beq.n	800254e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2240      	movs	r2, #64	@ 0x40
 8002540:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800254a:	2301      	movs	r3, #1
 800254c:	e016      	b.n	800257c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 fa26 	bl	80029a8 <DMA_CalcBaseAndBitshift>
 800255c:	4603      	mov	r3, r0
 800255e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002564:	223f      	movs	r2, #63	@ 0x3f
 8002566:	409a      	lsls	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3718      	adds	r7, #24
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	f010803f 	.word	0xf010803f

08002588 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
 8002594:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002596:	2300      	movs	r3, #0
 8002598:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800259e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d101      	bne.n	80025ae <HAL_DMA_Start_IT+0x26>
 80025aa:	2302      	movs	r3, #2
 80025ac:	e040      	b.n	8002630 <HAL_DMA_Start_IT+0xa8>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d12f      	bne.n	8002622 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2202      	movs	r2, #2
 80025c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	68b9      	ldr	r1, [r7, #8]
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f000 f9b8 	bl	800294c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025e0:	223f      	movs	r2, #63	@ 0x3f
 80025e2:	409a      	lsls	r2, r3
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0216 	orr.w	r2, r2, #22
 80025f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d007      	beq.n	8002610 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f042 0208 	orr.w	r2, r2, #8
 800260e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f042 0201 	orr.w	r2, r2, #1
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	e005      	b.n	800262e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800262a:	2302      	movs	r3, #2
 800262c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800262e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002630:	4618      	mov	r0, r3
 8002632:	3718      	adds	r7, #24
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002640:	2300      	movs	r3, #0
 8002642:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002644:	4b8e      	ldr	r3, [pc, #568]	@ (8002880 <HAL_DMA_IRQHandler+0x248>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a8e      	ldr	r2, [pc, #568]	@ (8002884 <HAL_DMA_IRQHandler+0x24c>)
 800264a:	fba2 2303 	umull	r2, r3, r2, r3
 800264e:	0a9b      	lsrs	r3, r3, #10
 8002650:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002656:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002662:	2208      	movs	r2, #8
 8002664:	409a      	lsls	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	4013      	ands	r3, r2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d01a      	beq.n	80026a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	2b00      	cmp	r3, #0
 800267a:	d013      	beq.n	80026a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0204 	bic.w	r2, r2, #4
 800268a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002690:	2208      	movs	r2, #8
 8002692:	409a      	lsls	r2, r3
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800269c:	f043 0201 	orr.w	r2, r3, #1
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026a8:	2201      	movs	r2, #1
 80026aa:	409a      	lsls	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	4013      	ands	r3, r2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d012      	beq.n	80026da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00b      	beq.n	80026da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c6:	2201      	movs	r2, #1
 80026c8:	409a      	lsls	r2, r3
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026d2:	f043 0202 	orr.w	r2, r3, #2
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026de:	2204      	movs	r2, #4
 80026e0:	409a      	lsls	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	4013      	ands	r3, r2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d012      	beq.n	8002710 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00b      	beq.n	8002710 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026fc:	2204      	movs	r2, #4
 80026fe:	409a      	lsls	r2, r3
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002708:	f043 0204 	orr.w	r2, r3, #4
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002714:	2210      	movs	r2, #16
 8002716:	409a      	lsls	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	4013      	ands	r3, r2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d043      	beq.n	80027a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0308 	and.w	r3, r3, #8
 800272a:	2b00      	cmp	r3, #0
 800272c:	d03c      	beq.n	80027a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002732:	2210      	movs	r2, #16
 8002734:	409a      	lsls	r2, r3
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d018      	beq.n	800277a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d108      	bne.n	8002768 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275a:	2b00      	cmp	r3, #0
 800275c:	d024      	beq.n	80027a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	4798      	blx	r3
 8002766:	e01f      	b.n	80027a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800276c:	2b00      	cmp	r3, #0
 800276e:	d01b      	beq.n	80027a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	4798      	blx	r3
 8002778:	e016      	b.n	80027a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002784:	2b00      	cmp	r3, #0
 8002786:	d107      	bne.n	8002798 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 0208 	bic.w	r2, r2, #8
 8002796:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ac:	2220      	movs	r2, #32
 80027ae:	409a      	lsls	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4013      	ands	r3, r2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 808f 	beq.w	80028d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0310 	and.w	r3, r3, #16
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f000 8087 	beq.w	80028d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ce:	2220      	movs	r2, #32
 80027d0:	409a      	lsls	r2, r3
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b05      	cmp	r3, #5
 80027e0:	d136      	bne.n	8002850 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0216 	bic.w	r2, r2, #22
 80027f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	695a      	ldr	r2, [r3, #20]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002800:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002806:	2b00      	cmp	r3, #0
 8002808:	d103      	bne.n	8002812 <HAL_DMA_IRQHandler+0x1da>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800280e:	2b00      	cmp	r3, #0
 8002810:	d007      	beq.n	8002822 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 0208 	bic.w	r2, r2, #8
 8002820:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002826:	223f      	movs	r2, #63	@ 0x3f
 8002828:	409a      	lsls	r2, r3
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2201      	movs	r2, #1
 8002832:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002842:	2b00      	cmp	r3, #0
 8002844:	d07e      	beq.n	8002944 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	4798      	blx	r3
        }
        return;
 800284e:	e079      	b.n	8002944 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d01d      	beq.n	800289a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10d      	bne.n	8002888 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002870:	2b00      	cmp	r3, #0
 8002872:	d031      	beq.n	80028d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	4798      	blx	r3
 800287c:	e02c      	b.n	80028d8 <HAL_DMA_IRQHandler+0x2a0>
 800287e:	bf00      	nop
 8002880:	20000010 	.word	0x20000010
 8002884:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800288c:	2b00      	cmp	r3, #0
 800288e:	d023      	beq.n	80028d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	4798      	blx	r3
 8002898:	e01e      	b.n	80028d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10f      	bne.n	80028c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 0210 	bic.w	r2, r2, #16
 80028b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d003      	beq.n	80028d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d032      	beq.n	8002946 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d022      	beq.n	8002932 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2205      	movs	r2, #5
 80028f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 0201 	bic.w	r2, r2, #1
 8002902:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	3301      	adds	r3, #1
 8002908:	60bb      	str	r3, [r7, #8]
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	429a      	cmp	r2, r3
 800290e:	d307      	bcc.n	8002920 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1f2      	bne.n	8002904 <HAL_DMA_IRQHandler+0x2cc>
 800291e:	e000      	b.n	8002922 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002920:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002936:	2b00      	cmp	r3, #0
 8002938:	d005      	beq.n	8002946 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	4798      	blx	r3
 8002942:	e000      	b.n	8002946 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002944:	bf00      	nop
    }
  }
}
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
 8002958:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002968:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	2b40      	cmp	r3, #64	@ 0x40
 8002978:	d108      	bne.n	800298c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68ba      	ldr	r2, [r7, #8]
 8002988:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800298a:	e007      	b.n	800299c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68ba      	ldr	r2, [r7, #8]
 8002992:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	60da      	str	r2, [r3, #12]
}
 800299c:	bf00      	nop
 800299e:	3714      	adds	r7, #20
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	3b10      	subs	r3, #16
 80029b8:	4a14      	ldr	r2, [pc, #80]	@ (8002a0c <DMA_CalcBaseAndBitshift+0x64>)
 80029ba:	fba2 2303 	umull	r2, r3, r2, r3
 80029be:	091b      	lsrs	r3, r3, #4
 80029c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029c2:	4a13      	ldr	r2, [pc, #76]	@ (8002a10 <DMA_CalcBaseAndBitshift+0x68>)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	4413      	add	r3, r2
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	461a      	mov	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2b03      	cmp	r3, #3
 80029d4:	d909      	bls.n	80029ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80029de:	f023 0303 	bic.w	r3, r3, #3
 80029e2:	1d1a      	adds	r2, r3, #4
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	659a      	str	r2, [r3, #88]	@ 0x58
 80029e8:	e007      	b.n	80029fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80029f2:	f023 0303 	bic.w	r3, r3, #3
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	aaaaaaab 	.word	0xaaaaaaab
 8002a10:	080090f4 	.word	0x080090f4

08002a14 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a24:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d11f      	bne.n	8002a6e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2b03      	cmp	r3, #3
 8002a32:	d856      	bhi.n	8002ae2 <DMA_CheckFifoParam+0xce>
 8002a34:	a201      	add	r2, pc, #4	@ (adr r2, 8002a3c <DMA_CheckFifoParam+0x28>)
 8002a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a3a:	bf00      	nop
 8002a3c:	08002a4d 	.word	0x08002a4d
 8002a40:	08002a5f 	.word	0x08002a5f
 8002a44:	08002a4d 	.word	0x08002a4d
 8002a48:	08002ae3 	.word	0x08002ae3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d046      	beq.n	8002ae6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a5c:	e043      	b.n	8002ae6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a62:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a66:	d140      	bne.n	8002aea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a6c:	e03d      	b.n	8002aea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a76:	d121      	bne.n	8002abc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	2b03      	cmp	r3, #3
 8002a7c:	d837      	bhi.n	8002aee <DMA_CheckFifoParam+0xda>
 8002a7e:	a201      	add	r2, pc, #4	@ (adr r2, 8002a84 <DMA_CheckFifoParam+0x70>)
 8002a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a84:	08002a95 	.word	0x08002a95
 8002a88:	08002a9b 	.word	0x08002a9b
 8002a8c:	08002a95 	.word	0x08002a95
 8002a90:	08002aad 	.word	0x08002aad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	73fb      	strb	r3, [r7, #15]
      break;
 8002a98:	e030      	b.n	8002afc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a9e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d025      	beq.n	8002af2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aaa:	e022      	b.n	8002af2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ab4:	d11f      	bne.n	8002af6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002aba:	e01c      	b.n	8002af6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d903      	bls.n	8002aca <DMA_CheckFifoParam+0xb6>
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2b03      	cmp	r3, #3
 8002ac6:	d003      	beq.n	8002ad0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ac8:	e018      	b.n	8002afc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	73fb      	strb	r3, [r7, #15]
      break;
 8002ace:	e015      	b.n	8002afc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00e      	beq.n	8002afa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	73fb      	strb	r3, [r7, #15]
      break;
 8002ae0:	e00b      	b.n	8002afa <DMA_CheckFifoParam+0xe6>
      break;
 8002ae2:	bf00      	nop
 8002ae4:	e00a      	b.n	8002afc <DMA_CheckFifoParam+0xe8>
      break;
 8002ae6:	bf00      	nop
 8002ae8:	e008      	b.n	8002afc <DMA_CheckFifoParam+0xe8>
      break;
 8002aea:	bf00      	nop
 8002aec:	e006      	b.n	8002afc <DMA_CheckFifoParam+0xe8>
      break;
 8002aee:	bf00      	nop
 8002af0:	e004      	b.n	8002afc <DMA_CheckFifoParam+0xe8>
      break;
 8002af2:	bf00      	nop
 8002af4:	e002      	b.n	8002afc <DMA_CheckFifoParam+0xe8>
      break;   
 8002af6:	bf00      	nop
 8002af8:	e000      	b.n	8002afc <DMA_CheckFifoParam+0xe8>
      break;
 8002afa:	bf00      	nop
    }
  } 
  
  return status; 
 8002afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3714      	adds	r7, #20
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop

08002b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b089      	sub	sp, #36	@ 0x24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b22:	2300      	movs	r3, #0
 8002b24:	61fb      	str	r3, [r7, #28]
 8002b26:	e16b      	b.n	8002e00 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b28:	2201      	movs	r2, #1
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	f040 815a 	bne.w	8002dfa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f003 0303 	and.w	r3, r3, #3
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d005      	beq.n	8002b5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d130      	bne.n	8002bc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	2203      	movs	r2, #3
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4013      	ands	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	68da      	ldr	r2, [r3, #12]
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b94:	2201      	movs	r2, #1
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	091b      	lsrs	r3, r3, #4
 8002baa:	f003 0201 	and.w	r2, r3, #1
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f003 0303 	and.w	r3, r3, #3
 8002bc8:	2b03      	cmp	r3, #3
 8002bca:	d017      	beq.n	8002bfc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	2203      	movs	r2, #3
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	4013      	ands	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 0303 	and.w	r3, r3, #3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d123      	bne.n	8002c50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	08da      	lsrs	r2, r3, #3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3208      	adds	r2, #8
 8002c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	f003 0307 	and.w	r3, r3, #7
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	220f      	movs	r2, #15
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	43db      	mvns	r3, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	691a      	ldr	r2, [r3, #16]
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	08da      	lsrs	r2, r3, #3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	3208      	adds	r2, #8
 8002c4a:	69b9      	ldr	r1, [r7, #24]
 8002c4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	2203      	movs	r2, #3
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	43db      	mvns	r3, r3
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4013      	ands	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f003 0203 	and.w	r2, r3, #3
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 80b4 	beq.w	8002dfa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c92:	2300      	movs	r3, #0
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	4b60      	ldr	r3, [pc, #384]	@ (8002e18 <HAL_GPIO_Init+0x30c>)
 8002c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c9a:	4a5f      	ldr	r2, [pc, #380]	@ (8002e18 <HAL_GPIO_Init+0x30c>)
 8002c9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ca0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ca2:	4b5d      	ldr	r3, [pc, #372]	@ (8002e18 <HAL_GPIO_Init+0x30c>)
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ca6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cae:	4a5b      	ldr	r2, [pc, #364]	@ (8002e1c <HAL_GPIO_Init+0x310>)
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	089b      	lsrs	r3, r3, #2
 8002cb4:	3302      	adds	r3, #2
 8002cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	f003 0303 	and.w	r3, r3, #3
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	220f      	movs	r2, #15
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a52      	ldr	r2, [pc, #328]	@ (8002e20 <HAL_GPIO_Init+0x314>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d02b      	beq.n	8002d32 <HAL_GPIO_Init+0x226>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a51      	ldr	r2, [pc, #324]	@ (8002e24 <HAL_GPIO_Init+0x318>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d025      	beq.n	8002d2e <HAL_GPIO_Init+0x222>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a50      	ldr	r2, [pc, #320]	@ (8002e28 <HAL_GPIO_Init+0x31c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d01f      	beq.n	8002d2a <HAL_GPIO_Init+0x21e>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a4f      	ldr	r2, [pc, #316]	@ (8002e2c <HAL_GPIO_Init+0x320>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d019      	beq.n	8002d26 <HAL_GPIO_Init+0x21a>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a4e      	ldr	r2, [pc, #312]	@ (8002e30 <HAL_GPIO_Init+0x324>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d013      	beq.n	8002d22 <HAL_GPIO_Init+0x216>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a4d      	ldr	r2, [pc, #308]	@ (8002e34 <HAL_GPIO_Init+0x328>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d00d      	beq.n	8002d1e <HAL_GPIO_Init+0x212>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a4c      	ldr	r2, [pc, #304]	@ (8002e38 <HAL_GPIO_Init+0x32c>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d007      	beq.n	8002d1a <HAL_GPIO_Init+0x20e>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a4b      	ldr	r2, [pc, #300]	@ (8002e3c <HAL_GPIO_Init+0x330>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d101      	bne.n	8002d16 <HAL_GPIO_Init+0x20a>
 8002d12:	2307      	movs	r3, #7
 8002d14:	e00e      	b.n	8002d34 <HAL_GPIO_Init+0x228>
 8002d16:	2308      	movs	r3, #8
 8002d18:	e00c      	b.n	8002d34 <HAL_GPIO_Init+0x228>
 8002d1a:	2306      	movs	r3, #6
 8002d1c:	e00a      	b.n	8002d34 <HAL_GPIO_Init+0x228>
 8002d1e:	2305      	movs	r3, #5
 8002d20:	e008      	b.n	8002d34 <HAL_GPIO_Init+0x228>
 8002d22:	2304      	movs	r3, #4
 8002d24:	e006      	b.n	8002d34 <HAL_GPIO_Init+0x228>
 8002d26:	2303      	movs	r3, #3
 8002d28:	e004      	b.n	8002d34 <HAL_GPIO_Init+0x228>
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	e002      	b.n	8002d34 <HAL_GPIO_Init+0x228>
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e000      	b.n	8002d34 <HAL_GPIO_Init+0x228>
 8002d32:	2300      	movs	r3, #0
 8002d34:	69fa      	ldr	r2, [r7, #28]
 8002d36:	f002 0203 	and.w	r2, r2, #3
 8002d3a:	0092      	lsls	r2, r2, #2
 8002d3c:	4093      	lsls	r3, r2
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d44:	4935      	ldr	r1, [pc, #212]	@ (8002e1c <HAL_GPIO_Init+0x310>)
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	089b      	lsrs	r3, r3, #2
 8002d4a:	3302      	adds	r3, #2
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d52:	4b3b      	ldr	r3, [pc, #236]	@ (8002e40 <HAL_GPIO_Init+0x334>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d76:	4a32      	ldr	r2, [pc, #200]	@ (8002e40 <HAL_GPIO_Init+0x334>)
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d7c:	4b30      	ldr	r3, [pc, #192]	@ (8002e40 <HAL_GPIO_Init+0x334>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	43db      	mvns	r3, r3
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d003      	beq.n	8002da0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002da0:	4a27      	ldr	r2, [pc, #156]	@ (8002e40 <HAL_GPIO_Init+0x334>)
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002da6:	4b26      	ldr	r3, [pc, #152]	@ (8002e40 <HAL_GPIO_Init+0x334>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	43db      	mvns	r3, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4013      	ands	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dca:	4a1d      	ldr	r2, [pc, #116]	@ (8002e40 <HAL_GPIO_Init+0x334>)
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dd0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e40 <HAL_GPIO_Init+0x334>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d003      	beq.n	8002df4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002df4:	4a12      	ldr	r2, [pc, #72]	@ (8002e40 <HAL_GPIO_Init+0x334>)
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	61fb      	str	r3, [r7, #28]
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	2b0f      	cmp	r3, #15
 8002e04:	f67f ae90 	bls.w	8002b28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e08:	bf00      	nop
 8002e0a:	bf00      	nop
 8002e0c:	3724      	adds	r7, #36	@ 0x24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	40013800 	.word	0x40013800
 8002e20:	40020000 	.word	0x40020000
 8002e24:	40020400 	.word	0x40020400
 8002e28:	40020800 	.word	0x40020800
 8002e2c:	40020c00 	.word	0x40020c00
 8002e30:	40021000 	.word	0x40021000
 8002e34:	40021400 	.word	0x40021400
 8002e38:	40021800 	.word	0x40021800
 8002e3c:	40021c00 	.word	0x40021c00
 8002e40:	40013c00 	.word	0x40013c00

08002e44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	807b      	strh	r3, [r7, #2]
 8002e50:	4613      	mov	r3, r2
 8002e52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e54:	787b      	ldrb	r3, [r7, #1]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e5a:	887a      	ldrh	r2, [r7, #2]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e60:	e003      	b.n	8002e6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e62:	887b      	ldrh	r3, [r7, #2]
 8002e64:	041a      	lsls	r2, r3, #16
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	619a      	str	r2, [r3, #24]
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b086      	sub	sp, #24
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f004 ff03 	bl	8007c98 <USB_GetMode>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	f040 80fb 	bne.w	8003090 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f004 fec6 	bl	8007c30 <USB_ReadInterrupts>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 80f1 	beq.w	800308e <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f004 febd 	bl	8007c30 <USB_ReadInterrupts>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ebc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ec0:	d104      	bne.n	8002ecc <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002eca:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f004 fead 	bl	8007c30 <USB_ReadInterrupts>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002edc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ee0:	d104      	bne.n	8002eec <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002eea:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f004 fe9d 	bl	8007c30 <USB_ReadInterrupts>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002efc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f00:	d104      	bne.n	8002f0c <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002f0a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f004 fe8d 	bl	8007c30 <USB_ReadInterrupts>
 8002f16:	4603      	mov	r3, r0
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d103      	bne.n	8002f28 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2202      	movs	r2, #2
 8002f26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f004 fe7f 	bl	8007c30 <USB_ReadInterrupts>
 8002f32:	4603      	mov	r3, r0
 8002f34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f3c:	d120      	bne.n	8002f80 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002f46:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d113      	bne.n	8002f80 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002f58:	2110      	movs	r1, #16
 8002f5a:	6938      	ldr	r0, [r7, #16]
 8002f5c:	f004 fdb0 	bl	8007ac0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002f60:	6938      	ldr	r0, [r7, #16]
 8002f62:	f004 fddf 	bl	8007b24 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	7a5b      	ldrb	r3, [r3, #9]
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d105      	bne.n	8002f7a <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2101      	movs	r1, #1
 8002f74:	4618      	mov	r0, r3
 8002f76:	f004 fe9d 	bl	8007cb4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f005 f955 	bl	800822a <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f004 fe53 	bl	8007c30 <USB_ReadInterrupts>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f94:	d102      	bne.n	8002f9c <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f001 fca1 	bl	80048de <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f004 fe45 	bl	8007c30 <USB_ReadInterrupts>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	f003 0308 	and.w	r3, r3, #8
 8002fac:	2b08      	cmp	r3, #8
 8002fae:	d106      	bne.n	8002fbe <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f005 f91e 	bl	80081f2 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2208      	movs	r2, #8
 8002fbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f004 fe34 	bl	8007c30 <USB_ReadInterrupts>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002fd2:	d139      	bne.n	8003048 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f004 fea8 	bl	8007d2e <USB_HC_ReadInterrupt>
 8002fde:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	617b      	str	r3, [r7, #20]
 8002fe4:	e025      	b.n	8003032 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f003 030f 	and.w	r3, r3, #15
 8002fec:	68ba      	ldr	r2, [r7, #8]
 8002fee:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d018      	beq.n	800302c <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	015a      	lsls	r2, r3, #5
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	4413      	add	r3, r2
 8003002:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800300c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003010:	d106      	bne.n	8003020 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	b2db      	uxtb	r3, r3
 8003016:	4619      	mov	r1, r3
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f859 	bl	80030d0 <HCD_HC_IN_IRQHandler>
 800301e:	e005      	b.n	800302c <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	b2db      	uxtb	r3, r3
 8003024:	4619      	mov	r1, r3
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 febb 	bl	8003da2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	3301      	adds	r3, #1
 8003030:	617b      	str	r3, [r7, #20]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	795b      	ldrb	r3, [r3, #5]
 8003036:	461a      	mov	r2, r3
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	4293      	cmp	r3, r2
 800303c:	d3d3      	bcc.n	8002fe6 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003046:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f004 fdef 	bl	8007c30 <USB_ReadInterrupts>
 8003052:	4603      	mov	r3, r0
 8003054:	f003 0310 	and.w	r3, r3, #16
 8003058:	2b10      	cmp	r3, #16
 800305a:	d101      	bne.n	8003060 <HAL_HCD_IRQHandler+0x1ea>
 800305c:	2301      	movs	r3, #1
 800305e:	e000      	b.n	8003062 <HAL_HCD_IRQHandler+0x1ec>
 8003060:	2300      	movs	r3, #0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d014      	beq.n	8003090 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	699a      	ldr	r2, [r3, #24]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f022 0210 	bic.w	r2, r2, #16
 8003074:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f001 fb52 	bl	8004720 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	699a      	ldr	r2, [r3, #24]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0210 	orr.w	r2, r2, #16
 800308a:	619a      	str	r2, [r3, #24]
 800308c:	e000      	b.n	8003090 <HAL_HCD_IRQHandler+0x21a>
      return;
 800308e:	bf00      	nop
    }
  }
}
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b082      	sub	sp, #8
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d101      	bne.n	80030ac <HAL_HCD_Stop+0x16>
 80030a8:	2302      	movs	r3, #2
 80030aa:	e00d      	b.n	80030c8 <HAL_HCD_Stop+0x32>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f004 ff69 	bl	8007f90 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	460b      	mov	r3, r1
 80030da:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	78fa      	ldrb	r2, [r7, #3]
 80030ec:	4611      	mov	r1, r2
 80030ee:	4618      	mov	r0, r3
 80030f0:	f004 fdb1 	bl	8007c56 <USB_ReadChInterrupts>
 80030f4:	4603      	mov	r3, r0
 80030f6:	f003 0304 	and.w	r3, r3, #4
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	d11a      	bne.n	8003134 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80030fe:	78fb      	ldrb	r3, [r7, #3]
 8003100:	015a      	lsls	r2, r3, #5
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	4413      	add	r3, r2
 8003106:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800310a:	461a      	mov	r2, r3
 800310c:	2304      	movs	r3, #4
 800310e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003110:	78fa      	ldrb	r2, [r7, #3]
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	4613      	mov	r3, r2
 8003116:	011b      	lsls	r3, r3, #4
 8003118:	1a9b      	subs	r3, r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	440b      	add	r3, r1
 800311e:	334d      	adds	r3, #77	@ 0x4d
 8003120:	2207      	movs	r2, #7
 8003122:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	78fa      	ldrb	r2, [r7, #3]
 800312a:	4611      	mov	r1, r2
 800312c:	4618      	mov	r0, r3
 800312e:	f004 fe0f 	bl	8007d50 <USB_HC_Halt>
 8003132:	e09e      	b.n	8003272 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	78fa      	ldrb	r2, [r7, #3]
 800313a:	4611      	mov	r1, r2
 800313c:	4618      	mov	r0, r3
 800313e:	f004 fd8a 	bl	8007c56 <USB_ReadChInterrupts>
 8003142:	4603      	mov	r3, r0
 8003144:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003148:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800314c:	d11b      	bne.n	8003186 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800314e:	78fb      	ldrb	r3, [r7, #3]
 8003150:	015a      	lsls	r2, r3, #5
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	4413      	add	r3, r2
 8003156:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800315a:	461a      	mov	r2, r3
 800315c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003160:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003162:	78fa      	ldrb	r2, [r7, #3]
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	011b      	lsls	r3, r3, #4
 800316a:	1a9b      	subs	r3, r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	440b      	add	r3, r1
 8003170:	334d      	adds	r3, #77	@ 0x4d
 8003172:	2208      	movs	r2, #8
 8003174:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	78fa      	ldrb	r2, [r7, #3]
 800317c:	4611      	mov	r1, r2
 800317e:	4618      	mov	r0, r3
 8003180:	f004 fde6 	bl	8007d50 <USB_HC_Halt>
 8003184:	e075      	b.n	8003272 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	78fa      	ldrb	r2, [r7, #3]
 800318c:	4611      	mov	r1, r2
 800318e:	4618      	mov	r0, r3
 8003190:	f004 fd61 	bl	8007c56 <USB_ReadChInterrupts>
 8003194:	4603      	mov	r3, r0
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b08      	cmp	r3, #8
 800319c:	d11a      	bne.n	80031d4 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800319e:	78fb      	ldrb	r3, [r7, #3]
 80031a0:	015a      	lsls	r2, r3, #5
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	4413      	add	r3, r2
 80031a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031aa:	461a      	mov	r2, r3
 80031ac:	2308      	movs	r3, #8
 80031ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80031b0:	78fa      	ldrb	r2, [r7, #3]
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	4613      	mov	r3, r2
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	1a9b      	subs	r3, r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	440b      	add	r3, r1
 80031be:	334d      	adds	r3, #77	@ 0x4d
 80031c0:	2206      	movs	r2, #6
 80031c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	78fa      	ldrb	r2, [r7, #3]
 80031ca:	4611      	mov	r1, r2
 80031cc:	4618      	mov	r0, r3
 80031ce:	f004 fdbf 	bl	8007d50 <USB_HC_Halt>
 80031d2:	e04e      	b.n	8003272 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	78fa      	ldrb	r2, [r7, #3]
 80031da:	4611      	mov	r1, r2
 80031dc:	4618      	mov	r0, r3
 80031de:	f004 fd3a 	bl	8007c56 <USB_ReadChInterrupts>
 80031e2:	4603      	mov	r3, r0
 80031e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031ec:	d11b      	bne.n	8003226 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80031ee:	78fb      	ldrb	r3, [r7, #3]
 80031f0:	015a      	lsls	r2, r3, #5
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	4413      	add	r3, r2
 80031f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031fa:	461a      	mov	r2, r3
 80031fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003200:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003202:	78fa      	ldrb	r2, [r7, #3]
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	1a9b      	subs	r3, r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	440b      	add	r3, r1
 8003210:	334d      	adds	r3, #77	@ 0x4d
 8003212:	2209      	movs	r2, #9
 8003214:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	78fa      	ldrb	r2, [r7, #3]
 800321c:	4611      	mov	r1, r2
 800321e:	4618      	mov	r0, r3
 8003220:	f004 fd96 	bl	8007d50 <USB_HC_Halt>
 8003224:	e025      	b.n	8003272 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	78fa      	ldrb	r2, [r7, #3]
 800322c:	4611      	mov	r1, r2
 800322e:	4618      	mov	r0, r3
 8003230:	f004 fd11 	bl	8007c56 <USB_ReadChInterrupts>
 8003234:	4603      	mov	r3, r0
 8003236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800323a:	2b80      	cmp	r3, #128	@ 0x80
 800323c:	d119      	bne.n	8003272 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800323e:	78fb      	ldrb	r3, [r7, #3]
 8003240:	015a      	lsls	r2, r3, #5
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	4413      	add	r3, r2
 8003246:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800324a:	461a      	mov	r2, r3
 800324c:	2380      	movs	r3, #128	@ 0x80
 800324e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003250:	78fa      	ldrb	r2, [r7, #3]
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	4613      	mov	r3, r2
 8003256:	011b      	lsls	r3, r3, #4
 8003258:	1a9b      	subs	r3, r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	334d      	adds	r3, #77	@ 0x4d
 8003260:	2207      	movs	r2, #7
 8003262:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	78fa      	ldrb	r2, [r7, #3]
 800326a:	4611      	mov	r1, r2
 800326c:	4618      	mov	r0, r3
 800326e:	f004 fd6f 	bl	8007d50 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	78fa      	ldrb	r2, [r7, #3]
 8003278:	4611      	mov	r1, r2
 800327a:	4618      	mov	r0, r3
 800327c:	f004 fceb 	bl	8007c56 <USB_ReadChInterrupts>
 8003280:	4603      	mov	r3, r0
 8003282:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003286:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800328a:	d112      	bne.n	80032b2 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	78fa      	ldrb	r2, [r7, #3]
 8003292:	4611      	mov	r1, r2
 8003294:	4618      	mov	r0, r3
 8003296:	f004 fd5b 	bl	8007d50 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800329a:	78fb      	ldrb	r3, [r7, #3]
 800329c:	015a      	lsls	r2, r3, #5
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	4413      	add	r3, r2
 80032a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032a6:	461a      	mov	r2, r3
 80032a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80032ac:	6093      	str	r3, [r2, #8]
 80032ae:	f000 bd75 	b.w	8003d9c <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	78fa      	ldrb	r2, [r7, #3]
 80032b8:	4611      	mov	r1, r2
 80032ba:	4618      	mov	r0, r3
 80032bc:	f004 fccb 	bl	8007c56 <USB_ReadChInterrupts>
 80032c0:	4603      	mov	r3, r0
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	f040 8128 	bne.w	800351c <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80032cc:	78fb      	ldrb	r3, [r7, #3]
 80032ce:	015a      	lsls	r2, r3, #5
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	4413      	add	r3, r2
 80032d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032d8:	461a      	mov	r2, r3
 80032da:	2320      	movs	r3, #32
 80032dc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80032de:	78fa      	ldrb	r2, [r7, #3]
 80032e0:	6879      	ldr	r1, [r7, #4]
 80032e2:	4613      	mov	r3, r2
 80032e4:	011b      	lsls	r3, r3, #4
 80032e6:	1a9b      	subs	r3, r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	440b      	add	r3, r1
 80032ec:	331b      	adds	r3, #27
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d119      	bne.n	8003328 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80032f4:	78fa      	ldrb	r2, [r7, #3]
 80032f6:	6879      	ldr	r1, [r7, #4]
 80032f8:	4613      	mov	r3, r2
 80032fa:	011b      	lsls	r3, r3, #4
 80032fc:	1a9b      	subs	r3, r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	440b      	add	r3, r1
 8003302:	331b      	adds	r3, #27
 8003304:	2200      	movs	r2, #0
 8003306:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003308:	78fb      	ldrb	r3, [r7, #3]
 800330a:	015a      	lsls	r2, r3, #5
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	4413      	add	r3, r2
 8003310:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	78fa      	ldrb	r2, [r7, #3]
 8003318:	0151      	lsls	r1, r2, #5
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	440a      	add	r2, r1
 800331e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003322:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003326:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	799b      	ldrb	r3, [r3, #6]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d01b      	beq.n	8003368 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003330:	78fa      	ldrb	r2, [r7, #3]
 8003332:	6879      	ldr	r1, [r7, #4]
 8003334:	4613      	mov	r3, r2
 8003336:	011b      	lsls	r3, r3, #4
 8003338:	1a9b      	subs	r3, r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	440b      	add	r3, r1
 800333e:	3330      	adds	r3, #48	@ 0x30
 8003340:	6819      	ldr	r1, [r3, #0]
 8003342:	78fb      	ldrb	r3, [r7, #3]
 8003344:	015a      	lsls	r2, r3, #5
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	4413      	add	r3, r2
 800334a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003354:	78fa      	ldrb	r2, [r7, #3]
 8003356:	1ac9      	subs	r1, r1, r3
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	4613      	mov	r3, r2
 800335c:	011b      	lsls	r3, r3, #4
 800335e:	1a9b      	subs	r3, r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4403      	add	r3, r0
 8003364:	3338      	adds	r3, #56	@ 0x38
 8003366:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003368:	78fa      	ldrb	r2, [r7, #3]
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	4613      	mov	r3, r2
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	1a9b      	subs	r3, r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	440b      	add	r3, r1
 8003376:	334d      	adds	r3, #77	@ 0x4d
 8003378:	2201      	movs	r2, #1
 800337a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800337c:	78fa      	ldrb	r2, [r7, #3]
 800337e:	6879      	ldr	r1, [r7, #4]
 8003380:	4613      	mov	r3, r2
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	1a9b      	subs	r3, r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	440b      	add	r3, r1
 800338a:	3344      	adds	r3, #68	@ 0x44
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003390:	78fb      	ldrb	r3, [r7, #3]
 8003392:	015a      	lsls	r2, r3, #5
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	4413      	add	r3, r2
 8003398:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800339c:	461a      	mov	r2, r3
 800339e:	2301      	movs	r3, #1
 80033a0:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033a2:	78fa      	ldrb	r2, [r7, #3]
 80033a4:	6879      	ldr	r1, [r7, #4]
 80033a6:	4613      	mov	r3, r2
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	1a9b      	subs	r3, r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	440b      	add	r3, r1
 80033b0:	3326      	adds	r3, #38	@ 0x26
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00a      	beq.n	80033ce <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80033b8:	78fa      	ldrb	r2, [r7, #3]
 80033ba:	6879      	ldr	r1, [r7, #4]
 80033bc:	4613      	mov	r3, r2
 80033be:	011b      	lsls	r3, r3, #4
 80033c0:	1a9b      	subs	r3, r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	440b      	add	r3, r1
 80033c6:	3326      	adds	r3, #38	@ 0x26
 80033c8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d110      	bne.n	80033f0 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	78fa      	ldrb	r2, [r7, #3]
 80033d4:	4611      	mov	r1, r2
 80033d6:	4618      	mov	r0, r3
 80033d8:	f004 fcba 	bl	8007d50 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80033dc:	78fb      	ldrb	r3, [r7, #3]
 80033de:	015a      	lsls	r2, r3, #5
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	4413      	add	r3, r2
 80033e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033e8:	461a      	mov	r2, r3
 80033ea:	2310      	movs	r3, #16
 80033ec:	6093      	str	r3, [r2, #8]
 80033ee:	e03d      	b.n	800346c <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80033f0:	78fa      	ldrb	r2, [r7, #3]
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	4613      	mov	r3, r2
 80033f6:	011b      	lsls	r3, r3, #4
 80033f8:	1a9b      	subs	r3, r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	440b      	add	r3, r1
 80033fe:	3326      	adds	r3, #38	@ 0x26
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	2b03      	cmp	r3, #3
 8003404:	d00a      	beq.n	800341c <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003406:	78fa      	ldrb	r2, [r7, #3]
 8003408:	6879      	ldr	r1, [r7, #4]
 800340a:	4613      	mov	r3, r2
 800340c:	011b      	lsls	r3, r3, #4
 800340e:	1a9b      	subs	r3, r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	440b      	add	r3, r1
 8003414:	3326      	adds	r3, #38	@ 0x26
 8003416:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003418:	2b01      	cmp	r3, #1
 800341a:	d127      	bne.n	800346c <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800341c:	78fb      	ldrb	r3, [r7, #3]
 800341e:	015a      	lsls	r2, r3, #5
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	4413      	add	r3, r2
 8003424:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	78fa      	ldrb	r2, [r7, #3]
 800342c:	0151      	lsls	r1, r2, #5
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	440a      	add	r2, r1
 8003432:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003436:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800343a:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800343c:	78fa      	ldrb	r2, [r7, #3]
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	4613      	mov	r3, r2
 8003442:	011b      	lsls	r3, r3, #4
 8003444:	1a9b      	subs	r3, r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	440b      	add	r3, r1
 800344a:	334c      	adds	r3, #76	@ 0x4c
 800344c:	2201      	movs	r2, #1
 800344e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003450:	78fa      	ldrb	r2, [r7, #3]
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	4613      	mov	r3, r2
 8003456:	011b      	lsls	r3, r3, #4
 8003458:	1a9b      	subs	r3, r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	334c      	adds	r3, #76	@ 0x4c
 8003460:	781a      	ldrb	r2, [r3, #0]
 8003462:	78fb      	ldrb	r3, [r7, #3]
 8003464:	4619      	mov	r1, r3
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f004 feed 	bl	8008246 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	799b      	ldrb	r3, [r3, #6]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d13b      	bne.n	80034ec <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003474:	78fa      	ldrb	r2, [r7, #3]
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	4613      	mov	r3, r2
 800347a:	011b      	lsls	r3, r3, #4
 800347c:	1a9b      	subs	r3, r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	3338      	adds	r3, #56	@ 0x38
 8003484:	6819      	ldr	r1, [r3, #0]
 8003486:	78fa      	ldrb	r2, [r7, #3]
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	4613      	mov	r3, r2
 800348c:	011b      	lsls	r3, r3, #4
 800348e:	1a9b      	subs	r3, r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4403      	add	r3, r0
 8003494:	3328      	adds	r3, #40	@ 0x28
 8003496:	881b      	ldrh	r3, [r3, #0]
 8003498:	440b      	add	r3, r1
 800349a:	1e59      	subs	r1, r3, #1
 800349c:	78fa      	ldrb	r2, [r7, #3]
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	4613      	mov	r3, r2
 80034a2:	011b      	lsls	r3, r3, #4
 80034a4:	1a9b      	subs	r3, r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4403      	add	r3, r0
 80034aa:	3328      	adds	r3, #40	@ 0x28
 80034ac:	881b      	ldrh	r3, [r3, #0]
 80034ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f000 8470 	beq.w	8003d9c <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80034bc:	78fa      	ldrb	r2, [r7, #3]
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	4613      	mov	r3, r2
 80034c2:	011b      	lsls	r3, r3, #4
 80034c4:	1a9b      	subs	r3, r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	440b      	add	r3, r1
 80034ca:	333c      	adds	r3, #60	@ 0x3c
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	78fa      	ldrb	r2, [r7, #3]
 80034d0:	f083 0301 	eor.w	r3, r3, #1
 80034d4:	b2d8      	uxtb	r0, r3
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	4613      	mov	r3, r2
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	1a9b      	subs	r3, r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	333c      	adds	r3, #60	@ 0x3c
 80034e4:	4602      	mov	r2, r0
 80034e6:	701a      	strb	r2, [r3, #0]
 80034e8:	f000 bc58 	b.w	8003d9c <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80034ec:	78fa      	ldrb	r2, [r7, #3]
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	4613      	mov	r3, r2
 80034f2:	011b      	lsls	r3, r3, #4
 80034f4:	1a9b      	subs	r3, r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	440b      	add	r3, r1
 80034fa:	333c      	adds	r3, #60	@ 0x3c
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	78fa      	ldrb	r2, [r7, #3]
 8003500:	f083 0301 	eor.w	r3, r3, #1
 8003504:	b2d8      	uxtb	r0, r3
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	4613      	mov	r3, r2
 800350a:	011b      	lsls	r3, r3, #4
 800350c:	1a9b      	subs	r3, r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	333c      	adds	r3, #60	@ 0x3c
 8003514:	4602      	mov	r2, r0
 8003516:	701a      	strb	r2, [r3, #0]
 8003518:	f000 bc40 	b.w	8003d9c <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	78fa      	ldrb	r2, [r7, #3]
 8003522:	4611      	mov	r1, r2
 8003524:	4618      	mov	r0, r3
 8003526:	f004 fb96 	bl	8007c56 <USB_ReadChInterrupts>
 800352a:	4603      	mov	r3, r0
 800352c:	f003 0320 	and.w	r3, r3, #32
 8003530:	2b20      	cmp	r3, #32
 8003532:	d131      	bne.n	8003598 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003534:	78fb      	ldrb	r3, [r7, #3]
 8003536:	015a      	lsls	r2, r3, #5
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	4413      	add	r3, r2
 800353c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003540:	461a      	mov	r2, r3
 8003542:	2320      	movs	r3, #32
 8003544:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003546:	78fa      	ldrb	r2, [r7, #3]
 8003548:	6879      	ldr	r1, [r7, #4]
 800354a:	4613      	mov	r3, r2
 800354c:	011b      	lsls	r3, r3, #4
 800354e:	1a9b      	subs	r3, r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	440b      	add	r3, r1
 8003554:	331a      	adds	r3, #26
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	2b01      	cmp	r3, #1
 800355a:	f040 841f 	bne.w	8003d9c <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800355e:	78fa      	ldrb	r2, [r7, #3]
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	4613      	mov	r3, r2
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	1a9b      	subs	r3, r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	440b      	add	r3, r1
 800356c:	331b      	adds	r3, #27
 800356e:	2201      	movs	r2, #1
 8003570:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003572:	78fa      	ldrb	r2, [r7, #3]
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	4613      	mov	r3, r2
 8003578:	011b      	lsls	r3, r3, #4
 800357a:	1a9b      	subs	r3, r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	440b      	add	r3, r1
 8003580:	334d      	adds	r3, #77	@ 0x4d
 8003582:	2203      	movs	r2, #3
 8003584:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	78fa      	ldrb	r2, [r7, #3]
 800358c:	4611      	mov	r1, r2
 800358e:	4618      	mov	r0, r3
 8003590:	f004 fbde 	bl	8007d50 <USB_HC_Halt>
 8003594:	f000 bc02 	b.w	8003d9c <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	78fa      	ldrb	r2, [r7, #3]
 800359e:	4611      	mov	r1, r2
 80035a0:	4618      	mov	r0, r3
 80035a2:	f004 fb58 	bl	8007c56 <USB_ReadChInterrupts>
 80035a6:	4603      	mov	r3, r0
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	f040 8305 	bne.w	8003bbc <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80035b2:	78fb      	ldrb	r3, [r7, #3]
 80035b4:	015a      	lsls	r2, r3, #5
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	4413      	add	r3, r2
 80035ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035be:	461a      	mov	r2, r3
 80035c0:	2302      	movs	r3, #2
 80035c2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80035c4:	78fa      	ldrb	r2, [r7, #3]
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	4613      	mov	r3, r2
 80035ca:	011b      	lsls	r3, r3, #4
 80035cc:	1a9b      	subs	r3, r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	334d      	adds	r3, #77	@ 0x4d
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d114      	bne.n	8003604 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035da:	78fa      	ldrb	r2, [r7, #3]
 80035dc:	6879      	ldr	r1, [r7, #4]
 80035de:	4613      	mov	r3, r2
 80035e0:	011b      	lsls	r3, r3, #4
 80035e2:	1a9b      	subs	r3, r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	440b      	add	r3, r1
 80035e8:	334d      	adds	r3, #77	@ 0x4d
 80035ea:	2202      	movs	r2, #2
 80035ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80035ee:	78fa      	ldrb	r2, [r7, #3]
 80035f0:	6879      	ldr	r1, [r7, #4]
 80035f2:	4613      	mov	r3, r2
 80035f4:	011b      	lsls	r3, r3, #4
 80035f6:	1a9b      	subs	r3, r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	440b      	add	r3, r1
 80035fc:	334c      	adds	r3, #76	@ 0x4c
 80035fe:	2201      	movs	r2, #1
 8003600:	701a      	strb	r2, [r3, #0]
 8003602:	e2cc      	b.n	8003b9e <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003604:	78fa      	ldrb	r2, [r7, #3]
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	4613      	mov	r3, r2
 800360a:	011b      	lsls	r3, r3, #4
 800360c:	1a9b      	subs	r3, r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	440b      	add	r3, r1
 8003612:	334d      	adds	r3, #77	@ 0x4d
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	2b06      	cmp	r3, #6
 8003618:	d114      	bne.n	8003644 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800361a:	78fa      	ldrb	r2, [r7, #3]
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	4613      	mov	r3, r2
 8003620:	011b      	lsls	r3, r3, #4
 8003622:	1a9b      	subs	r3, r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	440b      	add	r3, r1
 8003628:	334d      	adds	r3, #77	@ 0x4d
 800362a:	2202      	movs	r2, #2
 800362c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800362e:	78fa      	ldrb	r2, [r7, #3]
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	4613      	mov	r3, r2
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	1a9b      	subs	r3, r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	440b      	add	r3, r1
 800363c:	334c      	adds	r3, #76	@ 0x4c
 800363e:	2205      	movs	r2, #5
 8003640:	701a      	strb	r2, [r3, #0]
 8003642:	e2ac      	b.n	8003b9e <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003644:	78fa      	ldrb	r2, [r7, #3]
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	4613      	mov	r3, r2
 800364a:	011b      	lsls	r3, r3, #4
 800364c:	1a9b      	subs	r3, r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	440b      	add	r3, r1
 8003652:	334d      	adds	r3, #77	@ 0x4d
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	2b07      	cmp	r3, #7
 8003658:	d00b      	beq.n	8003672 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800365a:	78fa      	ldrb	r2, [r7, #3]
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	4613      	mov	r3, r2
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	1a9b      	subs	r3, r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	440b      	add	r3, r1
 8003668:	334d      	adds	r3, #77	@ 0x4d
 800366a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800366c:	2b09      	cmp	r3, #9
 800366e:	f040 80a6 	bne.w	80037be <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003672:	78fa      	ldrb	r2, [r7, #3]
 8003674:	6879      	ldr	r1, [r7, #4]
 8003676:	4613      	mov	r3, r2
 8003678:	011b      	lsls	r3, r3, #4
 800367a:	1a9b      	subs	r3, r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	440b      	add	r3, r1
 8003680:	334d      	adds	r3, #77	@ 0x4d
 8003682:	2202      	movs	r2, #2
 8003684:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003686:	78fa      	ldrb	r2, [r7, #3]
 8003688:	6879      	ldr	r1, [r7, #4]
 800368a:	4613      	mov	r3, r2
 800368c:	011b      	lsls	r3, r3, #4
 800368e:	1a9b      	subs	r3, r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	440b      	add	r3, r1
 8003694:	3344      	adds	r3, #68	@ 0x44
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	1c59      	adds	r1, r3, #1
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	4613      	mov	r3, r2
 800369e:	011b      	lsls	r3, r3, #4
 80036a0:	1a9b      	subs	r3, r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4403      	add	r3, r0
 80036a6:	3344      	adds	r3, #68	@ 0x44
 80036a8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80036aa:	78fa      	ldrb	r2, [r7, #3]
 80036ac:	6879      	ldr	r1, [r7, #4]
 80036ae:	4613      	mov	r3, r2
 80036b0:	011b      	lsls	r3, r3, #4
 80036b2:	1a9b      	subs	r3, r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	440b      	add	r3, r1
 80036b8:	3344      	adds	r3, #68	@ 0x44
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d943      	bls.n	8003748 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80036c0:	78fa      	ldrb	r2, [r7, #3]
 80036c2:	6879      	ldr	r1, [r7, #4]
 80036c4:	4613      	mov	r3, r2
 80036c6:	011b      	lsls	r3, r3, #4
 80036c8:	1a9b      	subs	r3, r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	440b      	add	r3, r1
 80036ce:	3344      	adds	r3, #68	@ 0x44
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80036d4:	78fa      	ldrb	r2, [r7, #3]
 80036d6:	6879      	ldr	r1, [r7, #4]
 80036d8:	4613      	mov	r3, r2
 80036da:	011b      	lsls	r3, r3, #4
 80036dc:	1a9b      	subs	r3, r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	331a      	adds	r3, #26
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d123      	bne.n	8003732 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80036ea:	78fa      	ldrb	r2, [r7, #3]
 80036ec:	6879      	ldr	r1, [r7, #4]
 80036ee:	4613      	mov	r3, r2
 80036f0:	011b      	lsls	r3, r3, #4
 80036f2:	1a9b      	subs	r3, r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	440b      	add	r3, r1
 80036f8:	331b      	adds	r3, #27
 80036fa:	2200      	movs	r2, #0
 80036fc:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80036fe:	78fa      	ldrb	r2, [r7, #3]
 8003700:	6879      	ldr	r1, [r7, #4]
 8003702:	4613      	mov	r3, r2
 8003704:	011b      	lsls	r3, r3, #4
 8003706:	1a9b      	subs	r3, r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	440b      	add	r3, r1
 800370c:	331c      	adds	r3, #28
 800370e:	2200      	movs	r2, #0
 8003710:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003712:	78fb      	ldrb	r3, [r7, #3]
 8003714:	015a      	lsls	r2, r3, #5
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	4413      	add	r3, r2
 800371a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	78fa      	ldrb	r2, [r7, #3]
 8003722:	0151      	lsls	r1, r2, #5
 8003724:	693a      	ldr	r2, [r7, #16]
 8003726:	440a      	add	r2, r1
 8003728:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800372c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003730:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003732:	78fa      	ldrb	r2, [r7, #3]
 8003734:	6879      	ldr	r1, [r7, #4]
 8003736:	4613      	mov	r3, r2
 8003738:	011b      	lsls	r3, r3, #4
 800373a:	1a9b      	subs	r3, r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	440b      	add	r3, r1
 8003740:	334c      	adds	r3, #76	@ 0x4c
 8003742:	2204      	movs	r2, #4
 8003744:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003746:	e229      	b.n	8003b9c <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003748:	78fa      	ldrb	r2, [r7, #3]
 800374a:	6879      	ldr	r1, [r7, #4]
 800374c:	4613      	mov	r3, r2
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	1a9b      	subs	r3, r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	440b      	add	r3, r1
 8003756:	334c      	adds	r3, #76	@ 0x4c
 8003758:	2202      	movs	r2, #2
 800375a:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800375c:	78fa      	ldrb	r2, [r7, #3]
 800375e:	6879      	ldr	r1, [r7, #4]
 8003760:	4613      	mov	r3, r2
 8003762:	011b      	lsls	r3, r3, #4
 8003764:	1a9b      	subs	r3, r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	440b      	add	r3, r1
 800376a:	3326      	adds	r3, #38	@ 0x26
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00b      	beq.n	800378a <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003772:	78fa      	ldrb	r2, [r7, #3]
 8003774:	6879      	ldr	r1, [r7, #4]
 8003776:	4613      	mov	r3, r2
 8003778:	011b      	lsls	r3, r3, #4
 800377a:	1a9b      	subs	r3, r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	440b      	add	r3, r1
 8003780:	3326      	adds	r3, #38	@ 0x26
 8003782:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003784:	2b02      	cmp	r3, #2
 8003786:	f040 8209 	bne.w	8003b9c <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800378a:	78fb      	ldrb	r3, [r7, #3]
 800378c:	015a      	lsls	r2, r3, #5
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	4413      	add	r3, r2
 8003792:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80037a0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80037a8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80037aa:	78fb      	ldrb	r3, [r7, #3]
 80037ac:	015a      	lsls	r2, r3, #5
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	4413      	add	r3, r2
 80037b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037b6:	461a      	mov	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80037bc:	e1ee      	b.n	8003b9c <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80037be:	78fa      	ldrb	r2, [r7, #3]
 80037c0:	6879      	ldr	r1, [r7, #4]
 80037c2:	4613      	mov	r3, r2
 80037c4:	011b      	lsls	r3, r3, #4
 80037c6:	1a9b      	subs	r3, r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	440b      	add	r3, r1
 80037cc:	334d      	adds	r3, #77	@ 0x4d
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	2b05      	cmp	r3, #5
 80037d2:	f040 80c8 	bne.w	8003966 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80037d6:	78fa      	ldrb	r2, [r7, #3]
 80037d8:	6879      	ldr	r1, [r7, #4]
 80037da:	4613      	mov	r3, r2
 80037dc:	011b      	lsls	r3, r3, #4
 80037de:	1a9b      	subs	r3, r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	440b      	add	r3, r1
 80037e4:	334d      	adds	r3, #77	@ 0x4d
 80037e6:	2202      	movs	r2, #2
 80037e8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80037ea:	78fa      	ldrb	r2, [r7, #3]
 80037ec:	6879      	ldr	r1, [r7, #4]
 80037ee:	4613      	mov	r3, r2
 80037f0:	011b      	lsls	r3, r3, #4
 80037f2:	1a9b      	subs	r3, r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	440b      	add	r3, r1
 80037f8:	331b      	adds	r3, #27
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	f040 81ce 	bne.w	8003b9e <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003802:	78fa      	ldrb	r2, [r7, #3]
 8003804:	6879      	ldr	r1, [r7, #4]
 8003806:	4613      	mov	r3, r2
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	1a9b      	subs	r3, r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	440b      	add	r3, r1
 8003810:	3326      	adds	r3, #38	@ 0x26
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	2b03      	cmp	r3, #3
 8003816:	d16b      	bne.n	80038f0 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003818:	78fa      	ldrb	r2, [r7, #3]
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	4613      	mov	r3, r2
 800381e:	011b      	lsls	r3, r3, #4
 8003820:	1a9b      	subs	r3, r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	3348      	adds	r3, #72	@ 0x48
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	1c59      	adds	r1, r3, #1
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	4613      	mov	r3, r2
 8003830:	011b      	lsls	r3, r3, #4
 8003832:	1a9b      	subs	r3, r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4403      	add	r3, r0
 8003838:	3348      	adds	r3, #72	@ 0x48
 800383a:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800383c:	78fa      	ldrb	r2, [r7, #3]
 800383e:	6879      	ldr	r1, [r7, #4]
 8003840:	4613      	mov	r3, r2
 8003842:	011b      	lsls	r3, r3, #4
 8003844:	1a9b      	subs	r3, r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	440b      	add	r3, r1
 800384a:	3348      	adds	r3, #72	@ 0x48
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2b02      	cmp	r3, #2
 8003850:	d943      	bls.n	80038da <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003852:	78fa      	ldrb	r2, [r7, #3]
 8003854:	6879      	ldr	r1, [r7, #4]
 8003856:	4613      	mov	r3, r2
 8003858:	011b      	lsls	r3, r3, #4
 800385a:	1a9b      	subs	r3, r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	440b      	add	r3, r1
 8003860:	3348      	adds	r3, #72	@ 0x48
 8003862:	2200      	movs	r2, #0
 8003864:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003866:	78fa      	ldrb	r2, [r7, #3]
 8003868:	6879      	ldr	r1, [r7, #4]
 800386a:	4613      	mov	r3, r2
 800386c:	011b      	lsls	r3, r3, #4
 800386e:	1a9b      	subs	r3, r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	440b      	add	r3, r1
 8003874:	331b      	adds	r3, #27
 8003876:	2200      	movs	r2, #0
 8003878:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800387a:	78fa      	ldrb	r2, [r7, #3]
 800387c:	6879      	ldr	r1, [r7, #4]
 800387e:	4613      	mov	r3, r2
 8003880:	011b      	lsls	r3, r3, #4
 8003882:	1a9b      	subs	r3, r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	440b      	add	r3, r1
 8003888:	3344      	adds	r3, #68	@ 0x44
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2b02      	cmp	r3, #2
 800388e:	d809      	bhi.n	80038a4 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003890:	78fa      	ldrb	r2, [r7, #3]
 8003892:	6879      	ldr	r1, [r7, #4]
 8003894:	4613      	mov	r3, r2
 8003896:	011b      	lsls	r3, r3, #4
 8003898:	1a9b      	subs	r3, r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	440b      	add	r3, r1
 800389e:	331c      	adds	r3, #28
 80038a0:	2201      	movs	r2, #1
 80038a2:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80038a4:	78fb      	ldrb	r3, [r7, #3]
 80038a6:	015a      	lsls	r2, r3, #5
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	4413      	add	r3, r2
 80038ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	78fa      	ldrb	r2, [r7, #3]
 80038b4:	0151      	lsls	r1, r2, #5
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	440a      	add	r2, r1
 80038ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80038be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038c2:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80038c4:	78fa      	ldrb	r2, [r7, #3]
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	4613      	mov	r3, r2
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	1a9b      	subs	r3, r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	334c      	adds	r3, #76	@ 0x4c
 80038d4:	2204      	movs	r2, #4
 80038d6:	701a      	strb	r2, [r3, #0]
 80038d8:	e014      	b.n	8003904 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80038da:	78fa      	ldrb	r2, [r7, #3]
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	4613      	mov	r3, r2
 80038e0:	011b      	lsls	r3, r3, #4
 80038e2:	1a9b      	subs	r3, r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	440b      	add	r3, r1
 80038e8:	334c      	adds	r3, #76	@ 0x4c
 80038ea:	2202      	movs	r2, #2
 80038ec:	701a      	strb	r2, [r3, #0]
 80038ee:	e009      	b.n	8003904 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80038f0:	78fa      	ldrb	r2, [r7, #3]
 80038f2:	6879      	ldr	r1, [r7, #4]
 80038f4:	4613      	mov	r3, r2
 80038f6:	011b      	lsls	r3, r3, #4
 80038f8:	1a9b      	subs	r3, r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	334c      	adds	r3, #76	@ 0x4c
 8003900:	2202      	movs	r2, #2
 8003902:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003904:	78fa      	ldrb	r2, [r7, #3]
 8003906:	6879      	ldr	r1, [r7, #4]
 8003908:	4613      	mov	r3, r2
 800390a:	011b      	lsls	r3, r3, #4
 800390c:	1a9b      	subs	r3, r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	440b      	add	r3, r1
 8003912:	3326      	adds	r3, #38	@ 0x26
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00b      	beq.n	8003932 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800391a:	78fa      	ldrb	r2, [r7, #3]
 800391c:	6879      	ldr	r1, [r7, #4]
 800391e:	4613      	mov	r3, r2
 8003920:	011b      	lsls	r3, r3, #4
 8003922:	1a9b      	subs	r3, r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	440b      	add	r3, r1
 8003928:	3326      	adds	r3, #38	@ 0x26
 800392a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800392c:	2b02      	cmp	r3, #2
 800392e:	f040 8136 	bne.w	8003b9e <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003932:	78fb      	ldrb	r3, [r7, #3]
 8003934:	015a      	lsls	r2, r3, #5
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	4413      	add	r3, r2
 800393a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003948:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003950:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003952:	78fb      	ldrb	r3, [r7, #3]
 8003954:	015a      	lsls	r2, r3, #5
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	4413      	add	r3, r2
 800395a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800395e:	461a      	mov	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6013      	str	r3, [r2, #0]
 8003964:	e11b      	b.n	8003b9e <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003966:	78fa      	ldrb	r2, [r7, #3]
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	4613      	mov	r3, r2
 800396c:	011b      	lsls	r3, r3, #4
 800396e:	1a9b      	subs	r3, r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	440b      	add	r3, r1
 8003974:	334d      	adds	r3, #77	@ 0x4d
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	2b03      	cmp	r3, #3
 800397a:	f040 8081 	bne.w	8003a80 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800397e:	78fa      	ldrb	r2, [r7, #3]
 8003980:	6879      	ldr	r1, [r7, #4]
 8003982:	4613      	mov	r3, r2
 8003984:	011b      	lsls	r3, r3, #4
 8003986:	1a9b      	subs	r3, r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	440b      	add	r3, r1
 800398c:	334d      	adds	r3, #77	@ 0x4d
 800398e:	2202      	movs	r2, #2
 8003990:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003992:	78fa      	ldrb	r2, [r7, #3]
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	4613      	mov	r3, r2
 8003998:	011b      	lsls	r3, r3, #4
 800399a:	1a9b      	subs	r3, r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	440b      	add	r3, r1
 80039a0:	331b      	adds	r3, #27
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	f040 80fa 	bne.w	8003b9e <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80039aa:	78fa      	ldrb	r2, [r7, #3]
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	4613      	mov	r3, r2
 80039b0:	011b      	lsls	r3, r3, #4
 80039b2:	1a9b      	subs	r3, r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	440b      	add	r3, r1
 80039b8:	334c      	adds	r3, #76	@ 0x4c
 80039ba:	2202      	movs	r2, #2
 80039bc:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80039be:	78fb      	ldrb	r3, [r7, #3]
 80039c0:	015a      	lsls	r2, r3, #5
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	4413      	add	r3, r2
 80039c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	78fa      	ldrb	r2, [r7, #3]
 80039ce:	0151      	lsls	r1, r2, #5
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	440a      	add	r2, r1
 80039d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80039d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039dc:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80039de:	78fb      	ldrb	r3, [r7, #3]
 80039e0:	015a      	lsls	r2, r3, #5
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	4413      	add	r3, r2
 80039e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	78fa      	ldrb	r2, [r7, #3]
 80039ee:	0151      	lsls	r1, r2, #5
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	440a      	add	r2, r1
 80039f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80039f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039fc:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80039fe:	78fb      	ldrb	r3, [r7, #3]
 8003a00:	015a      	lsls	r2, r3, #5
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	4413      	add	r3, r2
 8003a06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	78fa      	ldrb	r2, [r7, #3]
 8003a0e:	0151      	lsls	r1, r2, #5
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	440a      	add	r2, r1
 8003a14:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a18:	f023 0320 	bic.w	r3, r3, #32
 8003a1c:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a1e:	78fa      	ldrb	r2, [r7, #3]
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	4613      	mov	r3, r2
 8003a24:	011b      	lsls	r3, r3, #4
 8003a26:	1a9b      	subs	r3, r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	440b      	add	r3, r1
 8003a2c:	3326      	adds	r3, #38	@ 0x26
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00b      	beq.n	8003a4c <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003a34:	78fa      	ldrb	r2, [r7, #3]
 8003a36:	6879      	ldr	r1, [r7, #4]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	011b      	lsls	r3, r3, #4
 8003a3c:	1a9b      	subs	r3, r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	3326      	adds	r3, #38	@ 0x26
 8003a44:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	f040 80a9 	bne.w	8003b9e <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003a4c:	78fb      	ldrb	r3, [r7, #3]
 8003a4e:	015a      	lsls	r2, r3, #5
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	4413      	add	r3, r2
 8003a54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003a62:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003a6a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003a6c:	78fb      	ldrb	r3, [r7, #3]
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a78:	461a      	mov	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6013      	str	r3, [r2, #0]
 8003a7e:	e08e      	b.n	8003b9e <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003a80:	78fa      	ldrb	r2, [r7, #3]
 8003a82:	6879      	ldr	r1, [r7, #4]
 8003a84:	4613      	mov	r3, r2
 8003a86:	011b      	lsls	r3, r3, #4
 8003a88:	1a9b      	subs	r3, r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	334d      	adds	r3, #77	@ 0x4d
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	d143      	bne.n	8003b1e <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a96:	78fa      	ldrb	r2, [r7, #3]
 8003a98:	6879      	ldr	r1, [r7, #4]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	011b      	lsls	r3, r3, #4
 8003a9e:	1a9b      	subs	r3, r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	440b      	add	r3, r1
 8003aa4:	334d      	adds	r3, #77	@ 0x4d
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003aaa:	78fa      	ldrb	r2, [r7, #3]
 8003aac:	6879      	ldr	r1, [r7, #4]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	011b      	lsls	r3, r3, #4
 8003ab2:	1a9b      	subs	r3, r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	440b      	add	r3, r1
 8003ab8:	334c      	adds	r3, #76	@ 0x4c
 8003aba:	2202      	movs	r2, #2
 8003abc:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003abe:	78fa      	ldrb	r2, [r7, #3]
 8003ac0:	6879      	ldr	r1, [r7, #4]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	011b      	lsls	r3, r3, #4
 8003ac6:	1a9b      	subs	r3, r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	440b      	add	r3, r1
 8003acc:	3326      	adds	r3, #38	@ 0x26
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00a      	beq.n	8003aea <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003ad4:	78fa      	ldrb	r2, [r7, #3]
 8003ad6:	6879      	ldr	r1, [r7, #4]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	011b      	lsls	r3, r3, #4
 8003adc:	1a9b      	subs	r3, r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	3326      	adds	r3, #38	@ 0x26
 8003ae4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d159      	bne.n	8003b9e <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003aea:	78fb      	ldrb	r3, [r7, #3]
 8003aec:	015a      	lsls	r2, r3, #5
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	4413      	add	r3, r2
 8003af2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003b00:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003b08:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003b0a:	78fb      	ldrb	r3, [r7, #3]
 8003b0c:	015a      	lsls	r2, r3, #5
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	4413      	add	r3, r2
 8003b12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b16:	461a      	mov	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6013      	str	r3, [r2, #0]
 8003b1c:	e03f      	b.n	8003b9e <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003b1e:	78fa      	ldrb	r2, [r7, #3]
 8003b20:	6879      	ldr	r1, [r7, #4]
 8003b22:	4613      	mov	r3, r2
 8003b24:	011b      	lsls	r3, r3, #4
 8003b26:	1a9b      	subs	r3, r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	440b      	add	r3, r1
 8003b2c:	334d      	adds	r3, #77	@ 0x4d
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	2b08      	cmp	r3, #8
 8003b32:	d126      	bne.n	8003b82 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b34:	78fa      	ldrb	r2, [r7, #3]
 8003b36:	6879      	ldr	r1, [r7, #4]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	011b      	lsls	r3, r3, #4
 8003b3c:	1a9b      	subs	r3, r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	440b      	add	r3, r1
 8003b42:	334d      	adds	r3, #77	@ 0x4d
 8003b44:	2202      	movs	r2, #2
 8003b46:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003b48:	78fa      	ldrb	r2, [r7, #3]
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	011b      	lsls	r3, r3, #4
 8003b50:	1a9b      	subs	r3, r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	440b      	add	r3, r1
 8003b56:	3344      	adds	r3, #68	@ 0x44
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	1c59      	adds	r1, r3, #1
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	011b      	lsls	r3, r3, #4
 8003b62:	1a9b      	subs	r3, r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	4403      	add	r3, r0
 8003b68:	3344      	adds	r3, #68	@ 0x44
 8003b6a:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003b6c:	78fa      	ldrb	r2, [r7, #3]
 8003b6e:	6879      	ldr	r1, [r7, #4]
 8003b70:	4613      	mov	r3, r2
 8003b72:	011b      	lsls	r3, r3, #4
 8003b74:	1a9b      	subs	r3, r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	440b      	add	r3, r1
 8003b7a:	334c      	adds	r3, #76	@ 0x4c
 8003b7c:	2204      	movs	r2, #4
 8003b7e:	701a      	strb	r2, [r3, #0]
 8003b80:	e00d      	b.n	8003b9e <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003b82:	78fa      	ldrb	r2, [r7, #3]
 8003b84:	6879      	ldr	r1, [r7, #4]
 8003b86:	4613      	mov	r3, r2
 8003b88:	011b      	lsls	r3, r3, #4
 8003b8a:	1a9b      	subs	r3, r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	440b      	add	r3, r1
 8003b90:	334d      	adds	r3, #77	@ 0x4d
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	f000 8100 	beq.w	8003d9a <HCD_HC_IN_IRQHandler+0xcca>
 8003b9a:	e000      	b.n	8003b9e <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003b9c:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003b9e:	78fa      	ldrb	r2, [r7, #3]
 8003ba0:	6879      	ldr	r1, [r7, #4]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	011b      	lsls	r3, r3, #4
 8003ba6:	1a9b      	subs	r3, r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	440b      	add	r3, r1
 8003bac:	334c      	adds	r3, #76	@ 0x4c
 8003bae:	781a      	ldrb	r2, [r3, #0]
 8003bb0:	78fb      	ldrb	r3, [r7, #3]
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f004 fb46 	bl	8008246 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003bba:	e0ef      	b.n	8003d9c <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	78fa      	ldrb	r2, [r7, #3]
 8003bc2:	4611      	mov	r1, r2
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f004 f846 	bl	8007c56 <USB_ReadChInterrupts>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bd0:	2b40      	cmp	r3, #64	@ 0x40
 8003bd2:	d12f      	bne.n	8003c34 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003bd4:	78fb      	ldrb	r3, [r7, #3]
 8003bd6:	015a      	lsls	r2, r3, #5
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	4413      	add	r3, r2
 8003bdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003be0:	461a      	mov	r2, r3
 8003be2:	2340      	movs	r3, #64	@ 0x40
 8003be4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003be6:	78fa      	ldrb	r2, [r7, #3]
 8003be8:	6879      	ldr	r1, [r7, #4]
 8003bea:	4613      	mov	r3, r2
 8003bec:	011b      	lsls	r3, r3, #4
 8003bee:	1a9b      	subs	r3, r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	440b      	add	r3, r1
 8003bf4:	334d      	adds	r3, #77	@ 0x4d
 8003bf6:	2205      	movs	r2, #5
 8003bf8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003bfa:	78fa      	ldrb	r2, [r7, #3]
 8003bfc:	6879      	ldr	r1, [r7, #4]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	011b      	lsls	r3, r3, #4
 8003c02:	1a9b      	subs	r3, r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	440b      	add	r3, r1
 8003c08:	331a      	adds	r3, #26
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d109      	bne.n	8003c24 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003c10:	78fa      	ldrb	r2, [r7, #3]
 8003c12:	6879      	ldr	r1, [r7, #4]
 8003c14:	4613      	mov	r3, r2
 8003c16:	011b      	lsls	r3, r3, #4
 8003c18:	1a9b      	subs	r3, r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	440b      	add	r3, r1
 8003c1e:	3344      	adds	r3, #68	@ 0x44
 8003c20:	2200      	movs	r2, #0
 8003c22:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	78fa      	ldrb	r2, [r7, #3]
 8003c2a:	4611      	mov	r1, r2
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f004 f88f 	bl	8007d50 <USB_HC_Halt>
 8003c32:	e0b3      	b.n	8003d9c <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	78fa      	ldrb	r2, [r7, #3]
 8003c3a:	4611      	mov	r1, r2
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f004 f80a 	bl	8007c56 <USB_ReadChInterrupts>
 8003c42:	4603      	mov	r3, r0
 8003c44:	f003 0310 	and.w	r3, r3, #16
 8003c48:	2b10      	cmp	r3, #16
 8003c4a:	f040 80a7 	bne.w	8003d9c <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003c4e:	78fa      	ldrb	r2, [r7, #3]
 8003c50:	6879      	ldr	r1, [r7, #4]
 8003c52:	4613      	mov	r3, r2
 8003c54:	011b      	lsls	r3, r3, #4
 8003c56:	1a9b      	subs	r3, r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	440b      	add	r3, r1
 8003c5c:	3326      	adds	r3, #38	@ 0x26
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	2b03      	cmp	r3, #3
 8003c62:	d11b      	bne.n	8003c9c <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003c64:	78fa      	ldrb	r2, [r7, #3]
 8003c66:	6879      	ldr	r1, [r7, #4]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	011b      	lsls	r3, r3, #4
 8003c6c:	1a9b      	subs	r3, r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	440b      	add	r3, r1
 8003c72:	3344      	adds	r3, #68	@ 0x44
 8003c74:	2200      	movs	r2, #0
 8003c76:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003c78:	78fa      	ldrb	r2, [r7, #3]
 8003c7a:	6879      	ldr	r1, [r7, #4]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	011b      	lsls	r3, r3, #4
 8003c80:	1a9b      	subs	r3, r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	440b      	add	r3, r1
 8003c86:	334d      	adds	r3, #77	@ 0x4d
 8003c88:	2204      	movs	r2, #4
 8003c8a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	78fa      	ldrb	r2, [r7, #3]
 8003c92:	4611      	mov	r1, r2
 8003c94:	4618      	mov	r0, r3
 8003c96:	f004 f85b 	bl	8007d50 <USB_HC_Halt>
 8003c9a:	e03f      	b.n	8003d1c <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c9c:	78fa      	ldrb	r2, [r7, #3]
 8003c9e:	6879      	ldr	r1, [r7, #4]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	011b      	lsls	r3, r3, #4
 8003ca4:	1a9b      	subs	r3, r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	440b      	add	r3, r1
 8003caa:	3326      	adds	r3, #38	@ 0x26
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00a      	beq.n	8003cc8 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003cb2:	78fa      	ldrb	r2, [r7, #3]
 8003cb4:	6879      	ldr	r1, [r7, #4]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	011b      	lsls	r3, r3, #4
 8003cba:	1a9b      	subs	r3, r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	440b      	add	r3, r1
 8003cc0:	3326      	adds	r3, #38	@ 0x26
 8003cc2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d129      	bne.n	8003d1c <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003cc8:	78fa      	ldrb	r2, [r7, #3]
 8003cca:	6879      	ldr	r1, [r7, #4]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	011b      	lsls	r3, r3, #4
 8003cd0:	1a9b      	subs	r3, r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	440b      	add	r3, r1
 8003cd6:	3344      	adds	r3, #68	@ 0x44
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	799b      	ldrb	r3, [r3, #6]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00a      	beq.n	8003cfa <HCD_HC_IN_IRQHandler+0xc2a>
 8003ce4:	78fa      	ldrb	r2, [r7, #3]
 8003ce6:	6879      	ldr	r1, [r7, #4]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	011b      	lsls	r3, r3, #4
 8003cec:	1a9b      	subs	r3, r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	440b      	add	r3, r1
 8003cf2:	331b      	adds	r3, #27
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d110      	bne.n	8003d1c <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003cfa:	78fa      	ldrb	r2, [r7, #3]
 8003cfc:	6879      	ldr	r1, [r7, #4]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	011b      	lsls	r3, r3, #4
 8003d02:	1a9b      	subs	r3, r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	440b      	add	r3, r1
 8003d08:	334d      	adds	r3, #77	@ 0x4d
 8003d0a:	2204      	movs	r2, #4
 8003d0c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	78fa      	ldrb	r2, [r7, #3]
 8003d14:	4611      	mov	r1, r2
 8003d16:	4618      	mov	r0, r3
 8003d18:	f004 f81a 	bl	8007d50 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003d1c:	78fa      	ldrb	r2, [r7, #3]
 8003d1e:	6879      	ldr	r1, [r7, #4]
 8003d20:	4613      	mov	r3, r2
 8003d22:	011b      	lsls	r3, r3, #4
 8003d24:	1a9b      	subs	r3, r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	440b      	add	r3, r1
 8003d2a:	331b      	adds	r3, #27
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d129      	bne.n	8003d86 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003d32:	78fa      	ldrb	r2, [r7, #3]
 8003d34:	6879      	ldr	r1, [r7, #4]
 8003d36:	4613      	mov	r3, r2
 8003d38:	011b      	lsls	r3, r3, #4
 8003d3a:	1a9b      	subs	r3, r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	440b      	add	r3, r1
 8003d40:	331b      	adds	r3, #27
 8003d42:	2200      	movs	r2, #0
 8003d44:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003d46:	78fb      	ldrb	r3, [r7, #3]
 8003d48:	015a      	lsls	r2, r3, #5
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	78fa      	ldrb	r2, [r7, #3]
 8003d56:	0151      	lsls	r1, r2, #5
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	440a      	add	r2, r1
 8003d5c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003d60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d64:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003d66:	78fb      	ldrb	r3, [r7, #3]
 8003d68:	015a      	lsls	r2, r3, #5
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	78fa      	ldrb	r2, [r7, #3]
 8003d76:	0151      	lsls	r1, r2, #5
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	440a      	add	r2, r1
 8003d7c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003d80:	f043 0320 	orr.w	r3, r3, #32
 8003d84:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003d86:	78fb      	ldrb	r3, [r7, #3]
 8003d88:	015a      	lsls	r2, r3, #5
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d92:	461a      	mov	r2, r3
 8003d94:	2310      	movs	r3, #16
 8003d96:	6093      	str	r3, [r2, #8]
 8003d98:	e000      	b.n	8003d9c <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003d9a:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003d9c:	3718      	adds	r7, #24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b086      	sub	sp, #24
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
 8003daa:	460b      	mov	r3, r1
 8003dac:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	78fa      	ldrb	r2, [r7, #3]
 8003dbe:	4611      	mov	r1, r2
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f003 ff48 	bl	8007c56 <USB_ReadChInterrupts>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	f003 0304 	and.w	r3, r3, #4
 8003dcc:	2b04      	cmp	r3, #4
 8003dce:	d11b      	bne.n	8003e08 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003dd0:	78fb      	ldrb	r3, [r7, #3]
 8003dd2:	015a      	lsls	r2, r3, #5
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ddc:	461a      	mov	r2, r3
 8003dde:	2304      	movs	r3, #4
 8003de0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003de2:	78fa      	ldrb	r2, [r7, #3]
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	4613      	mov	r3, r2
 8003de8:	011b      	lsls	r3, r3, #4
 8003dea:	1a9b      	subs	r3, r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	440b      	add	r3, r1
 8003df0:	334d      	adds	r3, #77	@ 0x4d
 8003df2:	2207      	movs	r2, #7
 8003df4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	78fa      	ldrb	r2, [r7, #3]
 8003dfc:	4611      	mov	r1, r2
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f003 ffa6 	bl	8007d50 <USB_HC_Halt>
 8003e04:	f000 bc89 	b.w	800471a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	78fa      	ldrb	r2, [r7, #3]
 8003e0e:	4611      	mov	r1, r2
 8003e10:	4618      	mov	r0, r3
 8003e12:	f003 ff20 	bl	8007c56 <USB_ReadChInterrupts>
 8003e16:	4603      	mov	r3, r0
 8003e18:	f003 0320 	and.w	r3, r3, #32
 8003e1c:	2b20      	cmp	r3, #32
 8003e1e:	f040 8082 	bne.w	8003f26 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003e22:	78fb      	ldrb	r3, [r7, #3]
 8003e24:	015a      	lsls	r2, r3, #5
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	4413      	add	r3, r2
 8003e2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e2e:	461a      	mov	r2, r3
 8003e30:	2320      	movs	r3, #32
 8003e32:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003e34:	78fa      	ldrb	r2, [r7, #3]
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	011b      	lsls	r3, r3, #4
 8003e3c:	1a9b      	subs	r3, r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	440b      	add	r3, r1
 8003e42:	3319      	adds	r3, #25
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d124      	bne.n	8003e94 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003e4a:	78fa      	ldrb	r2, [r7, #3]
 8003e4c:	6879      	ldr	r1, [r7, #4]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	011b      	lsls	r3, r3, #4
 8003e52:	1a9b      	subs	r3, r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	440b      	add	r3, r1
 8003e58:	3319      	adds	r3, #25
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e5e:	78fa      	ldrb	r2, [r7, #3]
 8003e60:	6879      	ldr	r1, [r7, #4]
 8003e62:	4613      	mov	r3, r2
 8003e64:	011b      	lsls	r3, r3, #4
 8003e66:	1a9b      	subs	r3, r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	440b      	add	r3, r1
 8003e6c:	334c      	adds	r3, #76	@ 0x4c
 8003e6e:	2202      	movs	r2, #2
 8003e70:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003e72:	78fa      	ldrb	r2, [r7, #3]
 8003e74:	6879      	ldr	r1, [r7, #4]
 8003e76:	4613      	mov	r3, r2
 8003e78:	011b      	lsls	r3, r3, #4
 8003e7a:	1a9b      	subs	r3, r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	440b      	add	r3, r1
 8003e80:	334d      	adds	r3, #77	@ 0x4d
 8003e82:	2203      	movs	r2, #3
 8003e84:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	78fa      	ldrb	r2, [r7, #3]
 8003e8c:	4611      	mov	r1, r2
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f003 ff5e 	bl	8007d50 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003e94:	78fa      	ldrb	r2, [r7, #3]
 8003e96:	6879      	ldr	r1, [r7, #4]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	011b      	lsls	r3, r3, #4
 8003e9c:	1a9b      	subs	r3, r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	440b      	add	r3, r1
 8003ea2:	331a      	adds	r3, #26
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	f040 8437 	bne.w	800471a <HCD_HC_OUT_IRQHandler+0x978>
 8003eac:	78fa      	ldrb	r2, [r7, #3]
 8003eae:	6879      	ldr	r1, [r7, #4]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	011b      	lsls	r3, r3, #4
 8003eb4:	1a9b      	subs	r3, r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	440b      	add	r3, r1
 8003eba:	331b      	adds	r3, #27
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f040 842b 	bne.w	800471a <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003ec4:	78fa      	ldrb	r2, [r7, #3]
 8003ec6:	6879      	ldr	r1, [r7, #4]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	011b      	lsls	r3, r3, #4
 8003ecc:	1a9b      	subs	r3, r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	440b      	add	r3, r1
 8003ed2:	3326      	adds	r3, #38	@ 0x26
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d009      	beq.n	8003eee <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003eda:	78fa      	ldrb	r2, [r7, #3]
 8003edc:	6879      	ldr	r1, [r7, #4]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	011b      	lsls	r3, r3, #4
 8003ee2:	1a9b      	subs	r3, r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	440b      	add	r3, r1
 8003ee8:	331b      	adds	r3, #27
 8003eea:	2201      	movs	r2, #1
 8003eec:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003eee:	78fa      	ldrb	r2, [r7, #3]
 8003ef0:	6879      	ldr	r1, [r7, #4]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	011b      	lsls	r3, r3, #4
 8003ef6:	1a9b      	subs	r3, r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	440b      	add	r3, r1
 8003efc:	334d      	adds	r3, #77	@ 0x4d
 8003efe:	2203      	movs	r2, #3
 8003f00:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	78fa      	ldrb	r2, [r7, #3]
 8003f08:	4611      	mov	r1, r2
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f003 ff20 	bl	8007d50 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003f10:	78fa      	ldrb	r2, [r7, #3]
 8003f12:	6879      	ldr	r1, [r7, #4]
 8003f14:	4613      	mov	r3, r2
 8003f16:	011b      	lsls	r3, r3, #4
 8003f18:	1a9b      	subs	r3, r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	440b      	add	r3, r1
 8003f1e:	3344      	adds	r3, #68	@ 0x44
 8003f20:	2200      	movs	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	e3f9      	b.n	800471a <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	78fa      	ldrb	r2, [r7, #3]
 8003f2c:	4611      	mov	r1, r2
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f003 fe91 	bl	8007c56 <USB_ReadChInterrupts>
 8003f34:	4603      	mov	r3, r0
 8003f36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f3e:	d111      	bne.n	8003f64 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003f40:	78fb      	ldrb	r3, [r7, #3]
 8003f42:	015a      	lsls	r2, r3, #5
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	4413      	add	r3, r2
 8003f48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f52:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	78fa      	ldrb	r2, [r7, #3]
 8003f5a:	4611      	mov	r1, r2
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f003 fef7 	bl	8007d50 <USB_HC_Halt>
 8003f62:	e3da      	b.n	800471a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	78fa      	ldrb	r2, [r7, #3]
 8003f6a:	4611      	mov	r1, r2
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f003 fe72 	bl	8007c56 <USB_ReadChInterrupts>
 8003f72:	4603      	mov	r3, r0
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d168      	bne.n	800404e <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003f7c:	78fa      	ldrb	r2, [r7, #3]
 8003f7e:	6879      	ldr	r1, [r7, #4]
 8003f80:	4613      	mov	r3, r2
 8003f82:	011b      	lsls	r3, r3, #4
 8003f84:	1a9b      	subs	r3, r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	440b      	add	r3, r1
 8003f8a:	3344      	adds	r3, #68	@ 0x44
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	78fa      	ldrb	r2, [r7, #3]
 8003f96:	4611      	mov	r1, r2
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f003 fe5c 	bl	8007c56 <USB_ReadChInterrupts>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fa4:	2b40      	cmp	r3, #64	@ 0x40
 8003fa6:	d112      	bne.n	8003fce <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003fa8:	78fa      	ldrb	r2, [r7, #3]
 8003faa:	6879      	ldr	r1, [r7, #4]
 8003fac:	4613      	mov	r3, r2
 8003fae:	011b      	lsls	r3, r3, #4
 8003fb0:	1a9b      	subs	r3, r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	440b      	add	r3, r1
 8003fb6:	3319      	adds	r3, #25
 8003fb8:	2201      	movs	r2, #1
 8003fba:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003fbc:	78fb      	ldrb	r3, [r7, #3]
 8003fbe:	015a      	lsls	r2, r3, #5
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fc8:	461a      	mov	r2, r3
 8003fca:	2340      	movs	r3, #64	@ 0x40
 8003fcc:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003fce:	78fa      	ldrb	r2, [r7, #3]
 8003fd0:	6879      	ldr	r1, [r7, #4]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	011b      	lsls	r3, r3, #4
 8003fd6:	1a9b      	subs	r3, r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	440b      	add	r3, r1
 8003fdc:	331b      	adds	r3, #27
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d019      	beq.n	8004018 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003fe4:	78fa      	ldrb	r2, [r7, #3]
 8003fe6:	6879      	ldr	r1, [r7, #4]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	011b      	lsls	r3, r3, #4
 8003fec:	1a9b      	subs	r3, r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	440b      	add	r3, r1
 8003ff2:	331b      	adds	r3, #27
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003ff8:	78fb      	ldrb	r3, [r7, #3]
 8003ffa:	015a      	lsls	r2, r3, #5
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	4413      	add	r3, r2
 8004000:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	78fa      	ldrb	r2, [r7, #3]
 8004008:	0151      	lsls	r1, r2, #5
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	440a      	add	r2, r1
 800400e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004012:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004016:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004018:	78fb      	ldrb	r3, [r7, #3]
 800401a:	015a      	lsls	r2, r3, #5
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	4413      	add	r3, r2
 8004020:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004024:	461a      	mov	r2, r3
 8004026:	2301      	movs	r3, #1
 8004028:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800402a:	78fa      	ldrb	r2, [r7, #3]
 800402c:	6879      	ldr	r1, [r7, #4]
 800402e:	4613      	mov	r3, r2
 8004030:	011b      	lsls	r3, r3, #4
 8004032:	1a9b      	subs	r3, r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	440b      	add	r3, r1
 8004038:	334d      	adds	r3, #77	@ 0x4d
 800403a:	2201      	movs	r2, #1
 800403c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	78fa      	ldrb	r2, [r7, #3]
 8004044:	4611      	mov	r1, r2
 8004046:	4618      	mov	r0, r3
 8004048:	f003 fe82 	bl	8007d50 <USB_HC_Halt>
 800404c:	e365      	b.n	800471a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	78fa      	ldrb	r2, [r7, #3]
 8004054:	4611      	mov	r1, r2
 8004056:	4618      	mov	r0, r3
 8004058:	f003 fdfd 	bl	8007c56 <USB_ReadChInterrupts>
 800405c:	4603      	mov	r3, r0
 800405e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004062:	2b40      	cmp	r3, #64	@ 0x40
 8004064:	d139      	bne.n	80040da <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004066:	78fa      	ldrb	r2, [r7, #3]
 8004068:	6879      	ldr	r1, [r7, #4]
 800406a:	4613      	mov	r3, r2
 800406c:	011b      	lsls	r3, r3, #4
 800406e:	1a9b      	subs	r3, r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	440b      	add	r3, r1
 8004074:	334d      	adds	r3, #77	@ 0x4d
 8004076:	2205      	movs	r2, #5
 8004078:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800407a:	78fa      	ldrb	r2, [r7, #3]
 800407c:	6879      	ldr	r1, [r7, #4]
 800407e:	4613      	mov	r3, r2
 8004080:	011b      	lsls	r3, r3, #4
 8004082:	1a9b      	subs	r3, r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	440b      	add	r3, r1
 8004088:	331a      	adds	r3, #26
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d109      	bne.n	80040a4 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004090:	78fa      	ldrb	r2, [r7, #3]
 8004092:	6879      	ldr	r1, [r7, #4]
 8004094:	4613      	mov	r3, r2
 8004096:	011b      	lsls	r3, r3, #4
 8004098:	1a9b      	subs	r3, r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	440b      	add	r3, r1
 800409e:	3319      	adds	r3, #25
 80040a0:	2201      	movs	r2, #1
 80040a2:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80040a4:	78fa      	ldrb	r2, [r7, #3]
 80040a6:	6879      	ldr	r1, [r7, #4]
 80040a8:	4613      	mov	r3, r2
 80040aa:	011b      	lsls	r3, r3, #4
 80040ac:	1a9b      	subs	r3, r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	440b      	add	r3, r1
 80040b2:	3344      	adds	r3, #68	@ 0x44
 80040b4:	2200      	movs	r2, #0
 80040b6:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	78fa      	ldrb	r2, [r7, #3]
 80040be:	4611      	mov	r1, r2
 80040c0:	4618      	mov	r0, r3
 80040c2:	f003 fe45 	bl	8007d50 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80040c6:	78fb      	ldrb	r3, [r7, #3]
 80040c8:	015a      	lsls	r2, r3, #5
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	4413      	add	r3, r2
 80040ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040d2:	461a      	mov	r2, r3
 80040d4:	2340      	movs	r3, #64	@ 0x40
 80040d6:	6093      	str	r3, [r2, #8]
 80040d8:	e31f      	b.n	800471a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	78fa      	ldrb	r2, [r7, #3]
 80040e0:	4611      	mov	r1, r2
 80040e2:	4618      	mov	r0, r3
 80040e4:	f003 fdb7 	bl	8007c56 <USB_ReadChInterrupts>
 80040e8:	4603      	mov	r3, r0
 80040ea:	f003 0308 	and.w	r3, r3, #8
 80040ee:	2b08      	cmp	r3, #8
 80040f0:	d11a      	bne.n	8004128 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80040f2:	78fb      	ldrb	r3, [r7, #3]
 80040f4:	015a      	lsls	r2, r3, #5
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	4413      	add	r3, r2
 80040fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040fe:	461a      	mov	r2, r3
 8004100:	2308      	movs	r3, #8
 8004102:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004104:	78fa      	ldrb	r2, [r7, #3]
 8004106:	6879      	ldr	r1, [r7, #4]
 8004108:	4613      	mov	r3, r2
 800410a:	011b      	lsls	r3, r3, #4
 800410c:	1a9b      	subs	r3, r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	440b      	add	r3, r1
 8004112:	334d      	adds	r3, #77	@ 0x4d
 8004114:	2206      	movs	r2, #6
 8004116:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	78fa      	ldrb	r2, [r7, #3]
 800411e:	4611      	mov	r1, r2
 8004120:	4618      	mov	r0, r3
 8004122:	f003 fe15 	bl	8007d50 <USB_HC_Halt>
 8004126:	e2f8      	b.n	800471a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	78fa      	ldrb	r2, [r7, #3]
 800412e:	4611      	mov	r1, r2
 8004130:	4618      	mov	r0, r3
 8004132:	f003 fd90 	bl	8007c56 <USB_ReadChInterrupts>
 8004136:	4603      	mov	r3, r0
 8004138:	f003 0310 	and.w	r3, r3, #16
 800413c:	2b10      	cmp	r3, #16
 800413e:	d144      	bne.n	80041ca <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004140:	78fa      	ldrb	r2, [r7, #3]
 8004142:	6879      	ldr	r1, [r7, #4]
 8004144:	4613      	mov	r3, r2
 8004146:	011b      	lsls	r3, r3, #4
 8004148:	1a9b      	subs	r3, r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	440b      	add	r3, r1
 800414e:	3344      	adds	r3, #68	@ 0x44
 8004150:	2200      	movs	r2, #0
 8004152:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004154:	78fa      	ldrb	r2, [r7, #3]
 8004156:	6879      	ldr	r1, [r7, #4]
 8004158:	4613      	mov	r3, r2
 800415a:	011b      	lsls	r3, r3, #4
 800415c:	1a9b      	subs	r3, r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	440b      	add	r3, r1
 8004162:	334d      	adds	r3, #77	@ 0x4d
 8004164:	2204      	movs	r2, #4
 8004166:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004168:	78fa      	ldrb	r2, [r7, #3]
 800416a:	6879      	ldr	r1, [r7, #4]
 800416c:	4613      	mov	r3, r2
 800416e:	011b      	lsls	r3, r3, #4
 8004170:	1a9b      	subs	r3, r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	440b      	add	r3, r1
 8004176:	3319      	adds	r3, #25
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d114      	bne.n	80041a8 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800417e:	78fa      	ldrb	r2, [r7, #3]
 8004180:	6879      	ldr	r1, [r7, #4]
 8004182:	4613      	mov	r3, r2
 8004184:	011b      	lsls	r3, r3, #4
 8004186:	1a9b      	subs	r3, r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	440b      	add	r3, r1
 800418c:	3318      	adds	r3, #24
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d109      	bne.n	80041a8 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004194:	78fa      	ldrb	r2, [r7, #3]
 8004196:	6879      	ldr	r1, [r7, #4]
 8004198:	4613      	mov	r3, r2
 800419a:	011b      	lsls	r3, r3, #4
 800419c:	1a9b      	subs	r3, r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	440b      	add	r3, r1
 80041a2:	3319      	adds	r3, #25
 80041a4:	2201      	movs	r2, #1
 80041a6:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	78fa      	ldrb	r2, [r7, #3]
 80041ae:	4611      	mov	r1, r2
 80041b0:	4618      	mov	r0, r3
 80041b2:	f003 fdcd 	bl	8007d50 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80041b6:	78fb      	ldrb	r3, [r7, #3]
 80041b8:	015a      	lsls	r2, r3, #5
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	4413      	add	r3, r2
 80041be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041c2:	461a      	mov	r2, r3
 80041c4:	2310      	movs	r3, #16
 80041c6:	6093      	str	r3, [r2, #8]
 80041c8:	e2a7      	b.n	800471a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	78fa      	ldrb	r2, [r7, #3]
 80041d0:	4611      	mov	r1, r2
 80041d2:	4618      	mov	r0, r3
 80041d4:	f003 fd3f 	bl	8007c56 <USB_ReadChInterrupts>
 80041d8:	4603      	mov	r3, r0
 80041da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041de:	2b80      	cmp	r3, #128	@ 0x80
 80041e0:	f040 8083 	bne.w	80042ea <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	799b      	ldrb	r3, [r3, #6]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d111      	bne.n	8004210 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80041ec:	78fa      	ldrb	r2, [r7, #3]
 80041ee:	6879      	ldr	r1, [r7, #4]
 80041f0:	4613      	mov	r3, r2
 80041f2:	011b      	lsls	r3, r3, #4
 80041f4:	1a9b      	subs	r3, r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	440b      	add	r3, r1
 80041fa:	334d      	adds	r3, #77	@ 0x4d
 80041fc:	2207      	movs	r2, #7
 80041fe:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	78fa      	ldrb	r2, [r7, #3]
 8004206:	4611      	mov	r1, r2
 8004208:	4618      	mov	r0, r3
 800420a:	f003 fda1 	bl	8007d50 <USB_HC_Halt>
 800420e:	e062      	b.n	80042d6 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004210:	78fa      	ldrb	r2, [r7, #3]
 8004212:	6879      	ldr	r1, [r7, #4]
 8004214:	4613      	mov	r3, r2
 8004216:	011b      	lsls	r3, r3, #4
 8004218:	1a9b      	subs	r3, r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	440b      	add	r3, r1
 800421e:	3344      	adds	r3, #68	@ 0x44
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	1c59      	adds	r1, r3, #1
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	4613      	mov	r3, r2
 8004228:	011b      	lsls	r3, r3, #4
 800422a:	1a9b      	subs	r3, r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	4403      	add	r3, r0
 8004230:	3344      	adds	r3, #68	@ 0x44
 8004232:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004234:	78fa      	ldrb	r2, [r7, #3]
 8004236:	6879      	ldr	r1, [r7, #4]
 8004238:	4613      	mov	r3, r2
 800423a:	011b      	lsls	r3, r3, #4
 800423c:	1a9b      	subs	r3, r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	440b      	add	r3, r1
 8004242:	3344      	adds	r3, #68	@ 0x44
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2b02      	cmp	r3, #2
 8004248:	d922      	bls.n	8004290 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800424a:	78fa      	ldrb	r2, [r7, #3]
 800424c:	6879      	ldr	r1, [r7, #4]
 800424e:	4613      	mov	r3, r2
 8004250:	011b      	lsls	r3, r3, #4
 8004252:	1a9b      	subs	r3, r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	440b      	add	r3, r1
 8004258:	3344      	adds	r3, #68	@ 0x44
 800425a:	2200      	movs	r2, #0
 800425c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800425e:	78fa      	ldrb	r2, [r7, #3]
 8004260:	6879      	ldr	r1, [r7, #4]
 8004262:	4613      	mov	r3, r2
 8004264:	011b      	lsls	r3, r3, #4
 8004266:	1a9b      	subs	r3, r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	440b      	add	r3, r1
 800426c:	334c      	adds	r3, #76	@ 0x4c
 800426e:	2204      	movs	r2, #4
 8004270:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004272:	78fa      	ldrb	r2, [r7, #3]
 8004274:	6879      	ldr	r1, [r7, #4]
 8004276:	4613      	mov	r3, r2
 8004278:	011b      	lsls	r3, r3, #4
 800427a:	1a9b      	subs	r3, r3, r2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	440b      	add	r3, r1
 8004280:	334c      	adds	r3, #76	@ 0x4c
 8004282:	781a      	ldrb	r2, [r3, #0]
 8004284:	78fb      	ldrb	r3, [r7, #3]
 8004286:	4619      	mov	r1, r3
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f003 ffdc 	bl	8008246 <HAL_HCD_HC_NotifyURBChange_Callback>
 800428e:	e022      	b.n	80042d6 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004290:	78fa      	ldrb	r2, [r7, #3]
 8004292:	6879      	ldr	r1, [r7, #4]
 8004294:	4613      	mov	r3, r2
 8004296:	011b      	lsls	r3, r3, #4
 8004298:	1a9b      	subs	r3, r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	440b      	add	r3, r1
 800429e:	334c      	adds	r3, #76	@ 0x4c
 80042a0:	2202      	movs	r2, #2
 80042a2:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80042a4:	78fb      	ldrb	r3, [r7, #3]
 80042a6:	015a      	lsls	r2, r3, #5
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	4413      	add	r3, r2
 80042ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80042ba:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80042c2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80042c4:	78fb      	ldrb	r3, [r7, #3]
 80042c6:	015a      	lsls	r2, r3, #5
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	4413      	add	r3, r2
 80042cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042d0:	461a      	mov	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80042d6:	78fb      	ldrb	r3, [r7, #3]
 80042d8:	015a      	lsls	r2, r3, #5
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	4413      	add	r3, r2
 80042de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042e2:	461a      	mov	r2, r3
 80042e4:	2380      	movs	r3, #128	@ 0x80
 80042e6:	6093      	str	r3, [r2, #8]
 80042e8:	e217      	b.n	800471a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	78fa      	ldrb	r2, [r7, #3]
 80042f0:	4611      	mov	r1, r2
 80042f2:	4618      	mov	r0, r3
 80042f4:	f003 fcaf 	bl	8007c56 <USB_ReadChInterrupts>
 80042f8:	4603      	mov	r3, r0
 80042fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004302:	d11b      	bne.n	800433c <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004304:	78fa      	ldrb	r2, [r7, #3]
 8004306:	6879      	ldr	r1, [r7, #4]
 8004308:	4613      	mov	r3, r2
 800430a:	011b      	lsls	r3, r3, #4
 800430c:	1a9b      	subs	r3, r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	440b      	add	r3, r1
 8004312:	334d      	adds	r3, #77	@ 0x4d
 8004314:	2209      	movs	r2, #9
 8004316:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	78fa      	ldrb	r2, [r7, #3]
 800431e:	4611      	mov	r1, r2
 8004320:	4618      	mov	r0, r3
 8004322:	f003 fd15 	bl	8007d50 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004326:	78fb      	ldrb	r3, [r7, #3]
 8004328:	015a      	lsls	r2, r3, #5
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	4413      	add	r3, r2
 800432e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004332:	461a      	mov	r2, r3
 8004334:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004338:	6093      	str	r3, [r2, #8]
 800433a:	e1ee      	b.n	800471a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	78fa      	ldrb	r2, [r7, #3]
 8004342:	4611      	mov	r1, r2
 8004344:	4618      	mov	r0, r3
 8004346:	f003 fc86 	bl	8007c56 <USB_ReadChInterrupts>
 800434a:	4603      	mov	r3, r0
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b02      	cmp	r3, #2
 8004352:	f040 81df 	bne.w	8004714 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004356:	78fb      	ldrb	r3, [r7, #3]
 8004358:	015a      	lsls	r2, r3, #5
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	4413      	add	r3, r2
 800435e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004362:	461a      	mov	r2, r3
 8004364:	2302      	movs	r3, #2
 8004366:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004368:	78fa      	ldrb	r2, [r7, #3]
 800436a:	6879      	ldr	r1, [r7, #4]
 800436c:	4613      	mov	r3, r2
 800436e:	011b      	lsls	r3, r3, #4
 8004370:	1a9b      	subs	r3, r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	440b      	add	r3, r1
 8004376:	334d      	adds	r3, #77	@ 0x4d
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	2b01      	cmp	r3, #1
 800437c:	f040 8093 	bne.w	80044a6 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004380:	78fa      	ldrb	r2, [r7, #3]
 8004382:	6879      	ldr	r1, [r7, #4]
 8004384:	4613      	mov	r3, r2
 8004386:	011b      	lsls	r3, r3, #4
 8004388:	1a9b      	subs	r3, r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	440b      	add	r3, r1
 800438e:	334d      	adds	r3, #77	@ 0x4d
 8004390:	2202      	movs	r2, #2
 8004392:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004394:	78fa      	ldrb	r2, [r7, #3]
 8004396:	6879      	ldr	r1, [r7, #4]
 8004398:	4613      	mov	r3, r2
 800439a:	011b      	lsls	r3, r3, #4
 800439c:	1a9b      	subs	r3, r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	440b      	add	r3, r1
 80043a2:	334c      	adds	r3, #76	@ 0x4c
 80043a4:	2201      	movs	r2, #1
 80043a6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80043a8:	78fa      	ldrb	r2, [r7, #3]
 80043aa:	6879      	ldr	r1, [r7, #4]
 80043ac:	4613      	mov	r3, r2
 80043ae:	011b      	lsls	r3, r3, #4
 80043b0:	1a9b      	subs	r3, r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	440b      	add	r3, r1
 80043b6:	3326      	adds	r3, #38	@ 0x26
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d00b      	beq.n	80043d6 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80043be:	78fa      	ldrb	r2, [r7, #3]
 80043c0:	6879      	ldr	r1, [r7, #4]
 80043c2:	4613      	mov	r3, r2
 80043c4:	011b      	lsls	r3, r3, #4
 80043c6:	1a9b      	subs	r3, r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	440b      	add	r3, r1
 80043cc:	3326      	adds	r3, #38	@ 0x26
 80043ce:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80043d0:	2b03      	cmp	r3, #3
 80043d2:	f040 8190 	bne.w	80046f6 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	799b      	ldrb	r3, [r3, #6]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d115      	bne.n	800440a <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80043de:	78fa      	ldrb	r2, [r7, #3]
 80043e0:	6879      	ldr	r1, [r7, #4]
 80043e2:	4613      	mov	r3, r2
 80043e4:	011b      	lsls	r3, r3, #4
 80043e6:	1a9b      	subs	r3, r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	440b      	add	r3, r1
 80043ec:	333d      	adds	r3, #61	@ 0x3d
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	78fa      	ldrb	r2, [r7, #3]
 80043f2:	f083 0301 	eor.w	r3, r3, #1
 80043f6:	b2d8      	uxtb	r0, r3
 80043f8:	6879      	ldr	r1, [r7, #4]
 80043fa:	4613      	mov	r3, r2
 80043fc:	011b      	lsls	r3, r3, #4
 80043fe:	1a9b      	subs	r3, r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	440b      	add	r3, r1
 8004404:	333d      	adds	r3, #61	@ 0x3d
 8004406:	4602      	mov	r2, r0
 8004408:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	799b      	ldrb	r3, [r3, #6]
 800440e:	2b01      	cmp	r3, #1
 8004410:	f040 8171 	bne.w	80046f6 <HCD_HC_OUT_IRQHandler+0x954>
 8004414:	78fa      	ldrb	r2, [r7, #3]
 8004416:	6879      	ldr	r1, [r7, #4]
 8004418:	4613      	mov	r3, r2
 800441a:	011b      	lsls	r3, r3, #4
 800441c:	1a9b      	subs	r3, r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	440b      	add	r3, r1
 8004422:	3334      	adds	r3, #52	@ 0x34
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	f000 8165 	beq.w	80046f6 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800442c:	78fa      	ldrb	r2, [r7, #3]
 800442e:	6879      	ldr	r1, [r7, #4]
 8004430:	4613      	mov	r3, r2
 8004432:	011b      	lsls	r3, r3, #4
 8004434:	1a9b      	subs	r3, r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	440b      	add	r3, r1
 800443a:	3334      	adds	r3, #52	@ 0x34
 800443c:	6819      	ldr	r1, [r3, #0]
 800443e:	78fa      	ldrb	r2, [r7, #3]
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	4613      	mov	r3, r2
 8004444:	011b      	lsls	r3, r3, #4
 8004446:	1a9b      	subs	r3, r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	4403      	add	r3, r0
 800444c:	3328      	adds	r3, #40	@ 0x28
 800444e:	881b      	ldrh	r3, [r3, #0]
 8004450:	440b      	add	r3, r1
 8004452:	1e59      	subs	r1, r3, #1
 8004454:	78fa      	ldrb	r2, [r7, #3]
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	4613      	mov	r3, r2
 800445a:	011b      	lsls	r3, r3, #4
 800445c:	1a9b      	subs	r3, r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4403      	add	r3, r0
 8004462:	3328      	adds	r3, #40	@ 0x28
 8004464:	881b      	ldrh	r3, [r3, #0]
 8004466:	fbb1 f3f3 	udiv	r3, r1, r3
 800446a:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	2b00      	cmp	r3, #0
 8004474:	f000 813f 	beq.w	80046f6 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004478:	78fa      	ldrb	r2, [r7, #3]
 800447a:	6879      	ldr	r1, [r7, #4]
 800447c:	4613      	mov	r3, r2
 800447e:	011b      	lsls	r3, r3, #4
 8004480:	1a9b      	subs	r3, r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	440b      	add	r3, r1
 8004486:	333d      	adds	r3, #61	@ 0x3d
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	78fa      	ldrb	r2, [r7, #3]
 800448c:	f083 0301 	eor.w	r3, r3, #1
 8004490:	b2d8      	uxtb	r0, r3
 8004492:	6879      	ldr	r1, [r7, #4]
 8004494:	4613      	mov	r3, r2
 8004496:	011b      	lsls	r3, r3, #4
 8004498:	1a9b      	subs	r3, r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	440b      	add	r3, r1
 800449e:	333d      	adds	r3, #61	@ 0x3d
 80044a0:	4602      	mov	r2, r0
 80044a2:	701a      	strb	r2, [r3, #0]
 80044a4:	e127      	b.n	80046f6 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80044a6:	78fa      	ldrb	r2, [r7, #3]
 80044a8:	6879      	ldr	r1, [r7, #4]
 80044aa:	4613      	mov	r3, r2
 80044ac:	011b      	lsls	r3, r3, #4
 80044ae:	1a9b      	subs	r3, r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	440b      	add	r3, r1
 80044b4:	334d      	adds	r3, #77	@ 0x4d
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	2b03      	cmp	r3, #3
 80044ba:	d120      	bne.n	80044fe <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80044bc:	78fa      	ldrb	r2, [r7, #3]
 80044be:	6879      	ldr	r1, [r7, #4]
 80044c0:	4613      	mov	r3, r2
 80044c2:	011b      	lsls	r3, r3, #4
 80044c4:	1a9b      	subs	r3, r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	440b      	add	r3, r1
 80044ca:	334d      	adds	r3, #77	@ 0x4d
 80044cc:	2202      	movs	r2, #2
 80044ce:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80044d0:	78fa      	ldrb	r2, [r7, #3]
 80044d2:	6879      	ldr	r1, [r7, #4]
 80044d4:	4613      	mov	r3, r2
 80044d6:	011b      	lsls	r3, r3, #4
 80044d8:	1a9b      	subs	r3, r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	440b      	add	r3, r1
 80044de:	331b      	adds	r3, #27
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	f040 8107 	bne.w	80046f6 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80044e8:	78fa      	ldrb	r2, [r7, #3]
 80044ea:	6879      	ldr	r1, [r7, #4]
 80044ec:	4613      	mov	r3, r2
 80044ee:	011b      	lsls	r3, r3, #4
 80044f0:	1a9b      	subs	r3, r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	440b      	add	r3, r1
 80044f6:	334c      	adds	r3, #76	@ 0x4c
 80044f8:	2202      	movs	r2, #2
 80044fa:	701a      	strb	r2, [r3, #0]
 80044fc:	e0fb      	b.n	80046f6 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80044fe:	78fa      	ldrb	r2, [r7, #3]
 8004500:	6879      	ldr	r1, [r7, #4]
 8004502:	4613      	mov	r3, r2
 8004504:	011b      	lsls	r3, r3, #4
 8004506:	1a9b      	subs	r3, r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	440b      	add	r3, r1
 800450c:	334d      	adds	r3, #77	@ 0x4d
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	2b04      	cmp	r3, #4
 8004512:	d13a      	bne.n	800458a <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004514:	78fa      	ldrb	r2, [r7, #3]
 8004516:	6879      	ldr	r1, [r7, #4]
 8004518:	4613      	mov	r3, r2
 800451a:	011b      	lsls	r3, r3, #4
 800451c:	1a9b      	subs	r3, r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	440b      	add	r3, r1
 8004522:	334d      	adds	r3, #77	@ 0x4d
 8004524:	2202      	movs	r2, #2
 8004526:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004528:	78fa      	ldrb	r2, [r7, #3]
 800452a:	6879      	ldr	r1, [r7, #4]
 800452c:	4613      	mov	r3, r2
 800452e:	011b      	lsls	r3, r3, #4
 8004530:	1a9b      	subs	r3, r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	440b      	add	r3, r1
 8004536:	334c      	adds	r3, #76	@ 0x4c
 8004538:	2202      	movs	r2, #2
 800453a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800453c:	78fa      	ldrb	r2, [r7, #3]
 800453e:	6879      	ldr	r1, [r7, #4]
 8004540:	4613      	mov	r3, r2
 8004542:	011b      	lsls	r3, r3, #4
 8004544:	1a9b      	subs	r3, r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	440b      	add	r3, r1
 800454a:	331b      	adds	r3, #27
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	2b01      	cmp	r3, #1
 8004550:	f040 80d1 	bne.w	80046f6 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004554:	78fa      	ldrb	r2, [r7, #3]
 8004556:	6879      	ldr	r1, [r7, #4]
 8004558:	4613      	mov	r3, r2
 800455a:	011b      	lsls	r3, r3, #4
 800455c:	1a9b      	subs	r3, r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	440b      	add	r3, r1
 8004562:	331b      	adds	r3, #27
 8004564:	2200      	movs	r2, #0
 8004566:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004568:	78fb      	ldrb	r3, [r7, #3]
 800456a:	015a      	lsls	r2, r3, #5
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	4413      	add	r3, r2
 8004570:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	78fa      	ldrb	r2, [r7, #3]
 8004578:	0151      	lsls	r1, r2, #5
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	440a      	add	r2, r1
 800457e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004582:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004586:	6053      	str	r3, [r2, #4]
 8004588:	e0b5      	b.n	80046f6 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800458a:	78fa      	ldrb	r2, [r7, #3]
 800458c:	6879      	ldr	r1, [r7, #4]
 800458e:	4613      	mov	r3, r2
 8004590:	011b      	lsls	r3, r3, #4
 8004592:	1a9b      	subs	r3, r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	440b      	add	r3, r1
 8004598:	334d      	adds	r3, #77	@ 0x4d
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	2b05      	cmp	r3, #5
 800459e:	d114      	bne.n	80045ca <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80045a0:	78fa      	ldrb	r2, [r7, #3]
 80045a2:	6879      	ldr	r1, [r7, #4]
 80045a4:	4613      	mov	r3, r2
 80045a6:	011b      	lsls	r3, r3, #4
 80045a8:	1a9b      	subs	r3, r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	440b      	add	r3, r1
 80045ae:	334d      	adds	r3, #77	@ 0x4d
 80045b0:	2202      	movs	r2, #2
 80045b2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80045b4:	78fa      	ldrb	r2, [r7, #3]
 80045b6:	6879      	ldr	r1, [r7, #4]
 80045b8:	4613      	mov	r3, r2
 80045ba:	011b      	lsls	r3, r3, #4
 80045bc:	1a9b      	subs	r3, r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	440b      	add	r3, r1
 80045c2:	334c      	adds	r3, #76	@ 0x4c
 80045c4:	2202      	movs	r2, #2
 80045c6:	701a      	strb	r2, [r3, #0]
 80045c8:	e095      	b.n	80046f6 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80045ca:	78fa      	ldrb	r2, [r7, #3]
 80045cc:	6879      	ldr	r1, [r7, #4]
 80045ce:	4613      	mov	r3, r2
 80045d0:	011b      	lsls	r3, r3, #4
 80045d2:	1a9b      	subs	r3, r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	440b      	add	r3, r1
 80045d8:	334d      	adds	r3, #77	@ 0x4d
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	2b06      	cmp	r3, #6
 80045de:	d114      	bne.n	800460a <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80045e0:	78fa      	ldrb	r2, [r7, #3]
 80045e2:	6879      	ldr	r1, [r7, #4]
 80045e4:	4613      	mov	r3, r2
 80045e6:	011b      	lsls	r3, r3, #4
 80045e8:	1a9b      	subs	r3, r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	440b      	add	r3, r1
 80045ee:	334d      	adds	r3, #77	@ 0x4d
 80045f0:	2202      	movs	r2, #2
 80045f2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80045f4:	78fa      	ldrb	r2, [r7, #3]
 80045f6:	6879      	ldr	r1, [r7, #4]
 80045f8:	4613      	mov	r3, r2
 80045fa:	011b      	lsls	r3, r3, #4
 80045fc:	1a9b      	subs	r3, r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	440b      	add	r3, r1
 8004602:	334c      	adds	r3, #76	@ 0x4c
 8004604:	2205      	movs	r2, #5
 8004606:	701a      	strb	r2, [r3, #0]
 8004608:	e075      	b.n	80046f6 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800460a:	78fa      	ldrb	r2, [r7, #3]
 800460c:	6879      	ldr	r1, [r7, #4]
 800460e:	4613      	mov	r3, r2
 8004610:	011b      	lsls	r3, r3, #4
 8004612:	1a9b      	subs	r3, r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	440b      	add	r3, r1
 8004618:	334d      	adds	r3, #77	@ 0x4d
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	2b07      	cmp	r3, #7
 800461e:	d00a      	beq.n	8004636 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004620:	78fa      	ldrb	r2, [r7, #3]
 8004622:	6879      	ldr	r1, [r7, #4]
 8004624:	4613      	mov	r3, r2
 8004626:	011b      	lsls	r3, r3, #4
 8004628:	1a9b      	subs	r3, r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	440b      	add	r3, r1
 800462e:	334d      	adds	r3, #77	@ 0x4d
 8004630:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004632:	2b09      	cmp	r3, #9
 8004634:	d170      	bne.n	8004718 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004636:	78fa      	ldrb	r2, [r7, #3]
 8004638:	6879      	ldr	r1, [r7, #4]
 800463a:	4613      	mov	r3, r2
 800463c:	011b      	lsls	r3, r3, #4
 800463e:	1a9b      	subs	r3, r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	440b      	add	r3, r1
 8004644:	334d      	adds	r3, #77	@ 0x4d
 8004646:	2202      	movs	r2, #2
 8004648:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800464a:	78fa      	ldrb	r2, [r7, #3]
 800464c:	6879      	ldr	r1, [r7, #4]
 800464e:	4613      	mov	r3, r2
 8004650:	011b      	lsls	r3, r3, #4
 8004652:	1a9b      	subs	r3, r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	440b      	add	r3, r1
 8004658:	3344      	adds	r3, #68	@ 0x44
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	1c59      	adds	r1, r3, #1
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	4613      	mov	r3, r2
 8004662:	011b      	lsls	r3, r3, #4
 8004664:	1a9b      	subs	r3, r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4403      	add	r3, r0
 800466a:	3344      	adds	r3, #68	@ 0x44
 800466c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800466e:	78fa      	ldrb	r2, [r7, #3]
 8004670:	6879      	ldr	r1, [r7, #4]
 8004672:	4613      	mov	r3, r2
 8004674:	011b      	lsls	r3, r3, #4
 8004676:	1a9b      	subs	r3, r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	440b      	add	r3, r1
 800467c:	3344      	adds	r3, #68	@ 0x44
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2b02      	cmp	r3, #2
 8004682:	d914      	bls.n	80046ae <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004684:	78fa      	ldrb	r2, [r7, #3]
 8004686:	6879      	ldr	r1, [r7, #4]
 8004688:	4613      	mov	r3, r2
 800468a:	011b      	lsls	r3, r3, #4
 800468c:	1a9b      	subs	r3, r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	440b      	add	r3, r1
 8004692:	3344      	adds	r3, #68	@ 0x44
 8004694:	2200      	movs	r2, #0
 8004696:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004698:	78fa      	ldrb	r2, [r7, #3]
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	4613      	mov	r3, r2
 800469e:	011b      	lsls	r3, r3, #4
 80046a0:	1a9b      	subs	r3, r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	440b      	add	r3, r1
 80046a6:	334c      	adds	r3, #76	@ 0x4c
 80046a8:	2204      	movs	r2, #4
 80046aa:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80046ac:	e022      	b.n	80046f4 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80046ae:	78fa      	ldrb	r2, [r7, #3]
 80046b0:	6879      	ldr	r1, [r7, #4]
 80046b2:	4613      	mov	r3, r2
 80046b4:	011b      	lsls	r3, r3, #4
 80046b6:	1a9b      	subs	r3, r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	440b      	add	r3, r1
 80046bc:	334c      	adds	r3, #76	@ 0x4c
 80046be:	2202      	movs	r2, #2
 80046c0:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80046c2:	78fb      	ldrb	r3, [r7, #3]
 80046c4:	015a      	lsls	r2, r3, #5
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	4413      	add	r3, r2
 80046ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80046d8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80046e0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80046e2:	78fb      	ldrb	r3, [r7, #3]
 80046e4:	015a      	lsls	r2, r3, #5
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	4413      	add	r3, r2
 80046ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046ee:	461a      	mov	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80046f4:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80046f6:	78fa      	ldrb	r2, [r7, #3]
 80046f8:	6879      	ldr	r1, [r7, #4]
 80046fa:	4613      	mov	r3, r2
 80046fc:	011b      	lsls	r3, r3, #4
 80046fe:	1a9b      	subs	r3, r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	440b      	add	r3, r1
 8004704:	334c      	adds	r3, #76	@ 0x4c
 8004706:	781a      	ldrb	r2, [r3, #0]
 8004708:	78fb      	ldrb	r3, [r7, #3]
 800470a:	4619      	mov	r1, r3
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f003 fd9a 	bl	8008246 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004712:	e002      	b.n	800471a <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004714:	bf00      	nop
 8004716:	e000      	b.n	800471a <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8004718:	bf00      	nop
  }
}
 800471a:	3718      	adds	r7, #24
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b08a      	sub	sp, #40	@ 0x28
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800472e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004730:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	f003 030f 	and.w	r3, r3, #15
 8004740:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	0c5b      	lsrs	r3, r3, #17
 8004746:	f003 030f 	and.w	r3, r3, #15
 800474a:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	091b      	lsrs	r3, r3, #4
 8004750:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004754:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	2b02      	cmp	r3, #2
 800475a:	d004      	beq.n	8004766 <HCD_RXQLVL_IRQHandler+0x46>
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	2b05      	cmp	r3, #5
 8004760:	f000 80b6 	beq.w	80048d0 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004764:	e0b7      	b.n	80048d6 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 80b3 	beq.w	80048d4 <HCD_RXQLVL_IRQHandler+0x1b4>
 800476e:	6879      	ldr	r1, [r7, #4]
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	4613      	mov	r3, r2
 8004774:	011b      	lsls	r3, r3, #4
 8004776:	1a9b      	subs	r3, r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	440b      	add	r3, r1
 800477c:	332c      	adds	r3, #44	@ 0x2c
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	f000 80a7 	beq.w	80048d4 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004786:	6879      	ldr	r1, [r7, #4]
 8004788:	69ba      	ldr	r2, [r7, #24]
 800478a:	4613      	mov	r3, r2
 800478c:	011b      	lsls	r3, r3, #4
 800478e:	1a9b      	subs	r3, r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	440b      	add	r3, r1
 8004794:	3338      	adds	r3, #56	@ 0x38
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	18d1      	adds	r1, r2, r3
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	69ba      	ldr	r2, [r7, #24]
 80047a0:	4613      	mov	r3, r2
 80047a2:	011b      	lsls	r3, r3, #4
 80047a4:	1a9b      	subs	r3, r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4403      	add	r3, r0
 80047aa:	3334      	adds	r3, #52	@ 0x34
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4299      	cmp	r1, r3
 80047b0:	f200 8083 	bhi.w	80048ba <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6818      	ldr	r0, [r3, #0]
 80047b8:	6879      	ldr	r1, [r7, #4]
 80047ba:	69ba      	ldr	r2, [r7, #24]
 80047bc:	4613      	mov	r3, r2
 80047be:	011b      	lsls	r3, r3, #4
 80047c0:	1a9b      	subs	r3, r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	440b      	add	r3, r1
 80047c6:	332c      	adds	r3, #44	@ 0x2c
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	b292      	uxth	r2, r2
 80047ce:	4619      	mov	r1, r3
 80047d0:	f003 f9d6 	bl	8007b80 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80047d4:	6879      	ldr	r1, [r7, #4]
 80047d6:	69ba      	ldr	r2, [r7, #24]
 80047d8:	4613      	mov	r3, r2
 80047da:	011b      	lsls	r3, r3, #4
 80047dc:	1a9b      	subs	r3, r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	440b      	add	r3, r1
 80047e2:	332c      	adds	r3, #44	@ 0x2c
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	18d1      	adds	r1, r2, r3
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	4613      	mov	r3, r2
 80047f0:	011b      	lsls	r3, r3, #4
 80047f2:	1a9b      	subs	r3, r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	4403      	add	r3, r0
 80047f8:	332c      	adds	r3, #44	@ 0x2c
 80047fa:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80047fc:	6879      	ldr	r1, [r7, #4]
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	4613      	mov	r3, r2
 8004802:	011b      	lsls	r3, r3, #4
 8004804:	1a9b      	subs	r3, r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	440b      	add	r3, r1
 800480a:	3338      	adds	r3, #56	@ 0x38
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	18d1      	adds	r1, r2, r3
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	4613      	mov	r3, r2
 8004818:	011b      	lsls	r3, r3, #4
 800481a:	1a9b      	subs	r3, r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	4403      	add	r3, r0
 8004820:	3338      	adds	r3, #56	@ 0x38
 8004822:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	015a      	lsls	r2, r3, #5
 8004828:	6a3b      	ldr	r3, [r7, #32]
 800482a:	4413      	add	r3, r2
 800482c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	0cdb      	lsrs	r3, r3, #19
 8004834:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004838:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800483a:	6879      	ldr	r1, [r7, #4]
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	4613      	mov	r3, r2
 8004840:	011b      	lsls	r3, r3, #4
 8004842:	1a9b      	subs	r3, r3, r2
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	440b      	add	r3, r1
 8004848:	3328      	adds	r3, #40	@ 0x28
 800484a:	881b      	ldrh	r3, [r3, #0]
 800484c:	461a      	mov	r2, r3
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	4293      	cmp	r3, r2
 8004852:	d13f      	bne.n	80048d4 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d03c      	beq.n	80048d4 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	015a      	lsls	r2, r3, #5
 800485e:	6a3b      	ldr	r3, [r7, #32]
 8004860:	4413      	add	r3, r2
 8004862:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004870:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004878:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	015a      	lsls	r2, r3, #5
 800487e:	6a3b      	ldr	r3, [r7, #32]
 8004880:	4413      	add	r3, r2
 8004882:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004886:	461a      	mov	r2, r3
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800488c:	6879      	ldr	r1, [r7, #4]
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	4613      	mov	r3, r2
 8004892:	011b      	lsls	r3, r3, #4
 8004894:	1a9b      	subs	r3, r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	440b      	add	r3, r1
 800489a:	333c      	adds	r3, #60	@ 0x3c
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	f083 0301 	eor.w	r3, r3, #1
 80048a2:	b2d8      	uxtb	r0, r3
 80048a4:	6879      	ldr	r1, [r7, #4]
 80048a6:	69ba      	ldr	r2, [r7, #24]
 80048a8:	4613      	mov	r3, r2
 80048aa:	011b      	lsls	r3, r3, #4
 80048ac:	1a9b      	subs	r3, r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	440b      	add	r3, r1
 80048b2:	333c      	adds	r3, #60	@ 0x3c
 80048b4:	4602      	mov	r2, r0
 80048b6:	701a      	strb	r2, [r3, #0]
      break;
 80048b8:	e00c      	b.n	80048d4 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80048ba:	6879      	ldr	r1, [r7, #4]
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	4613      	mov	r3, r2
 80048c0:	011b      	lsls	r3, r3, #4
 80048c2:	1a9b      	subs	r3, r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	440b      	add	r3, r1
 80048c8:	334c      	adds	r3, #76	@ 0x4c
 80048ca:	2204      	movs	r2, #4
 80048cc:	701a      	strb	r2, [r3, #0]
      break;
 80048ce:	e001      	b.n	80048d4 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80048d0:	bf00      	nop
 80048d2:	e000      	b.n	80048d6 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80048d4:	bf00      	nop
  }
}
 80048d6:	bf00      	nop
 80048d8:	3728      	adds	r7, #40	@ 0x28
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	b086      	sub	sp, #24
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800490a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b02      	cmp	r3, #2
 8004914:	d10b      	bne.n	800492e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	2b01      	cmp	r3, #1
 800491e:	d102      	bne.n	8004926 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f003 fc74 	bl	800820e <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	f043 0302 	orr.w	r3, r3, #2
 800492c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f003 0308 	and.w	r3, r3, #8
 8004934:	2b08      	cmp	r3, #8
 8004936:	d132      	bne.n	800499e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	f043 0308 	orr.w	r3, r3, #8
 800493e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f003 0304 	and.w	r3, r3, #4
 8004946:	2b04      	cmp	r3, #4
 8004948:	d126      	bne.n	8004998 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	7a5b      	ldrb	r3, [r3, #9]
 800494e:	2b02      	cmp	r3, #2
 8004950:	d113      	bne.n	800497a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004958:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800495c:	d106      	bne.n	800496c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2102      	movs	r1, #2
 8004964:	4618      	mov	r0, r3
 8004966:	f003 f9a5 	bl	8007cb4 <USB_InitFSLSPClkSel>
 800496a:	e011      	b.n	8004990 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2101      	movs	r1, #1
 8004972:	4618      	mov	r0, r3
 8004974:	f003 f99e 	bl	8007cb4 <USB_InitFSLSPClkSel>
 8004978:	e00a      	b.n	8004990 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	79db      	ldrb	r3, [r3, #7]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d106      	bne.n	8004990 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004988:	461a      	mov	r2, r3
 800498a:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800498e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f003 fc66 	bl	8008262 <HAL_HCD_PortEnabled_Callback>
 8004996:	e002      	b.n	800499e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f003 fc70 	bl	800827e <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f003 0320 	and.w	r3, r3, #32
 80049a4:	2b20      	cmp	r3, #32
 80049a6:	d103      	bne.n	80049b0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	f043 0320 	orr.w	r3, r3, #32
 80049ae:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80049b6:	461a      	mov	r2, r3
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	6013      	str	r3, [r2, #0]
}
 80049bc:	bf00      	nop
 80049be:	3718      	adds	r7, #24
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e12b      	b.n	8004c2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d106      	bne.n	80049f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7fc f8f4 	bl	8000bd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2224      	movs	r2, #36	@ 0x24
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f022 0201 	bic.w	r2, r2, #1
 8004a06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a28:	f001 fe72 	bl	8006710 <HAL_RCC_GetPCLK1Freq>
 8004a2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	4a81      	ldr	r2, [pc, #516]	@ (8004c38 <HAL_I2C_Init+0x274>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d807      	bhi.n	8004a48 <HAL_I2C_Init+0x84>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	4a80      	ldr	r2, [pc, #512]	@ (8004c3c <HAL_I2C_Init+0x278>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	bf94      	ite	ls
 8004a40:	2301      	movls	r3, #1
 8004a42:	2300      	movhi	r3, #0
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	e006      	b.n	8004a56 <HAL_I2C_Init+0x92>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4a7d      	ldr	r2, [pc, #500]	@ (8004c40 <HAL_I2C_Init+0x27c>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	bf94      	ite	ls
 8004a50:	2301      	movls	r3, #1
 8004a52:	2300      	movhi	r3, #0
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e0e7      	b.n	8004c2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	4a78      	ldr	r2, [pc, #480]	@ (8004c44 <HAL_I2C_Init+0x280>)
 8004a62:	fba2 2303 	umull	r2, r3, r2, r3
 8004a66:	0c9b      	lsrs	r3, r3, #18
 8004a68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	6a1b      	ldr	r3, [r3, #32]
 8004a84:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	4a6a      	ldr	r2, [pc, #424]	@ (8004c38 <HAL_I2C_Init+0x274>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d802      	bhi.n	8004a98 <HAL_I2C_Init+0xd4>
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	3301      	adds	r3, #1
 8004a96:	e009      	b.n	8004aac <HAL_I2C_Init+0xe8>
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004a9e:	fb02 f303 	mul.w	r3, r2, r3
 8004aa2:	4a69      	ldr	r2, [pc, #420]	@ (8004c48 <HAL_I2C_Init+0x284>)
 8004aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa8:	099b      	lsrs	r3, r3, #6
 8004aaa:	3301      	adds	r3, #1
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	6812      	ldr	r2, [r2, #0]
 8004ab0:	430b      	orrs	r3, r1
 8004ab2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004abe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	495c      	ldr	r1, [pc, #368]	@ (8004c38 <HAL_I2C_Init+0x274>)
 8004ac8:	428b      	cmp	r3, r1
 8004aca:	d819      	bhi.n	8004b00 <HAL_I2C_Init+0x13c>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	1e59      	subs	r1, r3, #1
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	005b      	lsls	r3, r3, #1
 8004ad6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ada:	1c59      	adds	r1, r3, #1
 8004adc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004ae0:	400b      	ands	r3, r1
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00a      	beq.n	8004afc <HAL_I2C_Init+0x138>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	1e59      	subs	r1, r3, #1
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	005b      	lsls	r3, r3, #1
 8004af0:	fbb1 f3f3 	udiv	r3, r1, r3
 8004af4:	3301      	adds	r3, #1
 8004af6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004afa:	e051      	b.n	8004ba0 <HAL_I2C_Init+0x1dc>
 8004afc:	2304      	movs	r3, #4
 8004afe:	e04f      	b.n	8004ba0 <HAL_I2C_Init+0x1dc>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d111      	bne.n	8004b2c <HAL_I2C_Init+0x168>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	1e58      	subs	r0, r3, #1
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6859      	ldr	r1, [r3, #4]
 8004b10:	460b      	mov	r3, r1
 8004b12:	005b      	lsls	r3, r3, #1
 8004b14:	440b      	add	r3, r1
 8004b16:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	bf0c      	ite	eq
 8004b24:	2301      	moveq	r3, #1
 8004b26:	2300      	movne	r3, #0
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	e012      	b.n	8004b52 <HAL_I2C_Init+0x18e>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	1e58      	subs	r0, r3, #1
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6859      	ldr	r1, [r3, #4]
 8004b34:	460b      	mov	r3, r1
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	440b      	add	r3, r1
 8004b3a:	0099      	lsls	r1, r3, #2
 8004b3c:	440b      	add	r3, r1
 8004b3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b42:	3301      	adds	r3, #1
 8004b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	bf0c      	ite	eq
 8004b4c:	2301      	moveq	r3, #1
 8004b4e:	2300      	movne	r3, #0
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d001      	beq.n	8004b5a <HAL_I2C_Init+0x196>
 8004b56:	2301      	movs	r3, #1
 8004b58:	e022      	b.n	8004ba0 <HAL_I2C_Init+0x1dc>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10e      	bne.n	8004b80 <HAL_I2C_Init+0x1bc>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	1e58      	subs	r0, r3, #1
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6859      	ldr	r1, [r3, #4]
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	005b      	lsls	r3, r3, #1
 8004b6e:	440b      	add	r3, r1
 8004b70:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b74:	3301      	adds	r3, #1
 8004b76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b7e:	e00f      	b.n	8004ba0 <HAL_I2C_Init+0x1dc>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	1e58      	subs	r0, r3, #1
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6859      	ldr	r1, [r3, #4]
 8004b88:	460b      	mov	r3, r1
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	440b      	add	r3, r1
 8004b8e:	0099      	lsls	r1, r3, #2
 8004b90:	440b      	add	r3, r1
 8004b92:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b96:	3301      	adds	r3, #1
 8004b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b9c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ba0:	6879      	ldr	r1, [r7, #4]
 8004ba2:	6809      	ldr	r1, [r1, #0]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	69da      	ldr	r2, [r3, #28]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004bce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	6911      	ldr	r1, [r2, #16]
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	68d2      	ldr	r2, [r2, #12]
 8004bda:	4311      	orrs	r1, r2
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	6812      	ldr	r2, [r2, #0]
 8004be0:	430b      	orrs	r3, r1
 8004be2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	695a      	ldr	r2, [r3, #20]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	431a      	orrs	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f042 0201 	orr.w	r2, r2, #1
 8004c0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2220      	movs	r2, #32
 8004c1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	000186a0 	.word	0x000186a0
 8004c3c:	001e847f 	.word	0x001e847f
 8004c40:	003d08ff 	.word	0x003d08ff
 8004c44:	431bde83 	.word	0x431bde83
 8004c48:	10624dd3 	.word	0x10624dd3

08004c4c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b088      	sub	sp, #32
 8004c50:	af02      	add	r7, sp, #8
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	607a      	str	r2, [r7, #4]
 8004c56:	461a      	mov	r2, r3
 8004c58:	460b      	mov	r3, r1
 8004c5a:	817b      	strh	r3, [r7, #10]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c60:	f7fc fec8 	bl	80019f4 <HAL_GetTick>
 8004c64:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b20      	cmp	r3, #32
 8004c70:	f040 80e0 	bne.w	8004e34 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	9300      	str	r3, [sp, #0]
 8004c78:	2319      	movs	r3, #25
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	4970      	ldr	r1, [pc, #448]	@ (8004e40 <HAL_I2C_Master_Transmit+0x1f4>)
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f000 f964 	bl	8004f4c <I2C_WaitOnFlagUntilTimeout>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	e0d3      	b.n	8004e36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d101      	bne.n	8004c9c <HAL_I2C_Master_Transmit+0x50>
 8004c98:	2302      	movs	r3, #2
 8004c9a:	e0cc      	b.n	8004e36 <HAL_I2C_Master_Transmit+0x1ea>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d007      	beq.n	8004cc2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f042 0201 	orr.w	r2, r2, #1
 8004cc0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004cd0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2221      	movs	r2, #33	@ 0x21
 8004cd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2210      	movs	r2, #16
 8004cde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	893a      	ldrh	r2, [r7, #8]
 8004cf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	4a50      	ldr	r2, [pc, #320]	@ (8004e44 <HAL_I2C_Master_Transmit+0x1f8>)
 8004d02:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004d04:	8979      	ldrh	r1, [r7, #10]
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	6a3a      	ldr	r2, [r7, #32]
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f000 f89c 	bl	8004e48 <I2C_MasterRequestWrite>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d001      	beq.n	8004d1a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e08d      	b.n	8004e36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	613b      	str	r3, [r7, #16]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	695b      	ldr	r3, [r3, #20]
 8004d24:	613b      	str	r3, [r7, #16]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	613b      	str	r3, [r7, #16]
 8004d2e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004d30:	e066      	b.n	8004e00 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	6a39      	ldr	r1, [r7, #32]
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f000 fa22 	bl	8005180 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00d      	beq.n	8004d5e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d46:	2b04      	cmp	r3, #4
 8004d48:	d107      	bne.n	8004d5a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e06b      	b.n	8004e36 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d62:	781a      	ldrb	r2, [r3, #0]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d6e:	1c5a      	adds	r2, r3, #1
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d86:	3b01      	subs	r3, #1
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	f003 0304 	and.w	r3, r3, #4
 8004d98:	2b04      	cmp	r3, #4
 8004d9a:	d11b      	bne.n	8004dd4 <HAL_I2C_Master_Transmit+0x188>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d017      	beq.n	8004dd4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da8:	781a      	ldrb	r2, [r3, #0]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db4:	1c5a      	adds	r2, r3, #1
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	6a39      	ldr	r1, [r7, #32]
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f000 fa19 	bl	8005210 <I2C_WaitOnBTFFlagUntilTimeout>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00d      	beq.n	8004e00 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de8:	2b04      	cmp	r3, #4
 8004dea:	d107      	bne.n	8004dfc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dfa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e01a      	b.n	8004e36 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d194      	bne.n	8004d32 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004e30:	2300      	movs	r3, #0
 8004e32:	e000      	b.n	8004e36 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004e34:	2302      	movs	r3, #2
  }
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3718      	adds	r7, #24
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	00100002 	.word	0x00100002
 8004e44:	ffff0000 	.word	0xffff0000

08004e48 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b088      	sub	sp, #32
 8004e4c:	af02      	add	r7, sp, #8
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	607a      	str	r2, [r7, #4]
 8004e52:	603b      	str	r3, [r7, #0]
 8004e54:	460b      	mov	r3, r1
 8004e56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e5c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	2b08      	cmp	r3, #8
 8004e62:	d006      	beq.n	8004e72 <I2C_MasterRequestWrite+0x2a>
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d003      	beq.n	8004e72 <I2C_MasterRequestWrite+0x2a>
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004e70:	d108      	bne.n	8004e84 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	e00b      	b.n	8004e9c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e88:	2b12      	cmp	r3, #18
 8004e8a:	d107      	bne.n	8004e9c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f000 f84f 	bl	8004f4c <I2C_WaitOnFlagUntilTimeout>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00d      	beq.n	8004ed0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ebe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ec2:	d103      	bne.n	8004ecc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004eca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e035      	b.n	8004f3c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ed8:	d108      	bne.n	8004eec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004eda:	897b      	ldrh	r3, [r7, #10]
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	461a      	mov	r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004ee8:	611a      	str	r2, [r3, #16]
 8004eea:	e01b      	b.n	8004f24 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004eec:	897b      	ldrh	r3, [r7, #10]
 8004eee:	11db      	asrs	r3, r3, #7
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	f003 0306 	and.w	r3, r3, #6
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	f063 030f 	orn	r3, r3, #15
 8004efc:	b2da      	uxtb	r2, r3
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	490e      	ldr	r1, [pc, #56]	@ (8004f44 <I2C_MasterRequestWrite+0xfc>)
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f000 f898 	bl	8005040 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d001      	beq.n	8004f1a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e010      	b.n	8004f3c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004f1a:	897b      	ldrh	r3, [r7, #10]
 8004f1c:	b2da      	uxtb	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	4907      	ldr	r1, [pc, #28]	@ (8004f48 <I2C_MasterRequestWrite+0x100>)
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f000 f888 	bl	8005040 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d001      	beq.n	8004f3a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e000      	b.n	8004f3c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3718      	adds	r7, #24
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	00010008 	.word	0x00010008
 8004f48:	00010002 	.word	0x00010002

08004f4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	603b      	str	r3, [r7, #0]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f5c:	e048      	b.n	8004ff0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f64:	d044      	beq.n	8004ff0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f66:	f7fc fd45 	bl	80019f4 <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	683a      	ldr	r2, [r7, #0]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d302      	bcc.n	8004f7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d139      	bne.n	8004ff0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	0c1b      	lsrs	r3, r3, #16
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d10d      	bne.n	8004fa2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	43da      	mvns	r2, r3
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	4013      	ands	r3, r2
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	bf0c      	ite	eq
 8004f98:	2301      	moveq	r3, #1
 8004f9a:	2300      	movne	r3, #0
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	e00c      	b.n	8004fbc <I2C_WaitOnFlagUntilTimeout+0x70>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	43da      	mvns	r2, r3
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	4013      	ands	r3, r2
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	bf0c      	ite	eq
 8004fb4:	2301      	moveq	r3, #1
 8004fb6:	2300      	movne	r3, #0
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	461a      	mov	r2, r3
 8004fbc:	79fb      	ldrb	r3, [r7, #7]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d116      	bne.n	8004ff0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2220      	movs	r2, #32
 8004fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fdc:	f043 0220 	orr.w	r2, r3, #32
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e023      	b.n	8005038 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	0c1b      	lsrs	r3, r3, #16
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d10d      	bne.n	8005016 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	43da      	mvns	r2, r3
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	4013      	ands	r3, r2
 8005006:	b29b      	uxth	r3, r3
 8005008:	2b00      	cmp	r3, #0
 800500a:	bf0c      	ite	eq
 800500c:	2301      	moveq	r3, #1
 800500e:	2300      	movne	r3, #0
 8005010:	b2db      	uxtb	r3, r3
 8005012:	461a      	mov	r2, r3
 8005014:	e00c      	b.n	8005030 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	43da      	mvns	r2, r3
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	4013      	ands	r3, r2
 8005022:	b29b      	uxth	r3, r3
 8005024:	2b00      	cmp	r3, #0
 8005026:	bf0c      	ite	eq
 8005028:	2301      	moveq	r3, #1
 800502a:	2300      	movne	r3, #0
 800502c:	b2db      	uxtb	r3, r3
 800502e:	461a      	mov	r2, r3
 8005030:	79fb      	ldrb	r3, [r7, #7]
 8005032:	429a      	cmp	r2, r3
 8005034:	d093      	beq.n	8004f5e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
 800504c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800504e:	e071      	b.n	8005134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800505a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800505e:	d123      	bne.n	80050a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800506e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005078:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2220      	movs	r2, #32
 8005084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005094:	f043 0204 	orr.w	r2, r3, #4
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e067      	b.n	8005178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80050ae:	d041      	beq.n	8005134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050b0:	f7fc fca0 	bl	80019f4 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d302      	bcc.n	80050c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d136      	bne.n	8005134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	0c1b      	lsrs	r3, r3, #16
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d10c      	bne.n	80050ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	43da      	mvns	r2, r3
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	4013      	ands	r3, r2
 80050dc:	b29b      	uxth	r3, r3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	bf14      	ite	ne
 80050e2:	2301      	movne	r3, #1
 80050e4:	2300      	moveq	r3, #0
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	e00b      	b.n	8005102 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	43da      	mvns	r2, r3
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	4013      	ands	r3, r2
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	bf14      	ite	ne
 80050fc:	2301      	movne	r3, #1
 80050fe:	2300      	moveq	r3, #0
 8005100:	b2db      	uxtb	r3, r3
 8005102:	2b00      	cmp	r3, #0
 8005104:	d016      	beq.n	8005134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2220      	movs	r2, #32
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005120:	f043 0220 	orr.w	r2, r3, #32
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e021      	b.n	8005178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	0c1b      	lsrs	r3, r3, #16
 8005138:	b2db      	uxtb	r3, r3
 800513a:	2b01      	cmp	r3, #1
 800513c:	d10c      	bne.n	8005158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	43da      	mvns	r2, r3
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	4013      	ands	r3, r2
 800514a:	b29b      	uxth	r3, r3
 800514c:	2b00      	cmp	r3, #0
 800514e:	bf14      	ite	ne
 8005150:	2301      	movne	r3, #1
 8005152:	2300      	moveq	r3, #0
 8005154:	b2db      	uxtb	r3, r3
 8005156:	e00b      	b.n	8005170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	43da      	mvns	r2, r3
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	4013      	ands	r3, r2
 8005164:	b29b      	uxth	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	bf14      	ite	ne
 800516a:	2301      	movne	r3, #1
 800516c:	2300      	moveq	r3, #0
 800516e:	b2db      	uxtb	r3, r3
 8005170:	2b00      	cmp	r3, #0
 8005172:	f47f af6d 	bne.w	8005050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800518c:	e034      	b.n	80051f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f000 f886 	bl	80052a0 <I2C_IsAcknowledgeFailed>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d001      	beq.n	800519e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e034      	b.n	8005208 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80051a4:	d028      	beq.n	80051f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051a6:	f7fc fc25 	bl	80019f4 <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d302      	bcc.n	80051bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d11d      	bne.n	80051f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051c6:	2b80      	cmp	r3, #128	@ 0x80
 80051c8:	d016      	beq.n	80051f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2220      	movs	r2, #32
 80051d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e4:	f043 0220 	orr.w	r2, r3, #32
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e007      	b.n	8005208 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005202:	2b80      	cmp	r3, #128	@ 0x80
 8005204:	d1c3      	bne.n	800518e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800521c:	e034      	b.n	8005288 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f000 f83e 	bl	80052a0 <I2C_IsAcknowledgeFailed>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d001      	beq.n	800522e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e034      	b.n	8005298 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005234:	d028      	beq.n	8005288 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005236:	f7fc fbdd 	bl	80019f4 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	429a      	cmp	r2, r3
 8005244:	d302      	bcc.n	800524c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d11d      	bne.n	8005288 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	f003 0304 	and.w	r3, r3, #4
 8005256:	2b04      	cmp	r3, #4
 8005258:	d016      	beq.n	8005288 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2220      	movs	r2, #32
 8005264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005274:	f043 0220 	orr.w	r2, r3, #32
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e007      	b.n	8005298 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	f003 0304 	and.w	r3, r3, #4
 8005292:	2b04      	cmp	r3, #4
 8005294:	d1c3      	bne.n	800521e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3710      	adds	r7, #16
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052b6:	d11b      	bne.n	80052f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80052c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2220      	movs	r2, #32
 80052cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052dc:	f043 0204 	orr.w	r2, r3, #4
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e000      	b.n	80052f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
	...

08005300 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b088      	sub	sp, #32
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e128      	b.n	8005564 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d109      	bne.n	8005332 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a90      	ldr	r2, [pc, #576]	@ (800556c <HAL_I2S_Init+0x26c>)
 800532a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f7fb fcc9 	bl	8000cc4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2202      	movs	r2, #2
 8005336:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	69db      	ldr	r3, [r3, #28]
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	6812      	ldr	r2, [r2, #0]
 8005344:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005348:	f023 030f 	bic.w	r3, r3, #15
 800534c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2202      	movs	r2, #2
 8005354:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	2b02      	cmp	r3, #2
 800535c:	d060      	beq.n	8005420 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d102      	bne.n	800536c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005366:	2310      	movs	r3, #16
 8005368:	617b      	str	r3, [r7, #20]
 800536a:	e001      	b.n	8005370 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800536c:	2320      	movs	r3, #32
 800536e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	2b20      	cmp	r3, #32
 8005376:	d802      	bhi.n	800537e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	005b      	lsls	r3, r3, #1
 800537c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800537e:	2001      	movs	r0, #1
 8005380:	f001 fad0 	bl	8006924 <HAL_RCCEx_GetPeriphCLKFreq>
 8005384:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800538e:	d125      	bne.n	80053dc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d010      	beq.n	80053ba <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	fbb2 f2f3 	udiv	r2, r2, r3
 80053a2:	4613      	mov	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	4413      	add	r3, r2
 80053a8:	005b      	lsls	r3, r3, #1
 80053aa:	461a      	mov	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	695b      	ldr	r3, [r3, #20]
 80053b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b4:	3305      	adds	r3, #5
 80053b6:	613b      	str	r3, [r7, #16]
 80053b8:	e01f      	b.n	80053fa <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	00db      	lsls	r3, r3, #3
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80053c4:	4613      	mov	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4413      	add	r3, r2
 80053ca:	005b      	lsls	r3, r3, #1
 80053cc:	461a      	mov	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d6:	3305      	adds	r3, #5
 80053d8:	613b      	str	r3, [r7, #16]
 80053da:	e00e      	b.n	80053fa <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80053e4:	4613      	mov	r3, r2
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	4413      	add	r3, r2
 80053ea:	005b      	lsls	r3, r3, #1
 80053ec:	461a      	mov	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	695b      	ldr	r3, [r3, #20]
 80053f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f6:	3305      	adds	r3, #5
 80053f8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	4a5c      	ldr	r2, [pc, #368]	@ (8005570 <HAL_I2S_Init+0x270>)
 80053fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005402:	08db      	lsrs	r3, r3, #3
 8005404:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	f003 0301 	and.w	r3, r3, #1
 800540c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	085b      	lsrs	r3, r3, #1
 8005416:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	021b      	lsls	r3, r3, #8
 800541c:	61bb      	str	r3, [r7, #24]
 800541e:	e003      	b.n	8005428 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005420:	2302      	movs	r3, #2
 8005422:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005424:	2300      	movs	r3, #0
 8005426:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	2b01      	cmp	r3, #1
 800542c:	d902      	bls.n	8005434 <HAL_I2S_Init+0x134>
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	2bff      	cmp	r3, #255	@ 0xff
 8005432:	d907      	bls.n	8005444 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005438:	f043 0210 	orr.w	r2, r3, #16
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e08f      	b.n	8005564 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	691a      	ldr	r2, [r3, #16]
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	ea42 0103 	orr.w	r1, r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	69fa      	ldr	r2, [r7, #28]
 8005454:	430a      	orrs	r2, r1
 8005456:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	69db      	ldr	r3, [r3, #28]
 800545e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005462:	f023 030f 	bic.w	r3, r3, #15
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	6851      	ldr	r1, [r2, #4]
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	6892      	ldr	r2, [r2, #8]
 800546e:	4311      	orrs	r1, r2
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	68d2      	ldr	r2, [r2, #12]
 8005474:	4311      	orrs	r1, r2
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	6992      	ldr	r2, [r2, #24]
 800547a:	430a      	orrs	r2, r1
 800547c:	431a      	orrs	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005486:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a1b      	ldr	r3, [r3, #32]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d161      	bne.n	8005554 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a38      	ldr	r2, [pc, #224]	@ (8005574 <HAL_I2S_Init+0x274>)
 8005494:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a37      	ldr	r2, [pc, #220]	@ (8005578 <HAL_I2S_Init+0x278>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d101      	bne.n	80054a4 <HAL_I2S_Init+0x1a4>
 80054a0:	4b36      	ldr	r3, [pc, #216]	@ (800557c <HAL_I2S_Init+0x27c>)
 80054a2:	e001      	b.n	80054a8 <HAL_I2S_Init+0x1a8>
 80054a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80054a8:	69db      	ldr	r3, [r3, #28]
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	6812      	ldr	r2, [r2, #0]
 80054ae:	4932      	ldr	r1, [pc, #200]	@ (8005578 <HAL_I2S_Init+0x278>)
 80054b0:	428a      	cmp	r2, r1
 80054b2:	d101      	bne.n	80054b8 <HAL_I2S_Init+0x1b8>
 80054b4:	4a31      	ldr	r2, [pc, #196]	@ (800557c <HAL_I2S_Init+0x27c>)
 80054b6:	e001      	b.n	80054bc <HAL_I2S_Init+0x1bc>
 80054b8:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80054bc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80054c0:	f023 030f 	bic.w	r3, r3, #15
 80054c4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a2b      	ldr	r2, [pc, #172]	@ (8005578 <HAL_I2S_Init+0x278>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d101      	bne.n	80054d4 <HAL_I2S_Init+0x1d4>
 80054d0:	4b2a      	ldr	r3, [pc, #168]	@ (800557c <HAL_I2S_Init+0x27c>)
 80054d2:	e001      	b.n	80054d8 <HAL_I2S_Init+0x1d8>
 80054d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80054d8:	2202      	movs	r2, #2
 80054da:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a25      	ldr	r2, [pc, #148]	@ (8005578 <HAL_I2S_Init+0x278>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d101      	bne.n	80054ea <HAL_I2S_Init+0x1ea>
 80054e6:	4b25      	ldr	r3, [pc, #148]	@ (800557c <HAL_I2S_Init+0x27c>)
 80054e8:	e001      	b.n	80054ee <HAL_I2S_Init+0x1ee>
 80054ea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80054ee:	69db      	ldr	r3, [r3, #28]
 80054f0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054fa:	d003      	beq.n	8005504 <HAL_I2S_Init+0x204>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d103      	bne.n	800550c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005504:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005508:	613b      	str	r3, [r7, #16]
 800550a:	e001      	b.n	8005510 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800550c:	2300      	movs	r3, #0
 800550e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800551a:	4313      	orrs	r3, r2
 800551c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005524:	4313      	orrs	r3, r2
 8005526:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800552e:	4313      	orrs	r3, r2
 8005530:	b29a      	uxth	r2, r3
 8005532:	897b      	ldrh	r3, [r7, #10]
 8005534:	4313      	orrs	r3, r2
 8005536:	b29b      	uxth	r3, r3
 8005538:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800553c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a0d      	ldr	r2, [pc, #52]	@ (8005578 <HAL_I2S_Init+0x278>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d101      	bne.n	800554c <HAL_I2S_Init+0x24c>
 8005548:	4b0c      	ldr	r3, [pc, #48]	@ (800557c <HAL_I2S_Init+0x27c>)
 800554a:	e001      	b.n	8005550 <HAL_I2S_Init+0x250>
 800554c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005550:	897a      	ldrh	r2, [r7, #10]
 8005552:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	3720      	adds	r7, #32
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	08005869 	.word	0x08005869
 8005570:	cccccccd 	.word	0xcccccccd
 8005574:	0800597d 	.word	0x0800597d
 8005578:	40003800 	.word	0x40003800
 800557c:	40003400 	.word	0x40003400

08005580 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b086      	sub	sp, #24
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	4613      	mov	r3, r2
 800558c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d002      	beq.n	800559a <HAL_I2S_Transmit_DMA+0x1a>
 8005594:	88fb      	ldrh	r3, [r7, #6]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d101      	bne.n	800559e <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e08a      	b.n	80056b4 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d001      	beq.n	80055ae <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 80055aa:	2302      	movs	r3, #2
 80055ac:	e082      	b.n	80056b4 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d101      	bne.n	80055be <HAL_I2S_Transmit_DMA+0x3e>
 80055ba:	2302      	movs	r3, #2
 80055bc:	e07a      	b.n	80056b4 <HAL_I2S_Transmit_DMA+0x134>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2203      	movs	r2, #3
 80055ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	69db      	ldr	r3, [r3, #28]
 80055e0:	f003 0307 	and.w	r3, r3, #7
 80055e4:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	2b03      	cmp	r3, #3
 80055ea:	d002      	beq.n	80055f2 <HAL_I2S_Transmit_DMA+0x72>
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	2b05      	cmp	r3, #5
 80055f0:	d10a      	bne.n	8005608 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 80055f2:	88fb      	ldrh	r3, [r7, #6]
 80055f4:	005b      	lsls	r3, r3, #1
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 80055fc:	88fb      	ldrh	r3, [r7, #6]
 80055fe:	005b      	lsls	r3, r3, #1
 8005600:	b29a      	uxth	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005606:	e005      	b.n	8005614 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	88fa      	ldrh	r2, [r7, #6]
 800560c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	88fa      	ldrh	r2, [r7, #6]
 8005612:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005618:	4a28      	ldr	r2, [pc, #160]	@ (80056bc <HAL_I2S_Transmit_DMA+0x13c>)
 800561a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005620:	4a27      	ldr	r2, [pc, #156]	@ (80056c0 <HAL_I2S_Transmit_DMA+0x140>)
 8005622:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005628:	4a26      	ldr	r2, [pc, #152]	@ (80056c4 <HAL_I2S_Transmit_DMA+0x144>)
 800562a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005634:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800563c:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005642:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005644:	f7fc ffa0 	bl	8002588 <HAL_DMA_Start_IT>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00f      	beq.n	800566e <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005652:	f043 0208 	orr.w	r2, r3, #8
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e022      	b.n	80056b4 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f003 0302 	and.w	r3, r3, #2
 8005680:	2b00      	cmp	r3, #0
 8005682:	d107      	bne.n	8005694 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	685a      	ldr	r2, [r3, #4]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f042 0202 	orr.w	r2, r2, #2
 8005692:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	69db      	ldr	r3, [r3, #28]
 800569a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d107      	bne.n	80056b2 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	69da      	ldr	r2, [r3, #28]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80056b0:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3718      	adds	r7, #24
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	08005747 	.word	0x08005747
 80056c0:	08005705 	.word	0x08005705
 80056c4:	08005763 	.word	0x08005763

080056c8 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005710:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d10e      	bne.n	8005738 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	685a      	ldr	r2, [r3, #4]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f022 0202 	bic.w	r2, r2, #2
 8005728:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	f7fb fe97 	bl	800146c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800573e:	bf00      	nop
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b084      	sub	sp, #16
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005752:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f7ff ffb7 	bl	80056c8 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800575a:	bf00      	nop
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b084      	sub	sp, #16
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800576e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	685a      	ldr	r2, [r3, #4]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f022 0203 	bic.w	r2, r2, #3
 800577e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005798:	f043 0208 	orr.w	r2, r3, #8
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f7ff ffa5 	bl	80056f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80057a6:	bf00      	nop
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b082      	sub	sp, #8
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ba:	881a      	ldrh	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c6:	1c9a      	adds	r2, r3, #2
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	3b01      	subs	r3, #1
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057de:	b29b      	uxth	r3, r3
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d10e      	bne.n	8005802 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	685a      	ldr	r2, [r3, #4]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80057f2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f7fb fe35 	bl	800146c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005802:	bf00      	nop
 8005804:	3708      	adds	r7, #8
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800580a:	b580      	push	{r7, lr}
 800580c:	b082      	sub	sp, #8
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68da      	ldr	r2, [r3, #12]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800581c:	b292      	uxth	r2, r2
 800581e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005824:	1c9a      	adds	r2, r3, #2
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800582e:	b29b      	uxth	r3, r3
 8005830:	3b01      	subs	r3, #1
 8005832:	b29a      	uxth	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800583c:	b29b      	uxth	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d10e      	bne.n	8005860 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	685a      	ldr	r2, [r3, #4]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005850:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2201      	movs	r2, #1
 8005856:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f7ff ff3e 	bl	80056dc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005860:	bf00      	nop
 8005862:	3708      	adds	r7, #8
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b086      	sub	sp, #24
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800587e:	b2db      	uxtb	r3, r3
 8005880:	2b04      	cmp	r3, #4
 8005882:	d13a      	bne.n	80058fa <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	2b01      	cmp	r3, #1
 800588c:	d109      	bne.n	80058a2 <I2S_IRQHandler+0x3a>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005898:	2b40      	cmp	r3, #64	@ 0x40
 800589a:	d102      	bne.n	80058a2 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f7ff ffb4 	bl	800580a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058a8:	2b40      	cmp	r3, #64	@ 0x40
 80058aa:	d126      	bne.n	80058fa <I2S_IRQHandler+0x92>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	f003 0320 	and.w	r3, r3, #32
 80058b6:	2b20      	cmp	r3, #32
 80058b8:	d11f      	bne.n	80058fa <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80058c8:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80058ca:	2300      	movs	r3, #0
 80058cc:	613b      	str	r3, [r7, #16]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	613b      	str	r3, [r7, #16]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	613b      	str	r3, [r7, #16]
 80058de:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ec:	f043 0202 	orr.w	r2, r3, #2
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f7ff fefb 	bl	80056f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005900:	b2db      	uxtb	r3, r3
 8005902:	2b03      	cmp	r3, #3
 8005904:	d136      	bne.n	8005974 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f003 0302 	and.w	r3, r3, #2
 800590c:	2b02      	cmp	r3, #2
 800590e:	d109      	bne.n	8005924 <I2S_IRQHandler+0xbc>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800591a:	2b80      	cmp	r3, #128	@ 0x80
 800591c:	d102      	bne.n	8005924 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f7ff ff45 	bl	80057ae <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f003 0308 	and.w	r3, r3, #8
 800592a:	2b08      	cmp	r3, #8
 800592c:	d122      	bne.n	8005974 <I2S_IRQHandler+0x10c>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	f003 0320 	and.w	r3, r3, #32
 8005938:	2b20      	cmp	r3, #32
 800593a:	d11b      	bne.n	8005974 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	685a      	ldr	r2, [r3, #4]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800594a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800594c:	2300      	movs	r3, #0
 800594e:	60fb      	str	r3, [r7, #12]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	60fb      	str	r3, [r7, #12]
 8005958:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005966:	f043 0204 	orr.w	r2, r3, #4
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f7ff febe 	bl	80056f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005974:	bf00      	nop
 8005976:	3718      	adds	r7, #24
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b088      	sub	sp, #32
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a92      	ldr	r2, [pc, #584]	@ (8005bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d101      	bne.n	800599a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005996:	4b92      	ldr	r3, [pc, #584]	@ (8005be0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005998:	e001      	b.n	800599e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800599a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a8b      	ldr	r2, [pc, #556]	@ (8005bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d101      	bne.n	80059b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80059b4:	4b8a      	ldr	r3, [pc, #552]	@ (8005be0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80059b6:	e001      	b.n	80059bc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80059b8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059c8:	d004      	beq.n	80059d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f040 8099 	bne.w	8005b06 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	f003 0302 	and.w	r3, r3, #2
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d107      	bne.n	80059ee <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d002      	beq.n	80059ee <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 f925 	bl	8005c38 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	f003 0301 	and.w	r3, r3, #1
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d107      	bne.n	8005a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d002      	beq.n	8005a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 f9c8 	bl	8005d98 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a0e:	2b40      	cmp	r3, #64	@ 0x40
 8005a10:	d13a      	bne.n	8005a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	f003 0320 	and.w	r3, r3, #32
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d035      	beq.n	8005a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a6e      	ldr	r2, [pc, #440]	@ (8005bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d101      	bne.n	8005a2a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005a26:	4b6e      	ldr	r3, [pc, #440]	@ (8005be0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a28:	e001      	b.n	8005a2e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005a2a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a2e:	685a      	ldr	r2, [r3, #4]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4969      	ldr	r1, [pc, #420]	@ (8005bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a36:	428b      	cmp	r3, r1
 8005a38:	d101      	bne.n	8005a3e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005a3a:	4b69      	ldr	r3, [pc, #420]	@ (8005be0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a3c:	e001      	b.n	8005a42 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005a3e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a42:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005a46:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	685a      	ldr	r2, [r3, #4]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005a56:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005a58:	2300      	movs	r3, #0
 8005a5a:	60fb      	str	r3, [r7, #12]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	60fb      	str	r3, [r7, #12]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	60fb      	str	r3, [r7, #12]
 8005a6c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a7a:	f043 0202 	orr.w	r2, r3, #2
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f7ff fe34 	bl	80056f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	f003 0308 	and.w	r3, r3, #8
 8005a8e:	2b08      	cmp	r3, #8
 8005a90:	f040 80c3 	bne.w	8005c1a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	f003 0320 	and.w	r3, r3, #32
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	f000 80bd 	beq.w	8005c1a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	685a      	ldr	r2, [r3, #4]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005aae:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a49      	ldr	r2, [pc, #292]	@ (8005bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d101      	bne.n	8005abe <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005aba:	4b49      	ldr	r3, [pc, #292]	@ (8005be0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005abc:	e001      	b.n	8005ac2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005abe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ac2:	685a      	ldr	r2, [r3, #4]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4944      	ldr	r1, [pc, #272]	@ (8005bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005aca:	428b      	cmp	r3, r1
 8005acc:	d101      	bne.n	8005ad2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005ace:	4b44      	ldr	r3, [pc, #272]	@ (8005be0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ad0:	e001      	b.n	8005ad6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005ad2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ad6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005ada:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005adc:	2300      	movs	r3, #0
 8005ade:	60bb      	str	r3, [r7, #8]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	60bb      	str	r3, [r7, #8]
 8005ae8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005af6:	f043 0204 	orr.w	r2, r3, #4
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f7ff fdf6 	bl	80056f0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005b04:	e089      	b.n	8005c1a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	f003 0302 	and.w	r3, r3, #2
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d107      	bne.n	8005b20 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d002      	beq.n	8005b20 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 f8be 	bl	8005c9c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	f003 0301 	and.w	r3, r3, #1
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d107      	bne.n	8005b3a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d002      	beq.n	8005b3a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 f8fd 	bl	8005d34 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b40:	2b40      	cmp	r3, #64	@ 0x40
 8005b42:	d12f      	bne.n	8005ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	f003 0320 	and.w	r3, r3, #32
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d02a      	beq.n	8005ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	685a      	ldr	r2, [r3, #4]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005b5c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a1e      	ldr	r2, [pc, #120]	@ (8005bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d101      	bne.n	8005b6c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005b68:	4b1d      	ldr	r3, [pc, #116]	@ (8005be0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005b6a:	e001      	b.n	8005b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005b6c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b70:	685a      	ldr	r2, [r3, #4]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4919      	ldr	r1, [pc, #100]	@ (8005bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005b78:	428b      	cmp	r3, r1
 8005b7a:	d101      	bne.n	8005b80 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005b7c:	4b18      	ldr	r3, [pc, #96]	@ (8005be0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005b7e:	e001      	b.n	8005b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005b80:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b84:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005b88:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b96:	f043 0202 	orr.w	r2, r3, #2
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f7ff fda6 	bl	80056f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	f003 0308 	and.w	r3, r3, #8
 8005baa:	2b08      	cmp	r3, #8
 8005bac:	d136      	bne.n	8005c1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	f003 0320 	and.w	r3, r3, #32
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d031      	beq.n	8005c1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a07      	ldr	r2, [pc, #28]	@ (8005bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d101      	bne.n	8005bc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005bc2:	4b07      	ldr	r3, [pc, #28]	@ (8005be0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005bc4:	e001      	b.n	8005bca <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005bc6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005bca:	685a      	ldr	r2, [r3, #4]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4902      	ldr	r1, [pc, #8]	@ (8005bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005bd2:	428b      	cmp	r3, r1
 8005bd4:	d106      	bne.n	8005be4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005bd6:	4b02      	ldr	r3, [pc, #8]	@ (8005be0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005bd8:	e006      	b.n	8005be8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005bda:	bf00      	nop
 8005bdc:	40003800 	.word	0x40003800
 8005be0:	40003400 	.word	0x40003400
 8005be4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005be8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005bec:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	685a      	ldr	r2, [r3, #4]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005bfc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c0a:	f043 0204 	orr.w	r2, r3, #4
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f7ff fd6c 	bl	80056f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005c18:	e000      	b.n	8005c1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005c1a:	bf00      	nop
}
 8005c1c:	bf00      	nop
 8005c1e:	3720      	adds	r7, #32
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005c2c:	bf00      	nop
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c44:	1c99      	adds	r1, r3, #2
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	6251      	str	r1, [r2, #36]	@ 0x24
 8005c4a:	881a      	ldrh	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d113      	bne.n	8005c92 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	685a      	ldr	r2, [r3, #4]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005c78:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d106      	bne.n	8005c92 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f7ff ffc9 	bl	8005c24 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005c92:	bf00      	nop
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
	...

08005c9c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca8:	1c99      	adds	r1, r3, #2
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	6251      	str	r1, [r2, #36]	@ 0x24
 8005cae:	8819      	ldrh	r1, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a1d      	ldr	r2, [pc, #116]	@ (8005d2c <I2SEx_TxISR_I2SExt+0x90>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d101      	bne.n	8005cbe <I2SEx_TxISR_I2SExt+0x22>
 8005cba:	4b1d      	ldr	r3, [pc, #116]	@ (8005d30 <I2SEx_TxISR_I2SExt+0x94>)
 8005cbc:	e001      	b.n	8005cc2 <I2SEx_TxISR_I2SExt+0x26>
 8005cbe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005cc2:	460a      	mov	r2, r1
 8005cc4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d121      	bne.n	8005d22 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a12      	ldr	r2, [pc, #72]	@ (8005d2c <I2SEx_TxISR_I2SExt+0x90>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d101      	bne.n	8005cec <I2SEx_TxISR_I2SExt+0x50>
 8005ce8:	4b11      	ldr	r3, [pc, #68]	@ (8005d30 <I2SEx_TxISR_I2SExt+0x94>)
 8005cea:	e001      	b.n	8005cf0 <I2SEx_TxISR_I2SExt+0x54>
 8005cec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005cf0:	685a      	ldr	r2, [r3, #4]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	490d      	ldr	r1, [pc, #52]	@ (8005d2c <I2SEx_TxISR_I2SExt+0x90>)
 8005cf8:	428b      	cmp	r3, r1
 8005cfa:	d101      	bne.n	8005d00 <I2SEx_TxISR_I2SExt+0x64>
 8005cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8005d30 <I2SEx_TxISR_I2SExt+0x94>)
 8005cfe:	e001      	b.n	8005d04 <I2SEx_TxISR_I2SExt+0x68>
 8005d00:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005d04:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005d08:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d106      	bne.n	8005d22 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f7ff ff81 	bl	8005c24 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005d22:	bf00      	nop
 8005d24:	3708      	adds	r7, #8
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	40003800 	.word	0x40003800
 8005d30:	40003400 	.word	0x40003400

08005d34 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	68d8      	ldr	r0, [r3, #12]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d46:	1c99      	adds	r1, r3, #2
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005d4c:	b282      	uxth	r2, r0
 8005d4e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	3b01      	subs	r3, #1
 8005d58:	b29a      	uxth	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d113      	bne.n	8005d90 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	685a      	ldr	r2, [r3, #4]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005d76:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d106      	bne.n	8005d90 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f7ff ff4a 	bl	8005c24 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005d90:	bf00      	nop
 8005d92:	3708      	adds	r7, #8
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a20      	ldr	r2, [pc, #128]	@ (8005e28 <I2SEx_RxISR_I2SExt+0x90>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d101      	bne.n	8005dae <I2SEx_RxISR_I2SExt+0x16>
 8005daa:	4b20      	ldr	r3, [pc, #128]	@ (8005e2c <I2SEx_RxISR_I2SExt+0x94>)
 8005dac:	e001      	b.n	8005db2 <I2SEx_RxISR_I2SExt+0x1a>
 8005dae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005db2:	68d8      	ldr	r0, [r3, #12]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db8:	1c99      	adds	r1, r3, #2
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005dbe:	b282      	uxth	r2, r0
 8005dc0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	b29a      	uxth	r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d121      	bne.n	8005e1e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a12      	ldr	r2, [pc, #72]	@ (8005e28 <I2SEx_RxISR_I2SExt+0x90>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d101      	bne.n	8005de8 <I2SEx_RxISR_I2SExt+0x50>
 8005de4:	4b11      	ldr	r3, [pc, #68]	@ (8005e2c <I2SEx_RxISR_I2SExt+0x94>)
 8005de6:	e001      	b.n	8005dec <I2SEx_RxISR_I2SExt+0x54>
 8005de8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	490d      	ldr	r1, [pc, #52]	@ (8005e28 <I2SEx_RxISR_I2SExt+0x90>)
 8005df4:	428b      	cmp	r3, r1
 8005df6:	d101      	bne.n	8005dfc <I2SEx_RxISR_I2SExt+0x64>
 8005df8:	4b0c      	ldr	r3, [pc, #48]	@ (8005e2c <I2SEx_RxISR_I2SExt+0x94>)
 8005dfa:	e001      	b.n	8005e00 <I2SEx_RxISR_I2SExt+0x68>
 8005dfc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e00:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005e04:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d106      	bne.n	8005e1e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f7ff ff03 	bl	8005c24 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005e1e:	bf00      	nop
 8005e20:	3708      	adds	r7, #8
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	40003800 	.word	0x40003800
 8005e2c:	40003400 	.word	0x40003400

08005e30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b086      	sub	sp, #24
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d101      	bne.n	8005e42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e267      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0301 	and.w	r3, r3, #1
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d075      	beq.n	8005f3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005e4e:	4b88      	ldr	r3, [pc, #544]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f003 030c 	and.w	r3, r3, #12
 8005e56:	2b04      	cmp	r3, #4
 8005e58:	d00c      	beq.n	8005e74 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e5a:	4b85      	ldr	r3, [pc, #532]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005e62:	2b08      	cmp	r3, #8
 8005e64:	d112      	bne.n	8005e8c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e66:	4b82      	ldr	r3, [pc, #520]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e72:	d10b      	bne.n	8005e8c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e74:	4b7e      	ldr	r3, [pc, #504]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d05b      	beq.n	8005f38 <HAL_RCC_OscConfig+0x108>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d157      	bne.n	8005f38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e242      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e94:	d106      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x74>
 8005e96:	4b76      	ldr	r3, [pc, #472]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a75      	ldr	r2, [pc, #468]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ea0:	6013      	str	r3, [r2, #0]
 8005ea2:	e01d      	b.n	8005ee0 <HAL_RCC_OscConfig+0xb0>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005eac:	d10c      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x98>
 8005eae:	4b70      	ldr	r3, [pc, #448]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a6f      	ldr	r2, [pc, #444]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005eb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005eb8:	6013      	str	r3, [r2, #0]
 8005eba:	4b6d      	ldr	r3, [pc, #436]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a6c      	ldr	r2, [pc, #432]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005ec0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ec4:	6013      	str	r3, [r2, #0]
 8005ec6:	e00b      	b.n	8005ee0 <HAL_RCC_OscConfig+0xb0>
 8005ec8:	4b69      	ldr	r3, [pc, #420]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a68      	ldr	r2, [pc, #416]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005ece:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ed2:	6013      	str	r3, [r2, #0]
 8005ed4:	4b66      	ldr	r3, [pc, #408]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a65      	ldr	r2, [pc, #404]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005eda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ede:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d013      	beq.n	8005f10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ee8:	f7fb fd84 	bl	80019f4 <HAL_GetTick>
 8005eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eee:	e008      	b.n	8005f02 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ef0:	f7fb fd80 	bl	80019f4 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	2b64      	cmp	r3, #100	@ 0x64
 8005efc:	d901      	bls.n	8005f02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e207      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f02:	4b5b      	ldr	r3, [pc, #364]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d0f0      	beq.n	8005ef0 <HAL_RCC_OscConfig+0xc0>
 8005f0e:	e014      	b.n	8005f3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f10:	f7fb fd70 	bl	80019f4 <HAL_GetTick>
 8005f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f16:	e008      	b.n	8005f2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f18:	f7fb fd6c 	bl	80019f4 <HAL_GetTick>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	2b64      	cmp	r3, #100	@ 0x64
 8005f24:	d901      	bls.n	8005f2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e1f3      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f2a:	4b51      	ldr	r3, [pc, #324]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1f0      	bne.n	8005f18 <HAL_RCC_OscConfig+0xe8>
 8005f36:	e000      	b.n	8005f3a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d063      	beq.n	800600e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005f46:	4b4a      	ldr	r3, [pc, #296]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f003 030c 	and.w	r3, r3, #12
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00b      	beq.n	8005f6a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f52:	4b47      	ldr	r3, [pc, #284]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005f5a:	2b08      	cmp	r3, #8
 8005f5c:	d11c      	bne.n	8005f98 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f5e:	4b44      	ldr	r3, [pc, #272]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d116      	bne.n	8005f98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f6a:	4b41      	ldr	r3, [pc, #260]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0302 	and.w	r3, r3, #2
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d005      	beq.n	8005f82 <HAL_RCC_OscConfig+0x152>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d001      	beq.n	8005f82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e1c7      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f82:	4b3b      	ldr	r3, [pc, #236]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	00db      	lsls	r3, r3, #3
 8005f90:	4937      	ldr	r1, [pc, #220]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f96:	e03a      	b.n	800600e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d020      	beq.n	8005fe2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005fa0:	4b34      	ldr	r3, [pc, #208]	@ (8006074 <HAL_RCC_OscConfig+0x244>)
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fa6:	f7fb fd25 	bl	80019f4 <HAL_GetTick>
 8005faa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fac:	e008      	b.n	8005fc0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fae:	f7fb fd21 	bl	80019f4 <HAL_GetTick>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	d901      	bls.n	8005fc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	e1a8      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fc0:	4b2b      	ldr	r3, [pc, #172]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0302 	and.w	r3, r3, #2
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d0f0      	beq.n	8005fae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fcc:	4b28      	ldr	r3, [pc, #160]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	00db      	lsls	r3, r3, #3
 8005fda:	4925      	ldr	r1, [pc, #148]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	600b      	str	r3, [r1, #0]
 8005fe0:	e015      	b.n	800600e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fe2:	4b24      	ldr	r3, [pc, #144]	@ (8006074 <HAL_RCC_OscConfig+0x244>)
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe8:	f7fb fd04 	bl	80019f4 <HAL_GetTick>
 8005fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fee:	e008      	b.n	8006002 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ff0:	f7fb fd00 	bl	80019f4 <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d901      	bls.n	8006002 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e187      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006002:	4b1b      	ldr	r3, [pc, #108]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0302 	and.w	r3, r3, #2
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1f0      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 0308 	and.w	r3, r3, #8
 8006016:	2b00      	cmp	r3, #0
 8006018:	d036      	beq.n	8006088 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d016      	beq.n	8006050 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006022:	4b15      	ldr	r3, [pc, #84]	@ (8006078 <HAL_RCC_OscConfig+0x248>)
 8006024:	2201      	movs	r2, #1
 8006026:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006028:	f7fb fce4 	bl	80019f4 <HAL_GetTick>
 800602c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800602e:	e008      	b.n	8006042 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006030:	f7fb fce0 	bl	80019f4 <HAL_GetTick>
 8006034:	4602      	mov	r2, r0
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	2b02      	cmp	r3, #2
 800603c:	d901      	bls.n	8006042 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e167      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006042:	4b0b      	ldr	r3, [pc, #44]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8006044:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006046:	f003 0302 	and.w	r3, r3, #2
 800604a:	2b00      	cmp	r3, #0
 800604c:	d0f0      	beq.n	8006030 <HAL_RCC_OscConfig+0x200>
 800604e:	e01b      	b.n	8006088 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006050:	4b09      	ldr	r3, [pc, #36]	@ (8006078 <HAL_RCC_OscConfig+0x248>)
 8006052:	2200      	movs	r2, #0
 8006054:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006056:	f7fb fccd 	bl	80019f4 <HAL_GetTick>
 800605a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800605c:	e00e      	b.n	800607c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800605e:	f7fb fcc9 	bl	80019f4 <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	2b02      	cmp	r3, #2
 800606a:	d907      	bls.n	800607c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e150      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
 8006070:	40023800 	.word	0x40023800
 8006074:	42470000 	.word	0x42470000
 8006078:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800607c:	4b88      	ldr	r3, [pc, #544]	@ (80062a0 <HAL_RCC_OscConfig+0x470>)
 800607e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006080:	f003 0302 	and.w	r3, r3, #2
 8006084:	2b00      	cmp	r3, #0
 8006086:	d1ea      	bne.n	800605e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 0304 	and.w	r3, r3, #4
 8006090:	2b00      	cmp	r3, #0
 8006092:	f000 8097 	beq.w	80061c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006096:	2300      	movs	r3, #0
 8006098:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800609a:	4b81      	ldr	r3, [pc, #516]	@ (80062a0 <HAL_RCC_OscConfig+0x470>)
 800609c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800609e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10f      	bne.n	80060c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060a6:	2300      	movs	r3, #0
 80060a8:	60bb      	str	r3, [r7, #8]
 80060aa:	4b7d      	ldr	r3, [pc, #500]	@ (80062a0 <HAL_RCC_OscConfig+0x470>)
 80060ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ae:	4a7c      	ldr	r2, [pc, #496]	@ (80062a0 <HAL_RCC_OscConfig+0x470>)
 80060b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80060b6:	4b7a      	ldr	r3, [pc, #488]	@ (80062a0 <HAL_RCC_OscConfig+0x470>)
 80060b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060be:	60bb      	str	r3, [r7, #8]
 80060c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060c2:	2301      	movs	r3, #1
 80060c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060c6:	4b77      	ldr	r3, [pc, #476]	@ (80062a4 <HAL_RCC_OscConfig+0x474>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d118      	bne.n	8006104 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060d2:	4b74      	ldr	r3, [pc, #464]	@ (80062a4 <HAL_RCC_OscConfig+0x474>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a73      	ldr	r2, [pc, #460]	@ (80062a4 <HAL_RCC_OscConfig+0x474>)
 80060d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060de:	f7fb fc89 	bl	80019f4 <HAL_GetTick>
 80060e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060e4:	e008      	b.n	80060f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060e6:	f7fb fc85 	bl	80019f4 <HAL_GetTick>
 80060ea:	4602      	mov	r2, r0
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	1ad3      	subs	r3, r2, r3
 80060f0:	2b02      	cmp	r3, #2
 80060f2:	d901      	bls.n	80060f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80060f4:	2303      	movs	r3, #3
 80060f6:	e10c      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060f8:	4b6a      	ldr	r3, [pc, #424]	@ (80062a4 <HAL_RCC_OscConfig+0x474>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006100:	2b00      	cmp	r3, #0
 8006102:	d0f0      	beq.n	80060e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d106      	bne.n	800611a <HAL_RCC_OscConfig+0x2ea>
 800610c:	4b64      	ldr	r3, [pc, #400]	@ (80062a0 <HAL_RCC_OscConfig+0x470>)
 800610e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006110:	4a63      	ldr	r2, [pc, #396]	@ (80062a0 <HAL_RCC_OscConfig+0x470>)
 8006112:	f043 0301 	orr.w	r3, r3, #1
 8006116:	6713      	str	r3, [r2, #112]	@ 0x70
 8006118:	e01c      	b.n	8006154 <HAL_RCC_OscConfig+0x324>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	2b05      	cmp	r3, #5
 8006120:	d10c      	bne.n	800613c <HAL_RCC_OscConfig+0x30c>
 8006122:	4b5f      	ldr	r3, [pc, #380]	@ (80062a0 <HAL_RCC_OscConfig+0x470>)
 8006124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006126:	4a5e      	ldr	r2, [pc, #376]	@ (80062a0 <HAL_RCC_OscConfig+0x470>)
 8006128:	f043 0304 	orr.w	r3, r3, #4
 800612c:	6713      	str	r3, [r2, #112]	@ 0x70
 800612e:	4b5c      	ldr	r3, [pc, #368]	@ (80062a0 <HAL_RCC_OscConfig+0x470>)
 8006130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006132:	4a5b      	ldr	r2, [pc, #364]	@ (80062a0 <HAL_RCC_OscConfig+0x470>)
 8006134:	f043 0301 	orr.w	r3, r3, #1
 8006138:	6713      	str	r3, [r2, #112]	@ 0x70
 800613a:	e00b      	b.n	8006154 <HAL_RCC_OscConfig+0x324>
 800613c:	4b58      	ldr	r3, [pc, #352]	@ (80062a0 <HAL_RCC_OscConfig+0x470>)
 800613e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006140:	4a57      	ldr	r2, [pc, #348]	@ (80062a0 <HAL_RCC_OscConfig+0x470>)
 8006142:	f023 0301 	bic.w	r3, r3, #1
 8006146:	6713      	str	r3, [r2, #112]	@ 0x70
 8006148:	4b55      	ldr	r3, [pc, #340]	@ (80062a0 <HAL_RCC_OscConfig+0x470>)
 800614a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800614c:	4a54      	ldr	r2, [pc, #336]	@ (80062a0 <HAL_RCC_OscConfig+0x470>)
 800614e:	f023 0304 	bic.w	r3, r3, #4
 8006152:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d015      	beq.n	8006188 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800615c:	f7fb fc4a 	bl	80019f4 <HAL_GetTick>
 8006160:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006162:	e00a      	b.n	800617a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006164:	f7fb fc46 	bl	80019f4 <HAL_GetTick>
 8006168:	4602      	mov	r2, r0
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006172:	4293      	cmp	r3, r2
 8006174:	d901      	bls.n	800617a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e0cb      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800617a:	4b49      	ldr	r3, [pc, #292]	@ (80062a0 <HAL_RCC_OscConfig+0x470>)
 800617c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	2b00      	cmp	r3, #0
 8006184:	d0ee      	beq.n	8006164 <HAL_RCC_OscConfig+0x334>
 8006186:	e014      	b.n	80061b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006188:	f7fb fc34 	bl	80019f4 <HAL_GetTick>
 800618c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800618e:	e00a      	b.n	80061a6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006190:	f7fb fc30 	bl	80019f4 <HAL_GetTick>
 8006194:	4602      	mov	r2, r0
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800619e:	4293      	cmp	r3, r2
 80061a0:	d901      	bls.n	80061a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e0b5      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061a6:	4b3e      	ldr	r3, [pc, #248]	@ (80062a0 <HAL_RCC_OscConfig+0x470>)
 80061a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061aa:	f003 0302 	and.w	r3, r3, #2
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1ee      	bne.n	8006190 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80061b2:	7dfb      	ldrb	r3, [r7, #23]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d105      	bne.n	80061c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061b8:	4b39      	ldr	r3, [pc, #228]	@ (80062a0 <HAL_RCC_OscConfig+0x470>)
 80061ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061bc:	4a38      	ldr	r2, [pc, #224]	@ (80062a0 <HAL_RCC_OscConfig+0x470>)
 80061be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80061c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	699b      	ldr	r3, [r3, #24]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f000 80a1 	beq.w	8006310 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80061ce:	4b34      	ldr	r3, [pc, #208]	@ (80062a0 <HAL_RCC_OscConfig+0x470>)
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f003 030c 	and.w	r3, r3, #12
 80061d6:	2b08      	cmp	r3, #8
 80061d8:	d05c      	beq.n	8006294 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d141      	bne.n	8006266 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061e2:	4b31      	ldr	r3, [pc, #196]	@ (80062a8 <HAL_RCC_OscConfig+0x478>)
 80061e4:	2200      	movs	r2, #0
 80061e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061e8:	f7fb fc04 	bl	80019f4 <HAL_GetTick>
 80061ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061ee:	e008      	b.n	8006202 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061f0:	f7fb fc00 	bl	80019f4 <HAL_GetTick>
 80061f4:	4602      	mov	r2, r0
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d901      	bls.n	8006202 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80061fe:	2303      	movs	r3, #3
 8006200:	e087      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006202:	4b27      	ldr	r3, [pc, #156]	@ (80062a0 <HAL_RCC_OscConfig+0x470>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1f0      	bne.n	80061f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	69da      	ldr	r2, [r3, #28]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a1b      	ldr	r3, [r3, #32]
 8006216:	431a      	orrs	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800621c:	019b      	lsls	r3, r3, #6
 800621e:	431a      	orrs	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006224:	085b      	lsrs	r3, r3, #1
 8006226:	3b01      	subs	r3, #1
 8006228:	041b      	lsls	r3, r3, #16
 800622a:	431a      	orrs	r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006230:	061b      	lsls	r3, r3, #24
 8006232:	491b      	ldr	r1, [pc, #108]	@ (80062a0 <HAL_RCC_OscConfig+0x470>)
 8006234:	4313      	orrs	r3, r2
 8006236:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006238:	4b1b      	ldr	r3, [pc, #108]	@ (80062a8 <HAL_RCC_OscConfig+0x478>)
 800623a:	2201      	movs	r2, #1
 800623c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800623e:	f7fb fbd9 	bl	80019f4 <HAL_GetTick>
 8006242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006244:	e008      	b.n	8006258 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006246:	f7fb fbd5 	bl	80019f4 <HAL_GetTick>
 800624a:	4602      	mov	r2, r0
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	1ad3      	subs	r3, r2, r3
 8006250:	2b02      	cmp	r3, #2
 8006252:	d901      	bls.n	8006258 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e05c      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006258:	4b11      	ldr	r3, [pc, #68]	@ (80062a0 <HAL_RCC_OscConfig+0x470>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006260:	2b00      	cmp	r3, #0
 8006262:	d0f0      	beq.n	8006246 <HAL_RCC_OscConfig+0x416>
 8006264:	e054      	b.n	8006310 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006266:	4b10      	ldr	r3, [pc, #64]	@ (80062a8 <HAL_RCC_OscConfig+0x478>)
 8006268:	2200      	movs	r2, #0
 800626a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800626c:	f7fb fbc2 	bl	80019f4 <HAL_GetTick>
 8006270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006272:	e008      	b.n	8006286 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006274:	f7fb fbbe 	bl	80019f4 <HAL_GetTick>
 8006278:	4602      	mov	r2, r0
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	2b02      	cmp	r3, #2
 8006280:	d901      	bls.n	8006286 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e045      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006286:	4b06      	ldr	r3, [pc, #24]	@ (80062a0 <HAL_RCC_OscConfig+0x470>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1f0      	bne.n	8006274 <HAL_RCC_OscConfig+0x444>
 8006292:	e03d      	b.n	8006310 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	699b      	ldr	r3, [r3, #24]
 8006298:	2b01      	cmp	r3, #1
 800629a:	d107      	bne.n	80062ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	e038      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
 80062a0:	40023800 	.word	0x40023800
 80062a4:	40007000 	.word	0x40007000
 80062a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80062ac:	4b1b      	ldr	r3, [pc, #108]	@ (800631c <HAL_RCC_OscConfig+0x4ec>)
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d028      	beq.n	800630c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d121      	bne.n	800630c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d11a      	bne.n	800630c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80062dc:	4013      	ands	r3, r2
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80062e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d111      	bne.n	800630c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062f2:	085b      	lsrs	r3, r3, #1
 80062f4:	3b01      	subs	r3, #1
 80062f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d107      	bne.n	800630c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006306:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006308:	429a      	cmp	r2, r3
 800630a:	d001      	beq.n	8006310 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e000      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3718      	adds	r7, #24
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	40023800 	.word	0x40023800

08006320 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d101      	bne.n	8006334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e0cc      	b.n	80064ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006334:	4b68      	ldr	r3, [pc, #416]	@ (80064d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0307 	and.w	r3, r3, #7
 800633c:	683a      	ldr	r2, [r7, #0]
 800633e:	429a      	cmp	r2, r3
 8006340:	d90c      	bls.n	800635c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006342:	4b65      	ldr	r3, [pc, #404]	@ (80064d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006344:	683a      	ldr	r2, [r7, #0]
 8006346:	b2d2      	uxtb	r2, r2
 8006348:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800634a:	4b63      	ldr	r3, [pc, #396]	@ (80064d8 <HAL_RCC_ClockConfig+0x1b8>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0307 	and.w	r3, r3, #7
 8006352:	683a      	ldr	r2, [r7, #0]
 8006354:	429a      	cmp	r2, r3
 8006356:	d001      	beq.n	800635c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e0b8      	b.n	80064ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0302 	and.w	r3, r3, #2
 8006364:	2b00      	cmp	r3, #0
 8006366:	d020      	beq.n	80063aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0304 	and.w	r3, r3, #4
 8006370:	2b00      	cmp	r3, #0
 8006372:	d005      	beq.n	8006380 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006374:	4b59      	ldr	r3, [pc, #356]	@ (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	4a58      	ldr	r2, [pc, #352]	@ (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 800637a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800637e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 0308 	and.w	r3, r3, #8
 8006388:	2b00      	cmp	r3, #0
 800638a:	d005      	beq.n	8006398 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800638c:	4b53      	ldr	r3, [pc, #332]	@ (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	4a52      	ldr	r2, [pc, #328]	@ (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 8006392:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006396:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006398:	4b50      	ldr	r3, [pc, #320]	@ (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	494d      	ldr	r1, [pc, #308]	@ (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 80063a6:	4313      	orrs	r3, r2
 80063a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 0301 	and.w	r3, r3, #1
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d044      	beq.n	8006440 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d107      	bne.n	80063ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063be:	4b47      	ldr	r3, [pc, #284]	@ (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d119      	bne.n	80063fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e07f      	b.n	80064ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d003      	beq.n	80063de <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063da:	2b03      	cmp	r3, #3
 80063dc:	d107      	bne.n	80063ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063de:	4b3f      	ldr	r3, [pc, #252]	@ (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d109      	bne.n	80063fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e06f      	b.n	80064ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063ee:	4b3b      	ldr	r3, [pc, #236]	@ (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0302 	and.w	r3, r3, #2
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d101      	bne.n	80063fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e067      	b.n	80064ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063fe:	4b37      	ldr	r3, [pc, #220]	@ (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f023 0203 	bic.w	r2, r3, #3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	4934      	ldr	r1, [pc, #208]	@ (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 800640c:	4313      	orrs	r3, r2
 800640e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006410:	f7fb faf0 	bl	80019f4 <HAL_GetTick>
 8006414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006416:	e00a      	b.n	800642e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006418:	f7fb faec 	bl	80019f4 <HAL_GetTick>
 800641c:	4602      	mov	r2, r0
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006426:	4293      	cmp	r3, r2
 8006428:	d901      	bls.n	800642e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e04f      	b.n	80064ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800642e:	4b2b      	ldr	r3, [pc, #172]	@ (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	f003 020c 	and.w	r2, r3, #12
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	429a      	cmp	r2, r3
 800643e:	d1eb      	bne.n	8006418 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006440:	4b25      	ldr	r3, [pc, #148]	@ (80064d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0307 	and.w	r3, r3, #7
 8006448:	683a      	ldr	r2, [r7, #0]
 800644a:	429a      	cmp	r2, r3
 800644c:	d20c      	bcs.n	8006468 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800644e:	4b22      	ldr	r3, [pc, #136]	@ (80064d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006450:	683a      	ldr	r2, [r7, #0]
 8006452:	b2d2      	uxtb	r2, r2
 8006454:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006456:	4b20      	ldr	r3, [pc, #128]	@ (80064d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0307 	and.w	r3, r3, #7
 800645e:	683a      	ldr	r2, [r7, #0]
 8006460:	429a      	cmp	r2, r3
 8006462:	d001      	beq.n	8006468 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e032      	b.n	80064ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 0304 	and.w	r3, r3, #4
 8006470:	2b00      	cmp	r3, #0
 8006472:	d008      	beq.n	8006486 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006474:	4b19      	ldr	r3, [pc, #100]	@ (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	4916      	ldr	r1, [pc, #88]	@ (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 8006482:	4313      	orrs	r3, r2
 8006484:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 0308 	and.w	r3, r3, #8
 800648e:	2b00      	cmp	r3, #0
 8006490:	d009      	beq.n	80064a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006492:	4b12      	ldr	r3, [pc, #72]	@ (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	00db      	lsls	r3, r3, #3
 80064a0:	490e      	ldr	r1, [pc, #56]	@ (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 80064a2:	4313      	orrs	r3, r2
 80064a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80064a6:	f000 f821 	bl	80064ec <HAL_RCC_GetSysClockFreq>
 80064aa:	4602      	mov	r2, r0
 80064ac:	4b0b      	ldr	r3, [pc, #44]	@ (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	091b      	lsrs	r3, r3, #4
 80064b2:	f003 030f 	and.w	r3, r3, #15
 80064b6:	490a      	ldr	r1, [pc, #40]	@ (80064e0 <HAL_RCC_ClockConfig+0x1c0>)
 80064b8:	5ccb      	ldrb	r3, [r1, r3]
 80064ba:	fa22 f303 	lsr.w	r3, r2, r3
 80064be:	4a09      	ldr	r2, [pc, #36]	@ (80064e4 <HAL_RCC_ClockConfig+0x1c4>)
 80064c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80064c2:	4b09      	ldr	r3, [pc, #36]	@ (80064e8 <HAL_RCC_ClockConfig+0x1c8>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7fb fa50 	bl	800196c <HAL_InitTick>

  return HAL_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	40023c00 	.word	0x40023c00
 80064dc:	40023800 	.word	0x40023800
 80064e0:	080090dc 	.word	0x080090dc
 80064e4:	20000010 	.word	0x20000010
 80064e8:	20000014 	.word	0x20000014

080064ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064f0:	b094      	sub	sp, #80	@ 0x50
 80064f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80064f4:	2300      	movs	r3, #0
 80064f6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80064f8:	2300      	movs	r3, #0
 80064fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80064fc:	2300      	movs	r3, #0
 80064fe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006500:	2300      	movs	r3, #0
 8006502:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006504:	4b79      	ldr	r3, [pc, #484]	@ (80066ec <HAL_RCC_GetSysClockFreq+0x200>)
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	f003 030c 	and.w	r3, r3, #12
 800650c:	2b08      	cmp	r3, #8
 800650e:	d00d      	beq.n	800652c <HAL_RCC_GetSysClockFreq+0x40>
 8006510:	2b08      	cmp	r3, #8
 8006512:	f200 80e1 	bhi.w	80066d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006516:	2b00      	cmp	r3, #0
 8006518:	d002      	beq.n	8006520 <HAL_RCC_GetSysClockFreq+0x34>
 800651a:	2b04      	cmp	r3, #4
 800651c:	d003      	beq.n	8006526 <HAL_RCC_GetSysClockFreq+0x3a>
 800651e:	e0db      	b.n	80066d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006520:	4b73      	ldr	r3, [pc, #460]	@ (80066f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006522:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006524:	e0db      	b.n	80066de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006526:	4b73      	ldr	r3, [pc, #460]	@ (80066f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8006528:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800652a:	e0d8      	b.n	80066de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800652c:	4b6f      	ldr	r3, [pc, #444]	@ (80066ec <HAL_RCC_GetSysClockFreq+0x200>)
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006534:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006536:	4b6d      	ldr	r3, [pc, #436]	@ (80066ec <HAL_RCC_GetSysClockFreq+0x200>)
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d063      	beq.n	800660a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006542:	4b6a      	ldr	r3, [pc, #424]	@ (80066ec <HAL_RCC_GetSysClockFreq+0x200>)
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	099b      	lsrs	r3, r3, #6
 8006548:	2200      	movs	r2, #0
 800654a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800654c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800654e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006554:	633b      	str	r3, [r7, #48]	@ 0x30
 8006556:	2300      	movs	r3, #0
 8006558:	637b      	str	r3, [r7, #52]	@ 0x34
 800655a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800655e:	4622      	mov	r2, r4
 8006560:	462b      	mov	r3, r5
 8006562:	f04f 0000 	mov.w	r0, #0
 8006566:	f04f 0100 	mov.w	r1, #0
 800656a:	0159      	lsls	r1, r3, #5
 800656c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006570:	0150      	lsls	r0, r2, #5
 8006572:	4602      	mov	r2, r0
 8006574:	460b      	mov	r3, r1
 8006576:	4621      	mov	r1, r4
 8006578:	1a51      	subs	r1, r2, r1
 800657a:	6139      	str	r1, [r7, #16]
 800657c:	4629      	mov	r1, r5
 800657e:	eb63 0301 	sbc.w	r3, r3, r1
 8006582:	617b      	str	r3, [r7, #20]
 8006584:	f04f 0200 	mov.w	r2, #0
 8006588:	f04f 0300 	mov.w	r3, #0
 800658c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006590:	4659      	mov	r1, fp
 8006592:	018b      	lsls	r3, r1, #6
 8006594:	4651      	mov	r1, sl
 8006596:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800659a:	4651      	mov	r1, sl
 800659c:	018a      	lsls	r2, r1, #6
 800659e:	4651      	mov	r1, sl
 80065a0:	ebb2 0801 	subs.w	r8, r2, r1
 80065a4:	4659      	mov	r1, fp
 80065a6:	eb63 0901 	sbc.w	r9, r3, r1
 80065aa:	f04f 0200 	mov.w	r2, #0
 80065ae:	f04f 0300 	mov.w	r3, #0
 80065b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065be:	4690      	mov	r8, r2
 80065c0:	4699      	mov	r9, r3
 80065c2:	4623      	mov	r3, r4
 80065c4:	eb18 0303 	adds.w	r3, r8, r3
 80065c8:	60bb      	str	r3, [r7, #8]
 80065ca:	462b      	mov	r3, r5
 80065cc:	eb49 0303 	adc.w	r3, r9, r3
 80065d0:	60fb      	str	r3, [r7, #12]
 80065d2:	f04f 0200 	mov.w	r2, #0
 80065d6:	f04f 0300 	mov.w	r3, #0
 80065da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80065de:	4629      	mov	r1, r5
 80065e0:	024b      	lsls	r3, r1, #9
 80065e2:	4621      	mov	r1, r4
 80065e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80065e8:	4621      	mov	r1, r4
 80065ea:	024a      	lsls	r2, r1, #9
 80065ec:	4610      	mov	r0, r2
 80065ee:	4619      	mov	r1, r3
 80065f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065f2:	2200      	movs	r2, #0
 80065f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80065f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80065fc:	f7f9 fe44 	bl	8000288 <__aeabi_uldivmod>
 8006600:	4602      	mov	r2, r0
 8006602:	460b      	mov	r3, r1
 8006604:	4613      	mov	r3, r2
 8006606:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006608:	e058      	b.n	80066bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800660a:	4b38      	ldr	r3, [pc, #224]	@ (80066ec <HAL_RCC_GetSysClockFreq+0x200>)
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	099b      	lsrs	r3, r3, #6
 8006610:	2200      	movs	r2, #0
 8006612:	4618      	mov	r0, r3
 8006614:	4611      	mov	r1, r2
 8006616:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800661a:	623b      	str	r3, [r7, #32]
 800661c:	2300      	movs	r3, #0
 800661e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006620:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006624:	4642      	mov	r2, r8
 8006626:	464b      	mov	r3, r9
 8006628:	f04f 0000 	mov.w	r0, #0
 800662c:	f04f 0100 	mov.w	r1, #0
 8006630:	0159      	lsls	r1, r3, #5
 8006632:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006636:	0150      	lsls	r0, r2, #5
 8006638:	4602      	mov	r2, r0
 800663a:	460b      	mov	r3, r1
 800663c:	4641      	mov	r1, r8
 800663e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006642:	4649      	mov	r1, r9
 8006644:	eb63 0b01 	sbc.w	fp, r3, r1
 8006648:	f04f 0200 	mov.w	r2, #0
 800664c:	f04f 0300 	mov.w	r3, #0
 8006650:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006654:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006658:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800665c:	ebb2 040a 	subs.w	r4, r2, sl
 8006660:	eb63 050b 	sbc.w	r5, r3, fp
 8006664:	f04f 0200 	mov.w	r2, #0
 8006668:	f04f 0300 	mov.w	r3, #0
 800666c:	00eb      	lsls	r3, r5, #3
 800666e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006672:	00e2      	lsls	r2, r4, #3
 8006674:	4614      	mov	r4, r2
 8006676:	461d      	mov	r5, r3
 8006678:	4643      	mov	r3, r8
 800667a:	18e3      	adds	r3, r4, r3
 800667c:	603b      	str	r3, [r7, #0]
 800667e:	464b      	mov	r3, r9
 8006680:	eb45 0303 	adc.w	r3, r5, r3
 8006684:	607b      	str	r3, [r7, #4]
 8006686:	f04f 0200 	mov.w	r2, #0
 800668a:	f04f 0300 	mov.w	r3, #0
 800668e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006692:	4629      	mov	r1, r5
 8006694:	028b      	lsls	r3, r1, #10
 8006696:	4621      	mov	r1, r4
 8006698:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800669c:	4621      	mov	r1, r4
 800669e:	028a      	lsls	r2, r1, #10
 80066a0:	4610      	mov	r0, r2
 80066a2:	4619      	mov	r1, r3
 80066a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066a6:	2200      	movs	r2, #0
 80066a8:	61bb      	str	r3, [r7, #24]
 80066aa:	61fa      	str	r2, [r7, #28]
 80066ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066b0:	f7f9 fdea 	bl	8000288 <__aeabi_uldivmod>
 80066b4:	4602      	mov	r2, r0
 80066b6:	460b      	mov	r3, r1
 80066b8:	4613      	mov	r3, r2
 80066ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80066bc:	4b0b      	ldr	r3, [pc, #44]	@ (80066ec <HAL_RCC_GetSysClockFreq+0x200>)
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	0c1b      	lsrs	r3, r3, #16
 80066c2:	f003 0303 	and.w	r3, r3, #3
 80066c6:	3301      	adds	r3, #1
 80066c8:	005b      	lsls	r3, r3, #1
 80066ca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80066cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80066ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80066d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80066d6:	e002      	b.n	80066de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80066d8:	4b05      	ldr	r3, [pc, #20]	@ (80066f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80066da:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80066dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80066de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3750      	adds	r7, #80	@ 0x50
 80066e4:	46bd      	mov	sp, r7
 80066e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066ea:	bf00      	nop
 80066ec:	40023800 	.word	0x40023800
 80066f0:	00f42400 	.word	0x00f42400
 80066f4:	007a1200 	.word	0x007a1200

080066f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066f8:	b480      	push	{r7}
 80066fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066fc:	4b03      	ldr	r3, [pc, #12]	@ (800670c <HAL_RCC_GetHCLKFreq+0x14>)
 80066fe:	681b      	ldr	r3, [r3, #0]
}
 8006700:	4618      	mov	r0, r3
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	20000010 	.word	0x20000010

08006710 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006714:	f7ff fff0 	bl	80066f8 <HAL_RCC_GetHCLKFreq>
 8006718:	4602      	mov	r2, r0
 800671a:	4b05      	ldr	r3, [pc, #20]	@ (8006730 <HAL_RCC_GetPCLK1Freq+0x20>)
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	0a9b      	lsrs	r3, r3, #10
 8006720:	f003 0307 	and.w	r3, r3, #7
 8006724:	4903      	ldr	r1, [pc, #12]	@ (8006734 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006726:	5ccb      	ldrb	r3, [r1, r3]
 8006728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800672c:	4618      	mov	r0, r3
 800672e:	bd80      	pop	{r7, pc}
 8006730:	40023800 	.word	0x40023800
 8006734:	080090ec 	.word	0x080090ec

08006738 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800673c:	f7ff ffdc 	bl	80066f8 <HAL_RCC_GetHCLKFreq>
 8006740:	4602      	mov	r2, r0
 8006742:	4b05      	ldr	r3, [pc, #20]	@ (8006758 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	0b5b      	lsrs	r3, r3, #13
 8006748:	f003 0307 	and.w	r3, r3, #7
 800674c:	4903      	ldr	r1, [pc, #12]	@ (800675c <HAL_RCC_GetPCLK2Freq+0x24>)
 800674e:	5ccb      	ldrb	r3, [r1, r3]
 8006750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006754:	4618      	mov	r0, r3
 8006756:	bd80      	pop	{r7, pc}
 8006758:	40023800 	.word	0x40023800
 800675c:	080090ec 	.word	0x080090ec

08006760 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b086      	sub	sp, #24
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006768:	2300      	movs	r3, #0
 800676a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800676c:	2300      	movs	r3, #0
 800676e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 0301 	and.w	r3, r3, #1
 8006778:	2b00      	cmp	r3, #0
 800677a:	d105      	bne.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006784:	2b00      	cmp	r3, #0
 8006786:	d035      	beq.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006788:	4b62      	ldr	r3, [pc, #392]	@ (8006914 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800678a:	2200      	movs	r2, #0
 800678c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800678e:	f7fb f931 	bl	80019f4 <HAL_GetTick>
 8006792:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006794:	e008      	b.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006796:	f7fb f92d 	bl	80019f4 <HAL_GetTick>
 800679a:	4602      	mov	r2, r0
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d901      	bls.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	e0b0      	b.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80067a8:	4b5b      	ldr	r3, [pc, #364]	@ (8006918 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d1f0      	bne.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	019a      	lsls	r2, r3, #6
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	071b      	lsls	r3, r3, #28
 80067c0:	4955      	ldr	r1, [pc, #340]	@ (8006918 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067c2:	4313      	orrs	r3, r2
 80067c4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80067c8:	4b52      	ldr	r3, [pc, #328]	@ (8006914 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80067ca:	2201      	movs	r2, #1
 80067cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80067ce:	f7fb f911 	bl	80019f4 <HAL_GetTick>
 80067d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80067d4:	e008      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80067d6:	f7fb f90d 	bl	80019f4 <HAL_GetTick>
 80067da:	4602      	mov	r2, r0
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	d901      	bls.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e090      	b.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80067e8:	4b4b      	ldr	r3, [pc, #300]	@ (8006918 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d0f0      	beq.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 0302 	and.w	r3, r3, #2
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f000 8083 	beq.w	8006908 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006802:	2300      	movs	r3, #0
 8006804:	60fb      	str	r3, [r7, #12]
 8006806:	4b44      	ldr	r3, [pc, #272]	@ (8006918 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800680a:	4a43      	ldr	r2, [pc, #268]	@ (8006918 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800680c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006810:	6413      	str	r3, [r2, #64]	@ 0x40
 8006812:	4b41      	ldr	r3, [pc, #260]	@ (8006918 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006816:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800681a:	60fb      	str	r3, [r7, #12]
 800681c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800681e:	4b3f      	ldr	r3, [pc, #252]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a3e      	ldr	r2, [pc, #248]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006824:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006828:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800682a:	f7fb f8e3 	bl	80019f4 <HAL_GetTick>
 800682e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006830:	e008      	b.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006832:	f7fb f8df 	bl	80019f4 <HAL_GetTick>
 8006836:	4602      	mov	r2, r0
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	2b02      	cmp	r3, #2
 800683e:	d901      	bls.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006840:	2303      	movs	r3, #3
 8006842:	e062      	b.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006844:	4b35      	ldr	r3, [pc, #212]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800684c:	2b00      	cmp	r3, #0
 800684e:	d0f0      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006850:	4b31      	ldr	r3, [pc, #196]	@ (8006918 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006852:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006854:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006858:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d02f      	beq.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	429a      	cmp	r2, r3
 800686c:	d028      	beq.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800686e:	4b2a      	ldr	r3, [pc, #168]	@ (8006918 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006872:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006876:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006878:	4b29      	ldr	r3, [pc, #164]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800687a:	2201      	movs	r2, #1
 800687c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800687e:	4b28      	ldr	r3, [pc, #160]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006880:	2200      	movs	r2, #0
 8006882:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006884:	4a24      	ldr	r2, [pc, #144]	@ (8006918 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800688a:	4b23      	ldr	r3, [pc, #140]	@ (8006918 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800688c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800688e:	f003 0301 	and.w	r3, r3, #1
 8006892:	2b01      	cmp	r3, #1
 8006894:	d114      	bne.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006896:	f7fb f8ad 	bl	80019f4 <HAL_GetTick>
 800689a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800689c:	e00a      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800689e:	f7fb f8a9 	bl	80019f4 <HAL_GetTick>
 80068a2:	4602      	mov	r2, r0
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d901      	bls.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80068b0:	2303      	movs	r3, #3
 80068b2:	e02a      	b.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068b4:	4b18      	ldr	r3, [pc, #96]	@ (8006918 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068b8:	f003 0302 	and.w	r3, r3, #2
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d0ee      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068cc:	d10d      	bne.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80068ce:	4b12      	ldr	r3, [pc, #72]	@ (8006918 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80068de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068e2:	490d      	ldr	r1, [pc, #52]	@ (8006918 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068e4:	4313      	orrs	r3, r2
 80068e6:	608b      	str	r3, [r1, #8]
 80068e8:	e005      	b.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80068ea:	4b0b      	ldr	r3, [pc, #44]	@ (8006918 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	4a0a      	ldr	r2, [pc, #40]	@ (8006918 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068f0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80068f4:	6093      	str	r3, [r2, #8]
 80068f6:	4b08      	ldr	r3, [pc, #32]	@ (8006918 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068f8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006902:	4905      	ldr	r1, [pc, #20]	@ (8006918 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006904:	4313      	orrs	r3, r2
 8006906:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3718      	adds	r7, #24
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	42470068 	.word	0x42470068
 8006918:	40023800 	.word	0x40023800
 800691c:	40007000 	.word	0x40007000
 8006920:	42470e40 	.word	0x42470e40

08006924 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006924:	b480      	push	{r7}
 8006926:	b087      	sub	sp, #28
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800692c:	2300      	movs	r3, #0
 800692e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006930:	2300      	movs	r3, #0
 8006932:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006934:	2300      	movs	r3, #0
 8006936:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006938:	2300      	movs	r3, #0
 800693a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2b01      	cmp	r3, #1
 8006940:	d13f      	bne.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006942:	4b24      	ldr	r3, [pc, #144]	@ (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800694a:	60fb      	str	r3, [r7, #12]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d006      	beq.n	8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006958:	d12f      	bne.n	80069ba <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800695a:	4b1f      	ldr	r3, [pc, #124]	@ (80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800695c:	617b      	str	r3, [r7, #20]
          break;
 800695e:	e02f      	b.n	80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006960:	4b1c      	ldr	r3, [pc, #112]	@ (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006968:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800696c:	d108      	bne.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800696e:	4b19      	ldr	r3, [pc, #100]	@ (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006976:	4a19      	ldr	r2, [pc, #100]	@ (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006978:	fbb2 f3f3 	udiv	r3, r2, r3
 800697c:	613b      	str	r3, [r7, #16]
 800697e:	e007      	b.n	8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006980:	4b14      	ldr	r3, [pc, #80]	@ (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006988:	4a15      	ldr	r2, [pc, #84]	@ (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800698a:	fbb2 f3f3 	udiv	r3, r2, r3
 800698e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006990:	4b10      	ldr	r3, [pc, #64]	@ (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006992:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006996:	099b      	lsrs	r3, r3, #6
 8006998:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	fb02 f303 	mul.w	r3, r2, r3
 80069a2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80069a4:	4b0b      	ldr	r3, [pc, #44]	@ (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80069a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069aa:	0f1b      	lsrs	r3, r3, #28
 80069ac:	f003 0307 	and.w	r3, r3, #7
 80069b0:	68ba      	ldr	r2, [r7, #8]
 80069b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80069b6:	617b      	str	r3, [r7, #20]
          break;
 80069b8:	e002      	b.n	80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80069ba:	2300      	movs	r3, #0
 80069bc:	617b      	str	r3, [r7, #20]
          break;
 80069be:	bf00      	nop
        }
      }
      break;
 80069c0:	e000      	b.n	80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 80069c2:	bf00      	nop
    }
  }
  return frequency;
 80069c4:	697b      	ldr	r3, [r7, #20]
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	371c      	adds	r7, #28
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	40023800 	.word	0x40023800
 80069d8:	00bb8000 	.word	0x00bb8000
 80069dc:	007a1200 	.word	0x007a1200
 80069e0:	00f42400 	.word	0x00f42400

080069e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d101      	bne.n	80069f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e07b      	b.n	8006aee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d108      	bne.n	8006a10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a06:	d009      	beq.n	8006a1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	61da      	str	r2, [r3, #28]
 8006a0e:	e005      	b.n	8006a1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d106      	bne.n	8006a3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f7fa fd5e 	bl	80014f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2202      	movs	r2, #2
 8006a40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a52:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006a64:	431a      	orrs	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a6e:	431a      	orrs	r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	f003 0302 	and.w	r3, r3, #2
 8006a78:	431a      	orrs	r2, r3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	695b      	ldr	r3, [r3, #20]
 8006a7e:	f003 0301 	and.w	r3, r3, #1
 8006a82:	431a      	orrs	r2, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a8c:	431a      	orrs	r2, r3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	69db      	ldr	r3, [r3, #28]
 8006a92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a96:	431a      	orrs	r2, r3
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6a1b      	ldr	r3, [r3, #32]
 8006a9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006aa0:	ea42 0103 	orr.w	r1, r2, r3
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aa8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	430a      	orrs	r2, r1
 8006ab2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	699b      	ldr	r3, [r3, #24]
 8006ab8:	0c1b      	lsrs	r3, r3, #16
 8006aba:	f003 0104 	and.w	r1, r3, #4
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ac2:	f003 0210 	and.w	r2, r3, #16
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	430a      	orrs	r2, r1
 8006acc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	69da      	ldr	r2, [r3, #28]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006adc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3708      	adds	r7, #8
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b082      	sub	sp, #8
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d101      	bne.n	8006b08 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	e041      	b.n	8006b8c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d106      	bne.n	8006b22 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f7fa fe11 	bl	8001744 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2202      	movs	r2, #2
 8006b26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	3304      	adds	r3, #4
 8006b32:	4619      	mov	r1, r3
 8006b34:	4610      	mov	r0, r2
 8006b36:	f000 f95d 	bl	8006df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2201      	movs	r2, #1
 8006b46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2201      	movs	r2, #1
 8006b56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2201      	movs	r2, #1
 8006b66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2201      	movs	r2, #1
 8006b76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2201      	movs	r2, #1
 8006b86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3708      	adds	r7, #8
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b085      	sub	sp, #20
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d001      	beq.n	8006bac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e046      	b.n	8006c3a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2202      	movs	r2, #2
 8006bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a23      	ldr	r2, [pc, #140]	@ (8006c48 <HAL_TIM_Base_Start+0xb4>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d022      	beq.n	8006c04 <HAL_TIM_Base_Start+0x70>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bc6:	d01d      	beq.n	8006c04 <HAL_TIM_Base_Start+0x70>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a1f      	ldr	r2, [pc, #124]	@ (8006c4c <HAL_TIM_Base_Start+0xb8>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d018      	beq.n	8006c04 <HAL_TIM_Base_Start+0x70>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a1e      	ldr	r2, [pc, #120]	@ (8006c50 <HAL_TIM_Base_Start+0xbc>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d013      	beq.n	8006c04 <HAL_TIM_Base_Start+0x70>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a1c      	ldr	r2, [pc, #112]	@ (8006c54 <HAL_TIM_Base_Start+0xc0>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d00e      	beq.n	8006c04 <HAL_TIM_Base_Start+0x70>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a1b      	ldr	r2, [pc, #108]	@ (8006c58 <HAL_TIM_Base_Start+0xc4>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d009      	beq.n	8006c04 <HAL_TIM_Base_Start+0x70>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a19      	ldr	r2, [pc, #100]	@ (8006c5c <HAL_TIM_Base_Start+0xc8>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d004      	beq.n	8006c04 <HAL_TIM_Base_Start+0x70>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a18      	ldr	r2, [pc, #96]	@ (8006c60 <HAL_TIM_Base_Start+0xcc>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d111      	bne.n	8006c28 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	f003 0307 	and.w	r3, r3, #7
 8006c0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2b06      	cmp	r3, #6
 8006c14:	d010      	beq.n	8006c38 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f042 0201 	orr.w	r2, r2, #1
 8006c24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c26:	e007      	b.n	8006c38 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f042 0201 	orr.w	r2, r2, #1
 8006c36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3714      	adds	r7, #20
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr
 8006c46:	bf00      	nop
 8006c48:	40010000 	.word	0x40010000
 8006c4c:	40000400 	.word	0x40000400
 8006c50:	40000800 	.word	0x40000800
 8006c54:	40000c00 	.word	0x40000c00
 8006c58:	40010400 	.word	0x40010400
 8006c5c:	40014000 	.word	0x40014000
 8006c60:	40001800 	.word	0x40001800

08006c64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d101      	bne.n	8006c80 <HAL_TIM_ConfigClockSource+0x1c>
 8006c7c:	2302      	movs	r3, #2
 8006c7e:	e0b4      	b.n	8006dea <HAL_TIM_ConfigClockSource+0x186>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2202      	movs	r2, #2
 8006c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006c9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ca6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cb8:	d03e      	beq.n	8006d38 <HAL_TIM_ConfigClockSource+0xd4>
 8006cba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cbe:	f200 8087 	bhi.w	8006dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006cc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cc6:	f000 8086 	beq.w	8006dd6 <HAL_TIM_ConfigClockSource+0x172>
 8006cca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cce:	d87f      	bhi.n	8006dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006cd0:	2b70      	cmp	r3, #112	@ 0x70
 8006cd2:	d01a      	beq.n	8006d0a <HAL_TIM_ConfigClockSource+0xa6>
 8006cd4:	2b70      	cmp	r3, #112	@ 0x70
 8006cd6:	d87b      	bhi.n	8006dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006cd8:	2b60      	cmp	r3, #96	@ 0x60
 8006cda:	d050      	beq.n	8006d7e <HAL_TIM_ConfigClockSource+0x11a>
 8006cdc:	2b60      	cmp	r3, #96	@ 0x60
 8006cde:	d877      	bhi.n	8006dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ce0:	2b50      	cmp	r3, #80	@ 0x50
 8006ce2:	d03c      	beq.n	8006d5e <HAL_TIM_ConfigClockSource+0xfa>
 8006ce4:	2b50      	cmp	r3, #80	@ 0x50
 8006ce6:	d873      	bhi.n	8006dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ce8:	2b40      	cmp	r3, #64	@ 0x40
 8006cea:	d058      	beq.n	8006d9e <HAL_TIM_ConfigClockSource+0x13a>
 8006cec:	2b40      	cmp	r3, #64	@ 0x40
 8006cee:	d86f      	bhi.n	8006dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006cf0:	2b30      	cmp	r3, #48	@ 0x30
 8006cf2:	d064      	beq.n	8006dbe <HAL_TIM_ConfigClockSource+0x15a>
 8006cf4:	2b30      	cmp	r3, #48	@ 0x30
 8006cf6:	d86b      	bhi.n	8006dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006cf8:	2b20      	cmp	r3, #32
 8006cfa:	d060      	beq.n	8006dbe <HAL_TIM_ConfigClockSource+0x15a>
 8006cfc:	2b20      	cmp	r3, #32
 8006cfe:	d867      	bhi.n	8006dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d05c      	beq.n	8006dbe <HAL_TIM_ConfigClockSource+0x15a>
 8006d04:	2b10      	cmp	r3, #16
 8006d06:	d05a      	beq.n	8006dbe <HAL_TIM_ConfigClockSource+0x15a>
 8006d08:	e062      	b.n	8006dd0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d1a:	f000 f991 	bl	8007040 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006d2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	68ba      	ldr	r2, [r7, #8]
 8006d34:	609a      	str	r2, [r3, #8]
      break;
 8006d36:	e04f      	b.n	8006dd8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d48:	f000 f97a 	bl	8007040 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	689a      	ldr	r2, [r3, #8]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d5a:	609a      	str	r2, [r3, #8]
      break;
 8006d5c:	e03c      	b.n	8006dd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	f000 f8ee 	bl	8006f4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2150      	movs	r1, #80	@ 0x50
 8006d76:	4618      	mov	r0, r3
 8006d78:	f000 f947 	bl	800700a <TIM_ITRx_SetConfig>
      break;
 8006d7c:	e02c      	b.n	8006dd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	f000 f90d 	bl	8006faa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2160      	movs	r1, #96	@ 0x60
 8006d96:	4618      	mov	r0, r3
 8006d98:	f000 f937 	bl	800700a <TIM_ITRx_SetConfig>
      break;
 8006d9c:	e01c      	b.n	8006dd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006daa:	461a      	mov	r2, r3
 8006dac:	f000 f8ce 	bl	8006f4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2140      	movs	r1, #64	@ 0x40
 8006db6:	4618      	mov	r0, r3
 8006db8:	f000 f927 	bl	800700a <TIM_ITRx_SetConfig>
      break;
 8006dbc:	e00c      	b.n	8006dd8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	4610      	mov	r0, r2
 8006dca:	f000 f91e 	bl	800700a <TIM_ITRx_SetConfig>
      break;
 8006dce:	e003      	b.n	8006dd8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8006dd4:	e000      	b.n	8006dd8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006dd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3710      	adds	r7, #16
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
	...

08006df4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b085      	sub	sp, #20
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a46      	ldr	r2, [pc, #280]	@ (8006f20 <TIM_Base_SetConfig+0x12c>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d013      	beq.n	8006e34 <TIM_Base_SetConfig+0x40>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e12:	d00f      	beq.n	8006e34 <TIM_Base_SetConfig+0x40>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a43      	ldr	r2, [pc, #268]	@ (8006f24 <TIM_Base_SetConfig+0x130>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d00b      	beq.n	8006e34 <TIM_Base_SetConfig+0x40>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	4a42      	ldr	r2, [pc, #264]	@ (8006f28 <TIM_Base_SetConfig+0x134>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d007      	beq.n	8006e34 <TIM_Base_SetConfig+0x40>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4a41      	ldr	r2, [pc, #260]	@ (8006f2c <TIM_Base_SetConfig+0x138>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d003      	beq.n	8006e34 <TIM_Base_SetConfig+0x40>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4a40      	ldr	r2, [pc, #256]	@ (8006f30 <TIM_Base_SetConfig+0x13c>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d108      	bne.n	8006e46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a35      	ldr	r2, [pc, #212]	@ (8006f20 <TIM_Base_SetConfig+0x12c>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d02b      	beq.n	8006ea6 <TIM_Base_SetConfig+0xb2>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e54:	d027      	beq.n	8006ea6 <TIM_Base_SetConfig+0xb2>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4a32      	ldr	r2, [pc, #200]	@ (8006f24 <TIM_Base_SetConfig+0x130>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d023      	beq.n	8006ea6 <TIM_Base_SetConfig+0xb2>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4a31      	ldr	r2, [pc, #196]	@ (8006f28 <TIM_Base_SetConfig+0x134>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d01f      	beq.n	8006ea6 <TIM_Base_SetConfig+0xb2>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4a30      	ldr	r2, [pc, #192]	@ (8006f2c <TIM_Base_SetConfig+0x138>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d01b      	beq.n	8006ea6 <TIM_Base_SetConfig+0xb2>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4a2f      	ldr	r2, [pc, #188]	@ (8006f30 <TIM_Base_SetConfig+0x13c>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d017      	beq.n	8006ea6 <TIM_Base_SetConfig+0xb2>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4a2e      	ldr	r2, [pc, #184]	@ (8006f34 <TIM_Base_SetConfig+0x140>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d013      	beq.n	8006ea6 <TIM_Base_SetConfig+0xb2>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a2d      	ldr	r2, [pc, #180]	@ (8006f38 <TIM_Base_SetConfig+0x144>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d00f      	beq.n	8006ea6 <TIM_Base_SetConfig+0xb2>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a2c      	ldr	r2, [pc, #176]	@ (8006f3c <TIM_Base_SetConfig+0x148>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d00b      	beq.n	8006ea6 <TIM_Base_SetConfig+0xb2>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a2b      	ldr	r2, [pc, #172]	@ (8006f40 <TIM_Base_SetConfig+0x14c>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d007      	beq.n	8006ea6 <TIM_Base_SetConfig+0xb2>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a2a      	ldr	r2, [pc, #168]	@ (8006f44 <TIM_Base_SetConfig+0x150>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d003      	beq.n	8006ea6 <TIM_Base_SetConfig+0xb2>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a29      	ldr	r2, [pc, #164]	@ (8006f48 <TIM_Base_SetConfig+0x154>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d108      	bne.n	8006eb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006eac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	695b      	ldr	r3, [r3, #20]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	689a      	ldr	r2, [r3, #8]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	4a10      	ldr	r2, [pc, #64]	@ (8006f20 <TIM_Base_SetConfig+0x12c>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d003      	beq.n	8006eec <TIM_Base_SetConfig+0xf8>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	4a12      	ldr	r2, [pc, #72]	@ (8006f30 <TIM_Base_SetConfig+0x13c>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d103      	bne.n	8006ef4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	691a      	ldr	r2, [r3, #16]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	f003 0301 	and.w	r3, r3, #1
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d105      	bne.n	8006f12 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	f023 0201 	bic.w	r2, r3, #1
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	611a      	str	r2, [r3, #16]
  }
}
 8006f12:	bf00      	nop
 8006f14:	3714      	adds	r7, #20
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	40010000 	.word	0x40010000
 8006f24:	40000400 	.word	0x40000400
 8006f28:	40000800 	.word	0x40000800
 8006f2c:	40000c00 	.word	0x40000c00
 8006f30:	40010400 	.word	0x40010400
 8006f34:	40014000 	.word	0x40014000
 8006f38:	40014400 	.word	0x40014400
 8006f3c:	40014800 	.word	0x40014800
 8006f40:	40001800 	.word	0x40001800
 8006f44:	40001c00 	.word	0x40001c00
 8006f48:	40002000 	.word	0x40002000

08006f4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b087      	sub	sp, #28
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	60b9      	str	r1, [r7, #8]
 8006f56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6a1b      	ldr	r3, [r3, #32]
 8006f5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6a1b      	ldr	r3, [r3, #32]
 8006f62:	f023 0201 	bic.w	r2, r3, #1
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	699b      	ldr	r3, [r3, #24]
 8006f6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	011b      	lsls	r3, r3, #4
 8006f7c:	693a      	ldr	r2, [r7, #16]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	f023 030a 	bic.w	r3, r3, #10
 8006f88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f8a:	697a      	ldr	r2, [r7, #20]
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	693a      	ldr	r2, [r7, #16]
 8006f96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	697a      	ldr	r2, [r7, #20]
 8006f9c:	621a      	str	r2, [r3, #32]
}
 8006f9e:	bf00      	nop
 8006fa0:	371c      	adds	r7, #28
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr

08006faa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006faa:	b480      	push	{r7}
 8006fac:	b087      	sub	sp, #28
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	60f8      	str	r0, [r7, #12]
 8006fb2:	60b9      	str	r1, [r7, #8]
 8006fb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6a1b      	ldr	r3, [r3, #32]
 8006fba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6a1b      	ldr	r3, [r3, #32]
 8006fc0:	f023 0210 	bic.w	r2, r3, #16
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	699b      	ldr	r3, [r3, #24]
 8006fcc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006fd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	031b      	lsls	r3, r3, #12
 8006fda:	693a      	ldr	r2, [r7, #16]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006fe6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	011b      	lsls	r3, r3, #4
 8006fec:	697a      	ldr	r2, [r7, #20]
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	693a      	ldr	r2, [r7, #16]
 8006ff6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	697a      	ldr	r2, [r7, #20]
 8006ffc:	621a      	str	r2, [r3, #32]
}
 8006ffe:	bf00      	nop
 8007000:	371c      	adds	r7, #28
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr

0800700a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800700a:	b480      	push	{r7}
 800700c:	b085      	sub	sp, #20
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
 8007012:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007020:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007022:	683a      	ldr	r2, [r7, #0]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	4313      	orrs	r3, r2
 8007028:	f043 0307 	orr.w	r3, r3, #7
 800702c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	609a      	str	r2, [r3, #8]
}
 8007034:	bf00      	nop
 8007036:	3714      	adds	r7, #20
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007040:	b480      	push	{r7}
 8007042:	b087      	sub	sp, #28
 8007044:	af00      	add	r7, sp, #0
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	60b9      	str	r1, [r7, #8]
 800704a:	607a      	str	r2, [r7, #4]
 800704c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800705a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	021a      	lsls	r2, r3, #8
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	431a      	orrs	r2, r3
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	4313      	orrs	r3, r2
 8007068:	697a      	ldr	r2, [r7, #20]
 800706a:	4313      	orrs	r3, r2
 800706c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	697a      	ldr	r2, [r7, #20]
 8007072:	609a      	str	r2, [r3, #8]
}
 8007074:	bf00      	nop
 8007076:	371c      	adds	r7, #28
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007080:	b480      	push	{r7}
 8007082:	b085      	sub	sp, #20
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007090:	2b01      	cmp	r3, #1
 8007092:	d101      	bne.n	8007098 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007094:	2302      	movs	r3, #2
 8007096:	e05a      	b.n	800714e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2202      	movs	r2, #2
 80070a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	68fa      	ldr	r2, [r7, #12]
 80070d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a21      	ldr	r2, [pc, #132]	@ (800715c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d022      	beq.n	8007122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070e4:	d01d      	beq.n	8007122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a1d      	ldr	r2, [pc, #116]	@ (8007160 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d018      	beq.n	8007122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a1b      	ldr	r2, [pc, #108]	@ (8007164 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d013      	beq.n	8007122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a1a      	ldr	r2, [pc, #104]	@ (8007168 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d00e      	beq.n	8007122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a18      	ldr	r2, [pc, #96]	@ (800716c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d009      	beq.n	8007122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a17      	ldr	r2, [pc, #92]	@ (8007170 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d004      	beq.n	8007122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a15      	ldr	r2, [pc, #84]	@ (8007174 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d10c      	bne.n	800713c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007128:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	68ba      	ldr	r2, [r7, #8]
 8007130:	4313      	orrs	r3, r2
 8007132:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	68ba      	ldr	r2, [r7, #8]
 800713a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3714      	adds	r7, #20
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	40010000 	.word	0x40010000
 8007160:	40000400 	.word	0x40000400
 8007164:	40000800 	.word	0x40000800
 8007168:	40000c00 	.word	0x40000c00
 800716c:	40010400 	.word	0x40010400
 8007170:	40014000 	.word	0x40014000
 8007174:	40001800 	.word	0x40001800

08007178 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d101      	bne.n	800718a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	e042      	b.n	8007210 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007190:	b2db      	uxtb	r3, r3
 8007192:	2b00      	cmp	r3, #0
 8007194:	d106      	bne.n	80071a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f7fa fb1a 	bl	80017d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2224      	movs	r2, #36	@ 0x24
 80071a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68da      	ldr	r2, [r3, #12]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80071ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 f9e9 	bl	8007594 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	691a      	ldr	r2, [r3, #16]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80071d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	695a      	ldr	r2, [r3, #20]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80071e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	68da      	ldr	r2, [r3, #12]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80071f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2220      	movs	r2, #32
 80071fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2220      	movs	r2, #32
 8007204:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3708      	adds	r7, #8
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b08c      	sub	sp, #48	@ 0x30
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	4613      	mov	r3, r2
 8007224:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800722c:	b2db      	uxtb	r3, r3
 800722e:	2b20      	cmp	r3, #32
 8007230:	d156      	bne.n	80072e0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d002      	beq.n	800723e <HAL_UART_Transmit_DMA+0x26>
 8007238:	88fb      	ldrh	r3, [r7, #6]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d101      	bne.n	8007242 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	e04f      	b.n	80072e2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8007242:	68ba      	ldr	r2, [r7, #8]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	88fa      	ldrh	r2, [r7, #6]
 800724c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	88fa      	ldrh	r2, [r7, #6]
 8007252:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2200      	movs	r2, #0
 8007258:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2221      	movs	r2, #33	@ 0x21
 800725e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007266:	4a21      	ldr	r2, [pc, #132]	@ (80072ec <HAL_UART_Transmit_DMA+0xd4>)
 8007268:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800726e:	4a20      	ldr	r2, [pc, #128]	@ (80072f0 <HAL_UART_Transmit_DMA+0xd8>)
 8007270:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007276:	4a1f      	ldr	r2, [pc, #124]	@ (80072f4 <HAL_UART_Transmit_DMA+0xdc>)
 8007278:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800727e:	2200      	movs	r2, #0
 8007280:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007282:	f107 0308 	add.w	r3, r7, #8
 8007286:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800728c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800728e:	6819      	ldr	r1, [r3, #0]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	3304      	adds	r3, #4
 8007296:	461a      	mov	r2, r3
 8007298:	88fb      	ldrh	r3, [r7, #6]
 800729a:	f7fb f975 	bl	8002588 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80072a6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	3314      	adds	r3, #20
 80072ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	e853 3f00 	ldrex	r3, [r3]
 80072b6:	617b      	str	r3, [r7, #20]
   return(result);
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	3314      	adds	r3, #20
 80072c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80072c8:	627a      	str	r2, [r7, #36]	@ 0x24
 80072ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072cc:	6a39      	ldr	r1, [r7, #32]
 80072ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072d0:	e841 2300 	strex	r3, r2, [r1]
 80072d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d1e5      	bne.n	80072a8 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80072dc:	2300      	movs	r3, #0
 80072de:	e000      	b.n	80072e2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80072e0:	2302      	movs	r3, #2
  }
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3730      	adds	r7, #48	@ 0x30
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	08007335 	.word	0x08007335
 80072f0:	080073cf 	.word	0x080073cf
 80072f4:	080073eb 	.word	0x080073eb

080072f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007300:	bf00      	nop
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007314:	bf00      	nop
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007328:	bf00      	nop
 800732a:	370c      	adds	r7, #12
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr

08007334 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b090      	sub	sp, #64	@ 0x40
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007340:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800734c:	2b00      	cmp	r3, #0
 800734e:	d137      	bne.n	80073c0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007350:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007352:	2200      	movs	r2, #0
 8007354:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007356:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	3314      	adds	r3, #20
 800735c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007360:	e853 3f00 	ldrex	r3, [r3]
 8007364:	623b      	str	r3, [r7, #32]
   return(result);
 8007366:	6a3b      	ldr	r3, [r7, #32]
 8007368:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800736c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800736e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	3314      	adds	r3, #20
 8007374:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007376:	633a      	str	r2, [r7, #48]	@ 0x30
 8007378:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800737c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800737e:	e841 2300 	strex	r3, r2, [r1]
 8007382:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007386:	2b00      	cmp	r3, #0
 8007388:	d1e5      	bne.n	8007356 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800738a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	330c      	adds	r3, #12
 8007390:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	e853 3f00 	ldrex	r3, [r3]
 8007398:	60fb      	str	r3, [r7, #12]
   return(result);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80073a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	330c      	adds	r3, #12
 80073a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80073aa:	61fa      	str	r2, [r7, #28]
 80073ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ae:	69b9      	ldr	r1, [r7, #24]
 80073b0:	69fa      	ldr	r2, [r7, #28]
 80073b2:	e841 2300 	strex	r3, r2, [r1]
 80073b6:	617b      	str	r3, [r7, #20]
   return(result);
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1e5      	bne.n	800738a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80073be:	e002      	b.n	80073c6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80073c0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80073c2:	f7ff ff99 	bl	80072f8 <HAL_UART_TxCpltCallback>
}
 80073c6:	bf00      	nop
 80073c8:	3740      	adds	r7, #64	@ 0x40
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b084      	sub	sp, #16
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073da:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80073dc:	68f8      	ldr	r0, [r7, #12]
 80073de:	f7ff ff95 	bl	800730c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073e2:	bf00      	nop
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}

080073ea <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80073ea:	b580      	push	{r7, lr}
 80073ec:	b084      	sub	sp, #16
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80073f2:	2300      	movs	r3, #0
 80073f4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073fa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	695b      	ldr	r3, [r3, #20]
 8007402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007406:	2b80      	cmp	r3, #128	@ 0x80
 8007408:	bf0c      	ite	eq
 800740a:	2301      	moveq	r3, #1
 800740c:	2300      	movne	r3, #0
 800740e:	b2db      	uxtb	r3, r3
 8007410:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007418:	b2db      	uxtb	r3, r3
 800741a:	2b21      	cmp	r3, #33	@ 0x21
 800741c:	d108      	bne.n	8007430 <UART_DMAError+0x46>
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d005      	beq.n	8007430 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	2200      	movs	r2, #0
 8007428:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800742a:	68b8      	ldr	r0, [r7, #8]
 800742c:	f000 f827 	bl	800747e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	695b      	ldr	r3, [r3, #20]
 8007436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800743a:	2b40      	cmp	r3, #64	@ 0x40
 800743c:	bf0c      	ite	eq
 800743e:	2301      	moveq	r3, #1
 8007440:	2300      	movne	r3, #0
 8007442:	b2db      	uxtb	r3, r3
 8007444:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800744c:	b2db      	uxtb	r3, r3
 800744e:	2b22      	cmp	r3, #34	@ 0x22
 8007450:	d108      	bne.n	8007464 <UART_DMAError+0x7a>
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d005      	beq.n	8007464 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	2200      	movs	r2, #0
 800745c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800745e:	68b8      	ldr	r0, [r7, #8]
 8007460:	f000 f835 	bl	80074ce <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007468:	f043 0210 	orr.w	r2, r3, #16
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007470:	68b8      	ldr	r0, [r7, #8]
 8007472:	f7ff ff55 	bl	8007320 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007476:	bf00      	nop
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}

0800747e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800747e:	b480      	push	{r7}
 8007480:	b089      	sub	sp, #36	@ 0x24
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	330c      	adds	r3, #12
 800748c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	e853 3f00 	ldrex	r3, [r3]
 8007494:	60bb      	str	r3, [r7, #8]
   return(result);
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800749c:	61fb      	str	r3, [r7, #28]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	330c      	adds	r3, #12
 80074a4:	69fa      	ldr	r2, [r7, #28]
 80074a6:	61ba      	str	r2, [r7, #24]
 80074a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074aa:	6979      	ldr	r1, [r7, #20]
 80074ac:	69ba      	ldr	r2, [r7, #24]
 80074ae:	e841 2300 	strex	r3, r2, [r1]
 80074b2:	613b      	str	r3, [r7, #16]
   return(result);
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d1e5      	bne.n	8007486 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2220      	movs	r2, #32
 80074be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80074c2:	bf00      	nop
 80074c4:	3724      	adds	r7, #36	@ 0x24
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr

080074ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074ce:	b480      	push	{r7}
 80074d0:	b095      	sub	sp, #84	@ 0x54
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	330c      	adds	r3, #12
 80074dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074e0:	e853 3f00 	ldrex	r3, [r3]
 80074e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80074e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	330c      	adds	r3, #12
 80074f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80074f6:	643a      	str	r2, [r7, #64]	@ 0x40
 80074f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80074fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80074fe:	e841 2300 	strex	r3, r2, [r1]
 8007502:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1e5      	bne.n	80074d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	3314      	adds	r3, #20
 8007510:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007512:	6a3b      	ldr	r3, [r7, #32]
 8007514:	e853 3f00 	ldrex	r3, [r3]
 8007518:	61fb      	str	r3, [r7, #28]
   return(result);
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	f023 0301 	bic.w	r3, r3, #1
 8007520:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	3314      	adds	r3, #20
 8007528:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800752a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800752c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007530:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007532:	e841 2300 	strex	r3, r2, [r1]
 8007536:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1e5      	bne.n	800750a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007542:	2b01      	cmp	r3, #1
 8007544:	d119      	bne.n	800757a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	330c      	adds	r3, #12
 800754c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	e853 3f00 	ldrex	r3, [r3]
 8007554:	60bb      	str	r3, [r7, #8]
   return(result);
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	f023 0310 	bic.w	r3, r3, #16
 800755c:	647b      	str	r3, [r7, #68]	@ 0x44
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	330c      	adds	r3, #12
 8007564:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007566:	61ba      	str	r2, [r7, #24]
 8007568:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756a:	6979      	ldr	r1, [r7, #20]
 800756c:	69ba      	ldr	r2, [r7, #24]
 800756e:	e841 2300 	strex	r3, r2, [r1]
 8007572:	613b      	str	r3, [r7, #16]
   return(result);
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d1e5      	bne.n	8007546 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2220      	movs	r2, #32
 800757e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007588:	bf00      	nop
 800758a:	3754      	adds	r7, #84	@ 0x54
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007594:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007598:	b0c0      	sub	sp, #256	@ 0x100
 800759a:	af00      	add	r7, sp, #0
 800759c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80075ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075b0:	68d9      	ldr	r1, [r3, #12]
 80075b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	ea40 0301 	orr.w	r3, r0, r1
 80075bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80075be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075c2:	689a      	ldr	r2, [r3, #8]
 80075c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	431a      	orrs	r2, r3
 80075cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075d0:	695b      	ldr	r3, [r3, #20]
 80075d2:	431a      	orrs	r2, r3
 80075d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075d8:	69db      	ldr	r3, [r3, #28]
 80075da:	4313      	orrs	r3, r2
 80075dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80075e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80075ec:	f021 010c 	bic.w	r1, r1, #12
 80075f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80075fa:	430b      	orrs	r3, r1
 80075fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80075fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	695b      	ldr	r3, [r3, #20]
 8007606:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800760a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800760e:	6999      	ldr	r1, [r3, #24]
 8007610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	ea40 0301 	orr.w	r3, r0, r1
 800761a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800761c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	4b8f      	ldr	r3, [pc, #572]	@ (8007860 <UART_SetConfig+0x2cc>)
 8007624:	429a      	cmp	r2, r3
 8007626:	d005      	beq.n	8007634 <UART_SetConfig+0xa0>
 8007628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	4b8d      	ldr	r3, [pc, #564]	@ (8007864 <UART_SetConfig+0x2d0>)
 8007630:	429a      	cmp	r2, r3
 8007632:	d104      	bne.n	800763e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007634:	f7ff f880 	bl	8006738 <HAL_RCC_GetPCLK2Freq>
 8007638:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800763c:	e003      	b.n	8007646 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800763e:	f7ff f867 	bl	8006710 <HAL_RCC_GetPCLK1Freq>
 8007642:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800764a:	69db      	ldr	r3, [r3, #28]
 800764c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007650:	f040 810c 	bne.w	800786c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007654:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007658:	2200      	movs	r2, #0
 800765a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800765e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007662:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007666:	4622      	mov	r2, r4
 8007668:	462b      	mov	r3, r5
 800766a:	1891      	adds	r1, r2, r2
 800766c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800766e:	415b      	adcs	r3, r3
 8007670:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007672:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007676:	4621      	mov	r1, r4
 8007678:	eb12 0801 	adds.w	r8, r2, r1
 800767c:	4629      	mov	r1, r5
 800767e:	eb43 0901 	adc.w	r9, r3, r1
 8007682:	f04f 0200 	mov.w	r2, #0
 8007686:	f04f 0300 	mov.w	r3, #0
 800768a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800768e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007692:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007696:	4690      	mov	r8, r2
 8007698:	4699      	mov	r9, r3
 800769a:	4623      	mov	r3, r4
 800769c:	eb18 0303 	adds.w	r3, r8, r3
 80076a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80076a4:	462b      	mov	r3, r5
 80076a6:	eb49 0303 	adc.w	r3, r9, r3
 80076aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80076ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80076ba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80076be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80076c2:	460b      	mov	r3, r1
 80076c4:	18db      	adds	r3, r3, r3
 80076c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80076c8:	4613      	mov	r3, r2
 80076ca:	eb42 0303 	adc.w	r3, r2, r3
 80076ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80076d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80076d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80076d8:	f7f8 fdd6 	bl	8000288 <__aeabi_uldivmod>
 80076dc:	4602      	mov	r2, r0
 80076de:	460b      	mov	r3, r1
 80076e0:	4b61      	ldr	r3, [pc, #388]	@ (8007868 <UART_SetConfig+0x2d4>)
 80076e2:	fba3 2302 	umull	r2, r3, r3, r2
 80076e6:	095b      	lsrs	r3, r3, #5
 80076e8:	011c      	lsls	r4, r3, #4
 80076ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076ee:	2200      	movs	r2, #0
 80076f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80076f4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80076f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80076fc:	4642      	mov	r2, r8
 80076fe:	464b      	mov	r3, r9
 8007700:	1891      	adds	r1, r2, r2
 8007702:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007704:	415b      	adcs	r3, r3
 8007706:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007708:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800770c:	4641      	mov	r1, r8
 800770e:	eb12 0a01 	adds.w	sl, r2, r1
 8007712:	4649      	mov	r1, r9
 8007714:	eb43 0b01 	adc.w	fp, r3, r1
 8007718:	f04f 0200 	mov.w	r2, #0
 800771c:	f04f 0300 	mov.w	r3, #0
 8007720:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007724:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007728:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800772c:	4692      	mov	sl, r2
 800772e:	469b      	mov	fp, r3
 8007730:	4643      	mov	r3, r8
 8007732:	eb1a 0303 	adds.w	r3, sl, r3
 8007736:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800773a:	464b      	mov	r3, r9
 800773c:	eb4b 0303 	adc.w	r3, fp, r3
 8007740:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007750:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007754:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007758:	460b      	mov	r3, r1
 800775a:	18db      	adds	r3, r3, r3
 800775c:	643b      	str	r3, [r7, #64]	@ 0x40
 800775e:	4613      	mov	r3, r2
 8007760:	eb42 0303 	adc.w	r3, r2, r3
 8007764:	647b      	str	r3, [r7, #68]	@ 0x44
 8007766:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800776a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800776e:	f7f8 fd8b 	bl	8000288 <__aeabi_uldivmod>
 8007772:	4602      	mov	r2, r0
 8007774:	460b      	mov	r3, r1
 8007776:	4611      	mov	r1, r2
 8007778:	4b3b      	ldr	r3, [pc, #236]	@ (8007868 <UART_SetConfig+0x2d4>)
 800777a:	fba3 2301 	umull	r2, r3, r3, r1
 800777e:	095b      	lsrs	r3, r3, #5
 8007780:	2264      	movs	r2, #100	@ 0x64
 8007782:	fb02 f303 	mul.w	r3, r2, r3
 8007786:	1acb      	subs	r3, r1, r3
 8007788:	00db      	lsls	r3, r3, #3
 800778a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800778e:	4b36      	ldr	r3, [pc, #216]	@ (8007868 <UART_SetConfig+0x2d4>)
 8007790:	fba3 2302 	umull	r2, r3, r3, r2
 8007794:	095b      	lsrs	r3, r3, #5
 8007796:	005b      	lsls	r3, r3, #1
 8007798:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800779c:	441c      	add	r4, r3
 800779e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077a2:	2200      	movs	r2, #0
 80077a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80077a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80077ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80077b0:	4642      	mov	r2, r8
 80077b2:	464b      	mov	r3, r9
 80077b4:	1891      	adds	r1, r2, r2
 80077b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80077b8:	415b      	adcs	r3, r3
 80077ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80077c0:	4641      	mov	r1, r8
 80077c2:	1851      	adds	r1, r2, r1
 80077c4:	6339      	str	r1, [r7, #48]	@ 0x30
 80077c6:	4649      	mov	r1, r9
 80077c8:	414b      	adcs	r3, r1
 80077ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80077cc:	f04f 0200 	mov.w	r2, #0
 80077d0:	f04f 0300 	mov.w	r3, #0
 80077d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80077d8:	4659      	mov	r1, fp
 80077da:	00cb      	lsls	r3, r1, #3
 80077dc:	4651      	mov	r1, sl
 80077de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80077e2:	4651      	mov	r1, sl
 80077e4:	00ca      	lsls	r2, r1, #3
 80077e6:	4610      	mov	r0, r2
 80077e8:	4619      	mov	r1, r3
 80077ea:	4603      	mov	r3, r0
 80077ec:	4642      	mov	r2, r8
 80077ee:	189b      	adds	r3, r3, r2
 80077f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80077f4:	464b      	mov	r3, r9
 80077f6:	460a      	mov	r2, r1
 80077f8:	eb42 0303 	adc.w	r3, r2, r3
 80077fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800780c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007810:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007814:	460b      	mov	r3, r1
 8007816:	18db      	adds	r3, r3, r3
 8007818:	62bb      	str	r3, [r7, #40]	@ 0x28
 800781a:	4613      	mov	r3, r2
 800781c:	eb42 0303 	adc.w	r3, r2, r3
 8007820:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007822:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007826:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800782a:	f7f8 fd2d 	bl	8000288 <__aeabi_uldivmod>
 800782e:	4602      	mov	r2, r0
 8007830:	460b      	mov	r3, r1
 8007832:	4b0d      	ldr	r3, [pc, #52]	@ (8007868 <UART_SetConfig+0x2d4>)
 8007834:	fba3 1302 	umull	r1, r3, r3, r2
 8007838:	095b      	lsrs	r3, r3, #5
 800783a:	2164      	movs	r1, #100	@ 0x64
 800783c:	fb01 f303 	mul.w	r3, r1, r3
 8007840:	1ad3      	subs	r3, r2, r3
 8007842:	00db      	lsls	r3, r3, #3
 8007844:	3332      	adds	r3, #50	@ 0x32
 8007846:	4a08      	ldr	r2, [pc, #32]	@ (8007868 <UART_SetConfig+0x2d4>)
 8007848:	fba2 2303 	umull	r2, r3, r2, r3
 800784c:	095b      	lsrs	r3, r3, #5
 800784e:	f003 0207 	and.w	r2, r3, #7
 8007852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4422      	add	r2, r4
 800785a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800785c:	e106      	b.n	8007a6c <UART_SetConfig+0x4d8>
 800785e:	bf00      	nop
 8007860:	40011000 	.word	0x40011000
 8007864:	40011400 	.word	0x40011400
 8007868:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800786c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007870:	2200      	movs	r2, #0
 8007872:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007876:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800787a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800787e:	4642      	mov	r2, r8
 8007880:	464b      	mov	r3, r9
 8007882:	1891      	adds	r1, r2, r2
 8007884:	6239      	str	r1, [r7, #32]
 8007886:	415b      	adcs	r3, r3
 8007888:	627b      	str	r3, [r7, #36]	@ 0x24
 800788a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800788e:	4641      	mov	r1, r8
 8007890:	1854      	adds	r4, r2, r1
 8007892:	4649      	mov	r1, r9
 8007894:	eb43 0501 	adc.w	r5, r3, r1
 8007898:	f04f 0200 	mov.w	r2, #0
 800789c:	f04f 0300 	mov.w	r3, #0
 80078a0:	00eb      	lsls	r3, r5, #3
 80078a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80078a6:	00e2      	lsls	r2, r4, #3
 80078a8:	4614      	mov	r4, r2
 80078aa:	461d      	mov	r5, r3
 80078ac:	4643      	mov	r3, r8
 80078ae:	18e3      	adds	r3, r4, r3
 80078b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80078b4:	464b      	mov	r3, r9
 80078b6:	eb45 0303 	adc.w	r3, r5, r3
 80078ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80078be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80078ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80078ce:	f04f 0200 	mov.w	r2, #0
 80078d2:	f04f 0300 	mov.w	r3, #0
 80078d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80078da:	4629      	mov	r1, r5
 80078dc:	008b      	lsls	r3, r1, #2
 80078de:	4621      	mov	r1, r4
 80078e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80078e4:	4621      	mov	r1, r4
 80078e6:	008a      	lsls	r2, r1, #2
 80078e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80078ec:	f7f8 fccc 	bl	8000288 <__aeabi_uldivmod>
 80078f0:	4602      	mov	r2, r0
 80078f2:	460b      	mov	r3, r1
 80078f4:	4b60      	ldr	r3, [pc, #384]	@ (8007a78 <UART_SetConfig+0x4e4>)
 80078f6:	fba3 2302 	umull	r2, r3, r3, r2
 80078fa:	095b      	lsrs	r3, r3, #5
 80078fc:	011c      	lsls	r4, r3, #4
 80078fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007902:	2200      	movs	r2, #0
 8007904:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007908:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800790c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007910:	4642      	mov	r2, r8
 8007912:	464b      	mov	r3, r9
 8007914:	1891      	adds	r1, r2, r2
 8007916:	61b9      	str	r1, [r7, #24]
 8007918:	415b      	adcs	r3, r3
 800791a:	61fb      	str	r3, [r7, #28]
 800791c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007920:	4641      	mov	r1, r8
 8007922:	1851      	adds	r1, r2, r1
 8007924:	6139      	str	r1, [r7, #16]
 8007926:	4649      	mov	r1, r9
 8007928:	414b      	adcs	r3, r1
 800792a:	617b      	str	r3, [r7, #20]
 800792c:	f04f 0200 	mov.w	r2, #0
 8007930:	f04f 0300 	mov.w	r3, #0
 8007934:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007938:	4659      	mov	r1, fp
 800793a:	00cb      	lsls	r3, r1, #3
 800793c:	4651      	mov	r1, sl
 800793e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007942:	4651      	mov	r1, sl
 8007944:	00ca      	lsls	r2, r1, #3
 8007946:	4610      	mov	r0, r2
 8007948:	4619      	mov	r1, r3
 800794a:	4603      	mov	r3, r0
 800794c:	4642      	mov	r2, r8
 800794e:	189b      	adds	r3, r3, r2
 8007950:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007954:	464b      	mov	r3, r9
 8007956:	460a      	mov	r2, r1
 8007958:	eb42 0303 	adc.w	r3, r2, r3
 800795c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	2200      	movs	r2, #0
 8007968:	67bb      	str	r3, [r7, #120]	@ 0x78
 800796a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800796c:	f04f 0200 	mov.w	r2, #0
 8007970:	f04f 0300 	mov.w	r3, #0
 8007974:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007978:	4649      	mov	r1, r9
 800797a:	008b      	lsls	r3, r1, #2
 800797c:	4641      	mov	r1, r8
 800797e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007982:	4641      	mov	r1, r8
 8007984:	008a      	lsls	r2, r1, #2
 8007986:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800798a:	f7f8 fc7d 	bl	8000288 <__aeabi_uldivmod>
 800798e:	4602      	mov	r2, r0
 8007990:	460b      	mov	r3, r1
 8007992:	4611      	mov	r1, r2
 8007994:	4b38      	ldr	r3, [pc, #224]	@ (8007a78 <UART_SetConfig+0x4e4>)
 8007996:	fba3 2301 	umull	r2, r3, r3, r1
 800799a:	095b      	lsrs	r3, r3, #5
 800799c:	2264      	movs	r2, #100	@ 0x64
 800799e:	fb02 f303 	mul.w	r3, r2, r3
 80079a2:	1acb      	subs	r3, r1, r3
 80079a4:	011b      	lsls	r3, r3, #4
 80079a6:	3332      	adds	r3, #50	@ 0x32
 80079a8:	4a33      	ldr	r2, [pc, #204]	@ (8007a78 <UART_SetConfig+0x4e4>)
 80079aa:	fba2 2303 	umull	r2, r3, r2, r3
 80079ae:	095b      	lsrs	r3, r3, #5
 80079b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80079b4:	441c      	add	r4, r3
 80079b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079ba:	2200      	movs	r2, #0
 80079bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80079be:	677a      	str	r2, [r7, #116]	@ 0x74
 80079c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80079c4:	4642      	mov	r2, r8
 80079c6:	464b      	mov	r3, r9
 80079c8:	1891      	adds	r1, r2, r2
 80079ca:	60b9      	str	r1, [r7, #8]
 80079cc:	415b      	adcs	r3, r3
 80079ce:	60fb      	str	r3, [r7, #12]
 80079d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80079d4:	4641      	mov	r1, r8
 80079d6:	1851      	adds	r1, r2, r1
 80079d8:	6039      	str	r1, [r7, #0]
 80079da:	4649      	mov	r1, r9
 80079dc:	414b      	adcs	r3, r1
 80079de:	607b      	str	r3, [r7, #4]
 80079e0:	f04f 0200 	mov.w	r2, #0
 80079e4:	f04f 0300 	mov.w	r3, #0
 80079e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80079ec:	4659      	mov	r1, fp
 80079ee:	00cb      	lsls	r3, r1, #3
 80079f0:	4651      	mov	r1, sl
 80079f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80079f6:	4651      	mov	r1, sl
 80079f8:	00ca      	lsls	r2, r1, #3
 80079fa:	4610      	mov	r0, r2
 80079fc:	4619      	mov	r1, r3
 80079fe:	4603      	mov	r3, r0
 8007a00:	4642      	mov	r2, r8
 8007a02:	189b      	adds	r3, r3, r2
 8007a04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007a06:	464b      	mov	r3, r9
 8007a08:	460a      	mov	r2, r1
 8007a0a:	eb42 0303 	adc.w	r3, r2, r3
 8007a0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	2200      	movs	r2, #0
 8007a18:	663b      	str	r3, [r7, #96]	@ 0x60
 8007a1a:	667a      	str	r2, [r7, #100]	@ 0x64
 8007a1c:	f04f 0200 	mov.w	r2, #0
 8007a20:	f04f 0300 	mov.w	r3, #0
 8007a24:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007a28:	4649      	mov	r1, r9
 8007a2a:	008b      	lsls	r3, r1, #2
 8007a2c:	4641      	mov	r1, r8
 8007a2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a32:	4641      	mov	r1, r8
 8007a34:	008a      	lsls	r2, r1, #2
 8007a36:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007a3a:	f7f8 fc25 	bl	8000288 <__aeabi_uldivmod>
 8007a3e:	4602      	mov	r2, r0
 8007a40:	460b      	mov	r3, r1
 8007a42:	4b0d      	ldr	r3, [pc, #52]	@ (8007a78 <UART_SetConfig+0x4e4>)
 8007a44:	fba3 1302 	umull	r1, r3, r3, r2
 8007a48:	095b      	lsrs	r3, r3, #5
 8007a4a:	2164      	movs	r1, #100	@ 0x64
 8007a4c:	fb01 f303 	mul.w	r3, r1, r3
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	011b      	lsls	r3, r3, #4
 8007a54:	3332      	adds	r3, #50	@ 0x32
 8007a56:	4a08      	ldr	r2, [pc, #32]	@ (8007a78 <UART_SetConfig+0x4e4>)
 8007a58:	fba2 2303 	umull	r2, r3, r2, r3
 8007a5c:	095b      	lsrs	r3, r3, #5
 8007a5e:	f003 020f 	and.w	r2, r3, #15
 8007a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4422      	add	r2, r4
 8007a6a:	609a      	str	r2, [r3, #8]
}
 8007a6c:	bf00      	nop
 8007a6e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007a72:	46bd      	mov	sp, r7
 8007a74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a78:	51eb851f 	.word	0x51eb851f

08007a7c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	f043 0201 	orr.w	r2, r3, #1
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007a90:	2300      	movs	r3, #0
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	370c      	adds	r7, #12
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr

08007a9e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a9e:	b480      	push	{r7}
 8007aa0:	b083      	sub	sp, #12
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	f023 0201 	bic.w	r2, r3, #1
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ab2:	2300      	movs	r3, #0
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b085      	sub	sp, #20
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007aca:	2300      	movs	r3, #0
 8007acc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ada:	d901      	bls.n	8007ae0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007adc:	2303      	movs	r3, #3
 8007ade:	e01b      	b.n	8007b18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	691b      	ldr	r3, [r3, #16]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	daf2      	bge.n	8007ace <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	019b      	lsls	r3, r3, #6
 8007af0:	f043 0220 	orr.w	r2, r3, #32
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	3301      	adds	r3, #1
 8007afc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b04:	d901      	bls.n	8007b0a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007b06:	2303      	movs	r3, #3
 8007b08:	e006      	b.n	8007b18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	f003 0320 	and.w	r3, r3, #32
 8007b12:	2b20      	cmp	r3, #32
 8007b14:	d0f0      	beq.n	8007af8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3714      	adds	r7, #20
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b085      	sub	sp, #20
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	3301      	adds	r3, #1
 8007b34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b3c:	d901      	bls.n	8007b42 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	e018      	b.n	8007b74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	691b      	ldr	r3, [r3, #16]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	daf2      	bge.n	8007b30 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2210      	movs	r2, #16
 8007b52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	3301      	adds	r3, #1
 8007b58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b60:	d901      	bls.n	8007b66 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007b62:	2303      	movs	r3, #3
 8007b64:	e006      	b.n	8007b74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	691b      	ldr	r3, [r3, #16]
 8007b6a:	f003 0310 	and.w	r3, r3, #16
 8007b6e:	2b10      	cmp	r3, #16
 8007b70:	d0f0      	beq.n	8007b54 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007b72:	2300      	movs	r3, #0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3714      	adds	r7, #20
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b08b      	sub	sp, #44	@ 0x2c
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	60b9      	str	r1, [r7, #8]
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007b96:	88fb      	ldrh	r3, [r7, #6]
 8007b98:	089b      	lsrs	r3, r3, #2
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007b9e:	88fb      	ldrh	r3, [r7, #6]
 8007ba0:	f003 0303 	and.w	r3, r3, #3
 8007ba4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	623b      	str	r3, [r7, #32]
 8007baa:	e014      	b.n	8007bd6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007bac:	69bb      	ldr	r3, [r7, #24]
 8007bae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb6:	601a      	str	r2, [r3, #0]
    pDest++;
 8007bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bba:	3301      	adds	r3, #1
 8007bbc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bcc:	3301      	adds	r3, #1
 8007bce:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007bd0:	6a3b      	ldr	r3, [r7, #32]
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	623b      	str	r3, [r7, #32]
 8007bd6:	6a3a      	ldr	r2, [r7, #32]
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d3e6      	bcc.n	8007bac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007bde:	8bfb      	ldrh	r3, [r7, #30]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d01e      	beq.n	8007c22 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007be4:	2300      	movs	r3, #0
 8007be6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007bee:	461a      	mov	r2, r3
 8007bf0:	f107 0310 	add.w	r3, r7, #16
 8007bf4:	6812      	ldr	r2, [r2, #0]
 8007bf6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007bf8:	693a      	ldr	r2, [r7, #16]
 8007bfa:	6a3b      	ldr	r3, [r7, #32]
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	00db      	lsls	r3, r3, #3
 8007c00:	fa22 f303 	lsr.w	r3, r2, r3
 8007c04:	b2da      	uxtb	r2, r3
 8007c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c08:	701a      	strb	r2, [r3, #0]
      i++;
 8007c0a:	6a3b      	ldr	r3, [r7, #32]
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	623b      	str	r3, [r7, #32]
      pDest++;
 8007c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c12:	3301      	adds	r3, #1
 8007c14:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007c16:	8bfb      	ldrh	r3, [r7, #30]
 8007c18:	3b01      	subs	r3, #1
 8007c1a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007c1c:	8bfb      	ldrh	r3, [r7, #30]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d1ea      	bne.n	8007bf8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	372c      	adds	r7, #44	@ 0x2c
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	695b      	ldr	r3, [r3, #20]
 8007c3c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	699b      	ldr	r3, [r3, #24]
 8007c42:	68fa      	ldr	r2, [r7, #12]
 8007c44:	4013      	ands	r3, r2
 8007c46:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007c48:	68fb      	ldr	r3, [r7, #12]
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3714      	adds	r7, #20
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr

08007c56 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007c56:	b480      	push	{r7}
 8007c58:	b085      	sub	sp, #20
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
 8007c5e:	460b      	mov	r3, r1
 8007c60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007c66:	78fb      	ldrb	r3, [r7, #3]
 8007c68:	015a      	lsls	r2, r3, #5
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007c76:	78fb      	ldrb	r3, [r7, #3]
 8007c78:	015a      	lsls	r2, r3, #5
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	68ba      	ldr	r2, [r7, #8]
 8007c86:	4013      	ands	r3, r2
 8007c88:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007c8a:	68bb      	ldr	r3, [r7, #8]
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3714      	adds	r7, #20
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	695b      	ldr	r3, [r3, #20]
 8007ca4:	f003 0301 	and.w	r3, r3, #1
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	370c      	adds	r7, #12
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	68fa      	ldr	r2, [r7, #12]
 8007cce:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007cd2:	f023 0303 	bic.w	r3, r3, #3
 8007cd6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	78fb      	ldrb	r3, [r7, #3]
 8007ce2:	f003 0303 	and.w	r3, r3, #3
 8007ce6:	68f9      	ldr	r1, [r7, #12]
 8007ce8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007cec:	4313      	orrs	r3, r2
 8007cee:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007cf0:	78fb      	ldrb	r3, [r7, #3]
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d107      	bne.n	8007d06 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007d02:	6053      	str	r3, [r2, #4]
 8007d04:	e00c      	b.n	8007d20 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8007d06:	78fb      	ldrb	r3, [r7, #3]
 8007d08:	2b02      	cmp	r3, #2
 8007d0a:	d107      	bne.n	8007d1c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d12:	461a      	mov	r2, r3
 8007d14:	f241 7370 	movw	r3, #6000	@ 0x1770
 8007d18:	6053      	str	r3, [r2, #4]
 8007d1a:	e001      	b.n	8007d20 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	e000      	b.n	8007d22 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3714      	adds	r7, #20
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr

08007d2e <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d2e:	b480      	push	{r7}
 8007d30:	b085      	sub	sp, #20
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d40:	695b      	ldr	r3, [r3, #20]
 8007d42:	b29b      	uxth	r3, r3
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3714      	adds	r7, #20
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b089      	sub	sp, #36	@ 0x24
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	460b      	mov	r3, r1
 8007d5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007d60:	78fb      	ldrb	r3, [r7, #3]
 8007d62:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007d64:	2300      	movs	r3, #0
 8007d66:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007d68:	69bb      	ldr	r3, [r7, #24]
 8007d6a:	015a      	lsls	r2, r3, #5
 8007d6c:	69fb      	ldr	r3, [r7, #28]
 8007d6e:	4413      	add	r3, r2
 8007d70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	0c9b      	lsrs	r3, r3, #18
 8007d78:	f003 0303 	and.w	r3, r3, #3
 8007d7c:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	015a      	lsls	r2, r3, #5
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	4413      	add	r3, r2
 8007d86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	0fdb      	lsrs	r3, r3, #31
 8007d8e:	f003 0301 	and.w	r3, r3, #1
 8007d92:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007d94:	69bb      	ldr	r3, [r7, #24]
 8007d96:	015a      	lsls	r2, r3, #5
 8007d98:	69fb      	ldr	r3, [r7, #28]
 8007d9a:	4413      	add	r3, r2
 8007d9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	0fdb      	lsrs	r3, r3, #31
 8007da4:	f003 0301 	and.w	r3, r3, #1
 8007da8:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	f003 0320 	and.w	r3, r3, #32
 8007db2:	2b20      	cmp	r3, #32
 8007db4:	d10d      	bne.n	8007dd2 <USB_HC_Halt+0x82>
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d10a      	bne.n	8007dd2 <USB_HC_Halt+0x82>
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d005      	beq.n	8007dce <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d002      	beq.n	8007dce <USB_HC_Halt+0x7e>
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	2b03      	cmp	r3, #3
 8007dcc:	d101      	bne.n	8007dd2 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	e0d8      	b.n	8007f84 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d002      	beq.n	8007dde <USB_HC_Halt+0x8e>
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	2b02      	cmp	r3, #2
 8007ddc:	d173      	bne.n	8007ec6 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007dde:	69bb      	ldr	r3, [r7, #24]
 8007de0:	015a      	lsls	r2, r3, #5
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	4413      	add	r3, r2
 8007de6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	69ba      	ldr	r2, [r7, #24]
 8007dee:	0151      	lsls	r1, r2, #5
 8007df0:	69fa      	ldr	r2, [r7, #28]
 8007df2:	440a      	add	r2, r1
 8007df4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007df8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007dfc:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	f003 0320 	and.w	r3, r3, #32
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d14a      	bne.n	8007ea0 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e0e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d133      	bne.n	8007e7e <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	015a      	lsls	r2, r3, #5
 8007e1a:	69fb      	ldr	r3, [r7, #28]
 8007e1c:	4413      	add	r3, r2
 8007e1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	69ba      	ldr	r2, [r7, #24]
 8007e26:	0151      	lsls	r1, r2, #5
 8007e28:	69fa      	ldr	r2, [r7, #28]
 8007e2a:	440a      	add	r2, r1
 8007e2c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007e34:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e36:	69bb      	ldr	r3, [r7, #24]
 8007e38:	015a      	lsls	r2, r3, #5
 8007e3a:	69fb      	ldr	r3, [r7, #28]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	69ba      	ldr	r2, [r7, #24]
 8007e46:	0151      	lsls	r1, r2, #5
 8007e48:	69fa      	ldr	r2, [r7, #28]
 8007e4a:	440a      	add	r2, r1
 8007e4c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e50:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007e54:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	3301      	adds	r3, #1
 8007e5a:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007e62:	d82e      	bhi.n	8007ec2 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007e64:	69bb      	ldr	r3, [r7, #24]
 8007e66:	015a      	lsls	r2, r3, #5
 8007e68:	69fb      	ldr	r3, [r7, #28]
 8007e6a:	4413      	add	r3, r2
 8007e6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e7a:	d0ec      	beq.n	8007e56 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007e7c:	e081      	b.n	8007f82 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	015a      	lsls	r2, r3, #5
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	4413      	add	r3, r2
 8007e86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	69ba      	ldr	r2, [r7, #24]
 8007e8e:	0151      	lsls	r1, r2, #5
 8007e90:	69fa      	ldr	r2, [r7, #28]
 8007e92:	440a      	add	r2, r1
 8007e94:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e98:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007e9c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007e9e:	e070      	b.n	8007f82 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	015a      	lsls	r2, r3, #5
 8007ea4:	69fb      	ldr	r3, [r7, #28]
 8007ea6:	4413      	add	r3, r2
 8007ea8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	69ba      	ldr	r2, [r7, #24]
 8007eb0:	0151      	lsls	r1, r2, #5
 8007eb2:	69fa      	ldr	r2, [r7, #28]
 8007eb4:	440a      	add	r2, r1
 8007eb6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007eba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007ebe:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007ec0:	e05f      	b.n	8007f82 <USB_HC_Halt+0x232>
            break;
 8007ec2:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007ec4:	e05d      	b.n	8007f82 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	015a      	lsls	r2, r3, #5
 8007eca:	69fb      	ldr	r3, [r7, #28]
 8007ecc:	4413      	add	r3, r2
 8007ece:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	69ba      	ldr	r2, [r7, #24]
 8007ed6:	0151      	lsls	r1, r2, #5
 8007ed8:	69fa      	ldr	r2, [r7, #28]
 8007eda:	440a      	add	r2, r1
 8007edc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ee0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007ee4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007eec:	691b      	ldr	r3, [r3, #16]
 8007eee:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d133      	bne.n	8007f5e <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	015a      	lsls	r2, r3, #5
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	4413      	add	r3, r2
 8007efe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	69ba      	ldr	r2, [r7, #24]
 8007f06:	0151      	lsls	r1, r2, #5
 8007f08:	69fa      	ldr	r2, [r7, #28]
 8007f0a:	440a      	add	r2, r1
 8007f0c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007f14:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	015a      	lsls	r2, r3, #5
 8007f1a:	69fb      	ldr	r3, [r7, #28]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	69ba      	ldr	r2, [r7, #24]
 8007f26:	0151      	lsls	r1, r2, #5
 8007f28:	69fa      	ldr	r2, [r7, #28]
 8007f2a:	440a      	add	r2, r1
 8007f2c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f30:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007f34:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007f42:	d81d      	bhi.n	8007f80 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	015a      	lsls	r2, r3, #5
 8007f48:	69fb      	ldr	r3, [r7, #28]
 8007f4a:	4413      	add	r3, r2
 8007f4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f56:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f5a:	d0ec      	beq.n	8007f36 <USB_HC_Halt+0x1e6>
 8007f5c:	e011      	b.n	8007f82 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	015a      	lsls	r2, r3, #5
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	4413      	add	r3, r2
 8007f66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	69ba      	ldr	r2, [r7, #24]
 8007f6e:	0151      	lsls	r1, r2, #5
 8007f70:	69fa      	ldr	r2, [r7, #28]
 8007f72:	440a      	add	r2, r1
 8007f74:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f78:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007f7c:	6013      	str	r3, [r2, #0]
 8007f7e:	e000      	b.n	8007f82 <USB_HC_Halt+0x232>
          break;
 8007f80:	bf00      	nop
    }
  }

  return HAL_OK;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3724      	adds	r7, #36	@ 0x24
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b088      	sub	sp, #32
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f7ff fd7a 	bl	8007a9e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007faa:	2110      	movs	r1, #16
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f7ff fd87 	bl	8007ac0 <USB_FlushTxFifo>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d001      	beq.n	8007fbc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f7ff fdb1 	bl	8007b24 <USB_FlushRxFifo>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d001      	beq.n	8007fcc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007fcc:	2300      	movs	r3, #0
 8007fce:	61bb      	str	r3, [r7, #24]
 8007fd0:	e01f      	b.n	8008012 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007fd2:	69bb      	ldr	r3, [r7, #24]
 8007fd4:	015a      	lsls	r2, r3, #5
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	4413      	add	r3, r2
 8007fda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007fe8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007ff0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007ff8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	015a      	lsls	r2, r3, #5
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	4413      	add	r3, r2
 8008002:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008006:	461a      	mov	r2, r3
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800800c:	69bb      	ldr	r3, [r7, #24]
 800800e:	3301      	adds	r3, #1
 8008010:	61bb      	str	r3, [r7, #24]
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	2b0f      	cmp	r3, #15
 8008016:	d9dc      	bls.n	8007fd2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008018:	2300      	movs	r3, #0
 800801a:	61bb      	str	r3, [r7, #24]
 800801c:	e034      	b.n	8008088 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	015a      	lsls	r2, r3, #5
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	4413      	add	r3, r2
 8008026:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008034:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800803c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008044:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008046:	69bb      	ldr	r3, [r7, #24]
 8008048:	015a      	lsls	r2, r3, #5
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	4413      	add	r3, r2
 800804e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008052:	461a      	mov	r2, r3
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	3301      	adds	r3, #1
 800805c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008064:	d80c      	bhi.n	8008080 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	015a      	lsls	r2, r3, #5
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	4413      	add	r3, r2
 800806e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008078:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800807c:	d0ec      	beq.n	8008058 <USB_StopHost+0xc8>
 800807e:	e000      	b.n	8008082 <USB_StopHost+0xf2>
        break;
 8008080:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008082:	69bb      	ldr	r3, [r7, #24]
 8008084:	3301      	adds	r3, #1
 8008086:	61bb      	str	r3, [r7, #24]
 8008088:	69bb      	ldr	r3, [r7, #24]
 800808a:	2b0f      	cmp	r3, #15
 800808c:	d9c7      	bls.n	800801e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008094:	461a      	mov	r2, r3
 8008096:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800809a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80080a2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f7ff fce9 	bl	8007a7c <USB_EnableGlobalInt>

  return ret;
 80080aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3720      	adds	r7, #32
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80080c2:	1c5a      	adds	r2, r3, #1
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 f804 	bl	80080d8 <USBH_HandleSof>
}
 80080d0:	bf00      	nop
 80080d2:	3708      	adds	r7, #8
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	2b0b      	cmp	r3, #11
 80080e8:	d10a      	bne.n	8008100 <USBH_HandleSof+0x28>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d005      	beq.n	8008100 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80080fa:	699b      	ldr	r3, [r3, #24]
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	4798      	blx	r3
  }
}
 8008100:	bf00      	nop
 8008102:	3708      	adds	r7, #8
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008118:	bf00      	nop
}
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008124:	b480      	push	{r7}
 8008126:	b083      	sub	sp, #12
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2200      	movs	r2, #0
 8008130:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8008134:	bf00      	nop
}
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2201      	movs	r2, #1
 800814c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	370c      	adds	r7, #12
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr

0800816e <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b082      	sub	sp, #8
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2201      	movs	r2, #1
 800817a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 f883 	bl	800829a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	791b      	ldrb	r3, [r3, #4]
 8008198:	4619      	mov	r1, r3
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 f80b 	bl	80081b6 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	795b      	ldrb	r3, [r3, #5]
 80081a4:	4619      	mov	r1, r3
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 f805 	bl	80081b6 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80081ac:	2300      	movs	r3, #0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3708      	adds	r7, #8
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80081b6:	b480      	push	{r7}
 80081b8:	b083      	sub	sp, #12
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
 80081be:	460b      	mov	r3, r1
 80081c0:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80081c2:	78fb      	ldrb	r3, [r7, #3]
 80081c4:	2b0f      	cmp	r3, #15
 80081c6:	d80d      	bhi.n	80081e4 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80081c8:	78fb      	ldrb	r3, [r7, #3]
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	33e0      	adds	r3, #224	@ 0xe0
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	4413      	add	r3, r2
 80081d2:	685a      	ldr	r2, [r3, #4]
 80081d4:	78fb      	ldrb	r3, [r7, #3]
 80081d6:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80081da:	6879      	ldr	r1, [r7, #4]
 80081dc:	33e0      	adds	r3, #224	@ 0xe0
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	440b      	add	r3, r1
 80081e2:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	370c      	adds	r7, #12
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr

080081f2 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b082      	sub	sp, #8
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008200:	4618      	mov	r0, r3
 8008202:	f7ff ff57 	bl	80080b4 <USBH_LL_IncTimer>
}
 8008206:	bf00      	nop
 8008208:	3708      	adds	r7, #8
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}

0800820e <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800820e:	b580      	push	{r7, lr}
 8008210:	b082      	sub	sp, #8
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800821c:	4618      	mov	r0, r3
 800821e:	f7ff ff8f 	bl	8008140 <USBH_LL_Connect>
}
 8008222:	bf00      	nop
 8008224:	3708      	adds	r7, #8
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800822a:	b580      	push	{r7, lr}
 800822c:	b082      	sub	sp, #8
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008238:	4618      	mov	r0, r3
 800823a:	f7ff ff98 	bl	800816e <USBH_LL_Disconnect>
}
 800823e:	bf00      	nop
 8008240:	3708      	adds	r7, #8
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008246:	b480      	push	{r7}
 8008248:	b083      	sub	sp, #12
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]
 800824e:	460b      	mov	r3, r1
 8008250:	70fb      	strb	r3, [r7, #3]
 8008252:	4613      	mov	r3, r2
 8008254:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008256:	bf00      	nop
 8008258:	370c      	adds	r7, #12
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr

08008262 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008262:	b580      	push	{r7, lr}
 8008264:	b082      	sub	sp, #8
 8008266:	af00      	add	r7, sp, #0
 8008268:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008270:	4618      	mov	r0, r3
 8008272:	f7ff ff49 	bl	8008108 <USBH_LL_PortEnabled>
}
 8008276:	bf00      	nop
 8008278:	3708      	adds	r7, #8
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}

0800827e <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800827e:	b580      	push	{r7, lr}
 8008280:	b082      	sub	sp, #8
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800828c:	4618      	mov	r0, r3
 800828e:	f7ff ff49 	bl	8008124 <USBH_LL_PortDisabled>
}
 8008292:	bf00      	nop
 8008294:	3708      	adds	r7, #8
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}

0800829a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800829a:	b580      	push	{r7, lr}
 800829c:	b084      	sub	sp, #16
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082a2:	2300      	movs	r3, #0
 80082a4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80082a6:	2300      	movs	r3, #0
 80082a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80082b0:	4618      	mov	r0, r3
 80082b2:	f7fa fef0 	bl	8003096 <HAL_HCD_Stop>
 80082b6:	4603      	mov	r3, r0
 80082b8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80082ba:	7bfb      	ldrb	r3, [r7, #15]
 80082bc:	4618      	mov	r0, r3
 80082be:	f000 f807 	bl	80082d0 <USBH_Get_USB_Status>
 80082c2:	4603      	mov	r3, r0
 80082c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3710      	adds	r7, #16
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b085      	sub	sp, #20
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	4603      	mov	r3, r0
 80082d8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80082da:	2300      	movs	r3, #0
 80082dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80082de:	79fb      	ldrb	r3, [r7, #7]
 80082e0:	2b03      	cmp	r3, #3
 80082e2:	d817      	bhi.n	8008314 <USBH_Get_USB_Status+0x44>
 80082e4:	a201      	add	r2, pc, #4	@ (adr r2, 80082ec <USBH_Get_USB_Status+0x1c>)
 80082e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ea:	bf00      	nop
 80082ec:	080082fd 	.word	0x080082fd
 80082f0:	08008303 	.word	0x08008303
 80082f4:	08008309 	.word	0x08008309
 80082f8:	0800830f 	.word	0x0800830f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80082fc:	2300      	movs	r3, #0
 80082fe:	73fb      	strb	r3, [r7, #15]
    break;
 8008300:	e00b      	b.n	800831a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008302:	2302      	movs	r3, #2
 8008304:	73fb      	strb	r3, [r7, #15]
    break;
 8008306:	e008      	b.n	800831a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008308:	2301      	movs	r3, #1
 800830a:	73fb      	strb	r3, [r7, #15]
    break;
 800830c:	e005      	b.n	800831a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800830e:	2302      	movs	r3, #2
 8008310:	73fb      	strb	r3, [r7, #15]
    break;
 8008312:	e002      	b.n	800831a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008314:	2302      	movs	r3, #2
 8008316:	73fb      	strb	r3, [r7, #15]
    break;
 8008318:	bf00      	nop
  }
  return usb_status;
 800831a:	7bfb      	ldrb	r3, [r7, #15]
}
 800831c:	4618      	mov	r0, r3
 800831e:	3714      	adds	r7, #20
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr

08008328 <arm_mean_q15>:
 8008328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800832a:	ea5f 0e91 	movs.w	lr, r1, lsr #2
 800832e:	d021      	beq.n	8008374 <arm_mean_q15+0x4c>
 8008330:	f100 0408 	add.w	r4, r0, #8
 8008334:	4675      	mov	r5, lr
 8008336:	2300      	movs	r3, #0
 8008338:	f854 7c08 	ldr.w	r7, [r4, #-8]
 800833c:	f854 6c04 	ldr.w	r6, [r4, #-4]
 8008340:	fa03 f387 	sxtah	r3, r3, r7
 8008344:	eb03 4327 	add.w	r3, r3, r7, asr #16
 8008348:	fa03 f386 	sxtah	r3, r3, r6
 800834c:	3d01      	subs	r5, #1
 800834e:	eb03 4326 	add.w	r3, r3, r6, asr #16
 8008352:	f104 0408 	add.w	r4, r4, #8
 8008356:	d1ef      	bne.n	8008338 <arm_mean_q15+0x10>
 8008358:	eb00 00ce 	add.w	r0, r0, lr, lsl #3
 800835c:	f011 0403 	ands.w	r4, r1, #3
 8008360:	d004      	beq.n	800836c <arm_mean_q15+0x44>
 8008362:	f930 5b02 	ldrsh.w	r5, [r0], #2
 8008366:	3c01      	subs	r4, #1
 8008368:	442b      	add	r3, r5
 800836a:	d1fa      	bne.n	8008362 <arm_mean_q15+0x3a>
 800836c:	fb93 f3f1 	sdiv	r3, r3, r1
 8008370:	8013      	strh	r3, [r2, #0]
 8008372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008374:	4673      	mov	r3, lr
 8008376:	e7f1      	b.n	800835c <arm_mean_q15+0x34>

08008378 <arm_split_rfft_q15>:
 8008378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800837c:	b083      	sub	sp, #12
 800837e:	f101 4480 	add.w	r4, r1, #1073741824	@ 0x40000000
 8008382:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8008384:	9001      	str	r0, [sp, #4]
 8008386:	3c01      	subs	r4, #1
 8008388:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 800838c:	00a0      	lsls	r0, r4, #2
 800838e:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 8008392:	3901      	subs	r1, #1
 8008394:	9000      	str	r0, [sp, #0]
 8008396:	4452      	add	r2, sl
 8008398:	4453      	add	r3, sl
 800839a:	d02f      	beq.n	80083fc <arm_split_rfft_q15+0x84>
 800839c:	f100 0904 	add.w	r9, r0, #4
 80083a0:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80083a2:	9c01      	ldr	r4, [sp, #4]
 80083a4:	f1ae 0e08 	sub.w	lr, lr, #8
 80083a8:	4486      	add	lr, r0
 80083aa:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80083ac:	44a1      	add	r9, r4
 80083ae:	f100 0808 	add.w	r8, r0, #8
 80083b2:	46a3      	mov	fp, r4
 80083b4:	f04f 0c00 	mov.w	ip, #0
 80083b8:	f85b 4f04 	ldr.w	r4, [fp, #4]!
 80083bc:	f852 000c 	ldr.w	r0, [r2, ip]
 80083c0:	fb44 f500 	smusd	r5, r4, r0
 80083c4:	f859 6d04 	ldr.w	r6, [r9, #-4]!
 80083c8:	f853 700c 	ldr.w	r7, [r3, ip]
 80083cc:	fb26 5507 	smlad	r5, r6, r7, r5
 80083d0:	fb46 f617 	smusdx	r6, r6, r7
 80083d4:	fb24 6010 	smladx	r0, r4, r0, r6
 80083d8:	1400      	asrs	r0, r0, #16
 80083da:	0c2c      	lsrs	r4, r5, #16
 80083dc:	4246      	negs	r6, r0
 80083de:	3901      	subs	r1, #1
 80083e0:	f828 0c02 	strh.w	r0, [r8, #-2]
 80083e4:	f828 4c04 	strh.w	r4, [r8, #-4]
 80083e8:	44d4      	add	ip, sl
 80083ea:	f8ae 6006 	strh.w	r6, [lr, #6]
 80083ee:	f8ae 4004 	strh.w	r4, [lr, #4]
 80083f2:	f108 0804 	add.w	r8, r8, #4
 80083f6:	f1ae 0e04 	sub.w	lr, lr, #4
 80083fa:	d1dd      	bne.n	80083b8 <arm_split_rfft_q15+0x40>
 80083fc:	9801      	ldr	r0, [sp, #4]
 80083fe:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8008400:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8008404:	f9b0 3000 	ldrsh.w	r3, [r0]
 8008408:	9900      	ldr	r1, [sp, #0]
 800840a:	1a9b      	subs	r3, r3, r2
 800840c:	4421      	add	r1, r4
 800840e:	2200      	movs	r2, #0
 8008410:	105b      	asrs	r3, r3, #1
 8008412:	808b      	strh	r3, [r1, #4]
 8008414:	80ca      	strh	r2, [r1, #6]
 8008416:	f9b0 1000 	ldrsh.w	r1, [r0]
 800841a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800841e:	8062      	strh	r2, [r4, #2]
 8008420:	440b      	add	r3, r1
 8008422:	105b      	asrs	r3, r3, #1
 8008424:	8023      	strh	r3, [r4, #0]
 8008426:	b003      	add	sp, #12
 8008428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800842c <arm_rfft_q15>:
 800842c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008430:	4617      	mov	r7, r2
 8008432:	7902      	ldrb	r2, [r0, #4]
 8008434:	6805      	ldr	r5, [r0, #0]
 8008436:	6943      	ldr	r3, [r0, #20]
 8008438:	b085      	sub	sp, #20
 800843a:	2a01      	cmp	r2, #1
 800843c:	4606      	mov	r6, r0
 800843e:	9303      	str	r3, [sp, #12]
 8008440:	ea4f 0555 	mov.w	r5, r5, lsr #1
 8008444:	4688      	mov	r8, r1
 8008446:	d00f      	beq.n	8008468 <arm_rfft_q15+0x3c>
 8008448:	4618      	mov	r0, r3
 800844a:	7973      	ldrb	r3, [r6, #5]
 800844c:	f000 fb46 	bl	8008adc <arm_cfft_q15>
 8008450:	68b4      	ldr	r4, [r6, #8]
 8008452:	68f2      	ldr	r2, [r6, #12]
 8008454:	6933      	ldr	r3, [r6, #16]
 8008456:	9700      	str	r7, [sp, #0]
 8008458:	4640      	mov	r0, r8
 800845a:	4629      	mov	r1, r5
 800845c:	9401      	str	r4, [sp, #4]
 800845e:	f7ff ff8b 	bl	8008378 <arm_split_rfft_q15>
 8008462:	b005      	add	sp, #20
 8008464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008468:	f100 0308 	add.w	r3, r0, #8
 800846c:	e893 5008 	ldmia.w	r3, {r3, ip, lr}
 8008470:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8008474:	b31d      	cbz	r5, 80084be <arm_rfft_q15+0x92>
 8008476:	f109 0904 	add.w	r9, r9, #4
 800847a:	4489      	add	r9, r1
 800847c:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8008480:	46bb      	mov	fp, r7
 8008482:	f859 1d04 	ldr.w	r1, [r9, #-4]!
 8008486:	f8de 4000 	ldr.w	r4, [lr]
 800848a:	fb41 f304 	smusd	r3, r1, r4
 800848e:	f858 0b04 	ldr.w	r0, [r8], #4
 8008492:	f8dc 2000 	ldr.w	r2, [ip]
 8008496:	fb20 3302 	smlad	r3, r0, r2, r3
 800849a:	fb21 f114 	smuadx	r1, r1, r4
 800849e:	4249      	negs	r1, r1
 80084a0:	fb42 1210 	smlsdx	r2, r2, r0, r1
 80084a4:	3d01      	subs	r5, #1
 80084a6:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80084aa:	ea4f 4222 	mov.w	r2, r2, asr #16
 80084ae:	44d6      	add	lr, sl
 80084b0:	eac3 4202 	pkhbt	r2, r3, r2, lsl #16
 80084b4:	44d4      	add	ip, sl
 80084b6:	f84b 2b04 	str.w	r2, [fp], #4
 80084ba:	d1e2      	bne.n	8008482 <arm_rfft_q15+0x56>
 80084bc:	7932      	ldrb	r2, [r6, #4]
 80084be:	7973      	ldrb	r3, [r6, #5]
 80084c0:	9803      	ldr	r0, [sp, #12]
 80084c2:	4639      	mov	r1, r7
 80084c4:	f000 fb0a 	bl	8008adc <arm_cfft_q15>
 80084c8:	6833      	ldr	r3, [r6, #0]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d0c9      	beq.n	8008462 <arm_rfft_q15+0x36>
 80084ce:	3f02      	subs	r7, #2
 80084d0:	2200      	movs	r2, #0
 80084d2:	f937 3f02 	ldrsh.w	r3, [r7, #2]!
 80084d6:	005b      	lsls	r3, r3, #1
 80084d8:	803b      	strh	r3, [r7, #0]
 80084da:	6833      	ldr	r3, [r6, #0]
 80084dc:	3201      	adds	r2, #1
 80084de:	4293      	cmp	r3, r2
 80084e0:	d8f7      	bhi.n	80084d2 <arm_rfft_q15+0xa6>
 80084e2:	b005      	add	sp, #20
 80084e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080084e8 <arm_rfft_init_q15>:
 80084e8:	b289      	uxth	r1, r1
 80084ea:	b430      	push	{r4, r5}
 80084ec:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80084f0:	4d36      	ldr	r5, [pc, #216]	@ (80085cc <arm_rfft_init_q15+0xe4>)
 80084f2:	4c37      	ldr	r4, [pc, #220]	@ (80085d0 <arm_rfft_init_q15+0xe8>)
 80084f4:	7102      	strb	r2, [r0, #4]
 80084f6:	7143      	strb	r3, [r0, #5]
 80084f8:	6001      	str	r1, [r0, #0]
 80084fa:	60c5      	str	r5, [r0, #12]
 80084fc:	6104      	str	r4, [r0, #16]
 80084fe:	d050      	beq.n	80085a2 <arm_rfft_init_q15+0xba>
 8008500:	d911      	bls.n	8008526 <arm_rfft_init_q15+0x3e>
 8008502:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8008506:	d054      	beq.n	80085b2 <arm_rfft_init_q15+0xca>
 8008508:	d938      	bls.n	800857c <arm_rfft_init_q15+0x94>
 800850a:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800850e:	d022      	beq.n	8008556 <arm_rfft_init_q15+0x6e>
 8008510:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8008514:	d155      	bne.n	80085c2 <arm_rfft_init_q15+0xda>
 8008516:	2201      	movs	r2, #1
 8008518:	4b2e      	ldr	r3, [pc, #184]	@ (80085d4 <arm_rfft_init_q15+0xec>)
 800851a:	6082      	str	r2, [r0, #8]
 800851c:	6143      	str	r3, [r0, #20]
 800851e:	2000      	movs	r0, #0
 8008520:	b240      	sxtb	r0, r0
 8008522:	bc30      	pop	{r4, r5}
 8008524:	4770      	bx	lr
 8008526:	2940      	cmp	r1, #64	@ 0x40
 8008528:	d033      	beq.n	8008592 <arm_rfft_init_q15+0xaa>
 800852a:	d91c      	bls.n	8008566 <arm_rfft_init_q15+0x7e>
 800852c:	2980      	cmp	r1, #128	@ 0x80
 800852e:	d00a      	beq.n	8008546 <arm_rfft_init_q15+0x5e>
 8008530:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8008534:	d145      	bne.n	80085c2 <arm_rfft_init_q15+0xda>
 8008536:	2220      	movs	r2, #32
 8008538:	4b27      	ldr	r3, [pc, #156]	@ (80085d8 <arm_rfft_init_q15+0xf0>)
 800853a:	6082      	str	r2, [r0, #8]
 800853c:	6143      	str	r3, [r0, #20]
 800853e:	2000      	movs	r0, #0
 8008540:	b240      	sxtb	r0, r0
 8008542:	bc30      	pop	{r4, r5}
 8008544:	4770      	bx	lr
 8008546:	2240      	movs	r2, #64	@ 0x40
 8008548:	4b24      	ldr	r3, [pc, #144]	@ (80085dc <arm_rfft_init_q15+0xf4>)
 800854a:	6082      	str	r2, [r0, #8]
 800854c:	6143      	str	r3, [r0, #20]
 800854e:	2000      	movs	r0, #0
 8008550:	b240      	sxtb	r0, r0
 8008552:	bc30      	pop	{r4, r5}
 8008554:	4770      	bx	lr
 8008556:	2202      	movs	r2, #2
 8008558:	4b21      	ldr	r3, [pc, #132]	@ (80085e0 <arm_rfft_init_q15+0xf8>)
 800855a:	6082      	str	r2, [r0, #8]
 800855c:	6143      	str	r3, [r0, #20]
 800855e:	2000      	movs	r0, #0
 8008560:	b240      	sxtb	r0, r0
 8008562:	bc30      	pop	{r4, r5}
 8008564:	4770      	bx	lr
 8008566:	2920      	cmp	r1, #32
 8008568:	d12b      	bne.n	80085c2 <arm_rfft_init_q15+0xda>
 800856a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800856e:	4b1d      	ldr	r3, [pc, #116]	@ (80085e4 <arm_rfft_init_q15+0xfc>)
 8008570:	6082      	str	r2, [r0, #8]
 8008572:	6143      	str	r3, [r0, #20]
 8008574:	2000      	movs	r0, #0
 8008576:	b240      	sxtb	r0, r0
 8008578:	bc30      	pop	{r4, r5}
 800857a:	4770      	bx	lr
 800857c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008580:	d11f      	bne.n	80085c2 <arm_rfft_init_q15+0xda>
 8008582:	2208      	movs	r2, #8
 8008584:	4b18      	ldr	r3, [pc, #96]	@ (80085e8 <arm_rfft_init_q15+0x100>)
 8008586:	6082      	str	r2, [r0, #8]
 8008588:	6143      	str	r3, [r0, #20]
 800858a:	2000      	movs	r0, #0
 800858c:	b240      	sxtb	r0, r0
 800858e:	bc30      	pop	{r4, r5}
 8008590:	4770      	bx	lr
 8008592:	2280      	movs	r2, #128	@ 0x80
 8008594:	4b15      	ldr	r3, [pc, #84]	@ (80085ec <arm_rfft_init_q15+0x104>)
 8008596:	6082      	str	r2, [r0, #8]
 8008598:	6143      	str	r3, [r0, #20]
 800859a:	2000      	movs	r0, #0
 800859c:	b240      	sxtb	r0, r0
 800859e:	bc30      	pop	{r4, r5}
 80085a0:	4770      	bx	lr
 80085a2:	2210      	movs	r2, #16
 80085a4:	4b12      	ldr	r3, [pc, #72]	@ (80085f0 <arm_rfft_init_q15+0x108>)
 80085a6:	6082      	str	r2, [r0, #8]
 80085a8:	6143      	str	r3, [r0, #20]
 80085aa:	2000      	movs	r0, #0
 80085ac:	b240      	sxtb	r0, r0
 80085ae:	bc30      	pop	{r4, r5}
 80085b0:	4770      	bx	lr
 80085b2:	2204      	movs	r2, #4
 80085b4:	4b0f      	ldr	r3, [pc, #60]	@ (80085f4 <arm_rfft_init_q15+0x10c>)
 80085b6:	6082      	str	r2, [r0, #8]
 80085b8:	6143      	str	r3, [r0, #20]
 80085ba:	2000      	movs	r0, #0
 80085bc:	b240      	sxtb	r0, r0
 80085be:	bc30      	pop	{r4, r5}
 80085c0:	4770      	bx	lr
 80085c2:	20ff      	movs	r0, #255	@ 0xff
 80085c4:	b240      	sxtb	r0, r0
 80085c6:	bc30      	pop	{r4, r5}
 80085c8:	4770      	bx	lr
 80085ca:	bf00      	nop
 80085cc:	080090fc 	.word	0x080090fc
 80085d0:	0800d0fc 	.word	0x0800d0fc
 80085d4:	0801112c 	.word	0x0801112c
 80085d8:	0801116c 	.word	0x0801116c
 80085dc:	0801114c 	.word	0x0801114c
 80085e0:	0801117c 	.word	0x0801117c
 80085e4:	0801110c 	.word	0x0801110c
 80085e8:	0801113c 	.word	0x0801113c
 80085ec:	0801111c 	.word	0x0801111c
 80085f0:	0801115c 	.word	0x0801115c
 80085f4:	080110fc 	.word	0x080110fc

080085f8 <arm_biquad_cascade_df1_q15>:
 80085f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085fc:	b08b      	sub	sp, #44	@ 0x2c
 80085fe:	085c      	lsrs	r4, r3, #1
 8008600:	f990 800c 	ldrsb.w	r8, [r0, #12]
 8008604:	6885      	ldr	r5, [r0, #8]
 8008606:	9407      	str	r4, [sp, #28]
 8008608:	4626      	mov	r6, r4
 800860a:	f003 0301 	and.w	r3, r3, #1
 800860e:	6844      	ldr	r4, [r0, #4]
 8008610:	f990 0000 	ldrsb.w	r0, [r0]
 8008614:	9004      	str	r0, [sp, #16]
 8008616:	9306      	str	r3, [sp, #24]
 8008618:	00b0      	lsls	r0, r6, #2
 800861a:	4613      	mov	r3, r2
 800861c:	4403      	add	r3, r0
 800861e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008620:	f105 030c 	add.w	r3, r5, #12
 8008624:	9302      	str	r3, [sp, #8]
 8008626:	f104 0308 	add.w	r3, r4, #8
 800862a:	f1c8 090f 	rsb	r9, r8, #15
 800862e:	9205      	str	r2, [sp, #20]
 8008630:	9008      	str	r0, [sp, #32]
 8008632:	9101      	str	r1, [sp, #4]
 8008634:	f108 0811 	add.w	r8, r8, #17
 8008638:	9303      	str	r3, [sp, #12]
 800863a:	9a02      	ldr	r2, [sp, #8]
 800863c:	f852 4c0c 	ldr.w	r4, [r2, #-12]
 8008640:	e912 0003 	ldmdb	r2, {r0, r1}
 8008644:	9a03      	ldr	r2, [sp, #12]
 8008646:	f852 ac08 	ldr.w	sl, [r2, #-8]
 800864a:	f852 3c04 	ldr.w	r3, [r2, #-4]
 800864e:	9a07      	ldr	r2, [sp, #28]
 8008650:	2a00      	cmp	r2, #0
 8008652:	d06c      	beq.n	800872e <arm_biquad_cascade_df1_q15+0x136>
 8008654:	f8dd c004 	ldr.w	ip, [sp, #4]
 8008658:	f8dd e014 	ldr.w	lr, [sp, #20]
 800865c:	4615      	mov	r5, r2
 800865e:	461f      	mov	r7, r3
 8008660:	f85c 6b04 	ldr.w	r6, [ip], #4
 8008664:	fb24 fb06 	smuad	fp, r4, r6
 8008668:	465a      	mov	r2, fp
 800866a:	17d3      	asrs	r3, r2, #31
 800866c:	461a      	mov	r2, r3
 800866e:	465b      	mov	r3, fp
 8008670:	fbc0 32ca 	smlald	r3, r2, r0, sl
 8008674:	fbc1 32c7 	smlald	r3, r2, r1, r7
 8008678:	fa23 f309 	lsr.w	r3, r3, r9
 800867c:	fa02 f208 	lsl.w	r2, r2, r8
 8008680:	431a      	orrs	r2, r3
 8008682:	eac6 430a 	pkhbt	r3, r6, sl, lsl #16
 8008686:	f302 020f 	ssat	r2, #16, r2
 800868a:	eac2 4707 	pkhbt	r7, r2, r7, lsl #16
 800868e:	fb24 f216 	smuadx	r2, r4, r6
 8008692:	ea4f 7be2 	mov.w	fp, r2, asr #31
 8008696:	46da      	mov	sl, fp
 8008698:	fbc0 2ac3 	smlald	r2, sl, r0, r3
 800869c:	fbc1 2ac7 	smlald	r2, sl, r1, r7
 80086a0:	fa0a fa08 	lsl.w	sl, sl, r8
 80086a4:	fa22 f209 	lsr.w	r2, r2, r9
 80086a8:	3d01      	subs	r5, #1
 80086aa:	ea4a 0202 	orr.w	r2, sl, r2
 80086ae:	ea4f 4626 	mov.w	r6, r6, asr #16
 80086b2:	f302 020f 	ssat	r2, #16, r2
 80086b6:	eac6 4a03 	pkhbt	sl, r6, r3, lsl #16
 80086ba:	eac7 4302 	pkhbt	r3, r7, r2, lsl #16
 80086be:	eac2 4707 	pkhbt	r7, r2, r7, lsl #16
 80086c2:	f84e 3b04 	str.w	r3, [lr], #4
 80086c6:	d1cb      	bne.n	8008660 <arm_biquad_cascade_df1_q15+0x68>
 80086c8:	9a01      	ldr	r2, [sp, #4]
 80086ca:	9d08      	ldr	r5, [sp, #32]
 80086cc:	442a      	add	r2, r5
 80086ce:	9201      	str	r2, [sp, #4]
 80086d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086d2:	463b      	mov	r3, r7
 80086d4:	9d06      	ldr	r5, [sp, #24]
 80086d6:	b1b5      	cbz	r5, 8008706 <arm_biquad_cascade_df1_q15+0x10e>
 80086d8:	9d01      	ldr	r5, [sp, #4]
 80086da:	f9b5 5000 	ldrsh.w	r5, [r5]
 80086de:	fb24 f405 	smuad	r4, r4, r5
 80086e2:	17e7      	asrs	r7, r4, #31
 80086e4:	463e      	mov	r6, r7
 80086e6:	fbc0 46ca 	smlald	r4, r6, r0, sl
 80086ea:	fbc1 46c3 	smlald	r4, r6, r1, r3
 80086ee:	fa06 f608 	lsl.w	r6, r6, r8
 80086f2:	fa24 f409 	lsr.w	r4, r4, r9
 80086f6:	4326      	orrs	r6, r4
 80086f8:	f306 060f 	ssat	r6, #16, r6
 80086fc:	8016      	strh	r6, [r2, #0]
 80086fe:	eac6 4303 	pkhbt	r3, r6, r3, lsl #16
 8008702:	eac5 4a0a 	pkhbt	sl, r5, sl, lsl #16
 8008706:	9903      	ldr	r1, [sp, #12]
 8008708:	f841 3c04 	str.w	r3, [r1, #-4]
 800870c:	9b02      	ldr	r3, [sp, #8]
 800870e:	f841 ac08 	str.w	sl, [r1, #-8]
 8008712:	330c      	adds	r3, #12
 8008714:	9302      	str	r3, [sp, #8]
 8008716:	f101 0308 	add.w	r3, r1, #8
 800871a:	9303      	str	r3, [sp, #12]
 800871c:	9b05      	ldr	r3, [sp, #20]
 800871e:	9301      	str	r3, [sp, #4]
 8008720:	9b04      	ldr	r3, [sp, #16]
 8008722:	3b01      	subs	r3, #1
 8008724:	9304      	str	r3, [sp, #16]
 8008726:	d188      	bne.n	800863a <arm_biquad_cascade_df1_q15+0x42>
 8008728:	b00b      	add	sp, #44	@ 0x2c
 800872a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800872e:	9a05      	ldr	r2, [sp, #20]
 8008730:	e7d0      	b.n	80086d4 <arm_biquad_cascade_df1_q15+0xdc>
 8008732:	bf00      	nop

08008734 <arm_biquad_cascade_df1_init_q15>:
 8008734:	b538      	push	{r3, r4, r5, lr}
 8008736:	461d      	mov	r5, r3
 8008738:	4604      	mov	r4, r0
 800873a:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 800873e:	6082      	str	r2, [r0, #8]
 8008740:	7001      	strb	r1, [r0, #0]
 8008742:	00ca      	lsls	r2, r1, #3
 8008744:	7303      	strb	r3, [r0, #12]
 8008746:	2100      	movs	r1, #0
 8008748:	4628      	mov	r0, r5
 800874a:	f000 fc81 	bl	8009050 <memset>
 800874e:	6065      	str	r5, [r4, #4]
 8008750:	bd38      	pop	{r3, r4, r5, pc}
 8008752:	bf00      	nop

08008754 <arm_cmplx_mag_q15>:
 8008754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008758:	b083      	sub	sp, #12
 800875a:	0893      	lsrs	r3, r2, #2
 800875c:	9200      	str	r2, [sp, #0]
 800875e:	4607      	mov	r7, r0
 8008760:	460e      	mov	r6, r1
 8008762:	9301      	str	r3, [sp, #4]
 8008764:	d034      	beq.n	80087d0 <arm_cmplx_mag_q15+0x7c>
 8008766:	f100 0510 	add.w	r5, r0, #16
 800876a:	469b      	mov	fp, r3
 800876c:	460c      	mov	r4, r1
 800876e:	f855 0c10 	ldr.w	r0, [r5, #-16]
 8008772:	fb20 f000 	smuad	r0, r0, r0
 8008776:	f855 2c0c 	ldr.w	r2, [r5, #-12]
 800877a:	fb22 f802 	smuad	r8, r2, r2
 800877e:	f855 3c08 	ldr.w	r3, [r5, #-8]
 8008782:	fb23 fa03 	smuad	sl, r3, r3
 8008786:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800878a:	fb23 f903 	smuad	r9, r3, r3
 800878e:	4621      	mov	r1, r4
 8008790:	1440      	asrs	r0, r0, #17
 8008792:	f000 f831 	bl	80087f8 <arm_sqrt_q15>
 8008796:	1ca1      	adds	r1, r4, #2
 8008798:	ea4f 4068 	mov.w	r0, r8, asr #17
 800879c:	f000 f82c 	bl	80087f8 <arm_sqrt_q15>
 80087a0:	f104 0806 	add.w	r8, r4, #6
 80087a4:	1d21      	adds	r1, r4, #4
 80087a6:	ea4f 406a 	mov.w	r0, sl, asr #17
 80087aa:	f000 f825 	bl	80087f8 <arm_sqrt_q15>
 80087ae:	ea4f 4069 	mov.w	r0, r9, asr #17
 80087b2:	4641      	mov	r1, r8
 80087b4:	f000 f820 	bl	80087f8 <arm_sqrt_q15>
 80087b8:	f1bb 0b01 	subs.w	fp, fp, #1
 80087bc:	f105 0510 	add.w	r5, r5, #16
 80087c0:	f104 0408 	add.w	r4, r4, #8
 80087c4:	d1d3      	bne.n	800876e <arm_cmplx_mag_q15+0x1a>
 80087c6:	9a01      	ldr	r2, [sp, #4]
 80087c8:	eb07 1702 	add.w	r7, r7, r2, lsl #4
 80087cc:	eb06 06c2 	add.w	r6, r6, r2, lsl #3
 80087d0:	9b00      	ldr	r3, [sp, #0]
 80087d2:	f013 0403 	ands.w	r4, r3, #3
 80087d6:	d00b      	beq.n	80087f0 <arm_cmplx_mag_q15+0x9c>
 80087d8:	f857 0b04 	ldr.w	r0, [r7], #4
 80087dc:	fb20 f000 	smuad	r0, r0, r0
 80087e0:	4631      	mov	r1, r6
 80087e2:	1440      	asrs	r0, r0, #17
 80087e4:	f000 f808 	bl	80087f8 <arm_sqrt_q15>
 80087e8:	3c01      	subs	r4, #1
 80087ea:	f106 0602 	add.w	r6, r6, #2
 80087ee:	d1f3      	bne.n	80087d8 <arm_cmplx_mag_q15+0x84>
 80087f0:	b003      	add	sp, #12
 80087f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087f6:	bf00      	nop

080087f8 <arm_sqrt_q15>:
 80087f8:	2800      	cmp	r0, #0
 80087fa:	dd72      	ble.n	80088e2 <arm_sqrt_q15+0xea>
 80087fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087fe:	fab0 f680 	clz	r6, r0
 8008802:	3e11      	subs	r6, #17
 8008804:	b2b6      	uxth	r6, r6
 8008806:	f016 0701 	ands.w	r7, r6, #1
 800880a:	bf1a      	itte	ne
 800880c:	f106 32ff 	addne.w	r2, r6, #4294967295	@ 0xffffffff
 8008810:	fa00 f302 	lslne.w	r3, r0, r2
 8008814:	fa00 f306 	lsleq.w	r3, r0, r6
 8008818:	b29b      	uxth	r3, r3
 800881a:	b21c      	sxth	r4, r3
 800881c:	ee07 4a90 	vmov	s15, r4
 8008820:	eefa 7ae8 	vcvt.f32.s32	s15, s15, #15
 8008824:	4831      	ldr	r0, [pc, #196]	@ (80088ec <arm_sqrt_q15+0xf4>)
 8008826:	ee17 5a90 	vmov	r5, s15
 800882a:	106d      	asrs	r5, r5, #1
 800882c:	1b40      	subs	r0, r0, r5
 800882e:	ee07 0a90 	vmov	s15, r0
 8008832:	eefe 7ac9 	vcvt.s32.f32	s15, s15, #14
 8008836:	b083      	sub	sp, #12
 8008838:	edcd 7a01 	vstr	s15, [sp, #4]
 800883c:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 8008840:	fb15 f005 	smulbb	r0, r5, r5
 8008844:	f3c4 044f 	ubfx	r4, r4, #1, #16
 8008848:	f3c0 30cf 	ubfx	r0, r0, #15, #16
 800884c:	fb10 f004 	smulbb	r0, r0, r4
 8008850:	f340 32cf 	sbfx	r2, r0, #15, #16
 8008854:	f5c2 5040 	rsb	r0, r2, #12288	@ 0x3000
 8008858:	b22a      	sxth	r2, r5
 800885a:	fb00 f202 	mul.w	r2, r0, r2
 800885e:	f342 32cf 	sbfx	r2, r2, #15, #16
 8008862:	0092      	lsls	r2, r2, #2
 8008864:	b292      	uxth	r2, r2
 8008866:	fb12 f002 	smulbb	r0, r2, r2
 800886a:	f3c0 30cf 	ubfx	r0, r0, #15, #16
 800886e:	fb14 f000 	smulbb	r0, r4, r0
 8008872:	f340 3ecf 	sbfx	lr, r0, #15, #16
 8008876:	f5ce 5040 	rsb	r0, lr, #12288	@ 0x3000
 800887a:	fa0f fe82 	sxth.w	lr, r2
 800887e:	fb00 fe0e 	mul.w	lr, r0, lr
 8008882:	f34e 3ecf 	sbfx	lr, lr, #15, #16
 8008886:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800888a:	fa1f fe8e 	uxth.w	lr, lr
 800888e:	fb1e f50e 	smulbb	r5, lr, lr
 8008892:	f3c5 35cf 	ubfx	r5, r5, #15, #16
 8008896:	fb14 f405 	smulbb	r4, r4, r5
 800889a:	f344 32cf 	sbfx	r2, r4, #15, #16
 800889e:	f5c2 5440 	rsb	r4, r2, #12288	@ 0x3000
 80088a2:	fa0f f28e 	sxth.w	r2, lr
 80088a6:	fb04 f202 	mul.w	r2, r4, r2
 80088aa:	f342 32cf 	sbfx	r2, r2, #15, #16
 80088ae:	0092      	lsls	r2, r2, #2
 80088b0:	fb13 f302 	smulbb	r3, r3, r2
 80088b4:	f343 33cf 	sbfx	r3, r3, #15, #16
 80088b8:	005b      	lsls	r3, r3, #1
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	b15f      	cbz	r7, 80088d6 <arm_sqrt_q15+0xde>
 80088be:	3e01      	subs	r6, #1
 80088c0:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 80088c4:	1076      	asrs	r6, r6, #1
 80088c6:	b21b      	sxth	r3, r3
 80088c8:	4133      	asrs	r3, r6
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	2000      	movs	r0, #0
 80088ce:	b240      	sxtb	r0, r0
 80088d0:	800b      	strh	r3, [r1, #0]
 80088d2:	b003      	add	sp, #12
 80088d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088d6:	b21b      	sxth	r3, r3
 80088d8:	f346 064e 	sbfx	r6, r6, #1, #15
 80088dc:	4133      	asrs	r3, r6
 80088de:	b29b      	uxth	r3, r3
 80088e0:	e7f4      	b.n	80088cc <arm_sqrt_q15+0xd4>
 80088e2:	2300      	movs	r3, #0
 80088e4:	20ff      	movs	r0, #255	@ 0xff
 80088e6:	800b      	strh	r3, [r1, #0]
 80088e8:	b240      	sxtb	r0, r0
 80088ea:	4770      	bx	lr
 80088ec:	5f3759df 	.word	0x5f3759df

080088f0 <arm_offset_q15>:
 80088f0:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 80088f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088f6:	eac1 4e01 	pkhbt	lr, r1, r1, lsl #16
 80088fa:	d01a      	beq.n	8008932 <arm_offset_q15+0x42>
 80088fc:	f102 0508 	add.w	r5, r2, #8
 8008900:	f100 0408 	add.w	r4, r0, #8
 8008904:	4667      	mov	r7, ip
 8008906:	f854 6c08 	ldr.w	r6, [r4, #-8]
 800890a:	fa96 f61e 	qadd16	r6, r6, lr
 800890e:	f845 6c08 	str.w	r6, [r5, #-8]
 8008912:	f854 6c04 	ldr.w	r6, [r4, #-4]
 8008916:	fa96 f61e 	qadd16	r6, r6, lr
 800891a:	3f01      	subs	r7, #1
 800891c:	f845 6c04 	str.w	r6, [r5, #-4]
 8008920:	f104 0408 	add.w	r4, r4, #8
 8008924:	f105 0508 	add.w	r5, r5, #8
 8008928:	d1ed      	bne.n	8008906 <arm_offset_q15+0x16>
 800892a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800892e:	4462      	add	r2, ip
 8008930:	4460      	add	r0, ip
 8008932:	f013 0303 	ands.w	r3, r3, #3
 8008936:	d008      	beq.n	800894a <arm_offset_q15+0x5a>
 8008938:	3a02      	subs	r2, #2
 800893a:	f930 4b02 	ldrsh.w	r4, [r0], #2
 800893e:	fa94 f411 	qadd16	r4, r4, r1
 8008942:	3b01      	subs	r3, #1
 8008944:	f822 4f02 	strh.w	r4, [r2, #2]!
 8008948:	d1f7      	bne.n	800893a <arm_offset_q15+0x4a>
 800894a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800894c <arm_cfft_radix4by2_q15>:
 800894c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008950:	084d      	lsrs	r5, r1, #1
 8008952:	b081      	sub	sp, #4
 8008954:	4604      	mov	r4, r0
 8008956:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 800895a:	4616      	mov	r6, r2
 800895c:	d04c      	beq.n	80089f8 <arm_cfft_radix4by2_q15+0xac>
 800895e:	46bc      	mov	ip, r7
 8008960:	4686      	mov	lr, r0
 8008962:	4691      	mov	r9, r2
 8008964:	4629      	mov	r1, r5
 8008966:	f04f 0800 	mov.w	r8, #0
 800896a:	f859 2b04 	ldr.w	r2, [r9], #4
 800896e:	f8de 3000 	ldr.w	r3, [lr]
 8008972:	fa93 fa28 	shadd16	sl, r3, r8
 8008976:	f8dc 0000 	ldr.w	r0, [ip]
 800897a:	fa90 f028 	shadd16	r0, r0, r8
 800897e:	fada fb10 	qsub16	fp, sl, r0
 8008982:	fa9a f020 	shadd16	r0, sl, r0
 8008986:	f84e 0b04 	str.w	r0, [lr], #4
 800898a:	fb22 f00b 	smuad	r0, r2, fp
 800898e:	fb42 f21b 	smusdx	r2, r2, fp
 8008992:	0c13      	lsrs	r3, r2, #16
 8008994:	041b      	lsls	r3, r3, #16
 8008996:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 800899a:	3901      	subs	r1, #1
 800899c:	f84c 3b04 	str.w	r3, [ip], #4
 80089a0:	d1e3      	bne.n	800896a <arm_cfft_radix4by2_q15+0x1e>
 80089a2:	4629      	mov	r1, r5
 80089a4:	4620      	mov	r0, r4
 80089a6:	4632      	mov	r2, r6
 80089a8:	2302      	movs	r3, #2
 80089aa:	f000 f8f5 	bl	8008b98 <arm_radix4_butterfly_q15>
 80089ae:	4629      	mov	r1, r5
 80089b0:	2302      	movs	r3, #2
 80089b2:	4638      	mov	r0, r7
 80089b4:	4632      	mov	r2, r6
 80089b6:	f000 f8ef 	bl	8008b98 <arm_radix4_butterfly_q15>
 80089ba:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80089be:	1ca3      	adds	r3, r4, #2
 80089c0:	f933 7c02 	ldrsh.w	r7, [r3, #-2]
 80089c4:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
 80089c8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80089cc:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80089d0:	007f      	lsls	r7, r7, #1
 80089d2:	0076      	lsls	r6, r6, #1
 80089d4:	0040      	lsls	r0, r0, #1
 80089d6:	0052      	lsls	r2, r2, #1
 80089d8:	f823 7c02 	strh.w	r7, [r3, #-2]
 80089dc:	3408      	adds	r4, #8
 80089de:	f824 6c06 	strh.w	r6, [r4, #-6]
 80089e2:	f824 0c04 	strh.w	r0, [r4, #-4]
 80089e6:	f824 2c02 	strh.w	r2, [r4, #-2]
 80089ea:	42ac      	cmp	r4, r5
 80089ec:	f103 0308 	add.w	r3, r3, #8
 80089f0:	d1e6      	bne.n	80089c0 <arm_cfft_radix4by2_q15+0x74>
 80089f2:	b001      	add	sp, #4
 80089f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089f8:	4629      	mov	r1, r5
 80089fa:	2302      	movs	r3, #2
 80089fc:	f000 f8cc 	bl	8008b98 <arm_radix4_butterfly_q15>
 8008a00:	4638      	mov	r0, r7
 8008a02:	4629      	mov	r1, r5
 8008a04:	4632      	mov	r2, r6
 8008a06:	2302      	movs	r3, #2
 8008a08:	b001      	add	sp, #4
 8008a0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a0e:	f000 b8c3 	b.w	8008b98 <arm_radix4_butterfly_q15>
 8008a12:	bf00      	nop

08008a14 <arm_cfft_radix4by2_inverse_q15>:
 8008a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a18:	084d      	lsrs	r5, r1, #1
 8008a1a:	b081      	sub	sp, #4
 8008a1c:	4604      	mov	r4, r0
 8008a1e:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 8008a22:	4616      	mov	r6, r2
 8008a24:	d04c      	beq.n	8008ac0 <arm_cfft_radix4by2_inverse_q15+0xac>
 8008a26:	46bc      	mov	ip, r7
 8008a28:	4686      	mov	lr, r0
 8008a2a:	4691      	mov	r9, r2
 8008a2c:	4629      	mov	r1, r5
 8008a2e:	f04f 0800 	mov.w	r8, #0
 8008a32:	f859 2b04 	ldr.w	r2, [r9], #4
 8008a36:	f8de 3000 	ldr.w	r3, [lr]
 8008a3a:	fa93 fa28 	shadd16	sl, r3, r8
 8008a3e:	f8dc 0000 	ldr.w	r0, [ip]
 8008a42:	fa90 f028 	shadd16	r0, r0, r8
 8008a46:	fada fb10 	qsub16	fp, sl, r0
 8008a4a:	fa9a f020 	shadd16	r0, sl, r0
 8008a4e:	f84e 0b04 	str.w	r0, [lr], #4
 8008a52:	fb42 f00b 	smusd	r0, r2, fp
 8008a56:	fb22 f21b 	smuadx	r2, r2, fp
 8008a5a:	0c13      	lsrs	r3, r2, #16
 8008a5c:	041b      	lsls	r3, r3, #16
 8008a5e:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8008a62:	3901      	subs	r1, #1
 8008a64:	f84c 3b04 	str.w	r3, [ip], #4
 8008a68:	d1e3      	bne.n	8008a32 <arm_cfft_radix4by2_inverse_q15+0x1e>
 8008a6a:	4629      	mov	r1, r5
 8008a6c:	4620      	mov	r0, r4
 8008a6e:	4632      	mov	r2, r6
 8008a70:	2302      	movs	r3, #2
 8008a72:	f000 f9bf 	bl	8008df4 <arm_radix4_butterfly_inverse_q15>
 8008a76:	4629      	mov	r1, r5
 8008a78:	2302      	movs	r3, #2
 8008a7a:	4638      	mov	r0, r7
 8008a7c:	4632      	mov	r2, r6
 8008a7e:	f000 f9b9 	bl	8008df4 <arm_radix4_butterfly_inverse_q15>
 8008a82:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8008a86:	1ca3      	adds	r3, r4, #2
 8008a88:	f933 7c02 	ldrsh.w	r7, [r3, #-2]
 8008a8c:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
 8008a90:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8008a94:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8008a98:	007f      	lsls	r7, r7, #1
 8008a9a:	0076      	lsls	r6, r6, #1
 8008a9c:	0040      	lsls	r0, r0, #1
 8008a9e:	0052      	lsls	r2, r2, #1
 8008aa0:	f823 7c02 	strh.w	r7, [r3, #-2]
 8008aa4:	3408      	adds	r4, #8
 8008aa6:	f824 6c06 	strh.w	r6, [r4, #-6]
 8008aaa:	f824 0c04 	strh.w	r0, [r4, #-4]
 8008aae:	f824 2c02 	strh.w	r2, [r4, #-2]
 8008ab2:	42ac      	cmp	r4, r5
 8008ab4:	f103 0308 	add.w	r3, r3, #8
 8008ab8:	d1e6      	bne.n	8008a88 <arm_cfft_radix4by2_inverse_q15+0x74>
 8008aba:	b001      	add	sp, #4
 8008abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ac0:	4629      	mov	r1, r5
 8008ac2:	2302      	movs	r3, #2
 8008ac4:	f000 f996 	bl	8008df4 <arm_radix4_butterfly_inverse_q15>
 8008ac8:	4638      	mov	r0, r7
 8008aca:	4629      	mov	r1, r5
 8008acc:	4632      	mov	r2, r6
 8008ace:	2302      	movs	r3, #2
 8008ad0:	b001      	add	sp, #4
 8008ad2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ad6:	f000 b98d 	b.w	8008df4 <arm_radix4_butterfly_inverse_q15>
 8008ada:	bf00      	nop

08008adc <arm_cfft_q15>:
 8008adc:	b570      	push	{r4, r5, r6, lr}
 8008ade:	2a01      	cmp	r2, #1
 8008ae0:	460d      	mov	r5, r1
 8008ae2:	4604      	mov	r4, r0
 8008ae4:	461e      	mov	r6, r3
 8008ae6:	8801      	ldrh	r1, [r0, #0]
 8008ae8:	d024      	beq.n	8008b34 <arm_cfft_q15+0x58>
 8008aea:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8008aee:	d013      	beq.n	8008b18 <arm_cfft_q15+0x3c>
 8008af0:	d808      	bhi.n	8008b04 <arm_cfft_q15+0x28>
 8008af2:	2920      	cmp	r1, #32
 8008af4:	d031      	beq.n	8008b5a <arm_cfft_q15+0x7e>
 8008af6:	d945      	bls.n	8008b84 <arm_cfft_q15+0xa8>
 8008af8:	2940      	cmp	r1, #64	@ 0x40
 8008afa:	d00d      	beq.n	8008b18 <arm_cfft_q15+0x3c>
 8008afc:	2980      	cmp	r1, #128	@ 0x80
 8008afe:	d02c      	beq.n	8008b5a <arm_cfft_q15+0x7e>
 8008b00:	b98e      	cbnz	r6, 8008b26 <arm_cfft_q15+0x4a>
 8008b02:	bd70      	pop	{r4, r5, r6, pc}
 8008b04:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008b08:	d006      	beq.n	8008b18 <arm_cfft_q15+0x3c>
 8008b0a:	d923      	bls.n	8008b54 <arm_cfft_q15+0x78>
 8008b0c:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8008b10:	d023      	beq.n	8008b5a <arm_cfft_q15+0x7e>
 8008b12:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8008b16:	d1f3      	bne.n	8008b00 <arm_cfft_q15+0x24>
 8008b18:	4628      	mov	r0, r5
 8008b1a:	6862      	ldr	r2, [r4, #4]
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	f000 f83b 	bl	8008b98 <arm_radix4_butterfly_q15>
 8008b22:	2e00      	cmp	r6, #0
 8008b24:	d0ed      	beq.n	8008b02 <arm_cfft_q15+0x26>
 8008b26:	4628      	mov	r0, r5
 8008b28:	89a1      	ldrh	r1, [r4, #12]
 8008b2a:	68a2      	ldr	r2, [r4, #8]
 8008b2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008b30:	f7f7 bb7f 	b.w	8000232 <arm_bitreversal_16>
 8008b34:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8008b38:	d01e      	beq.n	8008b78 <arm_cfft_q15+0x9c>
 8008b3a:	d813      	bhi.n	8008b64 <arm_cfft_q15+0x88>
 8008b3c:	2920      	cmp	r1, #32
 8008b3e:	d004      	beq.n	8008b4a <arm_cfft_q15+0x6e>
 8008b40:	d927      	bls.n	8008b92 <arm_cfft_q15+0xb6>
 8008b42:	2940      	cmp	r1, #64	@ 0x40
 8008b44:	d018      	beq.n	8008b78 <arm_cfft_q15+0x9c>
 8008b46:	2980      	cmp	r1, #128	@ 0x80
 8008b48:	d1da      	bne.n	8008b00 <arm_cfft_q15+0x24>
 8008b4a:	4628      	mov	r0, r5
 8008b4c:	6862      	ldr	r2, [r4, #4]
 8008b4e:	f7ff ff61 	bl	8008a14 <arm_cfft_radix4by2_inverse_q15>
 8008b52:	e7d5      	b.n	8008b00 <arm_cfft_q15+0x24>
 8008b54:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8008b58:	d1d2      	bne.n	8008b00 <arm_cfft_q15+0x24>
 8008b5a:	4628      	mov	r0, r5
 8008b5c:	6862      	ldr	r2, [r4, #4]
 8008b5e:	f7ff fef5 	bl	800894c <arm_cfft_radix4by2_q15>
 8008b62:	e7cd      	b.n	8008b00 <arm_cfft_q15+0x24>
 8008b64:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008b68:	d006      	beq.n	8008b78 <arm_cfft_q15+0x9c>
 8008b6a:	d90e      	bls.n	8008b8a <arm_cfft_q15+0xae>
 8008b6c:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8008b70:	d0eb      	beq.n	8008b4a <arm_cfft_q15+0x6e>
 8008b72:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8008b76:	d1c3      	bne.n	8008b00 <arm_cfft_q15+0x24>
 8008b78:	4628      	mov	r0, r5
 8008b7a:	6862      	ldr	r2, [r4, #4]
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	f000 f939 	bl	8008df4 <arm_radix4_butterfly_inverse_q15>
 8008b82:	e7bd      	b.n	8008b00 <arm_cfft_q15+0x24>
 8008b84:	2910      	cmp	r1, #16
 8008b86:	d1bb      	bne.n	8008b00 <arm_cfft_q15+0x24>
 8008b88:	e7c6      	b.n	8008b18 <arm_cfft_q15+0x3c>
 8008b8a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8008b8e:	d0dc      	beq.n	8008b4a <arm_cfft_q15+0x6e>
 8008b90:	e7b6      	b.n	8008b00 <arm_cfft_q15+0x24>
 8008b92:	2910      	cmp	r1, #16
 8008b94:	d1b4      	bne.n	8008b00 <arm_cfft_q15+0x24>
 8008b96:	e7ef      	b.n	8008b78 <arm_cfft_q15+0x9c>

08008b98 <arm_radix4_butterfly_q15>:
 8008b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b9c:	b08f      	sub	sp, #60	@ 0x3c
 8008b9e:	469b      	mov	fp, r3
 8008ba0:	9101      	str	r1, [sp, #4]
 8008ba2:	0889      	lsrs	r1, r1, #2
 8008ba4:	460e      	mov	r6, r1
 8008ba6:	910d      	str	r1, [sp, #52]	@ 0x34
 8008ba8:	0089      	lsls	r1, r1, #2
 8008baa:	4607      	mov	r7, r0
 8008bac:	900c      	str	r0, [sp, #48]	@ 0x30
 8008bae:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8008bb2:	4408      	add	r0, r1
 8008bb4:	2400      	movs	r4, #0
 8008bb6:	1845      	adds	r5, r0, r1
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	4696      	mov	lr, r2
 8008bbc:	9209      	str	r2, [sp, #36]	@ 0x24
 8008bbe:	46b2      	mov	sl, r6
 8008bc0:	4429      	add	r1, r5
 8008bc2:	9302      	str	r3, [sp, #8]
 8008bc4:	4626      	mov	r6, r4
 8008bc6:	4622      	mov	r2, r4
 8008bc8:	f8cd b000 	str.w	fp, [sp]
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	fa93 fc22 	shadd16	ip, r3, r2
 8008bd2:	fa9c fc22 	shadd16	ip, ip, r2
 8008bd6:	682b      	ldr	r3, [r5, #0]
 8008bd8:	fa93 f322 	shadd16	r3, r3, r2
 8008bdc:	fa93 f322 	shadd16	r3, r3, r2
 8008be0:	fa9c f813 	qadd16	r8, ip, r3
 8008be4:	fadc fc13 	qsub16	ip, ip, r3
 8008be8:	6803      	ldr	r3, [r0, #0]
 8008bea:	fa93 f322 	shadd16	r3, r3, r2
 8008bee:	fa93 f922 	shadd16	r9, r3, r2
 8008bf2:	680b      	ldr	r3, [r1, #0]
 8008bf4:	fa93 f322 	shadd16	r3, r3, r2
 8008bf8:	fa93 f322 	shadd16	r3, r3, r2
 8008bfc:	fa99 f313 	qadd16	r3, r9, r3
 8008c00:	fa98 f923 	shadd16	r9, r8, r3
 8008c04:	f847 9b04 	str.w	r9, [r7], #4
 8008c08:	fad8 f313 	qsub16	r3, r8, r3
 8008c0c:	f85e 9036 	ldr.w	r9, [lr, r6, lsl #3]
 8008c10:	fb29 fb03 	smuad	fp, r9, r3
 8008c14:	fb49 f913 	smusdx	r9, r9, r3
 8008c18:	6803      	ldr	r3, [r0, #0]
 8008c1a:	fa93 f322 	shadd16	r3, r3, r2
 8008c1e:	fa93 f822 	shadd16	r8, r3, r2
 8008c22:	ea4f 4919 	mov.w	r9, r9, lsr #16
 8008c26:	ea4f 4909 	mov.w	r9, r9, lsl #16
 8008c2a:	ea49 431b 	orr.w	r3, r9, fp, lsr #16
 8008c2e:	f840 3b04 	str.w	r3, [r0], #4
 8008c32:	680b      	ldr	r3, [r1, #0]
 8008c34:	fa93 f322 	shadd16	r3, r3, r2
 8008c38:	fa93 f322 	shadd16	r3, r3, r2
 8008c3c:	fad8 f313 	qsub16	r3, r8, r3
 8008c40:	faac f913 	qasx	r9, ip, r3
 8008c44:	faec fc13 	qsax	ip, ip, r3
 8008c48:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 8008c4c:	fb23 f80c 	smuad	r8, r3, ip
 8008c50:	fb43 f31c 	smusdx	r3, r3, ip
 8008c54:	0c1b      	lsrs	r3, r3, #16
 8008c56:	041b      	lsls	r3, r3, #16
 8008c58:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8008c5c:	f845 3b04 	str.w	r3, [r5], #4
 8008c60:	f85e 3004 	ldr.w	r3, [lr, r4]
 8008c64:	fb23 fc09 	smuad	ip, r3, r9
 8008c68:	fb43 f319 	smusdx	r3, r3, r9
 8008c6c:	0c1b      	lsrs	r3, r3, #16
 8008c6e:	041b      	lsls	r3, r3, #16
 8008c70:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8008c74:	f841 3b04 	str.w	r3, [r1], #4
 8008c78:	9b00      	ldr	r3, [sp, #0]
 8008c7a:	441e      	add	r6, r3
 8008c7c:	9b02      	ldr	r3, [sp, #8]
 8008c7e:	f1ba 0a01 	subs.w	sl, sl, #1
 8008c82:	441c      	add	r4, r3
 8008c84:	d1a2      	bne.n	8008bcc <arm_radix4_butterfly_q15+0x34>
 8008c86:	f8dd b000 	ldr.w	fp, [sp]
 8008c8a:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8008c8e:	9306      	str	r3, [sp, #24]
 8008c90:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008c92:	2b04      	cmp	r3, #4
 8008c94:	f240 8081 	bls.w	8008d9a <arm_radix4_butterfly_q15+0x202>
 8008c98:	f8cd a008 	str.w	sl, [sp, #8]
 8008c9c:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c9e:	469a      	mov	sl, r3
 8008ca0:	ea4f 039a 	mov.w	r3, sl, lsr #2
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	4611      	mov	r1, r2
 8008ca8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008caa:	9204      	str	r2, [sp, #16]
 8008cac:	1e5a      	subs	r2, r3, #1
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	9308      	str	r3, [sp, #32]
 8008cb2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008cb4:	9207      	str	r2, [sp, #28]
 8008cb6:	9105      	str	r1, [sp, #20]
 8008cb8:	ea4f 078a 	mov.w	r7, sl, lsl #2
 8008cbc:	9303      	str	r3, [sp, #12]
 8008cbe:	9908      	ldr	r1, [sp, #32]
 8008cc0:	9a03      	ldr	r2, [sp, #12]
 8008cc2:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8008cc4:	1850      	adds	r0, r2, r1
 8008cc6:	9a05      	ldr	r2, [sp, #20]
 8008cc8:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8008ccc:	f856 c022 	ldr.w	ip, [r6, r2, lsl #2]
 8008cd0:	f856 9023 	ldr.w	r9, [r6, r3, lsl #2]
 8008cd4:	9b06      	ldr	r3, [sp, #24]
 8008cd6:	f856 8032 	ldr.w	r8, [r6, r2, lsl #3]
 8008cda:	18d3      	adds	r3, r2, r3
 8008cdc:	9305      	str	r3, [sp, #20]
 8008cde:	9a04      	ldr	r2, [sp, #16]
 8008ce0:	9b01      	ldr	r3, [sp, #4]
 8008ce2:	1845      	adds	r5, r0, r1
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	46b6      	mov	lr, r6
 8008ce8:	eb05 0401 	add.w	r4, r5, r1
 8008cec:	9e03      	ldr	r6, [sp, #12]
 8008cee:	d941      	bls.n	8008d74 <arm_radix4_butterfly_q15+0x1dc>
 8008cf0:	eb02 0e0a 	add.w	lr, r2, sl
 8008cf4:	6833      	ldr	r3, [r6, #0]
 8008cf6:	682a      	ldr	r2, [r5, #0]
 8008cf8:	fa93 fb12 	qadd16	fp, r3, r2
 8008cfc:	fad3 f312 	qsub16	r3, r3, r2
 8008d00:	9300      	str	r3, [sp, #0]
 8008d02:	6802      	ldr	r2, [r0, #0]
 8008d04:	6821      	ldr	r1, [r4, #0]
 8008d06:	fa92 f211 	qadd16	r2, r2, r1
 8008d0a:	fa9b f322 	shadd16	r3, fp, r2
 8008d0e:	9902      	ldr	r1, [sp, #8]
 8008d10:	fa93 f121 	shadd16	r1, r3, r1
 8008d14:	6031      	str	r1, [r6, #0]
 8008d16:	443e      	add	r6, r7
 8008d18:	fadb f222 	shsub16	r2, fp, r2
 8008d1c:	fb28 f102 	smuad	r1, r8, r2
 8008d20:	fb48 f212 	smusdx	r2, r8, r2
 8008d24:	0c12      	lsrs	r2, r2, #16
 8008d26:	0412      	lsls	r2, r2, #16
 8008d28:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 8008d2c:	6801      	ldr	r1, [r0, #0]
 8008d2e:	6002      	str	r2, [r0, #0]
 8008d30:	6822      	ldr	r2, [r4, #0]
 8008d32:	4438      	add	r0, r7
 8008d34:	fad1 f212 	qsub16	r2, r1, r2
 8008d38:	9b00      	ldr	r3, [sp, #0]
 8008d3a:	faa3 f122 	shasx	r1, r3, r2
 8008d3e:	fae3 f322 	shsax	r3, r3, r2
 8008d42:	fb2c fb03 	smuad	fp, ip, r3
 8008d46:	fb4c f313 	smusdx	r3, ip, r3
 8008d4a:	0c1b      	lsrs	r3, r3, #16
 8008d4c:	041b      	lsls	r3, r3, #16
 8008d4e:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 8008d52:	602b      	str	r3, [r5, #0]
 8008d54:	443d      	add	r5, r7
 8008d56:	fb29 f301 	smuad	r3, r9, r1
 8008d5a:	fb49 f111 	smusdx	r1, r9, r1
 8008d5e:	0c09      	lsrs	r1, r1, #16
 8008d60:	0409      	lsls	r1, r1, #16
 8008d62:	9a01      	ldr	r2, [sp, #4]
 8008d64:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
 8008d68:	4673      	mov	r3, lr
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	6021      	str	r1, [r4, #0]
 8008d6e:	44d6      	add	lr, sl
 8008d70:	443c      	add	r4, r7
 8008d72:	d8bf      	bhi.n	8008cf4 <arm_radix4_butterfly_q15+0x15c>
 8008d74:	9a03      	ldr	r2, [sp, #12]
 8008d76:	9b04      	ldr	r3, [sp, #16]
 8008d78:	3204      	adds	r2, #4
 8008d7a:	9203      	str	r2, [sp, #12]
 8008d7c:	9a07      	ldr	r2, [sp, #28]
 8008d7e:	3301      	adds	r3, #1
 8008d80:	4293      	cmp	r3, r2
 8008d82:	9304      	str	r3, [sp, #16]
 8008d84:	d99b      	bls.n	8008cbe <arm_radix4_butterfly_q15+0x126>
 8008d86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d88:	9a06      	ldr	r2, [sp, #24]
 8008d8a:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
 8008d8e:	089b      	lsrs	r3, r3, #2
 8008d90:	0092      	lsls	r2, r2, #2
 8008d92:	2b04      	cmp	r3, #4
 8008d94:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d96:	9206      	str	r2, [sp, #24]
 8008d98:	d882      	bhi.n	8008ca0 <arm_radix4_butterfly_q15+0x108>
 8008d9a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8008d9c:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8008d9e:	3410      	adds	r4, #16
 8008da0:	f854 3c10 	ldr.w	r3, [r4, #-16]
 8008da4:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8008da8:	fa93 f117 	qadd16	r1, r3, r7
 8008dac:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 8008db0:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8008db4:	fa92 f510 	qadd16	r5, r2, r0
 8008db8:	fa91 f525 	shadd16	r5, r1, r5
 8008dbc:	f844 5c10 	str.w	r5, [r4, #-16]
 8008dc0:	fa92 f510 	qadd16	r5, r2, r0
 8008dc4:	fad1 f125 	shsub16	r1, r1, r5
 8008dc8:	f844 1c0c 	str.w	r1, [r4, #-12]
 8008dcc:	fad3 f317 	qsub16	r3, r3, r7
 8008dd0:	fad2 f210 	qsub16	r2, r2, r0
 8008dd4:	fae3 f122 	shsax	r1, r3, r2
 8008dd8:	f844 1c08 	str.w	r1, [r4, #-8]
 8008ddc:	faa3 f322 	shasx	r3, r3, r2
 8008de0:	3e01      	subs	r6, #1
 8008de2:	f844 3c04 	str.w	r3, [r4, #-4]
 8008de6:	f104 0410 	add.w	r4, r4, #16
 8008dea:	d1d9      	bne.n	8008da0 <arm_radix4_butterfly_q15+0x208>
 8008dec:	b00f      	add	sp, #60	@ 0x3c
 8008dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008df2:	bf00      	nop

08008df4 <arm_radix4_butterfly_inverse_q15>:
 8008df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df8:	b08f      	sub	sp, #60	@ 0x3c
 8008dfa:	469b      	mov	fp, r3
 8008dfc:	9101      	str	r1, [sp, #4]
 8008dfe:	0889      	lsrs	r1, r1, #2
 8008e00:	460e      	mov	r6, r1
 8008e02:	910d      	str	r1, [sp, #52]	@ 0x34
 8008e04:	0089      	lsls	r1, r1, #2
 8008e06:	4607      	mov	r7, r0
 8008e08:	900c      	str	r0, [sp, #48]	@ 0x30
 8008e0a:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8008e0e:	4408      	add	r0, r1
 8008e10:	2400      	movs	r4, #0
 8008e12:	1845      	adds	r5, r0, r1
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	4696      	mov	lr, r2
 8008e18:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e1a:	46b2      	mov	sl, r6
 8008e1c:	4429      	add	r1, r5
 8008e1e:	9302      	str	r3, [sp, #8]
 8008e20:	4626      	mov	r6, r4
 8008e22:	4622      	mov	r2, r4
 8008e24:	f8cd b000 	str.w	fp, [sp]
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	fa93 fc22 	shadd16	ip, r3, r2
 8008e2e:	fa9c fc22 	shadd16	ip, ip, r2
 8008e32:	682b      	ldr	r3, [r5, #0]
 8008e34:	fa93 f322 	shadd16	r3, r3, r2
 8008e38:	fa93 f322 	shadd16	r3, r3, r2
 8008e3c:	fa9c f813 	qadd16	r8, ip, r3
 8008e40:	fadc fc13 	qsub16	ip, ip, r3
 8008e44:	6803      	ldr	r3, [r0, #0]
 8008e46:	fa93 f322 	shadd16	r3, r3, r2
 8008e4a:	fa93 f922 	shadd16	r9, r3, r2
 8008e4e:	680b      	ldr	r3, [r1, #0]
 8008e50:	fa93 f322 	shadd16	r3, r3, r2
 8008e54:	fa93 f322 	shadd16	r3, r3, r2
 8008e58:	fa99 f313 	qadd16	r3, r9, r3
 8008e5c:	fa98 f923 	shadd16	r9, r8, r3
 8008e60:	f847 9b04 	str.w	r9, [r7], #4
 8008e64:	fad8 f313 	qsub16	r3, r8, r3
 8008e68:	f85e 9036 	ldr.w	r9, [lr, r6, lsl #3]
 8008e6c:	fb49 fb03 	smusd	fp, r9, r3
 8008e70:	fb29 f913 	smuadx	r9, r9, r3
 8008e74:	6803      	ldr	r3, [r0, #0]
 8008e76:	fa93 f322 	shadd16	r3, r3, r2
 8008e7a:	fa93 f822 	shadd16	r8, r3, r2
 8008e7e:	ea4f 4919 	mov.w	r9, r9, lsr #16
 8008e82:	ea4f 4909 	mov.w	r9, r9, lsl #16
 8008e86:	ea49 431b 	orr.w	r3, r9, fp, lsr #16
 8008e8a:	f840 3b04 	str.w	r3, [r0], #4
 8008e8e:	680b      	ldr	r3, [r1, #0]
 8008e90:	fa93 f322 	shadd16	r3, r3, r2
 8008e94:	fa93 f322 	shadd16	r3, r3, r2
 8008e98:	fad8 f313 	qsub16	r3, r8, r3
 8008e9c:	faec f913 	qsax	r9, ip, r3
 8008ea0:	faac fc13 	qasx	ip, ip, r3
 8008ea4:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 8008ea8:	fb43 f80c 	smusd	r8, r3, ip
 8008eac:	fb23 f31c 	smuadx	r3, r3, ip
 8008eb0:	0c1b      	lsrs	r3, r3, #16
 8008eb2:	041b      	lsls	r3, r3, #16
 8008eb4:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8008eb8:	f845 3b04 	str.w	r3, [r5], #4
 8008ebc:	f85e 3004 	ldr.w	r3, [lr, r4]
 8008ec0:	fb43 fc09 	smusd	ip, r3, r9
 8008ec4:	fb23 f319 	smuadx	r3, r3, r9
 8008ec8:	0c1b      	lsrs	r3, r3, #16
 8008eca:	041b      	lsls	r3, r3, #16
 8008ecc:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8008ed0:	f841 3b04 	str.w	r3, [r1], #4
 8008ed4:	9b00      	ldr	r3, [sp, #0]
 8008ed6:	441e      	add	r6, r3
 8008ed8:	9b02      	ldr	r3, [sp, #8]
 8008eda:	f1ba 0a01 	subs.w	sl, sl, #1
 8008ede:	441c      	add	r4, r3
 8008ee0:	d1a2      	bne.n	8008e28 <arm_radix4_butterfly_inverse_q15+0x34>
 8008ee2:	f8dd b000 	ldr.w	fp, [sp]
 8008ee6:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8008eea:	9306      	str	r3, [sp, #24]
 8008eec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008eee:	2b04      	cmp	r3, #4
 8008ef0:	f240 8081 	bls.w	8008ff6 <arm_radix4_butterfly_inverse_q15+0x202>
 8008ef4:	f8cd a008 	str.w	sl, [sp, #8]
 8008ef8:	930a      	str	r3, [sp, #40]	@ 0x28
 8008efa:	469a      	mov	sl, r3
 8008efc:	ea4f 039a 	mov.w	r3, sl, lsr #2
 8008f00:	2200      	movs	r2, #0
 8008f02:	4611      	mov	r1, r2
 8008f04:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f06:	9204      	str	r2, [sp, #16]
 8008f08:	1e5a      	subs	r2, r3, #1
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	9308      	str	r3, [sp, #32]
 8008f0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008f10:	9207      	str	r2, [sp, #28]
 8008f12:	9105      	str	r1, [sp, #20]
 8008f14:	ea4f 078a 	mov.w	r7, sl, lsl #2
 8008f18:	9303      	str	r3, [sp, #12]
 8008f1a:	9908      	ldr	r1, [sp, #32]
 8008f1c:	9a03      	ldr	r2, [sp, #12]
 8008f1e:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8008f20:	1850      	adds	r0, r2, r1
 8008f22:	9a05      	ldr	r2, [sp, #20]
 8008f24:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8008f28:	f856 c022 	ldr.w	ip, [r6, r2, lsl #2]
 8008f2c:	f856 9023 	ldr.w	r9, [r6, r3, lsl #2]
 8008f30:	9b06      	ldr	r3, [sp, #24]
 8008f32:	f856 8032 	ldr.w	r8, [r6, r2, lsl #3]
 8008f36:	18d3      	adds	r3, r2, r3
 8008f38:	9305      	str	r3, [sp, #20]
 8008f3a:	9a04      	ldr	r2, [sp, #16]
 8008f3c:	9b01      	ldr	r3, [sp, #4]
 8008f3e:	1845      	adds	r5, r0, r1
 8008f40:	4293      	cmp	r3, r2
 8008f42:	46b6      	mov	lr, r6
 8008f44:	eb05 0401 	add.w	r4, r5, r1
 8008f48:	9e03      	ldr	r6, [sp, #12]
 8008f4a:	d941      	bls.n	8008fd0 <arm_radix4_butterfly_inverse_q15+0x1dc>
 8008f4c:	eb02 0e0a 	add.w	lr, r2, sl
 8008f50:	6833      	ldr	r3, [r6, #0]
 8008f52:	682a      	ldr	r2, [r5, #0]
 8008f54:	fa93 fb12 	qadd16	fp, r3, r2
 8008f58:	fad3 f312 	qsub16	r3, r3, r2
 8008f5c:	9300      	str	r3, [sp, #0]
 8008f5e:	6802      	ldr	r2, [r0, #0]
 8008f60:	6821      	ldr	r1, [r4, #0]
 8008f62:	fa92 f211 	qadd16	r2, r2, r1
 8008f66:	fa9b f322 	shadd16	r3, fp, r2
 8008f6a:	9902      	ldr	r1, [sp, #8]
 8008f6c:	fa93 f121 	shadd16	r1, r3, r1
 8008f70:	6031      	str	r1, [r6, #0]
 8008f72:	443e      	add	r6, r7
 8008f74:	fadb f222 	shsub16	r2, fp, r2
 8008f78:	fb48 f102 	smusd	r1, r8, r2
 8008f7c:	fb28 f212 	smuadx	r2, r8, r2
 8008f80:	0c12      	lsrs	r2, r2, #16
 8008f82:	0412      	lsls	r2, r2, #16
 8008f84:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 8008f88:	6801      	ldr	r1, [r0, #0]
 8008f8a:	6002      	str	r2, [r0, #0]
 8008f8c:	6822      	ldr	r2, [r4, #0]
 8008f8e:	4438      	add	r0, r7
 8008f90:	fad1 f212 	qsub16	r2, r1, r2
 8008f94:	9b00      	ldr	r3, [sp, #0]
 8008f96:	fae3 f122 	shsax	r1, r3, r2
 8008f9a:	faa3 f322 	shasx	r3, r3, r2
 8008f9e:	fb4c fb03 	smusd	fp, ip, r3
 8008fa2:	fb2c f313 	smuadx	r3, ip, r3
 8008fa6:	0c1b      	lsrs	r3, r3, #16
 8008fa8:	041b      	lsls	r3, r3, #16
 8008faa:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 8008fae:	602b      	str	r3, [r5, #0]
 8008fb0:	443d      	add	r5, r7
 8008fb2:	fb49 f301 	smusd	r3, r9, r1
 8008fb6:	fb29 f111 	smuadx	r1, r9, r1
 8008fba:	0c09      	lsrs	r1, r1, #16
 8008fbc:	0409      	lsls	r1, r1, #16
 8008fbe:	9a01      	ldr	r2, [sp, #4]
 8008fc0:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
 8008fc4:	4673      	mov	r3, lr
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	6021      	str	r1, [r4, #0]
 8008fca:	44d6      	add	lr, sl
 8008fcc:	443c      	add	r4, r7
 8008fce:	d8bf      	bhi.n	8008f50 <arm_radix4_butterfly_inverse_q15+0x15c>
 8008fd0:	9a03      	ldr	r2, [sp, #12]
 8008fd2:	9b04      	ldr	r3, [sp, #16]
 8008fd4:	3204      	adds	r2, #4
 8008fd6:	9203      	str	r2, [sp, #12]
 8008fd8:	9a07      	ldr	r2, [sp, #28]
 8008fda:	3301      	adds	r3, #1
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	9304      	str	r3, [sp, #16]
 8008fe0:	d99b      	bls.n	8008f1a <arm_radix4_butterfly_inverse_q15+0x126>
 8008fe2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fe4:	9a06      	ldr	r2, [sp, #24]
 8008fe6:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
 8008fea:	089b      	lsrs	r3, r3, #2
 8008fec:	0092      	lsls	r2, r2, #2
 8008fee:	2b04      	cmp	r3, #4
 8008ff0:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ff2:	9206      	str	r2, [sp, #24]
 8008ff4:	d882      	bhi.n	8008efc <arm_radix4_butterfly_inverse_q15+0x108>
 8008ff6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8008ff8:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8008ffa:	3410      	adds	r4, #16
 8008ffc:	f854 3c10 	ldr.w	r3, [r4, #-16]
 8009000:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8009004:	fa93 f117 	qadd16	r1, r3, r7
 8009008:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 800900c:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8009010:	fa92 f510 	qadd16	r5, r2, r0
 8009014:	fa91 f525 	shadd16	r5, r1, r5
 8009018:	f844 5c10 	str.w	r5, [r4, #-16]
 800901c:	fa92 f510 	qadd16	r5, r2, r0
 8009020:	fad1 f125 	shsub16	r1, r1, r5
 8009024:	f844 1c0c 	str.w	r1, [r4, #-12]
 8009028:	fad3 f317 	qsub16	r3, r3, r7
 800902c:	fad2 f210 	qsub16	r2, r2, r0
 8009030:	faa3 f122 	shasx	r1, r3, r2
 8009034:	f844 1c08 	str.w	r1, [r4, #-8]
 8009038:	fae3 f322 	shsax	r3, r3, r2
 800903c:	3e01      	subs	r6, #1
 800903e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009042:	f104 0410 	add.w	r4, r4, #16
 8009046:	d1d9      	bne.n	8008ffc <arm_radix4_butterfly_inverse_q15+0x208>
 8009048:	b00f      	add	sp, #60	@ 0x3c
 800904a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800904e:	bf00      	nop

08009050 <memset>:
 8009050:	4402      	add	r2, r0
 8009052:	4603      	mov	r3, r0
 8009054:	4293      	cmp	r3, r2
 8009056:	d100      	bne.n	800905a <memset+0xa>
 8009058:	4770      	bx	lr
 800905a:	f803 1b01 	strb.w	r1, [r3], #1
 800905e:	e7f9      	b.n	8009054 <memset+0x4>

08009060 <__libc_init_array>:
 8009060:	b570      	push	{r4, r5, r6, lr}
 8009062:	4d0d      	ldr	r5, [pc, #52]	@ (8009098 <__libc_init_array+0x38>)
 8009064:	4c0d      	ldr	r4, [pc, #52]	@ (800909c <__libc_init_array+0x3c>)
 8009066:	1b64      	subs	r4, r4, r5
 8009068:	10a4      	asrs	r4, r4, #2
 800906a:	2600      	movs	r6, #0
 800906c:	42a6      	cmp	r6, r4
 800906e:	d109      	bne.n	8009084 <__libc_init_array+0x24>
 8009070:	4d0b      	ldr	r5, [pc, #44]	@ (80090a0 <__libc_init_array+0x40>)
 8009072:	4c0c      	ldr	r4, [pc, #48]	@ (80090a4 <__libc_init_array+0x44>)
 8009074:	f000 f826 	bl	80090c4 <_init>
 8009078:	1b64      	subs	r4, r4, r5
 800907a:	10a4      	asrs	r4, r4, #2
 800907c:	2600      	movs	r6, #0
 800907e:	42a6      	cmp	r6, r4
 8009080:	d105      	bne.n	800908e <__libc_init_array+0x2e>
 8009082:	bd70      	pop	{r4, r5, r6, pc}
 8009084:	f855 3b04 	ldr.w	r3, [r5], #4
 8009088:	4798      	blx	r3
 800908a:	3601      	adds	r6, #1
 800908c:	e7ee      	b.n	800906c <__libc_init_array+0xc>
 800908e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009092:	4798      	blx	r3
 8009094:	3601      	adds	r6, #1
 8009096:	e7f2      	b.n	800907e <__libc_init_array+0x1e>
 8009098:	0801af5c 	.word	0x0801af5c
 800909c:	0801af5c 	.word	0x0801af5c
 80090a0:	0801af5c 	.word	0x0801af5c
 80090a4:	0801af60 	.word	0x0801af60

080090a8 <memcpy>:
 80090a8:	440a      	add	r2, r1
 80090aa:	4291      	cmp	r1, r2
 80090ac:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80090b0:	d100      	bne.n	80090b4 <memcpy+0xc>
 80090b2:	4770      	bx	lr
 80090b4:	b510      	push	{r4, lr}
 80090b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090be:	4291      	cmp	r1, r2
 80090c0:	d1f9      	bne.n	80090b6 <memcpy+0xe>
 80090c2:	bd10      	pop	{r4, pc}

080090c4 <_init>:
 80090c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090c6:	bf00      	nop
 80090c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ca:	bc08      	pop	{r3}
 80090cc:	469e      	mov	lr, r3
 80090ce:	4770      	bx	lr

080090d0 <_fini>:
 80090d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090d2:	bf00      	nop
 80090d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090d6:	bc08      	pop	{r3}
 80090d8:	469e      	mov	lr, r3
 80090da:	4770      	bx	lr
