
Projekt_DOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a250  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800a3d8  0800a3d8  0000b3d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3fc  0800a3fc  0000c87c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3fc  0800a3fc  0000b3fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a404  0800a404  0000c87c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a404  0800a404  0000b404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a408  0800a408  0000b408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000087c  20000000  0800a40c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c87c  2**0
                  CONTENTS
 10 .bss          00002580  2000087c  2000087c  0000c87c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002dfc  20002dfc  0000c87c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c87c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e71b  00000000  00000000  0000c8ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000052a2  00000000  00000000  0002afc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019b8  00000000  00000000  00030270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001372  00000000  00000000  00031c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028029  00000000  00000000  00032f9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023912  00000000  00000000  0005afc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2164  00000000  00000000  0007e8d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000b3  00000000  00000000  00160a39  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006d28  00000000  00000000  00160aec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00167814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00000ed7  00000000  00000000  00167877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 000000c8  00000000  00000000  0016874e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000087c 	.word	0x2000087c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a3c0 	.word	0x0800a3c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000880 	.word	0x20000880
 80001c4:	0800a3c0 	.word	0x0800a3c0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004be:	463b      	mov	r3, r7
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	605a      	str	r2, [r3, #4]
 80004c6:	609a      	str	r2, [r3, #8]
 80004c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004ca:	4b22      	ldr	r3, [pc, #136]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004cc:	4a22      	ldr	r2, [pc, #136]	@ (8000558 <MX_ADC1_Init+0xa0>)
 80004ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004d0:	4b20      	ldr	r3, [pc, #128]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004d2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80004d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80004de:	4b1d      	ldr	r3, [pc, #116]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80004f2:	4b18      	ldr	r3, [pc, #96]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80004f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80004fa:	4b16      	ldr	r3, [pc, #88]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004fc:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000500:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000502:	4b14      	ldr	r3, [pc, #80]	@ (8000554 <MX_ADC1_Init+0x9c>)
 8000504:	2200      	movs	r2, #0
 8000506:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000508:	4b12      	ldr	r3, [pc, #72]	@ (8000554 <MX_ADC1_Init+0x9c>)
 800050a:	2201      	movs	r2, #1
 800050c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800050e:	4b11      	ldr	r3, [pc, #68]	@ (8000554 <MX_ADC1_Init+0x9c>)
 8000510:	2201      	movs	r2, #1
 8000512:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000516:	4b0f      	ldr	r3, [pc, #60]	@ (8000554 <MX_ADC1_Init+0x9c>)
 8000518:	2201      	movs	r2, #1
 800051a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800051c:	480d      	ldr	r0, [pc, #52]	@ (8000554 <MX_ADC1_Init+0x9c>)
 800051e:	f001 f837 	bl	8001590 <HAL_ADC_Init>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000528:	f000 fdc4 	bl	80010b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800052c:	2301      	movs	r3, #1
 800052e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000530:	2301      	movs	r3, #1
 8000532:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000534:	2300      	movs	r3, #0
 8000536:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000538:	463b      	mov	r3, r7
 800053a:	4619      	mov	r1, r3
 800053c:	4805      	ldr	r0, [pc, #20]	@ (8000554 <MX_ADC1_Init+0x9c>)
 800053e:	f001 f98f 	bl	8001860 <HAL_ADC_ConfigChannel>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000548:	f000 fdb4 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800054c:	bf00      	nop
 800054e:	3710      	adds	r7, #16
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	20000898 	.word	0x20000898
 8000558:	40012000 	.word	0x40012000

0800055c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b08a      	sub	sp, #40	@ 0x28
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000564:	f107 0314 	add.w	r3, r7, #20
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a2f      	ldr	r2, [pc, #188]	@ (8000638 <HAL_ADC_MspInit+0xdc>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d157      	bne.n	800062e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	613b      	str	r3, [r7, #16]
 8000582:	4b2e      	ldr	r3, [pc, #184]	@ (800063c <HAL_ADC_MspInit+0xe0>)
 8000584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000586:	4a2d      	ldr	r2, [pc, #180]	@ (800063c <HAL_ADC_MspInit+0xe0>)
 8000588:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800058c:	6453      	str	r3, [r2, #68]	@ 0x44
 800058e:	4b2b      	ldr	r3, [pc, #172]	@ (800063c <HAL_ADC_MspInit+0xe0>)
 8000590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000596:	613b      	str	r3, [r7, #16]
 8000598:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	4b27      	ldr	r3, [pc, #156]	@ (800063c <HAL_ADC_MspInit+0xe0>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a2:	4a26      	ldr	r2, [pc, #152]	@ (800063c <HAL_ADC_MspInit+0xe0>)
 80005a4:	f043 0301 	orr.w	r3, r3, #1
 80005a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005aa:	4b24      	ldr	r3, [pc, #144]	@ (800063c <HAL_ADC_MspInit+0xe0>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80005b6:	2302      	movs	r3, #2
 80005b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ba:	2303      	movs	r3, #3
 80005bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	4619      	mov	r1, r3
 80005c8:	481d      	ldr	r0, [pc, #116]	@ (8000640 <HAL_ADC_MspInit+0xe4>)
 80005ca:	f002 f86b 	bl	80026a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80005ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 80005d0:	4a1d      	ldr	r2, [pc, #116]	@ (8000648 <HAL_ADC_MspInit+0xec>)
 80005d2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80005d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005da:	4b1a      	ldr	r3, [pc, #104]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 80005dc:	2200      	movs	r2, #0
 80005de:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005e0:	4b18      	ldr	r3, [pc, #96]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80005e6:	4b17      	ldr	r3, [pc, #92]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 80005e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005ec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005ee:	4b15      	ldr	r3, [pc, #84]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 80005f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80005f4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80005f6:	4b13      	ldr	r3, [pc, #76]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 80005f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80005fc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80005fe:	4b11      	ldr	r3, [pc, #68]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 8000600:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000604:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000606:	4b0f      	ldr	r3, [pc, #60]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 8000608:	2200      	movs	r2, #0
 800060a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800060c:	4b0d      	ldr	r3, [pc, #52]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 800060e:	2200      	movs	r2, #0
 8000610:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000612:	480c      	ldr	r0, [pc, #48]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 8000614:	f001 fcd6 	bl	8001fc4 <HAL_DMA_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800061e:	f000 fd49 	bl	80010b4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4a07      	ldr	r2, [pc, #28]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 8000626:	639a      	str	r2, [r3, #56]	@ 0x38
 8000628:	4a06      	ldr	r2, [pc, #24]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800062e:	bf00      	nop
 8000630:	3728      	adds	r7, #40	@ 0x28
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40012000 	.word	0x40012000
 800063c:	40023800 	.word	0x40023800
 8000640:	40020000 	.word	0x40020000
 8000644:	200008e0 	.word	0x200008e0
 8000648:	40026410 	.word	0x40026410

0800064c <init_AudioReset>:
#include "i2s.h"
#include "spi.h"
#include "usb_host.h"
#include "gpio.h"
#include "audio.h"
void init_AudioReset() {
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, AUDIO_RESET_PIN, GPIO_PIN_SET);
 8000650:	2201      	movs	r2, #1
 8000652:	2110      	movs	r1, #16
 8000654:	4802      	ldr	r0, [pc, #8]	@ (8000660 <init_AudioReset+0x14>)
 8000656:	f002 f9c1 	bl	80029dc <HAL_GPIO_WritePin>
}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40020c00 	.word	0x40020c00

08000664 <configAudio>:
void configAudio() {
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af02      	add	r7, sp, #8
    uint8_t bytes[2];
    init_AudioReset();
 800066a:	f7ff ffef 	bl	800064c <init_AudioReset>

    /* Power sequence */
    // Set Power Control Register to "on" state
    bytes[0] = 0x02;
 800066e:	2302      	movs	r3, #2
 8000670:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x01;
 8000672:	2301      	movs	r3, #1
 8000674:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000676:	1d3a      	adds	r2, r7, #4
 8000678:	2364      	movs	r3, #100	@ 0x64
 800067a:	9300      	str	r3, [sp, #0]
 800067c:	2302      	movs	r3, #2
 800067e:	2194      	movs	r1, #148	@ 0x94
 8000680:	486f      	ldr	r0, [pc, #444]	@ (8000840 <configAudio+0x1dc>)
 8000682:	f004 fc21 	bl	8004ec8 <HAL_I2C_Master_Transmit>

    /* Initialization sequence */
    bytes[0] = 0x00;
 8000686:	2300      	movs	r3, #0
 8000688:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x99;
 800068a:	2399      	movs	r3, #153	@ 0x99
 800068c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800068e:	1d3a      	adds	r2, r7, #4
 8000690:	2364      	movs	r3, #100	@ 0x64
 8000692:	9300      	str	r3, [sp, #0]
 8000694:	2302      	movs	r3, #2
 8000696:	2194      	movs	r1, #148	@ 0x94
 8000698:	4869      	ldr	r0, [pc, #420]	@ (8000840 <configAudio+0x1dc>)
 800069a:	f004 fc15 	bl	8004ec8 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x47;
 800069e:	2347      	movs	r3, #71	@ 0x47
 80006a0:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x80;
 80006a2:	2380      	movs	r3, #128	@ 0x80
 80006a4:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80006a6:	1d3a      	adds	r2, r7, #4
 80006a8:	2364      	movs	r3, #100	@ 0x64
 80006aa:	9300      	str	r3, [sp, #0]
 80006ac:	2302      	movs	r3, #2
 80006ae:	2194      	movs	r1, #148	@ 0x94
 80006b0:	4863      	ldr	r0, [pc, #396]	@ (8000840 <configAudio+0x1dc>)
 80006b2:	f004 fc09 	bl	8004ec8 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x32;
 80006b6:	2332      	movs	r3, #50	@ 0x32
 80006b8:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x80;
 80006ba:	2380      	movs	r3, #128	@ 0x80
 80006bc:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80006be:	1d3a      	adds	r2, r7, #4
 80006c0:	2364      	movs	r3, #100	@ 0x64
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	2302      	movs	r3, #2
 80006c6:	2194      	movs	r1, #148	@ 0x94
 80006c8:	485d      	ldr	r0, [pc, #372]	@ (8000840 <configAudio+0x1dc>)
 80006ca:	f004 fbfd 	bl	8004ec8 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x32;
 80006ce:	2332      	movs	r3, #50	@ 0x32
 80006d0:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x00;
 80006d2:	2300      	movs	r3, #0
 80006d4:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80006d6:	1d3a      	adds	r2, r7, #4
 80006d8:	2364      	movs	r3, #100	@ 0x64
 80006da:	9300      	str	r3, [sp, #0]
 80006dc:	2302      	movs	r3, #2
 80006de:	2194      	movs	r1, #148	@ 0x94
 80006e0:	4857      	ldr	r0, [pc, #348]	@ (8000840 <configAudio+0x1dc>)
 80006e2:	f004 fbf1 	bl	8004ec8 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x00;
 80006e6:	2300      	movs	r3, #0
 80006e8:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x00;
 80006ea:	2300      	movs	r3, #0
 80006ec:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80006ee:	1d3a      	adds	r2, r7, #4
 80006f0:	2364      	movs	r3, #100	@ 0x64
 80006f2:	9300      	str	r3, [sp, #0]
 80006f4:	2302      	movs	r3, #2
 80006f6:	2194      	movs	r1, #148	@ 0x94
 80006f8:	4851      	ldr	r0, [pc, #324]	@ (8000840 <configAudio+0x1dc>)
 80006fa:	f004 fbe5 	bl	8004ec8 <HAL_I2C_Master_Transmit>

    /* Ctl registers configuration */
    bytes[0] = 0x04;
 80006fe:	2304      	movs	r3, #4
 8000700:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0xAF;
 8000702:	23af      	movs	r3, #175	@ 0xaf
 8000704:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000706:	1d3a      	adds	r2, r7, #4
 8000708:	2364      	movs	r3, #100	@ 0x64
 800070a:	9300      	str	r3, [sp, #0]
 800070c:	2302      	movs	r3, #2
 800070e:	2194      	movs	r1, #148	@ 0x94
 8000710:	484b      	ldr	r0, [pc, #300]	@ (8000840 <configAudio+0x1dc>)
 8000712:	f004 fbd9 	bl	8004ec8 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x0D;
 8000716:	230d      	movs	r3, #13
 8000718:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x70;
 800071a:	2370      	movs	r3, #112	@ 0x70
 800071c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800071e:	1d3a      	adds	r2, r7, #4
 8000720:	2364      	movs	r3, #100	@ 0x64
 8000722:	9300      	str	r3, [sp, #0]
 8000724:	2302      	movs	r3, #2
 8000726:	2194      	movs	r1, #148	@ 0x94
 8000728:	4845      	ldr	r0, [pc, #276]	@ (8000840 <configAudio+0x1dc>)
 800072a:	f004 fbcd 	bl	8004ec8 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x05;
 800072e:	2305      	movs	r3, #5
 8000730:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x81;
 8000732:	2381      	movs	r3, #129	@ 0x81
 8000734:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000736:	1d3a      	adds	r2, r7, #4
 8000738:	2364      	movs	r3, #100	@ 0x64
 800073a:	9300      	str	r3, [sp, #0]
 800073c:	2302      	movs	r3, #2
 800073e:	2194      	movs	r1, #148	@ 0x94
 8000740:	483f      	ldr	r0, [pc, #252]	@ (8000840 <configAudio+0x1dc>)
 8000742:	f004 fbc1 	bl	8004ec8 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x06;
 8000746:	2306      	movs	r3, #6
 8000748:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x07;
 800074a:	2307      	movs	r3, #7
 800074c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800074e:	1d3a      	adds	r2, r7, #4
 8000750:	2364      	movs	r3, #100	@ 0x64
 8000752:	9300      	str	r3, [sp, #0]
 8000754:	2302      	movs	r3, #2
 8000756:	2194      	movs	r1, #148	@ 0x94
 8000758:	4839      	ldr	r0, [pc, #228]	@ (8000840 <configAudio+0x1dc>)
 800075a:	f004 fbb5 	bl	8004ec8 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x0A;
 800075e:	230a      	movs	r3, #10
 8000760:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x00;
 8000762:	2300      	movs	r3, #0
 8000764:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000766:	1d3a      	adds	r2, r7, #4
 8000768:	2364      	movs	r3, #100	@ 0x64
 800076a:	9300      	str	r3, [sp, #0]
 800076c:	2302      	movs	r3, #2
 800076e:	2194      	movs	r1, #148	@ 0x94
 8000770:	4833      	ldr	r0, [pc, #204]	@ (8000840 <configAudio+0x1dc>)
 8000772:	f004 fba9 	bl	8004ec8 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x27;
 8000776:	2327      	movs	r3, #39	@ 0x27
 8000778:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x00;
 800077a:	2300      	movs	r3, #0
 800077c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800077e:	1d3a      	adds	r2, r7, #4
 8000780:	2364      	movs	r3, #100	@ 0x64
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	2302      	movs	r3, #2
 8000786:	2194      	movs	r1, #148	@ 0x94
 8000788:	482d      	ldr	r0, [pc, #180]	@ (8000840 <configAudio+0x1dc>)
 800078a:	f004 fb9d 	bl	8004ec8 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x1F;
 800078e:	231f      	movs	r3, #31
 8000790:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x0F;
 8000792:	230f      	movs	r3, #15
 8000794:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000796:	1d3a      	adds	r2, r7, #4
 8000798:	2364      	movs	r3, #100	@ 0x64
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	2302      	movs	r3, #2
 800079e:	2194      	movs	r1, #148	@ 0x94
 80007a0:	4827      	ldr	r0, [pc, #156]	@ (8000840 <configAudio+0x1dc>)
 80007a2:	f004 fb91 	bl	8004ec8 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x22;
 80007a6:	2322      	movs	r3, #34	@ 0x22
 80007a8:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0xC0;
 80007aa:	23c0      	movs	r3, #192	@ 0xc0
 80007ac:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80007ae:	1d3a      	adds	r2, r7, #4
 80007b0:	2364      	movs	r3, #100	@ 0x64
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	2302      	movs	r3, #2
 80007b6:	2194      	movs	r1, #148	@ 0x94
 80007b8:	4821      	ldr	r0, [pc, #132]	@ (8000840 <configAudio+0x1dc>)
 80007ba:	f004 fb85 	bl	8004ec8 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x14;
 80007be:	2314      	movs	r3, #20
 80007c0:	713b      	strb	r3, [r7, #4]
    bytes[1] = 2;
 80007c2:	2302      	movs	r3, #2
 80007c4:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80007c6:	1d3a      	adds	r2, r7, #4
 80007c8:	2364      	movs	r3, #100	@ 0x64
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	2302      	movs	r3, #2
 80007ce:	2194      	movs	r1, #148	@ 0x94
 80007d0:	481b      	ldr	r0, [pc, #108]	@ (8000840 <configAudio+0x1dc>)
 80007d2:	f004 fb79 	bl	8004ec8 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x15;
 80007d6:	2315      	movs	r3, #21
 80007d8:	713b      	strb	r3, [r7, #4]
    bytes[1] = 2;
 80007da:	2302      	movs	r3, #2
 80007dc:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80007de:	1d3a      	adds	r2, r7, #4
 80007e0:	2364      	movs	r3, #100	@ 0x64
 80007e2:	9300      	str	r3, [sp, #0]
 80007e4:	2302      	movs	r3, #2
 80007e6:	2194      	movs	r1, #148	@ 0x94
 80007e8:	4815      	ldr	r0, [pc, #84]	@ (8000840 <configAudio+0x1dc>)
 80007ea:	f004 fb6d 	bl	8004ec8 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x20;
 80007ee:	2320      	movs	r3, #32
 80007f0:	713b      	strb	r3, [r7, #4]
    bytes[1] = 24;
 80007f2:	2318      	movs	r3, #24
 80007f4:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80007f6:	1d3a      	adds	r2, r7, #4
 80007f8:	2364      	movs	r3, #100	@ 0x64
 80007fa:	9300      	str	r3, [sp, #0]
 80007fc:	2302      	movs	r3, #2
 80007fe:	2194      	movs	r1, #148	@ 0x94
 8000800:	480f      	ldr	r0, [pc, #60]	@ (8000840 <configAudio+0x1dc>)
 8000802:	f004 fb61 	bl	8004ec8 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x21;
 8000806:	2321      	movs	r3, #33	@ 0x21
 8000808:	713b      	strb	r3, [r7, #4]
    bytes[1] = 24;
 800080a:	2318      	movs	r3, #24
 800080c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800080e:	1d3a      	adds	r2, r7, #4
 8000810:	2364      	movs	r3, #100	@ 0x64
 8000812:	9300      	str	r3, [sp, #0]
 8000814:	2302      	movs	r3, #2
 8000816:	2194      	movs	r1, #148	@ 0x94
 8000818:	4809      	ldr	r0, [pc, #36]	@ (8000840 <configAudio+0x1dc>)
 800081a:	f004 fb55 	bl	8004ec8 <HAL_I2C_Master_Transmit>

    /* Power up */
    bytes[0] = 0x02;
 800081e:	2302      	movs	r3, #2
 8000820:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x9E;
 8000822:	239e      	movs	r3, #158	@ 0x9e
 8000824:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000826:	1d3a      	adds	r2, r7, #4
 8000828:	2364      	movs	r3, #100	@ 0x64
 800082a:	9300      	str	r3, [sp, #0]
 800082c:	2302      	movs	r3, #2
 800082e:	2194      	movs	r1, #148	@ 0x94
 8000830:	4803      	ldr	r0, [pc, #12]	@ (8000840 <configAudio+0x1dc>)
 8000832:	f004 fb49 	bl	8004ec8 <HAL_I2C_Master_Transmit>
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000940 	.word	0x20000940

08000844 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b17      	ldr	r3, [pc, #92]	@ (80008ac <MX_DMA_Init+0x68>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a16      	ldr	r2, [pc, #88]	@ (80008ac <MX_DMA_Init+0x68>)
 8000854:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b14      	ldr	r3, [pc, #80]	@ (80008ac <MX_DMA_Init+0x68>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	4b10      	ldr	r3, [pc, #64]	@ (80008ac <MX_DMA_Init+0x68>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a0f      	ldr	r2, [pc, #60]	@ (80008ac <MX_DMA_Init+0x68>)
 8000870:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b0d      	ldr	r3, [pc, #52]	@ (80008ac <MX_DMA_Init+0x68>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	2100      	movs	r1, #0
 8000886:	2010      	movs	r0, #16
 8000888:	f001 fb65 	bl	8001f56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800088c:	2010      	movs	r0, #16
 800088e:	f001 fb7e 	bl	8001f8e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	2100      	movs	r1, #0
 8000896:	2038      	movs	r0, #56	@ 0x38
 8000898:	f001 fb5d 	bl	8001f56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800089c:	2038      	movs	r0, #56	@ 0x38
 800089e:	f001 fb76 	bl	8001f8e <HAL_NVIC_EnableIRQ>

}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40023800 	.word	0x40023800

080008b0 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08c      	sub	sp, #48	@ 0x30
 80008b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	61bb      	str	r3, [r7, #24]
 80008ca:	4b72      	ldr	r3, [pc, #456]	@ (8000a94 <MX_GPIO_Init+0x1e4>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a71      	ldr	r2, [pc, #452]	@ (8000a94 <MX_GPIO_Init+0x1e4>)
 80008d0:	f043 0310 	orr.w	r3, r3, #16
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b6f      	ldr	r3, [pc, #444]	@ (8000a94 <MX_GPIO_Init+0x1e4>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f003 0310 	and.w	r3, r3, #16
 80008de:	61bb      	str	r3, [r7, #24]
 80008e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	617b      	str	r3, [r7, #20]
 80008e6:	4b6b      	ldr	r3, [pc, #428]	@ (8000a94 <MX_GPIO_Init+0x1e4>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	4a6a      	ldr	r2, [pc, #424]	@ (8000a94 <MX_GPIO_Init+0x1e4>)
 80008ec:	f043 0304 	orr.w	r3, r3, #4
 80008f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f2:	4b68      	ldr	r3, [pc, #416]	@ (8000a94 <MX_GPIO_Init+0x1e4>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	f003 0304 	and.w	r3, r3, #4
 80008fa:	617b      	str	r3, [r7, #20]
 80008fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	613b      	str	r3, [r7, #16]
 8000902:	4b64      	ldr	r3, [pc, #400]	@ (8000a94 <MX_GPIO_Init+0x1e4>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	4a63      	ldr	r2, [pc, #396]	@ (8000a94 <MX_GPIO_Init+0x1e4>)
 8000908:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800090c:	6313      	str	r3, [r2, #48]	@ 0x30
 800090e:	4b61      	ldr	r3, [pc, #388]	@ (8000a94 <MX_GPIO_Init+0x1e4>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	4b5d      	ldr	r3, [pc, #372]	@ (8000a94 <MX_GPIO_Init+0x1e4>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	4a5c      	ldr	r2, [pc, #368]	@ (8000a94 <MX_GPIO_Init+0x1e4>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6313      	str	r3, [r2, #48]	@ 0x30
 800092a:	4b5a      	ldr	r3, [pc, #360]	@ (8000a94 <MX_GPIO_Init+0x1e4>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	4b56      	ldr	r3, [pc, #344]	@ (8000a94 <MX_GPIO_Init+0x1e4>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	4a55      	ldr	r2, [pc, #340]	@ (8000a94 <MX_GPIO_Init+0x1e4>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	6313      	str	r3, [r2, #48]	@ 0x30
 8000946:	4b53      	ldr	r3, [pc, #332]	@ (8000a94 <MX_GPIO_Init+0x1e4>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b4f      	ldr	r3, [pc, #316]	@ (8000a94 <MX_GPIO_Init+0x1e4>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a4e      	ldr	r2, [pc, #312]	@ (8000a94 <MX_GPIO_Init+0x1e4>)
 800095c:	f043 0308 	orr.w	r3, r3, #8
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
 8000962:	4b4c      	ldr	r3, [pc, #304]	@ (8000a94 <MX_GPIO_Init+0x1e4>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	f003 0308 	and.w	r3, r3, #8
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	2108      	movs	r1, #8
 8000972:	4849      	ldr	r0, [pc, #292]	@ (8000a98 <MX_GPIO_Init+0x1e8>)
 8000974:	f002 f832 	bl	80029dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000978:	2201      	movs	r2, #1
 800097a:	2101      	movs	r1, #1
 800097c:	4847      	ldr	r0, [pc, #284]	@ (8000a9c <MX_GPIO_Init+0x1ec>)
 800097e:	f002 f82d 	bl	80029dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000982:	2200      	movs	r2, #0
 8000984:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000988:	4845      	ldr	r0, [pc, #276]	@ (8000aa0 <MX_GPIO_Init+0x1f0>)
 800098a:	f002 f827 	bl	80029dc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800098e:	2308      	movs	r3, #8
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	483c      	ldr	r0, [pc, #240]	@ (8000a98 <MX_GPIO_Init+0x1e8>)
 80009a6:	f001 fe7d 	bl	80026a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009aa:	2301      	movs	r3, #1
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	4836      	ldr	r0, [pc, #216]	@ (8000a9c <MX_GPIO_Init+0x1ec>)
 80009c2:	f001 fe6f 	bl	80026a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009c6:	2308      	movs	r3, #8
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	2302      	movs	r3, #2
 80009cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009d6:	2305      	movs	r3, #5
 80009d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	482e      	ldr	r0, [pc, #184]	@ (8000a9c <MX_GPIO_Init+0x1ec>)
 80009e2:	f001 fe5f 	bl	80026a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009e6:	2301      	movs	r3, #1
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ea:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	4619      	mov	r1, r3
 80009fa:	482a      	ldr	r0, [pc, #168]	@ (8000aa4 <MX_GPIO_Init+0x1f4>)
 80009fc:	f001 fe52 	bl	80026a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a00:	2304      	movs	r3, #4
 8000a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a04:	2300      	movs	r3, #0
 8000a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	4825      	ldr	r0, [pc, #148]	@ (8000aa8 <MX_GPIO_Init+0x1f8>)
 8000a14:	f001 fe46 	bl	80026a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	2300      	movs	r3, #0
 8000a28:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a2a:	2305      	movs	r3, #5
 8000a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	4619      	mov	r1, r3
 8000a34:	481c      	ldr	r0, [pc, #112]	@ (8000aa8 <MX_GPIO_Init+0x1f8>)
 8000a36:	f001 fe35 	bl	80026a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a3a:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000a3e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a40:	2301      	movs	r3, #1
 8000a42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	4619      	mov	r1, r3
 8000a52:	4813      	ldr	r0, [pc, #76]	@ (8000aa0 <MX_GPIO_Init+0x1f0>)
 8000a54:	f001 fe26 	bl	80026a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a58:	2320      	movs	r3, #32
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 031c 	add.w	r3, r7, #28
 8000a68:	4619      	mov	r1, r3
 8000a6a:	480d      	ldr	r0, [pc, #52]	@ (8000aa0 <MX_GPIO_Init+0x1f0>)
 8000a6c:	f001 fe1a 	bl	80026a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a70:	2302      	movs	r3, #2
 8000a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a74:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	4619      	mov	r1, r3
 8000a84:	4804      	ldr	r0, [pc, #16]	@ (8000a98 <MX_GPIO_Init+0x1e8>)
 8000a86:	f001 fe0d 	bl	80026a4 <HAL_GPIO_Init>

}
 8000a8a:	bf00      	nop
 8000a8c:	3730      	adds	r7, #48	@ 0x30
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	40020800 	.word	0x40020800
 8000aa0:	40020c00 	.word	0x40020c00
 8000aa4:	40020000 	.word	0x40020000
 8000aa8:	40020400 	.word	0x40020400

08000aac <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ab0:	4b12      	ldr	r3, [pc, #72]	@ (8000afc <MX_I2C1_Init+0x50>)
 8000ab2:	4a13      	ldr	r2, [pc, #76]	@ (8000b00 <MX_I2C1_Init+0x54>)
 8000ab4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ab6:	4b11      	ldr	r3, [pc, #68]	@ (8000afc <MX_I2C1_Init+0x50>)
 8000ab8:	4a12      	ldr	r2, [pc, #72]	@ (8000b04 <MX_I2C1_Init+0x58>)
 8000aba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	@ (8000afc <MX_I2C1_Init+0x50>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8000afc <MX_I2C1_Init+0x50>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8000afc <MX_I2C1_Init+0x50>)
 8000aca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ace:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8000afc <MX_I2C1_Init+0x50>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ad6:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <MX_I2C1_Init+0x50>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000adc:	4b07      	ldr	r3, [pc, #28]	@ (8000afc <MX_I2C1_Init+0x50>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ae2:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <MX_I2C1_Init+0x50>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ae8:	4804      	ldr	r0, [pc, #16]	@ (8000afc <MX_I2C1_Init+0x50>)
 8000aea:	f004 f8a9 	bl	8004c40 <HAL_I2C_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000af4:	f000 fade 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000940 	.word	0x20000940
 8000b00:	40005400 	.word	0x40005400
 8000b04:	000186a0 	.word	0x000186a0

08000b08 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08a      	sub	sp, #40	@ 0x28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a19      	ldr	r2, [pc, #100]	@ (8000b8c <HAL_I2C_MspInit+0x84>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d12c      	bne.n	8000b84 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	4b18      	ldr	r3, [pc, #96]	@ (8000b90 <HAL_I2C_MspInit+0x88>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	4a17      	ldr	r2, [pc, #92]	@ (8000b90 <HAL_I2C_MspInit+0x88>)
 8000b34:	f043 0302 	orr.w	r3, r3, #2
 8000b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b3a:	4b15      	ldr	r3, [pc, #84]	@ (8000b90 <HAL_I2C_MspInit+0x88>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	613b      	str	r3, [r7, #16]
 8000b44:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b46:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b4c:	2312      	movs	r3, #18
 8000b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b50:	2301      	movs	r3, #1
 8000b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	2300      	movs	r3, #0
 8000b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b58:	2304      	movs	r3, #4
 8000b5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4619      	mov	r1, r3
 8000b62:	480c      	ldr	r0, [pc, #48]	@ (8000b94 <HAL_I2C_MspInit+0x8c>)
 8000b64:	f001 fd9e 	bl	80026a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	4b08      	ldr	r3, [pc, #32]	@ (8000b90 <HAL_I2C_MspInit+0x88>)
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b70:	4a07      	ldr	r2, [pc, #28]	@ (8000b90 <HAL_I2C_MspInit+0x88>)
 8000b72:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b76:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b78:	4b05      	ldr	r3, [pc, #20]	@ (8000b90 <HAL_I2C_MspInit+0x88>)
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b84:	bf00      	nop
 8000b86:	3728      	adds	r7, #40	@ 0x28
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40005400 	.word	0x40005400
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40020400 	.word	0x40020400

08000b98 <MX_I2S3_Init>:
I2S_HandleTypeDef hi2s3;
DMA_HandleTypeDef hdma_spi3_tx;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000b9c:	4b13      	ldr	r3, [pc, #76]	@ (8000bec <MX_I2S3_Init+0x54>)
 8000b9e:	4a14      	ldr	r2, [pc, #80]	@ (8000bf0 <MX_I2S3_Init+0x58>)
 8000ba0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000ba2:	4b12      	ldr	r3, [pc, #72]	@ (8000bec <MX_I2S3_Init+0x54>)
 8000ba4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ba8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000baa:	4b10      	ldr	r3, [pc, #64]	@ (8000bec <MX_I2S3_Init+0x54>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000bec <MX_I2S3_Init+0x54>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000bec <MX_I2S3_Init+0x54>)
 8000bb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bbc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000bec <MX_I2S3_Init+0x54>)
 8000bc0:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8000bc4:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000bc6:	4b09      	ldr	r3, [pc, #36]	@ (8000bec <MX_I2S3_Init+0x54>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000bcc:	4b07      	ldr	r3, [pc, #28]	@ (8000bec <MX_I2S3_Init+0x54>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000bd2:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <MX_I2S3_Init+0x54>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000bd8:	4804      	ldr	r0, [pc, #16]	@ (8000bec <MX_I2S3_Init+0x54>)
 8000bda:	f004 fccf 	bl	800557c <HAL_I2S_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000be4:	f000 fa66 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000994 	.word	0x20000994
 8000bf0:	40003c00 	.word	0x40003c00

08000bf4 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08e      	sub	sp, #56	@ 0x38
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a49      	ldr	r2, [pc, #292]	@ (8000d44 <HAL_I2S_MspInit+0x150>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	f040 808b 	bne.w	8000d3c <HAL_I2S_MspInit+0x148>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c26:	2301      	movs	r3, #1
 8000c28:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000c2a:	23c0      	movs	r3, #192	@ 0xc0
 8000c2c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4618      	mov	r0, r3
 8000c38:	f005 febc 	bl	80069b4 <HAL_RCCEx_PeriphCLKConfig>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8000c42:	f000 fa37 	bl	80010b4 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	4b3f      	ldr	r3, [pc, #252]	@ (8000d48 <HAL_I2S_MspInit+0x154>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4e:	4a3e      	ldr	r2, [pc, #248]	@ (8000d48 <HAL_I2S_MspInit+0x154>)
 8000c50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c56:	4b3c      	ldr	r3, [pc, #240]	@ (8000d48 <HAL_I2S_MspInit+0x154>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	4b38      	ldr	r3, [pc, #224]	@ (8000d48 <HAL_I2S_MspInit+0x154>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	4a37      	ldr	r2, [pc, #220]	@ (8000d48 <HAL_I2S_MspInit+0x154>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c72:	4b35      	ldr	r3, [pc, #212]	@ (8000d48 <HAL_I2S_MspInit+0x154>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60bb      	str	r3, [r7, #8]
 8000c82:	4b31      	ldr	r3, [pc, #196]	@ (8000d48 <HAL_I2S_MspInit+0x154>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	4a30      	ldr	r2, [pc, #192]	@ (8000d48 <HAL_I2S_MspInit+0x154>)
 8000c88:	f043 0304 	orr.w	r3, r3, #4
 8000c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8e:	4b2e      	ldr	r3, [pc, #184]	@ (8000d48 <HAL_I2S_MspInit+0x154>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	f003 0304 	and.w	r3, r3, #4
 8000c96:	60bb      	str	r3, [r7, #8]
 8000c98:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c9a:	2310      	movs	r3, #16
 8000c9c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000caa:	2306      	movs	r3, #6
 8000cac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000cae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4825      	ldr	r0, [pc, #148]	@ (8000d4c <HAL_I2S_MspInit+0x158>)
 8000cb6:	f001 fcf5 	bl	80026a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000cba:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000cbe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ccc:	2306      	movs	r3, #6
 8000cce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	481e      	ldr	r0, [pc, #120]	@ (8000d50 <HAL_I2S_MspInit+0x15c>)
 8000cd8:	f001 fce4 	bl	80026a4 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8000cdc:	4b1d      	ldr	r3, [pc, #116]	@ (8000d54 <HAL_I2S_MspInit+0x160>)
 8000cde:	4a1e      	ldr	r2, [pc, #120]	@ (8000d58 <HAL_I2S_MspInit+0x164>)
 8000ce0:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8000ce2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d54 <HAL_I2S_MspInit+0x160>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ce8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d54 <HAL_I2S_MspInit+0x160>)
 8000cea:	2240      	movs	r2, #64	@ 0x40
 8000cec:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cee:	4b19      	ldr	r3, [pc, #100]	@ (8000d54 <HAL_I2S_MspInit+0x160>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cf4:	4b17      	ldr	r3, [pc, #92]	@ (8000d54 <HAL_I2S_MspInit+0x160>)
 8000cf6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cfa:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cfc:	4b15      	ldr	r3, [pc, #84]	@ (8000d54 <HAL_I2S_MspInit+0x160>)
 8000cfe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d02:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d04:	4b13      	ldr	r3, [pc, #76]	@ (8000d54 <HAL_I2S_MspInit+0x160>)
 8000d06:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d0a:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8000d0c:	4b11      	ldr	r3, [pc, #68]	@ (8000d54 <HAL_I2S_MspInit+0x160>)
 8000d0e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d12:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d14:	4b0f      	ldr	r3, [pc, #60]	@ (8000d54 <HAL_I2S_MspInit+0x160>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d54 <HAL_I2S_MspInit+0x160>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000d20:	480c      	ldr	r0, [pc, #48]	@ (8000d54 <HAL_I2S_MspInit+0x160>)
 8000d22:	f001 f94f 	bl	8001fc4 <HAL_DMA_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <HAL_I2S_MspInit+0x13c>
    {
      Error_Handler();
 8000d2c:	f000 f9c2 	bl	80010b4 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi3_tx);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a08      	ldr	r2, [pc, #32]	@ (8000d54 <HAL_I2S_MspInit+0x160>)
 8000d34:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d36:	4a07      	ldr	r2, [pc, #28]	@ (8000d54 <HAL_I2S_MspInit+0x160>)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000d3c:	bf00      	nop
 8000d3e:	3738      	adds	r7, #56	@ 0x38
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40003c00 	.word	0x40003c00
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40020000 	.word	0x40020000
 8000d50:	40020800 	.word	0x40020800
 8000d54:	200009dc 	.word	0x200009dc
 8000d58:	40026088 	.word	0x40026088
 8000d5c:	00000000 	.word	0x00000000

08000d60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d64:	f000 fb7e 	bl	8001464 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d68:	f000 f870 	bl	8000e4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d6c:	f7ff fda0 	bl	80008b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d70:	f7ff fd68 	bl	8000844 <MX_DMA_Init>
  MX_I2C1_Init();
 8000d74:	f7ff fe9a 	bl	8000aac <MX_I2C1_Init>
  MX_I2S3_Init();
 8000d78:	f7ff ff0e 	bl	8000b98 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000d7c:	f000 f9a0 	bl	80010c0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000d80:	f008 fce4 	bl	800974c <MX_USB_HOST_Init>
  MX_TIM2_Init();
 8000d84:	f000 fad8 	bl	8001338 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000d88:	f7ff fb96 	bl	80004b8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  configAudio();
 8000d8c:	f7ff fc6a 	bl	8000664 <configAudio>
  init_fir_filter();
 8000d90:	f000 f8e8 	bl	8000f64 <init_fir_filter>

  HAL_TIM_Base_Start(&htim2);
 8000d94:	4824      	ldr	r0, [pc, #144]	@ (8000e28 <main+0xc8>)
 8000d96:	f006 f827 	bl	8006de8 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, adc_signal, BUFFER_SIZE);
 8000d9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d9e:	4923      	ldr	r1, [pc, #140]	@ (8000e2c <main+0xcc>)
 8000da0:	4823      	ldr	r0, [pc, #140]	@ (8000e30 <main+0xd0>)
 8000da2:	f000 fc39 	bl	8001618 <HAL_ADC_Start_DMA>

  HAL_I2S_Transmit_DMA(&hi2s3, filtered_signal, BUFFER_SIZE);
 8000da6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000daa:	4922      	ldr	r1, [pc, #136]	@ (8000e34 <main+0xd4>)
 8000dac:	4822      	ldr	r0, [pc, #136]	@ (8000e38 <main+0xd8>)
 8000dae:	f004 fd25 	bl	80057fc <HAL_I2S_Transmit_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if (fx_ready == 1) {
 8000db2:	4b22      	ldr	r3, [pc, #136]	@ (8000e3c <main+0xdc>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d1fa      	bne.n	8000db2 <main+0x52>
		fx_ready = 0;
 8000dbc:	4b1f      	ldr	r3, [pc, #124]	@ (8000e3c <main+0xdc>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	701a      	strb	r2, [r3, #0]
		 convert_to_q15(adc_signal, conv_signal, BUFFER_SIZE);
 8000dc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dc6:	491e      	ldr	r1, [pc, #120]	@ (8000e40 <main+0xe0>)
 8000dc8:	4818      	ldr	r0, [pc, #96]	@ (8000e2c <main+0xcc>)
 8000dca:	f000 f8a9 	bl	8000f20 <convert_to_q15>

        last_systick = HAL_GetTick();
 8000dce:	f000 fbaf 	bl	8001530 <HAL_GetTick>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	4a1b      	ldr	r2, [pc, #108]	@ (8000e44 <main+0xe4>)
 8000dd6:	6013      	str	r3, [r2, #0]
//		echo_effect_q15(conv_signal, output_signal, BUFFER_SIZE);
//		tremolo_effect(conv_signal, output_signal, BUFFER_SIZE, 440);
//		smooth_signal_q15(conv_signal, output_signal, BUFFER_SIZE, 5);
//		last_systick = HAL_GetTick();

		last_systick = HAL_GetTick();
 8000dd8:	f000 fbaa 	bl	8001530 <HAL_GetTick>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	4a19      	ldr	r2, [pc, #100]	@ (8000e44 <main+0xe4>)
 8000de0:	6013      	str	r3, [r2, #0]
		amplify_signal_q15(conv_signal, gained_signal, BUFFER_SIZE, 1.2f);
 8000de2:	ed9f 0b0f 	vldr	d0, [pc, #60]	@ 8000e20 <main+0xc0>
 8000de6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dea:	4917      	ldr	r1, [pc, #92]	@ (8000e48 <main+0xe8>)
 8000dec:	4814      	ldr	r0, [pc, #80]	@ (8000e40 <main+0xe0>)
 8000dee:	f000 f8fb 	bl	8000fe8 <amplify_signal_q15>
		last_systick = HAL_GetTick();
 8000df2:	f000 fb9d 	bl	8001530 <HAL_GetTick>
 8000df6:	4603      	mov	r3, r0
 8000df8:	4a12      	ldr	r2, [pc, #72]	@ (8000e44 <main+0xe4>)
 8000dfa:	6013      	str	r3, [r2, #0]
		fir_filter(gained_signal, filtered_signal); //traje 3 milisekunde
 8000dfc:	490d      	ldr	r1, [pc, #52]	@ (8000e34 <main+0xd4>)
 8000dfe:	4812      	ldr	r0, [pc, #72]	@ (8000e48 <main+0xe8>)
 8000e00:	f000 f8ce 	bl	8000fa0 <fir_filter>
		last_systick = HAL_GetTick();
 8000e04:	f000 fb94 	bl	8001530 <HAL_GetTick>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	4a0e      	ldr	r2, [pc, #56]	@ (8000e44 <main+0xe4>)
 8000e0c:	6013      	str	r3, [r2, #0]




        last_systick = HAL_GetTick();
 8000e0e:	f000 fb8f 	bl	8001530 <HAL_GetTick>
 8000e12:	4603      	mov	r3, r0
 8000e14:	4a0b      	ldr	r2, [pc, #44]	@ (8000e44 <main+0xe4>)
 8000e16:	6013      	str	r3, [r2, #0]
    if (fx_ready == 1) {
 8000e18:	e7cb      	b.n	8000db2 <main+0x52>
 8000e1a:	bf00      	nop
 8000e1c:	f3af 8000 	nop.w
 8000e20:	40000000 	.word	0x40000000
 8000e24:	3ff33333 	.word	0x3ff33333
 8000e28:	200024ac 	.word	0x200024ac
 8000e2c:	20000a3c 	.word	0x20000a3c
 8000e30:	20000898 	.word	0x20000898
 8000e34:	20001244 	.word	0x20001244
 8000e38:	20000994 	.word	0x20000994
 8000e3c:	20000e3c 	.word	0x20000e3c
 8000e40:	20000e44 	.word	0x20000e44
 8000e44:	20000e40 	.word	0x20000e40
 8000e48:	20001644 	.word	0x20001644

08000e4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b094      	sub	sp, #80	@ 0x50
 8000e50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e52:	f107 0320 	add.w	r3, r7, #32
 8000e56:	2230      	movs	r2, #48	@ 0x30
 8000e58:	2100      	movs	r1, #0
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f009 fa22 	bl	800a2a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e60:	f107 030c 	add.w	r3, r7, #12
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e70:	2300      	movs	r3, #0
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	4b28      	ldr	r3, [pc, #160]	@ (8000f18 <SystemClock_Config+0xcc>)
 8000e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e78:	4a27      	ldr	r2, [pc, #156]	@ (8000f18 <SystemClock_Config+0xcc>)
 8000e7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e80:	4b25      	ldr	r3, [pc, #148]	@ (8000f18 <SystemClock_Config+0xcc>)
 8000e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e88:	60bb      	str	r3, [r7, #8]
 8000e8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	4b22      	ldr	r3, [pc, #136]	@ (8000f1c <SystemClock_Config+0xd0>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a21      	ldr	r2, [pc, #132]	@ (8000f1c <SystemClock_Config+0xd0>)
 8000e96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e9a:	6013      	str	r3, [r2, #0]
 8000e9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000f1c <SystemClock_Config+0xd0>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000eac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000eb0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eb6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ebc:	2304      	movs	r3, #4
 8000ebe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ec0:	23a8      	movs	r3, #168	@ 0xa8
 8000ec2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ec8:	2307      	movs	r3, #7
 8000eca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ecc:	f107 0320 	add.w	r3, r7, #32
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f005 f8eb 	bl	80060ac <HAL_RCC_OscConfig>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000edc:	f000 f8ea 	bl	80010b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee0:	230f      	movs	r3, #15
 8000ee2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000eec:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ef0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ef2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ef6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ef8:	f107 030c 	add.w	r3, r7, #12
 8000efc:	2105      	movs	r1, #5
 8000efe:	4618      	mov	r0, r3
 8000f00:	f005 fb4c 	bl	800659c <HAL_RCC_ClockConfig>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f0a:	f000 f8d3 	bl	80010b4 <Error_Handler>
  }
}
 8000f0e:	bf00      	nop
 8000f10:	3750      	adds	r7, #80	@ 0x50
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	40007000 	.word	0x40007000

08000f20 <convert_to_q15>:
}



//FIR FILTER
void convert_to_q15(uint16_t *rawInput, q15_t *convertedSignal, int size) {
 8000f20:	b480      	push	{r7}
 8000f22:	b087      	sub	sp, #28
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++) {
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	e00d      	b.n	8000f4e <convert_to_q15+0x2e>
        // Map uint16_t (0 to 65535) to q15_t (-32768 to 32767)
//        convertedSignal[i] = (q15_t)((int32_t)(rawInput[i] - 32768));
        convertedSignal[i] = (q15_t)((int32_t)(rawInput[i] - 0));
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	4413      	add	r3, r2
 8000f3a:	8819      	ldrh	r1, [r3, #0]
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	68ba      	ldr	r2, [r7, #8]
 8000f42:	4413      	add	r3, r2
 8000f44:	b20a      	sxth	r2, r1
 8000f46:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	617b      	str	r3, [r7, #20]
 8000f4e:	697a      	ldr	r2, [r7, #20]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	429a      	cmp	r2, r3
 8000f54:	dbed      	blt.n	8000f32 <convert_to_q15+0x12>
    }
}
 8000f56:	bf00      	nop
 8000f58:	bf00      	nop
 8000f5a:	371c      	adds	r7, #28
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <init_fir_filter>:

void init_fir_filter(void) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af02      	add	r7, sp, #8
    arm_float_to_q15(firCoeffs, firCoeffsQ15, NUM_TAPS);
 8000f6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f6e:	4908      	ldr	r1, [pc, #32]	@ (8000f90 <init_fir_filter+0x2c>)
 8000f70:	4808      	ldr	r0, [pc, #32]	@ (8000f94 <init_fir_filter+0x30>)
 8000f72:	f008 fe9f 	bl	8009cb4 <arm_float_to_q15>
    arm_fir_init_q15(&S, NUM_TAPS, firCoeffsQ15, firStateQ15, BLOCK_SIZE);
 8000f76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f7a:	9300      	str	r3, [sp, #0]
 8000f7c:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <init_fir_filter+0x34>)
 8000f7e:	4a04      	ldr	r2, [pc, #16]	@ (8000f90 <init_fir_filter+0x2c>)
 8000f80:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f84:	4805      	ldr	r0, [pc, #20]	@ (8000f9c <init_fir_filter+0x38>)
 8000f86:	f009 f8b9 	bl	800a0fc <arm_fir_init_q15>
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20001a44 	.word	0x20001a44
 8000f94:	20000000 	.word	0x20000000
 8000f98:	20001e44 	.word	0x20001e44
 8000f9c:	20002444 	.word	0x20002444

08000fa0 <fir_filter>:
void fir_filter(q15_t *input, q15_t *output) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < BUFFER_SIZE; i += BLOCK_SIZE) {
 8000faa:	2300      	movs	r3, #0
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	e010      	b.n	8000fd2 <fir_filter+0x32>
        arm_fir_q15(&S, &input[i], &output[i], BLOCK_SIZE);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	18d1      	adds	r1, r2, r3
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	683a      	ldr	r2, [r7, #0]
 8000fbe:	441a      	add	r2, r3
 8000fc0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fc4:	4807      	ldr	r0, [pc, #28]	@ (8000fe4 <fir_filter+0x44>)
 8000fc6:	f008 ff0d 	bl	8009de4 <arm_fir_q15>
    for (int i = 0; i < BUFFER_SIZE; i += BLOCK_SIZE) {
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000fd8:	dbea      	blt.n	8000fb0 <fir_filter+0x10>
    }
}
 8000fda:	bf00      	nop
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20002444 	.word	0x20002444

08000fe8 <amplify_signal_q15>:
    arm_cmplx_mag_q15(fftOutput, magnitudeSpectrum, FFT_SIZE / 2); //ovo je za magnitudes, mora biti /2 jer je simetrično, nyquistov dijagram iz automatskog samo poz frekv
}



void amplify_signal_q15(q15_t *input, q15_t *output, int len, float gain) {
 8000fe8:	b480      	push	{r7}
 8000fea:	b087      	sub	sp, #28
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
 8000ff4:	ed87 0a00 	vstr	s0, [r7]
    for (int i = 0; i < len; i++) {
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
 8000ffc:	e034      	b.n	8001068 <amplify_signal_q15+0x80>
        // Multiply input by gain
    	int32_t amplified = (int32_t)((float)input[i] * gain);
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	4413      	add	r3, r2
 8001006:	f9b3 3000 	ldrsh.w	r3, [r3]
 800100a:	ee07 3a90 	vmov	s15, r3
 800100e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001012:	edd7 7a00 	vldr	s15, [r7]
 8001016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800101a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800101e:	ee17 3a90 	vmov	r3, s15
 8001022:	613b      	str	r3, [r7, #16]

        // Saturate to prevent overflow
        if (amplified > 32767) {
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800102a:	db07      	blt.n	800103c <amplify_signal_q15+0x54>
            output[i] = 32767;
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	68ba      	ldr	r2, [r7, #8]
 8001032:	4413      	add	r3, r2
 8001034:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001038:	801a      	strh	r2, [r3, #0]
 800103a:	e012      	b.n	8001062 <amplify_signal_q15+0x7a>
        } else if (amplified < -32768) {
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8001042:	da07      	bge.n	8001054 <amplify_signal_q15+0x6c>
            output[i] = -32768;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	68ba      	ldr	r2, [r7, #8]
 800104a:	4413      	add	r3, r2
 800104c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001050:	801a      	strh	r2, [r3, #0]
 8001052:	e006      	b.n	8001062 <amplify_signal_q15+0x7a>
        } else {
            output[i] = (q15_t)amplified;
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	68ba      	ldr	r2, [r7, #8]
 800105a:	4413      	add	r3, r2
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	b212      	sxth	r2, r2
 8001060:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < len; i++) {
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	3301      	adds	r3, #1
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	697a      	ldr	r2, [r7, #20]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	429a      	cmp	r2, r3
 800106e:	dbc6      	blt.n	8000ffe <amplify_signal_q15+0x16>
        }
    }
}
 8001070:	bf00      	nop
 8001072:	bf00      	nop
 8001074:	371c      	adds	r7, #28
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
	...

08001080 <HAL_ADC_ConvCpltCallback>:



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc1) {
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	fx_ready = 1;
 8001088:	4b04      	ldr	r3, [pc, #16]	@ (800109c <HAL_ADC_ConvCpltCallback+0x1c>)
 800108a:	2201      	movs	r2, #1
 800108c:	701a      	strb	r2, [r3, #0]
//	last_dma_systick = __HAL_TIM_GET_COUNTER(&htim2);
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	20000e3c 	.word	0x20000e3c

080010a0 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
    if (hi2s->Instance == SPI3) {
    }
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b8:	b672      	cpsid	i
}
 80010ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010bc:	bf00      	nop
 80010be:	e7fd      	b.n	80010bc <Error_Handler+0x8>

080010c0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80010c4:	4b17      	ldr	r3, [pc, #92]	@ (8001124 <MX_SPI1_Init+0x64>)
 80010c6:	4a18      	ldr	r2, [pc, #96]	@ (8001128 <MX_SPI1_Init+0x68>)
 80010c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010ca:	4b16      	ldr	r3, [pc, #88]	@ (8001124 <MX_SPI1_Init+0x64>)
 80010cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010d2:	4b14      	ldr	r3, [pc, #80]	@ (8001124 <MX_SPI1_Init+0x64>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010d8:	4b12      	ldr	r3, [pc, #72]	@ (8001124 <MX_SPI1_Init+0x64>)
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010de:	4b11      	ldr	r3, [pc, #68]	@ (8001124 <MX_SPI1_Init+0x64>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001124 <MX_SPI1_Init+0x64>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001124 <MX_SPI1_Init+0x64>)
 80010ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001124 <MX_SPI1_Init+0x64>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001124 <MX_SPI1_Init+0x64>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010fe:	4b09      	ldr	r3, [pc, #36]	@ (8001124 <MX_SPI1_Init+0x64>)
 8001100:	2200      	movs	r2, #0
 8001102:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001104:	4b07      	ldr	r3, [pc, #28]	@ (8001124 <MX_SPI1_Init+0x64>)
 8001106:	2200      	movs	r2, #0
 8001108:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800110a:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <MX_SPI1_Init+0x64>)
 800110c:	220a      	movs	r2, #10
 800110e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001110:	4804      	ldr	r0, [pc, #16]	@ (8001124 <MX_SPI1_Init+0x64>)
 8001112:	f005 fd91 	bl	8006c38 <HAL_SPI_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800111c:	f7ff ffca 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20002450 	.word	0x20002450
 8001128:	40013000 	.word	0x40013000

0800112c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08a      	sub	sp, #40	@ 0x28
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a19      	ldr	r2, [pc, #100]	@ (80011b0 <HAL_SPI_MspInit+0x84>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d12b      	bne.n	80011a6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	4b18      	ldr	r3, [pc, #96]	@ (80011b4 <HAL_SPI_MspInit+0x88>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001156:	4a17      	ldr	r2, [pc, #92]	@ (80011b4 <HAL_SPI_MspInit+0x88>)
 8001158:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800115c:	6453      	str	r3, [r2, #68]	@ 0x44
 800115e:	4b15      	ldr	r3, [pc, #84]	@ (80011b4 <HAL_SPI_MspInit+0x88>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001162:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	4b11      	ldr	r3, [pc, #68]	@ (80011b4 <HAL_SPI_MspInit+0x88>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001172:	4a10      	ldr	r2, [pc, #64]	@ (80011b4 <HAL_SPI_MspInit+0x88>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	6313      	str	r3, [r2, #48]	@ 0x30
 800117a:	4b0e      	ldr	r3, [pc, #56]	@ (80011b4 <HAL_SPI_MspInit+0x88>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001186:	23e0      	movs	r3, #224	@ 0xe0
 8001188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	2302      	movs	r3, #2
 800118c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001192:	2300      	movs	r3, #0
 8001194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001196:	2305      	movs	r3, #5
 8001198:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	4619      	mov	r1, r3
 80011a0:	4805      	ldr	r0, [pc, #20]	@ (80011b8 <HAL_SPI_MspInit+0x8c>)
 80011a2:	f001 fa7f 	bl	80026a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80011a6:	bf00      	nop
 80011a8:	3728      	adds	r7, #40	@ 0x28
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40013000 	.word	0x40013000
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40020000 	.word	0x40020000

080011bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	4b10      	ldr	r3, [pc, #64]	@ (8001208 <HAL_MspInit+0x4c>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001208 <HAL_MspInit+0x4c>)
 80011cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80011d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001208 <HAL_MspInit+0x4c>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	603b      	str	r3, [r7, #0]
 80011e2:	4b09      	ldr	r3, [pc, #36]	@ (8001208 <HAL_MspInit+0x4c>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e6:	4a08      	ldr	r2, [pc, #32]	@ (8001208 <HAL_MspInit+0x4c>)
 80011e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ee:	4b06      	ldr	r3, [pc, #24]	@ (8001208 <HAL_MspInit+0x4c>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011fa:	2007      	movs	r0, #7
 80011fc:	f000 fea0 	bl	8001f40 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40023800 	.word	0x40023800

0800120c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001210:	bf00      	nop
 8001212:	e7fd      	b.n	8001210 <NMI_Handler+0x4>

08001214 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001218:	bf00      	nop
 800121a:	e7fd      	b.n	8001218 <HardFault_Handler+0x4>

0800121c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001220:	bf00      	nop
 8001222:	e7fd      	b.n	8001220 <MemManage_Handler+0x4>

08001224 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001228:	bf00      	nop
 800122a:	e7fd      	b.n	8001228 <BusFault_Handler+0x4>

0800122c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001230:	bf00      	nop
 8001232:	e7fd      	b.n	8001230 <UsageFault_Handler+0x4>

08001234 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001262:	f000 f951 	bl	8001508 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001270:	4802      	ldr	r0, [pc, #8]	@ (800127c <DMA1_Stream5_IRQHandler+0x10>)
 8001272:	f000 ffad 	bl	80021d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200009dc 	.word	0x200009dc

08001280 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001284:	4802      	ldr	r0, [pc, #8]	@ (8001290 <DMA2_Stream0_IRQHandler+0x10>)
 8001286:	f000 ffa3 	bl	80021d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200008e0 	.word	0x200008e0

08001294 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001298:	4802      	ldr	r0, [pc, #8]	@ (80012a4 <OTG_FS_IRQHandler+0x10>)
 800129a:	f001 fe99 	bl	8002fd0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	200028d4 	.word	0x200028d4

080012a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012b0:	4a14      	ldr	r2, [pc, #80]	@ (8001304 <_sbrk+0x5c>)
 80012b2:	4b15      	ldr	r3, [pc, #84]	@ (8001308 <_sbrk+0x60>)
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012bc:	4b13      	ldr	r3, [pc, #76]	@ (800130c <_sbrk+0x64>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d102      	bne.n	80012ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012c4:	4b11      	ldr	r3, [pc, #68]	@ (800130c <_sbrk+0x64>)
 80012c6:	4a12      	ldr	r2, [pc, #72]	@ (8001310 <_sbrk+0x68>)
 80012c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ca:	4b10      	ldr	r3, [pc, #64]	@ (800130c <_sbrk+0x64>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4413      	add	r3, r2
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d207      	bcs.n	80012e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012d8:	f008 fffc 	bl	800a2d4 <__errno>
 80012dc:	4603      	mov	r3, r0
 80012de:	220c      	movs	r2, #12
 80012e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012e6:	e009      	b.n	80012fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012e8:	4b08      	ldr	r3, [pc, #32]	@ (800130c <_sbrk+0x64>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ee:	4b07      	ldr	r3, [pc, #28]	@ (800130c <_sbrk+0x64>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4413      	add	r3, r2
 80012f6:	4a05      	ldr	r2, [pc, #20]	@ (800130c <_sbrk+0x64>)
 80012f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012fa:	68fb      	ldr	r3, [r7, #12]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20020000 	.word	0x20020000
 8001308:	00000400 	.word	0x00000400
 800130c:	200024a8 	.word	0x200024a8
 8001310:	20002e00 	.word	0x20002e00

08001314 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001318:	4b06      	ldr	r3, [pc, #24]	@ (8001334 <SystemInit+0x20>)
 800131a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800131e:	4a05      	ldr	r2, [pc, #20]	@ (8001334 <SystemInit+0x20>)
 8001320:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001324:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800133e:	f107 0308 	add.w	r3, r7, #8
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800134c:	463b      	mov	r3, r7
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001354:	4b1d      	ldr	r3, [pc, #116]	@ (80013cc <MX_TIM2_Init+0x94>)
 8001356:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800135a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 800135c:	4b1b      	ldr	r3, [pc, #108]	@ (80013cc <MX_TIM2_Init+0x94>)
 800135e:	2253      	movs	r2, #83	@ 0x53
 8001360:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001362:	4b1a      	ldr	r3, [pc, #104]	@ (80013cc <MX_TIM2_Init+0x94>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 23-1;
 8001368:	4b18      	ldr	r3, [pc, #96]	@ (80013cc <MX_TIM2_Init+0x94>)
 800136a:	2216      	movs	r2, #22
 800136c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800136e:	4b17      	ldr	r3, [pc, #92]	@ (80013cc <MX_TIM2_Init+0x94>)
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001374:	4b15      	ldr	r3, [pc, #84]	@ (80013cc <MX_TIM2_Init+0x94>)
 8001376:	2200      	movs	r2, #0
 8001378:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800137a:	4814      	ldr	r0, [pc, #80]	@ (80013cc <MX_TIM2_Init+0x94>)
 800137c:	f005 fce5 	bl	8006d4a <HAL_TIM_Base_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001386:	f7ff fe95 	bl	80010b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800138a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800138e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001390:	f107 0308 	add.w	r3, r7, #8
 8001394:	4619      	mov	r1, r3
 8001396:	480d      	ldr	r0, [pc, #52]	@ (80013cc <MX_TIM2_Init+0x94>)
 8001398:	f005 fd8e 	bl	8006eb8 <HAL_TIM_ConfigClockSource>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80013a2:	f7ff fe87 	bl	80010b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80013a6:	2320      	movs	r3, #32
 80013a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013ae:	463b      	mov	r3, r7
 80013b0:	4619      	mov	r1, r3
 80013b2:	4806      	ldr	r0, [pc, #24]	@ (80013cc <MX_TIM2_Init+0x94>)
 80013b4:	f005 ff8e 	bl	80072d4 <HAL_TIMEx_MasterConfigSynchronization>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80013be:	f7ff fe79 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013c2:	bf00      	nop
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	200024ac 	.word	0x200024ac

080013d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013e0:	d10d      	bne.n	80013fe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	4b09      	ldr	r3, [pc, #36]	@ (800140c <HAL_TIM_Base_MspInit+0x3c>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ea:	4a08      	ldr	r2, [pc, #32]	@ (800140c <HAL_TIM_Base_MspInit+0x3c>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80013f2:	4b06      	ldr	r3, [pc, #24]	@ (800140c <HAL_TIM_Base_MspInit+0x3c>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80013fe:	bf00      	nop
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	40023800 	.word	0x40023800

08001410 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001410:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001448 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001414:	f7ff ff7e 	bl	8001314 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001418:	480c      	ldr	r0, [pc, #48]	@ (800144c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800141a:	490d      	ldr	r1, [pc, #52]	@ (8001450 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800141c:	4a0d      	ldr	r2, [pc, #52]	@ (8001454 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800141e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001420:	e002      	b.n	8001428 <LoopCopyDataInit>

08001422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001426:	3304      	adds	r3, #4

08001428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800142a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800142c:	d3f9      	bcc.n	8001422 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800142e:	4a0a      	ldr	r2, [pc, #40]	@ (8001458 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001430:	4c0a      	ldr	r4, [pc, #40]	@ (800145c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001434:	e001      	b.n	800143a <LoopFillZerobss>

08001436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001438:	3204      	adds	r2, #4

0800143a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800143a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800143c:	d3fb      	bcc.n	8001436 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800143e:	f008 ff4f 	bl	800a2e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001442:	f7ff fc8d 	bl	8000d60 <main>
  bx  lr    
 8001446:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001448:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800144c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001450:	2000087c 	.word	0x2000087c
  ldr r2, =_sidata
 8001454:	0800a40c 	.word	0x0800a40c
  ldr r2, =_sbss
 8001458:	2000087c 	.word	0x2000087c
  ldr r4, =_ebss
 800145c:	20002dfc 	.word	0x20002dfc

08001460 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001460:	e7fe      	b.n	8001460 <ADC_IRQHandler>
	...

08001464 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001468:	4b0e      	ldr	r3, [pc, #56]	@ (80014a4 <HAL_Init+0x40>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a0d      	ldr	r2, [pc, #52]	@ (80014a4 <HAL_Init+0x40>)
 800146e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001472:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001474:	4b0b      	ldr	r3, [pc, #44]	@ (80014a4 <HAL_Init+0x40>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a0a      	ldr	r2, [pc, #40]	@ (80014a4 <HAL_Init+0x40>)
 800147a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800147e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001480:	4b08      	ldr	r3, [pc, #32]	@ (80014a4 <HAL_Init+0x40>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a07      	ldr	r2, [pc, #28]	@ (80014a4 <HAL_Init+0x40>)
 8001486:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800148a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800148c:	2003      	movs	r0, #3
 800148e:	f000 fd57 	bl	8001f40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001492:	2000      	movs	r0, #0
 8001494:	f000 f808 	bl	80014a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001498:	f7ff fe90 	bl	80011bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40023c00 	.word	0x40023c00

080014a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014b0:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <HAL_InitTick+0x54>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4b12      	ldr	r3, [pc, #72]	@ (8001500 <HAL_InitTick+0x58>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	4619      	mov	r1, r3
 80014ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014be:	fbb3 f3f1 	udiv	r3, r3, r1
 80014c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 fd6f 	bl	8001faa <HAL_SYSTICK_Config>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e00e      	b.n	80014f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b0f      	cmp	r3, #15
 80014da:	d80a      	bhi.n	80014f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014dc:	2200      	movs	r2, #0
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014e4:	f000 fd37 	bl	8001f56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e8:	4a06      	ldr	r2, [pc, #24]	@ (8001504 <HAL_InitTick+0x5c>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
 80014f0:	e000      	b.n	80014f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000800 	.word	0x20000800
 8001500:	20000808 	.word	0x20000808
 8001504:	20000804 	.word	0x20000804

08001508 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800150c:	4b06      	ldr	r3, [pc, #24]	@ (8001528 <HAL_IncTick+0x20>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	461a      	mov	r2, r3
 8001512:	4b06      	ldr	r3, [pc, #24]	@ (800152c <HAL_IncTick+0x24>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4413      	add	r3, r2
 8001518:	4a04      	ldr	r2, [pc, #16]	@ (800152c <HAL_IncTick+0x24>)
 800151a:	6013      	str	r3, [r2, #0]
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	20000808 	.word	0x20000808
 800152c:	200024f4 	.word	0x200024f4

08001530 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return uwTick;
 8001534:	4b03      	ldr	r3, [pc, #12]	@ (8001544 <HAL_GetTick+0x14>)
 8001536:	681b      	ldr	r3, [r3, #0]
}
 8001538:	4618      	mov	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	200024f4 	.word	0x200024f4

08001548 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001550:	f7ff ffee 	bl	8001530 <HAL_GetTick>
 8001554:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001560:	d005      	beq.n	800156e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001562:	4b0a      	ldr	r3, [pc, #40]	@ (800158c <HAL_Delay+0x44>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	461a      	mov	r2, r3
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	4413      	add	r3, r2
 800156c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800156e:	bf00      	nop
 8001570:	f7ff ffde 	bl	8001530 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	429a      	cmp	r2, r3
 800157e:	d8f7      	bhi.n	8001570 <HAL_Delay+0x28>
  {
  }
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000808 	.word	0x20000808

08001590 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001598:	2300      	movs	r3, #0
 800159a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d101      	bne.n	80015a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e033      	b.n	800160e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d109      	bne.n	80015c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7fe ffd4 	bl	800055c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c6:	f003 0310 	and.w	r3, r3, #16
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d118      	bne.n	8001600 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80015d6:	f023 0302 	bic.w	r3, r3, #2
 80015da:	f043 0202 	orr.w	r2, r3, #2
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f000 fa5e 	bl	8001aa4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f2:	f023 0303 	bic.w	r3, r3, #3
 80015f6:	f043 0201 	orr.w	r2, r3, #1
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	641a      	str	r2, [r3, #64]	@ 0x40
 80015fe:	e001      	b.n	8001604 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800160c:	7bfb      	ldrb	r3, [r7, #15]
}
 800160e:	4618      	mov	r0, r3
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001624:	2300      	movs	r3, #0
 8001626:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800162e:	2b01      	cmp	r3, #1
 8001630:	d101      	bne.n	8001636 <HAL_ADC_Start_DMA+0x1e>
 8001632:	2302      	movs	r3, #2
 8001634:	e0e9      	b.n	800180a <HAL_ADC_Start_DMA+0x1f2>
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2201      	movs	r2, #1
 800163a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	2b01      	cmp	r3, #1
 800164a:	d018      	beq.n	800167e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	689a      	ldr	r2, [r3, #8]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f042 0201 	orr.w	r2, r2, #1
 800165a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800165c:	4b6d      	ldr	r3, [pc, #436]	@ (8001814 <HAL_ADC_Start_DMA+0x1fc>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a6d      	ldr	r2, [pc, #436]	@ (8001818 <HAL_ADC_Start_DMA+0x200>)
 8001662:	fba2 2303 	umull	r2, r3, r2, r3
 8001666:	0c9a      	lsrs	r2, r3, #18
 8001668:	4613      	mov	r3, r2
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	4413      	add	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001670:	e002      	b.n	8001678 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	3b01      	subs	r3, #1
 8001676:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f9      	bne.n	8001672 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001688:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800168c:	d107      	bne.n	800169e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	689a      	ldr	r2, [r3, #8]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800169c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	f040 80a1 	bne.w	80017f0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80016b6:	f023 0301 	bic.w	r3, r3, #1
 80016ba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d007      	beq.n	80016e0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80016d8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80016ec:	d106      	bne.n	80016fc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f2:	f023 0206 	bic.w	r2, r3, #6
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	645a      	str	r2, [r3, #68]	@ 0x44
 80016fa:	e002      	b.n	8001702 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2200      	movs	r2, #0
 8001700:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800170a:	4b44      	ldr	r3, [pc, #272]	@ (800181c <HAL_ADC_Start_DMA+0x204>)
 800170c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001712:	4a43      	ldr	r2, [pc, #268]	@ (8001820 <HAL_ADC_Start_DMA+0x208>)
 8001714:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800171a:	4a42      	ldr	r2, [pc, #264]	@ (8001824 <HAL_ADC_Start_DMA+0x20c>)
 800171c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001722:	4a41      	ldr	r2, [pc, #260]	@ (8001828 <HAL_ADC_Start_DMA+0x210>)
 8001724:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800172e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800173e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	689a      	ldr	r2, [r3, #8]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800174e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	334c      	adds	r3, #76	@ 0x4c
 800175a:	4619      	mov	r1, r3
 800175c:	68ba      	ldr	r2, [r7, #8]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f000 fcde 	bl	8002120 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 031f 	and.w	r3, r3, #31
 800176c:	2b00      	cmp	r3, #0
 800176e:	d12a      	bne.n	80017c6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a2d      	ldr	r2, [pc, #180]	@ (800182c <HAL_ADC_Start_DMA+0x214>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d015      	beq.n	80017a6 <HAL_ADC_Start_DMA+0x18e>
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a2c      	ldr	r2, [pc, #176]	@ (8001830 <HAL_ADC_Start_DMA+0x218>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d105      	bne.n	8001790 <HAL_ADC_Start_DMA+0x178>
 8001784:	4b25      	ldr	r3, [pc, #148]	@ (800181c <HAL_ADC_Start_DMA+0x204>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f003 031f 	and.w	r3, r3, #31
 800178c:	2b00      	cmp	r3, #0
 800178e:	d00a      	beq.n	80017a6 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a27      	ldr	r2, [pc, #156]	@ (8001834 <HAL_ADC_Start_DMA+0x21c>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d136      	bne.n	8001808 <HAL_ADC_Start_DMA+0x1f0>
 800179a:	4b20      	ldr	r3, [pc, #128]	@ (800181c <HAL_ADC_Start_DMA+0x204>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f003 0310 	and.w	r3, r3, #16
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d130      	bne.n	8001808 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d129      	bne.n	8001808 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	689a      	ldr	r2, [r3, #8]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	e020      	b.n	8001808 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a18      	ldr	r2, [pc, #96]	@ (800182c <HAL_ADC_Start_DMA+0x214>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d11b      	bne.n	8001808 <HAL_ADC_Start_DMA+0x1f0>
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d114      	bne.n	8001808 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	e00b      	b.n	8001808 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f4:	f043 0210 	orr.w	r2, r3, #16
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001800:	f043 0201 	orr.w	r2, r3, #1
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000800 	.word	0x20000800
 8001818:	431bde83 	.word	0x431bde83
 800181c:	40012300 	.word	0x40012300
 8001820:	08001c9d 	.word	0x08001c9d
 8001824:	08001d57 	.word	0x08001d57
 8001828:	08001d73 	.word	0x08001d73
 800182c:	40012000 	.word	0x40012000
 8001830:	40012100 	.word	0x40012100
 8001834:	40012200 	.word	0x40012200

08001838 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800186a:	2300      	movs	r3, #0
 800186c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001874:	2b01      	cmp	r3, #1
 8001876:	d101      	bne.n	800187c <HAL_ADC_ConfigChannel+0x1c>
 8001878:	2302      	movs	r3, #2
 800187a:	e105      	b.n	8001a88 <HAL_ADC_ConfigChannel+0x228>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2201      	movs	r2, #1
 8001880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b09      	cmp	r3, #9
 800188a:	d925      	bls.n	80018d8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	68d9      	ldr	r1, [r3, #12]
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	b29b      	uxth	r3, r3
 8001898:	461a      	mov	r2, r3
 800189a:	4613      	mov	r3, r2
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	4413      	add	r3, r2
 80018a0:	3b1e      	subs	r3, #30
 80018a2:	2207      	movs	r2, #7
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43da      	mvns	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	400a      	ands	r2, r1
 80018b0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68d9      	ldr	r1, [r3, #12]
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	4618      	mov	r0, r3
 80018c4:	4603      	mov	r3, r0
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	4403      	add	r3, r0
 80018ca:	3b1e      	subs	r3, #30
 80018cc:	409a      	lsls	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	430a      	orrs	r2, r1
 80018d4:	60da      	str	r2, [r3, #12]
 80018d6:	e022      	b.n	800191e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6919      	ldr	r1, [r3, #16]
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	461a      	mov	r2, r3
 80018e6:	4613      	mov	r3, r2
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	4413      	add	r3, r2
 80018ec:	2207      	movs	r2, #7
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43da      	mvns	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	400a      	ands	r2, r1
 80018fa:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6919      	ldr	r1, [r3, #16]
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	689a      	ldr	r2, [r3, #8]
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	b29b      	uxth	r3, r3
 800190c:	4618      	mov	r0, r3
 800190e:	4603      	mov	r3, r0
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	4403      	add	r3, r0
 8001914:	409a      	lsls	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	430a      	orrs	r2, r1
 800191c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b06      	cmp	r3, #6
 8001924:	d824      	bhi.n	8001970 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	4613      	mov	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	3b05      	subs	r3, #5
 8001938:	221f      	movs	r2, #31
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43da      	mvns	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	400a      	ands	r2, r1
 8001946:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	b29b      	uxth	r3, r3
 8001954:	4618      	mov	r0, r3
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	4613      	mov	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	3b05      	subs	r3, #5
 8001962:	fa00 f203 	lsl.w	r2, r0, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	635a      	str	r2, [r3, #52]	@ 0x34
 800196e:	e04c      	b.n	8001a0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	2b0c      	cmp	r3, #12
 8001976:	d824      	bhi.n	80019c2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685a      	ldr	r2, [r3, #4]
 8001982:	4613      	mov	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4413      	add	r3, r2
 8001988:	3b23      	subs	r3, #35	@ 0x23
 800198a:	221f      	movs	r2, #31
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43da      	mvns	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	400a      	ands	r2, r1
 8001998:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	4618      	mov	r0, r3
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685a      	ldr	r2, [r3, #4]
 80019ac:	4613      	mov	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	3b23      	subs	r3, #35	@ 0x23
 80019b4:	fa00 f203 	lsl.w	r2, r0, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	430a      	orrs	r2, r1
 80019be:	631a      	str	r2, [r3, #48]	@ 0x30
 80019c0:	e023      	b.n	8001a0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685a      	ldr	r2, [r3, #4]
 80019cc:	4613      	mov	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4413      	add	r3, r2
 80019d2:	3b41      	subs	r3, #65	@ 0x41
 80019d4:	221f      	movs	r2, #31
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43da      	mvns	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	400a      	ands	r2, r1
 80019e2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	4618      	mov	r0, r3
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	4613      	mov	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4413      	add	r3, r2
 80019fc:	3b41      	subs	r3, #65	@ 0x41
 80019fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	430a      	orrs	r2, r1
 8001a08:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a0a:	4b22      	ldr	r3, [pc, #136]	@ (8001a94 <HAL_ADC_ConfigChannel+0x234>)
 8001a0c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a21      	ldr	r2, [pc, #132]	@ (8001a98 <HAL_ADC_ConfigChannel+0x238>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d109      	bne.n	8001a2c <HAL_ADC_ConfigChannel+0x1cc>
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b12      	cmp	r3, #18
 8001a1e:	d105      	bne.n	8001a2c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a19      	ldr	r2, [pc, #100]	@ (8001a98 <HAL_ADC_ConfigChannel+0x238>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d123      	bne.n	8001a7e <HAL_ADC_ConfigChannel+0x21e>
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2b10      	cmp	r3, #16
 8001a3c:	d003      	beq.n	8001a46 <HAL_ADC_ConfigChannel+0x1e6>
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2b11      	cmp	r3, #17
 8001a44:	d11b      	bne.n	8001a7e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2b10      	cmp	r3, #16
 8001a58:	d111      	bne.n	8001a7e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a5a:	4b10      	ldr	r3, [pc, #64]	@ (8001a9c <HAL_ADC_ConfigChannel+0x23c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a10      	ldr	r2, [pc, #64]	@ (8001aa0 <HAL_ADC_ConfigChannel+0x240>)
 8001a60:	fba2 2303 	umull	r2, r3, r2, r3
 8001a64:	0c9a      	lsrs	r2, r3, #18
 8001a66:	4613      	mov	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001a70:	e002      	b.n	8001a78 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	3b01      	subs	r3, #1
 8001a76:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1f9      	bne.n	8001a72 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	40012300 	.word	0x40012300
 8001a98:	40012000 	.word	0x40012000
 8001a9c:	20000800 	.word	0x20000800
 8001aa0:	431bde83 	.word	0x431bde83

08001aa4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001aac:	4b79      	ldr	r3, [pc, #484]	@ (8001c94 <ADC_Init+0x1f0>)
 8001aae:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	685a      	ldr	r2, [r3, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ad8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6859      	ldr	r1, [r3, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	021a      	lsls	r2, r3, #8
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	430a      	orrs	r2, r1
 8001aec:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001afc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	6859      	ldr	r1, [r3, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6899      	ldr	r1, [r3, #8]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	68da      	ldr	r2, [r3, #12]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b36:	4a58      	ldr	r2, [pc, #352]	@ (8001c98 <ADC_Init+0x1f4>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d022      	beq.n	8001b82 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689a      	ldr	r2, [r3, #8]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b4a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6899      	ldr	r1, [r3, #8]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001b6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6899      	ldr	r1, [r3, #8]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	e00f      	b.n	8001ba2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001ba0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 0202 	bic.w	r2, r2, #2
 8001bb0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6899      	ldr	r1, [r3, #8]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	7e1b      	ldrb	r3, [r3, #24]
 8001bbc:	005a      	lsls	r2, r3, #1
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d01b      	beq.n	8001c08 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	685a      	ldr	r2, [r3, #4]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001bde:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001bee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6859      	ldr	r1, [r3, #4]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	035a      	lsls	r2, r3, #13
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	430a      	orrs	r2, r1
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	e007      	b.n	8001c18 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	685a      	ldr	r2, [r3, #4]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c16:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001c26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	051a      	lsls	r2, r3, #20
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001c4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	6899      	ldr	r1, [r3, #8]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001c5a:	025a      	lsls	r2, r3, #9
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	430a      	orrs	r2, r1
 8001c62:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6899      	ldr	r1, [r3, #8]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	029a      	lsls	r2, r3, #10
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	430a      	orrs	r2, r1
 8001c86:	609a      	str	r2, [r3, #8]
}
 8001c88:	bf00      	nop
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	40012300 	.word	0x40012300
 8001c98:	0f000001 	.word	0x0f000001

08001c9c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ca8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cae:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d13c      	bne.n	8001d30 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cba:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d12b      	bne.n	8001d28 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d127      	bne.n	8001d28 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cde:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d006      	beq.n	8001cf4 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d119      	bne.n	8001d28 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 0220 	bic.w	r2, r2, #32
 8001d02:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d105      	bne.n	8001d28 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d20:	f043 0201 	orr.w	r2, r3, #1
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d28:	68f8      	ldr	r0, [r7, #12]
 8001d2a:	f7ff f9a9 	bl	8001080 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001d2e:	e00e      	b.n	8001d4e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d34:	f003 0310 	and.w	r3, r3, #16
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001d3c:	68f8      	ldr	r0, [r7, #12]
 8001d3e:	f7ff fd85 	bl	800184c <HAL_ADC_ErrorCallback>
}
 8001d42:	e004      	b.n	8001d4e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	4798      	blx	r3
}
 8001d4e:	bf00      	nop
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b084      	sub	sp, #16
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d62:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	f7ff fd67 	bl	8001838 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d6a:	bf00      	nop
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b084      	sub	sp, #16
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d7e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2240      	movs	r2, #64	@ 0x40
 8001d84:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8a:	f043 0204 	orr.w	r2, r3, #4
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	f7ff fd5a 	bl	800184c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d98:	bf00      	nop
 8001d9a:	3710      	adds	r7, #16
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001db0:	4b0c      	ldr	r3, [pc, #48]	@ (8001de4 <__NVIC_SetPriorityGrouping+0x44>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dd2:	4a04      	ldr	r2, [pc, #16]	@ (8001de4 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	60d3      	str	r3, [r2, #12]
}
 8001dd8:	bf00      	nop
 8001dda:	3714      	adds	r7, #20
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dec:	4b04      	ldr	r3, [pc, #16]	@ (8001e00 <__NVIC_GetPriorityGrouping+0x18>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	0a1b      	lsrs	r3, r3, #8
 8001df2:	f003 0307 	and.w	r3, r3, #7
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	db0b      	blt.n	8001e2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	f003 021f 	and.w	r2, r3, #31
 8001e1c:	4907      	ldr	r1, [pc, #28]	@ (8001e3c <__NVIC_EnableIRQ+0x38>)
 8001e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e22:	095b      	lsrs	r3, r3, #5
 8001e24:	2001      	movs	r0, #1
 8001e26:	fa00 f202 	lsl.w	r2, r0, r2
 8001e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	e000e100 	.word	0xe000e100

08001e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	6039      	str	r1, [r7, #0]
 8001e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	db0a      	blt.n	8001e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	490c      	ldr	r1, [pc, #48]	@ (8001e8c <__NVIC_SetPriority+0x4c>)
 8001e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5e:	0112      	lsls	r2, r2, #4
 8001e60:	b2d2      	uxtb	r2, r2
 8001e62:	440b      	add	r3, r1
 8001e64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e68:	e00a      	b.n	8001e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	4908      	ldr	r1, [pc, #32]	@ (8001e90 <__NVIC_SetPriority+0x50>)
 8001e70:	79fb      	ldrb	r3, [r7, #7]
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	3b04      	subs	r3, #4
 8001e78:	0112      	lsls	r2, r2, #4
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	761a      	strb	r2, [r3, #24]
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	e000e100 	.word	0xe000e100
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b089      	sub	sp, #36	@ 0x24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	f1c3 0307 	rsb	r3, r3, #7
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	bf28      	it	cs
 8001eb2:	2304      	movcs	r3, #4
 8001eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	3304      	adds	r3, #4
 8001eba:	2b06      	cmp	r3, #6
 8001ebc:	d902      	bls.n	8001ec4 <NVIC_EncodePriority+0x30>
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	3b03      	subs	r3, #3
 8001ec2:	e000      	b.n	8001ec6 <NVIC_EncodePriority+0x32>
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43da      	mvns	r2, r3
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	401a      	ands	r2, r3
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001edc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee6:	43d9      	mvns	r1, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eec:	4313      	orrs	r3, r2
         );
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3724      	adds	r7, #36	@ 0x24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
	...

08001efc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f0c:	d301      	bcc.n	8001f12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e00f      	b.n	8001f32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f12:	4a0a      	ldr	r2, [pc, #40]	@ (8001f3c <SysTick_Config+0x40>)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3b01      	subs	r3, #1
 8001f18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f1a:	210f      	movs	r1, #15
 8001f1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f20:	f7ff ff8e 	bl	8001e40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f24:	4b05      	ldr	r3, [pc, #20]	@ (8001f3c <SysTick_Config+0x40>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f2a:	4b04      	ldr	r3, [pc, #16]	@ (8001f3c <SysTick_Config+0x40>)
 8001f2c:	2207      	movs	r2, #7
 8001f2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	e000e010 	.word	0xe000e010

08001f40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f7ff ff29 	bl	8001da0 <__NVIC_SetPriorityGrouping>
}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b086      	sub	sp, #24
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	60b9      	str	r1, [r7, #8]
 8001f60:	607a      	str	r2, [r7, #4]
 8001f62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f68:	f7ff ff3e 	bl	8001de8 <__NVIC_GetPriorityGrouping>
 8001f6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	68b9      	ldr	r1, [r7, #8]
 8001f72:	6978      	ldr	r0, [r7, #20]
 8001f74:	f7ff ff8e 	bl	8001e94 <NVIC_EncodePriority>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f7e:	4611      	mov	r1, r2
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff ff5d 	bl	8001e40 <__NVIC_SetPriority>
}
 8001f86:	bf00      	nop
 8001f88:	3718      	adds	r7, #24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b082      	sub	sp, #8
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	4603      	mov	r3, r0
 8001f96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff ff31 	bl	8001e04 <__NVIC_EnableIRQ>
}
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff ffa2 	bl	8001efc <SysTick_Config>
 8001fb8:	4603      	mov	r3, r0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
	...

08001fc4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001fd0:	f7ff faae 	bl	8001530 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e099      	b.n	8002114 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 0201 	bic.w	r2, r2, #1
 8001ffe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002000:	e00f      	b.n	8002022 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002002:	f7ff fa95 	bl	8001530 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b05      	cmp	r3, #5
 800200e:	d908      	bls.n	8002022 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2220      	movs	r2, #32
 8002014:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2203      	movs	r2, #3
 800201a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e078      	b.n	8002114 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1e8      	bne.n	8002002 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002038:	697a      	ldr	r2, [r7, #20]
 800203a:	4b38      	ldr	r3, [pc, #224]	@ (800211c <HAL_DMA_Init+0x158>)
 800203c:	4013      	ands	r3, r2
 800203e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800204e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800205a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002066:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	4313      	orrs	r3, r2
 8002072:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002078:	2b04      	cmp	r3, #4
 800207a:	d107      	bne.n	800208c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002084:	4313      	orrs	r3, r2
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	4313      	orrs	r3, r2
 800208a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	f023 0307 	bic.w	r3, r3, #7
 80020a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a8:	697a      	ldr	r2, [r7, #20]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	d117      	bne.n	80020e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	4313      	orrs	r3, r2
 80020be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00e      	beq.n	80020e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 fa6f 	bl	80025ac <DMA_CheckFifoParam>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d008      	beq.n	80020e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2240      	movs	r2, #64	@ 0x40
 80020d8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80020e2:	2301      	movs	r3, #1
 80020e4:	e016      	b.n	8002114 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 fa26 	bl	8002540 <DMA_CalcBaseAndBitshift>
 80020f4:	4603      	mov	r3, r0
 80020f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020fc:	223f      	movs	r2, #63	@ 0x3f
 80020fe:	409a      	lsls	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3718      	adds	r7, #24
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	f010803f 	.word	0xf010803f

08002120 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
 800212c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800212e:	2300      	movs	r3, #0
 8002130:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002136:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800213e:	2b01      	cmp	r3, #1
 8002140:	d101      	bne.n	8002146 <HAL_DMA_Start_IT+0x26>
 8002142:	2302      	movs	r3, #2
 8002144:	e040      	b.n	80021c8 <HAL_DMA_Start_IT+0xa8>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b01      	cmp	r3, #1
 8002158:	d12f      	bne.n	80021ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2202      	movs	r2, #2
 800215e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	68b9      	ldr	r1, [r7, #8]
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f000 f9b8 	bl	80024e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002178:	223f      	movs	r2, #63	@ 0x3f
 800217a:	409a      	lsls	r2, r3
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 0216 	orr.w	r2, r2, #22
 800218e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002194:	2b00      	cmp	r3, #0
 8002196:	d007      	beq.n	80021a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f042 0208 	orr.w	r2, r2, #8
 80021a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f042 0201 	orr.w	r2, r2, #1
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	e005      	b.n	80021c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80021c2:	2302      	movs	r3, #2
 80021c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80021c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80021d8:	2300      	movs	r3, #0
 80021da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80021dc:	4b8e      	ldr	r3, [pc, #568]	@ (8002418 <HAL_DMA_IRQHandler+0x248>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a8e      	ldr	r2, [pc, #568]	@ (800241c <HAL_DMA_IRQHandler+0x24c>)
 80021e2:	fba2 2303 	umull	r2, r3, r2, r3
 80021e6:	0a9b      	lsrs	r3, r3, #10
 80021e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021fa:	2208      	movs	r2, #8
 80021fc:	409a      	lsls	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	4013      	ands	r3, r2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d01a      	beq.n	800223c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	d013      	beq.n	800223c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 0204 	bic.w	r2, r2, #4
 8002222:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002228:	2208      	movs	r2, #8
 800222a:	409a      	lsls	r2, r3
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002234:	f043 0201 	orr.w	r2, r3, #1
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002240:	2201      	movs	r2, #1
 8002242:	409a      	lsls	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4013      	ands	r3, r2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d012      	beq.n	8002272 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00b      	beq.n	8002272 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800225e:	2201      	movs	r2, #1
 8002260:	409a      	lsls	r2, r3
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800226a:	f043 0202 	orr.w	r2, r3, #2
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002276:	2204      	movs	r2, #4
 8002278:	409a      	lsls	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	4013      	ands	r3, r2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d012      	beq.n	80022a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00b      	beq.n	80022a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002294:	2204      	movs	r2, #4
 8002296:	409a      	lsls	r2, r3
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022a0:	f043 0204 	orr.w	r2, r3, #4
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ac:	2210      	movs	r2, #16
 80022ae:	409a      	lsls	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4013      	ands	r3, r2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d043      	beq.n	8002340 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d03c      	beq.n	8002340 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ca:	2210      	movs	r2, #16
 80022cc:	409a      	lsls	r2, r3
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d018      	beq.n	8002312 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d108      	bne.n	8002300 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d024      	beq.n	8002340 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	4798      	blx	r3
 80022fe:	e01f      	b.n	8002340 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002304:	2b00      	cmp	r3, #0
 8002306:	d01b      	beq.n	8002340 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	4798      	blx	r3
 8002310:	e016      	b.n	8002340 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800231c:	2b00      	cmp	r3, #0
 800231e:	d107      	bne.n	8002330 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 0208 	bic.w	r2, r2, #8
 800232e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002334:	2b00      	cmp	r3, #0
 8002336:	d003      	beq.n	8002340 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002344:	2220      	movs	r2, #32
 8002346:	409a      	lsls	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4013      	ands	r3, r2
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 808f 	beq.w	8002470 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0310 	and.w	r3, r3, #16
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 8087 	beq.w	8002470 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002366:	2220      	movs	r2, #32
 8002368:	409a      	lsls	r2, r3
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b05      	cmp	r3, #5
 8002378:	d136      	bne.n	80023e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 0216 	bic.w	r2, r2, #22
 8002388:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	695a      	ldr	r2, [r3, #20]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002398:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d103      	bne.n	80023aa <HAL_DMA_IRQHandler+0x1da>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d007      	beq.n	80023ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 0208 	bic.w	r2, r2, #8
 80023b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023be:	223f      	movs	r2, #63	@ 0x3f
 80023c0:	409a      	lsls	r2, r3
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d07e      	beq.n	80024dc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	4798      	blx	r3
        }
        return;
 80023e6:	e079      	b.n	80024dc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d01d      	beq.n	8002432 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d10d      	bne.n	8002420 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002408:	2b00      	cmp	r3, #0
 800240a:	d031      	beq.n	8002470 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	4798      	blx	r3
 8002414:	e02c      	b.n	8002470 <HAL_DMA_IRQHandler+0x2a0>
 8002416:	bf00      	nop
 8002418:	20000800 	.word	0x20000800
 800241c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002424:	2b00      	cmp	r3, #0
 8002426:	d023      	beq.n	8002470 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	4798      	blx	r3
 8002430:	e01e      	b.n	8002470 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10f      	bne.n	8002460 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 0210 	bic.w	r2, r2, #16
 800244e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002464:	2b00      	cmp	r3, #0
 8002466:	d003      	beq.n	8002470 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002474:	2b00      	cmp	r3, #0
 8002476:	d032      	beq.n	80024de <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b00      	cmp	r3, #0
 8002482:	d022      	beq.n	80024ca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2205      	movs	r2, #5
 8002488:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 0201 	bic.w	r2, r2, #1
 800249a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	3301      	adds	r3, #1
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d307      	bcc.n	80024b8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1f2      	bne.n	800249c <HAL_DMA_IRQHandler+0x2cc>
 80024b6:	e000      	b.n	80024ba <HAL_DMA_IRQHandler+0x2ea>
          break;
 80024b8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d005      	beq.n	80024de <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	4798      	blx	r3
 80024da:	e000      	b.n	80024de <HAL_DMA_IRQHandler+0x30e>
        return;
 80024dc:	bf00      	nop
    }
  }
}
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
 80024f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002500:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	2b40      	cmp	r3, #64	@ 0x40
 8002510:	d108      	bne.n	8002524 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002522:	e007      	b.n	8002534 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	60da      	str	r2, [r3, #12]
}
 8002534:	bf00      	nop
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	b2db      	uxtb	r3, r3
 800254e:	3b10      	subs	r3, #16
 8002550:	4a14      	ldr	r2, [pc, #80]	@ (80025a4 <DMA_CalcBaseAndBitshift+0x64>)
 8002552:	fba2 2303 	umull	r2, r3, r2, r3
 8002556:	091b      	lsrs	r3, r3, #4
 8002558:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800255a:	4a13      	ldr	r2, [pc, #76]	@ (80025a8 <DMA_CalcBaseAndBitshift+0x68>)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	4413      	add	r3, r2
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	461a      	mov	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2b03      	cmp	r3, #3
 800256c:	d909      	bls.n	8002582 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002576:	f023 0303 	bic.w	r3, r3, #3
 800257a:	1d1a      	adds	r2, r3, #4
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002580:	e007      	b.n	8002592 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800258a:	f023 0303 	bic.w	r3, r3, #3
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002596:	4618      	mov	r0, r3
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	aaaaaaab 	.word	0xaaaaaaab
 80025a8:	0800a3f4 	.word	0x0800a3f4

080025ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025b4:	2300      	movs	r3, #0
 80025b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d11f      	bne.n	8002606 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	2b03      	cmp	r3, #3
 80025ca:	d856      	bhi.n	800267a <DMA_CheckFifoParam+0xce>
 80025cc:	a201      	add	r2, pc, #4	@ (adr r2, 80025d4 <DMA_CheckFifoParam+0x28>)
 80025ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025d2:	bf00      	nop
 80025d4:	080025e5 	.word	0x080025e5
 80025d8:	080025f7 	.word	0x080025f7
 80025dc:	080025e5 	.word	0x080025e5
 80025e0:	0800267b 	.word	0x0800267b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d046      	beq.n	800267e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025f4:	e043      	b.n	800267e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025fa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80025fe:	d140      	bne.n	8002682 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002604:	e03d      	b.n	8002682 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800260e:	d121      	bne.n	8002654 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	2b03      	cmp	r3, #3
 8002614:	d837      	bhi.n	8002686 <DMA_CheckFifoParam+0xda>
 8002616:	a201      	add	r2, pc, #4	@ (adr r2, 800261c <DMA_CheckFifoParam+0x70>)
 8002618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800261c:	0800262d 	.word	0x0800262d
 8002620:	08002633 	.word	0x08002633
 8002624:	0800262d 	.word	0x0800262d
 8002628:	08002645 	.word	0x08002645
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	73fb      	strb	r3, [r7, #15]
      break;
 8002630:	e030      	b.n	8002694 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002636:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d025      	beq.n	800268a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002642:	e022      	b.n	800268a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002648:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800264c:	d11f      	bne.n	800268e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002652:	e01c      	b.n	800268e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	2b02      	cmp	r3, #2
 8002658:	d903      	bls.n	8002662 <DMA_CheckFifoParam+0xb6>
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	2b03      	cmp	r3, #3
 800265e:	d003      	beq.n	8002668 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002660:	e018      	b.n	8002694 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	73fb      	strb	r3, [r7, #15]
      break;
 8002666:	e015      	b.n	8002694 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800266c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00e      	beq.n	8002692 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	73fb      	strb	r3, [r7, #15]
      break;
 8002678:	e00b      	b.n	8002692 <DMA_CheckFifoParam+0xe6>
      break;
 800267a:	bf00      	nop
 800267c:	e00a      	b.n	8002694 <DMA_CheckFifoParam+0xe8>
      break;
 800267e:	bf00      	nop
 8002680:	e008      	b.n	8002694 <DMA_CheckFifoParam+0xe8>
      break;
 8002682:	bf00      	nop
 8002684:	e006      	b.n	8002694 <DMA_CheckFifoParam+0xe8>
      break;
 8002686:	bf00      	nop
 8002688:	e004      	b.n	8002694 <DMA_CheckFifoParam+0xe8>
      break;
 800268a:	bf00      	nop
 800268c:	e002      	b.n	8002694 <DMA_CheckFifoParam+0xe8>
      break;   
 800268e:	bf00      	nop
 8002690:	e000      	b.n	8002694 <DMA_CheckFifoParam+0xe8>
      break;
 8002692:	bf00      	nop
    }
  } 
  
  return status; 
 8002694:	7bfb      	ldrb	r3, [r7, #15]
}
 8002696:	4618      	mov	r0, r3
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop

080026a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b089      	sub	sp, #36	@ 0x24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026ae:	2300      	movs	r3, #0
 80026b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026b2:	2300      	movs	r3, #0
 80026b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ba:	2300      	movs	r3, #0
 80026bc:	61fb      	str	r3, [r7, #28]
 80026be:	e16b      	b.n	8002998 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026c0:	2201      	movs	r2, #1
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	4013      	ands	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	429a      	cmp	r2, r3
 80026da:	f040 815a 	bne.w	8002992 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f003 0303 	and.w	r3, r3, #3
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d005      	beq.n	80026f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d130      	bne.n	8002758 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	2203      	movs	r2, #3
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	43db      	mvns	r3, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4013      	ands	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	68da      	ldr	r2, [r3, #12]
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4313      	orrs	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800272c:	2201      	movs	r2, #1
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4013      	ands	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	091b      	lsrs	r3, r3, #4
 8002742:	f003 0201 	and.w	r2, r3, #1
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4313      	orrs	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f003 0303 	and.w	r3, r3, #3
 8002760:	2b03      	cmp	r3, #3
 8002762:	d017      	beq.n	8002794 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	2203      	movs	r2, #3
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4013      	ands	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4313      	orrs	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f003 0303 	and.w	r3, r3, #3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d123      	bne.n	80027e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	08da      	lsrs	r2, r3, #3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3208      	adds	r2, #8
 80027a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	220f      	movs	r2, #15
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	43db      	mvns	r3, r3
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4013      	ands	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	691a      	ldr	r2, [r3, #16]
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	08da      	lsrs	r2, r3, #3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	3208      	adds	r2, #8
 80027e2:	69b9      	ldr	r1, [r7, #24]
 80027e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	2203      	movs	r2, #3
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	43db      	mvns	r3, r3
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4013      	ands	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f003 0203 	and.w	r2, r3, #3
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4313      	orrs	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002824:	2b00      	cmp	r3, #0
 8002826:	f000 80b4 	beq.w	8002992 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	4b60      	ldr	r3, [pc, #384]	@ (80029b0 <HAL_GPIO_Init+0x30c>)
 8002830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002832:	4a5f      	ldr	r2, [pc, #380]	@ (80029b0 <HAL_GPIO_Init+0x30c>)
 8002834:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002838:	6453      	str	r3, [r2, #68]	@ 0x44
 800283a:	4b5d      	ldr	r3, [pc, #372]	@ (80029b0 <HAL_GPIO_Init+0x30c>)
 800283c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800283e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002846:	4a5b      	ldr	r2, [pc, #364]	@ (80029b4 <HAL_GPIO_Init+0x310>)
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	089b      	lsrs	r3, r3, #2
 800284c:	3302      	adds	r3, #2
 800284e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002852:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	220f      	movs	r2, #15
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	43db      	mvns	r3, r3
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4013      	ands	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a52      	ldr	r2, [pc, #328]	@ (80029b8 <HAL_GPIO_Init+0x314>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d02b      	beq.n	80028ca <HAL_GPIO_Init+0x226>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a51      	ldr	r2, [pc, #324]	@ (80029bc <HAL_GPIO_Init+0x318>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d025      	beq.n	80028c6 <HAL_GPIO_Init+0x222>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a50      	ldr	r2, [pc, #320]	@ (80029c0 <HAL_GPIO_Init+0x31c>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d01f      	beq.n	80028c2 <HAL_GPIO_Init+0x21e>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a4f      	ldr	r2, [pc, #316]	@ (80029c4 <HAL_GPIO_Init+0x320>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d019      	beq.n	80028be <HAL_GPIO_Init+0x21a>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a4e      	ldr	r2, [pc, #312]	@ (80029c8 <HAL_GPIO_Init+0x324>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d013      	beq.n	80028ba <HAL_GPIO_Init+0x216>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a4d      	ldr	r2, [pc, #308]	@ (80029cc <HAL_GPIO_Init+0x328>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d00d      	beq.n	80028b6 <HAL_GPIO_Init+0x212>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a4c      	ldr	r2, [pc, #304]	@ (80029d0 <HAL_GPIO_Init+0x32c>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d007      	beq.n	80028b2 <HAL_GPIO_Init+0x20e>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a4b      	ldr	r2, [pc, #300]	@ (80029d4 <HAL_GPIO_Init+0x330>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d101      	bne.n	80028ae <HAL_GPIO_Init+0x20a>
 80028aa:	2307      	movs	r3, #7
 80028ac:	e00e      	b.n	80028cc <HAL_GPIO_Init+0x228>
 80028ae:	2308      	movs	r3, #8
 80028b0:	e00c      	b.n	80028cc <HAL_GPIO_Init+0x228>
 80028b2:	2306      	movs	r3, #6
 80028b4:	e00a      	b.n	80028cc <HAL_GPIO_Init+0x228>
 80028b6:	2305      	movs	r3, #5
 80028b8:	e008      	b.n	80028cc <HAL_GPIO_Init+0x228>
 80028ba:	2304      	movs	r3, #4
 80028bc:	e006      	b.n	80028cc <HAL_GPIO_Init+0x228>
 80028be:	2303      	movs	r3, #3
 80028c0:	e004      	b.n	80028cc <HAL_GPIO_Init+0x228>
 80028c2:	2302      	movs	r3, #2
 80028c4:	e002      	b.n	80028cc <HAL_GPIO_Init+0x228>
 80028c6:	2301      	movs	r3, #1
 80028c8:	e000      	b.n	80028cc <HAL_GPIO_Init+0x228>
 80028ca:	2300      	movs	r3, #0
 80028cc:	69fa      	ldr	r2, [r7, #28]
 80028ce:	f002 0203 	and.w	r2, r2, #3
 80028d2:	0092      	lsls	r2, r2, #2
 80028d4:	4093      	lsls	r3, r2
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4313      	orrs	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028dc:	4935      	ldr	r1, [pc, #212]	@ (80029b4 <HAL_GPIO_Init+0x310>)
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	089b      	lsrs	r3, r3, #2
 80028e2:	3302      	adds	r3, #2
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028ea:	4b3b      	ldr	r3, [pc, #236]	@ (80029d8 <HAL_GPIO_Init+0x334>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	43db      	mvns	r3, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4013      	ands	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	4313      	orrs	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800290e:	4a32      	ldr	r2, [pc, #200]	@ (80029d8 <HAL_GPIO_Init+0x334>)
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002914:	4b30      	ldr	r3, [pc, #192]	@ (80029d8 <HAL_GPIO_Init+0x334>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	43db      	mvns	r3, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4013      	ands	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	4313      	orrs	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002938:	4a27      	ldr	r2, [pc, #156]	@ (80029d8 <HAL_GPIO_Init+0x334>)
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800293e:	4b26      	ldr	r3, [pc, #152]	@ (80029d8 <HAL_GPIO_Init+0x334>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	43db      	mvns	r3, r3
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	4013      	ands	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	4313      	orrs	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002962:	4a1d      	ldr	r2, [pc, #116]	@ (80029d8 <HAL_GPIO_Init+0x334>)
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002968:	4b1b      	ldr	r3, [pc, #108]	@ (80029d8 <HAL_GPIO_Init+0x334>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	43db      	mvns	r3, r3
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4013      	ands	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	4313      	orrs	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800298c:	4a12      	ldr	r2, [pc, #72]	@ (80029d8 <HAL_GPIO_Init+0x334>)
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	3301      	adds	r3, #1
 8002996:	61fb      	str	r3, [r7, #28]
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	2b0f      	cmp	r3, #15
 800299c:	f67f ae90 	bls.w	80026c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029a0:	bf00      	nop
 80029a2:	bf00      	nop
 80029a4:	3724      	adds	r7, #36	@ 0x24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40023800 	.word	0x40023800
 80029b4:	40013800 	.word	0x40013800
 80029b8:	40020000 	.word	0x40020000
 80029bc:	40020400 	.word	0x40020400
 80029c0:	40020800 	.word	0x40020800
 80029c4:	40020c00 	.word	0x40020c00
 80029c8:	40021000 	.word	0x40021000
 80029cc:	40021400 	.word	0x40021400
 80029d0:	40021800 	.word	0x40021800
 80029d4:	40021c00 	.word	0x40021c00
 80029d8:	40013c00 	.word	0x40013c00

080029dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	460b      	mov	r3, r1
 80029e6:	807b      	strh	r3, [r7, #2]
 80029e8:	4613      	mov	r3, r2
 80029ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029ec:	787b      	ldrb	r3, [r7, #1]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029f2:	887a      	ldrh	r2, [r7, #2]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029f8:	e003      	b.n	8002a02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029fa:	887b      	ldrh	r3, [r7, #2]
 80029fc:	041a      	lsls	r2, r3, #16
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	619a      	str	r2, [r3, #24]
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b086      	sub	sp, #24
 8002a12:	af02      	add	r7, sp, #8
 8002a14:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d101      	bne.n	8002a20 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e059      	b.n	8002ad4 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d106      	bne.n	8002a40 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f006 feda 	bl	80097f4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2203      	movs	r2, #3
 8002a44:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a4e:	d102      	bne.n	8002a56 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f004 fd2b 	bl	80074b6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6818      	ldr	r0, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	7c1a      	ldrb	r2, [r3, #16]
 8002a68:	f88d 2000 	strb.w	r2, [sp]
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a70:	f004 fcac 	bl	80073cc <USB_CoreInit>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d005      	beq.n	8002a86 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e026      	b.n	8002ad4 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f004 fd23 	bl	80074d8 <USB_SetCurrentMode>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d005      	beq.n	8002aa4 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e017      	b.n	8002ad4 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6818      	ldr	r0, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	7c1a      	ldrb	r2, [r3, #16]
 8002aac:	f88d 2000 	strb.w	r2, [sp]
 8002ab0:	3304      	adds	r3, #4
 8002ab2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ab4:	f004 fec6 	bl	8007844 <USB_HostInit>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d005      	beq.n	8002aca <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e004      	b.n	8002ad4 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002adc:	b590      	push	{r4, r7, lr}
 8002ade:	b08b      	sub	sp, #44	@ 0x2c
 8002ae0:	af04      	add	r7, sp, #16
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	4608      	mov	r0, r1
 8002ae6:	4611      	mov	r1, r2
 8002ae8:	461a      	mov	r2, r3
 8002aea:	4603      	mov	r3, r0
 8002aec:	70fb      	strb	r3, [r7, #3]
 8002aee:	460b      	mov	r3, r1
 8002af0:	70bb      	strb	r3, [r7, #2]
 8002af2:	4613      	mov	r3, r2
 8002af4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002af6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002af8:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d101      	bne.n	8002b08 <HAL_HCD_HC_Init+0x2c>
 8002b04:	2302      	movs	r3, #2
 8002b06:	e09d      	b.n	8002c44 <HAL_HCD_HC_Init+0x168>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002b10:	78fa      	ldrb	r2, [r7, #3]
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	4613      	mov	r3, r2
 8002b16:	011b      	lsls	r3, r3, #4
 8002b18:	1a9b      	subs	r3, r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	3319      	adds	r3, #25
 8002b20:	2200      	movs	r2, #0
 8002b22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002b24:	78fa      	ldrb	r2, [r7, #3]
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	011b      	lsls	r3, r3, #4
 8002b2c:	1a9b      	subs	r3, r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	3314      	adds	r3, #20
 8002b34:	787a      	ldrb	r2, [r7, #1]
 8002b36:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002b38:	78fa      	ldrb	r2, [r7, #3]
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	011b      	lsls	r3, r3, #4
 8002b40:	1a9b      	subs	r3, r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	3315      	adds	r3, #21
 8002b48:	78fa      	ldrb	r2, [r7, #3]
 8002b4a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002b4c:	78fa      	ldrb	r2, [r7, #3]
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	4613      	mov	r3, r2
 8002b52:	011b      	lsls	r3, r3, #4
 8002b54:	1a9b      	subs	r3, r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	3326      	adds	r3, #38	@ 0x26
 8002b5c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002b60:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002b62:	78fa      	ldrb	r2, [r7, #3]
 8002b64:	78bb      	ldrb	r3, [r7, #2]
 8002b66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b6a:	b2d8      	uxtb	r0, r3
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	011b      	lsls	r3, r3, #4
 8002b72:	1a9b      	subs	r3, r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	440b      	add	r3, r1
 8002b78:	3316      	adds	r3, #22
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002b7e:	78fb      	ldrb	r3, [r7, #3]
 8002b80:	4619      	mov	r1, r3
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 fbac 	bl	80032e0 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002b88:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	da0a      	bge.n	8002ba6 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002b90:	78fa      	ldrb	r2, [r7, #3]
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	4613      	mov	r3, r2
 8002b96:	011b      	lsls	r3, r3, #4
 8002b98:	1a9b      	subs	r3, r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	3317      	adds	r3, #23
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	701a      	strb	r2, [r3, #0]
 8002ba4:	e009      	b.n	8002bba <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002ba6:	78fa      	ldrb	r2, [r7, #3]
 8002ba8:	6879      	ldr	r1, [r7, #4]
 8002baa:	4613      	mov	r3, r2
 8002bac:	011b      	lsls	r3, r3, #4
 8002bae:	1a9b      	subs	r3, r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	440b      	add	r3, r1
 8002bb4:	3317      	adds	r3, #23
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f004 ff7a 	bl	8007ab8 <USB_GetHostSpeed>
 8002bc4:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002bc6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d10b      	bne.n	8002be6 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002bce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d107      	bne.n	8002be6 <HAL_HCD_HC_Init+0x10a>
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d104      	bne.n	8002be6 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	2bbc      	cmp	r3, #188	@ 0xbc
 8002be0:	d901      	bls.n	8002be6 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002be2:	23bc      	movs	r3, #188	@ 0xbc
 8002be4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002be6:	78fa      	ldrb	r2, [r7, #3]
 8002be8:	6879      	ldr	r1, [r7, #4]
 8002bea:	4613      	mov	r3, r2
 8002bec:	011b      	lsls	r3, r3, #4
 8002bee:	1a9b      	subs	r3, r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	440b      	add	r3, r1
 8002bf4:	3318      	adds	r3, #24
 8002bf6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002bfa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002bfc:	78fa      	ldrb	r2, [r7, #3]
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	b298      	uxth	r0, r3
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	4613      	mov	r3, r2
 8002c06:	011b      	lsls	r3, r3, #4
 8002c08:	1a9b      	subs	r3, r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	3328      	adds	r3, #40	@ 0x28
 8002c10:	4602      	mov	r2, r0
 8002c12:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6818      	ldr	r0, [r3, #0]
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	787c      	ldrb	r4, [r7, #1]
 8002c1e:	78ba      	ldrb	r2, [r7, #2]
 8002c20:	78f9      	ldrb	r1, [r7, #3]
 8002c22:	9302      	str	r3, [sp, #8]
 8002c24:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002c28:	9301      	str	r3, [sp, #4]
 8002c2a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	4623      	mov	r3, r4
 8002c32:	f004 ff69 	bl	8007b08 <USB_HC_Init>
 8002c36:	4603      	mov	r3, r0
 8002c38:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	371c      	adds	r7, #28
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd90      	pop	{r4, r7, pc}

08002c4c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	460b      	mov	r3, r1
 8002c56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d101      	bne.n	8002c6a <HAL_HCD_HC_Halt+0x1e>
 8002c66:	2302      	movs	r3, #2
 8002c68:	e00f      	b.n	8002c8a <HAL_HCD_HC_Halt+0x3e>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	78fa      	ldrb	r2, [r7, #3]
 8002c78:	4611      	mov	r1, r2
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f005 fafb 	bl	8008276 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
	...

08002c94 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	4608      	mov	r0, r1
 8002c9e:	4611      	mov	r1, r2
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	70fb      	strb	r3, [r7, #3]
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	70bb      	strb	r3, [r7, #2]
 8002caa:	4613      	mov	r3, r2
 8002cac:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002cae:	78fa      	ldrb	r2, [r7, #3]
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	011b      	lsls	r3, r3, #4
 8002cb6:	1a9b      	subs	r3, r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	440b      	add	r3, r1
 8002cbc:	3317      	adds	r3, #23
 8002cbe:	78ba      	ldrb	r2, [r7, #2]
 8002cc0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002cc2:	78fa      	ldrb	r2, [r7, #3]
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	011b      	lsls	r3, r3, #4
 8002cca:	1a9b      	subs	r3, r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	440b      	add	r3, r1
 8002cd0:	3326      	adds	r3, #38	@ 0x26
 8002cd2:	787a      	ldrb	r2, [r7, #1]
 8002cd4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002cd6:	7c3b      	ldrb	r3, [r7, #16]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d114      	bne.n	8002d06 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002cdc:	78fa      	ldrb	r2, [r7, #3]
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	011b      	lsls	r3, r3, #4
 8002ce4:	1a9b      	subs	r3, r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	440b      	add	r3, r1
 8002cea:	332a      	adds	r3, #42	@ 0x2a
 8002cec:	2203      	movs	r2, #3
 8002cee:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002cf0:	78fa      	ldrb	r2, [r7, #3]
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	011b      	lsls	r3, r3, #4
 8002cf8:	1a9b      	subs	r3, r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	3319      	adds	r3, #25
 8002d00:	7f3a      	ldrb	r2, [r7, #28]
 8002d02:	701a      	strb	r2, [r3, #0]
 8002d04:	e009      	b.n	8002d1a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d06:	78fa      	ldrb	r2, [r7, #3]
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	011b      	lsls	r3, r3, #4
 8002d0e:	1a9b      	subs	r3, r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	440b      	add	r3, r1
 8002d14:	332a      	adds	r3, #42	@ 0x2a
 8002d16:	2202      	movs	r2, #2
 8002d18:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002d1a:	787b      	ldrb	r3, [r7, #1]
 8002d1c:	2b03      	cmp	r3, #3
 8002d1e:	f200 8102 	bhi.w	8002f26 <HAL_HCD_HC_SubmitRequest+0x292>
 8002d22:	a201      	add	r2, pc, #4	@ (adr r2, 8002d28 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d28:	08002d39 	.word	0x08002d39
 8002d2c:	08002f11 	.word	0x08002f11
 8002d30:	08002dfd 	.word	0x08002dfd
 8002d34:	08002e87 	.word	0x08002e87
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002d38:	7c3b      	ldrb	r3, [r7, #16]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	f040 80f5 	bne.w	8002f2a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002d40:	78bb      	ldrb	r3, [r7, #2]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d12d      	bne.n	8002da2 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002d46:	8b3b      	ldrh	r3, [r7, #24]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d109      	bne.n	8002d60 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002d4c:	78fa      	ldrb	r2, [r7, #3]
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	4613      	mov	r3, r2
 8002d52:	011b      	lsls	r3, r3, #4
 8002d54:	1a9b      	subs	r3, r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	440b      	add	r3, r1
 8002d5a:	333d      	adds	r3, #61	@ 0x3d
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002d60:	78fa      	ldrb	r2, [r7, #3]
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	4613      	mov	r3, r2
 8002d66:	011b      	lsls	r3, r3, #4
 8002d68:	1a9b      	subs	r3, r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	333d      	adds	r3, #61	@ 0x3d
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10a      	bne.n	8002d8c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d76:	78fa      	ldrb	r2, [r7, #3]
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	011b      	lsls	r3, r3, #4
 8002d7e:	1a9b      	subs	r3, r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	440b      	add	r3, r1
 8002d84:	332a      	adds	r3, #42	@ 0x2a
 8002d86:	2200      	movs	r2, #0
 8002d88:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002d8a:	e0ce      	b.n	8002f2a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d8c:	78fa      	ldrb	r2, [r7, #3]
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	011b      	lsls	r3, r3, #4
 8002d94:	1a9b      	subs	r3, r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	332a      	adds	r3, #42	@ 0x2a
 8002d9c:	2202      	movs	r2, #2
 8002d9e:	701a      	strb	r2, [r3, #0]
      break;
 8002da0:	e0c3      	b.n	8002f2a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002da2:	78fa      	ldrb	r2, [r7, #3]
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	4613      	mov	r3, r2
 8002da8:	011b      	lsls	r3, r3, #4
 8002daa:	1a9b      	subs	r3, r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	440b      	add	r3, r1
 8002db0:	331a      	adds	r3, #26
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	f040 80b8 	bne.w	8002f2a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002dba:	78fa      	ldrb	r2, [r7, #3]
 8002dbc:	6879      	ldr	r1, [r7, #4]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	011b      	lsls	r3, r3, #4
 8002dc2:	1a9b      	subs	r3, r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	440b      	add	r3, r1
 8002dc8:	333c      	adds	r3, #60	@ 0x3c
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10a      	bne.n	8002de6 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002dd0:	78fa      	ldrb	r2, [r7, #3]
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	011b      	lsls	r3, r3, #4
 8002dd8:	1a9b      	subs	r3, r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	440b      	add	r3, r1
 8002dde:	332a      	adds	r3, #42	@ 0x2a
 8002de0:	2200      	movs	r2, #0
 8002de2:	701a      	strb	r2, [r3, #0]
      break;
 8002de4:	e0a1      	b.n	8002f2a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002de6:	78fa      	ldrb	r2, [r7, #3]
 8002de8:	6879      	ldr	r1, [r7, #4]
 8002dea:	4613      	mov	r3, r2
 8002dec:	011b      	lsls	r3, r3, #4
 8002dee:	1a9b      	subs	r3, r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	440b      	add	r3, r1
 8002df4:	332a      	adds	r3, #42	@ 0x2a
 8002df6:	2202      	movs	r2, #2
 8002df8:	701a      	strb	r2, [r3, #0]
      break;
 8002dfa:	e096      	b.n	8002f2a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002dfc:	78bb      	ldrb	r3, [r7, #2]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d120      	bne.n	8002e44 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002e02:	78fa      	ldrb	r2, [r7, #3]
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	4613      	mov	r3, r2
 8002e08:	011b      	lsls	r3, r3, #4
 8002e0a:	1a9b      	subs	r3, r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	440b      	add	r3, r1
 8002e10:	333d      	adds	r3, #61	@ 0x3d
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10a      	bne.n	8002e2e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e18:	78fa      	ldrb	r2, [r7, #3]
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	011b      	lsls	r3, r3, #4
 8002e20:	1a9b      	subs	r3, r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	332a      	adds	r3, #42	@ 0x2a
 8002e28:	2200      	movs	r2, #0
 8002e2a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002e2c:	e07e      	b.n	8002f2c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e2e:	78fa      	ldrb	r2, [r7, #3]
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	4613      	mov	r3, r2
 8002e34:	011b      	lsls	r3, r3, #4
 8002e36:	1a9b      	subs	r3, r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	440b      	add	r3, r1
 8002e3c:	332a      	adds	r3, #42	@ 0x2a
 8002e3e:	2202      	movs	r2, #2
 8002e40:	701a      	strb	r2, [r3, #0]
      break;
 8002e42:	e073      	b.n	8002f2c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002e44:	78fa      	ldrb	r2, [r7, #3]
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	011b      	lsls	r3, r3, #4
 8002e4c:	1a9b      	subs	r3, r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	333c      	adds	r3, #60	@ 0x3c
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10a      	bne.n	8002e70 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e5a:	78fa      	ldrb	r2, [r7, #3]
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	011b      	lsls	r3, r3, #4
 8002e62:	1a9b      	subs	r3, r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	440b      	add	r3, r1
 8002e68:	332a      	adds	r3, #42	@ 0x2a
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	701a      	strb	r2, [r3, #0]
      break;
 8002e6e:	e05d      	b.n	8002f2c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e70:	78fa      	ldrb	r2, [r7, #3]
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	4613      	mov	r3, r2
 8002e76:	011b      	lsls	r3, r3, #4
 8002e78:	1a9b      	subs	r3, r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	332a      	adds	r3, #42	@ 0x2a
 8002e80:	2202      	movs	r2, #2
 8002e82:	701a      	strb	r2, [r3, #0]
      break;
 8002e84:	e052      	b.n	8002f2c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002e86:	78bb      	ldrb	r3, [r7, #2]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d120      	bne.n	8002ece <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002e8c:	78fa      	ldrb	r2, [r7, #3]
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	4613      	mov	r3, r2
 8002e92:	011b      	lsls	r3, r3, #4
 8002e94:	1a9b      	subs	r3, r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	333d      	adds	r3, #61	@ 0x3d
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10a      	bne.n	8002eb8 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ea2:	78fa      	ldrb	r2, [r7, #3]
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	1a9b      	subs	r3, r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	440b      	add	r3, r1
 8002eb0:	332a      	adds	r3, #42	@ 0x2a
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002eb6:	e039      	b.n	8002f2c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002eb8:	78fa      	ldrb	r2, [r7, #3]
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	011b      	lsls	r3, r3, #4
 8002ec0:	1a9b      	subs	r3, r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	332a      	adds	r3, #42	@ 0x2a
 8002ec8:	2202      	movs	r2, #2
 8002eca:	701a      	strb	r2, [r3, #0]
      break;
 8002ecc:	e02e      	b.n	8002f2c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002ece:	78fa      	ldrb	r2, [r7, #3]
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	011b      	lsls	r3, r3, #4
 8002ed6:	1a9b      	subs	r3, r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	440b      	add	r3, r1
 8002edc:	333c      	adds	r3, #60	@ 0x3c
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10a      	bne.n	8002efa <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ee4:	78fa      	ldrb	r2, [r7, #3]
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	011b      	lsls	r3, r3, #4
 8002eec:	1a9b      	subs	r3, r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	332a      	adds	r3, #42	@ 0x2a
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	701a      	strb	r2, [r3, #0]
      break;
 8002ef8:	e018      	b.n	8002f2c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002efa:	78fa      	ldrb	r2, [r7, #3]
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	4613      	mov	r3, r2
 8002f00:	011b      	lsls	r3, r3, #4
 8002f02:	1a9b      	subs	r3, r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	440b      	add	r3, r1
 8002f08:	332a      	adds	r3, #42	@ 0x2a
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	701a      	strb	r2, [r3, #0]
      break;
 8002f0e:	e00d      	b.n	8002f2c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f10:	78fa      	ldrb	r2, [r7, #3]
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	011b      	lsls	r3, r3, #4
 8002f18:	1a9b      	subs	r3, r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	332a      	adds	r3, #42	@ 0x2a
 8002f20:	2200      	movs	r2, #0
 8002f22:	701a      	strb	r2, [r3, #0]
      break;
 8002f24:	e002      	b.n	8002f2c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002f26:	bf00      	nop
 8002f28:	e000      	b.n	8002f2c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002f2a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002f2c:	78fa      	ldrb	r2, [r7, #3]
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	4613      	mov	r3, r2
 8002f32:	011b      	lsls	r3, r3, #4
 8002f34:	1a9b      	subs	r3, r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	440b      	add	r3, r1
 8002f3a:	332c      	adds	r3, #44	@ 0x2c
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002f40:	78fa      	ldrb	r2, [r7, #3]
 8002f42:	8b39      	ldrh	r1, [r7, #24]
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	4613      	mov	r3, r2
 8002f48:	011b      	lsls	r3, r3, #4
 8002f4a:	1a9b      	subs	r3, r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4403      	add	r3, r0
 8002f50:	3334      	adds	r3, #52	@ 0x34
 8002f52:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002f54:	78fa      	ldrb	r2, [r7, #3]
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	011b      	lsls	r3, r3, #4
 8002f5c:	1a9b      	subs	r3, r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	440b      	add	r3, r1
 8002f62:	334c      	adds	r3, #76	@ 0x4c
 8002f64:	2200      	movs	r2, #0
 8002f66:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002f68:	78fa      	ldrb	r2, [r7, #3]
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	011b      	lsls	r3, r3, #4
 8002f70:	1a9b      	subs	r3, r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	3338      	adds	r3, #56	@ 0x38
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002f7c:	78fa      	ldrb	r2, [r7, #3]
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	4613      	mov	r3, r2
 8002f82:	011b      	lsls	r3, r3, #4
 8002f84:	1a9b      	subs	r3, r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	440b      	add	r3, r1
 8002f8a:	3315      	adds	r3, #21
 8002f8c:	78fa      	ldrb	r2, [r7, #3]
 8002f8e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002f90:	78fa      	ldrb	r2, [r7, #3]
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	4613      	mov	r3, r2
 8002f96:	011b      	lsls	r3, r3, #4
 8002f98:	1a9b      	subs	r3, r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	334d      	adds	r3, #77	@ 0x4d
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6818      	ldr	r0, [r3, #0]
 8002fa8:	78fa      	ldrb	r2, [r7, #3]
 8002faa:	4613      	mov	r3, r2
 8002fac:	011b      	lsls	r3, r3, #4
 8002fae:	1a9b      	subs	r3, r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	3310      	adds	r3, #16
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	1d19      	adds	r1, r3, #4
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	799b      	ldrb	r3, [r3, #6]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	f004 fece 	bl	8007d60 <USB_HC_StartXfer>
 8002fc4:	4603      	mov	r3, r0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop

08002fd0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f004 fbec 	bl	80077c4 <USB_GetMode>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	f040 80fb 	bne.w	80031ea <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f004 fbaf 	bl	800775c <USB_ReadInterrupts>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	f000 80f1 	beq.w	80031e8 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f004 fba6 	bl	800775c <USB_ReadInterrupts>
 8003010:	4603      	mov	r3, r0
 8003012:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003016:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800301a:	d104      	bne.n	8003026 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003024:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f004 fb96 	bl	800775c <USB_ReadInterrupts>
 8003030:	4603      	mov	r3, r0
 8003032:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003036:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800303a:	d104      	bne.n	8003046 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003044:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f004 fb86 	bl	800775c <USB_ReadInterrupts>
 8003050:	4603      	mov	r3, r0
 8003052:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003056:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800305a:	d104      	bne.n	8003066 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003064:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f004 fb76 	bl	800775c <USB_ReadInterrupts>
 8003070:	4603      	mov	r3, r0
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b02      	cmp	r3, #2
 8003078:	d103      	bne.n	8003082 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2202      	movs	r2, #2
 8003080:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f004 fb68 	bl	800775c <USB_ReadInterrupts>
 800308c:	4603      	mov	r3, r0
 800308e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003092:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003096:	d120      	bne.n	80030da <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80030a0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d113      	bne.n	80030da <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80030b2:	2110      	movs	r1, #16
 80030b4:	6938      	ldr	r0, [r7, #16]
 80030b6:	f004 fa5b 	bl	8007570 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80030ba:	6938      	ldr	r0, [r7, #16]
 80030bc:	f004 fa8a 	bl	80075d4 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	7a5b      	ldrb	r3, [r3, #9]
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d105      	bne.n	80030d4 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2101      	movs	r1, #1
 80030ce:	4618      	mov	r0, r3
 80030d0:	f004 fc7c 	bl	80079cc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f006 fc0b 	bl	80098f0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f004 fb3c 	bl	800775c <USB_ReadInterrupts>
 80030e4:	4603      	mov	r3, r0
 80030e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030ee:	d102      	bne.n	80030f6 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f001 fd31 	bl	8004b58 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f004 fb2e 	bl	800775c <USB_ReadInterrupts>
 8003100:	4603      	mov	r3, r0
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	2b08      	cmp	r3, #8
 8003108:	d106      	bne.n	8003118 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f006 fbd4 	bl	80098b8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2208      	movs	r2, #8
 8003116:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4618      	mov	r0, r3
 800311e:	f004 fb1d 	bl	800775c <USB_ReadInterrupts>
 8003122:	4603      	mov	r3, r0
 8003124:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003128:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800312c:	d139      	bne.n	80031a2 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f005 f88e 	bl	8008254 <USB_HC_ReadInterrupt>
 8003138:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800313a:	2300      	movs	r3, #0
 800313c:	617b      	str	r3, [r7, #20]
 800313e:	e025      	b.n	800318c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	fa22 f303 	lsr.w	r3, r2, r3
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b00      	cmp	r3, #0
 8003152:	d018      	beq.n	8003186 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	015a      	lsls	r2, r3, #5
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4413      	add	r3, r2
 800315c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003166:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800316a:	d106      	bne.n	800317a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	b2db      	uxtb	r3, r3
 8003170:	4619      	mov	r1, r3
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f8e9 	bl	800334a <HCD_HC_IN_IRQHandler>
 8003178:	e005      	b.n	8003186 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	b2db      	uxtb	r3, r3
 800317e:	4619      	mov	r1, r3
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 ff4b 	bl	800401c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	3301      	adds	r3, #1
 800318a:	617b      	str	r3, [r7, #20]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	795b      	ldrb	r3, [r3, #5]
 8003190:	461a      	mov	r2, r3
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	4293      	cmp	r3, r2
 8003196:	d3d3      	bcc.n	8003140 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f004 fad8 	bl	800775c <USB_ReadInterrupts>
 80031ac:	4603      	mov	r3, r0
 80031ae:	f003 0310 	and.w	r3, r3, #16
 80031b2:	2b10      	cmp	r3, #16
 80031b4:	d101      	bne.n	80031ba <HAL_HCD_IRQHandler+0x1ea>
 80031b6:	2301      	movs	r3, #1
 80031b8:	e000      	b.n	80031bc <HAL_HCD_IRQHandler+0x1ec>
 80031ba:	2300      	movs	r3, #0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d014      	beq.n	80031ea <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	699a      	ldr	r2, [r3, #24]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 0210 	bic.w	r2, r2, #16
 80031ce:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f001 fbe2 	bl	800499a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	699a      	ldr	r2, [r3, #24]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f042 0210 	orr.w	r2, r2, #16
 80031e4:	619a      	str	r2, [r3, #24]
 80031e6:	e000      	b.n	80031ea <HAL_HCD_IRQHandler+0x21a>
      return;
 80031e8:	bf00      	nop
    }
  }
}
 80031ea:	3718      	adds	r7, #24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d101      	bne.n	8003206 <HAL_HCD_Start+0x16>
 8003202:	2302      	movs	r3, #2
 8003204:	e013      	b.n	800322e <HAL_HCD_Start+0x3e>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2101      	movs	r1, #1
 8003214:	4618      	mov	r0, r3
 8003216:	f004 fc16 	bl	8007a46 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f004 f938 	bl	8007494 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b082      	sub	sp, #8
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003244:	2b01      	cmp	r3, #1
 8003246:	d101      	bne.n	800324c <HAL_HCD_Stop+0x16>
 8003248:	2302      	movs	r3, #2
 800324a:	e00d      	b.n	8003268 <HAL_HCD_Stop+0x32>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4618      	mov	r0, r3
 800325a:	f005 f969 	bl	8008530 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	460b      	mov	r3, r1
 800327a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800327c:	78fa      	ldrb	r2, [r7, #3]
 800327e:	6879      	ldr	r1, [r7, #4]
 8003280:	4613      	mov	r3, r2
 8003282:	011b      	lsls	r3, r3, #4
 8003284:	1a9b      	subs	r3, r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	440b      	add	r3, r1
 800328a:	334c      	adds	r3, #76	@ 0x4c
 800328c:	781b      	ldrb	r3, [r3, #0]
}
 800328e:	4618      	mov	r0, r3
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800329a:	b480      	push	{r7}
 800329c:	b083      	sub	sp, #12
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
 80032a2:	460b      	mov	r3, r1
 80032a4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80032a6:	78fa      	ldrb	r2, [r7, #3]
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	1a9b      	subs	r3, r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	440b      	add	r3, r1
 80032b4:	3338      	adds	r3, #56	@ 0x38
 80032b6:	681b      	ldr	r3, [r3, #0]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f004 fc08 	bl	8007ae6 <USB_GetCurrentFrame>
 80032d6:	4603      	mov	r3, r0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3708      	adds	r7, #8
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	460b      	mov	r3, r1
 80032ea:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80032ec:	78fa      	ldrb	r2, [r7, #3]
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	4613      	mov	r3, r2
 80032f2:	011b      	lsls	r3, r3, #4
 80032f4:	1a9b      	subs	r3, r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	331a      	adds	r3, #26
 80032fc:	2200      	movs	r2, #0
 80032fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003300:	78fa      	ldrb	r2, [r7, #3]
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	4613      	mov	r3, r2
 8003306:	011b      	lsls	r3, r3, #4
 8003308:	1a9b      	subs	r3, r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	440b      	add	r3, r1
 800330e:	331b      	adds	r3, #27
 8003310:	2200      	movs	r2, #0
 8003312:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003314:	78fa      	ldrb	r2, [r7, #3]
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	4613      	mov	r3, r2
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	1a9b      	subs	r3, r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	440b      	add	r3, r1
 8003322:	3325      	adds	r3, #37	@ 0x25
 8003324:	2200      	movs	r2, #0
 8003326:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003328:	78fa      	ldrb	r2, [r7, #3]
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	4613      	mov	r3, r2
 800332e:	011b      	lsls	r3, r3, #4
 8003330:	1a9b      	subs	r3, r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	440b      	add	r3, r1
 8003336:	3324      	adds	r3, #36	@ 0x24
 8003338:	2200      	movs	r2, #0
 800333a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr

0800334a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b086      	sub	sp, #24
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
 8003352:	460b      	mov	r3, r1
 8003354:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	78fa      	ldrb	r2, [r7, #3]
 8003366:	4611      	mov	r1, r2
 8003368:	4618      	mov	r0, r3
 800336a:	f004 fa0a 	bl	8007782 <USB_ReadChInterrupts>
 800336e:	4603      	mov	r3, r0
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b04      	cmp	r3, #4
 8003376:	d11a      	bne.n	80033ae <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003378:	78fb      	ldrb	r3, [r7, #3]
 800337a:	015a      	lsls	r2, r3, #5
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	4413      	add	r3, r2
 8003380:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003384:	461a      	mov	r2, r3
 8003386:	2304      	movs	r3, #4
 8003388:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800338a:	78fa      	ldrb	r2, [r7, #3]
 800338c:	6879      	ldr	r1, [r7, #4]
 800338e:	4613      	mov	r3, r2
 8003390:	011b      	lsls	r3, r3, #4
 8003392:	1a9b      	subs	r3, r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	440b      	add	r3, r1
 8003398:	334d      	adds	r3, #77	@ 0x4d
 800339a:	2207      	movs	r2, #7
 800339c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	78fa      	ldrb	r2, [r7, #3]
 80033a4:	4611      	mov	r1, r2
 80033a6:	4618      	mov	r0, r3
 80033a8:	f004 ff65 	bl	8008276 <USB_HC_Halt>
 80033ac:	e09e      	b.n	80034ec <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	78fa      	ldrb	r2, [r7, #3]
 80033b4:	4611      	mov	r1, r2
 80033b6:	4618      	mov	r0, r3
 80033b8:	f004 f9e3 	bl	8007782 <USB_ReadChInterrupts>
 80033bc:	4603      	mov	r3, r0
 80033be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033c6:	d11b      	bne.n	8003400 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80033c8:	78fb      	ldrb	r3, [r7, #3]
 80033ca:	015a      	lsls	r2, r3, #5
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	4413      	add	r3, r2
 80033d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033d4:	461a      	mov	r2, r3
 80033d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80033da:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80033dc:	78fa      	ldrb	r2, [r7, #3]
 80033de:	6879      	ldr	r1, [r7, #4]
 80033e0:	4613      	mov	r3, r2
 80033e2:	011b      	lsls	r3, r3, #4
 80033e4:	1a9b      	subs	r3, r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	440b      	add	r3, r1
 80033ea:	334d      	adds	r3, #77	@ 0x4d
 80033ec:	2208      	movs	r2, #8
 80033ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	78fa      	ldrb	r2, [r7, #3]
 80033f6:	4611      	mov	r1, r2
 80033f8:	4618      	mov	r0, r3
 80033fa:	f004 ff3c 	bl	8008276 <USB_HC_Halt>
 80033fe:	e075      	b.n	80034ec <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	78fa      	ldrb	r2, [r7, #3]
 8003406:	4611      	mov	r1, r2
 8003408:	4618      	mov	r0, r3
 800340a:	f004 f9ba 	bl	8007782 <USB_ReadChInterrupts>
 800340e:	4603      	mov	r3, r0
 8003410:	f003 0308 	and.w	r3, r3, #8
 8003414:	2b08      	cmp	r3, #8
 8003416:	d11a      	bne.n	800344e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003418:	78fb      	ldrb	r3, [r7, #3]
 800341a:	015a      	lsls	r2, r3, #5
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	4413      	add	r3, r2
 8003420:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003424:	461a      	mov	r2, r3
 8003426:	2308      	movs	r3, #8
 8003428:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800342a:	78fa      	ldrb	r2, [r7, #3]
 800342c:	6879      	ldr	r1, [r7, #4]
 800342e:	4613      	mov	r3, r2
 8003430:	011b      	lsls	r3, r3, #4
 8003432:	1a9b      	subs	r3, r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	440b      	add	r3, r1
 8003438:	334d      	adds	r3, #77	@ 0x4d
 800343a:	2206      	movs	r2, #6
 800343c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	78fa      	ldrb	r2, [r7, #3]
 8003444:	4611      	mov	r1, r2
 8003446:	4618      	mov	r0, r3
 8003448:	f004 ff15 	bl	8008276 <USB_HC_Halt>
 800344c:	e04e      	b.n	80034ec <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	78fa      	ldrb	r2, [r7, #3]
 8003454:	4611      	mov	r1, r2
 8003456:	4618      	mov	r0, r3
 8003458:	f004 f993 	bl	8007782 <USB_ReadChInterrupts>
 800345c:	4603      	mov	r3, r0
 800345e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003462:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003466:	d11b      	bne.n	80034a0 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003468:	78fb      	ldrb	r3, [r7, #3]
 800346a:	015a      	lsls	r2, r3, #5
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	4413      	add	r3, r2
 8003470:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003474:	461a      	mov	r2, r3
 8003476:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800347a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800347c:	78fa      	ldrb	r2, [r7, #3]
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	4613      	mov	r3, r2
 8003482:	011b      	lsls	r3, r3, #4
 8003484:	1a9b      	subs	r3, r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	334d      	adds	r3, #77	@ 0x4d
 800348c:	2209      	movs	r2, #9
 800348e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	78fa      	ldrb	r2, [r7, #3]
 8003496:	4611      	mov	r1, r2
 8003498:	4618      	mov	r0, r3
 800349a:	f004 feec 	bl	8008276 <USB_HC_Halt>
 800349e:	e025      	b.n	80034ec <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	78fa      	ldrb	r2, [r7, #3]
 80034a6:	4611      	mov	r1, r2
 80034a8:	4618      	mov	r0, r3
 80034aa:	f004 f96a 	bl	8007782 <USB_ReadChInterrupts>
 80034ae:	4603      	mov	r3, r0
 80034b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034b4:	2b80      	cmp	r3, #128	@ 0x80
 80034b6:	d119      	bne.n	80034ec <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80034b8:	78fb      	ldrb	r3, [r7, #3]
 80034ba:	015a      	lsls	r2, r3, #5
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	4413      	add	r3, r2
 80034c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034c4:	461a      	mov	r2, r3
 80034c6:	2380      	movs	r3, #128	@ 0x80
 80034c8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80034ca:	78fa      	ldrb	r2, [r7, #3]
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	4613      	mov	r3, r2
 80034d0:	011b      	lsls	r3, r3, #4
 80034d2:	1a9b      	subs	r3, r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	440b      	add	r3, r1
 80034d8:	334d      	adds	r3, #77	@ 0x4d
 80034da:	2207      	movs	r2, #7
 80034dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	78fa      	ldrb	r2, [r7, #3]
 80034e4:	4611      	mov	r1, r2
 80034e6:	4618      	mov	r0, r3
 80034e8:	f004 fec5 	bl	8008276 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	78fa      	ldrb	r2, [r7, #3]
 80034f2:	4611      	mov	r1, r2
 80034f4:	4618      	mov	r0, r3
 80034f6:	f004 f944 	bl	8007782 <USB_ReadChInterrupts>
 80034fa:	4603      	mov	r3, r0
 80034fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003500:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003504:	d112      	bne.n	800352c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	78fa      	ldrb	r2, [r7, #3]
 800350c:	4611      	mov	r1, r2
 800350e:	4618      	mov	r0, r3
 8003510:	f004 feb1 	bl	8008276 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003514:	78fb      	ldrb	r3, [r7, #3]
 8003516:	015a      	lsls	r2, r3, #5
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	4413      	add	r3, r2
 800351c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003520:	461a      	mov	r2, r3
 8003522:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003526:	6093      	str	r3, [r2, #8]
 8003528:	f000 bd75 	b.w	8004016 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	78fa      	ldrb	r2, [r7, #3]
 8003532:	4611      	mov	r1, r2
 8003534:	4618      	mov	r0, r3
 8003536:	f004 f924 	bl	8007782 <USB_ReadChInterrupts>
 800353a:	4603      	mov	r3, r0
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	2b01      	cmp	r3, #1
 8003542:	f040 8128 	bne.w	8003796 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003546:	78fb      	ldrb	r3, [r7, #3]
 8003548:	015a      	lsls	r2, r3, #5
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	4413      	add	r3, r2
 800354e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003552:	461a      	mov	r2, r3
 8003554:	2320      	movs	r3, #32
 8003556:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003558:	78fa      	ldrb	r2, [r7, #3]
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	4613      	mov	r3, r2
 800355e:	011b      	lsls	r3, r3, #4
 8003560:	1a9b      	subs	r3, r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	331b      	adds	r3, #27
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d119      	bne.n	80035a2 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800356e:	78fa      	ldrb	r2, [r7, #3]
 8003570:	6879      	ldr	r1, [r7, #4]
 8003572:	4613      	mov	r3, r2
 8003574:	011b      	lsls	r3, r3, #4
 8003576:	1a9b      	subs	r3, r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	440b      	add	r3, r1
 800357c:	331b      	adds	r3, #27
 800357e:	2200      	movs	r2, #0
 8003580:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003582:	78fb      	ldrb	r3, [r7, #3]
 8003584:	015a      	lsls	r2, r3, #5
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	4413      	add	r3, r2
 800358a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	78fa      	ldrb	r2, [r7, #3]
 8003592:	0151      	lsls	r1, r2, #5
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	440a      	add	r2, r1
 8003598:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800359c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035a0:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	799b      	ldrb	r3, [r3, #6]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d01b      	beq.n	80035e2 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80035aa:	78fa      	ldrb	r2, [r7, #3]
 80035ac:	6879      	ldr	r1, [r7, #4]
 80035ae:	4613      	mov	r3, r2
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	1a9b      	subs	r3, r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	440b      	add	r3, r1
 80035b8:	3330      	adds	r3, #48	@ 0x30
 80035ba:	6819      	ldr	r1, [r3, #0]
 80035bc:	78fb      	ldrb	r3, [r7, #3]
 80035be:	015a      	lsls	r2, r3, #5
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	4413      	add	r3, r2
 80035c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035ce:	78fa      	ldrb	r2, [r7, #3]
 80035d0:	1ac9      	subs	r1, r1, r3
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	4613      	mov	r3, r2
 80035d6:	011b      	lsls	r3, r3, #4
 80035d8:	1a9b      	subs	r3, r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4403      	add	r3, r0
 80035de:	3338      	adds	r3, #56	@ 0x38
 80035e0:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80035e2:	78fa      	ldrb	r2, [r7, #3]
 80035e4:	6879      	ldr	r1, [r7, #4]
 80035e6:	4613      	mov	r3, r2
 80035e8:	011b      	lsls	r3, r3, #4
 80035ea:	1a9b      	subs	r3, r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	440b      	add	r3, r1
 80035f0:	334d      	adds	r3, #77	@ 0x4d
 80035f2:	2201      	movs	r2, #1
 80035f4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80035f6:	78fa      	ldrb	r2, [r7, #3]
 80035f8:	6879      	ldr	r1, [r7, #4]
 80035fa:	4613      	mov	r3, r2
 80035fc:	011b      	lsls	r3, r3, #4
 80035fe:	1a9b      	subs	r3, r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	440b      	add	r3, r1
 8003604:	3344      	adds	r3, #68	@ 0x44
 8003606:	2200      	movs	r2, #0
 8003608:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800360a:	78fb      	ldrb	r3, [r7, #3]
 800360c:	015a      	lsls	r2, r3, #5
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	4413      	add	r3, r2
 8003612:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003616:	461a      	mov	r2, r3
 8003618:	2301      	movs	r3, #1
 800361a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800361c:	78fa      	ldrb	r2, [r7, #3]
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	4613      	mov	r3, r2
 8003622:	011b      	lsls	r3, r3, #4
 8003624:	1a9b      	subs	r3, r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	440b      	add	r3, r1
 800362a:	3326      	adds	r3, #38	@ 0x26
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00a      	beq.n	8003648 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003632:	78fa      	ldrb	r2, [r7, #3]
 8003634:	6879      	ldr	r1, [r7, #4]
 8003636:	4613      	mov	r3, r2
 8003638:	011b      	lsls	r3, r3, #4
 800363a:	1a9b      	subs	r3, r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	440b      	add	r3, r1
 8003640:	3326      	adds	r3, #38	@ 0x26
 8003642:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003644:	2b02      	cmp	r3, #2
 8003646:	d110      	bne.n	800366a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	78fa      	ldrb	r2, [r7, #3]
 800364e:	4611      	mov	r1, r2
 8003650:	4618      	mov	r0, r3
 8003652:	f004 fe10 	bl	8008276 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003656:	78fb      	ldrb	r3, [r7, #3]
 8003658:	015a      	lsls	r2, r3, #5
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	4413      	add	r3, r2
 800365e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003662:	461a      	mov	r2, r3
 8003664:	2310      	movs	r3, #16
 8003666:	6093      	str	r3, [r2, #8]
 8003668:	e03d      	b.n	80036e6 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800366a:	78fa      	ldrb	r2, [r7, #3]
 800366c:	6879      	ldr	r1, [r7, #4]
 800366e:	4613      	mov	r3, r2
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	1a9b      	subs	r3, r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	440b      	add	r3, r1
 8003678:	3326      	adds	r3, #38	@ 0x26
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	2b03      	cmp	r3, #3
 800367e:	d00a      	beq.n	8003696 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003680:	78fa      	ldrb	r2, [r7, #3]
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	4613      	mov	r3, r2
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	1a9b      	subs	r3, r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	440b      	add	r3, r1
 800368e:	3326      	adds	r3, #38	@ 0x26
 8003690:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003692:	2b01      	cmp	r3, #1
 8003694:	d127      	bne.n	80036e6 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003696:	78fb      	ldrb	r3, [r7, #3]
 8003698:	015a      	lsls	r2, r3, #5
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	4413      	add	r3, r2
 800369e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	78fa      	ldrb	r2, [r7, #3]
 80036a6:	0151      	lsls	r1, r2, #5
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	440a      	add	r2, r1
 80036ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80036b0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80036b4:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80036b6:	78fa      	ldrb	r2, [r7, #3]
 80036b8:	6879      	ldr	r1, [r7, #4]
 80036ba:	4613      	mov	r3, r2
 80036bc:	011b      	lsls	r3, r3, #4
 80036be:	1a9b      	subs	r3, r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	440b      	add	r3, r1
 80036c4:	334c      	adds	r3, #76	@ 0x4c
 80036c6:	2201      	movs	r2, #1
 80036c8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80036ca:	78fa      	ldrb	r2, [r7, #3]
 80036cc:	6879      	ldr	r1, [r7, #4]
 80036ce:	4613      	mov	r3, r2
 80036d0:	011b      	lsls	r3, r3, #4
 80036d2:	1a9b      	subs	r3, r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	440b      	add	r3, r1
 80036d8:	334c      	adds	r3, #76	@ 0x4c
 80036da:	781a      	ldrb	r2, [r3, #0]
 80036dc:	78fb      	ldrb	r3, [r7, #3]
 80036de:	4619      	mov	r1, r3
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f006 f913 	bl	800990c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	799b      	ldrb	r3, [r3, #6]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d13b      	bne.n	8003766 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80036ee:	78fa      	ldrb	r2, [r7, #3]
 80036f0:	6879      	ldr	r1, [r7, #4]
 80036f2:	4613      	mov	r3, r2
 80036f4:	011b      	lsls	r3, r3, #4
 80036f6:	1a9b      	subs	r3, r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	440b      	add	r3, r1
 80036fc:	3338      	adds	r3, #56	@ 0x38
 80036fe:	6819      	ldr	r1, [r3, #0]
 8003700:	78fa      	ldrb	r2, [r7, #3]
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	4613      	mov	r3, r2
 8003706:	011b      	lsls	r3, r3, #4
 8003708:	1a9b      	subs	r3, r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4403      	add	r3, r0
 800370e:	3328      	adds	r3, #40	@ 0x28
 8003710:	881b      	ldrh	r3, [r3, #0]
 8003712:	440b      	add	r3, r1
 8003714:	1e59      	subs	r1, r3, #1
 8003716:	78fa      	ldrb	r2, [r7, #3]
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	4613      	mov	r3, r2
 800371c:	011b      	lsls	r3, r3, #4
 800371e:	1a9b      	subs	r3, r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	4403      	add	r3, r0
 8003724:	3328      	adds	r3, #40	@ 0x28
 8003726:	881b      	ldrh	r3, [r3, #0]
 8003728:	fbb1 f3f3 	udiv	r3, r1, r3
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 8470 	beq.w	8004016 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003736:	78fa      	ldrb	r2, [r7, #3]
 8003738:	6879      	ldr	r1, [r7, #4]
 800373a:	4613      	mov	r3, r2
 800373c:	011b      	lsls	r3, r3, #4
 800373e:	1a9b      	subs	r3, r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	440b      	add	r3, r1
 8003744:	333c      	adds	r3, #60	@ 0x3c
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	78fa      	ldrb	r2, [r7, #3]
 800374a:	f083 0301 	eor.w	r3, r3, #1
 800374e:	b2d8      	uxtb	r0, r3
 8003750:	6879      	ldr	r1, [r7, #4]
 8003752:	4613      	mov	r3, r2
 8003754:	011b      	lsls	r3, r3, #4
 8003756:	1a9b      	subs	r3, r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	440b      	add	r3, r1
 800375c:	333c      	adds	r3, #60	@ 0x3c
 800375e:	4602      	mov	r2, r0
 8003760:	701a      	strb	r2, [r3, #0]
 8003762:	f000 bc58 	b.w	8004016 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003766:	78fa      	ldrb	r2, [r7, #3]
 8003768:	6879      	ldr	r1, [r7, #4]
 800376a:	4613      	mov	r3, r2
 800376c:	011b      	lsls	r3, r3, #4
 800376e:	1a9b      	subs	r3, r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	440b      	add	r3, r1
 8003774:	333c      	adds	r3, #60	@ 0x3c
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	78fa      	ldrb	r2, [r7, #3]
 800377a:	f083 0301 	eor.w	r3, r3, #1
 800377e:	b2d8      	uxtb	r0, r3
 8003780:	6879      	ldr	r1, [r7, #4]
 8003782:	4613      	mov	r3, r2
 8003784:	011b      	lsls	r3, r3, #4
 8003786:	1a9b      	subs	r3, r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	440b      	add	r3, r1
 800378c:	333c      	adds	r3, #60	@ 0x3c
 800378e:	4602      	mov	r2, r0
 8003790:	701a      	strb	r2, [r3, #0]
 8003792:	f000 bc40 	b.w	8004016 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	78fa      	ldrb	r2, [r7, #3]
 800379c:	4611      	mov	r1, r2
 800379e:	4618      	mov	r0, r3
 80037a0:	f003 ffef 	bl	8007782 <USB_ReadChInterrupts>
 80037a4:	4603      	mov	r3, r0
 80037a6:	f003 0320 	and.w	r3, r3, #32
 80037aa:	2b20      	cmp	r3, #32
 80037ac:	d131      	bne.n	8003812 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80037ae:	78fb      	ldrb	r3, [r7, #3]
 80037b0:	015a      	lsls	r2, r3, #5
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	4413      	add	r3, r2
 80037b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037ba:	461a      	mov	r2, r3
 80037bc:	2320      	movs	r3, #32
 80037be:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80037c0:	78fa      	ldrb	r2, [r7, #3]
 80037c2:	6879      	ldr	r1, [r7, #4]
 80037c4:	4613      	mov	r3, r2
 80037c6:	011b      	lsls	r3, r3, #4
 80037c8:	1a9b      	subs	r3, r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	440b      	add	r3, r1
 80037ce:	331a      	adds	r3, #26
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	f040 841f 	bne.w	8004016 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80037d8:	78fa      	ldrb	r2, [r7, #3]
 80037da:	6879      	ldr	r1, [r7, #4]
 80037dc:	4613      	mov	r3, r2
 80037de:	011b      	lsls	r3, r3, #4
 80037e0:	1a9b      	subs	r3, r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	440b      	add	r3, r1
 80037e6:	331b      	adds	r3, #27
 80037e8:	2201      	movs	r2, #1
 80037ea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80037ec:	78fa      	ldrb	r2, [r7, #3]
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	4613      	mov	r3, r2
 80037f2:	011b      	lsls	r3, r3, #4
 80037f4:	1a9b      	subs	r3, r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	334d      	adds	r3, #77	@ 0x4d
 80037fc:	2203      	movs	r2, #3
 80037fe:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	78fa      	ldrb	r2, [r7, #3]
 8003806:	4611      	mov	r1, r2
 8003808:	4618      	mov	r0, r3
 800380a:	f004 fd34 	bl	8008276 <USB_HC_Halt>
 800380e:	f000 bc02 	b.w	8004016 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	78fa      	ldrb	r2, [r7, #3]
 8003818:	4611      	mov	r1, r2
 800381a:	4618      	mov	r0, r3
 800381c:	f003 ffb1 	bl	8007782 <USB_ReadChInterrupts>
 8003820:	4603      	mov	r3, r0
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b02      	cmp	r3, #2
 8003828:	f040 8305 	bne.w	8003e36 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800382c:	78fb      	ldrb	r3, [r7, #3]
 800382e:	015a      	lsls	r2, r3, #5
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	4413      	add	r3, r2
 8003834:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003838:	461a      	mov	r2, r3
 800383a:	2302      	movs	r3, #2
 800383c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800383e:	78fa      	ldrb	r2, [r7, #3]
 8003840:	6879      	ldr	r1, [r7, #4]
 8003842:	4613      	mov	r3, r2
 8003844:	011b      	lsls	r3, r3, #4
 8003846:	1a9b      	subs	r3, r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	440b      	add	r3, r1
 800384c:	334d      	adds	r3, #77	@ 0x4d
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d114      	bne.n	800387e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003854:	78fa      	ldrb	r2, [r7, #3]
 8003856:	6879      	ldr	r1, [r7, #4]
 8003858:	4613      	mov	r3, r2
 800385a:	011b      	lsls	r3, r3, #4
 800385c:	1a9b      	subs	r3, r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	440b      	add	r3, r1
 8003862:	334d      	adds	r3, #77	@ 0x4d
 8003864:	2202      	movs	r2, #2
 8003866:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003868:	78fa      	ldrb	r2, [r7, #3]
 800386a:	6879      	ldr	r1, [r7, #4]
 800386c:	4613      	mov	r3, r2
 800386e:	011b      	lsls	r3, r3, #4
 8003870:	1a9b      	subs	r3, r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	440b      	add	r3, r1
 8003876:	334c      	adds	r3, #76	@ 0x4c
 8003878:	2201      	movs	r2, #1
 800387a:	701a      	strb	r2, [r3, #0]
 800387c:	e2cc      	b.n	8003e18 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800387e:	78fa      	ldrb	r2, [r7, #3]
 8003880:	6879      	ldr	r1, [r7, #4]
 8003882:	4613      	mov	r3, r2
 8003884:	011b      	lsls	r3, r3, #4
 8003886:	1a9b      	subs	r3, r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	440b      	add	r3, r1
 800388c:	334d      	adds	r3, #77	@ 0x4d
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	2b06      	cmp	r3, #6
 8003892:	d114      	bne.n	80038be <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003894:	78fa      	ldrb	r2, [r7, #3]
 8003896:	6879      	ldr	r1, [r7, #4]
 8003898:	4613      	mov	r3, r2
 800389a:	011b      	lsls	r3, r3, #4
 800389c:	1a9b      	subs	r3, r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	440b      	add	r3, r1
 80038a2:	334d      	adds	r3, #77	@ 0x4d
 80038a4:	2202      	movs	r2, #2
 80038a6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80038a8:	78fa      	ldrb	r2, [r7, #3]
 80038aa:	6879      	ldr	r1, [r7, #4]
 80038ac:	4613      	mov	r3, r2
 80038ae:	011b      	lsls	r3, r3, #4
 80038b0:	1a9b      	subs	r3, r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	334c      	adds	r3, #76	@ 0x4c
 80038b8:	2205      	movs	r2, #5
 80038ba:	701a      	strb	r2, [r3, #0]
 80038bc:	e2ac      	b.n	8003e18 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80038be:	78fa      	ldrb	r2, [r7, #3]
 80038c0:	6879      	ldr	r1, [r7, #4]
 80038c2:	4613      	mov	r3, r2
 80038c4:	011b      	lsls	r3, r3, #4
 80038c6:	1a9b      	subs	r3, r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	440b      	add	r3, r1
 80038cc:	334d      	adds	r3, #77	@ 0x4d
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	2b07      	cmp	r3, #7
 80038d2:	d00b      	beq.n	80038ec <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80038d4:	78fa      	ldrb	r2, [r7, #3]
 80038d6:	6879      	ldr	r1, [r7, #4]
 80038d8:	4613      	mov	r3, r2
 80038da:	011b      	lsls	r3, r3, #4
 80038dc:	1a9b      	subs	r3, r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	440b      	add	r3, r1
 80038e2:	334d      	adds	r3, #77	@ 0x4d
 80038e4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80038e6:	2b09      	cmp	r3, #9
 80038e8:	f040 80a6 	bne.w	8003a38 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80038ec:	78fa      	ldrb	r2, [r7, #3]
 80038ee:	6879      	ldr	r1, [r7, #4]
 80038f0:	4613      	mov	r3, r2
 80038f2:	011b      	lsls	r3, r3, #4
 80038f4:	1a9b      	subs	r3, r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	440b      	add	r3, r1
 80038fa:	334d      	adds	r3, #77	@ 0x4d
 80038fc:	2202      	movs	r2, #2
 80038fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003900:	78fa      	ldrb	r2, [r7, #3]
 8003902:	6879      	ldr	r1, [r7, #4]
 8003904:	4613      	mov	r3, r2
 8003906:	011b      	lsls	r3, r3, #4
 8003908:	1a9b      	subs	r3, r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	3344      	adds	r3, #68	@ 0x44
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	1c59      	adds	r1, r3, #1
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	4613      	mov	r3, r2
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	1a9b      	subs	r3, r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4403      	add	r3, r0
 8003920:	3344      	adds	r3, #68	@ 0x44
 8003922:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003924:	78fa      	ldrb	r2, [r7, #3]
 8003926:	6879      	ldr	r1, [r7, #4]
 8003928:	4613      	mov	r3, r2
 800392a:	011b      	lsls	r3, r3, #4
 800392c:	1a9b      	subs	r3, r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	440b      	add	r3, r1
 8003932:	3344      	adds	r3, #68	@ 0x44
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2b02      	cmp	r3, #2
 8003938:	d943      	bls.n	80039c2 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800393a:	78fa      	ldrb	r2, [r7, #3]
 800393c:	6879      	ldr	r1, [r7, #4]
 800393e:	4613      	mov	r3, r2
 8003940:	011b      	lsls	r3, r3, #4
 8003942:	1a9b      	subs	r3, r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	440b      	add	r3, r1
 8003948:	3344      	adds	r3, #68	@ 0x44
 800394a:	2200      	movs	r2, #0
 800394c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800394e:	78fa      	ldrb	r2, [r7, #3]
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	4613      	mov	r3, r2
 8003954:	011b      	lsls	r3, r3, #4
 8003956:	1a9b      	subs	r3, r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	440b      	add	r3, r1
 800395c:	331a      	adds	r3, #26
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d123      	bne.n	80039ac <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003964:	78fa      	ldrb	r2, [r7, #3]
 8003966:	6879      	ldr	r1, [r7, #4]
 8003968:	4613      	mov	r3, r2
 800396a:	011b      	lsls	r3, r3, #4
 800396c:	1a9b      	subs	r3, r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	440b      	add	r3, r1
 8003972:	331b      	adds	r3, #27
 8003974:	2200      	movs	r2, #0
 8003976:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003978:	78fa      	ldrb	r2, [r7, #3]
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	4613      	mov	r3, r2
 800397e:	011b      	lsls	r3, r3, #4
 8003980:	1a9b      	subs	r3, r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	440b      	add	r3, r1
 8003986:	331c      	adds	r3, #28
 8003988:	2200      	movs	r2, #0
 800398a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800398c:	78fb      	ldrb	r3, [r7, #3]
 800398e:	015a      	lsls	r2, r3, #5
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	4413      	add	r3, r2
 8003994:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	78fa      	ldrb	r2, [r7, #3]
 800399c:	0151      	lsls	r1, r2, #5
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	440a      	add	r2, r1
 80039a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80039a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039aa:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80039ac:	78fa      	ldrb	r2, [r7, #3]
 80039ae:	6879      	ldr	r1, [r7, #4]
 80039b0:	4613      	mov	r3, r2
 80039b2:	011b      	lsls	r3, r3, #4
 80039b4:	1a9b      	subs	r3, r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	440b      	add	r3, r1
 80039ba:	334c      	adds	r3, #76	@ 0x4c
 80039bc:	2204      	movs	r2, #4
 80039be:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80039c0:	e229      	b.n	8003e16 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80039c2:	78fa      	ldrb	r2, [r7, #3]
 80039c4:	6879      	ldr	r1, [r7, #4]
 80039c6:	4613      	mov	r3, r2
 80039c8:	011b      	lsls	r3, r3, #4
 80039ca:	1a9b      	subs	r3, r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	440b      	add	r3, r1
 80039d0:	334c      	adds	r3, #76	@ 0x4c
 80039d2:	2202      	movs	r2, #2
 80039d4:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80039d6:	78fa      	ldrb	r2, [r7, #3]
 80039d8:	6879      	ldr	r1, [r7, #4]
 80039da:	4613      	mov	r3, r2
 80039dc:	011b      	lsls	r3, r3, #4
 80039de:	1a9b      	subs	r3, r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	440b      	add	r3, r1
 80039e4:	3326      	adds	r3, #38	@ 0x26
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00b      	beq.n	8003a04 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80039ec:	78fa      	ldrb	r2, [r7, #3]
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	4613      	mov	r3, r2
 80039f2:	011b      	lsls	r3, r3, #4
 80039f4:	1a9b      	subs	r3, r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	440b      	add	r3, r1
 80039fa:	3326      	adds	r3, #38	@ 0x26
 80039fc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	f040 8209 	bne.w	8003e16 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003a04:	78fb      	ldrb	r3, [r7, #3]
 8003a06:	015a      	lsls	r2, r3, #5
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003a1a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003a22:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003a24:	78fb      	ldrb	r3, [r7, #3]
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a30:	461a      	mov	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003a36:	e1ee      	b.n	8003e16 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003a38:	78fa      	ldrb	r2, [r7, #3]
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	011b      	lsls	r3, r3, #4
 8003a40:	1a9b      	subs	r3, r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	440b      	add	r3, r1
 8003a46:	334d      	adds	r3, #77	@ 0x4d
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	2b05      	cmp	r3, #5
 8003a4c:	f040 80c8 	bne.w	8003be0 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a50:	78fa      	ldrb	r2, [r7, #3]
 8003a52:	6879      	ldr	r1, [r7, #4]
 8003a54:	4613      	mov	r3, r2
 8003a56:	011b      	lsls	r3, r3, #4
 8003a58:	1a9b      	subs	r3, r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	440b      	add	r3, r1
 8003a5e:	334d      	adds	r3, #77	@ 0x4d
 8003a60:	2202      	movs	r2, #2
 8003a62:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003a64:	78fa      	ldrb	r2, [r7, #3]
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	011b      	lsls	r3, r3, #4
 8003a6c:	1a9b      	subs	r3, r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	440b      	add	r3, r1
 8003a72:	331b      	adds	r3, #27
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	f040 81ce 	bne.w	8003e18 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003a7c:	78fa      	ldrb	r2, [r7, #3]
 8003a7e:	6879      	ldr	r1, [r7, #4]
 8003a80:	4613      	mov	r3, r2
 8003a82:	011b      	lsls	r3, r3, #4
 8003a84:	1a9b      	subs	r3, r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	3326      	adds	r3, #38	@ 0x26
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	2b03      	cmp	r3, #3
 8003a90:	d16b      	bne.n	8003b6a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003a92:	78fa      	ldrb	r2, [r7, #3]
 8003a94:	6879      	ldr	r1, [r7, #4]
 8003a96:	4613      	mov	r3, r2
 8003a98:	011b      	lsls	r3, r3, #4
 8003a9a:	1a9b      	subs	r3, r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	440b      	add	r3, r1
 8003aa0:	3348      	adds	r3, #72	@ 0x48
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	1c59      	adds	r1, r3, #1
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	011b      	lsls	r3, r3, #4
 8003aac:	1a9b      	subs	r3, r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	4403      	add	r3, r0
 8003ab2:	3348      	adds	r3, #72	@ 0x48
 8003ab4:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003ab6:	78fa      	ldrb	r2, [r7, #3]
 8003ab8:	6879      	ldr	r1, [r7, #4]
 8003aba:	4613      	mov	r3, r2
 8003abc:	011b      	lsls	r3, r3, #4
 8003abe:	1a9b      	subs	r3, r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	440b      	add	r3, r1
 8003ac4:	3348      	adds	r3, #72	@ 0x48
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d943      	bls.n	8003b54 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003acc:	78fa      	ldrb	r2, [r7, #3]
 8003ace:	6879      	ldr	r1, [r7, #4]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	011b      	lsls	r3, r3, #4
 8003ad4:	1a9b      	subs	r3, r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	440b      	add	r3, r1
 8003ada:	3348      	adds	r3, #72	@ 0x48
 8003adc:	2200      	movs	r2, #0
 8003ade:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003ae0:	78fa      	ldrb	r2, [r7, #3]
 8003ae2:	6879      	ldr	r1, [r7, #4]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	011b      	lsls	r3, r3, #4
 8003ae8:	1a9b      	subs	r3, r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	440b      	add	r3, r1
 8003aee:	331b      	adds	r3, #27
 8003af0:	2200      	movs	r2, #0
 8003af2:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003af4:	78fa      	ldrb	r2, [r7, #3]
 8003af6:	6879      	ldr	r1, [r7, #4]
 8003af8:	4613      	mov	r3, r2
 8003afa:	011b      	lsls	r3, r3, #4
 8003afc:	1a9b      	subs	r3, r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	440b      	add	r3, r1
 8003b02:	3344      	adds	r3, #68	@ 0x44
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d809      	bhi.n	8003b1e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003b0a:	78fa      	ldrb	r2, [r7, #3]
 8003b0c:	6879      	ldr	r1, [r7, #4]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	1a9b      	subs	r3, r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	440b      	add	r3, r1
 8003b18:	331c      	adds	r3, #28
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003b1e:	78fb      	ldrb	r3, [r7, #3]
 8003b20:	015a      	lsls	r2, r3, #5
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	4413      	add	r3, r2
 8003b26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	78fa      	ldrb	r2, [r7, #3]
 8003b2e:	0151      	lsls	r1, r2, #5
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	440a      	add	r2, r1
 8003b34:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b3c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003b3e:	78fa      	ldrb	r2, [r7, #3]
 8003b40:	6879      	ldr	r1, [r7, #4]
 8003b42:	4613      	mov	r3, r2
 8003b44:	011b      	lsls	r3, r3, #4
 8003b46:	1a9b      	subs	r3, r3, r2
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	440b      	add	r3, r1
 8003b4c:	334c      	adds	r3, #76	@ 0x4c
 8003b4e:	2204      	movs	r2, #4
 8003b50:	701a      	strb	r2, [r3, #0]
 8003b52:	e014      	b.n	8003b7e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b54:	78fa      	ldrb	r2, [r7, #3]
 8003b56:	6879      	ldr	r1, [r7, #4]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	011b      	lsls	r3, r3, #4
 8003b5c:	1a9b      	subs	r3, r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	440b      	add	r3, r1
 8003b62:	334c      	adds	r3, #76	@ 0x4c
 8003b64:	2202      	movs	r2, #2
 8003b66:	701a      	strb	r2, [r3, #0]
 8003b68:	e009      	b.n	8003b7e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b6a:	78fa      	ldrb	r2, [r7, #3]
 8003b6c:	6879      	ldr	r1, [r7, #4]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	011b      	lsls	r3, r3, #4
 8003b72:	1a9b      	subs	r3, r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	440b      	add	r3, r1
 8003b78:	334c      	adds	r3, #76	@ 0x4c
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003b7e:	78fa      	ldrb	r2, [r7, #3]
 8003b80:	6879      	ldr	r1, [r7, #4]
 8003b82:	4613      	mov	r3, r2
 8003b84:	011b      	lsls	r3, r3, #4
 8003b86:	1a9b      	subs	r3, r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	440b      	add	r3, r1
 8003b8c:	3326      	adds	r3, #38	@ 0x26
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00b      	beq.n	8003bac <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003b94:	78fa      	ldrb	r2, [r7, #3]
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	011b      	lsls	r3, r3, #4
 8003b9c:	1a9b      	subs	r3, r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	440b      	add	r3, r1
 8003ba2:	3326      	adds	r3, #38	@ 0x26
 8003ba4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	f040 8136 	bne.w	8003e18 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003bac:	78fb      	ldrb	r3, [r7, #3]
 8003bae:	015a      	lsls	r2, r3, #5
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003bc2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003bca:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003bcc:	78fb      	ldrb	r3, [r7, #3]
 8003bce:	015a      	lsls	r2, r3, #5
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bd8:	461a      	mov	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6013      	str	r3, [r2, #0]
 8003bde:	e11b      	b.n	8003e18 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003be0:	78fa      	ldrb	r2, [r7, #3]
 8003be2:	6879      	ldr	r1, [r7, #4]
 8003be4:	4613      	mov	r3, r2
 8003be6:	011b      	lsls	r3, r3, #4
 8003be8:	1a9b      	subs	r3, r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	440b      	add	r3, r1
 8003bee:	334d      	adds	r3, #77	@ 0x4d
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	2b03      	cmp	r3, #3
 8003bf4:	f040 8081 	bne.w	8003cfa <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003bf8:	78fa      	ldrb	r2, [r7, #3]
 8003bfa:	6879      	ldr	r1, [r7, #4]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	011b      	lsls	r3, r3, #4
 8003c00:	1a9b      	subs	r3, r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	334d      	adds	r3, #77	@ 0x4d
 8003c08:	2202      	movs	r2, #2
 8003c0a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003c0c:	78fa      	ldrb	r2, [r7, #3]
 8003c0e:	6879      	ldr	r1, [r7, #4]
 8003c10:	4613      	mov	r3, r2
 8003c12:	011b      	lsls	r3, r3, #4
 8003c14:	1a9b      	subs	r3, r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	440b      	add	r3, r1
 8003c1a:	331b      	adds	r3, #27
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	f040 80fa 	bne.w	8003e18 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c24:	78fa      	ldrb	r2, [r7, #3]
 8003c26:	6879      	ldr	r1, [r7, #4]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	011b      	lsls	r3, r3, #4
 8003c2c:	1a9b      	subs	r3, r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	440b      	add	r3, r1
 8003c32:	334c      	adds	r3, #76	@ 0x4c
 8003c34:	2202      	movs	r2, #2
 8003c36:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003c38:	78fb      	ldrb	r3, [r7, #3]
 8003c3a:	015a      	lsls	r2, r3, #5
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	4413      	add	r3, r2
 8003c40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	78fa      	ldrb	r2, [r7, #3]
 8003c48:	0151      	lsls	r1, r2, #5
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	440a      	add	r2, r1
 8003c4e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003c52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c56:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003c58:	78fb      	ldrb	r3, [r7, #3]
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	78fa      	ldrb	r2, [r7, #3]
 8003c68:	0151      	lsls	r1, r2, #5
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	440a      	add	r2, r1
 8003c6e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003c72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c76:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003c78:	78fb      	ldrb	r3, [r7, #3]
 8003c7a:	015a      	lsls	r2, r3, #5
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	78fa      	ldrb	r2, [r7, #3]
 8003c88:	0151      	lsls	r1, r2, #5
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	440a      	add	r2, r1
 8003c8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003c92:	f023 0320 	bic.w	r3, r3, #32
 8003c96:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c98:	78fa      	ldrb	r2, [r7, #3]
 8003c9a:	6879      	ldr	r1, [r7, #4]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	011b      	lsls	r3, r3, #4
 8003ca0:	1a9b      	subs	r3, r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	440b      	add	r3, r1
 8003ca6:	3326      	adds	r3, #38	@ 0x26
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00b      	beq.n	8003cc6 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003cae:	78fa      	ldrb	r2, [r7, #3]
 8003cb0:	6879      	ldr	r1, [r7, #4]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	011b      	lsls	r3, r3, #4
 8003cb6:	1a9b      	subs	r3, r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	440b      	add	r3, r1
 8003cbc:	3326      	adds	r3, #38	@ 0x26
 8003cbe:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	f040 80a9 	bne.w	8003e18 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003cc6:	78fb      	ldrb	r3, [r7, #3]
 8003cc8:	015a      	lsls	r2, r3, #5
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	4413      	add	r3, r2
 8003cce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003cdc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003ce4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003ce6:	78fb      	ldrb	r3, [r7, #3]
 8003ce8:	015a      	lsls	r2, r3, #5
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	4413      	add	r3, r2
 8003cee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6013      	str	r3, [r2, #0]
 8003cf8:	e08e      	b.n	8003e18 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003cfa:	78fa      	ldrb	r2, [r7, #3]
 8003cfc:	6879      	ldr	r1, [r7, #4]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	011b      	lsls	r3, r3, #4
 8003d02:	1a9b      	subs	r3, r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	440b      	add	r3, r1
 8003d08:	334d      	adds	r3, #77	@ 0x4d
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2b04      	cmp	r3, #4
 8003d0e:	d143      	bne.n	8003d98 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d10:	78fa      	ldrb	r2, [r7, #3]
 8003d12:	6879      	ldr	r1, [r7, #4]
 8003d14:	4613      	mov	r3, r2
 8003d16:	011b      	lsls	r3, r3, #4
 8003d18:	1a9b      	subs	r3, r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	440b      	add	r3, r1
 8003d1e:	334d      	adds	r3, #77	@ 0x4d
 8003d20:	2202      	movs	r2, #2
 8003d22:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d24:	78fa      	ldrb	r2, [r7, #3]
 8003d26:	6879      	ldr	r1, [r7, #4]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	011b      	lsls	r3, r3, #4
 8003d2c:	1a9b      	subs	r3, r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	440b      	add	r3, r1
 8003d32:	334c      	adds	r3, #76	@ 0x4c
 8003d34:	2202      	movs	r2, #2
 8003d36:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003d38:	78fa      	ldrb	r2, [r7, #3]
 8003d3a:	6879      	ldr	r1, [r7, #4]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	011b      	lsls	r3, r3, #4
 8003d40:	1a9b      	subs	r3, r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	440b      	add	r3, r1
 8003d46:	3326      	adds	r3, #38	@ 0x26
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00a      	beq.n	8003d64 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003d4e:	78fa      	ldrb	r2, [r7, #3]
 8003d50:	6879      	ldr	r1, [r7, #4]
 8003d52:	4613      	mov	r3, r2
 8003d54:	011b      	lsls	r3, r3, #4
 8003d56:	1a9b      	subs	r3, r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	440b      	add	r3, r1
 8003d5c:	3326      	adds	r3, #38	@ 0x26
 8003d5e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d159      	bne.n	8003e18 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003d64:	78fb      	ldrb	r3, [r7, #3]
 8003d66:	015a      	lsls	r2, r3, #5
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003d7a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003d82:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003d84:	78fb      	ldrb	r3, [r7, #3]
 8003d86:	015a      	lsls	r2, r3, #5
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d90:	461a      	mov	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	e03f      	b.n	8003e18 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003d98:	78fa      	ldrb	r2, [r7, #3]
 8003d9a:	6879      	ldr	r1, [r7, #4]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	011b      	lsls	r3, r3, #4
 8003da0:	1a9b      	subs	r3, r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	440b      	add	r3, r1
 8003da6:	334d      	adds	r3, #77	@ 0x4d
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	2b08      	cmp	r3, #8
 8003dac:	d126      	bne.n	8003dfc <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003dae:	78fa      	ldrb	r2, [r7, #3]
 8003db0:	6879      	ldr	r1, [r7, #4]
 8003db2:	4613      	mov	r3, r2
 8003db4:	011b      	lsls	r3, r3, #4
 8003db6:	1a9b      	subs	r3, r3, r2
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	440b      	add	r3, r1
 8003dbc:	334d      	adds	r3, #77	@ 0x4d
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003dc2:	78fa      	ldrb	r2, [r7, #3]
 8003dc4:	6879      	ldr	r1, [r7, #4]
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	011b      	lsls	r3, r3, #4
 8003dca:	1a9b      	subs	r3, r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	440b      	add	r3, r1
 8003dd0:	3344      	adds	r3, #68	@ 0x44
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	1c59      	adds	r1, r3, #1
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	011b      	lsls	r3, r3, #4
 8003ddc:	1a9b      	subs	r3, r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4403      	add	r3, r0
 8003de2:	3344      	adds	r3, #68	@ 0x44
 8003de4:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003de6:	78fa      	ldrb	r2, [r7, #3]
 8003de8:	6879      	ldr	r1, [r7, #4]
 8003dea:	4613      	mov	r3, r2
 8003dec:	011b      	lsls	r3, r3, #4
 8003dee:	1a9b      	subs	r3, r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	440b      	add	r3, r1
 8003df4:	334c      	adds	r3, #76	@ 0x4c
 8003df6:	2204      	movs	r2, #4
 8003df8:	701a      	strb	r2, [r3, #0]
 8003dfa:	e00d      	b.n	8003e18 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003dfc:	78fa      	ldrb	r2, [r7, #3]
 8003dfe:	6879      	ldr	r1, [r7, #4]
 8003e00:	4613      	mov	r3, r2
 8003e02:	011b      	lsls	r3, r3, #4
 8003e04:	1a9b      	subs	r3, r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	440b      	add	r3, r1
 8003e0a:	334d      	adds	r3, #77	@ 0x4d
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	f000 8100 	beq.w	8004014 <HCD_HC_IN_IRQHandler+0xcca>
 8003e14:	e000      	b.n	8003e18 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003e16:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003e18:	78fa      	ldrb	r2, [r7, #3]
 8003e1a:	6879      	ldr	r1, [r7, #4]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	011b      	lsls	r3, r3, #4
 8003e20:	1a9b      	subs	r3, r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	440b      	add	r3, r1
 8003e26:	334c      	adds	r3, #76	@ 0x4c
 8003e28:	781a      	ldrb	r2, [r3, #0]
 8003e2a:	78fb      	ldrb	r3, [r7, #3]
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f005 fd6c 	bl	800990c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003e34:	e0ef      	b.n	8004016 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	78fa      	ldrb	r2, [r7, #3]
 8003e3c:	4611      	mov	r1, r2
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f003 fc9f 	bl	8007782 <USB_ReadChInterrupts>
 8003e44:	4603      	mov	r3, r0
 8003e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e4a:	2b40      	cmp	r3, #64	@ 0x40
 8003e4c:	d12f      	bne.n	8003eae <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003e4e:	78fb      	ldrb	r3, [r7, #3]
 8003e50:	015a      	lsls	r2, r3, #5
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	4413      	add	r3, r2
 8003e56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	2340      	movs	r3, #64	@ 0x40
 8003e5e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003e60:	78fa      	ldrb	r2, [r7, #3]
 8003e62:	6879      	ldr	r1, [r7, #4]
 8003e64:	4613      	mov	r3, r2
 8003e66:	011b      	lsls	r3, r3, #4
 8003e68:	1a9b      	subs	r3, r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	440b      	add	r3, r1
 8003e6e:	334d      	adds	r3, #77	@ 0x4d
 8003e70:	2205      	movs	r2, #5
 8003e72:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003e74:	78fa      	ldrb	r2, [r7, #3]
 8003e76:	6879      	ldr	r1, [r7, #4]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	011b      	lsls	r3, r3, #4
 8003e7c:	1a9b      	subs	r3, r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	440b      	add	r3, r1
 8003e82:	331a      	adds	r3, #26
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d109      	bne.n	8003e9e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003e8a:	78fa      	ldrb	r2, [r7, #3]
 8003e8c:	6879      	ldr	r1, [r7, #4]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	011b      	lsls	r3, r3, #4
 8003e92:	1a9b      	subs	r3, r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	440b      	add	r3, r1
 8003e98:	3344      	adds	r3, #68	@ 0x44
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	78fa      	ldrb	r2, [r7, #3]
 8003ea4:	4611      	mov	r1, r2
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f004 f9e5 	bl	8008276 <USB_HC_Halt>
 8003eac:	e0b3      	b.n	8004016 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	78fa      	ldrb	r2, [r7, #3]
 8003eb4:	4611      	mov	r1, r2
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f003 fc63 	bl	8007782 <USB_ReadChInterrupts>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	f003 0310 	and.w	r3, r3, #16
 8003ec2:	2b10      	cmp	r3, #16
 8003ec4:	f040 80a7 	bne.w	8004016 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003ec8:	78fa      	ldrb	r2, [r7, #3]
 8003eca:	6879      	ldr	r1, [r7, #4]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	011b      	lsls	r3, r3, #4
 8003ed0:	1a9b      	subs	r3, r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	440b      	add	r3, r1
 8003ed6:	3326      	adds	r3, #38	@ 0x26
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	2b03      	cmp	r3, #3
 8003edc:	d11b      	bne.n	8003f16 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003ede:	78fa      	ldrb	r2, [r7, #3]
 8003ee0:	6879      	ldr	r1, [r7, #4]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	011b      	lsls	r3, r3, #4
 8003ee6:	1a9b      	subs	r3, r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	440b      	add	r3, r1
 8003eec:	3344      	adds	r3, #68	@ 0x44
 8003eee:	2200      	movs	r2, #0
 8003ef0:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003ef2:	78fa      	ldrb	r2, [r7, #3]
 8003ef4:	6879      	ldr	r1, [r7, #4]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	011b      	lsls	r3, r3, #4
 8003efa:	1a9b      	subs	r3, r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	440b      	add	r3, r1
 8003f00:	334d      	adds	r3, #77	@ 0x4d
 8003f02:	2204      	movs	r2, #4
 8003f04:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	78fa      	ldrb	r2, [r7, #3]
 8003f0c:	4611      	mov	r1, r2
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f004 f9b1 	bl	8008276 <USB_HC_Halt>
 8003f14:	e03f      	b.n	8003f96 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003f16:	78fa      	ldrb	r2, [r7, #3]
 8003f18:	6879      	ldr	r1, [r7, #4]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	011b      	lsls	r3, r3, #4
 8003f1e:	1a9b      	subs	r3, r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	440b      	add	r3, r1
 8003f24:	3326      	adds	r3, #38	@ 0x26
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00a      	beq.n	8003f42 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003f2c:	78fa      	ldrb	r2, [r7, #3]
 8003f2e:	6879      	ldr	r1, [r7, #4]
 8003f30:	4613      	mov	r3, r2
 8003f32:	011b      	lsls	r3, r3, #4
 8003f34:	1a9b      	subs	r3, r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	440b      	add	r3, r1
 8003f3a:	3326      	adds	r3, #38	@ 0x26
 8003f3c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d129      	bne.n	8003f96 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003f42:	78fa      	ldrb	r2, [r7, #3]
 8003f44:	6879      	ldr	r1, [r7, #4]
 8003f46:	4613      	mov	r3, r2
 8003f48:	011b      	lsls	r3, r3, #4
 8003f4a:	1a9b      	subs	r3, r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	440b      	add	r3, r1
 8003f50:	3344      	adds	r3, #68	@ 0x44
 8003f52:	2200      	movs	r2, #0
 8003f54:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	799b      	ldrb	r3, [r3, #6]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00a      	beq.n	8003f74 <HCD_HC_IN_IRQHandler+0xc2a>
 8003f5e:	78fa      	ldrb	r2, [r7, #3]
 8003f60:	6879      	ldr	r1, [r7, #4]
 8003f62:	4613      	mov	r3, r2
 8003f64:	011b      	lsls	r3, r3, #4
 8003f66:	1a9b      	subs	r3, r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	440b      	add	r3, r1
 8003f6c:	331b      	adds	r3, #27
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d110      	bne.n	8003f96 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003f74:	78fa      	ldrb	r2, [r7, #3]
 8003f76:	6879      	ldr	r1, [r7, #4]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	011b      	lsls	r3, r3, #4
 8003f7c:	1a9b      	subs	r3, r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	440b      	add	r3, r1
 8003f82:	334d      	adds	r3, #77	@ 0x4d
 8003f84:	2204      	movs	r2, #4
 8003f86:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	78fa      	ldrb	r2, [r7, #3]
 8003f8e:	4611      	mov	r1, r2
 8003f90:	4618      	mov	r0, r3
 8003f92:	f004 f970 	bl	8008276 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003f96:	78fa      	ldrb	r2, [r7, #3]
 8003f98:	6879      	ldr	r1, [r7, #4]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	011b      	lsls	r3, r3, #4
 8003f9e:	1a9b      	subs	r3, r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	440b      	add	r3, r1
 8003fa4:	331b      	adds	r3, #27
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d129      	bne.n	8004000 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003fac:	78fa      	ldrb	r2, [r7, #3]
 8003fae:	6879      	ldr	r1, [r7, #4]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	011b      	lsls	r3, r3, #4
 8003fb4:	1a9b      	subs	r3, r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	440b      	add	r3, r1
 8003fba:	331b      	adds	r3, #27
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003fc0:	78fb      	ldrb	r3, [r7, #3]
 8003fc2:	015a      	lsls	r2, r3, #5
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	78fa      	ldrb	r2, [r7, #3]
 8003fd0:	0151      	lsls	r1, r2, #5
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	440a      	add	r2, r1
 8003fd6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003fda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fde:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003fe0:	78fb      	ldrb	r3, [r7, #3]
 8003fe2:	015a      	lsls	r2, r3, #5
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	78fa      	ldrb	r2, [r7, #3]
 8003ff0:	0151      	lsls	r1, r2, #5
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	440a      	add	r2, r1
 8003ff6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003ffa:	f043 0320 	orr.w	r3, r3, #32
 8003ffe:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004000:	78fb      	ldrb	r3, [r7, #3]
 8004002:	015a      	lsls	r2, r3, #5
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	4413      	add	r3, r2
 8004008:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800400c:	461a      	mov	r2, r3
 800400e:	2310      	movs	r3, #16
 8004010:	6093      	str	r3, [r2, #8]
 8004012:	e000      	b.n	8004016 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004014:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004016:	3718      	adds	r7, #24
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	460b      	mov	r3, r1
 8004026:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	78fa      	ldrb	r2, [r7, #3]
 8004038:	4611      	mov	r1, r2
 800403a:	4618      	mov	r0, r3
 800403c:	f003 fba1 	bl	8007782 <USB_ReadChInterrupts>
 8004040:	4603      	mov	r3, r0
 8004042:	f003 0304 	and.w	r3, r3, #4
 8004046:	2b04      	cmp	r3, #4
 8004048:	d11b      	bne.n	8004082 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800404a:	78fb      	ldrb	r3, [r7, #3]
 800404c:	015a      	lsls	r2, r3, #5
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	4413      	add	r3, r2
 8004052:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004056:	461a      	mov	r2, r3
 8004058:	2304      	movs	r3, #4
 800405a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800405c:	78fa      	ldrb	r2, [r7, #3]
 800405e:	6879      	ldr	r1, [r7, #4]
 8004060:	4613      	mov	r3, r2
 8004062:	011b      	lsls	r3, r3, #4
 8004064:	1a9b      	subs	r3, r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	440b      	add	r3, r1
 800406a:	334d      	adds	r3, #77	@ 0x4d
 800406c:	2207      	movs	r2, #7
 800406e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	78fa      	ldrb	r2, [r7, #3]
 8004076:	4611      	mov	r1, r2
 8004078:	4618      	mov	r0, r3
 800407a:	f004 f8fc 	bl	8008276 <USB_HC_Halt>
 800407e:	f000 bc89 	b.w	8004994 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	78fa      	ldrb	r2, [r7, #3]
 8004088:	4611      	mov	r1, r2
 800408a:	4618      	mov	r0, r3
 800408c:	f003 fb79 	bl	8007782 <USB_ReadChInterrupts>
 8004090:	4603      	mov	r3, r0
 8004092:	f003 0320 	and.w	r3, r3, #32
 8004096:	2b20      	cmp	r3, #32
 8004098:	f040 8082 	bne.w	80041a0 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800409c:	78fb      	ldrb	r3, [r7, #3]
 800409e:	015a      	lsls	r2, r3, #5
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	4413      	add	r3, r2
 80040a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040a8:	461a      	mov	r2, r3
 80040aa:	2320      	movs	r3, #32
 80040ac:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80040ae:	78fa      	ldrb	r2, [r7, #3]
 80040b0:	6879      	ldr	r1, [r7, #4]
 80040b2:	4613      	mov	r3, r2
 80040b4:	011b      	lsls	r3, r3, #4
 80040b6:	1a9b      	subs	r3, r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	440b      	add	r3, r1
 80040bc:	3319      	adds	r3, #25
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d124      	bne.n	800410e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80040c4:	78fa      	ldrb	r2, [r7, #3]
 80040c6:	6879      	ldr	r1, [r7, #4]
 80040c8:	4613      	mov	r3, r2
 80040ca:	011b      	lsls	r3, r3, #4
 80040cc:	1a9b      	subs	r3, r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	440b      	add	r3, r1
 80040d2:	3319      	adds	r3, #25
 80040d4:	2200      	movs	r2, #0
 80040d6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80040d8:	78fa      	ldrb	r2, [r7, #3]
 80040da:	6879      	ldr	r1, [r7, #4]
 80040dc:	4613      	mov	r3, r2
 80040de:	011b      	lsls	r3, r3, #4
 80040e0:	1a9b      	subs	r3, r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	440b      	add	r3, r1
 80040e6:	334c      	adds	r3, #76	@ 0x4c
 80040e8:	2202      	movs	r2, #2
 80040ea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80040ec:	78fa      	ldrb	r2, [r7, #3]
 80040ee:	6879      	ldr	r1, [r7, #4]
 80040f0:	4613      	mov	r3, r2
 80040f2:	011b      	lsls	r3, r3, #4
 80040f4:	1a9b      	subs	r3, r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	440b      	add	r3, r1
 80040fa:	334d      	adds	r3, #77	@ 0x4d
 80040fc:	2203      	movs	r2, #3
 80040fe:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	78fa      	ldrb	r2, [r7, #3]
 8004106:	4611      	mov	r1, r2
 8004108:	4618      	mov	r0, r3
 800410a:	f004 f8b4 	bl	8008276 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800410e:	78fa      	ldrb	r2, [r7, #3]
 8004110:	6879      	ldr	r1, [r7, #4]
 8004112:	4613      	mov	r3, r2
 8004114:	011b      	lsls	r3, r3, #4
 8004116:	1a9b      	subs	r3, r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	440b      	add	r3, r1
 800411c:	331a      	adds	r3, #26
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	2b01      	cmp	r3, #1
 8004122:	f040 8437 	bne.w	8004994 <HCD_HC_OUT_IRQHandler+0x978>
 8004126:	78fa      	ldrb	r2, [r7, #3]
 8004128:	6879      	ldr	r1, [r7, #4]
 800412a:	4613      	mov	r3, r2
 800412c:	011b      	lsls	r3, r3, #4
 800412e:	1a9b      	subs	r3, r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	440b      	add	r3, r1
 8004134:	331b      	adds	r3, #27
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	f040 842b 	bne.w	8004994 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800413e:	78fa      	ldrb	r2, [r7, #3]
 8004140:	6879      	ldr	r1, [r7, #4]
 8004142:	4613      	mov	r3, r2
 8004144:	011b      	lsls	r3, r3, #4
 8004146:	1a9b      	subs	r3, r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	440b      	add	r3, r1
 800414c:	3326      	adds	r3, #38	@ 0x26
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d009      	beq.n	8004168 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004154:	78fa      	ldrb	r2, [r7, #3]
 8004156:	6879      	ldr	r1, [r7, #4]
 8004158:	4613      	mov	r3, r2
 800415a:	011b      	lsls	r3, r3, #4
 800415c:	1a9b      	subs	r3, r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	440b      	add	r3, r1
 8004162:	331b      	adds	r3, #27
 8004164:	2201      	movs	r2, #1
 8004166:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004168:	78fa      	ldrb	r2, [r7, #3]
 800416a:	6879      	ldr	r1, [r7, #4]
 800416c:	4613      	mov	r3, r2
 800416e:	011b      	lsls	r3, r3, #4
 8004170:	1a9b      	subs	r3, r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	440b      	add	r3, r1
 8004176:	334d      	adds	r3, #77	@ 0x4d
 8004178:	2203      	movs	r2, #3
 800417a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	78fa      	ldrb	r2, [r7, #3]
 8004182:	4611      	mov	r1, r2
 8004184:	4618      	mov	r0, r3
 8004186:	f004 f876 	bl	8008276 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800418a:	78fa      	ldrb	r2, [r7, #3]
 800418c:	6879      	ldr	r1, [r7, #4]
 800418e:	4613      	mov	r3, r2
 8004190:	011b      	lsls	r3, r3, #4
 8004192:	1a9b      	subs	r3, r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	440b      	add	r3, r1
 8004198:	3344      	adds	r3, #68	@ 0x44
 800419a:	2200      	movs	r2, #0
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	e3f9      	b.n	8004994 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	78fa      	ldrb	r2, [r7, #3]
 80041a6:	4611      	mov	r1, r2
 80041a8:	4618      	mov	r0, r3
 80041aa:	f003 faea 	bl	8007782 <USB_ReadChInterrupts>
 80041ae:	4603      	mov	r3, r0
 80041b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041b8:	d111      	bne.n	80041de <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80041ba:	78fb      	ldrb	r3, [r7, #3]
 80041bc:	015a      	lsls	r2, r3, #5
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	4413      	add	r3, r2
 80041c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041c6:	461a      	mov	r2, r3
 80041c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80041cc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	78fa      	ldrb	r2, [r7, #3]
 80041d4:	4611      	mov	r1, r2
 80041d6:	4618      	mov	r0, r3
 80041d8:	f004 f84d 	bl	8008276 <USB_HC_Halt>
 80041dc:	e3da      	b.n	8004994 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	78fa      	ldrb	r2, [r7, #3]
 80041e4:	4611      	mov	r1, r2
 80041e6:	4618      	mov	r0, r3
 80041e8:	f003 facb 	bl	8007782 <USB_ReadChInterrupts>
 80041ec:	4603      	mov	r3, r0
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d168      	bne.n	80042c8 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80041f6:	78fa      	ldrb	r2, [r7, #3]
 80041f8:	6879      	ldr	r1, [r7, #4]
 80041fa:	4613      	mov	r3, r2
 80041fc:	011b      	lsls	r3, r3, #4
 80041fe:	1a9b      	subs	r3, r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	440b      	add	r3, r1
 8004204:	3344      	adds	r3, #68	@ 0x44
 8004206:	2200      	movs	r2, #0
 8004208:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	78fa      	ldrb	r2, [r7, #3]
 8004210:	4611      	mov	r1, r2
 8004212:	4618      	mov	r0, r3
 8004214:	f003 fab5 	bl	8007782 <USB_ReadChInterrupts>
 8004218:	4603      	mov	r3, r0
 800421a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800421e:	2b40      	cmp	r3, #64	@ 0x40
 8004220:	d112      	bne.n	8004248 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004222:	78fa      	ldrb	r2, [r7, #3]
 8004224:	6879      	ldr	r1, [r7, #4]
 8004226:	4613      	mov	r3, r2
 8004228:	011b      	lsls	r3, r3, #4
 800422a:	1a9b      	subs	r3, r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	440b      	add	r3, r1
 8004230:	3319      	adds	r3, #25
 8004232:	2201      	movs	r2, #1
 8004234:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004236:	78fb      	ldrb	r3, [r7, #3]
 8004238:	015a      	lsls	r2, r3, #5
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	4413      	add	r3, r2
 800423e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004242:	461a      	mov	r2, r3
 8004244:	2340      	movs	r3, #64	@ 0x40
 8004246:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004248:	78fa      	ldrb	r2, [r7, #3]
 800424a:	6879      	ldr	r1, [r7, #4]
 800424c:	4613      	mov	r3, r2
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	1a9b      	subs	r3, r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	440b      	add	r3, r1
 8004256:	331b      	adds	r3, #27
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d019      	beq.n	8004292 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800425e:	78fa      	ldrb	r2, [r7, #3]
 8004260:	6879      	ldr	r1, [r7, #4]
 8004262:	4613      	mov	r3, r2
 8004264:	011b      	lsls	r3, r3, #4
 8004266:	1a9b      	subs	r3, r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	440b      	add	r3, r1
 800426c:	331b      	adds	r3, #27
 800426e:	2200      	movs	r2, #0
 8004270:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004272:	78fb      	ldrb	r3, [r7, #3]
 8004274:	015a      	lsls	r2, r3, #5
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	4413      	add	r3, r2
 800427a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	78fa      	ldrb	r2, [r7, #3]
 8004282:	0151      	lsls	r1, r2, #5
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	440a      	add	r2, r1
 8004288:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800428c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004290:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004292:	78fb      	ldrb	r3, [r7, #3]
 8004294:	015a      	lsls	r2, r3, #5
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	4413      	add	r3, r2
 800429a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800429e:	461a      	mov	r2, r3
 80042a0:	2301      	movs	r3, #1
 80042a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80042a4:	78fa      	ldrb	r2, [r7, #3]
 80042a6:	6879      	ldr	r1, [r7, #4]
 80042a8:	4613      	mov	r3, r2
 80042aa:	011b      	lsls	r3, r3, #4
 80042ac:	1a9b      	subs	r3, r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	440b      	add	r3, r1
 80042b2:	334d      	adds	r3, #77	@ 0x4d
 80042b4:	2201      	movs	r2, #1
 80042b6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	78fa      	ldrb	r2, [r7, #3]
 80042be:	4611      	mov	r1, r2
 80042c0:	4618      	mov	r0, r3
 80042c2:	f003 ffd8 	bl	8008276 <USB_HC_Halt>
 80042c6:	e365      	b.n	8004994 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	78fa      	ldrb	r2, [r7, #3]
 80042ce:	4611      	mov	r1, r2
 80042d0:	4618      	mov	r0, r3
 80042d2:	f003 fa56 	bl	8007782 <USB_ReadChInterrupts>
 80042d6:	4603      	mov	r3, r0
 80042d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042dc:	2b40      	cmp	r3, #64	@ 0x40
 80042de:	d139      	bne.n	8004354 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80042e0:	78fa      	ldrb	r2, [r7, #3]
 80042e2:	6879      	ldr	r1, [r7, #4]
 80042e4:	4613      	mov	r3, r2
 80042e6:	011b      	lsls	r3, r3, #4
 80042e8:	1a9b      	subs	r3, r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	440b      	add	r3, r1
 80042ee:	334d      	adds	r3, #77	@ 0x4d
 80042f0:	2205      	movs	r2, #5
 80042f2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80042f4:	78fa      	ldrb	r2, [r7, #3]
 80042f6:	6879      	ldr	r1, [r7, #4]
 80042f8:	4613      	mov	r3, r2
 80042fa:	011b      	lsls	r3, r3, #4
 80042fc:	1a9b      	subs	r3, r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	440b      	add	r3, r1
 8004302:	331a      	adds	r3, #26
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d109      	bne.n	800431e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800430a:	78fa      	ldrb	r2, [r7, #3]
 800430c:	6879      	ldr	r1, [r7, #4]
 800430e:	4613      	mov	r3, r2
 8004310:	011b      	lsls	r3, r3, #4
 8004312:	1a9b      	subs	r3, r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	440b      	add	r3, r1
 8004318:	3319      	adds	r3, #25
 800431a:	2201      	movs	r2, #1
 800431c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800431e:	78fa      	ldrb	r2, [r7, #3]
 8004320:	6879      	ldr	r1, [r7, #4]
 8004322:	4613      	mov	r3, r2
 8004324:	011b      	lsls	r3, r3, #4
 8004326:	1a9b      	subs	r3, r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	440b      	add	r3, r1
 800432c:	3344      	adds	r3, #68	@ 0x44
 800432e:	2200      	movs	r2, #0
 8004330:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	78fa      	ldrb	r2, [r7, #3]
 8004338:	4611      	mov	r1, r2
 800433a:	4618      	mov	r0, r3
 800433c:	f003 ff9b 	bl	8008276 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004340:	78fb      	ldrb	r3, [r7, #3]
 8004342:	015a      	lsls	r2, r3, #5
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	4413      	add	r3, r2
 8004348:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800434c:	461a      	mov	r2, r3
 800434e:	2340      	movs	r3, #64	@ 0x40
 8004350:	6093      	str	r3, [r2, #8]
 8004352:	e31f      	b.n	8004994 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	78fa      	ldrb	r2, [r7, #3]
 800435a:	4611      	mov	r1, r2
 800435c:	4618      	mov	r0, r3
 800435e:	f003 fa10 	bl	8007782 <USB_ReadChInterrupts>
 8004362:	4603      	mov	r3, r0
 8004364:	f003 0308 	and.w	r3, r3, #8
 8004368:	2b08      	cmp	r3, #8
 800436a:	d11a      	bne.n	80043a2 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800436c:	78fb      	ldrb	r3, [r7, #3]
 800436e:	015a      	lsls	r2, r3, #5
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	4413      	add	r3, r2
 8004374:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004378:	461a      	mov	r2, r3
 800437a:	2308      	movs	r3, #8
 800437c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800437e:	78fa      	ldrb	r2, [r7, #3]
 8004380:	6879      	ldr	r1, [r7, #4]
 8004382:	4613      	mov	r3, r2
 8004384:	011b      	lsls	r3, r3, #4
 8004386:	1a9b      	subs	r3, r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	440b      	add	r3, r1
 800438c:	334d      	adds	r3, #77	@ 0x4d
 800438e:	2206      	movs	r2, #6
 8004390:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	78fa      	ldrb	r2, [r7, #3]
 8004398:	4611      	mov	r1, r2
 800439a:	4618      	mov	r0, r3
 800439c:	f003 ff6b 	bl	8008276 <USB_HC_Halt>
 80043a0:	e2f8      	b.n	8004994 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	78fa      	ldrb	r2, [r7, #3]
 80043a8:	4611      	mov	r1, r2
 80043aa:	4618      	mov	r0, r3
 80043ac:	f003 f9e9 	bl	8007782 <USB_ReadChInterrupts>
 80043b0:	4603      	mov	r3, r0
 80043b2:	f003 0310 	and.w	r3, r3, #16
 80043b6:	2b10      	cmp	r3, #16
 80043b8:	d144      	bne.n	8004444 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80043ba:	78fa      	ldrb	r2, [r7, #3]
 80043bc:	6879      	ldr	r1, [r7, #4]
 80043be:	4613      	mov	r3, r2
 80043c0:	011b      	lsls	r3, r3, #4
 80043c2:	1a9b      	subs	r3, r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	440b      	add	r3, r1
 80043c8:	3344      	adds	r3, #68	@ 0x44
 80043ca:	2200      	movs	r2, #0
 80043cc:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80043ce:	78fa      	ldrb	r2, [r7, #3]
 80043d0:	6879      	ldr	r1, [r7, #4]
 80043d2:	4613      	mov	r3, r2
 80043d4:	011b      	lsls	r3, r3, #4
 80043d6:	1a9b      	subs	r3, r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	440b      	add	r3, r1
 80043dc:	334d      	adds	r3, #77	@ 0x4d
 80043de:	2204      	movs	r2, #4
 80043e0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80043e2:	78fa      	ldrb	r2, [r7, #3]
 80043e4:	6879      	ldr	r1, [r7, #4]
 80043e6:	4613      	mov	r3, r2
 80043e8:	011b      	lsls	r3, r3, #4
 80043ea:	1a9b      	subs	r3, r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	440b      	add	r3, r1
 80043f0:	3319      	adds	r3, #25
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d114      	bne.n	8004422 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80043f8:	78fa      	ldrb	r2, [r7, #3]
 80043fa:	6879      	ldr	r1, [r7, #4]
 80043fc:	4613      	mov	r3, r2
 80043fe:	011b      	lsls	r3, r3, #4
 8004400:	1a9b      	subs	r3, r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	440b      	add	r3, r1
 8004406:	3318      	adds	r3, #24
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d109      	bne.n	8004422 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800440e:	78fa      	ldrb	r2, [r7, #3]
 8004410:	6879      	ldr	r1, [r7, #4]
 8004412:	4613      	mov	r3, r2
 8004414:	011b      	lsls	r3, r3, #4
 8004416:	1a9b      	subs	r3, r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	440b      	add	r3, r1
 800441c:	3319      	adds	r3, #25
 800441e:	2201      	movs	r2, #1
 8004420:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	78fa      	ldrb	r2, [r7, #3]
 8004428:	4611      	mov	r1, r2
 800442a:	4618      	mov	r0, r3
 800442c:	f003 ff23 	bl	8008276 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004430:	78fb      	ldrb	r3, [r7, #3]
 8004432:	015a      	lsls	r2, r3, #5
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	4413      	add	r3, r2
 8004438:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800443c:	461a      	mov	r2, r3
 800443e:	2310      	movs	r3, #16
 8004440:	6093      	str	r3, [r2, #8]
 8004442:	e2a7      	b.n	8004994 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	78fa      	ldrb	r2, [r7, #3]
 800444a:	4611      	mov	r1, r2
 800444c:	4618      	mov	r0, r3
 800444e:	f003 f998 	bl	8007782 <USB_ReadChInterrupts>
 8004452:	4603      	mov	r3, r0
 8004454:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004458:	2b80      	cmp	r3, #128	@ 0x80
 800445a:	f040 8083 	bne.w	8004564 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	799b      	ldrb	r3, [r3, #6]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d111      	bne.n	800448a <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004466:	78fa      	ldrb	r2, [r7, #3]
 8004468:	6879      	ldr	r1, [r7, #4]
 800446a:	4613      	mov	r3, r2
 800446c:	011b      	lsls	r3, r3, #4
 800446e:	1a9b      	subs	r3, r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	440b      	add	r3, r1
 8004474:	334d      	adds	r3, #77	@ 0x4d
 8004476:	2207      	movs	r2, #7
 8004478:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	78fa      	ldrb	r2, [r7, #3]
 8004480:	4611      	mov	r1, r2
 8004482:	4618      	mov	r0, r3
 8004484:	f003 fef7 	bl	8008276 <USB_HC_Halt>
 8004488:	e062      	b.n	8004550 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800448a:	78fa      	ldrb	r2, [r7, #3]
 800448c:	6879      	ldr	r1, [r7, #4]
 800448e:	4613      	mov	r3, r2
 8004490:	011b      	lsls	r3, r3, #4
 8004492:	1a9b      	subs	r3, r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	440b      	add	r3, r1
 8004498:	3344      	adds	r3, #68	@ 0x44
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	1c59      	adds	r1, r3, #1
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	4613      	mov	r3, r2
 80044a2:	011b      	lsls	r3, r3, #4
 80044a4:	1a9b      	subs	r3, r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4403      	add	r3, r0
 80044aa:	3344      	adds	r3, #68	@ 0x44
 80044ac:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80044ae:	78fa      	ldrb	r2, [r7, #3]
 80044b0:	6879      	ldr	r1, [r7, #4]
 80044b2:	4613      	mov	r3, r2
 80044b4:	011b      	lsls	r3, r3, #4
 80044b6:	1a9b      	subs	r3, r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	440b      	add	r3, r1
 80044bc:	3344      	adds	r3, #68	@ 0x44
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d922      	bls.n	800450a <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80044c4:	78fa      	ldrb	r2, [r7, #3]
 80044c6:	6879      	ldr	r1, [r7, #4]
 80044c8:	4613      	mov	r3, r2
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	1a9b      	subs	r3, r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	440b      	add	r3, r1
 80044d2:	3344      	adds	r3, #68	@ 0x44
 80044d4:	2200      	movs	r2, #0
 80044d6:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80044d8:	78fa      	ldrb	r2, [r7, #3]
 80044da:	6879      	ldr	r1, [r7, #4]
 80044dc:	4613      	mov	r3, r2
 80044de:	011b      	lsls	r3, r3, #4
 80044e0:	1a9b      	subs	r3, r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	440b      	add	r3, r1
 80044e6:	334c      	adds	r3, #76	@ 0x4c
 80044e8:	2204      	movs	r2, #4
 80044ea:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80044ec:	78fa      	ldrb	r2, [r7, #3]
 80044ee:	6879      	ldr	r1, [r7, #4]
 80044f0:	4613      	mov	r3, r2
 80044f2:	011b      	lsls	r3, r3, #4
 80044f4:	1a9b      	subs	r3, r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	440b      	add	r3, r1
 80044fa:	334c      	adds	r3, #76	@ 0x4c
 80044fc:	781a      	ldrb	r2, [r3, #0]
 80044fe:	78fb      	ldrb	r3, [r7, #3]
 8004500:	4619      	mov	r1, r3
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f005 fa02 	bl	800990c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004508:	e022      	b.n	8004550 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800450a:	78fa      	ldrb	r2, [r7, #3]
 800450c:	6879      	ldr	r1, [r7, #4]
 800450e:	4613      	mov	r3, r2
 8004510:	011b      	lsls	r3, r3, #4
 8004512:	1a9b      	subs	r3, r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	440b      	add	r3, r1
 8004518:	334c      	adds	r3, #76	@ 0x4c
 800451a:	2202      	movs	r2, #2
 800451c:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800451e:	78fb      	ldrb	r3, [r7, #3]
 8004520:	015a      	lsls	r2, r3, #5
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	4413      	add	r3, r2
 8004526:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004534:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800453c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800453e:	78fb      	ldrb	r3, [r7, #3]
 8004540:	015a      	lsls	r2, r3, #5
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	4413      	add	r3, r2
 8004546:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800454a:	461a      	mov	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004550:	78fb      	ldrb	r3, [r7, #3]
 8004552:	015a      	lsls	r2, r3, #5
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	4413      	add	r3, r2
 8004558:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800455c:	461a      	mov	r2, r3
 800455e:	2380      	movs	r3, #128	@ 0x80
 8004560:	6093      	str	r3, [r2, #8]
 8004562:	e217      	b.n	8004994 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	78fa      	ldrb	r2, [r7, #3]
 800456a:	4611      	mov	r1, r2
 800456c:	4618      	mov	r0, r3
 800456e:	f003 f908 	bl	8007782 <USB_ReadChInterrupts>
 8004572:	4603      	mov	r3, r0
 8004574:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004578:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800457c:	d11b      	bne.n	80045b6 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800457e:	78fa      	ldrb	r2, [r7, #3]
 8004580:	6879      	ldr	r1, [r7, #4]
 8004582:	4613      	mov	r3, r2
 8004584:	011b      	lsls	r3, r3, #4
 8004586:	1a9b      	subs	r3, r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	440b      	add	r3, r1
 800458c:	334d      	adds	r3, #77	@ 0x4d
 800458e:	2209      	movs	r2, #9
 8004590:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	78fa      	ldrb	r2, [r7, #3]
 8004598:	4611      	mov	r1, r2
 800459a:	4618      	mov	r0, r3
 800459c:	f003 fe6b 	bl	8008276 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80045a0:	78fb      	ldrb	r3, [r7, #3]
 80045a2:	015a      	lsls	r2, r3, #5
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	4413      	add	r3, r2
 80045a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045ac:	461a      	mov	r2, r3
 80045ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80045b2:	6093      	str	r3, [r2, #8]
 80045b4:	e1ee      	b.n	8004994 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	78fa      	ldrb	r2, [r7, #3]
 80045bc:	4611      	mov	r1, r2
 80045be:	4618      	mov	r0, r3
 80045c0:	f003 f8df 	bl	8007782 <USB_ReadChInterrupts>
 80045c4:	4603      	mov	r3, r0
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	f040 81df 	bne.w	800498e <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80045d0:	78fb      	ldrb	r3, [r7, #3]
 80045d2:	015a      	lsls	r2, r3, #5
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	4413      	add	r3, r2
 80045d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045dc:	461a      	mov	r2, r3
 80045de:	2302      	movs	r3, #2
 80045e0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80045e2:	78fa      	ldrb	r2, [r7, #3]
 80045e4:	6879      	ldr	r1, [r7, #4]
 80045e6:	4613      	mov	r3, r2
 80045e8:	011b      	lsls	r3, r3, #4
 80045ea:	1a9b      	subs	r3, r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	440b      	add	r3, r1
 80045f0:	334d      	adds	r3, #77	@ 0x4d
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	f040 8093 	bne.w	8004720 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80045fa:	78fa      	ldrb	r2, [r7, #3]
 80045fc:	6879      	ldr	r1, [r7, #4]
 80045fe:	4613      	mov	r3, r2
 8004600:	011b      	lsls	r3, r3, #4
 8004602:	1a9b      	subs	r3, r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	440b      	add	r3, r1
 8004608:	334d      	adds	r3, #77	@ 0x4d
 800460a:	2202      	movs	r2, #2
 800460c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800460e:	78fa      	ldrb	r2, [r7, #3]
 8004610:	6879      	ldr	r1, [r7, #4]
 8004612:	4613      	mov	r3, r2
 8004614:	011b      	lsls	r3, r3, #4
 8004616:	1a9b      	subs	r3, r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	440b      	add	r3, r1
 800461c:	334c      	adds	r3, #76	@ 0x4c
 800461e:	2201      	movs	r2, #1
 8004620:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004622:	78fa      	ldrb	r2, [r7, #3]
 8004624:	6879      	ldr	r1, [r7, #4]
 8004626:	4613      	mov	r3, r2
 8004628:	011b      	lsls	r3, r3, #4
 800462a:	1a9b      	subs	r3, r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	440b      	add	r3, r1
 8004630:	3326      	adds	r3, #38	@ 0x26
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	2b02      	cmp	r3, #2
 8004636:	d00b      	beq.n	8004650 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004638:	78fa      	ldrb	r2, [r7, #3]
 800463a:	6879      	ldr	r1, [r7, #4]
 800463c:	4613      	mov	r3, r2
 800463e:	011b      	lsls	r3, r3, #4
 8004640:	1a9b      	subs	r3, r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	440b      	add	r3, r1
 8004646:	3326      	adds	r3, #38	@ 0x26
 8004648:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800464a:	2b03      	cmp	r3, #3
 800464c:	f040 8190 	bne.w	8004970 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	799b      	ldrb	r3, [r3, #6]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d115      	bne.n	8004684 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004658:	78fa      	ldrb	r2, [r7, #3]
 800465a:	6879      	ldr	r1, [r7, #4]
 800465c:	4613      	mov	r3, r2
 800465e:	011b      	lsls	r3, r3, #4
 8004660:	1a9b      	subs	r3, r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	440b      	add	r3, r1
 8004666:	333d      	adds	r3, #61	@ 0x3d
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	78fa      	ldrb	r2, [r7, #3]
 800466c:	f083 0301 	eor.w	r3, r3, #1
 8004670:	b2d8      	uxtb	r0, r3
 8004672:	6879      	ldr	r1, [r7, #4]
 8004674:	4613      	mov	r3, r2
 8004676:	011b      	lsls	r3, r3, #4
 8004678:	1a9b      	subs	r3, r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	440b      	add	r3, r1
 800467e:	333d      	adds	r3, #61	@ 0x3d
 8004680:	4602      	mov	r2, r0
 8004682:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	799b      	ldrb	r3, [r3, #6]
 8004688:	2b01      	cmp	r3, #1
 800468a:	f040 8171 	bne.w	8004970 <HCD_HC_OUT_IRQHandler+0x954>
 800468e:	78fa      	ldrb	r2, [r7, #3]
 8004690:	6879      	ldr	r1, [r7, #4]
 8004692:	4613      	mov	r3, r2
 8004694:	011b      	lsls	r3, r3, #4
 8004696:	1a9b      	subs	r3, r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	440b      	add	r3, r1
 800469c:	3334      	adds	r3, #52	@ 0x34
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 8165 	beq.w	8004970 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80046a6:	78fa      	ldrb	r2, [r7, #3]
 80046a8:	6879      	ldr	r1, [r7, #4]
 80046aa:	4613      	mov	r3, r2
 80046ac:	011b      	lsls	r3, r3, #4
 80046ae:	1a9b      	subs	r3, r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	440b      	add	r3, r1
 80046b4:	3334      	adds	r3, #52	@ 0x34
 80046b6:	6819      	ldr	r1, [r3, #0]
 80046b8:	78fa      	ldrb	r2, [r7, #3]
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	4613      	mov	r3, r2
 80046be:	011b      	lsls	r3, r3, #4
 80046c0:	1a9b      	subs	r3, r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4403      	add	r3, r0
 80046c6:	3328      	adds	r3, #40	@ 0x28
 80046c8:	881b      	ldrh	r3, [r3, #0]
 80046ca:	440b      	add	r3, r1
 80046cc:	1e59      	subs	r1, r3, #1
 80046ce:	78fa      	ldrb	r2, [r7, #3]
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	4613      	mov	r3, r2
 80046d4:	011b      	lsls	r3, r3, #4
 80046d6:	1a9b      	subs	r3, r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4403      	add	r3, r0
 80046dc:	3328      	adds	r3, #40	@ 0x28
 80046de:	881b      	ldrh	r3, [r3, #0]
 80046e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80046e4:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 813f 	beq.w	8004970 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80046f2:	78fa      	ldrb	r2, [r7, #3]
 80046f4:	6879      	ldr	r1, [r7, #4]
 80046f6:	4613      	mov	r3, r2
 80046f8:	011b      	lsls	r3, r3, #4
 80046fa:	1a9b      	subs	r3, r3, r2
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	440b      	add	r3, r1
 8004700:	333d      	adds	r3, #61	@ 0x3d
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	78fa      	ldrb	r2, [r7, #3]
 8004706:	f083 0301 	eor.w	r3, r3, #1
 800470a:	b2d8      	uxtb	r0, r3
 800470c:	6879      	ldr	r1, [r7, #4]
 800470e:	4613      	mov	r3, r2
 8004710:	011b      	lsls	r3, r3, #4
 8004712:	1a9b      	subs	r3, r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	440b      	add	r3, r1
 8004718:	333d      	adds	r3, #61	@ 0x3d
 800471a:	4602      	mov	r2, r0
 800471c:	701a      	strb	r2, [r3, #0]
 800471e:	e127      	b.n	8004970 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004720:	78fa      	ldrb	r2, [r7, #3]
 8004722:	6879      	ldr	r1, [r7, #4]
 8004724:	4613      	mov	r3, r2
 8004726:	011b      	lsls	r3, r3, #4
 8004728:	1a9b      	subs	r3, r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	440b      	add	r3, r1
 800472e:	334d      	adds	r3, #77	@ 0x4d
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	2b03      	cmp	r3, #3
 8004734:	d120      	bne.n	8004778 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004736:	78fa      	ldrb	r2, [r7, #3]
 8004738:	6879      	ldr	r1, [r7, #4]
 800473a:	4613      	mov	r3, r2
 800473c:	011b      	lsls	r3, r3, #4
 800473e:	1a9b      	subs	r3, r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	440b      	add	r3, r1
 8004744:	334d      	adds	r3, #77	@ 0x4d
 8004746:	2202      	movs	r2, #2
 8004748:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800474a:	78fa      	ldrb	r2, [r7, #3]
 800474c:	6879      	ldr	r1, [r7, #4]
 800474e:	4613      	mov	r3, r2
 8004750:	011b      	lsls	r3, r3, #4
 8004752:	1a9b      	subs	r3, r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	440b      	add	r3, r1
 8004758:	331b      	adds	r3, #27
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	2b01      	cmp	r3, #1
 800475e:	f040 8107 	bne.w	8004970 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004762:	78fa      	ldrb	r2, [r7, #3]
 8004764:	6879      	ldr	r1, [r7, #4]
 8004766:	4613      	mov	r3, r2
 8004768:	011b      	lsls	r3, r3, #4
 800476a:	1a9b      	subs	r3, r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	440b      	add	r3, r1
 8004770:	334c      	adds	r3, #76	@ 0x4c
 8004772:	2202      	movs	r2, #2
 8004774:	701a      	strb	r2, [r3, #0]
 8004776:	e0fb      	b.n	8004970 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004778:	78fa      	ldrb	r2, [r7, #3]
 800477a:	6879      	ldr	r1, [r7, #4]
 800477c:	4613      	mov	r3, r2
 800477e:	011b      	lsls	r3, r3, #4
 8004780:	1a9b      	subs	r3, r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	440b      	add	r3, r1
 8004786:	334d      	adds	r3, #77	@ 0x4d
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	2b04      	cmp	r3, #4
 800478c:	d13a      	bne.n	8004804 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800478e:	78fa      	ldrb	r2, [r7, #3]
 8004790:	6879      	ldr	r1, [r7, #4]
 8004792:	4613      	mov	r3, r2
 8004794:	011b      	lsls	r3, r3, #4
 8004796:	1a9b      	subs	r3, r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	440b      	add	r3, r1
 800479c:	334d      	adds	r3, #77	@ 0x4d
 800479e:	2202      	movs	r2, #2
 80047a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80047a2:	78fa      	ldrb	r2, [r7, #3]
 80047a4:	6879      	ldr	r1, [r7, #4]
 80047a6:	4613      	mov	r3, r2
 80047a8:	011b      	lsls	r3, r3, #4
 80047aa:	1a9b      	subs	r3, r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	440b      	add	r3, r1
 80047b0:	334c      	adds	r3, #76	@ 0x4c
 80047b2:	2202      	movs	r2, #2
 80047b4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80047b6:	78fa      	ldrb	r2, [r7, #3]
 80047b8:	6879      	ldr	r1, [r7, #4]
 80047ba:	4613      	mov	r3, r2
 80047bc:	011b      	lsls	r3, r3, #4
 80047be:	1a9b      	subs	r3, r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	440b      	add	r3, r1
 80047c4:	331b      	adds	r3, #27
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	f040 80d1 	bne.w	8004970 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80047ce:	78fa      	ldrb	r2, [r7, #3]
 80047d0:	6879      	ldr	r1, [r7, #4]
 80047d2:	4613      	mov	r3, r2
 80047d4:	011b      	lsls	r3, r3, #4
 80047d6:	1a9b      	subs	r3, r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	440b      	add	r3, r1
 80047dc:	331b      	adds	r3, #27
 80047de:	2200      	movs	r2, #0
 80047e0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80047e2:	78fb      	ldrb	r3, [r7, #3]
 80047e4:	015a      	lsls	r2, r3, #5
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	4413      	add	r3, r2
 80047ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	78fa      	ldrb	r2, [r7, #3]
 80047f2:	0151      	lsls	r1, r2, #5
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	440a      	add	r2, r1
 80047f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80047fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004800:	6053      	str	r3, [r2, #4]
 8004802:	e0b5      	b.n	8004970 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004804:	78fa      	ldrb	r2, [r7, #3]
 8004806:	6879      	ldr	r1, [r7, #4]
 8004808:	4613      	mov	r3, r2
 800480a:	011b      	lsls	r3, r3, #4
 800480c:	1a9b      	subs	r3, r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	440b      	add	r3, r1
 8004812:	334d      	adds	r3, #77	@ 0x4d
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	2b05      	cmp	r3, #5
 8004818:	d114      	bne.n	8004844 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800481a:	78fa      	ldrb	r2, [r7, #3]
 800481c:	6879      	ldr	r1, [r7, #4]
 800481e:	4613      	mov	r3, r2
 8004820:	011b      	lsls	r3, r3, #4
 8004822:	1a9b      	subs	r3, r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	440b      	add	r3, r1
 8004828:	334d      	adds	r3, #77	@ 0x4d
 800482a:	2202      	movs	r2, #2
 800482c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800482e:	78fa      	ldrb	r2, [r7, #3]
 8004830:	6879      	ldr	r1, [r7, #4]
 8004832:	4613      	mov	r3, r2
 8004834:	011b      	lsls	r3, r3, #4
 8004836:	1a9b      	subs	r3, r3, r2
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	440b      	add	r3, r1
 800483c:	334c      	adds	r3, #76	@ 0x4c
 800483e:	2202      	movs	r2, #2
 8004840:	701a      	strb	r2, [r3, #0]
 8004842:	e095      	b.n	8004970 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004844:	78fa      	ldrb	r2, [r7, #3]
 8004846:	6879      	ldr	r1, [r7, #4]
 8004848:	4613      	mov	r3, r2
 800484a:	011b      	lsls	r3, r3, #4
 800484c:	1a9b      	subs	r3, r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	440b      	add	r3, r1
 8004852:	334d      	adds	r3, #77	@ 0x4d
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	2b06      	cmp	r3, #6
 8004858:	d114      	bne.n	8004884 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800485a:	78fa      	ldrb	r2, [r7, #3]
 800485c:	6879      	ldr	r1, [r7, #4]
 800485e:	4613      	mov	r3, r2
 8004860:	011b      	lsls	r3, r3, #4
 8004862:	1a9b      	subs	r3, r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	440b      	add	r3, r1
 8004868:	334d      	adds	r3, #77	@ 0x4d
 800486a:	2202      	movs	r2, #2
 800486c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800486e:	78fa      	ldrb	r2, [r7, #3]
 8004870:	6879      	ldr	r1, [r7, #4]
 8004872:	4613      	mov	r3, r2
 8004874:	011b      	lsls	r3, r3, #4
 8004876:	1a9b      	subs	r3, r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	440b      	add	r3, r1
 800487c:	334c      	adds	r3, #76	@ 0x4c
 800487e:	2205      	movs	r2, #5
 8004880:	701a      	strb	r2, [r3, #0]
 8004882:	e075      	b.n	8004970 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004884:	78fa      	ldrb	r2, [r7, #3]
 8004886:	6879      	ldr	r1, [r7, #4]
 8004888:	4613      	mov	r3, r2
 800488a:	011b      	lsls	r3, r3, #4
 800488c:	1a9b      	subs	r3, r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	440b      	add	r3, r1
 8004892:	334d      	adds	r3, #77	@ 0x4d
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	2b07      	cmp	r3, #7
 8004898:	d00a      	beq.n	80048b0 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800489a:	78fa      	ldrb	r2, [r7, #3]
 800489c:	6879      	ldr	r1, [r7, #4]
 800489e:	4613      	mov	r3, r2
 80048a0:	011b      	lsls	r3, r3, #4
 80048a2:	1a9b      	subs	r3, r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	440b      	add	r3, r1
 80048a8:	334d      	adds	r3, #77	@ 0x4d
 80048aa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80048ac:	2b09      	cmp	r3, #9
 80048ae:	d170      	bne.n	8004992 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80048b0:	78fa      	ldrb	r2, [r7, #3]
 80048b2:	6879      	ldr	r1, [r7, #4]
 80048b4:	4613      	mov	r3, r2
 80048b6:	011b      	lsls	r3, r3, #4
 80048b8:	1a9b      	subs	r3, r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	440b      	add	r3, r1
 80048be:	334d      	adds	r3, #77	@ 0x4d
 80048c0:	2202      	movs	r2, #2
 80048c2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80048c4:	78fa      	ldrb	r2, [r7, #3]
 80048c6:	6879      	ldr	r1, [r7, #4]
 80048c8:	4613      	mov	r3, r2
 80048ca:	011b      	lsls	r3, r3, #4
 80048cc:	1a9b      	subs	r3, r3, r2
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	440b      	add	r3, r1
 80048d2:	3344      	adds	r3, #68	@ 0x44
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	1c59      	adds	r1, r3, #1
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	4613      	mov	r3, r2
 80048dc:	011b      	lsls	r3, r3, #4
 80048de:	1a9b      	subs	r3, r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	4403      	add	r3, r0
 80048e4:	3344      	adds	r3, #68	@ 0x44
 80048e6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80048e8:	78fa      	ldrb	r2, [r7, #3]
 80048ea:	6879      	ldr	r1, [r7, #4]
 80048ec:	4613      	mov	r3, r2
 80048ee:	011b      	lsls	r3, r3, #4
 80048f0:	1a9b      	subs	r3, r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	440b      	add	r3, r1
 80048f6:	3344      	adds	r3, #68	@ 0x44
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d914      	bls.n	8004928 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80048fe:	78fa      	ldrb	r2, [r7, #3]
 8004900:	6879      	ldr	r1, [r7, #4]
 8004902:	4613      	mov	r3, r2
 8004904:	011b      	lsls	r3, r3, #4
 8004906:	1a9b      	subs	r3, r3, r2
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	440b      	add	r3, r1
 800490c:	3344      	adds	r3, #68	@ 0x44
 800490e:	2200      	movs	r2, #0
 8004910:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004912:	78fa      	ldrb	r2, [r7, #3]
 8004914:	6879      	ldr	r1, [r7, #4]
 8004916:	4613      	mov	r3, r2
 8004918:	011b      	lsls	r3, r3, #4
 800491a:	1a9b      	subs	r3, r3, r2
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	440b      	add	r3, r1
 8004920:	334c      	adds	r3, #76	@ 0x4c
 8004922:	2204      	movs	r2, #4
 8004924:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004926:	e022      	b.n	800496e <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004928:	78fa      	ldrb	r2, [r7, #3]
 800492a:	6879      	ldr	r1, [r7, #4]
 800492c:	4613      	mov	r3, r2
 800492e:	011b      	lsls	r3, r3, #4
 8004930:	1a9b      	subs	r3, r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	440b      	add	r3, r1
 8004936:	334c      	adds	r3, #76	@ 0x4c
 8004938:	2202      	movs	r2, #2
 800493a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800493c:	78fb      	ldrb	r3, [r7, #3]
 800493e:	015a      	lsls	r2, r3, #5
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	4413      	add	r3, r2
 8004944:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004952:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800495a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800495c:	78fb      	ldrb	r3, [r7, #3]
 800495e:	015a      	lsls	r2, r3, #5
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	4413      	add	r3, r2
 8004964:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004968:	461a      	mov	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800496e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004970:	78fa      	ldrb	r2, [r7, #3]
 8004972:	6879      	ldr	r1, [r7, #4]
 8004974:	4613      	mov	r3, r2
 8004976:	011b      	lsls	r3, r3, #4
 8004978:	1a9b      	subs	r3, r3, r2
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	440b      	add	r3, r1
 800497e:	334c      	adds	r3, #76	@ 0x4c
 8004980:	781a      	ldrb	r2, [r3, #0]
 8004982:	78fb      	ldrb	r3, [r7, #3]
 8004984:	4619      	mov	r1, r3
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f004 ffc0 	bl	800990c <HAL_HCD_HC_NotifyURBChange_Callback>
 800498c:	e002      	b.n	8004994 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800498e:	bf00      	nop
 8004990:	e000      	b.n	8004994 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8004992:	bf00      	nop
  }
}
 8004994:	3718      	adds	r7, #24
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b08a      	sub	sp, #40	@ 0x28
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049aa:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	f003 030f 	and.w	r3, r3, #15
 80049ba:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	0c5b      	lsrs	r3, r3, #17
 80049c0:	f003 030f 	and.w	r3, r3, #15
 80049c4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	091b      	lsrs	r3, r3, #4
 80049ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049ce:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d004      	beq.n	80049e0 <HCD_RXQLVL_IRQHandler+0x46>
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	2b05      	cmp	r3, #5
 80049da:	f000 80b6 	beq.w	8004b4a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80049de:	e0b7      	b.n	8004b50 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f000 80b3 	beq.w	8004b4e <HCD_RXQLVL_IRQHandler+0x1b4>
 80049e8:	6879      	ldr	r1, [r7, #4]
 80049ea:	69ba      	ldr	r2, [r7, #24]
 80049ec:	4613      	mov	r3, r2
 80049ee:	011b      	lsls	r3, r3, #4
 80049f0:	1a9b      	subs	r3, r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	440b      	add	r3, r1
 80049f6:	332c      	adds	r3, #44	@ 0x2c
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f000 80a7 	beq.w	8004b4e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004a00:	6879      	ldr	r1, [r7, #4]
 8004a02:	69ba      	ldr	r2, [r7, #24]
 8004a04:	4613      	mov	r3, r2
 8004a06:	011b      	lsls	r3, r3, #4
 8004a08:	1a9b      	subs	r3, r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	440b      	add	r3, r1
 8004a0e:	3338      	adds	r3, #56	@ 0x38
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	18d1      	adds	r1, r2, r3
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	011b      	lsls	r3, r3, #4
 8004a1e:	1a9b      	subs	r3, r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	4403      	add	r3, r0
 8004a24:	3334      	adds	r3, #52	@ 0x34
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4299      	cmp	r1, r3
 8004a2a:	f200 8083 	bhi.w	8004b34 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6818      	ldr	r0, [r3, #0]
 8004a32:	6879      	ldr	r1, [r7, #4]
 8004a34:	69ba      	ldr	r2, [r7, #24]
 8004a36:	4613      	mov	r3, r2
 8004a38:	011b      	lsls	r3, r3, #4
 8004a3a:	1a9b      	subs	r3, r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	440b      	add	r3, r1
 8004a40:	332c      	adds	r3, #44	@ 0x2c
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	b292      	uxth	r2, r2
 8004a48:	4619      	mov	r1, r3
 8004a4a:	f002 fe2f 	bl	80076ac <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004a4e:	6879      	ldr	r1, [r7, #4]
 8004a50:	69ba      	ldr	r2, [r7, #24]
 8004a52:	4613      	mov	r3, r2
 8004a54:	011b      	lsls	r3, r3, #4
 8004a56:	1a9b      	subs	r3, r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	440b      	add	r3, r1
 8004a5c:	332c      	adds	r3, #44	@ 0x2c
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	18d1      	adds	r1, r2, r3
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	4613      	mov	r3, r2
 8004a6a:	011b      	lsls	r3, r3, #4
 8004a6c:	1a9b      	subs	r3, r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4403      	add	r3, r0
 8004a72:	332c      	adds	r3, #44	@ 0x2c
 8004a74:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004a76:	6879      	ldr	r1, [r7, #4]
 8004a78:	69ba      	ldr	r2, [r7, #24]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	011b      	lsls	r3, r3, #4
 8004a7e:	1a9b      	subs	r3, r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	440b      	add	r3, r1
 8004a84:	3338      	adds	r3, #56	@ 0x38
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	18d1      	adds	r1, r2, r3
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	4613      	mov	r3, r2
 8004a92:	011b      	lsls	r3, r3, #4
 8004a94:	1a9b      	subs	r3, r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	4403      	add	r3, r0
 8004a9a:	3338      	adds	r3, #56	@ 0x38
 8004a9c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	015a      	lsls	r2, r3, #5
 8004aa2:	6a3b      	ldr	r3, [r7, #32]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	0cdb      	lsrs	r3, r3, #19
 8004aae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ab2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004ab4:	6879      	ldr	r1, [r7, #4]
 8004ab6:	69ba      	ldr	r2, [r7, #24]
 8004ab8:	4613      	mov	r3, r2
 8004aba:	011b      	lsls	r3, r3, #4
 8004abc:	1a9b      	subs	r3, r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	440b      	add	r3, r1
 8004ac2:	3328      	adds	r3, #40	@ 0x28
 8004ac4:	881b      	ldrh	r3, [r3, #0]
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d13f      	bne.n	8004b4e <HCD_RXQLVL_IRQHandler+0x1b4>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d03c      	beq.n	8004b4e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	015a      	lsls	r2, r3, #5
 8004ad8:	6a3b      	ldr	r3, [r7, #32]
 8004ada:	4413      	add	r3, r2
 8004adc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004aea:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004af2:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	015a      	lsls	r2, r3, #5
 8004af8:	6a3b      	ldr	r3, [r7, #32]
 8004afa:	4413      	add	r3, r2
 8004afc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b00:	461a      	mov	r2, r3
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004b06:	6879      	ldr	r1, [r7, #4]
 8004b08:	69ba      	ldr	r2, [r7, #24]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	011b      	lsls	r3, r3, #4
 8004b0e:	1a9b      	subs	r3, r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	440b      	add	r3, r1
 8004b14:	333c      	adds	r3, #60	@ 0x3c
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	f083 0301 	eor.w	r3, r3, #1
 8004b1c:	b2d8      	uxtb	r0, r3
 8004b1e:	6879      	ldr	r1, [r7, #4]
 8004b20:	69ba      	ldr	r2, [r7, #24]
 8004b22:	4613      	mov	r3, r2
 8004b24:	011b      	lsls	r3, r3, #4
 8004b26:	1a9b      	subs	r3, r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	440b      	add	r3, r1
 8004b2c:	333c      	adds	r3, #60	@ 0x3c
 8004b2e:	4602      	mov	r2, r0
 8004b30:	701a      	strb	r2, [r3, #0]
      break;
 8004b32:	e00c      	b.n	8004b4e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004b34:	6879      	ldr	r1, [r7, #4]
 8004b36:	69ba      	ldr	r2, [r7, #24]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	011b      	lsls	r3, r3, #4
 8004b3c:	1a9b      	subs	r3, r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	440b      	add	r3, r1
 8004b42:	334c      	adds	r3, #76	@ 0x4c
 8004b44:	2204      	movs	r2, #4
 8004b46:	701a      	strb	r2, [r3, #0]
      break;
 8004b48:	e001      	b.n	8004b4e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004b4a:	bf00      	nop
 8004b4c:	e000      	b.n	8004b50 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004b4e:	bf00      	nop
  }
}
 8004b50:	bf00      	nop
 8004b52:	3728      	adds	r7, #40	@ 0x28
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004b84:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d10b      	bne.n	8004ba8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d102      	bne.n	8004ba0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f004 fe9a 	bl	80098d4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	f043 0302 	orr.w	r3, r3, #2
 8004ba6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f003 0308 	and.w	r3, r3, #8
 8004bae:	2b08      	cmp	r3, #8
 8004bb0:	d132      	bne.n	8004c18 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	f043 0308 	orr.w	r3, r3, #8
 8004bb8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f003 0304 	and.w	r3, r3, #4
 8004bc0:	2b04      	cmp	r3, #4
 8004bc2:	d126      	bne.n	8004c12 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	7a5b      	ldrb	r3, [r3, #9]
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d113      	bne.n	8004bf4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004bd2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004bd6:	d106      	bne.n	8004be6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2102      	movs	r1, #2
 8004bde:	4618      	mov	r0, r3
 8004be0:	f002 fef4 	bl	80079cc <USB_InitFSLSPClkSel>
 8004be4:	e011      	b.n	8004c0a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2101      	movs	r1, #1
 8004bec:	4618      	mov	r0, r3
 8004bee:	f002 feed 	bl	80079cc <USB_InitFSLSPClkSel>
 8004bf2:	e00a      	b.n	8004c0a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	79db      	ldrb	r3, [r3, #7]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d106      	bne.n	8004c0a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004c02:	461a      	mov	r2, r3
 8004c04:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004c08:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f004 fe8c 	bl	8009928 <HAL_HCD_PortEnabled_Callback>
 8004c10:	e002      	b.n	8004c18 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f004 fe96 	bl	8009944 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f003 0320 	and.w	r3, r3, #32
 8004c1e:	2b20      	cmp	r3, #32
 8004c20:	d103      	bne.n	8004c2a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	f043 0320 	orr.w	r3, r3, #32
 8004c28:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004c30:	461a      	mov	r2, r3
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	6013      	str	r3, [r2, #0]
}
 8004c36:	bf00      	nop
 8004c38:	3718      	adds	r7, #24
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
	...

08004c40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d101      	bne.n	8004c52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e12b      	b.n	8004eaa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d106      	bne.n	8004c6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f7fb ff4e 	bl	8000b08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2224      	movs	r2, #36	@ 0x24
 8004c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f022 0201 	bic.w	r2, r2, #1
 8004c82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004ca2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004ca4:	f001 fe72 	bl	800698c <HAL_RCC_GetPCLK1Freq>
 8004ca8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	4a81      	ldr	r2, [pc, #516]	@ (8004eb4 <HAL_I2C_Init+0x274>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d807      	bhi.n	8004cc4 <HAL_I2C_Init+0x84>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	4a80      	ldr	r2, [pc, #512]	@ (8004eb8 <HAL_I2C_Init+0x278>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	bf94      	ite	ls
 8004cbc:	2301      	movls	r3, #1
 8004cbe:	2300      	movhi	r3, #0
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	e006      	b.n	8004cd2 <HAL_I2C_Init+0x92>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	4a7d      	ldr	r2, [pc, #500]	@ (8004ebc <HAL_I2C_Init+0x27c>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	bf94      	ite	ls
 8004ccc:	2301      	movls	r3, #1
 8004cce:	2300      	movhi	r3, #0
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e0e7      	b.n	8004eaa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	4a78      	ldr	r2, [pc, #480]	@ (8004ec0 <HAL_I2C_Init+0x280>)
 8004cde:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce2:	0c9b      	lsrs	r3, r3, #18
 8004ce4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	4a6a      	ldr	r2, [pc, #424]	@ (8004eb4 <HAL_I2C_Init+0x274>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d802      	bhi.n	8004d14 <HAL_I2C_Init+0xd4>
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	3301      	adds	r3, #1
 8004d12:	e009      	b.n	8004d28 <HAL_I2C_Init+0xe8>
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004d1a:	fb02 f303 	mul.w	r3, r2, r3
 8004d1e:	4a69      	ldr	r2, [pc, #420]	@ (8004ec4 <HAL_I2C_Init+0x284>)
 8004d20:	fba2 2303 	umull	r2, r3, r2, r3
 8004d24:	099b      	lsrs	r3, r3, #6
 8004d26:	3301      	adds	r3, #1
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	6812      	ldr	r2, [r2, #0]
 8004d2c:	430b      	orrs	r3, r1
 8004d2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004d3a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	495c      	ldr	r1, [pc, #368]	@ (8004eb4 <HAL_I2C_Init+0x274>)
 8004d44:	428b      	cmp	r3, r1
 8004d46:	d819      	bhi.n	8004d7c <HAL_I2C_Init+0x13c>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	1e59      	subs	r1, r3, #1
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	005b      	lsls	r3, r3, #1
 8004d52:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d56:	1c59      	adds	r1, r3, #1
 8004d58:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004d5c:	400b      	ands	r3, r1
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00a      	beq.n	8004d78 <HAL_I2C_Init+0x138>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	1e59      	subs	r1, r3, #1
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	005b      	lsls	r3, r3, #1
 8004d6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d70:	3301      	adds	r3, #1
 8004d72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d76:	e051      	b.n	8004e1c <HAL_I2C_Init+0x1dc>
 8004d78:	2304      	movs	r3, #4
 8004d7a:	e04f      	b.n	8004e1c <HAL_I2C_Init+0x1dc>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d111      	bne.n	8004da8 <HAL_I2C_Init+0x168>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	1e58      	subs	r0, r3, #1
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6859      	ldr	r1, [r3, #4]
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	440b      	add	r3, r1
 8004d92:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d96:	3301      	adds	r3, #1
 8004d98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	bf0c      	ite	eq
 8004da0:	2301      	moveq	r3, #1
 8004da2:	2300      	movne	r3, #0
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	e012      	b.n	8004dce <HAL_I2C_Init+0x18e>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	1e58      	subs	r0, r3, #1
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6859      	ldr	r1, [r3, #4]
 8004db0:	460b      	mov	r3, r1
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	440b      	add	r3, r1
 8004db6:	0099      	lsls	r1, r3, #2
 8004db8:	440b      	add	r3, r1
 8004dba:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	bf0c      	ite	eq
 8004dc8:	2301      	moveq	r3, #1
 8004dca:	2300      	movne	r3, #0
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <HAL_I2C_Init+0x196>
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e022      	b.n	8004e1c <HAL_I2C_Init+0x1dc>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10e      	bne.n	8004dfc <HAL_I2C_Init+0x1bc>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	1e58      	subs	r0, r3, #1
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6859      	ldr	r1, [r3, #4]
 8004de6:	460b      	mov	r3, r1
 8004de8:	005b      	lsls	r3, r3, #1
 8004dea:	440b      	add	r3, r1
 8004dec:	fbb0 f3f3 	udiv	r3, r0, r3
 8004df0:	3301      	adds	r3, #1
 8004df2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004df6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004dfa:	e00f      	b.n	8004e1c <HAL_I2C_Init+0x1dc>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	1e58      	subs	r0, r3, #1
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6859      	ldr	r1, [r3, #4]
 8004e04:	460b      	mov	r3, r1
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	440b      	add	r3, r1
 8004e0a:	0099      	lsls	r1, r3, #2
 8004e0c:	440b      	add	r3, r1
 8004e0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e12:	3301      	adds	r3, #1
 8004e14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e1c:	6879      	ldr	r1, [r7, #4]
 8004e1e:	6809      	ldr	r1, [r1, #0]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	69da      	ldr	r2, [r3, #28]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	431a      	orrs	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004e4a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	6911      	ldr	r1, [r2, #16]
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	68d2      	ldr	r2, [r2, #12]
 8004e56:	4311      	orrs	r1, r2
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	6812      	ldr	r2, [r2, #0]
 8004e5c:	430b      	orrs	r3, r1
 8004e5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	695a      	ldr	r2, [r3, #20]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	431a      	orrs	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f042 0201 	orr.w	r2, r2, #1
 8004e8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2220      	movs	r2, #32
 8004e96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3710      	adds	r7, #16
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	000186a0 	.word	0x000186a0
 8004eb8:	001e847f 	.word	0x001e847f
 8004ebc:	003d08ff 	.word	0x003d08ff
 8004ec0:	431bde83 	.word	0x431bde83
 8004ec4:	10624dd3 	.word	0x10624dd3

08004ec8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b088      	sub	sp, #32
 8004ecc:	af02      	add	r7, sp, #8
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	607a      	str	r2, [r7, #4]
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	817b      	strh	r3, [r7, #10]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004edc:	f7fc fb28 	bl	8001530 <HAL_GetTick>
 8004ee0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b20      	cmp	r3, #32
 8004eec:	f040 80e0 	bne.w	80050b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	9300      	str	r3, [sp, #0]
 8004ef4:	2319      	movs	r3, #25
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	4970      	ldr	r1, [pc, #448]	@ (80050bc <HAL_I2C_Master_Transmit+0x1f4>)
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f000 f964 	bl	80051c8 <I2C_WaitOnFlagUntilTimeout>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d001      	beq.n	8004f0a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004f06:	2302      	movs	r3, #2
 8004f08:	e0d3      	b.n	80050b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d101      	bne.n	8004f18 <HAL_I2C_Master_Transmit+0x50>
 8004f14:	2302      	movs	r3, #2
 8004f16:	e0cc      	b.n	80050b2 <HAL_I2C_Master_Transmit+0x1ea>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d007      	beq.n	8004f3e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f042 0201 	orr.w	r2, r2, #1
 8004f3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f4c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2221      	movs	r2, #33	@ 0x21
 8004f52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2210      	movs	r2, #16
 8004f5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	893a      	ldrh	r2, [r7, #8]
 8004f6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	4a50      	ldr	r2, [pc, #320]	@ (80050c0 <HAL_I2C_Master_Transmit+0x1f8>)
 8004f7e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004f80:	8979      	ldrh	r1, [r7, #10]
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	6a3a      	ldr	r2, [r7, #32]
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	f000 f89c 	bl	80050c4 <I2C_MasterRequestWrite>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d001      	beq.n	8004f96 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e08d      	b.n	80050b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f96:	2300      	movs	r3, #0
 8004f98:	613b      	str	r3, [r7, #16]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	613b      	str	r3, [r7, #16]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	613b      	str	r3, [r7, #16]
 8004faa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004fac:	e066      	b.n	800507c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	6a39      	ldr	r1, [r7, #32]
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f000 fa22 	bl	80053fc <I2C_WaitOnTXEFlagUntilTimeout>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00d      	beq.n	8004fda <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc2:	2b04      	cmp	r3, #4
 8004fc4:	d107      	bne.n	8004fd6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fd4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e06b      	b.n	80050b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fde:	781a      	ldrb	r2, [r3, #0]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fea:	1c5a      	adds	r2, r3, #1
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005002:	3b01      	subs	r3, #1
 8005004:	b29a      	uxth	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	695b      	ldr	r3, [r3, #20]
 8005010:	f003 0304 	and.w	r3, r3, #4
 8005014:	2b04      	cmp	r3, #4
 8005016:	d11b      	bne.n	8005050 <HAL_I2C_Master_Transmit+0x188>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800501c:	2b00      	cmp	r3, #0
 800501e:	d017      	beq.n	8005050 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005024:	781a      	ldrb	r2, [r3, #0]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005030:	1c5a      	adds	r2, r3, #1
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800503a:	b29b      	uxth	r3, r3
 800503c:	3b01      	subs	r3, #1
 800503e:	b29a      	uxth	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005048:	3b01      	subs	r3, #1
 800504a:	b29a      	uxth	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	6a39      	ldr	r1, [r7, #32]
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	f000 fa19 	bl	800548c <I2C_WaitOnBTFFlagUntilTimeout>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00d      	beq.n	800507c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005064:	2b04      	cmp	r3, #4
 8005066:	d107      	bne.n	8005078 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005076:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e01a      	b.n	80050b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005080:	2b00      	cmp	r3, #0
 8005082:	d194      	bne.n	8004fae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005092:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2220      	movs	r2, #32
 8005098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80050ac:	2300      	movs	r3, #0
 80050ae:	e000      	b.n	80050b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80050b0:	2302      	movs	r3, #2
  }
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3718      	adds	r7, #24
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	00100002 	.word	0x00100002
 80050c0:	ffff0000 	.word	0xffff0000

080050c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b088      	sub	sp, #32
 80050c8:	af02      	add	r7, sp, #8
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	607a      	str	r2, [r7, #4]
 80050ce:	603b      	str	r3, [r7, #0]
 80050d0:	460b      	mov	r3, r1
 80050d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	2b08      	cmp	r3, #8
 80050de:	d006      	beq.n	80050ee <I2C_MasterRequestWrite+0x2a>
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d003      	beq.n	80050ee <I2C_MasterRequestWrite+0x2a>
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80050ec:	d108      	bne.n	8005100 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	e00b      	b.n	8005118 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005104:	2b12      	cmp	r3, #18
 8005106:	d107      	bne.n	8005118 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005116:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f000 f84f 	bl	80051c8 <I2C_WaitOnFlagUntilTimeout>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00d      	beq.n	800514c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800513a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800513e:	d103      	bne.n	8005148 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005146:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e035      	b.n	80051b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005154:	d108      	bne.n	8005168 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005156:	897b      	ldrh	r3, [r7, #10]
 8005158:	b2db      	uxtb	r3, r3
 800515a:	461a      	mov	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005164:	611a      	str	r2, [r3, #16]
 8005166:	e01b      	b.n	80051a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005168:	897b      	ldrh	r3, [r7, #10]
 800516a:	11db      	asrs	r3, r3, #7
 800516c:	b2db      	uxtb	r3, r3
 800516e:	f003 0306 	and.w	r3, r3, #6
 8005172:	b2db      	uxtb	r3, r3
 8005174:	f063 030f 	orn	r3, r3, #15
 8005178:	b2da      	uxtb	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	490e      	ldr	r1, [pc, #56]	@ (80051c0 <I2C_MasterRequestWrite+0xfc>)
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	f000 f898 	bl	80052bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d001      	beq.n	8005196 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e010      	b.n	80051b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005196:	897b      	ldrh	r3, [r7, #10]
 8005198:	b2da      	uxtb	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	4907      	ldr	r1, [pc, #28]	@ (80051c4 <I2C_MasterRequestWrite+0x100>)
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f000 f888 	bl	80052bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d001      	beq.n	80051b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e000      	b.n	80051b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3718      	adds	r7, #24
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	00010008 	.word	0x00010008
 80051c4:	00010002 	.word	0x00010002

080051c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	603b      	str	r3, [r7, #0]
 80051d4:	4613      	mov	r3, r2
 80051d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051d8:	e048      	b.n	800526c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80051e0:	d044      	beq.n	800526c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051e2:	f7fc f9a5 	bl	8001530 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	683a      	ldr	r2, [r7, #0]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d302      	bcc.n	80051f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d139      	bne.n	800526c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	0c1b      	lsrs	r3, r3, #16
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d10d      	bne.n	800521e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	695b      	ldr	r3, [r3, #20]
 8005208:	43da      	mvns	r2, r3
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	4013      	ands	r3, r2
 800520e:	b29b      	uxth	r3, r3
 8005210:	2b00      	cmp	r3, #0
 8005212:	bf0c      	ite	eq
 8005214:	2301      	moveq	r3, #1
 8005216:	2300      	movne	r3, #0
 8005218:	b2db      	uxtb	r3, r3
 800521a:	461a      	mov	r2, r3
 800521c:	e00c      	b.n	8005238 <I2C_WaitOnFlagUntilTimeout+0x70>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	43da      	mvns	r2, r3
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	4013      	ands	r3, r2
 800522a:	b29b      	uxth	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	bf0c      	ite	eq
 8005230:	2301      	moveq	r3, #1
 8005232:	2300      	movne	r3, #0
 8005234:	b2db      	uxtb	r3, r3
 8005236:	461a      	mov	r2, r3
 8005238:	79fb      	ldrb	r3, [r7, #7]
 800523a:	429a      	cmp	r2, r3
 800523c:	d116      	bne.n	800526c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2200      	movs	r2, #0
 8005242:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2220      	movs	r2, #32
 8005248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005258:	f043 0220 	orr.w	r2, r3, #32
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e023      	b.n	80052b4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	0c1b      	lsrs	r3, r3, #16
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b01      	cmp	r3, #1
 8005274:	d10d      	bne.n	8005292 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	43da      	mvns	r2, r3
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	4013      	ands	r3, r2
 8005282:	b29b      	uxth	r3, r3
 8005284:	2b00      	cmp	r3, #0
 8005286:	bf0c      	ite	eq
 8005288:	2301      	moveq	r3, #1
 800528a:	2300      	movne	r3, #0
 800528c:	b2db      	uxtb	r3, r3
 800528e:	461a      	mov	r2, r3
 8005290:	e00c      	b.n	80052ac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	43da      	mvns	r2, r3
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	4013      	ands	r3, r2
 800529e:	b29b      	uxth	r3, r3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	bf0c      	ite	eq
 80052a4:	2301      	moveq	r3, #1
 80052a6:	2300      	movne	r3, #0
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	461a      	mov	r2, r3
 80052ac:	79fb      	ldrb	r3, [r7, #7]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d093      	beq.n	80051da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]
 80052c8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052ca:	e071      	b.n	80053b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052da:	d123      	bne.n	8005324 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052ea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80052f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2220      	movs	r2, #32
 8005300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005310:	f043 0204 	orr.w	r2, r3, #4
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e067      	b.n	80053f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800532a:	d041      	beq.n	80053b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800532c:	f7fc f900 	bl	8001530 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	429a      	cmp	r2, r3
 800533a:	d302      	bcc.n	8005342 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d136      	bne.n	80053b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	0c1b      	lsrs	r3, r3, #16
 8005346:	b2db      	uxtb	r3, r3
 8005348:	2b01      	cmp	r3, #1
 800534a:	d10c      	bne.n	8005366 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	43da      	mvns	r2, r3
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	4013      	ands	r3, r2
 8005358:	b29b      	uxth	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	bf14      	ite	ne
 800535e:	2301      	movne	r3, #1
 8005360:	2300      	moveq	r3, #0
 8005362:	b2db      	uxtb	r3, r3
 8005364:	e00b      	b.n	800537e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	699b      	ldr	r3, [r3, #24]
 800536c:	43da      	mvns	r2, r3
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	4013      	ands	r3, r2
 8005372:	b29b      	uxth	r3, r3
 8005374:	2b00      	cmp	r3, #0
 8005376:	bf14      	ite	ne
 8005378:	2301      	movne	r3, #1
 800537a:	2300      	moveq	r3, #0
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b00      	cmp	r3, #0
 8005380:	d016      	beq.n	80053b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2220      	movs	r2, #32
 800538c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800539c:	f043 0220 	orr.w	r2, r3, #32
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e021      	b.n	80053f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	0c1b      	lsrs	r3, r3, #16
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d10c      	bne.n	80053d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	43da      	mvns	r2, r3
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	4013      	ands	r3, r2
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	bf14      	ite	ne
 80053cc:	2301      	movne	r3, #1
 80053ce:	2300      	moveq	r3, #0
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	e00b      	b.n	80053ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	43da      	mvns	r2, r3
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	4013      	ands	r3, r2
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	bf14      	ite	ne
 80053e6:	2301      	movne	r3, #1
 80053e8:	2300      	moveq	r3, #0
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f47f af6d 	bne.w	80052cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3710      	adds	r7, #16
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005408:	e034      	b.n	8005474 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f000 f886 	bl	800551c <I2C_IsAcknowledgeFailed>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d001      	beq.n	800541a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e034      	b.n	8005484 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005420:	d028      	beq.n	8005474 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005422:	f7fc f885 	bl	8001530 <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	429a      	cmp	r2, r3
 8005430:	d302      	bcc.n	8005438 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d11d      	bne.n	8005474 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005442:	2b80      	cmp	r3, #128	@ 0x80
 8005444:	d016      	beq.n	8005474 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2220      	movs	r2, #32
 8005450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005460:	f043 0220 	orr.w	r2, r3, #32
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e007      	b.n	8005484 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800547e:	2b80      	cmp	r3, #128	@ 0x80
 8005480:	d1c3      	bne.n	800540a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3710      	adds	r7, #16
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005498:	e034      	b.n	8005504 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f000 f83e 	bl	800551c <I2C_IsAcknowledgeFailed>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e034      	b.n	8005514 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80054b0:	d028      	beq.n	8005504 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054b2:	f7fc f83d 	bl	8001530 <HAL_GetTick>
 80054b6:	4602      	mov	r2, r0
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d302      	bcc.n	80054c8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d11d      	bne.n	8005504 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	f003 0304 	and.w	r3, r3, #4
 80054d2:	2b04      	cmp	r3, #4
 80054d4:	d016      	beq.n	8005504 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2220      	movs	r2, #32
 80054e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f0:	f043 0220 	orr.w	r2, r3, #32
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e007      	b.n	8005514 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	f003 0304 	and.w	r3, r3, #4
 800550e:	2b04      	cmp	r3, #4
 8005510:	d1c3      	bne.n	800549a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	4618      	mov	r0, r3
 8005516:	3710      	adds	r7, #16
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800552e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005532:	d11b      	bne.n	800556c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800553c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2220      	movs	r2, #32
 8005548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005558:	f043 0204 	orr.w	r2, r3, #4
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e000      	b.n	800556e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	370c      	adds	r7, #12
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
	...

0800557c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b088      	sub	sp, #32
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d101      	bne.n	800558e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e128      	b.n	80057e0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d109      	bne.n	80055ae <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a90      	ldr	r2, [pc, #576]	@ (80057e8 <HAL_I2S_Init+0x26c>)
 80055a6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f7fb fb23 	bl	8000bf4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2202      	movs	r2, #2
 80055b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	69db      	ldr	r3, [r3, #28]
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	6812      	ldr	r2, [r2, #0]
 80055c0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80055c4:	f023 030f 	bic.w	r3, r3, #15
 80055c8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2202      	movs	r2, #2
 80055d0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d060      	beq.n	800569c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d102      	bne.n	80055e8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80055e2:	2310      	movs	r3, #16
 80055e4:	617b      	str	r3, [r7, #20]
 80055e6:	e001      	b.n	80055ec <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80055e8:	2320      	movs	r3, #32
 80055ea:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	2b20      	cmp	r3, #32
 80055f2:	d802      	bhi.n	80055fa <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	005b      	lsls	r3, r3, #1
 80055f8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80055fa:	2001      	movs	r0, #1
 80055fc:	f001 fabc 	bl	8006b78 <HAL_RCCEx_GetPeriphCLKFreq>
 8005600:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800560a:	d125      	bne.n	8005658 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d010      	beq.n	8005636 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	fbb2 f2f3 	udiv	r2, r2, r3
 800561e:	4613      	mov	r3, r2
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	4413      	add	r3, r2
 8005624:	005b      	lsls	r3, r3, #1
 8005626:	461a      	mov	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	695b      	ldr	r3, [r3, #20]
 800562c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005630:	3305      	adds	r3, #5
 8005632:	613b      	str	r3, [r7, #16]
 8005634:	e01f      	b.n	8005676 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	00db      	lsls	r3, r3, #3
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005640:	4613      	mov	r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	4413      	add	r3, r2
 8005646:	005b      	lsls	r3, r3, #1
 8005648:	461a      	mov	r2, r3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005652:	3305      	adds	r3, #5
 8005654:	613b      	str	r3, [r7, #16]
 8005656:	e00e      	b.n	8005676 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005660:	4613      	mov	r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	4413      	add	r3, r2
 8005666:	005b      	lsls	r3, r3, #1
 8005668:	461a      	mov	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	695b      	ldr	r3, [r3, #20]
 800566e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005672:	3305      	adds	r3, #5
 8005674:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	4a5c      	ldr	r2, [pc, #368]	@ (80057ec <HAL_I2S_Init+0x270>)
 800567a:	fba2 2303 	umull	r2, r3, r2, r3
 800567e:	08db      	lsrs	r3, r3, #3
 8005680:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	085b      	lsrs	r3, r3, #1
 8005692:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	021b      	lsls	r3, r3, #8
 8005698:	61bb      	str	r3, [r7, #24]
 800569a:	e003      	b.n	80056a4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800569c:	2302      	movs	r3, #2
 800569e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80056a0:	2300      	movs	r3, #0
 80056a2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d902      	bls.n	80056b0 <HAL_I2S_Init+0x134>
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	2bff      	cmp	r3, #255	@ 0xff
 80056ae:	d907      	bls.n	80056c0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056b4:	f043 0210 	orr.w	r2, r3, #16
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e08f      	b.n	80057e0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	691a      	ldr	r2, [r3, #16]
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	ea42 0103 	orr.w	r1, r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	69fa      	ldr	r2, [r7, #28]
 80056d0:	430a      	orrs	r2, r1
 80056d2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	69db      	ldr	r3, [r3, #28]
 80056da:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80056de:	f023 030f 	bic.w	r3, r3, #15
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	6851      	ldr	r1, [r2, #4]
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	6892      	ldr	r2, [r2, #8]
 80056ea:	4311      	orrs	r1, r2
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	68d2      	ldr	r2, [r2, #12]
 80056f0:	4311      	orrs	r1, r2
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	6992      	ldr	r2, [r2, #24]
 80056f6:	430a      	orrs	r2, r1
 80056f8:	431a      	orrs	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005702:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d161      	bne.n	80057d0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a38      	ldr	r2, [pc, #224]	@ (80057f0 <HAL_I2S_Init+0x274>)
 8005710:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a37      	ldr	r2, [pc, #220]	@ (80057f4 <HAL_I2S_Init+0x278>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d101      	bne.n	8005720 <HAL_I2S_Init+0x1a4>
 800571c:	4b36      	ldr	r3, [pc, #216]	@ (80057f8 <HAL_I2S_Init+0x27c>)
 800571e:	e001      	b.n	8005724 <HAL_I2S_Init+0x1a8>
 8005720:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005724:	69db      	ldr	r3, [r3, #28]
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	6812      	ldr	r2, [r2, #0]
 800572a:	4932      	ldr	r1, [pc, #200]	@ (80057f4 <HAL_I2S_Init+0x278>)
 800572c:	428a      	cmp	r2, r1
 800572e:	d101      	bne.n	8005734 <HAL_I2S_Init+0x1b8>
 8005730:	4a31      	ldr	r2, [pc, #196]	@ (80057f8 <HAL_I2S_Init+0x27c>)
 8005732:	e001      	b.n	8005738 <HAL_I2S_Init+0x1bc>
 8005734:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005738:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800573c:	f023 030f 	bic.w	r3, r3, #15
 8005740:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a2b      	ldr	r2, [pc, #172]	@ (80057f4 <HAL_I2S_Init+0x278>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d101      	bne.n	8005750 <HAL_I2S_Init+0x1d4>
 800574c:	4b2a      	ldr	r3, [pc, #168]	@ (80057f8 <HAL_I2S_Init+0x27c>)
 800574e:	e001      	b.n	8005754 <HAL_I2S_Init+0x1d8>
 8005750:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005754:	2202      	movs	r2, #2
 8005756:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a25      	ldr	r2, [pc, #148]	@ (80057f4 <HAL_I2S_Init+0x278>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d101      	bne.n	8005766 <HAL_I2S_Init+0x1ea>
 8005762:	4b25      	ldr	r3, [pc, #148]	@ (80057f8 <HAL_I2S_Init+0x27c>)
 8005764:	e001      	b.n	800576a <HAL_I2S_Init+0x1ee>
 8005766:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800576a:	69db      	ldr	r3, [r3, #28]
 800576c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005776:	d003      	beq.n	8005780 <HAL_I2S_Init+0x204>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d103      	bne.n	8005788 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005780:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005784:	613b      	str	r3, [r7, #16]
 8005786:	e001      	b.n	800578c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005788:	2300      	movs	r3, #0
 800578a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005796:	4313      	orrs	r3, r2
 8005798:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80057a0:	4313      	orrs	r3, r2
 80057a2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80057aa:	4313      	orrs	r3, r2
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	897b      	ldrh	r3, [r7, #10]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80057b8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a0d      	ldr	r2, [pc, #52]	@ (80057f4 <HAL_I2S_Init+0x278>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d101      	bne.n	80057c8 <HAL_I2S_Init+0x24c>
 80057c4:	4b0c      	ldr	r3, [pc, #48]	@ (80057f8 <HAL_I2S_Init+0x27c>)
 80057c6:	e001      	b.n	80057cc <HAL_I2S_Init+0x250>
 80057c8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80057cc:	897a      	ldrh	r2, [r7, #10]
 80057ce:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3720      	adds	r7, #32
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	08005ae5 	.word	0x08005ae5
 80057ec:	cccccccd 	.word	0xcccccccd
 80057f0:	08005bf9 	.word	0x08005bf9
 80057f4:	40003800 	.word	0x40003800
 80057f8:	40003400 	.word	0x40003400

080057fc <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b086      	sub	sp, #24
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	4613      	mov	r3, r2
 8005808:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d002      	beq.n	8005816 <HAL_I2S_Transmit_DMA+0x1a>
 8005810:	88fb      	ldrh	r3, [r7, #6]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d101      	bne.n	800581a <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e08a      	b.n	8005930 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2b01      	cmp	r3, #1
 8005824:	d001      	beq.n	800582a <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8005826:	2302      	movs	r3, #2
 8005828:	e082      	b.n	8005930 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b01      	cmp	r3, #1
 8005834:	d101      	bne.n	800583a <HAL_I2S_Transmit_DMA+0x3e>
 8005836:	2302      	movs	r3, #2
 8005838:	e07a      	b.n	8005930 <HAL_I2S_Transmit_DMA+0x134>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2201      	movs	r2, #1
 800583e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2203      	movs	r2, #3
 8005846:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	69db      	ldr	r3, [r3, #28]
 800585c:	f003 0307 	and.w	r3, r3, #7
 8005860:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	2b03      	cmp	r3, #3
 8005866:	d002      	beq.n	800586e <HAL_I2S_Transmit_DMA+0x72>
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	2b05      	cmp	r3, #5
 800586c:	d10a      	bne.n	8005884 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 800586e:	88fb      	ldrh	r3, [r7, #6]
 8005870:	005b      	lsls	r3, r3, #1
 8005872:	b29a      	uxth	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8005878:	88fb      	ldrh	r3, [r7, #6]
 800587a:	005b      	lsls	r3, r3, #1
 800587c:	b29a      	uxth	r2, r3
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005882:	e005      	b.n	8005890 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	88fa      	ldrh	r2, [r7, #6]
 8005888:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	88fa      	ldrh	r2, [r7, #6]
 800588e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005894:	4a28      	ldr	r2, [pc, #160]	@ (8005938 <HAL_I2S_Transmit_DMA+0x13c>)
 8005896:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800589c:	4a27      	ldr	r2, [pc, #156]	@ (800593c <HAL_I2S_Transmit_DMA+0x140>)
 800589e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058a4:	4a26      	ldr	r2, [pc, #152]	@ (8005940 <HAL_I2S_Transmit_DMA+0x144>)
 80058a6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80058b0:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80058b8:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058be:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80058c0:	f7fc fc2e 	bl	8002120 <HAL_DMA_Start_IT>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00f      	beq.n	80058ea <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ce:	f043 0208 	orr.w	r2, r3, #8
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2201      	movs	r2, #1
 80058da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e022      	b.n	8005930 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f003 0302 	and.w	r3, r3, #2
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d107      	bne.n	8005910 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f042 0202 	orr.w	r2, r2, #2
 800590e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	69db      	ldr	r3, [r3, #28]
 8005916:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800591a:	2b00      	cmp	r3, #0
 800591c:	d107      	bne.n	800592e <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	69da      	ldr	r2, [r3, #28]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800592c:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	3718      	adds	r7, #24
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	080059c3 	.word	0x080059c3
 800593c:	08005981 	.word	0x08005981
 8005940:	080059df 	.word	0x080059df

08005944 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800598c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	69db      	ldr	r3, [r3, #28]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10e      	bne.n	80059b4 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	685a      	ldr	r2, [r3, #4]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f022 0202 	bic.w	r2, r2, #2
 80059a4:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f7fb fb73 	bl	80010a0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80059ba:	bf00      	nop
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b084      	sub	sp, #16
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ce:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80059d0:	68f8      	ldr	r0, [r7, #12]
 80059d2:	f7ff ffb7 	bl	8005944 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80059d6:	bf00      	nop
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b084      	sub	sp, #16
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ea:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685a      	ldr	r2, [r3, #4]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f022 0203 	bic.w	r2, r2, #3
 80059fa:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a14:	f043 0208 	orr.w	r2, r3, #8
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f7ff ffa5 	bl	800596c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005a22:	bf00      	nop
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b082      	sub	sp, #8
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a36:	881a      	ldrh	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a42:	1c9a      	adds	r2, r3, #2
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	b29a      	uxth	r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d10e      	bne.n	8005a7e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	685a      	ldr	r2, [r3, #4]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005a6e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f7fb fb11 	bl	80010a0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005a7e:	bf00      	nop
 8005a80:	3708      	adds	r7, #8
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b082      	sub	sp, #8
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68da      	ldr	r2, [r3, #12]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a98:	b292      	uxth	r2, r2
 8005a9a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aa0:	1c9a      	adds	r2, r3, #2
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	3b01      	subs	r3, #1
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10e      	bne.n	8005adc <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	685a      	ldr	r2, [r3, #4]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005acc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f7ff ff3e 	bl	8005958 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005adc:	bf00      	nop
 8005ade:	3708      	adds	r7, #8
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b086      	sub	sp, #24
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	2b04      	cmp	r3, #4
 8005afe:	d13a      	bne.n	8005b76 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	f003 0301 	and.w	r3, r3, #1
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d109      	bne.n	8005b1e <I2S_IRQHandler+0x3a>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b14:	2b40      	cmp	r3, #64	@ 0x40
 8005b16:	d102      	bne.n	8005b1e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f7ff ffb4 	bl	8005a86 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b24:	2b40      	cmp	r3, #64	@ 0x40
 8005b26:	d126      	bne.n	8005b76 <I2S_IRQHandler+0x92>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	f003 0320 	and.w	r3, r3, #32
 8005b32:	2b20      	cmp	r3, #32
 8005b34:	d11f      	bne.n	8005b76 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005b44:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005b46:	2300      	movs	r3, #0
 8005b48:	613b      	str	r3, [r7, #16]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	613b      	str	r3, [r7, #16]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	613b      	str	r3, [r7, #16]
 8005b5a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b68:	f043 0202 	orr.w	r2, r3, #2
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f7ff fefb 	bl	800596c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	2b03      	cmp	r3, #3
 8005b80:	d136      	bne.n	8005bf0 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	f003 0302 	and.w	r3, r3, #2
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d109      	bne.n	8005ba0 <I2S_IRQHandler+0xbc>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b96:	2b80      	cmp	r3, #128	@ 0x80
 8005b98:	d102      	bne.n	8005ba0 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f7ff ff45 	bl	8005a2a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	f003 0308 	and.w	r3, r3, #8
 8005ba6:	2b08      	cmp	r3, #8
 8005ba8:	d122      	bne.n	8005bf0 <I2S_IRQHandler+0x10c>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	f003 0320 	and.w	r3, r3, #32
 8005bb4:	2b20      	cmp	r3, #32
 8005bb6:	d11b      	bne.n	8005bf0 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	685a      	ldr	r2, [r3, #4]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005bc6:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005bc8:	2300      	movs	r3, #0
 8005bca:	60fb      	str	r3, [r7, #12]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	60fb      	str	r3, [r7, #12]
 8005bd4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005be2:	f043 0204 	orr.w	r2, r3, #4
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f7ff febe 	bl	800596c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005bf0:	bf00      	nop
 8005bf2:	3718      	adds	r7, #24
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b088      	sub	sp, #32
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a92      	ldr	r2, [pc, #584]	@ (8005e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d101      	bne.n	8005c16 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005c12:	4b92      	ldr	r3, [pc, #584]	@ (8005e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005c14:	e001      	b.n	8005c1a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005c16:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a8b      	ldr	r2, [pc, #556]	@ (8005e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d101      	bne.n	8005c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005c30:	4b8a      	ldr	r3, [pc, #552]	@ (8005e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005c32:	e001      	b.n	8005c38 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005c34:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c44:	d004      	beq.n	8005c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	f040 8099 	bne.w	8005d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	f003 0302 	and.w	r3, r3, #2
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d107      	bne.n	8005c6a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d002      	beq.n	8005c6a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 f925 	bl	8005eb4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	f003 0301 	and.w	r3, r3, #1
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d107      	bne.n	8005c84 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d002      	beq.n	8005c84 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 f9c8 	bl	8006014 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c8a:	2b40      	cmp	r3, #64	@ 0x40
 8005c8c:	d13a      	bne.n	8005d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	f003 0320 	and.w	r3, r3, #32
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d035      	beq.n	8005d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a6e      	ldr	r2, [pc, #440]	@ (8005e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d101      	bne.n	8005ca6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005ca2:	4b6e      	ldr	r3, [pc, #440]	@ (8005e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ca4:	e001      	b.n	8005caa <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005ca6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005caa:	685a      	ldr	r2, [r3, #4]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4969      	ldr	r1, [pc, #420]	@ (8005e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005cb2:	428b      	cmp	r3, r1
 8005cb4:	d101      	bne.n	8005cba <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005cb6:	4b69      	ldr	r3, [pc, #420]	@ (8005e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005cb8:	e001      	b.n	8005cbe <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005cba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005cbe:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005cc2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	685a      	ldr	r2, [r3, #4]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005cd2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	60fb      	str	r3, [r7, #12]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	60fb      	str	r3, [r7, #12]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	60fb      	str	r3, [r7, #12]
 8005ce8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cf6:	f043 0202 	orr.w	r2, r3, #2
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f7ff fe34 	bl	800596c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	f003 0308 	and.w	r3, r3, #8
 8005d0a:	2b08      	cmp	r3, #8
 8005d0c:	f040 80c3 	bne.w	8005e96 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	f003 0320 	and.w	r3, r3, #32
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	f000 80bd 	beq.w	8005e96 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	685a      	ldr	r2, [r3, #4]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005d2a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a49      	ldr	r2, [pc, #292]	@ (8005e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d101      	bne.n	8005d3a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005d36:	4b49      	ldr	r3, [pc, #292]	@ (8005e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d38:	e001      	b.n	8005d3e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005d3a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005d3e:	685a      	ldr	r2, [r3, #4]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4944      	ldr	r1, [pc, #272]	@ (8005e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d46:	428b      	cmp	r3, r1
 8005d48:	d101      	bne.n	8005d4e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005d4a:	4b44      	ldr	r3, [pc, #272]	@ (8005e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d4c:	e001      	b.n	8005d52 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005d4e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005d52:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005d56:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005d58:	2300      	movs	r3, #0
 8005d5a:	60bb      	str	r3, [r7, #8]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	60bb      	str	r3, [r7, #8]
 8005d64:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d72:	f043 0204 	orr.w	r2, r3, #4
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7ff fdf6 	bl	800596c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005d80:	e089      	b.n	8005e96 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	f003 0302 	and.w	r3, r3, #2
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d107      	bne.n	8005d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d002      	beq.n	8005d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 f8be 	bl	8005f18 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	f003 0301 	and.w	r3, r3, #1
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d107      	bne.n	8005db6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d002      	beq.n	8005db6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 f8fd 	bl	8005fb0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dbc:	2b40      	cmp	r3, #64	@ 0x40
 8005dbe:	d12f      	bne.n	8005e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	f003 0320 	and.w	r3, r3, #32
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d02a      	beq.n	8005e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	685a      	ldr	r2, [r3, #4]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005dd8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a1e      	ldr	r2, [pc, #120]	@ (8005e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d101      	bne.n	8005de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005de4:	4b1d      	ldr	r3, [pc, #116]	@ (8005e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005de6:	e001      	b.n	8005dec <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005de8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4919      	ldr	r1, [pc, #100]	@ (8005e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005df4:	428b      	cmp	r3, r1
 8005df6:	d101      	bne.n	8005dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005df8:	4b18      	ldr	r3, [pc, #96]	@ (8005e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005dfa:	e001      	b.n	8005e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005dfc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e00:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005e04:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e12:	f043 0202 	orr.w	r2, r3, #2
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f7ff fda6 	bl	800596c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	f003 0308 	and.w	r3, r3, #8
 8005e26:	2b08      	cmp	r3, #8
 8005e28:	d136      	bne.n	8005e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	f003 0320 	and.w	r3, r3, #32
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d031      	beq.n	8005e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a07      	ldr	r2, [pc, #28]	@ (8005e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d101      	bne.n	8005e42 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005e3e:	4b07      	ldr	r3, [pc, #28]	@ (8005e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e40:	e001      	b.n	8005e46 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005e42:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e46:	685a      	ldr	r2, [r3, #4]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4902      	ldr	r1, [pc, #8]	@ (8005e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e4e:	428b      	cmp	r3, r1
 8005e50:	d106      	bne.n	8005e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005e52:	4b02      	ldr	r3, [pc, #8]	@ (8005e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e54:	e006      	b.n	8005e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005e56:	bf00      	nop
 8005e58:	40003800 	.word	0x40003800
 8005e5c:	40003400 	.word	0x40003400
 8005e60:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e64:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005e68:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	685a      	ldr	r2, [r3, #4]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005e78:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e86:	f043 0204 	orr.w	r2, r3, #4
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f7ff fd6c 	bl	800596c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005e94:	e000      	b.n	8005e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005e96:	bf00      	nop
}
 8005e98:	bf00      	nop
 8005e9a:	3720      	adds	r7, #32
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ec0:	1c99      	adds	r1, r3, #2
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	6251      	str	r1, [r2, #36]	@ 0x24
 8005ec6:	881a      	ldrh	r2, [r3, #0]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	3b01      	subs	r3, #1
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d113      	bne.n	8005f0e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	685a      	ldr	r2, [r3, #4]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005ef4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d106      	bne.n	8005f0e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f7ff ffc9 	bl	8005ea0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005f0e:	bf00      	nop
 8005f10:	3708      	adds	r7, #8
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
	...

08005f18 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f24:	1c99      	adds	r1, r3, #2
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	6251      	str	r1, [r2, #36]	@ 0x24
 8005f2a:	8819      	ldrh	r1, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a1d      	ldr	r2, [pc, #116]	@ (8005fa8 <I2SEx_TxISR_I2SExt+0x90>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d101      	bne.n	8005f3a <I2SEx_TxISR_I2SExt+0x22>
 8005f36:	4b1d      	ldr	r3, [pc, #116]	@ (8005fac <I2SEx_TxISR_I2SExt+0x94>)
 8005f38:	e001      	b.n	8005f3e <I2SEx_TxISR_I2SExt+0x26>
 8005f3a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f3e:	460a      	mov	r2, r1
 8005f40:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d121      	bne.n	8005f9e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a12      	ldr	r2, [pc, #72]	@ (8005fa8 <I2SEx_TxISR_I2SExt+0x90>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d101      	bne.n	8005f68 <I2SEx_TxISR_I2SExt+0x50>
 8005f64:	4b11      	ldr	r3, [pc, #68]	@ (8005fac <I2SEx_TxISR_I2SExt+0x94>)
 8005f66:	e001      	b.n	8005f6c <I2SEx_TxISR_I2SExt+0x54>
 8005f68:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f6c:	685a      	ldr	r2, [r3, #4]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	490d      	ldr	r1, [pc, #52]	@ (8005fa8 <I2SEx_TxISR_I2SExt+0x90>)
 8005f74:	428b      	cmp	r3, r1
 8005f76:	d101      	bne.n	8005f7c <I2SEx_TxISR_I2SExt+0x64>
 8005f78:	4b0c      	ldr	r3, [pc, #48]	@ (8005fac <I2SEx_TxISR_I2SExt+0x94>)
 8005f7a:	e001      	b.n	8005f80 <I2SEx_TxISR_I2SExt+0x68>
 8005f7c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f80:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005f84:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d106      	bne.n	8005f9e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f7ff ff81 	bl	8005ea0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005f9e:	bf00      	nop
 8005fa0:	3708      	adds	r7, #8
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	40003800 	.word	0x40003800
 8005fac:	40003400 	.word	0x40003400

08005fb0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68d8      	ldr	r0, [r3, #12]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc2:	1c99      	adds	r1, r3, #2
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005fc8:	b282      	uxth	r2, r0
 8005fca:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d113      	bne.n	800600c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	685a      	ldr	r2, [r3, #4]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005ff2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d106      	bne.n	800600c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f7ff ff4a 	bl	8005ea0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800600c:	bf00      	nop
 800600e:	3708      	adds	r7, #8
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a20      	ldr	r2, [pc, #128]	@ (80060a4 <I2SEx_RxISR_I2SExt+0x90>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d101      	bne.n	800602a <I2SEx_RxISR_I2SExt+0x16>
 8006026:	4b20      	ldr	r3, [pc, #128]	@ (80060a8 <I2SEx_RxISR_I2SExt+0x94>)
 8006028:	e001      	b.n	800602e <I2SEx_RxISR_I2SExt+0x1a>
 800602a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800602e:	68d8      	ldr	r0, [r3, #12]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006034:	1c99      	adds	r1, r3, #2
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800603a:	b282      	uxth	r2, r0
 800603c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006042:	b29b      	uxth	r3, r3
 8006044:	3b01      	subs	r3, #1
 8006046:	b29a      	uxth	r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006050:	b29b      	uxth	r3, r3
 8006052:	2b00      	cmp	r3, #0
 8006054:	d121      	bne.n	800609a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a12      	ldr	r2, [pc, #72]	@ (80060a4 <I2SEx_RxISR_I2SExt+0x90>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d101      	bne.n	8006064 <I2SEx_RxISR_I2SExt+0x50>
 8006060:	4b11      	ldr	r3, [pc, #68]	@ (80060a8 <I2SEx_RxISR_I2SExt+0x94>)
 8006062:	e001      	b.n	8006068 <I2SEx_RxISR_I2SExt+0x54>
 8006064:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006068:	685a      	ldr	r2, [r3, #4]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	490d      	ldr	r1, [pc, #52]	@ (80060a4 <I2SEx_RxISR_I2SExt+0x90>)
 8006070:	428b      	cmp	r3, r1
 8006072:	d101      	bne.n	8006078 <I2SEx_RxISR_I2SExt+0x64>
 8006074:	4b0c      	ldr	r3, [pc, #48]	@ (80060a8 <I2SEx_RxISR_I2SExt+0x94>)
 8006076:	e001      	b.n	800607c <I2SEx_RxISR_I2SExt+0x68>
 8006078:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800607c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006080:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006086:	b29b      	uxth	r3, r3
 8006088:	2b00      	cmp	r3, #0
 800608a:	d106      	bne.n	800609a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f7ff ff03 	bl	8005ea0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800609a:	bf00      	nop
 800609c:	3708      	adds	r7, #8
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	40003800 	.word	0x40003800
 80060a8:	40003400 	.word	0x40003400

080060ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b086      	sub	sp, #24
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d101      	bne.n	80060be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e267      	b.n	800658e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0301 	and.w	r3, r3, #1
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d075      	beq.n	80061b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80060ca:	4b88      	ldr	r3, [pc, #544]	@ (80062ec <HAL_RCC_OscConfig+0x240>)
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f003 030c 	and.w	r3, r3, #12
 80060d2:	2b04      	cmp	r3, #4
 80060d4:	d00c      	beq.n	80060f0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80060d6:	4b85      	ldr	r3, [pc, #532]	@ (80062ec <HAL_RCC_OscConfig+0x240>)
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80060de:	2b08      	cmp	r3, #8
 80060e0:	d112      	bne.n	8006108 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80060e2:	4b82      	ldr	r3, [pc, #520]	@ (80062ec <HAL_RCC_OscConfig+0x240>)
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80060ee:	d10b      	bne.n	8006108 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060f0:	4b7e      	ldr	r3, [pc, #504]	@ (80062ec <HAL_RCC_OscConfig+0x240>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d05b      	beq.n	80061b4 <HAL_RCC_OscConfig+0x108>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d157      	bne.n	80061b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e242      	b.n	800658e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006110:	d106      	bne.n	8006120 <HAL_RCC_OscConfig+0x74>
 8006112:	4b76      	ldr	r3, [pc, #472]	@ (80062ec <HAL_RCC_OscConfig+0x240>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a75      	ldr	r2, [pc, #468]	@ (80062ec <HAL_RCC_OscConfig+0x240>)
 8006118:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800611c:	6013      	str	r3, [r2, #0]
 800611e:	e01d      	b.n	800615c <HAL_RCC_OscConfig+0xb0>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006128:	d10c      	bne.n	8006144 <HAL_RCC_OscConfig+0x98>
 800612a:	4b70      	ldr	r3, [pc, #448]	@ (80062ec <HAL_RCC_OscConfig+0x240>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a6f      	ldr	r2, [pc, #444]	@ (80062ec <HAL_RCC_OscConfig+0x240>)
 8006130:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006134:	6013      	str	r3, [r2, #0]
 8006136:	4b6d      	ldr	r3, [pc, #436]	@ (80062ec <HAL_RCC_OscConfig+0x240>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a6c      	ldr	r2, [pc, #432]	@ (80062ec <HAL_RCC_OscConfig+0x240>)
 800613c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006140:	6013      	str	r3, [r2, #0]
 8006142:	e00b      	b.n	800615c <HAL_RCC_OscConfig+0xb0>
 8006144:	4b69      	ldr	r3, [pc, #420]	@ (80062ec <HAL_RCC_OscConfig+0x240>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a68      	ldr	r2, [pc, #416]	@ (80062ec <HAL_RCC_OscConfig+0x240>)
 800614a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800614e:	6013      	str	r3, [r2, #0]
 8006150:	4b66      	ldr	r3, [pc, #408]	@ (80062ec <HAL_RCC_OscConfig+0x240>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a65      	ldr	r2, [pc, #404]	@ (80062ec <HAL_RCC_OscConfig+0x240>)
 8006156:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800615a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d013      	beq.n	800618c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006164:	f7fb f9e4 	bl	8001530 <HAL_GetTick>
 8006168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800616a:	e008      	b.n	800617e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800616c:	f7fb f9e0 	bl	8001530 <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	2b64      	cmp	r3, #100	@ 0x64
 8006178:	d901      	bls.n	800617e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e207      	b.n	800658e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800617e:	4b5b      	ldr	r3, [pc, #364]	@ (80062ec <HAL_RCC_OscConfig+0x240>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d0f0      	beq.n	800616c <HAL_RCC_OscConfig+0xc0>
 800618a:	e014      	b.n	80061b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800618c:	f7fb f9d0 	bl	8001530 <HAL_GetTick>
 8006190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006192:	e008      	b.n	80061a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006194:	f7fb f9cc 	bl	8001530 <HAL_GetTick>
 8006198:	4602      	mov	r2, r0
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	2b64      	cmp	r3, #100	@ 0x64
 80061a0:	d901      	bls.n	80061a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e1f3      	b.n	800658e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061a6:	4b51      	ldr	r3, [pc, #324]	@ (80062ec <HAL_RCC_OscConfig+0x240>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1f0      	bne.n	8006194 <HAL_RCC_OscConfig+0xe8>
 80061b2:	e000      	b.n	80061b6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 0302 	and.w	r3, r3, #2
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d063      	beq.n	800628a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80061c2:	4b4a      	ldr	r3, [pc, #296]	@ (80062ec <HAL_RCC_OscConfig+0x240>)
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	f003 030c 	and.w	r3, r3, #12
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00b      	beq.n	80061e6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061ce:	4b47      	ldr	r3, [pc, #284]	@ (80062ec <HAL_RCC_OscConfig+0x240>)
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80061d6:	2b08      	cmp	r3, #8
 80061d8:	d11c      	bne.n	8006214 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061da:	4b44      	ldr	r3, [pc, #272]	@ (80062ec <HAL_RCC_OscConfig+0x240>)
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d116      	bne.n	8006214 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061e6:	4b41      	ldr	r3, [pc, #260]	@ (80062ec <HAL_RCC_OscConfig+0x240>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 0302 	and.w	r3, r3, #2
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d005      	beq.n	80061fe <HAL_RCC_OscConfig+0x152>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d001      	beq.n	80061fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e1c7      	b.n	800658e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061fe:	4b3b      	ldr	r3, [pc, #236]	@ (80062ec <HAL_RCC_OscConfig+0x240>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	00db      	lsls	r3, r3, #3
 800620c:	4937      	ldr	r1, [pc, #220]	@ (80062ec <HAL_RCC_OscConfig+0x240>)
 800620e:	4313      	orrs	r3, r2
 8006210:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006212:	e03a      	b.n	800628a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d020      	beq.n	800625e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800621c:	4b34      	ldr	r3, [pc, #208]	@ (80062f0 <HAL_RCC_OscConfig+0x244>)
 800621e:	2201      	movs	r2, #1
 8006220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006222:	f7fb f985 	bl	8001530 <HAL_GetTick>
 8006226:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006228:	e008      	b.n	800623c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800622a:	f7fb f981 	bl	8001530 <HAL_GetTick>
 800622e:	4602      	mov	r2, r0
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	2b02      	cmp	r3, #2
 8006236:	d901      	bls.n	800623c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e1a8      	b.n	800658e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800623c:	4b2b      	ldr	r3, [pc, #172]	@ (80062ec <HAL_RCC_OscConfig+0x240>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0302 	and.w	r3, r3, #2
 8006244:	2b00      	cmp	r3, #0
 8006246:	d0f0      	beq.n	800622a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006248:	4b28      	ldr	r3, [pc, #160]	@ (80062ec <HAL_RCC_OscConfig+0x240>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	00db      	lsls	r3, r3, #3
 8006256:	4925      	ldr	r1, [pc, #148]	@ (80062ec <HAL_RCC_OscConfig+0x240>)
 8006258:	4313      	orrs	r3, r2
 800625a:	600b      	str	r3, [r1, #0]
 800625c:	e015      	b.n	800628a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800625e:	4b24      	ldr	r3, [pc, #144]	@ (80062f0 <HAL_RCC_OscConfig+0x244>)
 8006260:	2200      	movs	r2, #0
 8006262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006264:	f7fb f964 	bl	8001530 <HAL_GetTick>
 8006268:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800626a:	e008      	b.n	800627e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800626c:	f7fb f960 	bl	8001530 <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	2b02      	cmp	r3, #2
 8006278:	d901      	bls.n	800627e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e187      	b.n	800658e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800627e:	4b1b      	ldr	r3, [pc, #108]	@ (80062ec <HAL_RCC_OscConfig+0x240>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 0302 	and.w	r3, r3, #2
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1f0      	bne.n	800626c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 0308 	and.w	r3, r3, #8
 8006292:	2b00      	cmp	r3, #0
 8006294:	d036      	beq.n	8006304 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	695b      	ldr	r3, [r3, #20]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d016      	beq.n	80062cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800629e:	4b15      	ldr	r3, [pc, #84]	@ (80062f4 <HAL_RCC_OscConfig+0x248>)
 80062a0:	2201      	movs	r2, #1
 80062a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062a4:	f7fb f944 	bl	8001530 <HAL_GetTick>
 80062a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062aa:	e008      	b.n	80062be <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062ac:	f7fb f940 	bl	8001530 <HAL_GetTick>
 80062b0:	4602      	mov	r2, r0
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d901      	bls.n	80062be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e167      	b.n	800658e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062be:	4b0b      	ldr	r3, [pc, #44]	@ (80062ec <HAL_RCC_OscConfig+0x240>)
 80062c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062c2:	f003 0302 	and.w	r3, r3, #2
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d0f0      	beq.n	80062ac <HAL_RCC_OscConfig+0x200>
 80062ca:	e01b      	b.n	8006304 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062cc:	4b09      	ldr	r3, [pc, #36]	@ (80062f4 <HAL_RCC_OscConfig+0x248>)
 80062ce:	2200      	movs	r2, #0
 80062d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062d2:	f7fb f92d 	bl	8001530 <HAL_GetTick>
 80062d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062d8:	e00e      	b.n	80062f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062da:	f7fb f929 	bl	8001530 <HAL_GetTick>
 80062de:	4602      	mov	r2, r0
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	d907      	bls.n	80062f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80062e8:	2303      	movs	r3, #3
 80062ea:	e150      	b.n	800658e <HAL_RCC_OscConfig+0x4e2>
 80062ec:	40023800 	.word	0x40023800
 80062f0:	42470000 	.word	0x42470000
 80062f4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062f8:	4b88      	ldr	r3, [pc, #544]	@ (800651c <HAL_RCC_OscConfig+0x470>)
 80062fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062fc:	f003 0302 	and.w	r3, r3, #2
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1ea      	bne.n	80062da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 0304 	and.w	r3, r3, #4
 800630c:	2b00      	cmp	r3, #0
 800630e:	f000 8097 	beq.w	8006440 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006312:	2300      	movs	r3, #0
 8006314:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006316:	4b81      	ldr	r3, [pc, #516]	@ (800651c <HAL_RCC_OscConfig+0x470>)
 8006318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800631a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d10f      	bne.n	8006342 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006322:	2300      	movs	r3, #0
 8006324:	60bb      	str	r3, [r7, #8]
 8006326:	4b7d      	ldr	r3, [pc, #500]	@ (800651c <HAL_RCC_OscConfig+0x470>)
 8006328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800632a:	4a7c      	ldr	r2, [pc, #496]	@ (800651c <HAL_RCC_OscConfig+0x470>)
 800632c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006330:	6413      	str	r3, [r2, #64]	@ 0x40
 8006332:	4b7a      	ldr	r3, [pc, #488]	@ (800651c <HAL_RCC_OscConfig+0x470>)
 8006334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800633a:	60bb      	str	r3, [r7, #8]
 800633c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800633e:	2301      	movs	r3, #1
 8006340:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006342:	4b77      	ldr	r3, [pc, #476]	@ (8006520 <HAL_RCC_OscConfig+0x474>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800634a:	2b00      	cmp	r3, #0
 800634c:	d118      	bne.n	8006380 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800634e:	4b74      	ldr	r3, [pc, #464]	@ (8006520 <HAL_RCC_OscConfig+0x474>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a73      	ldr	r2, [pc, #460]	@ (8006520 <HAL_RCC_OscConfig+0x474>)
 8006354:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006358:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800635a:	f7fb f8e9 	bl	8001530 <HAL_GetTick>
 800635e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006360:	e008      	b.n	8006374 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006362:	f7fb f8e5 	bl	8001530 <HAL_GetTick>
 8006366:	4602      	mov	r2, r0
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	2b02      	cmp	r3, #2
 800636e:	d901      	bls.n	8006374 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e10c      	b.n	800658e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006374:	4b6a      	ldr	r3, [pc, #424]	@ (8006520 <HAL_RCC_OscConfig+0x474>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800637c:	2b00      	cmp	r3, #0
 800637e:	d0f0      	beq.n	8006362 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d106      	bne.n	8006396 <HAL_RCC_OscConfig+0x2ea>
 8006388:	4b64      	ldr	r3, [pc, #400]	@ (800651c <HAL_RCC_OscConfig+0x470>)
 800638a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800638c:	4a63      	ldr	r2, [pc, #396]	@ (800651c <HAL_RCC_OscConfig+0x470>)
 800638e:	f043 0301 	orr.w	r3, r3, #1
 8006392:	6713      	str	r3, [r2, #112]	@ 0x70
 8006394:	e01c      	b.n	80063d0 <HAL_RCC_OscConfig+0x324>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	2b05      	cmp	r3, #5
 800639c:	d10c      	bne.n	80063b8 <HAL_RCC_OscConfig+0x30c>
 800639e:	4b5f      	ldr	r3, [pc, #380]	@ (800651c <HAL_RCC_OscConfig+0x470>)
 80063a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063a2:	4a5e      	ldr	r2, [pc, #376]	@ (800651c <HAL_RCC_OscConfig+0x470>)
 80063a4:	f043 0304 	orr.w	r3, r3, #4
 80063a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80063aa:	4b5c      	ldr	r3, [pc, #368]	@ (800651c <HAL_RCC_OscConfig+0x470>)
 80063ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063ae:	4a5b      	ldr	r2, [pc, #364]	@ (800651c <HAL_RCC_OscConfig+0x470>)
 80063b0:	f043 0301 	orr.w	r3, r3, #1
 80063b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80063b6:	e00b      	b.n	80063d0 <HAL_RCC_OscConfig+0x324>
 80063b8:	4b58      	ldr	r3, [pc, #352]	@ (800651c <HAL_RCC_OscConfig+0x470>)
 80063ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063bc:	4a57      	ldr	r2, [pc, #348]	@ (800651c <HAL_RCC_OscConfig+0x470>)
 80063be:	f023 0301 	bic.w	r3, r3, #1
 80063c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80063c4:	4b55      	ldr	r3, [pc, #340]	@ (800651c <HAL_RCC_OscConfig+0x470>)
 80063c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063c8:	4a54      	ldr	r2, [pc, #336]	@ (800651c <HAL_RCC_OscConfig+0x470>)
 80063ca:	f023 0304 	bic.w	r3, r3, #4
 80063ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d015      	beq.n	8006404 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063d8:	f7fb f8aa 	bl	8001530 <HAL_GetTick>
 80063dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063de:	e00a      	b.n	80063f6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063e0:	f7fb f8a6 	bl	8001530 <HAL_GetTick>
 80063e4:	4602      	mov	r2, r0
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d901      	bls.n	80063f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80063f2:	2303      	movs	r3, #3
 80063f4:	e0cb      	b.n	800658e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063f6:	4b49      	ldr	r3, [pc, #292]	@ (800651c <HAL_RCC_OscConfig+0x470>)
 80063f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063fa:	f003 0302 	and.w	r3, r3, #2
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d0ee      	beq.n	80063e0 <HAL_RCC_OscConfig+0x334>
 8006402:	e014      	b.n	800642e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006404:	f7fb f894 	bl	8001530 <HAL_GetTick>
 8006408:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800640a:	e00a      	b.n	8006422 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800640c:	f7fb f890 	bl	8001530 <HAL_GetTick>
 8006410:	4602      	mov	r2, r0
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	f241 3288 	movw	r2, #5000	@ 0x1388
 800641a:	4293      	cmp	r3, r2
 800641c:	d901      	bls.n	8006422 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	e0b5      	b.n	800658e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006422:	4b3e      	ldr	r3, [pc, #248]	@ (800651c <HAL_RCC_OscConfig+0x470>)
 8006424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006426:	f003 0302 	and.w	r3, r3, #2
 800642a:	2b00      	cmp	r3, #0
 800642c:	d1ee      	bne.n	800640c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800642e:	7dfb      	ldrb	r3, [r7, #23]
 8006430:	2b01      	cmp	r3, #1
 8006432:	d105      	bne.n	8006440 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006434:	4b39      	ldr	r3, [pc, #228]	@ (800651c <HAL_RCC_OscConfig+0x470>)
 8006436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006438:	4a38      	ldr	r2, [pc, #224]	@ (800651c <HAL_RCC_OscConfig+0x470>)
 800643a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800643e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	699b      	ldr	r3, [r3, #24]
 8006444:	2b00      	cmp	r3, #0
 8006446:	f000 80a1 	beq.w	800658c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800644a:	4b34      	ldr	r3, [pc, #208]	@ (800651c <HAL_RCC_OscConfig+0x470>)
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f003 030c 	and.w	r3, r3, #12
 8006452:	2b08      	cmp	r3, #8
 8006454:	d05c      	beq.n	8006510 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	2b02      	cmp	r3, #2
 800645c:	d141      	bne.n	80064e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800645e:	4b31      	ldr	r3, [pc, #196]	@ (8006524 <HAL_RCC_OscConfig+0x478>)
 8006460:	2200      	movs	r2, #0
 8006462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006464:	f7fb f864 	bl	8001530 <HAL_GetTick>
 8006468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800646a:	e008      	b.n	800647e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800646c:	f7fb f860 	bl	8001530 <HAL_GetTick>
 8006470:	4602      	mov	r2, r0
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	2b02      	cmp	r3, #2
 8006478:	d901      	bls.n	800647e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	e087      	b.n	800658e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800647e:	4b27      	ldr	r3, [pc, #156]	@ (800651c <HAL_RCC_OscConfig+0x470>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1f0      	bne.n	800646c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	69da      	ldr	r2, [r3, #28]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a1b      	ldr	r3, [r3, #32]
 8006492:	431a      	orrs	r2, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006498:	019b      	lsls	r3, r3, #6
 800649a:	431a      	orrs	r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064a0:	085b      	lsrs	r3, r3, #1
 80064a2:	3b01      	subs	r3, #1
 80064a4:	041b      	lsls	r3, r3, #16
 80064a6:	431a      	orrs	r2, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ac:	061b      	lsls	r3, r3, #24
 80064ae:	491b      	ldr	r1, [pc, #108]	@ (800651c <HAL_RCC_OscConfig+0x470>)
 80064b0:	4313      	orrs	r3, r2
 80064b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064b4:	4b1b      	ldr	r3, [pc, #108]	@ (8006524 <HAL_RCC_OscConfig+0x478>)
 80064b6:	2201      	movs	r2, #1
 80064b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064ba:	f7fb f839 	bl	8001530 <HAL_GetTick>
 80064be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064c0:	e008      	b.n	80064d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064c2:	f7fb f835 	bl	8001530 <HAL_GetTick>
 80064c6:	4602      	mov	r2, r0
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d901      	bls.n	80064d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	e05c      	b.n	800658e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064d4:	4b11      	ldr	r3, [pc, #68]	@ (800651c <HAL_RCC_OscConfig+0x470>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d0f0      	beq.n	80064c2 <HAL_RCC_OscConfig+0x416>
 80064e0:	e054      	b.n	800658c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064e2:	4b10      	ldr	r3, [pc, #64]	@ (8006524 <HAL_RCC_OscConfig+0x478>)
 80064e4:	2200      	movs	r2, #0
 80064e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064e8:	f7fb f822 	bl	8001530 <HAL_GetTick>
 80064ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064ee:	e008      	b.n	8006502 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064f0:	f7fb f81e 	bl	8001530 <HAL_GetTick>
 80064f4:	4602      	mov	r2, r0
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d901      	bls.n	8006502 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80064fe:	2303      	movs	r3, #3
 8006500:	e045      	b.n	800658e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006502:	4b06      	ldr	r3, [pc, #24]	@ (800651c <HAL_RCC_OscConfig+0x470>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1f0      	bne.n	80064f0 <HAL_RCC_OscConfig+0x444>
 800650e:	e03d      	b.n	800658c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	699b      	ldr	r3, [r3, #24]
 8006514:	2b01      	cmp	r3, #1
 8006516:	d107      	bne.n	8006528 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e038      	b.n	800658e <HAL_RCC_OscConfig+0x4e2>
 800651c:	40023800 	.word	0x40023800
 8006520:	40007000 	.word	0x40007000
 8006524:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006528:	4b1b      	ldr	r3, [pc, #108]	@ (8006598 <HAL_RCC_OscConfig+0x4ec>)
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	699b      	ldr	r3, [r3, #24]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d028      	beq.n	8006588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006540:	429a      	cmp	r2, r3
 8006542:	d121      	bne.n	8006588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800654e:	429a      	cmp	r2, r3
 8006550:	d11a      	bne.n	8006588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006558:	4013      	ands	r3, r2
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800655e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006560:	4293      	cmp	r3, r2
 8006562:	d111      	bne.n	8006588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800656e:	085b      	lsrs	r3, r3, #1
 8006570:	3b01      	subs	r3, #1
 8006572:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006574:	429a      	cmp	r2, r3
 8006576:	d107      	bne.n	8006588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006582:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006584:	429a      	cmp	r2, r3
 8006586:	d001      	beq.n	800658c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	e000      	b.n	800658e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3718      	adds	r7, #24
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	40023800 	.word	0x40023800

0800659c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d101      	bne.n	80065b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	e0cc      	b.n	800674a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80065b0:	4b68      	ldr	r3, [pc, #416]	@ (8006754 <HAL_RCC_ClockConfig+0x1b8>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0307 	and.w	r3, r3, #7
 80065b8:	683a      	ldr	r2, [r7, #0]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d90c      	bls.n	80065d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065be:	4b65      	ldr	r3, [pc, #404]	@ (8006754 <HAL_RCC_ClockConfig+0x1b8>)
 80065c0:	683a      	ldr	r2, [r7, #0]
 80065c2:	b2d2      	uxtb	r2, r2
 80065c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065c6:	4b63      	ldr	r3, [pc, #396]	@ (8006754 <HAL_RCC_ClockConfig+0x1b8>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0307 	and.w	r3, r3, #7
 80065ce:	683a      	ldr	r2, [r7, #0]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d001      	beq.n	80065d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e0b8      	b.n	800674a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 0302 	and.w	r3, r3, #2
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d020      	beq.n	8006626 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 0304 	and.w	r3, r3, #4
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d005      	beq.n	80065fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80065f0:	4b59      	ldr	r3, [pc, #356]	@ (8006758 <HAL_RCC_ClockConfig+0x1bc>)
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	4a58      	ldr	r2, [pc, #352]	@ (8006758 <HAL_RCC_ClockConfig+0x1bc>)
 80065f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80065fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0308 	and.w	r3, r3, #8
 8006604:	2b00      	cmp	r3, #0
 8006606:	d005      	beq.n	8006614 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006608:	4b53      	ldr	r3, [pc, #332]	@ (8006758 <HAL_RCC_ClockConfig+0x1bc>)
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	4a52      	ldr	r2, [pc, #328]	@ (8006758 <HAL_RCC_ClockConfig+0x1bc>)
 800660e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006612:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006614:	4b50      	ldr	r3, [pc, #320]	@ (8006758 <HAL_RCC_ClockConfig+0x1bc>)
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	494d      	ldr	r1, [pc, #308]	@ (8006758 <HAL_RCC_ClockConfig+0x1bc>)
 8006622:	4313      	orrs	r3, r2
 8006624:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 0301 	and.w	r3, r3, #1
 800662e:	2b00      	cmp	r3, #0
 8006630:	d044      	beq.n	80066bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	2b01      	cmp	r3, #1
 8006638:	d107      	bne.n	800664a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800663a:	4b47      	ldr	r3, [pc, #284]	@ (8006758 <HAL_RCC_ClockConfig+0x1bc>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d119      	bne.n	800667a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e07f      	b.n	800674a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	2b02      	cmp	r3, #2
 8006650:	d003      	beq.n	800665a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006656:	2b03      	cmp	r3, #3
 8006658:	d107      	bne.n	800666a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800665a:	4b3f      	ldr	r3, [pc, #252]	@ (8006758 <HAL_RCC_ClockConfig+0x1bc>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006662:	2b00      	cmp	r3, #0
 8006664:	d109      	bne.n	800667a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e06f      	b.n	800674a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800666a:	4b3b      	ldr	r3, [pc, #236]	@ (8006758 <HAL_RCC_ClockConfig+0x1bc>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 0302 	and.w	r3, r3, #2
 8006672:	2b00      	cmp	r3, #0
 8006674:	d101      	bne.n	800667a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e067      	b.n	800674a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800667a:	4b37      	ldr	r3, [pc, #220]	@ (8006758 <HAL_RCC_ClockConfig+0x1bc>)
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f023 0203 	bic.w	r2, r3, #3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	4934      	ldr	r1, [pc, #208]	@ (8006758 <HAL_RCC_ClockConfig+0x1bc>)
 8006688:	4313      	orrs	r3, r2
 800668a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800668c:	f7fa ff50 	bl	8001530 <HAL_GetTick>
 8006690:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006692:	e00a      	b.n	80066aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006694:	f7fa ff4c 	bl	8001530 <HAL_GetTick>
 8006698:	4602      	mov	r2, r0
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d901      	bls.n	80066aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e04f      	b.n	800674a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066aa:	4b2b      	ldr	r3, [pc, #172]	@ (8006758 <HAL_RCC_ClockConfig+0x1bc>)
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	f003 020c 	and.w	r2, r3, #12
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d1eb      	bne.n	8006694 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80066bc:	4b25      	ldr	r3, [pc, #148]	@ (8006754 <HAL_RCC_ClockConfig+0x1b8>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 0307 	and.w	r3, r3, #7
 80066c4:	683a      	ldr	r2, [r7, #0]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d20c      	bcs.n	80066e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066ca:	4b22      	ldr	r3, [pc, #136]	@ (8006754 <HAL_RCC_ClockConfig+0x1b8>)
 80066cc:	683a      	ldr	r2, [r7, #0]
 80066ce:	b2d2      	uxtb	r2, r2
 80066d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066d2:	4b20      	ldr	r3, [pc, #128]	@ (8006754 <HAL_RCC_ClockConfig+0x1b8>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 0307 	and.w	r3, r3, #7
 80066da:	683a      	ldr	r2, [r7, #0]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d001      	beq.n	80066e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	e032      	b.n	800674a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0304 	and.w	r3, r3, #4
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d008      	beq.n	8006702 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066f0:	4b19      	ldr	r3, [pc, #100]	@ (8006758 <HAL_RCC_ClockConfig+0x1bc>)
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	4916      	ldr	r1, [pc, #88]	@ (8006758 <HAL_RCC_ClockConfig+0x1bc>)
 80066fe:	4313      	orrs	r3, r2
 8006700:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 0308 	and.w	r3, r3, #8
 800670a:	2b00      	cmp	r3, #0
 800670c:	d009      	beq.n	8006722 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800670e:	4b12      	ldr	r3, [pc, #72]	@ (8006758 <HAL_RCC_ClockConfig+0x1bc>)
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	00db      	lsls	r3, r3, #3
 800671c:	490e      	ldr	r1, [pc, #56]	@ (8006758 <HAL_RCC_ClockConfig+0x1bc>)
 800671e:	4313      	orrs	r3, r2
 8006720:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006722:	f000 f821 	bl	8006768 <HAL_RCC_GetSysClockFreq>
 8006726:	4602      	mov	r2, r0
 8006728:	4b0b      	ldr	r3, [pc, #44]	@ (8006758 <HAL_RCC_ClockConfig+0x1bc>)
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	091b      	lsrs	r3, r3, #4
 800672e:	f003 030f 	and.w	r3, r3, #15
 8006732:	490a      	ldr	r1, [pc, #40]	@ (800675c <HAL_RCC_ClockConfig+0x1c0>)
 8006734:	5ccb      	ldrb	r3, [r1, r3]
 8006736:	fa22 f303 	lsr.w	r3, r2, r3
 800673a:	4a09      	ldr	r2, [pc, #36]	@ (8006760 <HAL_RCC_ClockConfig+0x1c4>)
 800673c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800673e:	4b09      	ldr	r3, [pc, #36]	@ (8006764 <HAL_RCC_ClockConfig+0x1c8>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4618      	mov	r0, r3
 8006744:	f7fa feb0 	bl	80014a8 <HAL_InitTick>

  return HAL_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	40023c00 	.word	0x40023c00
 8006758:	40023800 	.word	0x40023800
 800675c:	0800a3dc 	.word	0x0800a3dc
 8006760:	20000800 	.word	0x20000800
 8006764:	20000804 	.word	0x20000804

08006768 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800676c:	b094      	sub	sp, #80	@ 0x50
 800676e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006770:	2300      	movs	r3, #0
 8006772:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006774:	2300      	movs	r3, #0
 8006776:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006778:	2300      	movs	r3, #0
 800677a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800677c:	2300      	movs	r3, #0
 800677e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006780:	4b79      	ldr	r3, [pc, #484]	@ (8006968 <HAL_RCC_GetSysClockFreq+0x200>)
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	f003 030c 	and.w	r3, r3, #12
 8006788:	2b08      	cmp	r3, #8
 800678a:	d00d      	beq.n	80067a8 <HAL_RCC_GetSysClockFreq+0x40>
 800678c:	2b08      	cmp	r3, #8
 800678e:	f200 80e1 	bhi.w	8006954 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006792:	2b00      	cmp	r3, #0
 8006794:	d002      	beq.n	800679c <HAL_RCC_GetSysClockFreq+0x34>
 8006796:	2b04      	cmp	r3, #4
 8006798:	d003      	beq.n	80067a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800679a:	e0db      	b.n	8006954 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800679c:	4b73      	ldr	r3, [pc, #460]	@ (800696c <HAL_RCC_GetSysClockFreq+0x204>)
 800679e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80067a0:	e0db      	b.n	800695a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80067a2:	4b73      	ldr	r3, [pc, #460]	@ (8006970 <HAL_RCC_GetSysClockFreq+0x208>)
 80067a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80067a6:	e0d8      	b.n	800695a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80067a8:	4b6f      	ldr	r3, [pc, #444]	@ (8006968 <HAL_RCC_GetSysClockFreq+0x200>)
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80067b0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80067b2:	4b6d      	ldr	r3, [pc, #436]	@ (8006968 <HAL_RCC_GetSysClockFreq+0x200>)
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d063      	beq.n	8006886 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067be:	4b6a      	ldr	r3, [pc, #424]	@ (8006968 <HAL_RCC_GetSysClockFreq+0x200>)
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	099b      	lsrs	r3, r3, #6
 80067c4:	2200      	movs	r2, #0
 80067c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80067c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80067ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80067d2:	2300      	movs	r3, #0
 80067d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80067d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80067da:	4622      	mov	r2, r4
 80067dc:	462b      	mov	r3, r5
 80067de:	f04f 0000 	mov.w	r0, #0
 80067e2:	f04f 0100 	mov.w	r1, #0
 80067e6:	0159      	lsls	r1, r3, #5
 80067e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80067ec:	0150      	lsls	r0, r2, #5
 80067ee:	4602      	mov	r2, r0
 80067f0:	460b      	mov	r3, r1
 80067f2:	4621      	mov	r1, r4
 80067f4:	1a51      	subs	r1, r2, r1
 80067f6:	6139      	str	r1, [r7, #16]
 80067f8:	4629      	mov	r1, r5
 80067fa:	eb63 0301 	sbc.w	r3, r3, r1
 80067fe:	617b      	str	r3, [r7, #20]
 8006800:	f04f 0200 	mov.w	r2, #0
 8006804:	f04f 0300 	mov.w	r3, #0
 8006808:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800680c:	4659      	mov	r1, fp
 800680e:	018b      	lsls	r3, r1, #6
 8006810:	4651      	mov	r1, sl
 8006812:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006816:	4651      	mov	r1, sl
 8006818:	018a      	lsls	r2, r1, #6
 800681a:	4651      	mov	r1, sl
 800681c:	ebb2 0801 	subs.w	r8, r2, r1
 8006820:	4659      	mov	r1, fp
 8006822:	eb63 0901 	sbc.w	r9, r3, r1
 8006826:	f04f 0200 	mov.w	r2, #0
 800682a:	f04f 0300 	mov.w	r3, #0
 800682e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006832:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006836:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800683a:	4690      	mov	r8, r2
 800683c:	4699      	mov	r9, r3
 800683e:	4623      	mov	r3, r4
 8006840:	eb18 0303 	adds.w	r3, r8, r3
 8006844:	60bb      	str	r3, [r7, #8]
 8006846:	462b      	mov	r3, r5
 8006848:	eb49 0303 	adc.w	r3, r9, r3
 800684c:	60fb      	str	r3, [r7, #12]
 800684e:	f04f 0200 	mov.w	r2, #0
 8006852:	f04f 0300 	mov.w	r3, #0
 8006856:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800685a:	4629      	mov	r1, r5
 800685c:	024b      	lsls	r3, r1, #9
 800685e:	4621      	mov	r1, r4
 8006860:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006864:	4621      	mov	r1, r4
 8006866:	024a      	lsls	r2, r1, #9
 8006868:	4610      	mov	r0, r2
 800686a:	4619      	mov	r1, r3
 800686c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800686e:	2200      	movs	r2, #0
 8006870:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006872:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006874:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006878:	f7f9 fca6 	bl	80001c8 <__aeabi_uldivmod>
 800687c:	4602      	mov	r2, r0
 800687e:	460b      	mov	r3, r1
 8006880:	4613      	mov	r3, r2
 8006882:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006884:	e058      	b.n	8006938 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006886:	4b38      	ldr	r3, [pc, #224]	@ (8006968 <HAL_RCC_GetSysClockFreq+0x200>)
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	099b      	lsrs	r3, r3, #6
 800688c:	2200      	movs	r2, #0
 800688e:	4618      	mov	r0, r3
 8006890:	4611      	mov	r1, r2
 8006892:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006896:	623b      	str	r3, [r7, #32]
 8006898:	2300      	movs	r3, #0
 800689a:	627b      	str	r3, [r7, #36]	@ 0x24
 800689c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80068a0:	4642      	mov	r2, r8
 80068a2:	464b      	mov	r3, r9
 80068a4:	f04f 0000 	mov.w	r0, #0
 80068a8:	f04f 0100 	mov.w	r1, #0
 80068ac:	0159      	lsls	r1, r3, #5
 80068ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068b2:	0150      	lsls	r0, r2, #5
 80068b4:	4602      	mov	r2, r0
 80068b6:	460b      	mov	r3, r1
 80068b8:	4641      	mov	r1, r8
 80068ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80068be:	4649      	mov	r1, r9
 80068c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80068c4:	f04f 0200 	mov.w	r2, #0
 80068c8:	f04f 0300 	mov.w	r3, #0
 80068cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80068d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80068d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80068d8:	ebb2 040a 	subs.w	r4, r2, sl
 80068dc:	eb63 050b 	sbc.w	r5, r3, fp
 80068e0:	f04f 0200 	mov.w	r2, #0
 80068e4:	f04f 0300 	mov.w	r3, #0
 80068e8:	00eb      	lsls	r3, r5, #3
 80068ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80068ee:	00e2      	lsls	r2, r4, #3
 80068f0:	4614      	mov	r4, r2
 80068f2:	461d      	mov	r5, r3
 80068f4:	4643      	mov	r3, r8
 80068f6:	18e3      	adds	r3, r4, r3
 80068f8:	603b      	str	r3, [r7, #0]
 80068fa:	464b      	mov	r3, r9
 80068fc:	eb45 0303 	adc.w	r3, r5, r3
 8006900:	607b      	str	r3, [r7, #4]
 8006902:	f04f 0200 	mov.w	r2, #0
 8006906:	f04f 0300 	mov.w	r3, #0
 800690a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800690e:	4629      	mov	r1, r5
 8006910:	028b      	lsls	r3, r1, #10
 8006912:	4621      	mov	r1, r4
 8006914:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006918:	4621      	mov	r1, r4
 800691a:	028a      	lsls	r2, r1, #10
 800691c:	4610      	mov	r0, r2
 800691e:	4619      	mov	r1, r3
 8006920:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006922:	2200      	movs	r2, #0
 8006924:	61bb      	str	r3, [r7, #24]
 8006926:	61fa      	str	r2, [r7, #28]
 8006928:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800692c:	f7f9 fc4c 	bl	80001c8 <__aeabi_uldivmod>
 8006930:	4602      	mov	r2, r0
 8006932:	460b      	mov	r3, r1
 8006934:	4613      	mov	r3, r2
 8006936:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006938:	4b0b      	ldr	r3, [pc, #44]	@ (8006968 <HAL_RCC_GetSysClockFreq+0x200>)
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	0c1b      	lsrs	r3, r3, #16
 800693e:	f003 0303 	and.w	r3, r3, #3
 8006942:	3301      	adds	r3, #1
 8006944:	005b      	lsls	r3, r3, #1
 8006946:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006948:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800694a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800694c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006950:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006952:	e002      	b.n	800695a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006954:	4b05      	ldr	r3, [pc, #20]	@ (800696c <HAL_RCC_GetSysClockFreq+0x204>)
 8006956:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006958:	bf00      	nop
    }
  }
  return sysclockfreq;
 800695a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800695c:	4618      	mov	r0, r3
 800695e:	3750      	adds	r7, #80	@ 0x50
 8006960:	46bd      	mov	sp, r7
 8006962:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006966:	bf00      	nop
 8006968:	40023800 	.word	0x40023800
 800696c:	00f42400 	.word	0x00f42400
 8006970:	007a1200 	.word	0x007a1200

08006974 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006974:	b480      	push	{r7}
 8006976:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006978:	4b03      	ldr	r3, [pc, #12]	@ (8006988 <HAL_RCC_GetHCLKFreq+0x14>)
 800697a:	681b      	ldr	r3, [r3, #0]
}
 800697c:	4618      	mov	r0, r3
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop
 8006988:	20000800 	.word	0x20000800

0800698c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006990:	f7ff fff0 	bl	8006974 <HAL_RCC_GetHCLKFreq>
 8006994:	4602      	mov	r2, r0
 8006996:	4b05      	ldr	r3, [pc, #20]	@ (80069ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	0a9b      	lsrs	r3, r3, #10
 800699c:	f003 0307 	and.w	r3, r3, #7
 80069a0:	4903      	ldr	r1, [pc, #12]	@ (80069b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80069a2:	5ccb      	ldrb	r3, [r1, r3]
 80069a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	40023800 	.word	0x40023800
 80069b0:	0800a3ec 	.word	0x0800a3ec

080069b4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b086      	sub	sp, #24
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80069bc:	2300      	movs	r3, #0
 80069be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80069c0:	2300      	movs	r3, #0
 80069c2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 0301 	and.w	r3, r3, #1
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d105      	bne.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d035      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80069dc:	4b62      	ldr	r3, [pc, #392]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80069de:	2200      	movs	r2, #0
 80069e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80069e2:	f7fa fda5 	bl	8001530 <HAL_GetTick>
 80069e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80069e8:	e008      	b.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80069ea:	f7fa fda1 	bl	8001530 <HAL_GetTick>
 80069ee:	4602      	mov	r2, r0
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	1ad3      	subs	r3, r2, r3
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d901      	bls.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80069f8:	2303      	movs	r3, #3
 80069fa:	e0b0      	b.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80069fc:	4b5b      	ldr	r3, [pc, #364]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d1f0      	bne.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	019a      	lsls	r2, r3, #6
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	071b      	lsls	r3, r3, #28
 8006a14:	4955      	ldr	r1, [pc, #340]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a16:	4313      	orrs	r3, r2
 8006a18:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006a1c:	4b52      	ldr	r3, [pc, #328]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006a1e:	2201      	movs	r2, #1
 8006a20:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006a22:	f7fa fd85 	bl	8001530 <HAL_GetTick>
 8006a26:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a28:	e008      	b.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006a2a:	f7fa fd81 	bl	8001530 <HAL_GetTick>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	1ad3      	subs	r3, r2, r3
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d901      	bls.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e090      	b.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a3c:	4b4b      	ldr	r3, [pc, #300]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d0f0      	beq.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 0302 	and.w	r3, r3, #2
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f000 8083 	beq.w	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006a56:	2300      	movs	r3, #0
 8006a58:	60fb      	str	r3, [r7, #12]
 8006a5a:	4b44      	ldr	r3, [pc, #272]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a5e:	4a43      	ldr	r2, [pc, #268]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a64:	6413      	str	r3, [r2, #64]	@ 0x40
 8006a66:	4b41      	ldr	r3, [pc, #260]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a6e:	60fb      	str	r3, [r7, #12]
 8006a70:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006a72:	4b3f      	ldr	r3, [pc, #252]	@ (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a3e      	ldr	r2, [pc, #248]	@ (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006a78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a7c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006a7e:	f7fa fd57 	bl	8001530 <HAL_GetTick>
 8006a82:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006a84:	e008      	b.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a86:	f7fa fd53 	bl	8001530 <HAL_GetTick>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	1ad3      	subs	r3, r2, r3
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	d901      	bls.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006a94:	2303      	movs	r3, #3
 8006a96:	e062      	b.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006a98:	4b35      	ldr	r3, [pc, #212]	@ (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d0f0      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006aa4:	4b31      	ldr	r3, [pc, #196]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006aa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aa8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006aac:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d02f      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006abc:	693a      	ldr	r2, [r7, #16]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d028      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ac2:	4b2a      	ldr	r3, [pc, #168]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ac6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006aca:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006acc:	4b29      	ldr	r3, [pc, #164]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006ace:	2201      	movs	r2, #1
 8006ad0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006ad2:	4b28      	ldr	r3, [pc, #160]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006ad8:	4a24      	ldr	r2, [pc, #144]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006ade:	4b23      	ldr	r3, [pc, #140]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ae2:	f003 0301 	and.w	r3, r3, #1
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d114      	bne.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006aea:	f7fa fd21 	bl	8001530 <HAL_GetTick>
 8006aee:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006af0:	e00a      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006af2:	f7fa fd1d 	bl	8001530 <HAL_GetTick>
 8006af6:	4602      	mov	r2, r0
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d901      	bls.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006b04:	2303      	movs	r3, #3
 8006b06:	e02a      	b.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b08:	4b18      	ldr	r3, [pc, #96]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b0c:	f003 0302 	and.w	r3, r3, #2
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d0ee      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b20:	d10d      	bne.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006b22:	4b12      	ldr	r3, [pc, #72]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006b32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b36:	490d      	ldr	r1, [pc, #52]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	608b      	str	r3, [r1, #8]
 8006b3c:	e005      	b.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	4a0a      	ldr	r2, [pc, #40]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b44:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006b48:	6093      	str	r3, [r2, #8]
 8006b4a:	4b08      	ldr	r3, [pc, #32]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b4c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b56:	4905      	ldr	r1, [pc, #20]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3718      	adds	r7, #24
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	42470068 	.word	0x42470068
 8006b6c:	40023800 	.word	0x40023800
 8006b70:	40007000 	.word	0x40007000
 8006b74:	42470e40 	.word	0x42470e40

08006b78 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b087      	sub	sp, #28
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006b80:	2300      	movs	r3, #0
 8006b82:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006b84:	2300      	movs	r3, #0
 8006b86:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d13f      	bne.n	8006c16 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006b96:	4b24      	ldr	r3, [pc, #144]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b9e:	60fb      	str	r3, [r7, #12]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d006      	beq.n	8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006bac:	d12f      	bne.n	8006c0e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006bae:	4b1f      	ldr	r3, [pc, #124]	@ (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006bb0:	617b      	str	r3, [r7, #20]
          break;
 8006bb2:	e02f      	b.n	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006bb4:	4b1c      	ldr	r3, [pc, #112]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006bbc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006bc0:	d108      	bne.n	8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006bc2:	4b19      	ldr	r3, [pc, #100]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006bca:	4a19      	ldr	r2, [pc, #100]	@ (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bd0:	613b      	str	r3, [r7, #16]
 8006bd2:	e007      	b.n	8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006bd4:	4b14      	ldr	r3, [pc, #80]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006bdc:	4a15      	ldr	r2, [pc, #84]	@ (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8006be2:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006be4:	4b10      	ldr	r3, [pc, #64]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006be6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bea:	099b      	lsrs	r3, r3, #6
 8006bec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	fb02 f303 	mul.w	r3, r2, r3
 8006bf6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006bfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bfe:	0f1b      	lsrs	r3, r3, #28
 8006c00:	f003 0307 	and.w	r3, r3, #7
 8006c04:	68ba      	ldr	r2, [r7, #8]
 8006c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c0a:	617b      	str	r3, [r7, #20]
          break;
 8006c0c:	e002      	b.n	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	617b      	str	r3, [r7, #20]
          break;
 8006c12:	bf00      	nop
        }
      }
      break;
 8006c14:	e000      	b.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8006c16:	bf00      	nop
    }
  }
  return frequency;
 8006c18:	697b      	ldr	r3, [r7, #20]
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	371c      	adds	r7, #28
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	40023800 	.word	0x40023800
 8006c2c:	00bb8000 	.word	0x00bb8000
 8006c30:	007a1200 	.word	0x007a1200
 8006c34:	00f42400 	.word	0x00f42400

08006c38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b082      	sub	sp, #8
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d101      	bne.n	8006c4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e07b      	b.n	8006d42 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d108      	bne.n	8006c64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c5a:	d009      	beq.n	8006c70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	61da      	str	r2, [r3, #28]
 8006c62:	e005      	b.n	8006c70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d106      	bne.n	8006c90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f7fa fa4e 	bl	800112c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2202      	movs	r2, #2
 8006c94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ca6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006cb8:	431a      	orrs	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cc2:	431a      	orrs	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	691b      	ldr	r3, [r3, #16]
 8006cc8:	f003 0302 	and.w	r3, r3, #2
 8006ccc:	431a      	orrs	r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	695b      	ldr	r3, [r3, #20]
 8006cd2:	f003 0301 	and.w	r3, r3, #1
 8006cd6:	431a      	orrs	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	699b      	ldr	r3, [r3, #24]
 8006cdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ce0:	431a      	orrs	r2, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	69db      	ldr	r3, [r3, #28]
 8006ce6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006cea:	431a      	orrs	r2, r3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6a1b      	ldr	r3, [r3, #32]
 8006cf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cf4:	ea42 0103 	orr.w	r1, r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cfc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	430a      	orrs	r2, r1
 8006d06:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	699b      	ldr	r3, [r3, #24]
 8006d0c:	0c1b      	lsrs	r3, r3, #16
 8006d0e:	f003 0104 	and.w	r1, r3, #4
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d16:	f003 0210 	and.w	r2, r3, #16
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	430a      	orrs	r2, r1
 8006d20:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	69da      	ldr	r2, [r3, #28]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006d30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3708      	adds	r7, #8
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b082      	sub	sp, #8
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d101      	bne.n	8006d5c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e041      	b.n	8006de0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d106      	bne.n	8006d76 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f7fa fb2d 	bl	80013d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2202      	movs	r2, #2
 8006d7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	3304      	adds	r3, #4
 8006d86:	4619      	mov	r1, r3
 8006d88:	4610      	mov	r0, r2
 8006d8a:	f000 f95d 	bl	8007048 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2201      	movs	r2, #1
 8006d92:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2201      	movs	r2, #1
 8006da2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2201      	movs	r2, #1
 8006daa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2201      	movs	r2, #1
 8006db2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2201      	movs	r2, #1
 8006dba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3708      	adds	r7, #8
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b085      	sub	sp, #20
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d001      	beq.n	8006e00 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e046      	b.n	8006e8e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2202      	movs	r2, #2
 8006e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a23      	ldr	r2, [pc, #140]	@ (8006e9c <HAL_TIM_Base_Start+0xb4>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d022      	beq.n	8006e58 <HAL_TIM_Base_Start+0x70>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e1a:	d01d      	beq.n	8006e58 <HAL_TIM_Base_Start+0x70>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a1f      	ldr	r2, [pc, #124]	@ (8006ea0 <HAL_TIM_Base_Start+0xb8>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d018      	beq.n	8006e58 <HAL_TIM_Base_Start+0x70>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a1e      	ldr	r2, [pc, #120]	@ (8006ea4 <HAL_TIM_Base_Start+0xbc>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d013      	beq.n	8006e58 <HAL_TIM_Base_Start+0x70>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a1c      	ldr	r2, [pc, #112]	@ (8006ea8 <HAL_TIM_Base_Start+0xc0>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d00e      	beq.n	8006e58 <HAL_TIM_Base_Start+0x70>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a1b      	ldr	r2, [pc, #108]	@ (8006eac <HAL_TIM_Base_Start+0xc4>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d009      	beq.n	8006e58 <HAL_TIM_Base_Start+0x70>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a19      	ldr	r2, [pc, #100]	@ (8006eb0 <HAL_TIM_Base_Start+0xc8>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d004      	beq.n	8006e58 <HAL_TIM_Base_Start+0x70>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a18      	ldr	r2, [pc, #96]	@ (8006eb4 <HAL_TIM_Base_Start+0xcc>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d111      	bne.n	8006e7c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	f003 0307 	and.w	r3, r3, #7
 8006e62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2b06      	cmp	r3, #6
 8006e68:	d010      	beq.n	8006e8c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f042 0201 	orr.w	r2, r2, #1
 8006e78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e7a:	e007      	b.n	8006e8c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f042 0201 	orr.w	r2, r2, #1
 8006e8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3714      	adds	r7, #20
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	40010000 	.word	0x40010000
 8006ea0:	40000400 	.word	0x40000400
 8006ea4:	40000800 	.word	0x40000800
 8006ea8:	40000c00 	.word	0x40000c00
 8006eac:	40010400 	.word	0x40010400
 8006eb0:	40014000 	.word	0x40014000
 8006eb4:	40001800 	.word	0x40001800

08006eb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d101      	bne.n	8006ed4 <HAL_TIM_ConfigClockSource+0x1c>
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	e0b4      	b.n	800703e <HAL_TIM_ConfigClockSource+0x186>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2202      	movs	r2, #2
 8006ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006ef2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006efa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68ba      	ldr	r2, [r7, #8]
 8006f02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f0c:	d03e      	beq.n	8006f8c <HAL_TIM_ConfigClockSource+0xd4>
 8006f0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f12:	f200 8087 	bhi.w	8007024 <HAL_TIM_ConfigClockSource+0x16c>
 8006f16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f1a:	f000 8086 	beq.w	800702a <HAL_TIM_ConfigClockSource+0x172>
 8006f1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f22:	d87f      	bhi.n	8007024 <HAL_TIM_ConfigClockSource+0x16c>
 8006f24:	2b70      	cmp	r3, #112	@ 0x70
 8006f26:	d01a      	beq.n	8006f5e <HAL_TIM_ConfigClockSource+0xa6>
 8006f28:	2b70      	cmp	r3, #112	@ 0x70
 8006f2a:	d87b      	bhi.n	8007024 <HAL_TIM_ConfigClockSource+0x16c>
 8006f2c:	2b60      	cmp	r3, #96	@ 0x60
 8006f2e:	d050      	beq.n	8006fd2 <HAL_TIM_ConfigClockSource+0x11a>
 8006f30:	2b60      	cmp	r3, #96	@ 0x60
 8006f32:	d877      	bhi.n	8007024 <HAL_TIM_ConfigClockSource+0x16c>
 8006f34:	2b50      	cmp	r3, #80	@ 0x50
 8006f36:	d03c      	beq.n	8006fb2 <HAL_TIM_ConfigClockSource+0xfa>
 8006f38:	2b50      	cmp	r3, #80	@ 0x50
 8006f3a:	d873      	bhi.n	8007024 <HAL_TIM_ConfigClockSource+0x16c>
 8006f3c:	2b40      	cmp	r3, #64	@ 0x40
 8006f3e:	d058      	beq.n	8006ff2 <HAL_TIM_ConfigClockSource+0x13a>
 8006f40:	2b40      	cmp	r3, #64	@ 0x40
 8006f42:	d86f      	bhi.n	8007024 <HAL_TIM_ConfigClockSource+0x16c>
 8006f44:	2b30      	cmp	r3, #48	@ 0x30
 8006f46:	d064      	beq.n	8007012 <HAL_TIM_ConfigClockSource+0x15a>
 8006f48:	2b30      	cmp	r3, #48	@ 0x30
 8006f4a:	d86b      	bhi.n	8007024 <HAL_TIM_ConfigClockSource+0x16c>
 8006f4c:	2b20      	cmp	r3, #32
 8006f4e:	d060      	beq.n	8007012 <HAL_TIM_ConfigClockSource+0x15a>
 8006f50:	2b20      	cmp	r3, #32
 8006f52:	d867      	bhi.n	8007024 <HAL_TIM_ConfigClockSource+0x16c>
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d05c      	beq.n	8007012 <HAL_TIM_ConfigClockSource+0x15a>
 8006f58:	2b10      	cmp	r3, #16
 8006f5a:	d05a      	beq.n	8007012 <HAL_TIM_ConfigClockSource+0x15a>
 8006f5c:	e062      	b.n	8007024 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f6e:	f000 f991 	bl	8007294 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006f80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	68ba      	ldr	r2, [r7, #8]
 8006f88:	609a      	str	r2, [r3, #8]
      break;
 8006f8a:	e04f      	b.n	800702c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f9c:	f000 f97a 	bl	8007294 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	689a      	ldr	r2, [r3, #8]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006fae:	609a      	str	r2, [r3, #8]
      break;
 8006fb0:	e03c      	b.n	800702c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	f000 f8ee 	bl	80071a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	2150      	movs	r1, #80	@ 0x50
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f000 f947 	bl	800725e <TIM_ITRx_SetConfig>
      break;
 8006fd0:	e02c      	b.n	800702c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fde:	461a      	mov	r2, r3
 8006fe0:	f000 f90d 	bl	80071fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2160      	movs	r1, #96	@ 0x60
 8006fea:	4618      	mov	r0, r3
 8006fec:	f000 f937 	bl	800725e <TIM_ITRx_SetConfig>
      break;
 8006ff0:	e01c      	b.n	800702c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ffe:	461a      	mov	r2, r3
 8007000:	f000 f8ce 	bl	80071a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2140      	movs	r1, #64	@ 0x40
 800700a:	4618      	mov	r0, r3
 800700c:	f000 f927 	bl	800725e <TIM_ITRx_SetConfig>
      break;
 8007010:	e00c      	b.n	800702c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4619      	mov	r1, r3
 800701c:	4610      	mov	r0, r2
 800701e:	f000 f91e 	bl	800725e <TIM_ITRx_SetConfig>
      break;
 8007022:	e003      	b.n	800702c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	73fb      	strb	r3, [r7, #15]
      break;
 8007028:	e000      	b.n	800702c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800702a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800703c:	7bfb      	ldrb	r3, [r7, #15]
}
 800703e:	4618      	mov	r0, r3
 8007040:	3710      	adds	r7, #16
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
	...

08007048 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a46      	ldr	r2, [pc, #280]	@ (8007174 <TIM_Base_SetConfig+0x12c>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d013      	beq.n	8007088 <TIM_Base_SetConfig+0x40>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007066:	d00f      	beq.n	8007088 <TIM_Base_SetConfig+0x40>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a43      	ldr	r2, [pc, #268]	@ (8007178 <TIM_Base_SetConfig+0x130>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d00b      	beq.n	8007088 <TIM_Base_SetConfig+0x40>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4a42      	ldr	r2, [pc, #264]	@ (800717c <TIM_Base_SetConfig+0x134>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d007      	beq.n	8007088 <TIM_Base_SetConfig+0x40>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	4a41      	ldr	r2, [pc, #260]	@ (8007180 <TIM_Base_SetConfig+0x138>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d003      	beq.n	8007088 <TIM_Base_SetConfig+0x40>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4a40      	ldr	r2, [pc, #256]	@ (8007184 <TIM_Base_SetConfig+0x13c>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d108      	bne.n	800709a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800708e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	68fa      	ldr	r2, [r7, #12]
 8007096:	4313      	orrs	r3, r2
 8007098:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a35      	ldr	r2, [pc, #212]	@ (8007174 <TIM_Base_SetConfig+0x12c>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d02b      	beq.n	80070fa <TIM_Base_SetConfig+0xb2>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070a8:	d027      	beq.n	80070fa <TIM_Base_SetConfig+0xb2>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a32      	ldr	r2, [pc, #200]	@ (8007178 <TIM_Base_SetConfig+0x130>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d023      	beq.n	80070fa <TIM_Base_SetConfig+0xb2>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4a31      	ldr	r2, [pc, #196]	@ (800717c <TIM_Base_SetConfig+0x134>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d01f      	beq.n	80070fa <TIM_Base_SetConfig+0xb2>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a30      	ldr	r2, [pc, #192]	@ (8007180 <TIM_Base_SetConfig+0x138>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d01b      	beq.n	80070fa <TIM_Base_SetConfig+0xb2>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a2f      	ldr	r2, [pc, #188]	@ (8007184 <TIM_Base_SetConfig+0x13c>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d017      	beq.n	80070fa <TIM_Base_SetConfig+0xb2>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a2e      	ldr	r2, [pc, #184]	@ (8007188 <TIM_Base_SetConfig+0x140>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d013      	beq.n	80070fa <TIM_Base_SetConfig+0xb2>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a2d      	ldr	r2, [pc, #180]	@ (800718c <TIM_Base_SetConfig+0x144>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d00f      	beq.n	80070fa <TIM_Base_SetConfig+0xb2>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4a2c      	ldr	r2, [pc, #176]	@ (8007190 <TIM_Base_SetConfig+0x148>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d00b      	beq.n	80070fa <TIM_Base_SetConfig+0xb2>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a2b      	ldr	r2, [pc, #172]	@ (8007194 <TIM_Base_SetConfig+0x14c>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d007      	beq.n	80070fa <TIM_Base_SetConfig+0xb2>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a2a      	ldr	r2, [pc, #168]	@ (8007198 <TIM_Base_SetConfig+0x150>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d003      	beq.n	80070fa <TIM_Base_SetConfig+0xb2>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4a29      	ldr	r2, [pc, #164]	@ (800719c <TIM_Base_SetConfig+0x154>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d108      	bne.n	800710c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007100:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	68fa      	ldr	r2, [r7, #12]
 8007108:	4313      	orrs	r3, r2
 800710a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	695b      	ldr	r3, [r3, #20]
 8007116:	4313      	orrs	r3, r2
 8007118:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	689a      	ldr	r2, [r3, #8]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4a10      	ldr	r2, [pc, #64]	@ (8007174 <TIM_Base_SetConfig+0x12c>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d003      	beq.n	8007140 <TIM_Base_SetConfig+0xf8>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	4a12      	ldr	r2, [pc, #72]	@ (8007184 <TIM_Base_SetConfig+0x13c>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d103      	bne.n	8007148 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	691a      	ldr	r2, [r3, #16]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	f003 0301 	and.w	r3, r3, #1
 8007156:	2b01      	cmp	r3, #1
 8007158:	d105      	bne.n	8007166 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	f023 0201 	bic.w	r2, r3, #1
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	611a      	str	r2, [r3, #16]
  }
}
 8007166:	bf00      	nop
 8007168:	3714      	adds	r7, #20
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	40010000 	.word	0x40010000
 8007178:	40000400 	.word	0x40000400
 800717c:	40000800 	.word	0x40000800
 8007180:	40000c00 	.word	0x40000c00
 8007184:	40010400 	.word	0x40010400
 8007188:	40014000 	.word	0x40014000
 800718c:	40014400 	.word	0x40014400
 8007190:	40014800 	.word	0x40014800
 8007194:	40001800 	.word	0x40001800
 8007198:	40001c00 	.word	0x40001c00
 800719c:	40002000 	.word	0x40002000

080071a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b087      	sub	sp, #28
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6a1b      	ldr	r3, [r3, #32]
 80071b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6a1b      	ldr	r3, [r3, #32]
 80071b6:	f023 0201 	bic.w	r2, r3, #1
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	699b      	ldr	r3, [r3, #24]
 80071c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80071ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	011b      	lsls	r3, r3, #4
 80071d0:	693a      	ldr	r2, [r7, #16]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	f023 030a 	bic.w	r3, r3, #10
 80071dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071de:	697a      	ldr	r2, [r7, #20]
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	693a      	ldr	r2, [r7, #16]
 80071ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	697a      	ldr	r2, [r7, #20]
 80071f0:	621a      	str	r2, [r3, #32]
}
 80071f2:	bf00      	nop
 80071f4:	371c      	adds	r7, #28
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr

080071fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071fe:	b480      	push	{r7}
 8007200:	b087      	sub	sp, #28
 8007202:	af00      	add	r7, sp, #0
 8007204:	60f8      	str	r0, [r7, #12]
 8007206:	60b9      	str	r1, [r7, #8]
 8007208:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	6a1b      	ldr	r3, [r3, #32]
 800720e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6a1b      	ldr	r3, [r3, #32]
 8007214:	f023 0210 	bic.w	r2, r3, #16
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	699b      	ldr	r3, [r3, #24]
 8007220:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007228:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	031b      	lsls	r3, r3, #12
 800722e:	693a      	ldr	r2, [r7, #16]
 8007230:	4313      	orrs	r3, r2
 8007232:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800723a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	011b      	lsls	r3, r3, #4
 8007240:	697a      	ldr	r2, [r7, #20]
 8007242:	4313      	orrs	r3, r2
 8007244:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	693a      	ldr	r2, [r7, #16]
 800724a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	697a      	ldr	r2, [r7, #20]
 8007250:	621a      	str	r2, [r3, #32]
}
 8007252:	bf00      	nop
 8007254:	371c      	adds	r7, #28
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr

0800725e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800725e:	b480      	push	{r7}
 8007260:	b085      	sub	sp, #20
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
 8007266:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007274:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007276:	683a      	ldr	r2, [r7, #0]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	4313      	orrs	r3, r2
 800727c:	f043 0307 	orr.w	r3, r3, #7
 8007280:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	68fa      	ldr	r2, [r7, #12]
 8007286:	609a      	str	r2, [r3, #8]
}
 8007288:	bf00      	nop
 800728a:	3714      	adds	r7, #20
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007294:	b480      	push	{r7}
 8007296:	b087      	sub	sp, #28
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	607a      	str	r2, [r7, #4]
 80072a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80072ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	021a      	lsls	r2, r3, #8
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	431a      	orrs	r2, r3
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	697a      	ldr	r2, [r7, #20]
 80072be:	4313      	orrs	r3, r2
 80072c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	697a      	ldr	r2, [r7, #20]
 80072c6:	609a      	str	r2, [r3, #8]
}
 80072c8:	bf00      	nop
 80072ca:	371c      	adds	r7, #28
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b085      	sub	sp, #20
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d101      	bne.n	80072ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072e8:	2302      	movs	r3, #2
 80072ea:	e05a      	b.n	80073a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2202      	movs	r2, #2
 80072f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007312:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	68fa      	ldr	r2, [r7, #12]
 800731a:	4313      	orrs	r3, r2
 800731c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a21      	ldr	r2, [pc, #132]	@ (80073b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d022      	beq.n	8007376 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007338:	d01d      	beq.n	8007376 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a1d      	ldr	r2, [pc, #116]	@ (80073b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d018      	beq.n	8007376 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a1b      	ldr	r2, [pc, #108]	@ (80073b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d013      	beq.n	8007376 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a1a      	ldr	r2, [pc, #104]	@ (80073bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d00e      	beq.n	8007376 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a18      	ldr	r2, [pc, #96]	@ (80073c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d009      	beq.n	8007376 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a17      	ldr	r2, [pc, #92]	@ (80073c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d004      	beq.n	8007376 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a15      	ldr	r2, [pc, #84]	@ (80073c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d10c      	bne.n	8007390 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800737c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	4313      	orrs	r3, r2
 8007386:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	68ba      	ldr	r2, [r7, #8]
 800738e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3714      	adds	r7, #20
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop
 80073b0:	40010000 	.word	0x40010000
 80073b4:	40000400 	.word	0x40000400
 80073b8:	40000800 	.word	0x40000800
 80073bc:	40000c00 	.word	0x40000c00
 80073c0:	40010400 	.word	0x40010400
 80073c4:	40014000 	.word	0x40014000
 80073c8:	40001800 	.word	0x40001800

080073cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80073cc:	b084      	sub	sp, #16
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b084      	sub	sp, #16
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
 80073d6:	f107 001c 	add.w	r0, r7, #28
 80073da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80073de:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d123      	bne.n	800742e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80073fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800740e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007412:	2b01      	cmp	r3, #1
 8007414:	d105      	bne.n	8007422 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 f9dc 	bl	80077e0 <USB_CoreReset>
 8007428:	4603      	mov	r3, r0
 800742a:	73fb      	strb	r3, [r7, #15]
 800742c:	e01b      	b.n	8007466 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 f9d0 	bl	80077e0 <USB_CoreReset>
 8007440:	4603      	mov	r3, r0
 8007442:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007444:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007448:	2b00      	cmp	r3, #0
 800744a:	d106      	bne.n	800745a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007450:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	639a      	str	r2, [r3, #56]	@ 0x38
 8007458:	e005      	b.n	8007466 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800745e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007466:	7fbb      	ldrb	r3, [r7, #30]
 8007468:	2b01      	cmp	r3, #1
 800746a:	d10b      	bne.n	8007484 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	f043 0206 	orr.w	r2, r3, #6
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	f043 0220 	orr.w	r2, r3, #32
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007484:	7bfb      	ldrb	r3, [r7, #15]
}
 8007486:	4618      	mov	r0, r3
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007490:	b004      	add	sp, #16
 8007492:	4770      	bx	lr

08007494 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	f043 0201 	orr.w	r2, r3, #1
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80074a8:	2300      	movs	r3, #0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	370c      	adds	r7, #12
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr

080074b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80074b6:	b480      	push	{r7}
 80074b8:	b083      	sub	sp, #12
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	f023 0201 	bic.w	r2, r3, #1
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	460b      	mov	r3, r1
 80074e2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80074e4:	2300      	movs	r3, #0
 80074e6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80074f4:	78fb      	ldrb	r3, [r7, #3]
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d115      	bne.n	8007526 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007506:	200a      	movs	r0, #10
 8007508:	f7fa f81e 	bl	8001548 <HAL_Delay>
      ms += 10U;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	330a      	adds	r3, #10
 8007510:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 f956 	bl	80077c4 <USB_GetMode>
 8007518:	4603      	mov	r3, r0
 800751a:	2b01      	cmp	r3, #1
 800751c:	d01e      	beq.n	800755c <USB_SetCurrentMode+0x84>
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2bc7      	cmp	r3, #199	@ 0xc7
 8007522:	d9f0      	bls.n	8007506 <USB_SetCurrentMode+0x2e>
 8007524:	e01a      	b.n	800755c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007526:	78fb      	ldrb	r3, [r7, #3]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d115      	bne.n	8007558 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007538:	200a      	movs	r0, #10
 800753a:	f7fa f805 	bl	8001548 <HAL_Delay>
      ms += 10U;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	330a      	adds	r3, #10
 8007542:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 f93d 	bl	80077c4 <USB_GetMode>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d005      	beq.n	800755c <USB_SetCurrentMode+0x84>
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2bc7      	cmp	r3, #199	@ 0xc7
 8007554:	d9f0      	bls.n	8007538 <USB_SetCurrentMode+0x60>
 8007556:	e001      	b.n	800755c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	e005      	b.n	8007568 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2bc8      	cmp	r3, #200	@ 0xc8
 8007560:	d101      	bne.n	8007566 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e000      	b.n	8007568 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007566:	2300      	movs	r3, #0
}
 8007568:	4618      	mov	r0, r3
 800756a:	3710      	adds	r7, #16
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007570:	b480      	push	{r7}
 8007572:	b085      	sub	sp, #20
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800757a:	2300      	movs	r3, #0
 800757c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	3301      	adds	r3, #1
 8007582:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800758a:	d901      	bls.n	8007590 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800758c:	2303      	movs	r3, #3
 800758e:	e01b      	b.n	80075c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	691b      	ldr	r3, [r3, #16]
 8007594:	2b00      	cmp	r3, #0
 8007596:	daf2      	bge.n	800757e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007598:	2300      	movs	r3, #0
 800759a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	019b      	lsls	r3, r3, #6
 80075a0:	f043 0220 	orr.w	r2, r3, #32
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	3301      	adds	r3, #1
 80075ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075b4:	d901      	bls.n	80075ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80075b6:	2303      	movs	r3, #3
 80075b8:	e006      	b.n	80075c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	f003 0320 	and.w	r3, r3, #32
 80075c2:	2b20      	cmp	r3, #32
 80075c4:	d0f0      	beq.n	80075a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3714      	adds	r7, #20
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b085      	sub	sp, #20
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80075dc:	2300      	movs	r3, #0
 80075de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	3301      	adds	r3, #1
 80075e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075ec:	d901      	bls.n	80075f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80075ee:	2303      	movs	r3, #3
 80075f0:	e018      	b.n	8007624 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	daf2      	bge.n	80075e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80075fa:	2300      	movs	r3, #0
 80075fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2210      	movs	r2, #16
 8007602:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	3301      	adds	r3, #1
 8007608:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007610:	d901      	bls.n	8007616 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007612:	2303      	movs	r3, #3
 8007614:	e006      	b.n	8007624 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	f003 0310 	and.w	r3, r3, #16
 800761e:	2b10      	cmp	r3, #16
 8007620:	d0f0      	beq.n	8007604 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	3714      	adds	r7, #20
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007630:	b480      	push	{r7}
 8007632:	b089      	sub	sp, #36	@ 0x24
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	4611      	mov	r1, r2
 800763c:	461a      	mov	r2, r3
 800763e:	460b      	mov	r3, r1
 8007640:	71fb      	strb	r3, [r7, #7]
 8007642:	4613      	mov	r3, r2
 8007644:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800764e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007652:	2b00      	cmp	r3, #0
 8007654:	d123      	bne.n	800769e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007656:	88bb      	ldrh	r3, [r7, #4]
 8007658:	3303      	adds	r3, #3
 800765a:	089b      	lsrs	r3, r3, #2
 800765c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800765e:	2300      	movs	r3, #0
 8007660:	61bb      	str	r3, [r7, #24]
 8007662:	e018      	b.n	8007696 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007664:	79fb      	ldrb	r3, [r7, #7]
 8007666:	031a      	lsls	r2, r3, #12
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	4413      	add	r3, r2
 800766c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007670:	461a      	mov	r2, r3
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	3301      	adds	r3, #1
 800767c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	3301      	adds	r3, #1
 8007682:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007684:	69fb      	ldr	r3, [r7, #28]
 8007686:	3301      	adds	r3, #1
 8007688:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	3301      	adds	r3, #1
 800768e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	3301      	adds	r3, #1
 8007694:	61bb      	str	r3, [r7, #24]
 8007696:	69ba      	ldr	r2, [r7, #24]
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	429a      	cmp	r2, r3
 800769c:	d3e2      	bcc.n	8007664 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800769e:	2300      	movs	r3, #0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3724      	adds	r7, #36	@ 0x24
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b08b      	sub	sp, #44	@ 0x2c
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	4613      	mov	r3, r2
 80076b8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80076c2:	88fb      	ldrh	r3, [r7, #6]
 80076c4:	089b      	lsrs	r3, r3, #2
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80076ca:	88fb      	ldrh	r3, [r7, #6]
 80076cc:	f003 0303 	and.w	r3, r3, #3
 80076d0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80076d2:	2300      	movs	r3, #0
 80076d4:	623b      	str	r3, [r7, #32]
 80076d6:	e014      	b.n	8007702 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e2:	601a      	str	r2, [r3, #0]
    pDest++;
 80076e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e6:	3301      	adds	r3, #1
 80076e8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80076ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ec:	3301      	adds	r3, #1
 80076ee:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80076f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f2:	3301      	adds	r3, #1
 80076f4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80076f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f8:	3301      	adds	r3, #1
 80076fa:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80076fc:	6a3b      	ldr	r3, [r7, #32]
 80076fe:	3301      	adds	r3, #1
 8007700:	623b      	str	r3, [r7, #32]
 8007702:	6a3a      	ldr	r2, [r7, #32]
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	429a      	cmp	r2, r3
 8007708:	d3e6      	bcc.n	80076d8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800770a:	8bfb      	ldrh	r3, [r7, #30]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d01e      	beq.n	800774e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007710:	2300      	movs	r3, #0
 8007712:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007714:	69bb      	ldr	r3, [r7, #24]
 8007716:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800771a:	461a      	mov	r2, r3
 800771c:	f107 0310 	add.w	r3, r7, #16
 8007720:	6812      	ldr	r2, [r2, #0]
 8007722:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007724:	693a      	ldr	r2, [r7, #16]
 8007726:	6a3b      	ldr	r3, [r7, #32]
 8007728:	b2db      	uxtb	r3, r3
 800772a:	00db      	lsls	r3, r3, #3
 800772c:	fa22 f303 	lsr.w	r3, r2, r3
 8007730:	b2da      	uxtb	r2, r3
 8007732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007734:	701a      	strb	r2, [r3, #0]
      i++;
 8007736:	6a3b      	ldr	r3, [r7, #32]
 8007738:	3301      	adds	r3, #1
 800773a:	623b      	str	r3, [r7, #32]
      pDest++;
 800773c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800773e:	3301      	adds	r3, #1
 8007740:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007742:	8bfb      	ldrh	r3, [r7, #30]
 8007744:	3b01      	subs	r3, #1
 8007746:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007748:	8bfb      	ldrh	r3, [r7, #30]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1ea      	bne.n	8007724 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800774e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007750:	4618      	mov	r0, r3
 8007752:	372c      	adds	r7, #44	@ 0x2c
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800775c:	b480      	push	{r7}
 800775e:	b085      	sub	sp, #20
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	695b      	ldr	r3, [r3, #20]
 8007768:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	699b      	ldr	r3, [r3, #24]
 800776e:	68fa      	ldr	r2, [r7, #12]
 8007770:	4013      	ands	r3, r2
 8007772:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007774:	68fb      	ldr	r3, [r7, #12]
}
 8007776:	4618      	mov	r0, r3
 8007778:	3714      	adds	r7, #20
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr

08007782 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007782:	b480      	push	{r7}
 8007784:	b085      	sub	sp, #20
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
 800778a:	460b      	mov	r3, r1
 800778c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007792:	78fb      	ldrb	r3, [r7, #3]
 8007794:	015a      	lsls	r2, r3, #5
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	4413      	add	r3, r2
 800779a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80077a2:	78fb      	ldrb	r3, [r7, #3]
 80077a4:	015a      	lsls	r2, r3, #5
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	4413      	add	r3, r2
 80077aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	68ba      	ldr	r2, [r7, #8]
 80077b2:	4013      	ands	r3, r2
 80077b4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80077b6:	68bb      	ldr	r3, [r7, #8]
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3714      	adds	r7, #20
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	695b      	ldr	r3, [r3, #20]
 80077d0:	f003 0301 	and.w	r3, r3, #1
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80077e8:	2300      	movs	r3, #0
 80077ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	3301      	adds	r3, #1
 80077f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077f8:	d901      	bls.n	80077fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80077fa:	2303      	movs	r3, #3
 80077fc:	e01b      	b.n	8007836 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	2b00      	cmp	r3, #0
 8007804:	daf2      	bge.n	80077ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007806:	2300      	movs	r3, #0
 8007808:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	f043 0201 	orr.w	r2, r3, #1
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	3301      	adds	r3, #1
 800781a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007822:	d901      	bls.n	8007828 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007824:	2303      	movs	r3, #3
 8007826:	e006      	b.n	8007836 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	691b      	ldr	r3, [r3, #16]
 800782c:	f003 0301 	and.w	r3, r3, #1
 8007830:	2b01      	cmp	r3, #1
 8007832:	d0f0      	beq.n	8007816 <USB_CoreReset+0x36>

  return HAL_OK;
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	3714      	adds	r7, #20
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr
	...

08007844 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007844:	b084      	sub	sp, #16
 8007846:	b580      	push	{r7, lr}
 8007848:	b086      	sub	sp, #24
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
 800784e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007852:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007856:	2300      	movs	r3, #0
 8007858:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007864:	461a      	mov	r2, r3
 8007866:	2300      	movs	r3, #0
 8007868:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800786e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800787a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007886:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	68db      	ldr	r3, [r3, #12]
 8007892:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007896:	2b00      	cmp	r3, #0
 8007898:	d119      	bne.n	80078ce <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800789a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d10a      	bne.n	80078b8 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80078b0:	f043 0304 	orr.w	r3, r3, #4
 80078b4:	6013      	str	r3, [r2, #0]
 80078b6:	e014      	b.n	80078e2 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	68fa      	ldr	r2, [r7, #12]
 80078c2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80078c6:	f023 0304 	bic.w	r3, r3, #4
 80078ca:	6013      	str	r3, [r2, #0]
 80078cc:	e009      	b.n	80078e2 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	68fa      	ldr	r2, [r7, #12]
 80078d8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80078dc:	f023 0304 	bic.w	r3, r3, #4
 80078e0:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80078e2:	2110      	movs	r1, #16
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f7ff fe43 	bl	8007570 <USB_FlushTxFifo>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d001      	beq.n	80078f4 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f7ff fe6d 	bl	80075d4 <USB_FlushRxFifo>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d001      	beq.n	8007904 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8007900:	2301      	movs	r3, #1
 8007902:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007904:	2300      	movs	r3, #0
 8007906:	613b      	str	r3, [r7, #16]
 8007908:	e015      	b.n	8007936 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	015a      	lsls	r2, r3, #5
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	4413      	add	r3, r2
 8007912:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007916:	461a      	mov	r2, r3
 8007918:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800791c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	015a      	lsls	r2, r3, #5
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	4413      	add	r3, r2
 8007926:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800792a:	461a      	mov	r2, r3
 800792c:	2300      	movs	r3, #0
 800792e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	3301      	adds	r3, #1
 8007934:	613b      	str	r3, [r7, #16]
 8007936:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800793a:	461a      	mov	r2, r3
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	4293      	cmp	r3, r2
 8007940:	d3e3      	bcc.n	800790a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800794e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a18      	ldr	r2, [pc, #96]	@ (80079b4 <USB_HostInit+0x170>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d10b      	bne.n	8007970 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800795e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a15      	ldr	r2, [pc, #84]	@ (80079b8 <USB_HostInit+0x174>)
 8007964:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4a14      	ldr	r2, [pc, #80]	@ (80079bc <USB_HostInit+0x178>)
 800796a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800796e:	e009      	b.n	8007984 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2280      	movs	r2, #128	@ 0x80
 8007974:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	4a11      	ldr	r2, [pc, #68]	@ (80079c0 <USB_HostInit+0x17c>)
 800797a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4a11      	ldr	r2, [pc, #68]	@ (80079c4 <USB_HostInit+0x180>)
 8007980:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007984:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007988:	2b00      	cmp	r3, #0
 800798a:	d105      	bne.n	8007998 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	699b      	ldr	r3, [r3, #24]
 8007990:	f043 0210 	orr.w	r2, r3, #16
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	699a      	ldr	r2, [r3, #24]
 800799c:	4b0a      	ldr	r3, [pc, #40]	@ (80079c8 <USB_HostInit+0x184>)
 800799e:	4313      	orrs	r3, r2
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80079a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3718      	adds	r7, #24
 80079aa:	46bd      	mov	sp, r7
 80079ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80079b0:	b004      	add	sp, #16
 80079b2:	4770      	bx	lr
 80079b4:	40040000 	.word	0x40040000
 80079b8:	01000200 	.word	0x01000200
 80079bc:	00e00300 	.word	0x00e00300
 80079c0:	00600080 	.word	0x00600080
 80079c4:	004000e0 	.word	0x004000e0
 80079c8:	a3200008 	.word	0xa3200008

080079cc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b085      	sub	sp, #20
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	460b      	mov	r3, r1
 80079d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80079ea:	f023 0303 	bic.w	r3, r3, #3
 80079ee:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	78fb      	ldrb	r3, [r7, #3]
 80079fa:	f003 0303 	and.w	r3, r3, #3
 80079fe:	68f9      	ldr	r1, [r7, #12]
 8007a00:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007a04:	4313      	orrs	r3, r2
 8007a06:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007a08:	78fb      	ldrb	r3, [r7, #3]
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d107      	bne.n	8007a1e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a14:	461a      	mov	r2, r3
 8007a16:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007a1a:	6053      	str	r3, [r2, #4]
 8007a1c:	e00c      	b.n	8007a38 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8007a1e:	78fb      	ldrb	r3, [r7, #3]
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d107      	bne.n	8007a34 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8007a30:	6053      	str	r3, [r2, #4]
 8007a32:	e001      	b.n	8007a38 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	e000      	b.n	8007a3a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007a38:	2300      	movs	r3, #0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3714      	adds	r7, #20
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr

08007a46 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007a46:	b480      	push	{r7}
 8007a48:	b085      	sub	sp, #20
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
 8007a4e:	460b      	mov	r3, r1
 8007a50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007a56:	2300      	movs	r3, #0
 8007a58:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007a6a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d109      	bne.n	8007a8a <USB_DriveVbus+0x44>
 8007a76:	78fb      	ldrb	r3, [r7, #3]
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d106      	bne.n	8007a8a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007a84:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007a88:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007a90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a94:	d109      	bne.n	8007aaa <USB_DriveVbus+0x64>
 8007a96:	78fb      	ldrb	r3, [r7, #3]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d106      	bne.n	8007aaa <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	68fa      	ldr	r2, [r7, #12]
 8007aa0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007aa4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007aa8:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007aaa:	2300      	movs	r3, #0
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3714      	adds	r7, #20
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b085      	sub	sp, #20
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	0c5b      	lsrs	r3, r3, #17
 8007ad6:	f003 0303 	and.w	r3, r3, #3
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3714      	adds	r7, #20
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr

08007ae6 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8007ae6:	b480      	push	{r7}
 8007ae8:	b085      	sub	sp, #20
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	b29b      	uxth	r3, r3
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3714      	adds	r7, #20
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b088      	sub	sp, #32
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	4608      	mov	r0, r1
 8007b12:	4611      	mov	r1, r2
 8007b14:	461a      	mov	r2, r3
 8007b16:	4603      	mov	r3, r0
 8007b18:	70fb      	strb	r3, [r7, #3]
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	70bb      	strb	r3, [r7, #2]
 8007b1e:	4613      	mov	r3, r2
 8007b20:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007b22:	2300      	movs	r3, #0
 8007b24:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8007b2a:	78fb      	ldrb	r3, [r7, #3]
 8007b2c:	015a      	lsls	r2, r3, #5
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	4413      	add	r3, r2
 8007b32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b36:	461a      	mov	r2, r3
 8007b38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007b3c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007b3e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007b42:	2b03      	cmp	r3, #3
 8007b44:	d87c      	bhi.n	8007c40 <USB_HC_Init+0x138>
 8007b46:	a201      	add	r2, pc, #4	@ (adr r2, 8007b4c <USB_HC_Init+0x44>)
 8007b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b4c:	08007b5d 	.word	0x08007b5d
 8007b50:	08007c03 	.word	0x08007c03
 8007b54:	08007b5d 	.word	0x08007b5d
 8007b58:	08007bc5 	.word	0x08007bc5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007b5c:	78fb      	ldrb	r3, [r7, #3]
 8007b5e:	015a      	lsls	r2, r3, #5
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	4413      	add	r3, r2
 8007b64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b68:	461a      	mov	r2, r3
 8007b6a:	f240 439d 	movw	r3, #1181	@ 0x49d
 8007b6e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007b70:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	da10      	bge.n	8007b9a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007b78:	78fb      	ldrb	r3, [r7, #3]
 8007b7a:	015a      	lsls	r2, r3, #5
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	4413      	add	r3, r2
 8007b80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	78fa      	ldrb	r2, [r7, #3]
 8007b88:	0151      	lsls	r1, r2, #5
 8007b8a:	693a      	ldr	r2, [r7, #16]
 8007b8c:	440a      	add	r2, r1
 8007b8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b96:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8007b98:	e055      	b.n	8007c46 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4a6f      	ldr	r2, [pc, #444]	@ (8007d5c <USB_HC_Init+0x254>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d151      	bne.n	8007c46 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007ba2:	78fb      	ldrb	r3, [r7, #3]
 8007ba4:	015a      	lsls	r2, r3, #5
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	4413      	add	r3, r2
 8007baa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	78fa      	ldrb	r2, [r7, #3]
 8007bb2:	0151      	lsls	r1, r2, #5
 8007bb4:	693a      	ldr	r2, [r7, #16]
 8007bb6:	440a      	add	r2, r1
 8007bb8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007bbc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007bc0:	60d3      	str	r3, [r2, #12]
      break;
 8007bc2:	e040      	b.n	8007c46 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007bc4:	78fb      	ldrb	r3, [r7, #3]
 8007bc6:	015a      	lsls	r2, r3, #5
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	4413      	add	r3, r2
 8007bcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	f240 639d 	movw	r3, #1693	@ 0x69d
 8007bd6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007bd8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	da34      	bge.n	8007c4a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007be0:	78fb      	ldrb	r3, [r7, #3]
 8007be2:	015a      	lsls	r2, r3, #5
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	4413      	add	r3, r2
 8007be8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	78fa      	ldrb	r2, [r7, #3]
 8007bf0:	0151      	lsls	r1, r2, #5
 8007bf2:	693a      	ldr	r2, [r7, #16]
 8007bf4:	440a      	add	r2, r1
 8007bf6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007bfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007bfe:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007c00:	e023      	b.n	8007c4a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007c02:	78fb      	ldrb	r3, [r7, #3]
 8007c04:	015a      	lsls	r2, r3, #5
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	4413      	add	r3, r2
 8007c0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c0e:	461a      	mov	r2, r3
 8007c10:	f240 2325 	movw	r3, #549	@ 0x225
 8007c14:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007c16:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	da17      	bge.n	8007c4e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007c1e:	78fb      	ldrb	r3, [r7, #3]
 8007c20:	015a      	lsls	r2, r3, #5
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	4413      	add	r3, r2
 8007c26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	78fa      	ldrb	r2, [r7, #3]
 8007c2e:	0151      	lsls	r1, r2, #5
 8007c30:	693a      	ldr	r2, [r7, #16]
 8007c32:	440a      	add	r2, r1
 8007c34:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c38:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8007c3c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007c3e:	e006      	b.n	8007c4e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8007c40:	2301      	movs	r3, #1
 8007c42:	77fb      	strb	r3, [r7, #31]
      break;
 8007c44:	e004      	b.n	8007c50 <USB_HC_Init+0x148>
      break;
 8007c46:	bf00      	nop
 8007c48:	e002      	b.n	8007c50 <USB_HC_Init+0x148>
      break;
 8007c4a:	bf00      	nop
 8007c4c:	e000      	b.n	8007c50 <USB_HC_Init+0x148>
      break;
 8007c4e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007c50:	78fb      	ldrb	r3, [r7, #3]
 8007c52:	015a      	lsls	r2, r3, #5
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	4413      	add	r3, r2
 8007c58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	2300      	movs	r3, #0
 8007c60:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007c62:	78fb      	ldrb	r3, [r7, #3]
 8007c64:	015a      	lsls	r2, r3, #5
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	4413      	add	r3, r2
 8007c6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	78fa      	ldrb	r2, [r7, #3]
 8007c72:	0151      	lsls	r1, r2, #5
 8007c74:	693a      	ldr	r2, [r7, #16]
 8007c76:	440a      	add	r2, r1
 8007c78:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c7c:	f043 0302 	orr.w	r3, r3, #2
 8007c80:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007c88:	699a      	ldr	r2, [r3, #24]
 8007c8a:	78fb      	ldrb	r3, [r7, #3]
 8007c8c:	f003 030f 	and.w	r3, r3, #15
 8007c90:	2101      	movs	r1, #1
 8007c92:	fa01 f303 	lsl.w	r3, r1, r3
 8007c96:	6939      	ldr	r1, [r7, #16]
 8007c98:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	699b      	ldr	r3, [r3, #24]
 8007ca4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007cac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	da03      	bge.n	8007cbc <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007cb4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cb8:	61bb      	str	r3, [r7, #24]
 8007cba:	e001      	b.n	8007cc0 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f7ff fef9 	bl	8007ab8 <USB_GetHostSpeed>
 8007cc6:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007cc8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007ccc:	2b02      	cmp	r3, #2
 8007cce:	d106      	bne.n	8007cde <USB_HC_Init+0x1d6>
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2b02      	cmp	r3, #2
 8007cd4:	d003      	beq.n	8007cde <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007cd6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007cda:	617b      	str	r3, [r7, #20]
 8007cdc:	e001      	b.n	8007ce2 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007ce2:	787b      	ldrb	r3, [r7, #1]
 8007ce4:	059b      	lsls	r3, r3, #22
 8007ce6:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007cea:	78bb      	ldrb	r3, [r7, #2]
 8007cec:	02db      	lsls	r3, r3, #11
 8007cee:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007cf2:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007cf4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007cf8:	049b      	lsls	r3, r3, #18
 8007cfa:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007cfe:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8007d00:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007d02:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007d06:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007d08:	69bb      	ldr	r3, [r7, #24]
 8007d0a:	431a      	orrs	r2, r3
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007d10:	78fa      	ldrb	r2, [r7, #3]
 8007d12:	0151      	lsls	r1, r2, #5
 8007d14:	693a      	ldr	r2, [r7, #16]
 8007d16:	440a      	add	r2, r1
 8007d18:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007d1c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007d20:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007d22:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007d26:	2b03      	cmp	r3, #3
 8007d28:	d003      	beq.n	8007d32 <USB_HC_Init+0x22a>
 8007d2a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d10f      	bne.n	8007d52 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007d32:	78fb      	ldrb	r3, [r7, #3]
 8007d34:	015a      	lsls	r2, r3, #5
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	4413      	add	r3, r2
 8007d3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	78fa      	ldrb	r2, [r7, #3]
 8007d42:	0151      	lsls	r1, r2, #5
 8007d44:	693a      	ldr	r2, [r7, #16]
 8007d46:	440a      	add	r2, r1
 8007d48:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d4c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007d50:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007d52:	7ffb      	ldrb	r3, [r7, #31]
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3720      	adds	r7, #32
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	40040000 	.word	0x40040000

08007d60 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b08c      	sub	sp, #48	@ 0x30
 8007d64:	af02      	add	r7, sp, #8
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	60b9      	str	r1, [r7, #8]
 8007d6a:	4613      	mov	r3, r2
 8007d6c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	785b      	ldrb	r3, [r3, #1]
 8007d76:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8007d78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007d7c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	4a5d      	ldr	r2, [pc, #372]	@ (8007ef8 <USB_HC_StartXfer+0x198>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d12f      	bne.n	8007de6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8007d86:	79fb      	ldrb	r3, [r7, #7]
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d11c      	bne.n	8007dc6 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	7c9b      	ldrb	r3, [r3, #18]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d003      	beq.n	8007d9c <USB_HC_StartXfer+0x3c>
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	7c9b      	ldrb	r3, [r3, #18]
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	d124      	bne.n	8007de6 <USB_HC_StartXfer+0x86>
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	799b      	ldrb	r3, [r3, #6]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d120      	bne.n	8007de6 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007da4:	69fb      	ldr	r3, [r7, #28]
 8007da6:	015a      	lsls	r2, r3, #5
 8007da8:	6a3b      	ldr	r3, [r7, #32]
 8007daa:	4413      	add	r3, r2
 8007dac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	69fa      	ldr	r2, [r7, #28]
 8007db4:	0151      	lsls	r1, r2, #5
 8007db6:	6a3a      	ldr	r2, [r7, #32]
 8007db8:	440a      	add	r2, r1
 8007dba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007dbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dc2:	60d3      	str	r3, [r2, #12]
 8007dc4:	e00f      	b.n	8007de6 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	791b      	ldrb	r3, [r3, #4]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d10b      	bne.n	8007de6 <USB_HC_StartXfer+0x86>
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	795b      	ldrb	r3, [r3, #5]
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d107      	bne.n	8007de6 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	785b      	ldrb	r3, [r3, #1]
 8007dda:	4619      	mov	r1, r3
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f000 fb6b 	bl	80084b8 <USB_DoPing>
        return HAL_OK;
 8007de2:	2300      	movs	r3, #0
 8007de4:	e232      	b.n	800824c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	799b      	ldrb	r3, [r3, #6]
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d158      	bne.n	8007ea0 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8007dee:	2301      	movs	r3, #1
 8007df0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	78db      	ldrb	r3, [r3, #3]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d007      	beq.n	8007e0a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007dfa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007dfc:	68ba      	ldr	r2, [r7, #8]
 8007dfe:	8a92      	ldrh	r2, [r2, #20]
 8007e00:	fb03 f202 	mul.w	r2, r3, r2
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	61da      	str	r2, [r3, #28]
 8007e08:	e07c      	b.n	8007f04 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	7c9b      	ldrb	r3, [r3, #18]
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d130      	bne.n	8007e74 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	6a1b      	ldr	r3, [r3, #32]
 8007e16:	2bbc      	cmp	r3, #188	@ 0xbc
 8007e18:	d918      	bls.n	8007e4c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	8a9b      	ldrh	r3, [r3, #20]
 8007e1e:	461a      	mov	r2, r3
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	69da      	ldr	r2, [r3, #28]
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d003      	beq.n	8007e3c <USB_HC_StartXfer+0xdc>
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	2b02      	cmp	r3, #2
 8007e3a:	d103      	bne.n	8007e44 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	2202      	movs	r2, #2
 8007e40:	60da      	str	r2, [r3, #12]
 8007e42:	e05f      	b.n	8007f04 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	2201      	movs	r2, #1
 8007e48:	60da      	str	r2, [r3, #12]
 8007e4a:	e05b      	b.n	8007f04 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	6a1a      	ldr	r2, [r3, #32]
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d007      	beq.n	8007e6c <USB_HC_StartXfer+0x10c>
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	2b02      	cmp	r3, #2
 8007e62:	d003      	beq.n	8007e6c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	2204      	movs	r2, #4
 8007e68:	60da      	str	r2, [r3, #12]
 8007e6a:	e04b      	b.n	8007f04 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	2203      	movs	r2, #3
 8007e70:	60da      	str	r2, [r3, #12]
 8007e72:	e047      	b.n	8007f04 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007e74:	79fb      	ldrb	r3, [r7, #7]
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d10d      	bne.n	8007e96 <USB_HC_StartXfer+0x136>
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	6a1b      	ldr	r3, [r3, #32]
 8007e7e:	68ba      	ldr	r2, [r7, #8]
 8007e80:	8a92      	ldrh	r2, [r2, #20]
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d907      	bls.n	8007e96 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007e86:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007e88:	68ba      	ldr	r2, [r7, #8]
 8007e8a:	8a92      	ldrh	r2, [r2, #20]
 8007e8c:	fb03 f202 	mul.w	r2, r3, r2
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	61da      	str	r2, [r3, #28]
 8007e94:	e036      	b.n	8007f04 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	6a1a      	ldr	r2, [r3, #32]
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	61da      	str	r2, [r3, #28]
 8007e9e:	e031      	b.n	8007f04 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	6a1b      	ldr	r3, [r3, #32]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d018      	beq.n	8007eda <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	6a1b      	ldr	r3, [r3, #32]
 8007eac:	68ba      	ldr	r2, [r7, #8]
 8007eae:	8a92      	ldrh	r2, [r2, #20]
 8007eb0:	4413      	add	r3, r2
 8007eb2:	3b01      	subs	r3, #1
 8007eb4:	68ba      	ldr	r2, [r7, #8]
 8007eb6:	8a92      	ldrh	r2, [r2, #20]
 8007eb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ebc:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8007ebe:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007ec0:	8b7b      	ldrh	r3, [r7, #26]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d90b      	bls.n	8007ede <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8007ec6:	8b7b      	ldrh	r3, [r7, #26]
 8007ec8:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007eca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007ecc:	68ba      	ldr	r2, [r7, #8]
 8007ece:	8a92      	ldrh	r2, [r2, #20]
 8007ed0:	fb03 f202 	mul.w	r2, r3, r2
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	61da      	str	r2, [r3, #28]
 8007ed8:	e001      	b.n	8007ede <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8007eda:	2301      	movs	r3, #1
 8007edc:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	78db      	ldrb	r3, [r3, #3]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d00a      	beq.n	8007efc <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007ee6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007ee8:	68ba      	ldr	r2, [r7, #8]
 8007eea:	8a92      	ldrh	r2, [r2, #20]
 8007eec:	fb03 f202 	mul.w	r2, r3, r2
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	61da      	str	r2, [r3, #28]
 8007ef4:	e006      	b.n	8007f04 <USB_HC_StartXfer+0x1a4>
 8007ef6:	bf00      	nop
 8007ef8:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	6a1a      	ldr	r2, [r3, #32]
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	69db      	ldr	r3, [r3, #28]
 8007f08:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007f0c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007f0e:	04d9      	lsls	r1, r3, #19
 8007f10:	4ba3      	ldr	r3, [pc, #652]	@ (80081a0 <USB_HC_StartXfer+0x440>)
 8007f12:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007f14:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	7d9b      	ldrb	r3, [r3, #22]
 8007f1a:	075b      	lsls	r3, r3, #29
 8007f1c:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007f20:	69f9      	ldr	r1, [r7, #28]
 8007f22:	0148      	lsls	r0, r1, #5
 8007f24:	6a39      	ldr	r1, [r7, #32]
 8007f26:	4401      	add	r1, r0
 8007f28:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007f2c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007f2e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007f30:	79fb      	ldrb	r3, [r7, #7]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d009      	beq.n	8007f4a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	6999      	ldr	r1, [r3, #24]
 8007f3a:	69fb      	ldr	r3, [r7, #28]
 8007f3c:	015a      	lsls	r2, r3, #5
 8007f3e:	6a3b      	ldr	r3, [r7, #32]
 8007f40:	4413      	add	r3, r2
 8007f42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f46:	460a      	mov	r2, r1
 8007f48:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007f4a:	6a3b      	ldr	r3, [r7, #32]
 8007f4c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	f003 0301 	and.w	r3, r3, #1
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	bf0c      	ite	eq
 8007f5a:	2301      	moveq	r3, #1
 8007f5c:	2300      	movne	r3, #0
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	015a      	lsls	r2, r3, #5
 8007f66:	6a3b      	ldr	r3, [r7, #32]
 8007f68:	4413      	add	r3, r2
 8007f6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	69fa      	ldr	r2, [r7, #28]
 8007f72:	0151      	lsls	r1, r2, #5
 8007f74:	6a3a      	ldr	r2, [r7, #32]
 8007f76:	440a      	add	r2, r1
 8007f78:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f7c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007f80:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	015a      	lsls	r2, r3, #5
 8007f86:	6a3b      	ldr	r3, [r7, #32]
 8007f88:	4413      	add	r3, r2
 8007f8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	7e7b      	ldrb	r3, [r7, #25]
 8007f92:	075b      	lsls	r3, r3, #29
 8007f94:	69f9      	ldr	r1, [r7, #28]
 8007f96:	0148      	lsls	r0, r1, #5
 8007f98:	6a39      	ldr	r1, [r7, #32]
 8007f9a:	4401      	add	r1, r0
 8007f9c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	799b      	ldrb	r3, [r3, #6]
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	f040 80c3 	bne.w	8008134 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	7c5b      	ldrb	r3, [r3, #17]
 8007fb2:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007fb4:	68ba      	ldr	r2, [r7, #8]
 8007fb6:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	69fa      	ldr	r2, [r7, #28]
 8007fbc:	0151      	lsls	r1, r2, #5
 8007fbe:	6a3a      	ldr	r2, [r7, #32]
 8007fc0:	440a      	add	r2, r1
 8007fc2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007fc6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007fca:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	015a      	lsls	r2, r3, #5
 8007fd0:	6a3b      	ldr	r3, [r7, #32]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	69fa      	ldr	r2, [r7, #28]
 8007fdc:	0151      	lsls	r1, r2, #5
 8007fde:	6a3a      	ldr	r2, [r7, #32]
 8007fe0:	440a      	add	r2, r1
 8007fe2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007fe6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007fea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	79db      	ldrb	r3, [r3, #7]
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d123      	bne.n	800803c <USB_HC_StartXfer+0x2dc>
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	78db      	ldrb	r3, [r3, #3]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d11f      	bne.n	800803c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	015a      	lsls	r2, r3, #5
 8008000:	6a3b      	ldr	r3, [r7, #32]
 8008002:	4413      	add	r3, r2
 8008004:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	69fa      	ldr	r2, [r7, #28]
 800800c:	0151      	lsls	r1, r2, #5
 800800e:	6a3a      	ldr	r2, [r7, #32]
 8008010:	440a      	add	r2, r1
 8008012:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008016:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800801a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	015a      	lsls	r2, r3, #5
 8008020:	6a3b      	ldr	r3, [r7, #32]
 8008022:	4413      	add	r3, r2
 8008024:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	69fa      	ldr	r2, [r7, #28]
 800802c:	0151      	lsls	r1, r2, #5
 800802e:	6a3a      	ldr	r2, [r7, #32]
 8008030:	440a      	add	r2, r1
 8008032:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008036:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800803a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	7c9b      	ldrb	r3, [r3, #18]
 8008040:	2b01      	cmp	r3, #1
 8008042:	d003      	beq.n	800804c <USB_HC_StartXfer+0x2ec>
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	7c9b      	ldrb	r3, [r3, #18]
 8008048:	2b03      	cmp	r3, #3
 800804a:	d117      	bne.n	800807c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008050:	2b01      	cmp	r3, #1
 8008052:	d113      	bne.n	800807c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	78db      	ldrb	r3, [r3, #3]
 8008058:	2b01      	cmp	r3, #1
 800805a:	d10f      	bne.n	800807c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800805c:	69fb      	ldr	r3, [r7, #28]
 800805e:	015a      	lsls	r2, r3, #5
 8008060:	6a3b      	ldr	r3, [r7, #32]
 8008062:	4413      	add	r3, r2
 8008064:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	69fa      	ldr	r2, [r7, #28]
 800806c:	0151      	lsls	r1, r2, #5
 800806e:	6a3a      	ldr	r2, [r7, #32]
 8008070:	440a      	add	r2, r1
 8008072:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008076:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800807a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	7c9b      	ldrb	r3, [r3, #18]
 8008080:	2b01      	cmp	r3, #1
 8008082:	d162      	bne.n	800814a <USB_HC_StartXfer+0x3ea>
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	78db      	ldrb	r3, [r3, #3]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d15e      	bne.n	800814a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	3b01      	subs	r3, #1
 8008092:	2b03      	cmp	r3, #3
 8008094:	d858      	bhi.n	8008148 <USB_HC_StartXfer+0x3e8>
 8008096:	a201      	add	r2, pc, #4	@ (adr r2, 800809c <USB_HC_StartXfer+0x33c>)
 8008098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800809c:	080080ad 	.word	0x080080ad
 80080a0:	080080cf 	.word	0x080080cf
 80080a4:	080080f1 	.word	0x080080f1
 80080a8:	08008113 	.word	0x08008113
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80080ac:	69fb      	ldr	r3, [r7, #28]
 80080ae:	015a      	lsls	r2, r3, #5
 80080b0:	6a3b      	ldr	r3, [r7, #32]
 80080b2:	4413      	add	r3, r2
 80080b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	69fa      	ldr	r2, [r7, #28]
 80080bc:	0151      	lsls	r1, r2, #5
 80080be:	6a3a      	ldr	r2, [r7, #32]
 80080c0:	440a      	add	r2, r1
 80080c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080ca:	6053      	str	r3, [r2, #4]
          break;
 80080cc:	e03d      	b.n	800814a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	015a      	lsls	r2, r3, #5
 80080d2:	6a3b      	ldr	r3, [r7, #32]
 80080d4:	4413      	add	r3, r2
 80080d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	69fa      	ldr	r2, [r7, #28]
 80080de:	0151      	lsls	r1, r2, #5
 80080e0:	6a3a      	ldr	r2, [r7, #32]
 80080e2:	440a      	add	r2, r1
 80080e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080e8:	f043 030e 	orr.w	r3, r3, #14
 80080ec:	6053      	str	r3, [r2, #4]
          break;
 80080ee:	e02c      	b.n	800814a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	015a      	lsls	r2, r3, #5
 80080f4:	6a3b      	ldr	r3, [r7, #32]
 80080f6:	4413      	add	r3, r2
 80080f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	69fa      	ldr	r2, [r7, #28]
 8008100:	0151      	lsls	r1, r2, #5
 8008102:	6a3a      	ldr	r2, [r7, #32]
 8008104:	440a      	add	r2, r1
 8008106:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800810a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800810e:	6053      	str	r3, [r2, #4]
          break;
 8008110:	e01b      	b.n	800814a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8008112:	69fb      	ldr	r3, [r7, #28]
 8008114:	015a      	lsls	r2, r3, #5
 8008116:	6a3b      	ldr	r3, [r7, #32]
 8008118:	4413      	add	r3, r2
 800811a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	69fa      	ldr	r2, [r7, #28]
 8008122:	0151      	lsls	r1, r2, #5
 8008124:	6a3a      	ldr	r2, [r7, #32]
 8008126:	440a      	add	r2, r1
 8008128:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800812c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008130:	6053      	str	r3, [r2, #4]
          break;
 8008132:	e00a      	b.n	800814a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008134:	69fb      	ldr	r3, [r7, #28]
 8008136:	015a      	lsls	r2, r3, #5
 8008138:	6a3b      	ldr	r3, [r7, #32]
 800813a:	4413      	add	r3, r2
 800813c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008140:	461a      	mov	r2, r3
 8008142:	2300      	movs	r3, #0
 8008144:	6053      	str	r3, [r2, #4]
 8008146:	e000      	b.n	800814a <USB_HC_StartXfer+0x3ea>
          break;
 8008148:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800814a:	69fb      	ldr	r3, [r7, #28]
 800814c:	015a      	lsls	r2, r3, #5
 800814e:	6a3b      	ldr	r3, [r7, #32]
 8008150:	4413      	add	r3, r2
 8008152:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008160:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	78db      	ldrb	r3, [r3, #3]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d004      	beq.n	8008174 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008170:	613b      	str	r3, [r7, #16]
 8008172:	e003      	b.n	800817c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800817a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008182:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008184:	69fb      	ldr	r3, [r7, #28]
 8008186:	015a      	lsls	r2, r3, #5
 8008188:	6a3b      	ldr	r3, [r7, #32]
 800818a:	4413      	add	r3, r2
 800818c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008190:	461a      	mov	r2, r3
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008196:	79fb      	ldrb	r3, [r7, #7]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d003      	beq.n	80081a4 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800819c:	2300      	movs	r3, #0
 800819e:	e055      	b.n	800824c <USB_HC_StartXfer+0x4ec>
 80081a0:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	78db      	ldrb	r3, [r3, #3]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d14e      	bne.n	800824a <USB_HC_StartXfer+0x4ea>
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	6a1b      	ldr	r3, [r3, #32]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d04a      	beq.n	800824a <USB_HC_StartXfer+0x4ea>
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	79db      	ldrb	r3, [r3, #7]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d146      	bne.n	800824a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	7c9b      	ldrb	r3, [r3, #18]
 80081c0:	2b03      	cmp	r3, #3
 80081c2:	d831      	bhi.n	8008228 <USB_HC_StartXfer+0x4c8>
 80081c4:	a201      	add	r2, pc, #4	@ (adr r2, 80081cc <USB_HC_StartXfer+0x46c>)
 80081c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ca:	bf00      	nop
 80081cc:	080081dd 	.word	0x080081dd
 80081d0:	08008201 	.word	0x08008201
 80081d4:	080081dd 	.word	0x080081dd
 80081d8:	08008201 	.word	0x08008201
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	6a1b      	ldr	r3, [r3, #32]
 80081e0:	3303      	adds	r3, #3
 80081e2:	089b      	lsrs	r3, r3, #2
 80081e4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80081e6:	8afa      	ldrh	r2, [r7, #22]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d91c      	bls.n	800822c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	699b      	ldr	r3, [r3, #24]
 80081f6:	f043 0220 	orr.w	r2, r3, #32
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	619a      	str	r2, [r3, #24]
        }
        break;
 80081fe:	e015      	b.n	800822c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	6a1b      	ldr	r3, [r3, #32]
 8008204:	3303      	adds	r3, #3
 8008206:	089b      	lsrs	r3, r3, #2
 8008208:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800820a:	8afa      	ldrh	r2, [r7, #22]
 800820c:	6a3b      	ldr	r3, [r7, #32]
 800820e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008212:	691b      	ldr	r3, [r3, #16]
 8008214:	b29b      	uxth	r3, r3
 8008216:	429a      	cmp	r2, r3
 8008218:	d90a      	bls.n	8008230 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	699b      	ldr	r3, [r3, #24]
 800821e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	619a      	str	r2, [r3, #24]
        }
        break;
 8008226:	e003      	b.n	8008230 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8008228:	bf00      	nop
 800822a:	e002      	b.n	8008232 <USB_HC_StartXfer+0x4d2>
        break;
 800822c:	bf00      	nop
 800822e:	e000      	b.n	8008232 <USB_HC_StartXfer+0x4d2>
        break;
 8008230:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	6999      	ldr	r1, [r3, #24]
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	785a      	ldrb	r2, [r3, #1]
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	6a1b      	ldr	r3, [r3, #32]
 800823e:	b29b      	uxth	r3, r3
 8008240:	2000      	movs	r0, #0
 8008242:	9000      	str	r0, [sp, #0]
 8008244:	68f8      	ldr	r0, [r7, #12]
 8008246:	f7ff f9f3 	bl	8007630 <USB_WritePacket>
  }

  return HAL_OK;
 800824a:	2300      	movs	r3, #0
}
 800824c:	4618      	mov	r0, r3
 800824e:	3728      	adds	r7, #40	@ 0x28
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008254:	b480      	push	{r7}
 8008256:	b085      	sub	sp, #20
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008266:	695b      	ldr	r3, [r3, #20]
 8008268:	b29b      	uxth	r3, r3
}
 800826a:	4618      	mov	r0, r3
 800826c:	3714      	adds	r7, #20
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr

08008276 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008276:	b480      	push	{r7}
 8008278:	b089      	sub	sp, #36	@ 0x24
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
 800827e:	460b      	mov	r3, r1
 8008280:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008286:	78fb      	ldrb	r3, [r7, #3]
 8008288:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800828a:	2300      	movs	r3, #0
 800828c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800828e:	69bb      	ldr	r3, [r7, #24]
 8008290:	015a      	lsls	r2, r3, #5
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	4413      	add	r3, r2
 8008296:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	0c9b      	lsrs	r3, r3, #18
 800829e:	f003 0303 	and.w	r3, r3, #3
 80082a2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80082a4:	69bb      	ldr	r3, [r7, #24]
 80082a6:	015a      	lsls	r2, r3, #5
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	4413      	add	r3, r2
 80082ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	0fdb      	lsrs	r3, r3, #31
 80082b4:	f003 0301 	and.w	r3, r3, #1
 80082b8:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80082ba:	69bb      	ldr	r3, [r7, #24]
 80082bc:	015a      	lsls	r2, r3, #5
 80082be:	69fb      	ldr	r3, [r7, #28]
 80082c0:	4413      	add	r3, r2
 80082c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	0fdb      	lsrs	r3, r3, #31
 80082ca:	f003 0301 	and.w	r3, r3, #1
 80082ce:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	f003 0320 	and.w	r3, r3, #32
 80082d8:	2b20      	cmp	r3, #32
 80082da:	d10d      	bne.n	80082f8 <USB_HC_Halt+0x82>
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d10a      	bne.n	80082f8 <USB_HC_Halt+0x82>
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d005      	beq.n	80082f4 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d002      	beq.n	80082f4 <USB_HC_Halt+0x7e>
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	2b03      	cmp	r3, #3
 80082f2:	d101      	bne.n	80082f8 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80082f4:	2300      	movs	r3, #0
 80082f6:	e0d8      	b.n	80084aa <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d002      	beq.n	8008304 <USB_HC_Halt+0x8e>
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	2b02      	cmp	r3, #2
 8008302:	d173      	bne.n	80083ec <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008304:	69bb      	ldr	r3, [r7, #24]
 8008306:	015a      	lsls	r2, r3, #5
 8008308:	69fb      	ldr	r3, [r7, #28]
 800830a:	4413      	add	r3, r2
 800830c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	69ba      	ldr	r2, [r7, #24]
 8008314:	0151      	lsls	r1, r2, #5
 8008316:	69fa      	ldr	r2, [r7, #28]
 8008318:	440a      	add	r2, r1
 800831a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800831e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008322:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	f003 0320 	and.w	r3, r3, #32
 800832c:	2b00      	cmp	r3, #0
 800832e:	d14a      	bne.n	80083c6 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008334:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008338:	2b00      	cmp	r3, #0
 800833a:	d133      	bne.n	80083a4 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800833c:	69bb      	ldr	r3, [r7, #24]
 800833e:	015a      	lsls	r2, r3, #5
 8008340:	69fb      	ldr	r3, [r7, #28]
 8008342:	4413      	add	r3, r2
 8008344:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	69ba      	ldr	r2, [r7, #24]
 800834c:	0151      	lsls	r1, r2, #5
 800834e:	69fa      	ldr	r2, [r7, #28]
 8008350:	440a      	add	r2, r1
 8008352:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008356:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800835a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800835c:	69bb      	ldr	r3, [r7, #24]
 800835e:	015a      	lsls	r2, r3, #5
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	4413      	add	r3, r2
 8008364:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	69ba      	ldr	r2, [r7, #24]
 800836c:	0151      	lsls	r1, r2, #5
 800836e:	69fa      	ldr	r2, [r7, #28]
 8008370:	440a      	add	r2, r1
 8008372:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008376:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800837a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	3301      	adds	r3, #1
 8008380:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008388:	d82e      	bhi.n	80083e8 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800838a:	69bb      	ldr	r3, [r7, #24]
 800838c:	015a      	lsls	r2, r3, #5
 800838e:	69fb      	ldr	r3, [r7, #28]
 8008390:	4413      	add	r3, r2
 8008392:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800839c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80083a0:	d0ec      	beq.n	800837c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80083a2:	e081      	b.n	80084a8 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80083a4:	69bb      	ldr	r3, [r7, #24]
 80083a6:	015a      	lsls	r2, r3, #5
 80083a8:	69fb      	ldr	r3, [r7, #28]
 80083aa:	4413      	add	r3, r2
 80083ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	69ba      	ldr	r2, [r7, #24]
 80083b4:	0151      	lsls	r1, r2, #5
 80083b6:	69fa      	ldr	r2, [r7, #28]
 80083b8:	440a      	add	r2, r1
 80083ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80083be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80083c2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80083c4:	e070      	b.n	80084a8 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80083c6:	69bb      	ldr	r3, [r7, #24]
 80083c8:	015a      	lsls	r2, r3, #5
 80083ca:	69fb      	ldr	r3, [r7, #28]
 80083cc:	4413      	add	r3, r2
 80083ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	69ba      	ldr	r2, [r7, #24]
 80083d6:	0151      	lsls	r1, r2, #5
 80083d8:	69fa      	ldr	r2, [r7, #28]
 80083da:	440a      	add	r2, r1
 80083dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80083e0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80083e4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80083e6:	e05f      	b.n	80084a8 <USB_HC_Halt+0x232>
            break;
 80083e8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80083ea:	e05d      	b.n	80084a8 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80083ec:	69bb      	ldr	r3, [r7, #24]
 80083ee:	015a      	lsls	r2, r3, #5
 80083f0:	69fb      	ldr	r3, [r7, #28]
 80083f2:	4413      	add	r3, r2
 80083f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	69ba      	ldr	r2, [r7, #24]
 80083fc:	0151      	lsls	r1, r2, #5
 80083fe:	69fa      	ldr	r2, [r7, #28]
 8008400:	440a      	add	r2, r1
 8008402:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008406:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800840a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800840c:	69fb      	ldr	r3, [r7, #28]
 800840e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008412:	691b      	ldr	r3, [r3, #16]
 8008414:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008418:	2b00      	cmp	r3, #0
 800841a:	d133      	bne.n	8008484 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	015a      	lsls	r2, r3, #5
 8008420:	69fb      	ldr	r3, [r7, #28]
 8008422:	4413      	add	r3, r2
 8008424:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	69ba      	ldr	r2, [r7, #24]
 800842c:	0151      	lsls	r1, r2, #5
 800842e:	69fa      	ldr	r2, [r7, #28]
 8008430:	440a      	add	r2, r1
 8008432:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008436:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800843a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800843c:	69bb      	ldr	r3, [r7, #24]
 800843e:	015a      	lsls	r2, r3, #5
 8008440:	69fb      	ldr	r3, [r7, #28]
 8008442:	4413      	add	r3, r2
 8008444:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	69ba      	ldr	r2, [r7, #24]
 800844c:	0151      	lsls	r1, r2, #5
 800844e:	69fa      	ldr	r2, [r7, #28]
 8008450:	440a      	add	r2, r1
 8008452:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008456:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800845a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	3301      	adds	r3, #1
 8008460:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008468:	d81d      	bhi.n	80084a6 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800846a:	69bb      	ldr	r3, [r7, #24]
 800846c:	015a      	lsls	r2, r3, #5
 800846e:	69fb      	ldr	r3, [r7, #28]
 8008470:	4413      	add	r3, r2
 8008472:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800847c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008480:	d0ec      	beq.n	800845c <USB_HC_Halt+0x1e6>
 8008482:	e011      	b.n	80084a8 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	015a      	lsls	r2, r3, #5
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	4413      	add	r3, r2
 800848c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	69ba      	ldr	r2, [r7, #24]
 8008494:	0151      	lsls	r1, r2, #5
 8008496:	69fa      	ldr	r2, [r7, #28]
 8008498:	440a      	add	r2, r1
 800849a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800849e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80084a2:	6013      	str	r3, [r2, #0]
 80084a4:	e000      	b.n	80084a8 <USB_HC_Halt+0x232>
          break;
 80084a6:	bf00      	nop
    }
  }

  return HAL_OK;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3724      	adds	r7, #36	@ 0x24
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr
	...

080084b8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b087      	sub	sp, #28
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	460b      	mov	r3, r1
 80084c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80084c8:	78fb      	ldrb	r3, [r7, #3]
 80084ca:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80084cc:	2301      	movs	r3, #1
 80084ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	04da      	lsls	r2, r3, #19
 80084d4:	4b15      	ldr	r3, [pc, #84]	@ (800852c <USB_DoPing+0x74>)
 80084d6:	4013      	ands	r3, r2
 80084d8:	693a      	ldr	r2, [r7, #16]
 80084da:	0151      	lsls	r1, r2, #5
 80084dc:	697a      	ldr	r2, [r7, #20]
 80084de:	440a      	add	r2, r1
 80084e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80084e4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80084e8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	015a      	lsls	r2, r3, #5
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	4413      	add	r3, r2
 80084f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008500:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008508:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	015a      	lsls	r2, r3, #5
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	4413      	add	r3, r2
 8008512:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008516:	461a      	mov	r2, r3
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800851c:	2300      	movs	r3, #0
}
 800851e:	4618      	mov	r0, r3
 8008520:	371c      	adds	r7, #28
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr
 800852a:	bf00      	nop
 800852c:	1ff80000 	.word	0x1ff80000

08008530 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b088      	sub	sp, #32
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008538:	2300      	movs	r3, #0
 800853a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008540:	2300      	movs	r3, #0
 8008542:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f7fe ffb6 	bl	80074b6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800854a:	2110      	movs	r1, #16
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f7ff f80f 	bl	8007570 <USB_FlushTxFifo>
 8008552:	4603      	mov	r3, r0
 8008554:	2b00      	cmp	r3, #0
 8008556:	d001      	beq.n	800855c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008558:	2301      	movs	r3, #1
 800855a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f7ff f839 	bl	80075d4 <USB_FlushRxFifo>
 8008562:	4603      	mov	r3, r0
 8008564:	2b00      	cmp	r3, #0
 8008566:	d001      	beq.n	800856c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008568:	2301      	movs	r3, #1
 800856a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800856c:	2300      	movs	r3, #0
 800856e:	61bb      	str	r3, [r7, #24]
 8008570:	e01f      	b.n	80085b2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008572:	69bb      	ldr	r3, [r7, #24]
 8008574:	015a      	lsls	r2, r3, #5
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	4413      	add	r3, r2
 800857a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008588:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008590:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008598:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800859a:	69bb      	ldr	r3, [r7, #24]
 800859c:	015a      	lsls	r2, r3, #5
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	4413      	add	r3, r2
 80085a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085a6:	461a      	mov	r2, r3
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80085ac:	69bb      	ldr	r3, [r7, #24]
 80085ae:	3301      	adds	r3, #1
 80085b0:	61bb      	str	r3, [r7, #24]
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	2b0f      	cmp	r3, #15
 80085b6:	d9dc      	bls.n	8008572 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80085b8:	2300      	movs	r3, #0
 80085ba:	61bb      	str	r3, [r7, #24]
 80085bc:	e034      	b.n	8008628 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80085be:	69bb      	ldr	r3, [r7, #24]
 80085c0:	015a      	lsls	r2, r3, #5
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	4413      	add	r3, r2
 80085c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80085d4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80085dc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80085e4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	015a      	lsls	r2, r3, #5
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	4413      	add	r3, r2
 80085ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085f2:	461a      	mov	r2, r3
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	3301      	adds	r3, #1
 80085fc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008604:	d80c      	bhi.n	8008620 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	015a      	lsls	r2, r3, #5
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	4413      	add	r3, r2
 800860e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008618:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800861c:	d0ec      	beq.n	80085f8 <USB_StopHost+0xc8>
 800861e:	e000      	b.n	8008622 <USB_StopHost+0xf2>
        break;
 8008620:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	3301      	adds	r3, #1
 8008626:	61bb      	str	r3, [r7, #24]
 8008628:	69bb      	ldr	r3, [r7, #24]
 800862a:	2b0f      	cmp	r3, #15
 800862c:	d9c7      	bls.n	80085be <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008634:	461a      	mov	r2, r3
 8008636:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800863a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008642:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f7fe ff25 	bl	8007494 <USB_EnableGlobalInt>

  return ret;
 800864a:	7ffb      	ldrb	r3, [r7, #31]
}
 800864c:	4618      	mov	r0, r3
 800864e:	3720      	adds	r7, #32
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008654:	b590      	push	{r4, r7, lr}
 8008656:	b089      	sub	sp, #36	@ 0x24
 8008658:	af04      	add	r7, sp, #16
 800865a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800865c:	2301      	movs	r3, #1
 800865e:	2202      	movs	r2, #2
 8008660:	2102      	movs	r1, #2
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 fc85 	bl	8008f72 <USBH_FindInterface>
 8008668:	4603      	mov	r3, r0
 800866a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800866c:	7bfb      	ldrb	r3, [r7, #15]
 800866e:	2bff      	cmp	r3, #255	@ 0xff
 8008670:	d002      	beq.n	8008678 <USBH_CDC_InterfaceInit+0x24>
 8008672:	7bfb      	ldrb	r3, [r7, #15]
 8008674:	2b01      	cmp	r3, #1
 8008676:	d901      	bls.n	800867c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008678:	2302      	movs	r3, #2
 800867a:	e13d      	b.n	80088f8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800867c:	7bfb      	ldrb	r3, [r7, #15]
 800867e:	4619      	mov	r1, r3
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 fc5a 	bl	8008f3a <USBH_SelectInterface>
 8008686:	4603      	mov	r3, r0
 8008688:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800868a:	7bbb      	ldrb	r3, [r7, #14]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d001      	beq.n	8008694 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008690:	2302      	movs	r3, #2
 8008692:	e131      	b.n	80088f8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800869a:	2050      	movs	r0, #80	@ 0x50
 800869c:	f001 fd44 	bl	800a128 <malloc>
 80086a0:	4603      	mov	r3, r0
 80086a2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80086aa:	69db      	ldr	r3, [r3, #28]
 80086ac:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d101      	bne.n	80086b8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80086b4:	2302      	movs	r3, #2
 80086b6:	e11f      	b.n	80088f8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80086b8:	2250      	movs	r2, #80	@ 0x50
 80086ba:	2100      	movs	r1, #0
 80086bc:	68b8      	ldr	r0, [r7, #8]
 80086be:	f001 fdf1 	bl	800a2a4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80086c2:	7bfb      	ldrb	r3, [r7, #15]
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	211a      	movs	r1, #26
 80086c8:	fb01 f303 	mul.w	r3, r1, r3
 80086cc:	4413      	add	r3, r2
 80086ce:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	b25b      	sxtb	r3, r3
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	da15      	bge.n	8008706 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80086da:	7bfb      	ldrb	r3, [r7, #15]
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	211a      	movs	r1, #26
 80086e0:	fb01 f303 	mul.w	r3, r1, r3
 80086e4:	4413      	add	r3, r2
 80086e6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80086ea:	781a      	ldrb	r2, [r3, #0]
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80086f0:	7bfb      	ldrb	r3, [r7, #15]
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	211a      	movs	r1, #26
 80086f6:	fb01 f303 	mul.w	r3, r1, r3
 80086fa:	4413      	add	r3, r2
 80086fc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008700:	881a      	ldrh	r2, [r3, #0]
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	785b      	ldrb	r3, [r3, #1]
 800870a:	4619      	mov	r1, r3
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 ffba 	bl	8009686 <USBH_AllocPipe>
 8008712:	4603      	mov	r3, r0
 8008714:	461a      	mov	r2, r3
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	7819      	ldrb	r1, [r3, #0]
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	7858      	ldrb	r0, [r3, #1]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800872e:	68ba      	ldr	r2, [r7, #8]
 8008730:	8952      	ldrh	r2, [r2, #10]
 8008732:	9202      	str	r2, [sp, #8]
 8008734:	2203      	movs	r2, #3
 8008736:	9201      	str	r2, [sp, #4]
 8008738:	9300      	str	r3, [sp, #0]
 800873a:	4623      	mov	r3, r4
 800873c:	4602      	mov	r2, r0
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 ff72 	bl	8009628 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	2200      	movs	r2, #0
 800874a:	4619      	mov	r1, r3
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f001 fa35 	bl	8009bbc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008752:	2300      	movs	r3, #0
 8008754:	2200      	movs	r2, #0
 8008756:	210a      	movs	r1, #10
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 fc0a 	bl	8008f72 <USBH_FindInterface>
 800875e:	4603      	mov	r3, r0
 8008760:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008762:	7bfb      	ldrb	r3, [r7, #15]
 8008764:	2bff      	cmp	r3, #255	@ 0xff
 8008766:	d002      	beq.n	800876e <USBH_CDC_InterfaceInit+0x11a>
 8008768:	7bfb      	ldrb	r3, [r7, #15]
 800876a:	2b01      	cmp	r3, #1
 800876c:	d901      	bls.n	8008772 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800876e:	2302      	movs	r3, #2
 8008770:	e0c2      	b.n	80088f8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008772:	7bfb      	ldrb	r3, [r7, #15]
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	211a      	movs	r1, #26
 8008778:	fb01 f303 	mul.w	r3, r1, r3
 800877c:	4413      	add	r3, r2
 800877e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	b25b      	sxtb	r3, r3
 8008786:	2b00      	cmp	r3, #0
 8008788:	da16      	bge.n	80087b8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800878a:	7bfb      	ldrb	r3, [r7, #15]
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	211a      	movs	r1, #26
 8008790:	fb01 f303 	mul.w	r3, r1, r3
 8008794:	4413      	add	r3, r2
 8008796:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800879a:	781a      	ldrb	r2, [r3, #0]
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80087a0:	7bfb      	ldrb	r3, [r7, #15]
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	211a      	movs	r1, #26
 80087a6:	fb01 f303 	mul.w	r3, r1, r3
 80087aa:	4413      	add	r3, r2
 80087ac:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80087b0:	881a      	ldrh	r2, [r3, #0]
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	835a      	strh	r2, [r3, #26]
 80087b6:	e015      	b.n	80087e4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80087b8:	7bfb      	ldrb	r3, [r7, #15]
 80087ba:	687a      	ldr	r2, [r7, #4]
 80087bc:	211a      	movs	r1, #26
 80087be:	fb01 f303 	mul.w	r3, r1, r3
 80087c2:	4413      	add	r3, r2
 80087c4:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80087c8:	781a      	ldrb	r2, [r3, #0]
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80087ce:	7bfb      	ldrb	r3, [r7, #15]
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	211a      	movs	r1, #26
 80087d4:	fb01 f303 	mul.w	r3, r1, r3
 80087d8:	4413      	add	r3, r2
 80087da:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80087de:	881a      	ldrh	r2, [r3, #0]
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80087e4:	7bfb      	ldrb	r3, [r7, #15]
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	211a      	movs	r1, #26
 80087ea:	fb01 f303 	mul.w	r3, r1, r3
 80087ee:	4413      	add	r3, r2
 80087f0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	b25b      	sxtb	r3, r3
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	da16      	bge.n	800882a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80087fc:	7bfb      	ldrb	r3, [r7, #15]
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	211a      	movs	r1, #26
 8008802:	fb01 f303 	mul.w	r3, r1, r3
 8008806:	4413      	add	r3, r2
 8008808:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800880c:	781a      	ldrb	r2, [r3, #0]
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008812:	7bfb      	ldrb	r3, [r7, #15]
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	211a      	movs	r1, #26
 8008818:	fb01 f303 	mul.w	r3, r1, r3
 800881c:	4413      	add	r3, r2
 800881e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008822:	881a      	ldrh	r2, [r3, #0]
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	835a      	strh	r2, [r3, #26]
 8008828:	e015      	b.n	8008856 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800882a:	7bfb      	ldrb	r3, [r7, #15]
 800882c:	687a      	ldr	r2, [r7, #4]
 800882e:	211a      	movs	r1, #26
 8008830:	fb01 f303 	mul.w	r3, r1, r3
 8008834:	4413      	add	r3, r2
 8008836:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800883a:	781a      	ldrb	r2, [r3, #0]
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008840:	7bfb      	ldrb	r3, [r7, #15]
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	211a      	movs	r1, #26
 8008846:	fb01 f303 	mul.w	r3, r1, r3
 800884a:	4413      	add	r3, r2
 800884c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008850:	881a      	ldrh	r2, [r3, #0]
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	7b9b      	ldrb	r3, [r3, #14]
 800885a:	4619      	mov	r1, r3
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 ff12 	bl	8009686 <USBH_AllocPipe>
 8008862:	4603      	mov	r3, r0
 8008864:	461a      	mov	r2, r3
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	7bdb      	ldrb	r3, [r3, #15]
 800886e:	4619      	mov	r1, r3
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 ff08 	bl	8009686 <USBH_AllocPipe>
 8008876:	4603      	mov	r3, r0
 8008878:	461a      	mov	r2, r3
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	7b59      	ldrb	r1, [r3, #13]
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	7b98      	ldrb	r0, [r3, #14]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008892:	68ba      	ldr	r2, [r7, #8]
 8008894:	8b12      	ldrh	r2, [r2, #24]
 8008896:	9202      	str	r2, [sp, #8]
 8008898:	2202      	movs	r2, #2
 800889a:	9201      	str	r2, [sp, #4]
 800889c:	9300      	str	r3, [sp, #0]
 800889e:	4623      	mov	r3, r4
 80088a0:	4602      	mov	r2, r0
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 fec0 	bl	8009628 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	7b19      	ldrb	r1, [r3, #12]
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	7bd8      	ldrb	r0, [r3, #15]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80088bc:	68ba      	ldr	r2, [r7, #8]
 80088be:	8b52      	ldrh	r2, [r2, #26]
 80088c0:	9202      	str	r2, [sp, #8]
 80088c2:	2202      	movs	r2, #2
 80088c4:	9201      	str	r2, [sp, #4]
 80088c6:	9300      	str	r3, [sp, #0]
 80088c8:	4623      	mov	r3, r4
 80088ca:	4602      	mov	r2, r0
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 feab 	bl	8009628 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	2200      	movs	r2, #0
 80088d6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	7b5b      	ldrb	r3, [r3, #13]
 80088de:	2200      	movs	r2, #0
 80088e0:	4619      	mov	r1, r3
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f001 f96a 	bl	8009bbc <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	7b1b      	ldrb	r3, [r3, #12]
 80088ec:	2200      	movs	r2, #0
 80088ee:	4619      	mov	r1, r3
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f001 f963 	bl	8009bbc <USBH_LL_SetToggle>

  return USBH_OK;
 80088f6:	2300      	movs	r3, #0
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3714      	adds	r7, #20
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd90      	pop	{r4, r7, pc}

08008900 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800890e:	69db      	ldr	r3, [r3, #28]
 8008910:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d00e      	beq.n	8008938 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	4619      	mov	r1, r3
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 fea0 	bl	8009666 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	4619      	mov	r1, r3
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 fecb 	bl	80096c8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2200      	movs	r2, #0
 8008936:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	7b1b      	ldrb	r3, [r3, #12]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d00e      	beq.n	800895e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	7b1b      	ldrb	r3, [r3, #12]
 8008944:	4619      	mov	r1, r3
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 fe8d 	bl	8009666 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	7b1b      	ldrb	r3, [r3, #12]
 8008950:	4619      	mov	r1, r3
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 feb8 	bl	80096c8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2200      	movs	r2, #0
 800895c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	7b5b      	ldrb	r3, [r3, #13]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d00e      	beq.n	8008984 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	7b5b      	ldrb	r3, [r3, #13]
 800896a:	4619      	mov	r1, r3
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 fe7a 	bl	8009666 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	7b5b      	ldrb	r3, [r3, #13]
 8008976:	4619      	mov	r1, r3
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 fea5 	bl	80096c8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2200      	movs	r2, #0
 8008982:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800898a:	69db      	ldr	r3, [r3, #28]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d00b      	beq.n	80089a8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008996:	69db      	ldr	r3, [r3, #28]
 8008998:	4618      	mov	r0, r3
 800899a:	f001 fbcd 	bl	800a138 <free>
    phost->pActiveClass->pData = 0U;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80089a4:	2200      	movs	r2, #0
 80089a6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80089a8:	2300      	movs	r3, #0
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3710      	adds	r7, #16
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}

080089b2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b084      	sub	sp, #16
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80089c0:	69db      	ldr	r3, [r3, #28]
 80089c2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	3340      	adds	r3, #64	@ 0x40
 80089c8:	4619      	mov	r1, r3
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 f8b1 	bl	8008b32 <GetLineCoding>
 80089d0:	4603      	mov	r3, r0
 80089d2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80089d4:	7afb      	ldrb	r3, [r7, #11]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d105      	bne.n	80089e6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80089e0:	2102      	movs	r1, #2
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80089e6:	7afb      	ldrb	r3, [r7, #11]
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3710      	adds	r7, #16
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80089f8:	2301      	movs	r3, #1
 80089fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80089fc:	2300      	movs	r3, #0
 80089fe:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008a06:	69db      	ldr	r3, [r3, #28]
 8008a08:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008a10:	2b04      	cmp	r3, #4
 8008a12:	d877      	bhi.n	8008b04 <USBH_CDC_Process+0x114>
 8008a14:	a201      	add	r2, pc, #4	@ (adr r2, 8008a1c <USBH_CDC_Process+0x2c>)
 8008a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a1a:	bf00      	nop
 8008a1c:	08008a31 	.word	0x08008a31
 8008a20:	08008a37 	.word	0x08008a37
 8008a24:	08008a67 	.word	0x08008a67
 8008a28:	08008adb 	.word	0x08008adb
 8008a2c:	08008ae9 	.word	0x08008ae9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008a30:	2300      	movs	r3, #0
 8008a32:	73fb      	strb	r3, [r7, #15]
      break;
 8008a34:	e06d      	b.n	8008b12 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 f897 	bl	8008b70 <SetLineCoding>
 8008a42:	4603      	mov	r3, r0
 8008a44:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008a46:	7bbb      	ldrb	r3, [r7, #14]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d104      	bne.n	8008a56 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	2202      	movs	r2, #2
 8008a50:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008a54:	e058      	b.n	8008b08 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008a56:	7bbb      	ldrb	r3, [r7, #14]
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d055      	beq.n	8008b08 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	2204      	movs	r2, #4
 8008a60:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008a64:	e050      	b.n	8008b08 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	3340      	adds	r3, #64	@ 0x40
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 f860 	bl	8008b32 <GetLineCoding>
 8008a72:	4603      	mov	r3, r0
 8008a74:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008a76:	7bbb      	ldrb	r3, [r7, #14]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d126      	bne.n	8008aca <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a8e:	791b      	ldrb	r3, [r3, #4]
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d13b      	bne.n	8008b0c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a9e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d133      	bne.n	8008b0c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008aae:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d12b      	bne.n	8008b0c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008abc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d124      	bne.n	8008b0c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 f958 	bl	8008d78 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008ac8:	e020      	b.n	8008b0c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008aca:	7bbb      	ldrb	r3, [r7, #14]
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d01d      	beq.n	8008b0c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	2204      	movs	r2, #4
 8008ad4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008ad8:	e018      	b.n	8008b0c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 f867 	bl	8008bae <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 f8da 	bl	8008c9a <CDC_ProcessReception>
      break;
 8008ae6:	e014      	b.n	8008b12 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008ae8:	2100      	movs	r1, #0
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 fb27 	bl	800913e <USBH_ClrFeature>
 8008af0:	4603      	mov	r3, r0
 8008af2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008af4:	7bbb      	ldrb	r3, [r7, #14]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d10a      	bne.n	8008b10 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	2200      	movs	r2, #0
 8008afe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8008b02:	e005      	b.n	8008b10 <USBH_CDC_Process+0x120>

    default:
      break;
 8008b04:	bf00      	nop
 8008b06:	e004      	b.n	8008b12 <USBH_CDC_Process+0x122>
      break;
 8008b08:	bf00      	nop
 8008b0a:	e002      	b.n	8008b12 <USBH_CDC_Process+0x122>
      break;
 8008b0c:	bf00      	nop
 8008b0e:	e000      	b.n	8008b12 <USBH_CDC_Process+0x122>
      break;
 8008b10:	bf00      	nop

  }

  return status;
 8008b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3710      	adds	r7, #16
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b083      	sub	sp, #12
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008b24:	2300      	movs	r3, #0
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	370c      	adds	r7, #12
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr

08008b32 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b082      	sub	sp, #8
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
 8008b3a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	22a1      	movs	r2, #161	@ 0xa1
 8008b40:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2221      	movs	r2, #33	@ 0x21
 8008b46:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2207      	movs	r2, #7
 8008b58:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	2207      	movs	r2, #7
 8008b5e:	4619      	mov	r1, r3
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 fb10 	bl	8009186 <USBH_CtlReq>
 8008b66:	4603      	mov	r3, r0
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3708      	adds	r7, #8
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b082      	sub	sp, #8
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2221      	movs	r2, #33	@ 0x21
 8008b7e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2220      	movs	r2, #32
 8008b84:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2207      	movs	r2, #7
 8008b96:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	2207      	movs	r2, #7
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 faf1 	bl	8009186 <USBH_CtlReq>
 8008ba4:	4603      	mov	r3, r0
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3708      	adds	r7, #8
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}

08008bae <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008bae:	b580      	push	{r7, lr}
 8008bb0:	b086      	sub	sp, #24
 8008bb2:	af02      	add	r7, sp, #8
 8008bb4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008bbc:	69db      	ldr	r3, [r3, #28]
 8008bbe:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	d002      	beq.n	8008bd4 <CDC_ProcessTransmission+0x26>
 8008bce:	2b02      	cmp	r3, #2
 8008bd0:	d023      	beq.n	8008c1a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008bd2:	e05e      	b.n	8008c92 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bd8:	68fa      	ldr	r2, [r7, #12]
 8008bda:	8b12      	ldrh	r2, [r2, #24]
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d90b      	bls.n	8008bf8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	69d9      	ldr	r1, [r3, #28]
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	8b1a      	ldrh	r2, [r3, #24]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	7b5b      	ldrb	r3, [r3, #13]
 8008bec:	2001      	movs	r0, #1
 8008bee:	9000      	str	r0, [sp, #0]
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f000 fcd6 	bl	80095a2 <USBH_BulkSendData>
 8008bf6:	e00b      	b.n	8008c10 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8008c00:	b29a      	uxth	r2, r3
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	7b5b      	ldrb	r3, [r3, #13]
 8008c06:	2001      	movs	r0, #1
 8008c08:	9000      	str	r0, [sp, #0]
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 fcc9 	bl	80095a2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2202      	movs	r2, #2
 8008c14:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008c18:	e03b      	b.n	8008c92 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	7b5b      	ldrb	r3, [r3, #13]
 8008c1e:	4619      	mov	r1, r3
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 ffa1 	bl	8009b68 <USBH_LL_GetURBState>
 8008c26:	4603      	mov	r3, r0
 8008c28:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008c2a:	7afb      	ldrb	r3, [r7, #11]
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d128      	bne.n	8008c82 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c34:	68fa      	ldr	r2, [r7, #12]
 8008c36:	8b12      	ldrh	r2, [r2, #24]
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d90e      	bls.n	8008c5a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c40:	68fa      	ldr	r2, [r7, #12]
 8008c42:	8b12      	ldrh	r2, [r2, #24]
 8008c44:	1a9a      	subs	r2, r3, r2
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	69db      	ldr	r3, [r3, #28]
 8008c4e:	68fa      	ldr	r2, [r7, #12]
 8008c50:	8b12      	ldrh	r2, [r2, #24]
 8008c52:	441a      	add	r2, r3
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	61da      	str	r2, [r3, #28]
 8008c58:	e002      	b.n	8008c60 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d004      	beq.n	8008c72 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008c70:	e00e      	b.n	8008c90 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	2200      	movs	r2, #0
 8008c76:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 f868 	bl	8008d50 <USBH_CDC_TransmitCallback>
      break;
 8008c80:	e006      	b.n	8008c90 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008c82:	7afb      	ldrb	r3, [r7, #11]
 8008c84:	2b02      	cmp	r3, #2
 8008c86:	d103      	bne.n	8008c90 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008c90:	bf00      	nop
  }
}
 8008c92:	bf00      	nop
 8008c94:	3710      	adds	r7, #16
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}

08008c9a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b086      	sub	sp, #24
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008ca8:	69db      	ldr	r3, [r3, #28]
 8008caa:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008cac:	2300      	movs	r3, #0
 8008cae:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8008cb6:	2b03      	cmp	r3, #3
 8008cb8:	d002      	beq.n	8008cc0 <CDC_ProcessReception+0x26>
 8008cba:	2b04      	cmp	r3, #4
 8008cbc:	d00e      	beq.n	8008cdc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008cbe:	e043      	b.n	8008d48 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	6a19      	ldr	r1, [r3, #32]
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	8b5a      	ldrh	r2, [r3, #26]
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	7b1b      	ldrb	r3, [r3, #12]
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 fc8d 	bl	80095ec <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	2204      	movs	r2, #4
 8008cd6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008cda:	e035      	b.n	8008d48 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	7b1b      	ldrb	r3, [r3, #12]
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 ff40 	bl	8009b68 <USBH_LL_GetURBState>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008cec:	7cfb      	ldrb	r3, [r7, #19]
 8008cee:	2b01      	cmp	r3, #1
 8008cf0:	d129      	bne.n	8008d46 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	7b1b      	ldrb	r3, [r3, #12]
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f000 fea3 	bl	8009a44 <USBH_LL_GetLastXferSize>
 8008cfe:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d04:	68fa      	ldr	r2, [r7, #12]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d016      	beq.n	8008d38 <CDC_ProcessReception+0x9e>
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	8b5b      	ldrh	r3, [r3, #26]
 8008d0e:	461a      	mov	r2, r3
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d110      	bne.n	8008d38 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	1ad2      	subs	r2, r2, r3
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	6a1a      	ldr	r2, [r3, #32]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	441a      	add	r2, r3
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	2203      	movs	r2, #3
 8008d32:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008d36:	e006      	b.n	8008d46 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 f80f 	bl	8008d64 <USBH_CDC_ReceiveCallback>
      break;
 8008d46:	bf00      	nop
  }
}
 8008d48:	bf00      	nop
 8008d4a:	3718      	adds	r7, #24
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008d58:	bf00      	nop
 8008d5a:	370c      	adds	r7, #12
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008d6c:	bf00      	nop
 8008d6e:	370c      	adds	r7, #12
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008d80:	bf00      	nop
 8008d82:	370c      	adds	r7, #12
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	60b9      	str	r1, [r7, #8]
 8008d96:	4613      	mov	r3, r2
 8008d98:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d101      	bne.n	8008da4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008da0:	2302      	movs	r3, #2
 8008da2:	e029      	b.n	8008df8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	79fa      	ldrb	r2, [r7, #7]
 8008da8:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2200      	movs	r2, #0
 8008db0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2200      	movs	r2, #0
 8008db8:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008dbc:	68f8      	ldr	r0, [r7, #12]
 8008dbe:	f000 f81f 	bl	8008e00 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d003      	beq.n	8008df0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	68ba      	ldr	r2, [r7, #8]
 8008dec:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008df0:	68f8      	ldr	r0, [r7, #12]
 8008df2:	f000 fdb5 	bl	8009960 <USBH_LL_Init>

  return USBH_OK;
 8008df6:	2300      	movs	r3, #0
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3710      	adds	r7, #16
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	60fb      	str	r3, [r7, #12]
 8008e10:	e009      	b.n	8008e26 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008e12:	687a      	ldr	r2, [r7, #4]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	33e0      	adds	r3, #224	@ 0xe0
 8008e18:	009b      	lsls	r3, r3, #2
 8008e1a:	4413      	add	r3, r2
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	3301      	adds	r3, #1
 8008e24:	60fb      	str	r3, [r7, #12]
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2b0f      	cmp	r3, #15
 8008e2a:	d9f2      	bls.n	8008e12 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	60fb      	str	r3, [r7, #12]
 8008e30:	e009      	b.n	8008e46 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	4413      	add	r3, r2
 8008e38:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	3301      	adds	r3, #1
 8008e44:	60fb      	str	r3, [r7, #12]
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e4c:	d3f1      	bcc.n	8008e32 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2200      	movs	r2, #0
 8008e52:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2200      	movs	r2, #0
 8008e58:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2200      	movs	r2, #0
 8008e64:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2240      	movs	r2, #64	@ 0x40
 8008e72:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2200      	movs	r2, #0
 8008e78:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2201      	movs	r2, #1
 8008e86:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2200      	movs	r2, #0
 8008e96:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	331c      	adds	r3, #28
 8008e9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008ea2:	2100      	movs	r1, #0
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f001 f9fd 	bl	800a2a4 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008eb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008eb4:	2100      	movs	r1, #0
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f001 f9f4 	bl	800a2a4 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008ec2:	2212      	movs	r2, #18
 8008ec4:	2100      	movs	r1, #0
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f001 f9ec 	bl	800a2a4 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008ed2:	223e      	movs	r2, #62	@ 0x3e
 8008ed4:	2100      	movs	r1, #0
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f001 f9e4 	bl	800a2a4 <memset>

  return USBH_OK;
 8008edc:	2300      	movs	r3, #0
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3710      	adds	r7, #16
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}

08008ee6 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008ee6:	b480      	push	{r7}
 8008ee8:	b085      	sub	sp, #20
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
 8008eee:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d016      	beq.n	8008f28 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d10e      	bne.n	8008f22 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008f0a:	1c59      	adds	r1, r3, #1
 8008f0c:	687a      	ldr	r2, [r7, #4]
 8008f0e:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	33de      	adds	r3, #222	@ 0xde
 8008f16:	6839      	ldr	r1, [r7, #0]
 8008f18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	73fb      	strb	r3, [r7, #15]
 8008f20:	e004      	b.n	8008f2c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008f22:	2302      	movs	r3, #2
 8008f24:	73fb      	strb	r3, [r7, #15]
 8008f26:	e001      	b.n	8008f2c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008f28:	2302      	movs	r3, #2
 8008f2a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3714      	adds	r7, #20
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr

08008f3a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008f3a:	b480      	push	{r7}
 8008f3c:	b085      	sub	sp, #20
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
 8008f42:	460b      	mov	r3, r1
 8008f44:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008f46:	2300      	movs	r3, #0
 8008f48:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8008f50:	78fa      	ldrb	r2, [r7, #3]
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d204      	bcs.n	8008f60 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	78fa      	ldrb	r2, [r7, #3]
 8008f5a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8008f5e:	e001      	b.n	8008f64 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008f60:	2302      	movs	r3, #2
 8008f62:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3714      	adds	r7, #20
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f70:	4770      	bx	lr

08008f72 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008f72:	b480      	push	{r7}
 8008f74:	b087      	sub	sp, #28
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
 8008f7a:	4608      	mov	r0, r1
 8008f7c:	4611      	mov	r1, r2
 8008f7e:	461a      	mov	r2, r3
 8008f80:	4603      	mov	r3, r0
 8008f82:	70fb      	strb	r3, [r7, #3]
 8008f84:	460b      	mov	r3, r1
 8008f86:	70bb      	strb	r3, [r7, #2]
 8008f88:	4613      	mov	r3, r2
 8008f8a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008f90:	2300      	movs	r3, #0
 8008f92:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008f9a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008f9c:	e025      	b.n	8008fea <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008f9e:	7dfb      	ldrb	r3, [r7, #23]
 8008fa0:	221a      	movs	r2, #26
 8008fa2:	fb02 f303 	mul.w	r3, r2, r3
 8008fa6:	3308      	adds	r3, #8
 8008fa8:	68fa      	ldr	r2, [r7, #12]
 8008faa:	4413      	add	r3, r2
 8008fac:	3302      	adds	r3, #2
 8008fae:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	795b      	ldrb	r3, [r3, #5]
 8008fb4:	78fa      	ldrb	r2, [r7, #3]
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d002      	beq.n	8008fc0 <USBH_FindInterface+0x4e>
 8008fba:	78fb      	ldrb	r3, [r7, #3]
 8008fbc:	2bff      	cmp	r3, #255	@ 0xff
 8008fbe:	d111      	bne.n	8008fe4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008fc4:	78ba      	ldrb	r2, [r7, #2]
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d002      	beq.n	8008fd0 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008fca:	78bb      	ldrb	r3, [r7, #2]
 8008fcc:	2bff      	cmp	r3, #255	@ 0xff
 8008fce:	d109      	bne.n	8008fe4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008fd4:	787a      	ldrb	r2, [r7, #1]
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d002      	beq.n	8008fe0 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008fda:	787b      	ldrb	r3, [r7, #1]
 8008fdc:	2bff      	cmp	r3, #255	@ 0xff
 8008fde:	d101      	bne.n	8008fe4 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008fe0:	7dfb      	ldrb	r3, [r7, #23]
 8008fe2:	e006      	b.n	8008ff2 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008fe4:	7dfb      	ldrb	r3, [r7, #23]
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008fea:	7dfb      	ldrb	r3, [r7, #23]
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d9d6      	bls.n	8008f9e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008ff0:	23ff      	movs	r3, #255	@ 0xff
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	371c      	adds	r7, #28
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr

08008ffe <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8008ffe:	b580      	push	{r7, lr}
 8009000:	b082      	sub	sp, #8
 8009002:	af00      	add	r7, sp, #0
 8009004:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 fce6 	bl	80099d8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800900c:	2101      	movs	r1, #1
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 fdbd 	bl	8009b8e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009014:	2300      	movs	r3, #0
}
 8009016:	4618      	mov	r0, r3
 8009018:	3708      	adds	r7, #8
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}

0800901e <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800901e:	b480      	push	{r7}
 8009020:	b083      	sub	sp, #12
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
 8009026:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	683a      	ldr	r2, [r7, #0]
 800902c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8009030:	bf00      	nop
 8009032:	370c      	adds	r7, #12
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b082      	sub	sp, #8
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800904a:	1c5a      	adds	r2, r3, #1
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 f804 	bl	8009060 <USBH_HandleSof>
}
 8009058:	bf00      	nop
 800905a:	3708      	adds	r7, #8
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b082      	sub	sp, #8
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	b2db      	uxtb	r3, r3
 800906e:	2b0b      	cmp	r3, #11
 8009070:	d10a      	bne.n	8009088 <USBH_HandleSof+0x28>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009078:	2b00      	cmp	r3, #0
 800907a:	d005      	beq.n	8009088 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009082:	699b      	ldr	r3, [r3, #24]
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	4798      	blx	r3
  }
}
 8009088:	bf00      	nop
 800908a:	3708      	adds	r7, #8
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009090:	b480      	push	{r7}
 8009092:	b083      	sub	sp, #12
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2201      	movs	r2, #1
 800909c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80090a0:	bf00      	nop
}
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2200      	movs	r2, #0
 80090b8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80090bc:	bf00      	nop
}
 80090be:	370c      	adds	r7, #12
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr

080090c8 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b083      	sub	sp, #12
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2201      	movs	r2, #1
 80090d4:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2200      	movs	r2, #0
 80090dc:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80090e8:	2300      	movs	r3, #0
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	370c      	adds	r7, #12
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr

080090f6 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80090f6:	b580      	push	{r7, lr}
 80090f8:	b082      	sub	sp, #8
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2201      	movs	r2, #1
 8009102:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2200      	movs	r2, #0
 800910a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 fc79 	bl	8009a0e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	791b      	ldrb	r3, [r3, #4]
 8009120:	4619      	mov	r1, r3
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 fad0 	bl	80096c8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	795b      	ldrb	r3, [r3, #5]
 800912c:	4619      	mov	r1, r3
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 faca 	bl	80096c8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009134:	2300      	movs	r3, #0
}
 8009136:	4618      	mov	r0, r3
 8009138:	3708      	adds	r7, #8
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}

0800913e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800913e:	b580      	push	{r7, lr}
 8009140:	b082      	sub	sp, #8
 8009142:	af00      	add	r7, sp, #0
 8009144:	6078      	str	r0, [r7, #4]
 8009146:	460b      	mov	r3, r1
 8009148:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	789b      	ldrb	r3, [r3, #2]
 800914e:	2b01      	cmp	r3, #1
 8009150:	d10f      	bne.n	8009172 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2202      	movs	r2, #2
 8009156:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2201      	movs	r2, #1
 800915c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2200      	movs	r2, #0
 8009162:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009164:	78fb      	ldrb	r3, [r7, #3]
 8009166:	b29a      	uxth	r2, r3
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009172:	2200      	movs	r2, #0
 8009174:	2100      	movs	r1, #0
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 f805 	bl	8009186 <USBH_CtlReq>
 800917c:	4603      	mov	r3, r0
}
 800917e:	4618      	mov	r0, r3
 8009180:	3708      	adds	r7, #8
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}

08009186 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009186:	b580      	push	{r7, lr}
 8009188:	b086      	sub	sp, #24
 800918a:	af00      	add	r7, sp, #0
 800918c:	60f8      	str	r0, [r7, #12]
 800918e:	60b9      	str	r1, [r7, #8]
 8009190:	4613      	mov	r3, r2
 8009192:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009194:	2301      	movs	r3, #1
 8009196:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	789b      	ldrb	r3, [r3, #2]
 800919c:	2b01      	cmp	r3, #1
 800919e:	d002      	beq.n	80091a6 <USBH_CtlReq+0x20>
 80091a0:	2b02      	cmp	r3, #2
 80091a2:	d00f      	beq.n	80091c4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80091a4:	e027      	b.n	80091f6 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	68ba      	ldr	r2, [r7, #8]
 80091aa:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	88fa      	ldrh	r2, [r7, #6]
 80091b0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2201      	movs	r2, #1
 80091b6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2202      	movs	r2, #2
 80091bc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80091be:	2301      	movs	r3, #1
 80091c0:	75fb      	strb	r3, [r7, #23]
      break;
 80091c2:	e018      	b.n	80091f6 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80091c4:	68f8      	ldr	r0, [r7, #12]
 80091c6:	f000 f81b 	bl	8009200 <USBH_HandleControl>
 80091ca:	4603      	mov	r3, r0
 80091cc:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80091ce:	7dfb      	ldrb	r3, [r7, #23]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d002      	beq.n	80091da <USBH_CtlReq+0x54>
 80091d4:	7dfb      	ldrb	r3, [r7, #23]
 80091d6:	2b03      	cmp	r3, #3
 80091d8:	d106      	bne.n	80091e8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2201      	movs	r2, #1
 80091de:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2200      	movs	r2, #0
 80091e4:	761a      	strb	r2, [r3, #24]
      break;
 80091e6:	e005      	b.n	80091f4 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80091e8:	7dfb      	ldrb	r3, [r7, #23]
 80091ea:	2b02      	cmp	r3, #2
 80091ec:	d102      	bne.n	80091f4 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2201      	movs	r2, #1
 80091f2:	709a      	strb	r2, [r3, #2]
      break;
 80091f4:	bf00      	nop
  }
  return status;
 80091f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3718      	adds	r7, #24
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b086      	sub	sp, #24
 8009204:	af02      	add	r7, sp, #8
 8009206:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009208:	2301      	movs	r3, #1
 800920a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800920c:	2300      	movs	r3, #0
 800920e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	7e1b      	ldrb	r3, [r3, #24]
 8009214:	3b01      	subs	r3, #1
 8009216:	2b0a      	cmp	r3, #10
 8009218:	f200 8156 	bhi.w	80094c8 <USBH_HandleControl+0x2c8>
 800921c:	a201      	add	r2, pc, #4	@ (adr r2, 8009224 <USBH_HandleControl+0x24>)
 800921e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009222:	bf00      	nop
 8009224:	08009251 	.word	0x08009251
 8009228:	0800926b 	.word	0x0800926b
 800922c:	080092d5 	.word	0x080092d5
 8009230:	080092fb 	.word	0x080092fb
 8009234:	08009333 	.word	0x08009333
 8009238:	0800935d 	.word	0x0800935d
 800923c:	080093af 	.word	0x080093af
 8009240:	080093d1 	.word	0x080093d1
 8009244:	0800940d 	.word	0x0800940d
 8009248:	08009433 	.word	0x08009433
 800924c:	08009471 	.word	0x08009471
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f103 0110 	add.w	r1, r3, #16
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	795b      	ldrb	r3, [r3, #5]
 800925a:	461a      	mov	r2, r3
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 f943 	bl	80094e8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2202      	movs	r2, #2
 8009266:	761a      	strb	r2, [r3, #24]
      break;
 8009268:	e139      	b.n	80094de <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	795b      	ldrb	r3, [r3, #5]
 800926e:	4619      	mov	r1, r3
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f000 fc79 	bl	8009b68 <USBH_LL_GetURBState>
 8009276:	4603      	mov	r3, r0
 8009278:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800927a:	7bbb      	ldrb	r3, [r7, #14]
 800927c:	2b01      	cmp	r3, #1
 800927e:	d11e      	bne.n	80092be <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	7c1b      	ldrb	r3, [r3, #16]
 8009284:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009288:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	8adb      	ldrh	r3, [r3, #22]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d00a      	beq.n	80092a8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009292:	7b7b      	ldrb	r3, [r7, #13]
 8009294:	2b80      	cmp	r3, #128	@ 0x80
 8009296:	d103      	bne.n	80092a0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2203      	movs	r2, #3
 800929c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800929e:	e115      	b.n	80094cc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2205      	movs	r2, #5
 80092a4:	761a      	strb	r2, [r3, #24]
      break;
 80092a6:	e111      	b.n	80094cc <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80092a8:	7b7b      	ldrb	r3, [r7, #13]
 80092aa:	2b80      	cmp	r3, #128	@ 0x80
 80092ac:	d103      	bne.n	80092b6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2209      	movs	r2, #9
 80092b2:	761a      	strb	r2, [r3, #24]
      break;
 80092b4:	e10a      	b.n	80094cc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2207      	movs	r2, #7
 80092ba:	761a      	strb	r2, [r3, #24]
      break;
 80092bc:	e106      	b.n	80094cc <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80092be:	7bbb      	ldrb	r3, [r7, #14]
 80092c0:	2b04      	cmp	r3, #4
 80092c2:	d003      	beq.n	80092cc <USBH_HandleControl+0xcc>
 80092c4:	7bbb      	ldrb	r3, [r7, #14]
 80092c6:	2b02      	cmp	r3, #2
 80092c8:	f040 8100 	bne.w	80094cc <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	220b      	movs	r2, #11
 80092d0:	761a      	strb	r2, [r3, #24]
      break;
 80092d2:	e0fb      	b.n	80094cc <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80092da:	b29a      	uxth	r2, r3
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6899      	ldr	r1, [r3, #8]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	899a      	ldrh	r2, [r3, #12]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	791b      	ldrb	r3, [r3, #4]
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 f93a 	bl	8009566 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2204      	movs	r2, #4
 80092f6:	761a      	strb	r2, [r3, #24]
      break;
 80092f8:	e0f1      	b.n	80094de <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	791b      	ldrb	r3, [r3, #4]
 80092fe:	4619      	mov	r1, r3
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f000 fc31 	bl	8009b68 <USBH_LL_GetURBState>
 8009306:	4603      	mov	r3, r0
 8009308:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800930a:	7bbb      	ldrb	r3, [r7, #14]
 800930c:	2b01      	cmp	r3, #1
 800930e:	d102      	bne.n	8009316 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2209      	movs	r2, #9
 8009314:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009316:	7bbb      	ldrb	r3, [r7, #14]
 8009318:	2b05      	cmp	r3, #5
 800931a:	d102      	bne.n	8009322 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800931c:	2303      	movs	r3, #3
 800931e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009320:	e0d6      	b.n	80094d0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009322:	7bbb      	ldrb	r3, [r7, #14]
 8009324:	2b04      	cmp	r3, #4
 8009326:	f040 80d3 	bne.w	80094d0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	220b      	movs	r2, #11
 800932e:	761a      	strb	r2, [r3, #24]
      break;
 8009330:	e0ce      	b.n	80094d0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6899      	ldr	r1, [r3, #8]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	899a      	ldrh	r2, [r3, #12]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	795b      	ldrb	r3, [r3, #5]
 800933e:	2001      	movs	r0, #1
 8009340:	9000      	str	r0, [sp, #0]
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 f8ea 	bl	800951c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800934e:	b29a      	uxth	r2, r3
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2206      	movs	r2, #6
 8009358:	761a      	strb	r2, [r3, #24]
      break;
 800935a:	e0c0      	b.n	80094de <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	795b      	ldrb	r3, [r3, #5]
 8009360:	4619      	mov	r1, r3
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 fc00 	bl	8009b68 <USBH_LL_GetURBState>
 8009368:	4603      	mov	r3, r0
 800936a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800936c:	7bbb      	ldrb	r3, [r7, #14]
 800936e:	2b01      	cmp	r3, #1
 8009370:	d103      	bne.n	800937a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2207      	movs	r2, #7
 8009376:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009378:	e0ac      	b.n	80094d4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800937a:	7bbb      	ldrb	r3, [r7, #14]
 800937c:	2b05      	cmp	r3, #5
 800937e:	d105      	bne.n	800938c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	220c      	movs	r2, #12
 8009384:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009386:	2303      	movs	r3, #3
 8009388:	73fb      	strb	r3, [r7, #15]
      break;
 800938a:	e0a3      	b.n	80094d4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800938c:	7bbb      	ldrb	r3, [r7, #14]
 800938e:	2b02      	cmp	r3, #2
 8009390:	d103      	bne.n	800939a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2205      	movs	r2, #5
 8009396:	761a      	strb	r2, [r3, #24]
      break;
 8009398:	e09c      	b.n	80094d4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800939a:	7bbb      	ldrb	r3, [r7, #14]
 800939c:	2b04      	cmp	r3, #4
 800939e:	f040 8099 	bne.w	80094d4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	220b      	movs	r2, #11
 80093a6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80093a8:	2302      	movs	r3, #2
 80093aa:	73fb      	strb	r3, [r7, #15]
      break;
 80093ac:	e092      	b.n	80094d4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	791b      	ldrb	r3, [r3, #4]
 80093b2:	2200      	movs	r2, #0
 80093b4:	2100      	movs	r1, #0
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 f8d5 	bl	8009566 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80093c2:	b29a      	uxth	r2, r3
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2208      	movs	r2, #8
 80093cc:	761a      	strb	r2, [r3, #24]

      break;
 80093ce:	e086      	b.n	80094de <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	791b      	ldrb	r3, [r3, #4]
 80093d4:	4619      	mov	r1, r3
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 fbc6 	bl	8009b68 <USBH_LL_GetURBState>
 80093dc:	4603      	mov	r3, r0
 80093de:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80093e0:	7bbb      	ldrb	r3, [r7, #14]
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d105      	bne.n	80093f2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	220d      	movs	r2, #13
 80093ea:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80093ec:	2300      	movs	r3, #0
 80093ee:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80093f0:	e072      	b.n	80094d8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80093f2:	7bbb      	ldrb	r3, [r7, #14]
 80093f4:	2b04      	cmp	r3, #4
 80093f6:	d103      	bne.n	8009400 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	220b      	movs	r2, #11
 80093fc:	761a      	strb	r2, [r3, #24]
      break;
 80093fe:	e06b      	b.n	80094d8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009400:	7bbb      	ldrb	r3, [r7, #14]
 8009402:	2b05      	cmp	r3, #5
 8009404:	d168      	bne.n	80094d8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009406:	2303      	movs	r3, #3
 8009408:	73fb      	strb	r3, [r7, #15]
      break;
 800940a:	e065      	b.n	80094d8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	795b      	ldrb	r3, [r3, #5]
 8009410:	2201      	movs	r2, #1
 8009412:	9200      	str	r2, [sp, #0]
 8009414:	2200      	movs	r2, #0
 8009416:	2100      	movs	r1, #0
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 f87f 	bl	800951c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009424:	b29a      	uxth	r2, r3
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	220a      	movs	r2, #10
 800942e:	761a      	strb	r2, [r3, #24]
      break;
 8009430:	e055      	b.n	80094de <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	795b      	ldrb	r3, [r3, #5]
 8009436:	4619      	mov	r1, r3
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 fb95 	bl	8009b68 <USBH_LL_GetURBState>
 800943e:	4603      	mov	r3, r0
 8009440:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009442:	7bbb      	ldrb	r3, [r7, #14]
 8009444:	2b01      	cmp	r3, #1
 8009446:	d105      	bne.n	8009454 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009448:	2300      	movs	r3, #0
 800944a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	220d      	movs	r2, #13
 8009450:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009452:	e043      	b.n	80094dc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009454:	7bbb      	ldrb	r3, [r7, #14]
 8009456:	2b02      	cmp	r3, #2
 8009458:	d103      	bne.n	8009462 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2209      	movs	r2, #9
 800945e:	761a      	strb	r2, [r3, #24]
      break;
 8009460:	e03c      	b.n	80094dc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009462:	7bbb      	ldrb	r3, [r7, #14]
 8009464:	2b04      	cmp	r3, #4
 8009466:	d139      	bne.n	80094dc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	220b      	movs	r2, #11
 800946c:	761a      	strb	r2, [r3, #24]
      break;
 800946e:	e035      	b.n	80094dc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	7e5b      	ldrb	r3, [r3, #25]
 8009474:	3301      	adds	r3, #1
 8009476:	b2da      	uxtb	r2, r3
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	765a      	strb	r2, [r3, #25]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	7e5b      	ldrb	r3, [r3, #25]
 8009480:	2b02      	cmp	r3, #2
 8009482:	d806      	bhi.n	8009492 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2201      	movs	r2, #1
 8009488:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2201      	movs	r2, #1
 800948e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009490:	e025      	b.n	80094de <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009498:	2106      	movs	r1, #6
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2200      	movs	r2, #0
 80094a2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	795b      	ldrb	r3, [r3, #5]
 80094a8:	4619      	mov	r1, r3
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 f90c 	bl	80096c8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	791b      	ldrb	r3, [r3, #4]
 80094b4:	4619      	mov	r1, r3
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 f906 	bl	80096c8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2200      	movs	r2, #0
 80094c0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80094c2:	2302      	movs	r3, #2
 80094c4:	73fb      	strb	r3, [r7, #15]
      break;
 80094c6:	e00a      	b.n	80094de <USBH_HandleControl+0x2de>

    default:
      break;
 80094c8:	bf00      	nop
 80094ca:	e008      	b.n	80094de <USBH_HandleControl+0x2de>
      break;
 80094cc:	bf00      	nop
 80094ce:	e006      	b.n	80094de <USBH_HandleControl+0x2de>
      break;
 80094d0:	bf00      	nop
 80094d2:	e004      	b.n	80094de <USBH_HandleControl+0x2de>
      break;
 80094d4:	bf00      	nop
 80094d6:	e002      	b.n	80094de <USBH_HandleControl+0x2de>
      break;
 80094d8:	bf00      	nop
 80094da:	e000      	b.n	80094de <USBH_HandleControl+0x2de>
      break;
 80094dc:	bf00      	nop
  }

  return status;
 80094de:	7bfb      	ldrb	r3, [r7, #15]
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3710      	adds	r7, #16
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b088      	sub	sp, #32
 80094ec:	af04      	add	r7, sp, #16
 80094ee:	60f8      	str	r0, [r7, #12]
 80094f0:	60b9      	str	r1, [r7, #8]
 80094f2:	4613      	mov	r3, r2
 80094f4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80094f6:	79f9      	ldrb	r1, [r7, #7]
 80094f8:	2300      	movs	r3, #0
 80094fa:	9303      	str	r3, [sp, #12]
 80094fc:	2308      	movs	r3, #8
 80094fe:	9302      	str	r3, [sp, #8]
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	9301      	str	r3, [sp, #4]
 8009504:	2300      	movs	r3, #0
 8009506:	9300      	str	r3, [sp, #0]
 8009508:	2300      	movs	r3, #0
 800950a:	2200      	movs	r2, #0
 800950c:	68f8      	ldr	r0, [r7, #12]
 800950e:	f000 fafa 	bl	8009b06 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009512:	2300      	movs	r3, #0
}
 8009514:	4618      	mov	r0, r3
 8009516:	3710      	adds	r7, #16
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b088      	sub	sp, #32
 8009520:	af04      	add	r7, sp, #16
 8009522:	60f8      	str	r0, [r7, #12]
 8009524:	60b9      	str	r1, [r7, #8]
 8009526:	4611      	mov	r1, r2
 8009528:	461a      	mov	r2, r3
 800952a:	460b      	mov	r3, r1
 800952c:	80fb      	strh	r3, [r7, #6]
 800952e:	4613      	mov	r3, r2
 8009530:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009538:	2b00      	cmp	r3, #0
 800953a:	d001      	beq.n	8009540 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800953c:	2300      	movs	r3, #0
 800953e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009540:	7979      	ldrb	r1, [r7, #5]
 8009542:	7e3b      	ldrb	r3, [r7, #24]
 8009544:	9303      	str	r3, [sp, #12]
 8009546:	88fb      	ldrh	r3, [r7, #6]
 8009548:	9302      	str	r3, [sp, #8]
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	9301      	str	r3, [sp, #4]
 800954e:	2301      	movs	r3, #1
 8009550:	9300      	str	r3, [sp, #0]
 8009552:	2300      	movs	r3, #0
 8009554:	2200      	movs	r2, #0
 8009556:	68f8      	ldr	r0, [r7, #12]
 8009558:	f000 fad5 	bl	8009b06 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800955c:	2300      	movs	r3, #0
}
 800955e:	4618      	mov	r0, r3
 8009560:	3710      	adds	r7, #16
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}

08009566 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009566:	b580      	push	{r7, lr}
 8009568:	b088      	sub	sp, #32
 800956a:	af04      	add	r7, sp, #16
 800956c:	60f8      	str	r0, [r7, #12]
 800956e:	60b9      	str	r1, [r7, #8]
 8009570:	4611      	mov	r1, r2
 8009572:	461a      	mov	r2, r3
 8009574:	460b      	mov	r3, r1
 8009576:	80fb      	strh	r3, [r7, #6]
 8009578:	4613      	mov	r3, r2
 800957a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800957c:	7979      	ldrb	r1, [r7, #5]
 800957e:	2300      	movs	r3, #0
 8009580:	9303      	str	r3, [sp, #12]
 8009582:	88fb      	ldrh	r3, [r7, #6]
 8009584:	9302      	str	r3, [sp, #8]
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	9301      	str	r3, [sp, #4]
 800958a:	2301      	movs	r3, #1
 800958c:	9300      	str	r3, [sp, #0]
 800958e:	2300      	movs	r3, #0
 8009590:	2201      	movs	r2, #1
 8009592:	68f8      	ldr	r0, [r7, #12]
 8009594:	f000 fab7 	bl	8009b06 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009598:	2300      	movs	r3, #0

}
 800959a:	4618      	mov	r0, r3
 800959c:	3710      	adds	r7, #16
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}

080095a2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80095a2:	b580      	push	{r7, lr}
 80095a4:	b088      	sub	sp, #32
 80095a6:	af04      	add	r7, sp, #16
 80095a8:	60f8      	str	r0, [r7, #12]
 80095aa:	60b9      	str	r1, [r7, #8]
 80095ac:	4611      	mov	r1, r2
 80095ae:	461a      	mov	r2, r3
 80095b0:	460b      	mov	r3, r1
 80095b2:	80fb      	strh	r3, [r7, #6]
 80095b4:	4613      	mov	r3, r2
 80095b6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d001      	beq.n	80095c6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80095c2:	2300      	movs	r3, #0
 80095c4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80095c6:	7979      	ldrb	r1, [r7, #5]
 80095c8:	7e3b      	ldrb	r3, [r7, #24]
 80095ca:	9303      	str	r3, [sp, #12]
 80095cc:	88fb      	ldrh	r3, [r7, #6]
 80095ce:	9302      	str	r3, [sp, #8]
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	9301      	str	r3, [sp, #4]
 80095d4:	2301      	movs	r3, #1
 80095d6:	9300      	str	r3, [sp, #0]
 80095d8:	2302      	movs	r3, #2
 80095da:	2200      	movs	r2, #0
 80095dc:	68f8      	ldr	r0, [r7, #12]
 80095de:	f000 fa92 	bl	8009b06 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80095e2:	2300      	movs	r3, #0
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3710      	adds	r7, #16
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b088      	sub	sp, #32
 80095f0:	af04      	add	r7, sp, #16
 80095f2:	60f8      	str	r0, [r7, #12]
 80095f4:	60b9      	str	r1, [r7, #8]
 80095f6:	4611      	mov	r1, r2
 80095f8:	461a      	mov	r2, r3
 80095fa:	460b      	mov	r3, r1
 80095fc:	80fb      	strh	r3, [r7, #6]
 80095fe:	4613      	mov	r3, r2
 8009600:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009602:	7979      	ldrb	r1, [r7, #5]
 8009604:	2300      	movs	r3, #0
 8009606:	9303      	str	r3, [sp, #12]
 8009608:	88fb      	ldrh	r3, [r7, #6]
 800960a:	9302      	str	r3, [sp, #8]
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	9301      	str	r3, [sp, #4]
 8009610:	2301      	movs	r3, #1
 8009612:	9300      	str	r3, [sp, #0]
 8009614:	2302      	movs	r3, #2
 8009616:	2201      	movs	r2, #1
 8009618:	68f8      	ldr	r0, [r7, #12]
 800961a:	f000 fa74 	bl	8009b06 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800961e:	2300      	movs	r3, #0
}
 8009620:	4618      	mov	r0, r3
 8009622:	3710      	adds	r7, #16
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b086      	sub	sp, #24
 800962c:	af04      	add	r7, sp, #16
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	4608      	mov	r0, r1
 8009632:	4611      	mov	r1, r2
 8009634:	461a      	mov	r2, r3
 8009636:	4603      	mov	r3, r0
 8009638:	70fb      	strb	r3, [r7, #3]
 800963a:	460b      	mov	r3, r1
 800963c:	70bb      	strb	r3, [r7, #2]
 800963e:	4613      	mov	r3, r2
 8009640:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009642:	7878      	ldrb	r0, [r7, #1]
 8009644:	78ba      	ldrb	r2, [r7, #2]
 8009646:	78f9      	ldrb	r1, [r7, #3]
 8009648:	8b3b      	ldrh	r3, [r7, #24]
 800964a:	9302      	str	r3, [sp, #8]
 800964c:	7d3b      	ldrb	r3, [r7, #20]
 800964e:	9301      	str	r3, [sp, #4]
 8009650:	7c3b      	ldrb	r3, [r7, #16]
 8009652:	9300      	str	r3, [sp, #0]
 8009654:	4603      	mov	r3, r0
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f000 fa07 	bl	8009a6a <USBH_LL_OpenPipe>

  return USBH_OK;
 800965c:	2300      	movs	r3, #0
}
 800965e:	4618      	mov	r0, r3
 8009660:	3708      	adds	r7, #8
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}

08009666 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009666:	b580      	push	{r7, lr}
 8009668:	b082      	sub	sp, #8
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
 800966e:	460b      	mov	r3, r1
 8009670:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009672:	78fb      	ldrb	r3, [r7, #3]
 8009674:	4619      	mov	r1, r3
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 fa26 	bl	8009ac8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800967c:	2300      	movs	r3, #0
}
 800967e:	4618      	mov	r0, r3
 8009680:	3708      	adds	r7, #8
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}

08009686 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009686:	b580      	push	{r7, lr}
 8009688:	b084      	sub	sp, #16
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
 800968e:	460b      	mov	r3, r1
 8009690:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f000 f836 	bl	8009704 <USBH_GetFreePipe>
 8009698:	4603      	mov	r3, r0
 800969a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800969c:	89fb      	ldrh	r3, [r7, #14]
 800969e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d00a      	beq.n	80096bc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80096a6:	78fa      	ldrb	r2, [r7, #3]
 80096a8:	89fb      	ldrh	r3, [r7, #14]
 80096aa:	f003 030f 	and.w	r3, r3, #15
 80096ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80096b2:	6879      	ldr	r1, [r7, #4]
 80096b4:	33e0      	adds	r3, #224	@ 0xe0
 80096b6:	009b      	lsls	r3, r3, #2
 80096b8:	440b      	add	r3, r1
 80096ba:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80096bc:	89fb      	ldrh	r3, [r7, #14]
 80096be:	b2db      	uxtb	r3, r3
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3710      	adds	r7, #16
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b083      	sub	sp, #12
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	460b      	mov	r3, r1
 80096d2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80096d4:	78fb      	ldrb	r3, [r7, #3]
 80096d6:	2b0f      	cmp	r3, #15
 80096d8:	d80d      	bhi.n	80096f6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80096da:	78fb      	ldrb	r3, [r7, #3]
 80096dc:	687a      	ldr	r2, [r7, #4]
 80096de:	33e0      	adds	r3, #224	@ 0xe0
 80096e0:	009b      	lsls	r3, r3, #2
 80096e2:	4413      	add	r3, r2
 80096e4:	685a      	ldr	r2, [r3, #4]
 80096e6:	78fb      	ldrb	r3, [r7, #3]
 80096e8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80096ec:	6879      	ldr	r1, [r7, #4]
 80096ee:	33e0      	adds	r3, #224	@ 0xe0
 80096f0:	009b      	lsls	r3, r3, #2
 80096f2:	440b      	add	r3, r1
 80096f4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80096f6:	2300      	movs	r3, #0
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	370c      	adds	r7, #12
 80096fc:	46bd      	mov	sp, r7
 80096fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009702:	4770      	bx	lr

08009704 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009704:	b480      	push	{r7}
 8009706:	b085      	sub	sp, #20
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800970c:	2300      	movs	r3, #0
 800970e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009710:	2300      	movs	r3, #0
 8009712:	73fb      	strb	r3, [r7, #15]
 8009714:	e00f      	b.n	8009736 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009716:	7bfb      	ldrb	r3, [r7, #15]
 8009718:	687a      	ldr	r2, [r7, #4]
 800971a:	33e0      	adds	r3, #224	@ 0xe0
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	4413      	add	r3, r2
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009726:	2b00      	cmp	r3, #0
 8009728:	d102      	bne.n	8009730 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800972a:	7bfb      	ldrb	r3, [r7, #15]
 800972c:	b29b      	uxth	r3, r3
 800972e:	e007      	b.n	8009740 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009730:	7bfb      	ldrb	r3, [r7, #15]
 8009732:	3301      	adds	r3, #1
 8009734:	73fb      	strb	r3, [r7, #15]
 8009736:	7bfb      	ldrb	r3, [r7, #15]
 8009738:	2b0f      	cmp	r3, #15
 800973a:	d9ec      	bls.n	8009716 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800973c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009740:	4618      	mov	r0, r3
 8009742:	3714      	adds	r7, #20
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr

0800974c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009750:	2201      	movs	r2, #1
 8009752:	490e      	ldr	r1, [pc, #56]	@ (800978c <MX_USB_HOST_Init+0x40>)
 8009754:	480e      	ldr	r0, [pc, #56]	@ (8009790 <MX_USB_HOST_Init+0x44>)
 8009756:	f7ff fb19 	bl	8008d8c <USBH_Init>
 800975a:	4603      	mov	r3, r0
 800975c:	2b00      	cmp	r3, #0
 800975e:	d001      	beq.n	8009764 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009760:	f7f7 fca8 	bl	80010b4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009764:	490b      	ldr	r1, [pc, #44]	@ (8009794 <MX_USB_HOST_Init+0x48>)
 8009766:	480a      	ldr	r0, [pc, #40]	@ (8009790 <MX_USB_HOST_Init+0x44>)
 8009768:	f7ff fbbd 	bl	8008ee6 <USBH_RegisterClass>
 800976c:	4603      	mov	r3, r0
 800976e:	2b00      	cmp	r3, #0
 8009770:	d001      	beq.n	8009776 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009772:	f7f7 fc9f 	bl	80010b4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009776:	4806      	ldr	r0, [pc, #24]	@ (8009790 <MX_USB_HOST_Init+0x44>)
 8009778:	f7ff fc41 	bl	8008ffe <USBH_Start>
 800977c:	4603      	mov	r3, r0
 800977e:	2b00      	cmp	r3, #0
 8009780:	d001      	beq.n	8009786 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009782:	f7f7 fc97 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009786:	bf00      	nop
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop
 800978c:	08009799 	.word	0x08009799
 8009790:	200024f8 	.word	0x200024f8
 8009794:	2000080c 	.word	0x2000080c

08009798 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009798:	b480      	push	{r7}
 800979a:	b083      	sub	sp, #12
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	460b      	mov	r3, r1
 80097a2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80097a4:	78fb      	ldrb	r3, [r7, #3]
 80097a6:	3b01      	subs	r3, #1
 80097a8:	2b04      	cmp	r3, #4
 80097aa:	d819      	bhi.n	80097e0 <USBH_UserProcess+0x48>
 80097ac:	a201      	add	r2, pc, #4	@ (adr r2, 80097b4 <USBH_UserProcess+0x1c>)
 80097ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097b2:	bf00      	nop
 80097b4:	080097e1 	.word	0x080097e1
 80097b8:	080097d1 	.word	0x080097d1
 80097bc:	080097e1 	.word	0x080097e1
 80097c0:	080097d9 	.word	0x080097d9
 80097c4:	080097c9 	.word	0x080097c9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80097c8:	4b09      	ldr	r3, [pc, #36]	@ (80097f0 <USBH_UserProcess+0x58>)
 80097ca:	2203      	movs	r2, #3
 80097cc:	701a      	strb	r2, [r3, #0]
  break;
 80097ce:	e008      	b.n	80097e2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80097d0:	4b07      	ldr	r3, [pc, #28]	@ (80097f0 <USBH_UserProcess+0x58>)
 80097d2:	2202      	movs	r2, #2
 80097d4:	701a      	strb	r2, [r3, #0]
  break;
 80097d6:	e004      	b.n	80097e2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80097d8:	4b05      	ldr	r3, [pc, #20]	@ (80097f0 <USBH_UserProcess+0x58>)
 80097da:	2201      	movs	r2, #1
 80097dc:	701a      	strb	r2, [r3, #0]
  break;
 80097de:	e000      	b.n	80097e2 <USBH_UserProcess+0x4a>

  default:
  break;
 80097e0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80097e2:	bf00      	nop
 80097e4:	370c      	adds	r7, #12
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr
 80097ee:	bf00      	nop
 80097f0:	200028d0 	.word	0x200028d0

080097f4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b08a      	sub	sp, #40	@ 0x28
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80097fc:	f107 0314 	add.w	r3, r7, #20
 8009800:	2200      	movs	r2, #0
 8009802:	601a      	str	r2, [r3, #0]
 8009804:	605a      	str	r2, [r3, #4]
 8009806:	609a      	str	r2, [r3, #8]
 8009808:	60da      	str	r2, [r3, #12]
 800980a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009814:	d147      	bne.n	80098a6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009816:	2300      	movs	r3, #0
 8009818:	613b      	str	r3, [r7, #16]
 800981a:	4b25      	ldr	r3, [pc, #148]	@ (80098b0 <HAL_HCD_MspInit+0xbc>)
 800981c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800981e:	4a24      	ldr	r2, [pc, #144]	@ (80098b0 <HAL_HCD_MspInit+0xbc>)
 8009820:	f043 0301 	orr.w	r3, r3, #1
 8009824:	6313      	str	r3, [r2, #48]	@ 0x30
 8009826:	4b22      	ldr	r3, [pc, #136]	@ (80098b0 <HAL_HCD_MspInit+0xbc>)
 8009828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800982a:	f003 0301 	and.w	r3, r3, #1
 800982e:	613b      	str	r3, [r7, #16]
 8009830:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009832:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009838:	2300      	movs	r3, #0
 800983a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800983c:	2300      	movs	r3, #0
 800983e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009840:	f107 0314 	add.w	r3, r7, #20
 8009844:	4619      	mov	r1, r3
 8009846:	481b      	ldr	r0, [pc, #108]	@ (80098b4 <HAL_HCD_MspInit+0xc0>)
 8009848:	f7f8 ff2c 	bl	80026a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800984c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8009850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009852:	2302      	movs	r3, #2
 8009854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009856:	2300      	movs	r3, #0
 8009858:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800985a:	2300      	movs	r3, #0
 800985c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800985e:	230a      	movs	r3, #10
 8009860:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009862:	f107 0314 	add.w	r3, r7, #20
 8009866:	4619      	mov	r1, r3
 8009868:	4812      	ldr	r0, [pc, #72]	@ (80098b4 <HAL_HCD_MspInit+0xc0>)
 800986a:	f7f8 ff1b 	bl	80026a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800986e:	4b10      	ldr	r3, [pc, #64]	@ (80098b0 <HAL_HCD_MspInit+0xbc>)
 8009870:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009872:	4a0f      	ldr	r2, [pc, #60]	@ (80098b0 <HAL_HCD_MspInit+0xbc>)
 8009874:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009878:	6353      	str	r3, [r2, #52]	@ 0x34
 800987a:	2300      	movs	r3, #0
 800987c:	60fb      	str	r3, [r7, #12]
 800987e:	4b0c      	ldr	r3, [pc, #48]	@ (80098b0 <HAL_HCD_MspInit+0xbc>)
 8009880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009882:	4a0b      	ldr	r2, [pc, #44]	@ (80098b0 <HAL_HCD_MspInit+0xbc>)
 8009884:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009888:	6453      	str	r3, [r2, #68]	@ 0x44
 800988a:	4b09      	ldr	r3, [pc, #36]	@ (80098b0 <HAL_HCD_MspInit+0xbc>)
 800988c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800988e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009892:	60fb      	str	r3, [r7, #12]
 8009894:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009896:	2200      	movs	r2, #0
 8009898:	2100      	movs	r1, #0
 800989a:	2043      	movs	r0, #67	@ 0x43
 800989c:	f7f8 fb5b 	bl	8001f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80098a0:	2043      	movs	r0, #67	@ 0x43
 80098a2:	f7f8 fb74 	bl	8001f8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80098a6:	bf00      	nop
 80098a8:	3728      	adds	r7, #40	@ 0x28
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}
 80098ae:	bf00      	nop
 80098b0:	40023800 	.word	0x40023800
 80098b4:	40020000 	.word	0x40020000

080098b8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80098c6:	4618      	mov	r0, r3
 80098c8:	f7ff fbb8 	bl	800903c <USBH_LL_IncTimer>
}
 80098cc:	bf00      	nop
 80098ce:	3708      	adds	r7, #8
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b082      	sub	sp, #8
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80098e2:	4618      	mov	r0, r3
 80098e4:	f7ff fbf0 	bl	80090c8 <USBH_LL_Connect>
}
 80098e8:	bf00      	nop
 80098ea:	3708      	adds	r7, #8
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80098fe:	4618      	mov	r0, r3
 8009900:	f7ff fbf9 	bl	80090f6 <USBH_LL_Disconnect>
}
 8009904:	bf00      	nop
 8009906:	3708      	adds	r7, #8
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}

0800990c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800990c:	b480      	push	{r7}
 800990e:	b083      	sub	sp, #12
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	460b      	mov	r3, r1
 8009916:	70fb      	strb	r3, [r7, #3]
 8009918:	4613      	mov	r3, r2
 800991a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800991c:	bf00      	nop
 800991e:	370c      	adds	r7, #12
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr

08009928 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b082      	sub	sp, #8
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009936:	4618      	mov	r0, r3
 8009938:	f7ff fbaa 	bl	8009090 <USBH_LL_PortEnabled>
}
 800993c:	bf00      	nop
 800993e:	3708      	adds	r7, #8
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009952:	4618      	mov	r0, r3
 8009954:	f7ff fbaa 	bl	80090ac <USBH_LL_PortDisabled>
}
 8009958:	bf00      	nop
 800995a:	3708      	adds	r7, #8
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b082      	sub	sp, #8
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800996e:	2b01      	cmp	r3, #1
 8009970:	d12a      	bne.n	80099c8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009972:	4a18      	ldr	r2, [pc, #96]	@ (80099d4 <USBH_LL_Init+0x74>)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	4a15      	ldr	r2, [pc, #84]	@ (80099d4 <USBH_LL_Init+0x74>)
 800997e:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009982:	4b14      	ldr	r3, [pc, #80]	@ (80099d4 <USBH_LL_Init+0x74>)
 8009984:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009988:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800998a:	4b12      	ldr	r3, [pc, #72]	@ (80099d4 <USBH_LL_Init+0x74>)
 800998c:	2208      	movs	r2, #8
 800998e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009990:	4b10      	ldr	r3, [pc, #64]	@ (80099d4 <USBH_LL_Init+0x74>)
 8009992:	2201      	movs	r2, #1
 8009994:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009996:	4b0f      	ldr	r3, [pc, #60]	@ (80099d4 <USBH_LL_Init+0x74>)
 8009998:	2200      	movs	r2, #0
 800999a:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800999c:	4b0d      	ldr	r3, [pc, #52]	@ (80099d4 <USBH_LL_Init+0x74>)
 800999e:	2202      	movs	r2, #2
 80099a0:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80099a2:	4b0c      	ldr	r3, [pc, #48]	@ (80099d4 <USBH_LL_Init+0x74>)
 80099a4:	2200      	movs	r2, #0
 80099a6:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80099a8:	480a      	ldr	r0, [pc, #40]	@ (80099d4 <USBH_LL_Init+0x74>)
 80099aa:	f7f9 f830 	bl	8002a0e <HAL_HCD_Init>
 80099ae:	4603      	mov	r3, r0
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d001      	beq.n	80099b8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80099b4:	f7f7 fb7e 	bl	80010b4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80099b8:	4806      	ldr	r0, [pc, #24]	@ (80099d4 <USBH_LL_Init+0x74>)
 80099ba:	f7f9 fc83 	bl	80032c4 <HAL_HCD_GetCurrentFrame>
 80099be:	4603      	mov	r3, r0
 80099c0:	4619      	mov	r1, r3
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f7ff fb2b 	bl	800901e <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80099c8:	2300      	movs	r3, #0
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3708      	adds	r7, #8
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	200028d4 	.word	0x200028d4

080099d8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b084      	sub	sp, #16
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099e0:	2300      	movs	r3, #0
 80099e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80099e4:	2300      	movs	r3, #0
 80099e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80099ee:	4618      	mov	r0, r3
 80099f0:	f7f9 fbfe 	bl	80031f0 <HAL_HCD_Start>
 80099f4:	4603      	mov	r3, r0
 80099f6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80099f8:	7bfb      	ldrb	r3, [r7, #15]
 80099fa:	4618      	mov	r0, r3
 80099fc:	f000 f912 	bl	8009c24 <USBH_Get_USB_Status>
 8009a00:	4603      	mov	r3, r0
 8009a02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a04:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3710      	adds	r7, #16
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}

08009a0e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009a0e:	b580      	push	{r7, lr}
 8009a10:	b084      	sub	sp, #16
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a16:	2300      	movs	r3, #0
 8009a18:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009a24:	4618      	mov	r0, r3
 8009a26:	f7f9 fc06 	bl	8003236 <HAL_HCD_Stop>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009a2e:	7bfb      	ldrb	r3, [r7, #15]
 8009a30:	4618      	mov	r0, r3
 8009a32:	f000 f8f7 	bl	8009c24 <USBH_Get_USB_Status>
 8009a36:	4603      	mov	r3, r0
 8009a38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3710      	adds	r7, #16
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b082      	sub	sp, #8
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009a56:	78fa      	ldrb	r2, [r7, #3]
 8009a58:	4611      	mov	r1, r2
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f7f9 fc1d 	bl	800329a <HAL_HCD_HC_GetXferCount>
 8009a60:	4603      	mov	r3, r0
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3708      	adds	r7, #8
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}

08009a6a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009a6a:	b590      	push	{r4, r7, lr}
 8009a6c:	b089      	sub	sp, #36	@ 0x24
 8009a6e:	af04      	add	r7, sp, #16
 8009a70:	6078      	str	r0, [r7, #4]
 8009a72:	4608      	mov	r0, r1
 8009a74:	4611      	mov	r1, r2
 8009a76:	461a      	mov	r2, r3
 8009a78:	4603      	mov	r3, r0
 8009a7a:	70fb      	strb	r3, [r7, #3]
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	70bb      	strb	r3, [r7, #2]
 8009a80:	4613      	mov	r3, r2
 8009a82:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a84:	2300      	movs	r3, #0
 8009a86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009a92:	787c      	ldrb	r4, [r7, #1]
 8009a94:	78ba      	ldrb	r2, [r7, #2]
 8009a96:	78f9      	ldrb	r1, [r7, #3]
 8009a98:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009a9a:	9302      	str	r3, [sp, #8]
 8009a9c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009aa0:	9301      	str	r3, [sp, #4]
 8009aa2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009aa6:	9300      	str	r3, [sp, #0]
 8009aa8:	4623      	mov	r3, r4
 8009aaa:	f7f9 f817 	bl	8002adc <HAL_HCD_HC_Init>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009ab2:	7bfb      	ldrb	r3, [r7, #15]
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f000 f8b5 	bl	8009c24 <USBH_Get_USB_Status>
 8009aba:	4603      	mov	r3, r0
 8009abc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009abe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3714      	adds	r7, #20
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd90      	pop	{r4, r7, pc}

08009ac8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b084      	sub	sp, #16
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	460b      	mov	r3, r1
 8009ad2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009ae2:	78fa      	ldrb	r2, [r7, #3]
 8009ae4:	4611      	mov	r1, r2
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7f9 f8b0 	bl	8002c4c <HAL_HCD_HC_Halt>
 8009aec:	4603      	mov	r3, r0
 8009aee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009af0:	7bfb      	ldrb	r3, [r7, #15]
 8009af2:	4618      	mov	r0, r3
 8009af4:	f000 f896 	bl	8009c24 <USBH_Get_USB_Status>
 8009af8:	4603      	mov	r3, r0
 8009afa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009afc:	7bbb      	ldrb	r3, [r7, #14]
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3710      	adds	r7, #16
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}

08009b06 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009b06:	b590      	push	{r4, r7, lr}
 8009b08:	b089      	sub	sp, #36	@ 0x24
 8009b0a:	af04      	add	r7, sp, #16
 8009b0c:	6078      	str	r0, [r7, #4]
 8009b0e:	4608      	mov	r0, r1
 8009b10:	4611      	mov	r1, r2
 8009b12:	461a      	mov	r2, r3
 8009b14:	4603      	mov	r3, r0
 8009b16:	70fb      	strb	r3, [r7, #3]
 8009b18:	460b      	mov	r3, r1
 8009b1a:	70bb      	strb	r3, [r7, #2]
 8009b1c:	4613      	mov	r3, r2
 8009b1e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b20:	2300      	movs	r3, #0
 8009b22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009b24:	2300      	movs	r3, #0
 8009b26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009b2e:	787c      	ldrb	r4, [r7, #1]
 8009b30:	78ba      	ldrb	r2, [r7, #2]
 8009b32:	78f9      	ldrb	r1, [r7, #3]
 8009b34:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009b38:	9303      	str	r3, [sp, #12]
 8009b3a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009b3c:	9302      	str	r3, [sp, #8]
 8009b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b40:	9301      	str	r3, [sp, #4]
 8009b42:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009b46:	9300      	str	r3, [sp, #0]
 8009b48:	4623      	mov	r3, r4
 8009b4a:	f7f9 f8a3 	bl	8002c94 <HAL_HCD_HC_SubmitRequest>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009b52:	7bfb      	ldrb	r3, [r7, #15]
 8009b54:	4618      	mov	r0, r3
 8009b56:	f000 f865 	bl	8009c24 <USBH_Get_USB_Status>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3714      	adds	r7, #20
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd90      	pop	{r4, r7, pc}

08009b68 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b082      	sub	sp, #8
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	460b      	mov	r3, r1
 8009b72:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009b7a:	78fa      	ldrb	r2, [r7, #3]
 8009b7c:	4611      	mov	r1, r2
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f7f9 fb76 	bl	8003270 <HAL_HCD_HC_GetURBState>
 8009b84:	4603      	mov	r3, r0
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3708      	adds	r7, #8
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}

08009b8e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009b8e:	b580      	push	{r7, lr}
 8009b90:	b082      	sub	sp, #8
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	6078      	str	r0, [r7, #4]
 8009b96:	460b      	mov	r3, r1
 8009b98:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d103      	bne.n	8009bac <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009ba4:	78fb      	ldrb	r3, [r7, #3]
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f000 f868 	bl	8009c7c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009bac:	20c8      	movs	r0, #200	@ 0xc8
 8009bae:	f7f7 fccb 	bl	8001548 <HAL_Delay>
  return USBH_OK;
 8009bb2:	2300      	movs	r3, #0
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3708      	adds	r7, #8
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b085      	sub	sp, #20
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	460b      	mov	r3, r1
 8009bc6:	70fb      	strb	r3, [r7, #3]
 8009bc8:	4613      	mov	r3, r2
 8009bca:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009bd2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009bd4:	78fa      	ldrb	r2, [r7, #3]
 8009bd6:	68f9      	ldr	r1, [r7, #12]
 8009bd8:	4613      	mov	r3, r2
 8009bda:	011b      	lsls	r3, r3, #4
 8009bdc:	1a9b      	subs	r3, r3, r2
 8009bde:	009b      	lsls	r3, r3, #2
 8009be0:	440b      	add	r3, r1
 8009be2:	3317      	adds	r3, #23
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d00a      	beq.n	8009c00 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009bea:	78fa      	ldrb	r2, [r7, #3]
 8009bec:	68f9      	ldr	r1, [r7, #12]
 8009bee:	4613      	mov	r3, r2
 8009bf0:	011b      	lsls	r3, r3, #4
 8009bf2:	1a9b      	subs	r3, r3, r2
 8009bf4:	009b      	lsls	r3, r3, #2
 8009bf6:	440b      	add	r3, r1
 8009bf8:	333c      	adds	r3, #60	@ 0x3c
 8009bfa:	78ba      	ldrb	r2, [r7, #2]
 8009bfc:	701a      	strb	r2, [r3, #0]
 8009bfe:	e009      	b.n	8009c14 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009c00:	78fa      	ldrb	r2, [r7, #3]
 8009c02:	68f9      	ldr	r1, [r7, #12]
 8009c04:	4613      	mov	r3, r2
 8009c06:	011b      	lsls	r3, r3, #4
 8009c08:	1a9b      	subs	r3, r3, r2
 8009c0a:	009b      	lsls	r3, r3, #2
 8009c0c:	440b      	add	r3, r1
 8009c0e:	333d      	adds	r3, #61	@ 0x3d
 8009c10:	78ba      	ldrb	r2, [r7, #2]
 8009c12:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009c14:	2300      	movs	r3, #0
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3714      	adds	r7, #20
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c20:	4770      	bx	lr
	...

08009c24 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b085      	sub	sp, #20
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009c32:	79fb      	ldrb	r3, [r7, #7]
 8009c34:	2b03      	cmp	r3, #3
 8009c36:	d817      	bhi.n	8009c68 <USBH_Get_USB_Status+0x44>
 8009c38:	a201      	add	r2, pc, #4	@ (adr r2, 8009c40 <USBH_Get_USB_Status+0x1c>)
 8009c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c3e:	bf00      	nop
 8009c40:	08009c51 	.word	0x08009c51
 8009c44:	08009c57 	.word	0x08009c57
 8009c48:	08009c5d 	.word	0x08009c5d
 8009c4c:	08009c63 	.word	0x08009c63
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009c50:	2300      	movs	r3, #0
 8009c52:	73fb      	strb	r3, [r7, #15]
    break;
 8009c54:	e00b      	b.n	8009c6e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009c56:	2302      	movs	r3, #2
 8009c58:	73fb      	strb	r3, [r7, #15]
    break;
 8009c5a:	e008      	b.n	8009c6e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	73fb      	strb	r3, [r7, #15]
    break;
 8009c60:	e005      	b.n	8009c6e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009c62:	2302      	movs	r3, #2
 8009c64:	73fb      	strb	r3, [r7, #15]
    break;
 8009c66:	e002      	b.n	8009c6e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009c68:	2302      	movs	r3, #2
 8009c6a:	73fb      	strb	r3, [r7, #15]
    break;
 8009c6c:	bf00      	nop
  }
  return usb_status;
 8009c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3714      	adds	r7, #20
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr

08009c7c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b084      	sub	sp, #16
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	4603      	mov	r3, r0
 8009c84:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009c86:	79fb      	ldrb	r3, [r7, #7]
 8009c88:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009c8a:	79fb      	ldrb	r3, [r7, #7]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d102      	bne.n	8009c96 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009c90:	2300      	movs	r3, #0
 8009c92:	73fb      	strb	r3, [r7, #15]
 8009c94:	e001      	b.n	8009c9a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009c96:	2301      	movs	r3, #1
 8009c98:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009c9a:	7bfb      	ldrb	r3, [r7, #15]
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	2101      	movs	r1, #1
 8009ca0:	4803      	ldr	r0, [pc, #12]	@ (8009cb0 <MX_DriverVbusFS+0x34>)
 8009ca2:	f7f8 fe9b 	bl	80029dc <HAL_GPIO_WritePin>
}
 8009ca6:	bf00      	nop
 8009ca8:	3710      	adds	r7, #16
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	bf00      	nop
 8009cb0:	40020800 	.word	0x40020800

08009cb4 <arm_float_to_q15>:
 8009cb4:	b4f0      	push	{r4, r5, r6, r7}
 8009cb6:	0897      	lsrs	r7, r2, #2
 8009cb8:	d06e      	beq.n	8009d98 <arm_float_to_q15+0xe4>
 8009cba:	eddf 5a49 	vldr	s11, [pc, #292]	@ 8009de0 <arm_float_to_q15+0x12c>
 8009cbe:	f100 0510 	add.w	r5, r0, #16
 8009cc2:	f101 0408 	add.w	r4, r1, #8
 8009cc6:	463e      	mov	r6, r7
 8009cc8:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8009ccc:	eefe 6a00 	vmov.f32	s13, #224	@ 0xbf000000 -0.5
 8009cd0:	ed55 7a04 	vldr	s15, [r5, #-16]
 8009cd4:	ee27 7aa5 	vmul.f32	s14, s15, s11
 8009cd8:	3510      	adds	r5, #16
 8009cda:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8009cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ce2:	bfd4      	ite	le
 8009ce4:	eef0 7a66 	vmovle.f32	s15, s13
 8009ce8:	eef0 7a46 	vmovgt.f32	s15, s12
 8009cec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009cf0:	3408      	adds	r4, #8
 8009cf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009cf6:	ee17 3a90 	vmov	r3, s15
 8009cfa:	f303 030f 	ssat	r3, #16, r3
 8009cfe:	f824 3c10 	strh.w	r3, [r4, #-16]
 8009d02:	ed55 7a07 	vldr	s15, [r5, #-28]	@ 0xffffffe4
 8009d06:	ee27 7aa5 	vmul.f32	s14, s15, s11
 8009d0a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8009d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d12:	bfd4      	ite	le
 8009d14:	eef0 7a66 	vmovle.f32	s15, s13
 8009d18:	eef0 7a46 	vmovgt.f32	s15, s12
 8009d1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009d20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009d24:	ee17 3a90 	vmov	r3, s15
 8009d28:	f303 030f 	ssat	r3, #16, r3
 8009d2c:	f824 3c0e 	strh.w	r3, [r4, #-14]
 8009d30:	ed55 7a06 	vldr	s15, [r5, #-24]	@ 0xffffffe8
 8009d34:	ee27 7aa5 	vmul.f32	s14, s15, s11
 8009d38:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8009d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d40:	bfd4      	ite	le
 8009d42:	eef0 7a66 	vmovle.f32	s15, s13
 8009d46:	eef0 7a46 	vmovgt.f32	s15, s12
 8009d4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009d4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009d52:	ee17 3a90 	vmov	r3, s15
 8009d56:	f303 030f 	ssat	r3, #16, r3
 8009d5a:	f824 3c0c 	strh.w	r3, [r4, #-12]
 8009d5e:	ed55 7a05 	vldr	s15, [r5, #-20]	@ 0xffffffec
 8009d62:	ee27 7aa5 	vmul.f32	s14, s15, s11
 8009d66:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8009d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d6e:	bfd4      	ite	le
 8009d70:	eef0 7a66 	vmovle.f32	s15, s13
 8009d74:	eef0 7a46 	vmovgt.f32	s15, s12
 8009d78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009d7c:	3e01      	subs	r6, #1
 8009d7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009d82:	ee17 3a90 	vmov	r3, s15
 8009d86:	f303 030f 	ssat	r3, #16, r3
 8009d8a:	f824 3c0a 	strh.w	r3, [r4, #-10]
 8009d8e:	d19f      	bne.n	8009cd0 <arm_float_to_q15+0x1c>
 8009d90:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 8009d94:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8009d98:	f012 0203 	ands.w	r2, r2, #3
 8009d9c:	d01e      	beq.n	8009ddc <arm_float_to_q15+0x128>
 8009d9e:	eddf 5a10 	vldr	s11, [pc, #64]	@ 8009de0 <arm_float_to_q15+0x12c>
 8009da2:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8009da6:	eefe 6a00 	vmov.f32	s13, #224	@ 0xbf000000 -0.5
 8009daa:	ecf0 7a01 	vldmia	r0!, {s15}
 8009dae:	ee27 7aa5 	vmul.f32	s14, s15, s11
 8009db2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8009db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dba:	bfd4      	ite	le
 8009dbc:	eef0 7a66 	vmovle.f32	s15, s13
 8009dc0:	eef0 7a46 	vmovgt.f32	s15, s12
 8009dc4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009dc8:	3a01      	subs	r2, #1
 8009dca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009dce:	ee17 3a90 	vmov	r3, s15
 8009dd2:	f303 030f 	ssat	r3, #16, r3
 8009dd6:	f821 3b02 	strh.w	r3, [r1], #2
 8009dda:	d1e6      	bne.n	8009daa <arm_float_to_q15+0xf6>
 8009ddc:	bcf0      	pop	{r4, r5, r6, r7}
 8009dde:	4770      	bx	lr
 8009de0:	47000000 	.word	0x47000000

08009de4 <arm_fir_q15>:
 8009de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009de8:	4605      	mov	r5, r0
 8009dea:	b095      	sub	sp, #84	@ 0x54
 8009dec:	686c      	ldr	r4, [r5, #4]
 8009dee:	9012      	str	r0, [sp, #72]	@ 0x48
 8009df0:	8800      	ldrh	r0, [r0, #0]
 8009df2:	940c      	str	r4, [sp, #48]	@ 0x30
 8009df4:	4626      	mov	r6, r4
 8009df6:	f100 4c00 	add.w	ip, r0, #2147483648	@ 0x80000000
 8009dfa:	68ac      	ldr	r4, [r5, #8]
 8009dfc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009dfe:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8009e02:	461f      	mov	r7, r3
 8009e04:	9408      	str	r4, [sp, #32]
 8009e06:	4623      	mov	r3, r4
 8009e08:	eb06 044c 	add.w	r4, r6, ip, lsl #1
 8009e0c:	4625      	mov	r5, r4
 8009e0e:	940d      	str	r4, [sp, #52]	@ 0x34
 8009e10:	08bc      	lsrs	r4, r7, #2
 8009e12:	9010      	str	r0, [sp, #64]	@ 0x40
 8009e14:	910e      	str	r1, [sp, #56]	@ 0x38
 8009e16:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009e18:	4627      	mov	r7, r4
 8009e1a:	9411      	str	r4, [sp, #68]	@ 0x44
 8009e1c:	f000 80c0 	beq.w	8009fa0 <arm_fir_q15+0x1bc>
 8009e20:	4604      	mov	r4, r0
 8009e22:	0880      	lsrs	r0, r0, #2
 8009e24:	9007      	str	r0, [sp, #28]
 8009e26:	00c0      	lsls	r0, r0, #3
 8009e28:	4403      	add	r3, r0
 8009e2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e2c:	f004 0303 	and.w	r3, r4, #3
 8009e30:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e32:	f105 0308 	add.w	r3, r5, #8
 8009e36:	9301      	str	r3, [sp, #4]
 8009e38:	460b      	mov	r3, r1
 8009e3a:	3308      	adds	r3, #8
 8009e3c:	9302      	str	r3, [sp, #8]
 8009e3e:	4613      	mov	r3, r2
 8009e40:	3308      	adds	r3, #8
 8009e42:	9305      	str	r3, [sp, #20]
 8009e44:	f106 0308 	add.w	r3, r6, #8
 8009e48:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009e4a:	9303      	str	r3, [sp, #12]
 8009e4c:	9704      	str	r7, [sp, #16]
 8009e4e:	9a02      	ldr	r2, [sp, #8]
 8009e50:	9c01      	ldr	r4, [sp, #4]
 8009e52:	f832 3c08 	ldrh.w	r3, [r2, #-8]
 8009e56:	f824 3c08 	strh.w	r3, [r4, #-8]
 8009e5a:	f832 3c06 	ldrh.w	r3, [r2, #-6]
 8009e5e:	f824 3c06 	strh.w	r3, [r4, #-6]
 8009e62:	4611      	mov	r1, r2
 8009e64:	9d07      	ldr	r5, [sp, #28]
 8009e66:	f831 3c04 	ldrh.w	r3, [r1, #-4]
 8009e6a:	f824 3c04 	strh.w	r3, [r4, #-4]
 8009e6e:	9a03      	ldr	r2, [sp, #12]
 8009e70:	f831 3c02 	ldrh.w	r3, [r1, #-2]
 8009e74:	f824 3c02 	strh.w	r3, [r4, #-2]
 8009e78:	f852 0c08 	ldr.w	r0, [r2, #-8]
 8009e7c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8009e80:	4613      	mov	r3, r2
 8009e82:	4611      	mov	r1, r2
 8009e84:	2d00      	cmp	r5, #0
 8009e86:	f000 810e 	beq.w	800a0a6 <arm_fir_q15+0x2c2>
 8009e8a:	3308      	adds	r3, #8
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	9306      	str	r3, [sp, #24]
 8009e90:	9908      	ldr	r1, [sp, #32]
 8009e92:	9500      	str	r5, [sp, #0]
 8009e94:	2300      	movs	r3, #0
 8009e96:	469c      	mov	ip, r3
 8009e98:	4693      	mov	fp, r2
 8009e9a:	461e      	mov	r6, r3
 8009e9c:	469e      	mov	lr, r3
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	461f      	mov	r7, r3
 8009ea2:	4698      	mov	r8, r3
 8009ea4:	f101 0a08 	add.w	sl, r1, #8
 8009ea8:	4665      	mov	r5, ip
 8009eaa:	f85a 1c08 	ldr.w	r1, [sl, #-8]
 8009eae:	fbc0 85c1 	smlald	r8, r5, r0, r1
 8009eb2:	fbc4 cec1 	smlald	ip, lr, r4, r1
 8009eb6:	eac4 0900 	pkhbt	r9, r4, r0
 8009eba:	f85b 0c08 	ldr.w	r0, [fp, #-8]
 8009ebe:	fbc9 27d1 	smlaldx	r2, r7, r9, r1
 8009ec2:	eac0 0904 	pkhbt	r9, r0, r4
 8009ec6:	fbc9 36d1 	smlaldx	r3, r6, r9, r1
 8009eca:	f85a 1c04 	ldr.w	r1, [sl, #-4]
 8009ece:	fbc4 85c1 	smlald	r8, r5, r4, r1
 8009ed2:	f85b 4c04 	ldr.w	r4, [fp, #-4]
 8009ed6:	fbc0 cec1 	smlald	ip, lr, r0, r1
 8009eda:	fbc9 27d1 	smlaldx	r2, r7, r9, r1
 8009ede:	eac4 0900 	pkhbt	r9, r4, r0
 8009ee2:	fbc9 36d1 	smlaldx	r3, r6, r9, r1
 8009ee6:	9900      	ldr	r1, [sp, #0]
 8009ee8:	3901      	subs	r1, #1
 8009eea:	f10a 0a08 	add.w	sl, sl, #8
 8009eee:	f10b 0b08 	add.w	fp, fp, #8
 8009ef2:	9100      	str	r1, [sp, #0]
 8009ef4:	d1d9      	bne.n	8009eaa <arm_fir_q15+0xc6>
 8009ef6:	46c1      	mov	r9, r8
 8009ef8:	9903      	ldr	r1, [sp, #12]
 8009efa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009efe:	46a8      	mov	r8, r5
 8009f00:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009f02:	4429      	add	r1, r5
 8009f04:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009f06:	b175      	cbz	r5, 8009f26 <arm_fir_q15+0x142>
 8009f08:	f8da 5000 	ldr.w	r5, [sl]
 8009f0c:	fbc0 98c5 	smlald	r9, r8, r0, r5
 8009f10:	fbc4 cec5 	smlald	ip, lr, r4, r5
 8009f14:	eac4 0000 	pkhbt	r0, r4, r0
 8009f18:	6809      	ldr	r1, [r1, #0]
 8009f1a:	fbc0 27d5 	smlaldx	r2, r7, r0, r5
 8009f1e:	eac1 0404 	pkhbt	r4, r1, r4
 8009f22:	fbc4 36d5 	smlaldx	r3, r6, r4, r5
 8009f26:	9805      	ldr	r0, [sp, #20]
 8009f28:	ea4f 39d9 	mov.w	r9, r9, lsr #15
 8009f2c:	0bd2      	lsrs	r2, r2, #15
 8009f2e:	ea49 4948 	orr.w	r9, r9, r8, lsl #17
 8009f32:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
 8009f36:	f309 090f 	ssat	r9, #16, r9
 8009f3a:	f302 020f 	ssat	r2, #16, r2
 8009f3e:	eac9 4202 	pkhbt	r2, r9, r2, lsl #16
 8009f42:	f840 2c08 	str.w	r2, [r0, #-8]
 8009f46:	9a01      	ldr	r2, [sp, #4]
 8009f48:	ea4f 3cdc 	mov.w	ip, ip, lsr #15
 8009f4c:	3208      	adds	r2, #8
 8009f4e:	0bdb      	lsrs	r3, r3, #15
 8009f50:	ea4c 4c4e 	orr.w	ip, ip, lr, lsl #17
 8009f54:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 8009f58:	f30c 0c0f 	ssat	ip, #16, ip
 8009f5c:	9201      	str	r2, [sp, #4]
 8009f5e:	f303 030f 	ssat	r3, #16, r3
 8009f62:	9a02      	ldr	r2, [sp, #8]
 8009f64:	eacc 4303 	pkhbt	r3, ip, r3, lsl #16
 8009f68:	f840 3c04 	str.w	r3, [r0, #-4]
 8009f6c:	f100 0308 	add.w	r3, r0, #8
 8009f70:	9305      	str	r3, [sp, #20]
 8009f72:	9b04      	ldr	r3, [sp, #16]
 8009f74:	3208      	adds	r2, #8
 8009f76:	9202      	str	r2, [sp, #8]
 8009f78:	3b01      	subs	r3, #1
 8009f7a:	9a06      	ldr	r2, [sp, #24]
 8009f7c:	9203      	str	r2, [sp, #12]
 8009f7e:	9304      	str	r3, [sp, #16]
 8009f80:	f47f af65 	bne.w	8009e4e <arm_fir_q15+0x6a>
 8009f84:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009f86:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009f88:	00db      	lsls	r3, r3, #3
 8009f8a:	441a      	add	r2, r3
 8009f8c:	920d      	str	r2, [sp, #52]	@ 0x34
 8009f8e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f90:	441a      	add	r2, r3
 8009f92:	920e      	str	r2, [sp, #56]	@ 0x38
 8009f94:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009f96:	441a      	add	r2, r3
 8009f98:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009f9a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009f9c:	441a      	add	r2, r3
 8009f9e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009fa0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009fa2:	f013 0303 	ands.w	r3, r3, #3
 8009fa6:	9302      	str	r3, [sp, #8]
 8009fa8:	d03f      	beq.n	800a02a <arm_fir_q15+0x246>
 8009faa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009fac:	f1a2 0c02 	sub.w	ip, r2, #2
 8009fb0:	9a08      	ldr	r2, [sp, #32]
 8009fb2:	f102 0904 	add.w	r9, r2, #4
 8009fb6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8009fb8:	f8cd 9004 	str.w	r9, [sp, #4]
 8009fbc:	ea4f 0852 	mov.w	r8, r2, lsr #1
 8009fc0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009fc2:	f8cd 8000 	str.w	r8, [sp]
 8009fc6:	f8dd 903c 	ldr.w	r9, [sp, #60]	@ 0x3c
 8009fca:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
 8009fce:	f102 0e04 	add.w	lr, r2, #4
 8009fd2:	461f      	mov	r7, r3
 8009fd4:	f838 3b02 	ldrh.w	r3, [r8], #2
 8009fd8:	9a01      	ldr	r2, [sp, #4]
 8009fda:	9900      	ldr	r1, [sp, #0]
 8009fdc:	f82c 3f02 	strh.w	r3, [ip, #2]!
 8009fe0:	2400      	movs	r4, #0
 8009fe2:	4673      	mov	r3, lr
 8009fe4:	2500      	movs	r5, #0
 8009fe6:	f833 bc04 	ldrh.w	fp, [r3, #-4]
 8009fea:	f832 ac04 	ldrh.w	sl, [r2, #-4]
 8009fee:	f833 6c02 	ldrh.w	r6, [r3, #-2]
 8009ff2:	f832 0c02 	ldrh.w	r0, [r2, #-2]
 8009ff6:	fbcb 458a 	smlalbb	r4, r5, fp, sl
 8009ffa:	3901      	subs	r1, #1
 8009ffc:	f103 0304 	add.w	r3, r3, #4
 800a000:	fbc6 4580 	smlalbb	r4, r5, r6, r0
 800a004:	f102 0204 	add.w	r2, r2, #4
 800a008:	d1ed      	bne.n	8009fe6 <arm_fir_q15+0x202>
 800a00a:	0be3      	lsrs	r3, r4, #15
 800a00c:	3f01      	subs	r7, #1
 800a00e:	ea43 4345 	orr.w	r3, r3, r5, lsl #17
 800a012:	f10e 0e02 	add.w	lr, lr, #2
 800a016:	f303 030f 	ssat	r3, #16, r3
 800a01a:	f829 3b02 	strh.w	r3, [r9], #2
 800a01e:	d1d9      	bne.n	8009fd4 <arm_fir_q15+0x1f0>
 800a020:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a022:	9a02      	ldr	r2, [sp, #8]
 800a024:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800a028:	930c      	str	r3, [sp, #48]	@ 0x30
 800a02a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a02c:	1e5f      	subs	r7, r3, #1
 800a02e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a030:	08bd      	lsrs	r5, r7, #2
 800a032:	685e      	ldr	r6, [r3, #4]
 800a034:	d029      	beq.n	800a08a <arm_fir_q15+0x2a6>
 800a036:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800a038:	4603      	mov	r3, r0
 800a03a:	3310      	adds	r3, #16
 800a03c:	f106 0210 	add.w	r2, r6, #16
 800a040:	4290      	cmp	r0, r2
 800a042:	bf38      	it	cc
 800a044:	429e      	cmpcc	r6, r3
 800a046:	bf2c      	ite	cs
 800a048:	2301      	movcs	r3, #1
 800a04a:	2300      	movcc	r3, #0
 800a04c:	2d06      	cmp	r5, #6
 800a04e:	bf94      	ite	ls
 800a050:	2300      	movls	r3, #0
 800a052:	f003 0301 	andhi.w	r3, r3, #1
 800a056:	b3a3      	cbz	r3, 800a0c2 <arm_fir_q15+0x2de>
 800a058:	4603      	mov	r3, r0
 800a05a:	4333      	orrs	r3, r6
 800a05c:	079b      	lsls	r3, r3, #30
 800a05e:	d130      	bne.n	800a0c2 <arm_fir_q15+0x2de>
 800a060:	f100 0208 	add.w	r2, r0, #8
 800a064:	f106 0308 	add.w	r3, r6, #8
 800a068:	2100      	movs	r1, #0
 800a06a:	e912 0011 	ldmdb	r2, {r0, r4}
 800a06e:	3101      	adds	r1, #1
 800a070:	42a9      	cmp	r1, r5
 800a072:	e903 0011 	stmdb	r3, {r0, r4}
 800a076:	f102 0208 	add.w	r2, r2, #8
 800a07a:	f103 0308 	add.w	r3, r3, #8
 800a07e:	d1f4      	bne.n	800a06a <arm_fir_q15+0x286>
 800a080:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a082:	00ed      	lsls	r5, r5, #3
 800a084:	442b      	add	r3, r5
 800a086:	442e      	add	r6, r5
 800a088:	930c      	str	r3, [sp, #48]	@ 0x30
 800a08a:	f017 0303 	ands.w	r3, r7, #3
 800a08e:	d007      	beq.n	800a0a0 <arm_fir_q15+0x2bc>
 800a090:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a092:	3e02      	subs	r6, #2
 800a094:	f832 1b02 	ldrh.w	r1, [r2], #2
 800a098:	f826 1f02 	strh.w	r1, [r6, #2]!
 800a09c:	3b01      	subs	r3, #1
 800a09e:	d1f9      	bne.n	800a094 <arm_fir_q15+0x2b0>
 800a0a0:	b015      	add	sp, #84	@ 0x54
 800a0a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0a6:	46a8      	mov	r8, r5
 800a0a8:	462b      	mov	r3, r5
 800a0aa:	462e      	mov	r6, r5
 800a0ac:	46ac      	mov	ip, r5
 800a0ae:	46ae      	mov	lr, r5
 800a0b0:	462a      	mov	r2, r5
 800a0b2:	462f      	mov	r7, r5
 800a0b4:	46a9      	mov	r9, r5
 800a0b6:	f101 0508 	add.w	r5, r1, #8
 800a0ba:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a0be:	9506      	str	r5, [sp, #24]
 800a0c0:	e720      	b.n	8009f04 <arm_fir_q15+0x120>
 800a0c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a0c4:	f106 0208 	add.w	r2, r6, #8
 800a0c8:	3308      	adds	r3, #8
 800a0ca:	4629      	mov	r1, r5
 800a0cc:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 800a0d0:	f822 0c08 	strh.w	r0, [r2, #-8]
 800a0d4:	f833 0c06 	ldrh.w	r0, [r3, #-6]
 800a0d8:	f822 0c06 	strh.w	r0, [r2, #-6]
 800a0dc:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 800a0e0:	f822 0c04 	strh.w	r0, [r2, #-4]
 800a0e4:	f833 0c02 	ldrh.w	r0, [r3, #-2]
 800a0e8:	f822 0c02 	strh.w	r0, [r2, #-2]
 800a0ec:	3901      	subs	r1, #1
 800a0ee:	f103 0308 	add.w	r3, r3, #8
 800a0f2:	f102 0208 	add.w	r2, r2, #8
 800a0f6:	d1e9      	bne.n	800a0cc <arm_fir_q15+0x2e8>
 800a0f8:	e7c2      	b.n	800a080 <arm_fir_q15+0x29c>
 800a0fa:	bf00      	nop

0800a0fc <arm_fir_init_q15>:
 800a0fc:	b570      	push	{r4, r5, r6, lr}
 800a0fe:	f011 0401 	ands.w	r4, r1, #1
 800a102:	d10f      	bne.n	800a124 <arm_fir_init_q15+0x28>
 800a104:	461e      	mov	r6, r3
 800a106:	9b04      	ldr	r3, [sp, #16]
 800a108:	4605      	mov	r5, r0
 800a10a:	4610      	mov	r0, r2
 800a10c:	18ca      	adds	r2, r1, r3
 800a10e:	8029      	strh	r1, [r5, #0]
 800a110:	60a8      	str	r0, [r5, #8]
 800a112:	0052      	lsls	r2, r2, #1
 800a114:	4630      	mov	r0, r6
 800a116:	4621      	mov	r1, r4
 800a118:	f000 f8c4 	bl	800a2a4 <memset>
 800a11c:	606e      	str	r6, [r5, #4]
 800a11e:	4620      	mov	r0, r4
 800a120:	b240      	sxtb	r0, r0
 800a122:	bd70      	pop	{r4, r5, r6, pc}
 800a124:	20ff      	movs	r0, #255	@ 0xff
 800a126:	e7fb      	b.n	800a120 <arm_fir_init_q15+0x24>

0800a128 <malloc>:
 800a128:	4b02      	ldr	r3, [pc, #8]	@ (800a134 <malloc+0xc>)
 800a12a:	4601      	mov	r1, r0
 800a12c:	6818      	ldr	r0, [r3, #0]
 800a12e:	f000 b82d 	b.w	800a18c <_malloc_r>
 800a132:	bf00      	nop
 800a134:	2000082c 	.word	0x2000082c

0800a138 <free>:
 800a138:	4b02      	ldr	r3, [pc, #8]	@ (800a144 <free+0xc>)
 800a13a:	4601      	mov	r1, r0
 800a13c:	6818      	ldr	r0, [r3, #0]
 800a13e:	f000 b8f5 	b.w	800a32c <_free_r>
 800a142:	bf00      	nop
 800a144:	2000082c 	.word	0x2000082c

0800a148 <sbrk_aligned>:
 800a148:	b570      	push	{r4, r5, r6, lr}
 800a14a:	4e0f      	ldr	r6, [pc, #60]	@ (800a188 <sbrk_aligned+0x40>)
 800a14c:	460c      	mov	r4, r1
 800a14e:	6831      	ldr	r1, [r6, #0]
 800a150:	4605      	mov	r5, r0
 800a152:	b911      	cbnz	r1, 800a15a <sbrk_aligned+0x12>
 800a154:	f000 f8ae 	bl	800a2b4 <_sbrk_r>
 800a158:	6030      	str	r0, [r6, #0]
 800a15a:	4621      	mov	r1, r4
 800a15c:	4628      	mov	r0, r5
 800a15e:	f000 f8a9 	bl	800a2b4 <_sbrk_r>
 800a162:	1c43      	adds	r3, r0, #1
 800a164:	d103      	bne.n	800a16e <sbrk_aligned+0x26>
 800a166:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a16a:	4620      	mov	r0, r4
 800a16c:	bd70      	pop	{r4, r5, r6, pc}
 800a16e:	1cc4      	adds	r4, r0, #3
 800a170:	f024 0403 	bic.w	r4, r4, #3
 800a174:	42a0      	cmp	r0, r4
 800a176:	d0f8      	beq.n	800a16a <sbrk_aligned+0x22>
 800a178:	1a21      	subs	r1, r4, r0
 800a17a:	4628      	mov	r0, r5
 800a17c:	f000 f89a 	bl	800a2b4 <_sbrk_r>
 800a180:	3001      	adds	r0, #1
 800a182:	d1f2      	bne.n	800a16a <sbrk_aligned+0x22>
 800a184:	e7ef      	b.n	800a166 <sbrk_aligned+0x1e>
 800a186:	bf00      	nop
 800a188:	20002cb4 	.word	0x20002cb4

0800a18c <_malloc_r>:
 800a18c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a190:	1ccd      	adds	r5, r1, #3
 800a192:	f025 0503 	bic.w	r5, r5, #3
 800a196:	3508      	adds	r5, #8
 800a198:	2d0c      	cmp	r5, #12
 800a19a:	bf38      	it	cc
 800a19c:	250c      	movcc	r5, #12
 800a19e:	2d00      	cmp	r5, #0
 800a1a0:	4606      	mov	r6, r0
 800a1a2:	db01      	blt.n	800a1a8 <_malloc_r+0x1c>
 800a1a4:	42a9      	cmp	r1, r5
 800a1a6:	d904      	bls.n	800a1b2 <_malloc_r+0x26>
 800a1a8:	230c      	movs	r3, #12
 800a1aa:	6033      	str	r3, [r6, #0]
 800a1ac:	2000      	movs	r0, #0
 800a1ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a288 <_malloc_r+0xfc>
 800a1b6:	f000 f869 	bl	800a28c <__malloc_lock>
 800a1ba:	f8d8 3000 	ldr.w	r3, [r8]
 800a1be:	461c      	mov	r4, r3
 800a1c0:	bb44      	cbnz	r4, 800a214 <_malloc_r+0x88>
 800a1c2:	4629      	mov	r1, r5
 800a1c4:	4630      	mov	r0, r6
 800a1c6:	f7ff ffbf 	bl	800a148 <sbrk_aligned>
 800a1ca:	1c43      	adds	r3, r0, #1
 800a1cc:	4604      	mov	r4, r0
 800a1ce:	d158      	bne.n	800a282 <_malloc_r+0xf6>
 800a1d0:	f8d8 4000 	ldr.w	r4, [r8]
 800a1d4:	4627      	mov	r7, r4
 800a1d6:	2f00      	cmp	r7, #0
 800a1d8:	d143      	bne.n	800a262 <_malloc_r+0xd6>
 800a1da:	2c00      	cmp	r4, #0
 800a1dc:	d04b      	beq.n	800a276 <_malloc_r+0xea>
 800a1de:	6823      	ldr	r3, [r4, #0]
 800a1e0:	4639      	mov	r1, r7
 800a1e2:	4630      	mov	r0, r6
 800a1e4:	eb04 0903 	add.w	r9, r4, r3
 800a1e8:	f000 f864 	bl	800a2b4 <_sbrk_r>
 800a1ec:	4581      	cmp	r9, r0
 800a1ee:	d142      	bne.n	800a276 <_malloc_r+0xea>
 800a1f0:	6821      	ldr	r1, [r4, #0]
 800a1f2:	1a6d      	subs	r5, r5, r1
 800a1f4:	4629      	mov	r1, r5
 800a1f6:	4630      	mov	r0, r6
 800a1f8:	f7ff ffa6 	bl	800a148 <sbrk_aligned>
 800a1fc:	3001      	adds	r0, #1
 800a1fe:	d03a      	beq.n	800a276 <_malloc_r+0xea>
 800a200:	6823      	ldr	r3, [r4, #0]
 800a202:	442b      	add	r3, r5
 800a204:	6023      	str	r3, [r4, #0]
 800a206:	f8d8 3000 	ldr.w	r3, [r8]
 800a20a:	685a      	ldr	r2, [r3, #4]
 800a20c:	bb62      	cbnz	r2, 800a268 <_malloc_r+0xdc>
 800a20e:	f8c8 7000 	str.w	r7, [r8]
 800a212:	e00f      	b.n	800a234 <_malloc_r+0xa8>
 800a214:	6822      	ldr	r2, [r4, #0]
 800a216:	1b52      	subs	r2, r2, r5
 800a218:	d420      	bmi.n	800a25c <_malloc_r+0xd0>
 800a21a:	2a0b      	cmp	r2, #11
 800a21c:	d917      	bls.n	800a24e <_malloc_r+0xc2>
 800a21e:	1961      	adds	r1, r4, r5
 800a220:	42a3      	cmp	r3, r4
 800a222:	6025      	str	r5, [r4, #0]
 800a224:	bf18      	it	ne
 800a226:	6059      	strne	r1, [r3, #4]
 800a228:	6863      	ldr	r3, [r4, #4]
 800a22a:	bf08      	it	eq
 800a22c:	f8c8 1000 	streq.w	r1, [r8]
 800a230:	5162      	str	r2, [r4, r5]
 800a232:	604b      	str	r3, [r1, #4]
 800a234:	4630      	mov	r0, r6
 800a236:	f000 f82f 	bl	800a298 <__malloc_unlock>
 800a23a:	f104 000b 	add.w	r0, r4, #11
 800a23e:	1d23      	adds	r3, r4, #4
 800a240:	f020 0007 	bic.w	r0, r0, #7
 800a244:	1ac2      	subs	r2, r0, r3
 800a246:	bf1c      	itt	ne
 800a248:	1a1b      	subne	r3, r3, r0
 800a24a:	50a3      	strne	r3, [r4, r2]
 800a24c:	e7af      	b.n	800a1ae <_malloc_r+0x22>
 800a24e:	6862      	ldr	r2, [r4, #4]
 800a250:	42a3      	cmp	r3, r4
 800a252:	bf0c      	ite	eq
 800a254:	f8c8 2000 	streq.w	r2, [r8]
 800a258:	605a      	strne	r2, [r3, #4]
 800a25a:	e7eb      	b.n	800a234 <_malloc_r+0xa8>
 800a25c:	4623      	mov	r3, r4
 800a25e:	6864      	ldr	r4, [r4, #4]
 800a260:	e7ae      	b.n	800a1c0 <_malloc_r+0x34>
 800a262:	463c      	mov	r4, r7
 800a264:	687f      	ldr	r7, [r7, #4]
 800a266:	e7b6      	b.n	800a1d6 <_malloc_r+0x4a>
 800a268:	461a      	mov	r2, r3
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	42a3      	cmp	r3, r4
 800a26e:	d1fb      	bne.n	800a268 <_malloc_r+0xdc>
 800a270:	2300      	movs	r3, #0
 800a272:	6053      	str	r3, [r2, #4]
 800a274:	e7de      	b.n	800a234 <_malloc_r+0xa8>
 800a276:	230c      	movs	r3, #12
 800a278:	6033      	str	r3, [r6, #0]
 800a27a:	4630      	mov	r0, r6
 800a27c:	f000 f80c 	bl	800a298 <__malloc_unlock>
 800a280:	e794      	b.n	800a1ac <_malloc_r+0x20>
 800a282:	6005      	str	r5, [r0, #0]
 800a284:	e7d6      	b.n	800a234 <_malloc_r+0xa8>
 800a286:	bf00      	nop
 800a288:	20002cb8 	.word	0x20002cb8

0800a28c <__malloc_lock>:
 800a28c:	4801      	ldr	r0, [pc, #4]	@ (800a294 <__malloc_lock+0x8>)
 800a28e:	f000 b84b 	b.w	800a328 <__retarget_lock_acquire_recursive>
 800a292:	bf00      	nop
 800a294:	20002df8 	.word	0x20002df8

0800a298 <__malloc_unlock>:
 800a298:	4801      	ldr	r0, [pc, #4]	@ (800a2a0 <__malloc_unlock+0x8>)
 800a29a:	f000 b846 	b.w	800a32a <__retarget_lock_release_recursive>
 800a29e:	bf00      	nop
 800a2a0:	20002df8 	.word	0x20002df8

0800a2a4 <memset>:
 800a2a4:	4402      	add	r2, r0
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d100      	bne.n	800a2ae <memset+0xa>
 800a2ac:	4770      	bx	lr
 800a2ae:	f803 1b01 	strb.w	r1, [r3], #1
 800a2b2:	e7f9      	b.n	800a2a8 <memset+0x4>

0800a2b4 <_sbrk_r>:
 800a2b4:	b538      	push	{r3, r4, r5, lr}
 800a2b6:	4d06      	ldr	r5, [pc, #24]	@ (800a2d0 <_sbrk_r+0x1c>)
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	4604      	mov	r4, r0
 800a2bc:	4608      	mov	r0, r1
 800a2be:	602b      	str	r3, [r5, #0]
 800a2c0:	f7f6 fff2 	bl	80012a8 <_sbrk>
 800a2c4:	1c43      	adds	r3, r0, #1
 800a2c6:	d102      	bne.n	800a2ce <_sbrk_r+0x1a>
 800a2c8:	682b      	ldr	r3, [r5, #0]
 800a2ca:	b103      	cbz	r3, 800a2ce <_sbrk_r+0x1a>
 800a2cc:	6023      	str	r3, [r4, #0]
 800a2ce:	bd38      	pop	{r3, r4, r5, pc}
 800a2d0:	20002df4 	.word	0x20002df4

0800a2d4 <__errno>:
 800a2d4:	4b01      	ldr	r3, [pc, #4]	@ (800a2dc <__errno+0x8>)
 800a2d6:	6818      	ldr	r0, [r3, #0]
 800a2d8:	4770      	bx	lr
 800a2da:	bf00      	nop
 800a2dc:	2000082c 	.word	0x2000082c

0800a2e0 <__libc_init_array>:
 800a2e0:	b570      	push	{r4, r5, r6, lr}
 800a2e2:	4d0d      	ldr	r5, [pc, #52]	@ (800a318 <__libc_init_array+0x38>)
 800a2e4:	4c0d      	ldr	r4, [pc, #52]	@ (800a31c <__libc_init_array+0x3c>)
 800a2e6:	1b64      	subs	r4, r4, r5
 800a2e8:	10a4      	asrs	r4, r4, #2
 800a2ea:	2600      	movs	r6, #0
 800a2ec:	42a6      	cmp	r6, r4
 800a2ee:	d109      	bne.n	800a304 <__libc_init_array+0x24>
 800a2f0:	4d0b      	ldr	r5, [pc, #44]	@ (800a320 <__libc_init_array+0x40>)
 800a2f2:	4c0c      	ldr	r4, [pc, #48]	@ (800a324 <__libc_init_array+0x44>)
 800a2f4:	f000 f864 	bl	800a3c0 <_init>
 800a2f8:	1b64      	subs	r4, r4, r5
 800a2fa:	10a4      	asrs	r4, r4, #2
 800a2fc:	2600      	movs	r6, #0
 800a2fe:	42a6      	cmp	r6, r4
 800a300:	d105      	bne.n	800a30e <__libc_init_array+0x2e>
 800a302:	bd70      	pop	{r4, r5, r6, pc}
 800a304:	f855 3b04 	ldr.w	r3, [r5], #4
 800a308:	4798      	blx	r3
 800a30a:	3601      	adds	r6, #1
 800a30c:	e7ee      	b.n	800a2ec <__libc_init_array+0xc>
 800a30e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a312:	4798      	blx	r3
 800a314:	3601      	adds	r6, #1
 800a316:	e7f2      	b.n	800a2fe <__libc_init_array+0x1e>
 800a318:	0800a404 	.word	0x0800a404
 800a31c:	0800a404 	.word	0x0800a404
 800a320:	0800a404 	.word	0x0800a404
 800a324:	0800a408 	.word	0x0800a408

0800a328 <__retarget_lock_acquire_recursive>:
 800a328:	4770      	bx	lr

0800a32a <__retarget_lock_release_recursive>:
 800a32a:	4770      	bx	lr

0800a32c <_free_r>:
 800a32c:	b538      	push	{r3, r4, r5, lr}
 800a32e:	4605      	mov	r5, r0
 800a330:	2900      	cmp	r1, #0
 800a332:	d041      	beq.n	800a3b8 <_free_r+0x8c>
 800a334:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a338:	1f0c      	subs	r4, r1, #4
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	bfb8      	it	lt
 800a33e:	18e4      	addlt	r4, r4, r3
 800a340:	f7ff ffa4 	bl	800a28c <__malloc_lock>
 800a344:	4a1d      	ldr	r2, [pc, #116]	@ (800a3bc <_free_r+0x90>)
 800a346:	6813      	ldr	r3, [r2, #0]
 800a348:	b933      	cbnz	r3, 800a358 <_free_r+0x2c>
 800a34a:	6063      	str	r3, [r4, #4]
 800a34c:	6014      	str	r4, [r2, #0]
 800a34e:	4628      	mov	r0, r5
 800a350:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a354:	f7ff bfa0 	b.w	800a298 <__malloc_unlock>
 800a358:	42a3      	cmp	r3, r4
 800a35a:	d908      	bls.n	800a36e <_free_r+0x42>
 800a35c:	6820      	ldr	r0, [r4, #0]
 800a35e:	1821      	adds	r1, r4, r0
 800a360:	428b      	cmp	r3, r1
 800a362:	bf01      	itttt	eq
 800a364:	6819      	ldreq	r1, [r3, #0]
 800a366:	685b      	ldreq	r3, [r3, #4]
 800a368:	1809      	addeq	r1, r1, r0
 800a36a:	6021      	streq	r1, [r4, #0]
 800a36c:	e7ed      	b.n	800a34a <_free_r+0x1e>
 800a36e:	461a      	mov	r2, r3
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	b10b      	cbz	r3, 800a378 <_free_r+0x4c>
 800a374:	42a3      	cmp	r3, r4
 800a376:	d9fa      	bls.n	800a36e <_free_r+0x42>
 800a378:	6811      	ldr	r1, [r2, #0]
 800a37a:	1850      	adds	r0, r2, r1
 800a37c:	42a0      	cmp	r0, r4
 800a37e:	d10b      	bne.n	800a398 <_free_r+0x6c>
 800a380:	6820      	ldr	r0, [r4, #0]
 800a382:	4401      	add	r1, r0
 800a384:	1850      	adds	r0, r2, r1
 800a386:	4283      	cmp	r3, r0
 800a388:	6011      	str	r1, [r2, #0]
 800a38a:	d1e0      	bne.n	800a34e <_free_r+0x22>
 800a38c:	6818      	ldr	r0, [r3, #0]
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	6053      	str	r3, [r2, #4]
 800a392:	4408      	add	r0, r1
 800a394:	6010      	str	r0, [r2, #0]
 800a396:	e7da      	b.n	800a34e <_free_r+0x22>
 800a398:	d902      	bls.n	800a3a0 <_free_r+0x74>
 800a39a:	230c      	movs	r3, #12
 800a39c:	602b      	str	r3, [r5, #0]
 800a39e:	e7d6      	b.n	800a34e <_free_r+0x22>
 800a3a0:	6820      	ldr	r0, [r4, #0]
 800a3a2:	1821      	adds	r1, r4, r0
 800a3a4:	428b      	cmp	r3, r1
 800a3a6:	bf04      	itt	eq
 800a3a8:	6819      	ldreq	r1, [r3, #0]
 800a3aa:	685b      	ldreq	r3, [r3, #4]
 800a3ac:	6063      	str	r3, [r4, #4]
 800a3ae:	bf04      	itt	eq
 800a3b0:	1809      	addeq	r1, r1, r0
 800a3b2:	6021      	streq	r1, [r4, #0]
 800a3b4:	6054      	str	r4, [r2, #4]
 800a3b6:	e7ca      	b.n	800a34e <_free_r+0x22>
 800a3b8:	bd38      	pop	{r3, r4, r5, pc}
 800a3ba:	bf00      	nop
 800a3bc:	20002cb8 	.word	0x20002cb8

0800a3c0 <_init>:
 800a3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3c2:	bf00      	nop
 800a3c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3c6:	bc08      	pop	{r3}
 800a3c8:	469e      	mov	lr, r3
 800a3ca:	4770      	bx	lr

0800a3cc <_fini>:
 800a3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ce:	bf00      	nop
 800a3d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3d2:	bc08      	pop	{r3}
 800a3d4:	469e      	mov	lr, r3
 800a3d6:	4770      	bx	lr
