
Projekt_DOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c970  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d8  0800cb00  0800cb00  0000db00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cdd8  0800cdd8  0000e088  2**0
                  CONTENTS
  4 .ARM          00000008  0800cdd8  0800cdd8  0000ddd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cde0  0800cde0  0000e088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cde0  0800cde0  0000dde0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cde4  0800cde4  0000dde4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800cde8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e088  2**0
                  CONTENTS
 10 .bss          00000b70  20000088  20000088  0000e088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000bf8  20000bf8  0000e088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ba6e  00000000  00000000  0000e0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004926  00000000  00000000  00029b26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001800  00000000  00000000  0002e450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001265  00000000  00000000  0002fc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026bbf  00000000  00000000  00030eb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ff53  00000000  00000000  00057a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d64cf  00000000  00000000  000779c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014de96  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000070f8  00000000  00000000  0014dedc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00154fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cae8 	.word	0x0800cae8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800cae8 	.word	0x0800cae8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2f>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b74:	bf24      	itt	cs
 8000b76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b7e:	d90d      	bls.n	8000b9c <__aeabi_d2f+0x30>
 8000b80:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b8c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b94:	bf08      	it	eq
 8000b96:	f020 0001 	biceq.w	r0, r0, #1
 8000b9a:	4770      	bx	lr
 8000b9c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ba0:	d121      	bne.n	8000be6 <__aeabi_d2f+0x7a>
 8000ba2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ba6:	bfbc      	itt	lt
 8000ba8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bac:	4770      	bxlt	lr
 8000bae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb6:	f1c2 0218 	rsb	r2, r2, #24
 8000bba:	f1c2 0c20 	rsb	ip, r2, #32
 8000bbe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc6:	bf18      	it	ne
 8000bc8:	f040 0001 	orrne.w	r0, r0, #1
 8000bcc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd8:	ea40 000c 	orr.w	r0, r0, ip
 8000bdc:	fa23 f302 	lsr.w	r3, r3, r2
 8000be0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be4:	e7cc      	b.n	8000b80 <__aeabi_d2f+0x14>
 8000be6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bea:	d107      	bne.n	8000bfc <__aeabi_d2f+0x90>
 8000bec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bf6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bfa:	4770      	bxne	lr
 8000bfc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c00:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c20:	f000 b96a 	b.w	8000ef8 <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f806 	bl	8000c3c <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__udivmoddi4>:
 8000c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c40:	9d08      	ldr	r5, [sp, #32]
 8000c42:	460c      	mov	r4, r1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d14e      	bne.n	8000ce6 <__udivmoddi4+0xaa>
 8000c48:	4694      	mov	ip, r2
 8000c4a:	458c      	cmp	ip, r1
 8000c4c:	4686      	mov	lr, r0
 8000c4e:	fab2 f282 	clz	r2, r2
 8000c52:	d962      	bls.n	8000d1a <__udivmoddi4+0xde>
 8000c54:	b14a      	cbz	r2, 8000c6a <__udivmoddi4+0x2e>
 8000c56:	f1c2 0320 	rsb	r3, r2, #32
 8000c5a:	4091      	lsls	r1, r2
 8000c5c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c64:	4319      	orrs	r1, r3
 8000c66:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6e:	fa1f f68c 	uxth.w	r6, ip
 8000c72:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c76:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c7a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c82:	fb04 f106 	mul.w	r1, r4, r6
 8000c86:	4299      	cmp	r1, r3
 8000c88:	d90a      	bls.n	8000ca0 <__udivmoddi4+0x64>
 8000c8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c92:	f080 8112 	bcs.w	8000eba <__udivmoddi4+0x27e>
 8000c96:	4299      	cmp	r1, r3
 8000c98:	f240 810f 	bls.w	8000eba <__udivmoddi4+0x27e>
 8000c9c:	3c02      	subs	r4, #2
 8000c9e:	4463      	add	r3, ip
 8000ca0:	1a59      	subs	r1, r3, r1
 8000ca2:	fa1f f38e 	uxth.w	r3, lr
 8000ca6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000caa:	fb07 1110 	mls	r1, r7, r0, r1
 8000cae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb2:	fb00 f606 	mul.w	r6, r0, r6
 8000cb6:	429e      	cmp	r6, r3
 8000cb8:	d90a      	bls.n	8000cd0 <__udivmoddi4+0x94>
 8000cba:	eb1c 0303 	adds.w	r3, ip, r3
 8000cbe:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000cc2:	f080 80fc 	bcs.w	8000ebe <__udivmoddi4+0x282>
 8000cc6:	429e      	cmp	r6, r3
 8000cc8:	f240 80f9 	bls.w	8000ebe <__udivmoddi4+0x282>
 8000ccc:	4463      	add	r3, ip
 8000cce:	3802      	subs	r0, #2
 8000cd0:	1b9b      	subs	r3, r3, r6
 8000cd2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	b11d      	cbz	r5, 8000ce2 <__udivmoddi4+0xa6>
 8000cda:	40d3      	lsrs	r3, r2
 8000cdc:	2200      	movs	r2, #0
 8000cde:	e9c5 3200 	strd	r3, r2, [r5]
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d905      	bls.n	8000cf6 <__udivmoddi4+0xba>
 8000cea:	b10d      	cbz	r5, 8000cf0 <__udivmoddi4+0xb4>
 8000cec:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4608      	mov	r0, r1
 8000cf4:	e7f5      	b.n	8000ce2 <__udivmoddi4+0xa6>
 8000cf6:	fab3 f183 	clz	r1, r3
 8000cfa:	2900      	cmp	r1, #0
 8000cfc:	d146      	bne.n	8000d8c <__udivmoddi4+0x150>
 8000cfe:	42a3      	cmp	r3, r4
 8000d00:	d302      	bcc.n	8000d08 <__udivmoddi4+0xcc>
 8000d02:	4290      	cmp	r0, r2
 8000d04:	f0c0 80f0 	bcc.w	8000ee8 <__udivmoddi4+0x2ac>
 8000d08:	1a86      	subs	r6, r0, r2
 8000d0a:	eb64 0303 	sbc.w	r3, r4, r3
 8000d0e:	2001      	movs	r0, #1
 8000d10:	2d00      	cmp	r5, #0
 8000d12:	d0e6      	beq.n	8000ce2 <__udivmoddi4+0xa6>
 8000d14:	e9c5 6300 	strd	r6, r3, [r5]
 8000d18:	e7e3      	b.n	8000ce2 <__udivmoddi4+0xa6>
 8000d1a:	2a00      	cmp	r2, #0
 8000d1c:	f040 8090 	bne.w	8000e40 <__udivmoddi4+0x204>
 8000d20:	eba1 040c 	sub.w	r4, r1, ip
 8000d24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d28:	fa1f f78c 	uxth.w	r7, ip
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d36:	fb08 4416 	mls	r4, r8, r6, r4
 8000d3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d3e:	fb07 f006 	mul.w	r0, r7, r6
 8000d42:	4298      	cmp	r0, r3
 8000d44:	d908      	bls.n	8000d58 <__udivmoddi4+0x11c>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d4e:	d202      	bcs.n	8000d56 <__udivmoddi4+0x11a>
 8000d50:	4298      	cmp	r0, r3
 8000d52:	f200 80cd 	bhi.w	8000ef0 <__udivmoddi4+0x2b4>
 8000d56:	4626      	mov	r6, r4
 8000d58:	1a1c      	subs	r4, r3, r0
 8000d5a:	fa1f f38e 	uxth.w	r3, lr
 8000d5e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d62:	fb08 4410 	mls	r4, r8, r0, r4
 8000d66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d6a:	fb00 f707 	mul.w	r7, r0, r7
 8000d6e:	429f      	cmp	r7, r3
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x148>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x146>
 8000d7c:	429f      	cmp	r7, r3
 8000d7e:	f200 80b0 	bhi.w	8000ee2 <__udivmoddi4+0x2a6>
 8000d82:	4620      	mov	r0, r4
 8000d84:	1bdb      	subs	r3, r3, r7
 8000d86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d8a:	e7a5      	b.n	8000cd8 <__udivmoddi4+0x9c>
 8000d8c:	f1c1 0620 	rsb	r6, r1, #32
 8000d90:	408b      	lsls	r3, r1
 8000d92:	fa22 f706 	lsr.w	r7, r2, r6
 8000d96:	431f      	orrs	r7, r3
 8000d98:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d9c:	fa04 f301 	lsl.w	r3, r4, r1
 8000da0:	ea43 030c 	orr.w	r3, r3, ip
 8000da4:	40f4      	lsrs	r4, r6
 8000da6:	fa00 f801 	lsl.w	r8, r0, r1
 8000daa:	0c38      	lsrs	r0, r7, #16
 8000dac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000db0:	fbb4 fef0 	udiv	lr, r4, r0
 8000db4:	fa1f fc87 	uxth.w	ip, r7
 8000db8:	fb00 441e 	mls	r4, r0, lr, r4
 8000dbc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc0:	fb0e f90c 	mul.w	r9, lr, ip
 8000dc4:	45a1      	cmp	r9, r4
 8000dc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dca:	d90a      	bls.n	8000de2 <__udivmoddi4+0x1a6>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dd2:	f080 8084 	bcs.w	8000ede <__udivmoddi4+0x2a2>
 8000dd6:	45a1      	cmp	r9, r4
 8000dd8:	f240 8081 	bls.w	8000ede <__udivmoddi4+0x2a2>
 8000ddc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000de0:	443c      	add	r4, r7
 8000de2:	eba4 0409 	sub.w	r4, r4, r9
 8000de6:	fa1f f983 	uxth.w	r9, r3
 8000dea:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dee:	fb00 4413 	mls	r4, r0, r3, r4
 8000df2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000df6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dfa:	45a4      	cmp	ip, r4
 8000dfc:	d907      	bls.n	8000e0e <__udivmoddi4+0x1d2>
 8000dfe:	193c      	adds	r4, r7, r4
 8000e00:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e04:	d267      	bcs.n	8000ed6 <__udivmoddi4+0x29a>
 8000e06:	45a4      	cmp	ip, r4
 8000e08:	d965      	bls.n	8000ed6 <__udivmoddi4+0x29a>
 8000e0a:	3b02      	subs	r3, #2
 8000e0c:	443c      	add	r4, r7
 8000e0e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e12:	fba0 9302 	umull	r9, r3, r0, r2
 8000e16:	eba4 040c 	sub.w	r4, r4, ip
 8000e1a:	429c      	cmp	r4, r3
 8000e1c:	46ce      	mov	lr, r9
 8000e1e:	469c      	mov	ip, r3
 8000e20:	d351      	bcc.n	8000ec6 <__udivmoddi4+0x28a>
 8000e22:	d04e      	beq.n	8000ec2 <__udivmoddi4+0x286>
 8000e24:	b155      	cbz	r5, 8000e3c <__udivmoddi4+0x200>
 8000e26:	ebb8 030e 	subs.w	r3, r8, lr
 8000e2a:	eb64 040c 	sbc.w	r4, r4, ip
 8000e2e:	fa04 f606 	lsl.w	r6, r4, r6
 8000e32:	40cb      	lsrs	r3, r1
 8000e34:	431e      	orrs	r6, r3
 8000e36:	40cc      	lsrs	r4, r1
 8000e38:	e9c5 6400 	strd	r6, r4, [r5]
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	e750      	b.n	8000ce2 <__udivmoddi4+0xa6>
 8000e40:	f1c2 0320 	rsb	r3, r2, #32
 8000e44:	fa20 f103 	lsr.w	r1, r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa24 f303 	lsr.w	r3, r4, r3
 8000e50:	4094      	lsls	r4, r2
 8000e52:	430c      	orrs	r4, r1
 8000e54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e58:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e5c:	fa1f f78c 	uxth.w	r7, ip
 8000e60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e64:	fb08 3110 	mls	r1, r8, r0, r3
 8000e68:	0c23      	lsrs	r3, r4, #16
 8000e6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6e:	fb00 f107 	mul.w	r1, r0, r7
 8000e72:	4299      	cmp	r1, r3
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x24c>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e7e:	d22c      	bcs.n	8000eda <__udivmoddi4+0x29e>
 8000e80:	4299      	cmp	r1, r3
 8000e82:	d92a      	bls.n	8000eda <__udivmoddi4+0x29e>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1a5b      	subs	r3, r3, r1
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e90:	fb08 3311 	mls	r3, r8, r1, r3
 8000e94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e98:	fb01 f307 	mul.w	r3, r1, r7
 8000e9c:	42a3      	cmp	r3, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x276>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ea8:	d213      	bcs.n	8000ed2 <__udivmoddi4+0x296>
 8000eaa:	42a3      	cmp	r3, r4
 8000eac:	d911      	bls.n	8000ed2 <__udivmoddi4+0x296>
 8000eae:	3902      	subs	r1, #2
 8000eb0:	4464      	add	r4, ip
 8000eb2:	1ae4      	subs	r4, r4, r3
 8000eb4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000eb8:	e739      	b.n	8000d2e <__udivmoddi4+0xf2>
 8000eba:	4604      	mov	r4, r0
 8000ebc:	e6f0      	b.n	8000ca0 <__udivmoddi4+0x64>
 8000ebe:	4608      	mov	r0, r1
 8000ec0:	e706      	b.n	8000cd0 <__udivmoddi4+0x94>
 8000ec2:	45c8      	cmp	r8, r9
 8000ec4:	d2ae      	bcs.n	8000e24 <__udivmoddi4+0x1e8>
 8000ec6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eca:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ece:	3801      	subs	r0, #1
 8000ed0:	e7a8      	b.n	8000e24 <__udivmoddi4+0x1e8>
 8000ed2:	4631      	mov	r1, r6
 8000ed4:	e7ed      	b.n	8000eb2 <__udivmoddi4+0x276>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	e799      	b.n	8000e0e <__udivmoddi4+0x1d2>
 8000eda:	4630      	mov	r0, r6
 8000edc:	e7d4      	b.n	8000e88 <__udivmoddi4+0x24c>
 8000ede:	46d6      	mov	lr, sl
 8000ee0:	e77f      	b.n	8000de2 <__udivmoddi4+0x1a6>
 8000ee2:	4463      	add	r3, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e74d      	b.n	8000d84 <__udivmoddi4+0x148>
 8000ee8:	4606      	mov	r6, r0
 8000eea:	4623      	mov	r3, r4
 8000eec:	4608      	mov	r0, r1
 8000eee:	e70f      	b.n	8000d10 <__udivmoddi4+0xd4>
 8000ef0:	3e02      	subs	r6, #2
 8000ef2:	4463      	add	r3, ip
 8000ef4:	e730      	b.n	8000d58 <__udivmoddi4+0x11c>
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <init_AudioReset>:
#include "i2s.h"
#include "spi.h"
#include "usb_host.h"
#include "gpio.h"
#include "audio.h"
void init_AudioReset() {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, AUDIO_RESET_PIN, GPIO_PIN_SET);
 8000f00:	2201      	movs	r2, #1
 8000f02:	2110      	movs	r1, #16
 8000f04:	4802      	ldr	r0, [pc, #8]	@ (8000f10 <init_AudioReset+0x14>)
 8000f06:	f001 fa51 	bl	80023ac <HAL_GPIO_WritePin>
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40020c00 	.word	0x40020c00

08000f14 <configAudio>:
void configAudio() {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af02      	add	r7, sp, #8
    uint8_t bytes[2];
    init_AudioReset();
 8000f1a:	f7ff ffef 	bl	8000efc <init_AudioReset>

    /* Power sequence */
    // Set Power Control Register to "on" state
    bytes[0] = 0x02;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x01;
 8000f22:	2301      	movs	r3, #1
 8000f24:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000f26:	1d3a      	adds	r2, r7, #4
 8000f28:	2364      	movs	r3, #100	@ 0x64
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	2194      	movs	r1, #148	@ 0x94
 8000f30:	486f      	ldr	r0, [pc, #444]	@ (80010f0 <configAudio+0x1dc>)
 8000f32:	f003 fce7 	bl	8004904 <HAL_I2C_Master_Transmit>

    /* Initialization sequence */
    bytes[0] = 0x00;
 8000f36:	2300      	movs	r3, #0
 8000f38:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x99;
 8000f3a:	2399      	movs	r3, #153	@ 0x99
 8000f3c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000f3e:	1d3a      	adds	r2, r7, #4
 8000f40:	2364      	movs	r3, #100	@ 0x64
 8000f42:	9300      	str	r3, [sp, #0]
 8000f44:	2302      	movs	r3, #2
 8000f46:	2194      	movs	r1, #148	@ 0x94
 8000f48:	4869      	ldr	r0, [pc, #420]	@ (80010f0 <configAudio+0x1dc>)
 8000f4a:	f003 fcdb 	bl	8004904 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x47;
 8000f4e:	2347      	movs	r3, #71	@ 0x47
 8000f50:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x80;
 8000f52:	2380      	movs	r3, #128	@ 0x80
 8000f54:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000f56:	1d3a      	adds	r2, r7, #4
 8000f58:	2364      	movs	r3, #100	@ 0x64
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	2194      	movs	r1, #148	@ 0x94
 8000f60:	4863      	ldr	r0, [pc, #396]	@ (80010f0 <configAudio+0x1dc>)
 8000f62:	f003 fccf 	bl	8004904 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x32;
 8000f66:	2332      	movs	r3, #50	@ 0x32
 8000f68:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x80;
 8000f6a:	2380      	movs	r3, #128	@ 0x80
 8000f6c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000f6e:	1d3a      	adds	r2, r7, #4
 8000f70:	2364      	movs	r3, #100	@ 0x64
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	2302      	movs	r3, #2
 8000f76:	2194      	movs	r1, #148	@ 0x94
 8000f78:	485d      	ldr	r0, [pc, #372]	@ (80010f0 <configAudio+0x1dc>)
 8000f7a:	f003 fcc3 	bl	8004904 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x32;
 8000f7e:	2332      	movs	r3, #50	@ 0x32
 8000f80:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x00;
 8000f82:	2300      	movs	r3, #0
 8000f84:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000f86:	1d3a      	adds	r2, r7, #4
 8000f88:	2364      	movs	r3, #100	@ 0x64
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	2194      	movs	r1, #148	@ 0x94
 8000f90:	4857      	ldr	r0, [pc, #348]	@ (80010f0 <configAudio+0x1dc>)
 8000f92:	f003 fcb7 	bl	8004904 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x00;
 8000f96:	2300      	movs	r3, #0
 8000f98:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x00;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000f9e:	1d3a      	adds	r2, r7, #4
 8000fa0:	2364      	movs	r3, #100	@ 0x64
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	2194      	movs	r1, #148	@ 0x94
 8000fa8:	4851      	ldr	r0, [pc, #324]	@ (80010f0 <configAudio+0x1dc>)
 8000faa:	f003 fcab 	bl	8004904 <HAL_I2C_Master_Transmit>

    /* Ctl registers configuration */
    bytes[0] = 0x04;
 8000fae:	2304      	movs	r3, #4
 8000fb0:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0xAF;
 8000fb2:	23af      	movs	r3, #175	@ 0xaf
 8000fb4:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000fb6:	1d3a      	adds	r2, r7, #4
 8000fb8:	2364      	movs	r3, #100	@ 0x64
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	2194      	movs	r1, #148	@ 0x94
 8000fc0:	484b      	ldr	r0, [pc, #300]	@ (80010f0 <configAudio+0x1dc>)
 8000fc2:	f003 fc9f 	bl	8004904 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x0D;
 8000fc6:	230d      	movs	r3, #13
 8000fc8:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x70;
 8000fca:	2370      	movs	r3, #112	@ 0x70
 8000fcc:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000fce:	1d3a      	adds	r2, r7, #4
 8000fd0:	2364      	movs	r3, #100	@ 0x64
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	2194      	movs	r1, #148	@ 0x94
 8000fd8:	4845      	ldr	r0, [pc, #276]	@ (80010f0 <configAudio+0x1dc>)
 8000fda:	f003 fc93 	bl	8004904 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x05;
 8000fde:	2305      	movs	r3, #5
 8000fe0:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x81;
 8000fe2:	2381      	movs	r3, #129	@ 0x81
 8000fe4:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000fe6:	1d3a      	adds	r2, r7, #4
 8000fe8:	2364      	movs	r3, #100	@ 0x64
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	2302      	movs	r3, #2
 8000fee:	2194      	movs	r1, #148	@ 0x94
 8000ff0:	483f      	ldr	r0, [pc, #252]	@ (80010f0 <configAudio+0x1dc>)
 8000ff2:	f003 fc87 	bl	8004904 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x06;
 8000ff6:	2306      	movs	r3, #6
 8000ff8:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x07;
 8000ffa:	2307      	movs	r3, #7
 8000ffc:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000ffe:	1d3a      	adds	r2, r7, #4
 8001000:	2364      	movs	r3, #100	@ 0x64
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	2302      	movs	r3, #2
 8001006:	2194      	movs	r1, #148	@ 0x94
 8001008:	4839      	ldr	r0, [pc, #228]	@ (80010f0 <configAudio+0x1dc>)
 800100a:	f003 fc7b 	bl	8004904 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x0A;
 800100e:	230a      	movs	r3, #10
 8001010:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x00;
 8001012:	2300      	movs	r3, #0
 8001014:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8001016:	1d3a      	adds	r2, r7, #4
 8001018:	2364      	movs	r3, #100	@ 0x64
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	2302      	movs	r3, #2
 800101e:	2194      	movs	r1, #148	@ 0x94
 8001020:	4833      	ldr	r0, [pc, #204]	@ (80010f0 <configAudio+0x1dc>)
 8001022:	f003 fc6f 	bl	8004904 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x27;
 8001026:	2327      	movs	r3, #39	@ 0x27
 8001028:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x00;
 800102a:	2300      	movs	r3, #0
 800102c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800102e:	1d3a      	adds	r2, r7, #4
 8001030:	2364      	movs	r3, #100	@ 0x64
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	2302      	movs	r3, #2
 8001036:	2194      	movs	r1, #148	@ 0x94
 8001038:	482d      	ldr	r0, [pc, #180]	@ (80010f0 <configAudio+0x1dc>)
 800103a:	f003 fc63 	bl	8004904 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x1F;
 800103e:	231f      	movs	r3, #31
 8001040:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x0F;
 8001042:	230f      	movs	r3, #15
 8001044:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8001046:	1d3a      	adds	r2, r7, #4
 8001048:	2364      	movs	r3, #100	@ 0x64
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	2302      	movs	r3, #2
 800104e:	2194      	movs	r1, #148	@ 0x94
 8001050:	4827      	ldr	r0, [pc, #156]	@ (80010f0 <configAudio+0x1dc>)
 8001052:	f003 fc57 	bl	8004904 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x22;
 8001056:	2322      	movs	r3, #34	@ 0x22
 8001058:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0xC0;
 800105a:	23c0      	movs	r3, #192	@ 0xc0
 800105c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800105e:	1d3a      	adds	r2, r7, #4
 8001060:	2364      	movs	r3, #100	@ 0x64
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	2302      	movs	r3, #2
 8001066:	2194      	movs	r1, #148	@ 0x94
 8001068:	4821      	ldr	r0, [pc, #132]	@ (80010f0 <configAudio+0x1dc>)
 800106a:	f003 fc4b 	bl	8004904 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x14;
 800106e:	2314      	movs	r3, #20
 8001070:	713b      	strb	r3, [r7, #4]
    bytes[1] = 2;
 8001072:	2302      	movs	r3, #2
 8001074:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8001076:	1d3a      	adds	r2, r7, #4
 8001078:	2364      	movs	r3, #100	@ 0x64
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	2302      	movs	r3, #2
 800107e:	2194      	movs	r1, #148	@ 0x94
 8001080:	481b      	ldr	r0, [pc, #108]	@ (80010f0 <configAudio+0x1dc>)
 8001082:	f003 fc3f 	bl	8004904 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x15;
 8001086:	2315      	movs	r3, #21
 8001088:	713b      	strb	r3, [r7, #4]
    bytes[1] = 2;
 800108a:	2302      	movs	r3, #2
 800108c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800108e:	1d3a      	adds	r2, r7, #4
 8001090:	2364      	movs	r3, #100	@ 0x64
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2302      	movs	r3, #2
 8001096:	2194      	movs	r1, #148	@ 0x94
 8001098:	4815      	ldr	r0, [pc, #84]	@ (80010f0 <configAudio+0x1dc>)
 800109a:	f003 fc33 	bl	8004904 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x20;
 800109e:	2320      	movs	r3, #32
 80010a0:	713b      	strb	r3, [r7, #4]
    bytes[1] = 24;
 80010a2:	2318      	movs	r3, #24
 80010a4:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80010a6:	1d3a      	adds	r2, r7, #4
 80010a8:	2364      	movs	r3, #100	@ 0x64
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	2302      	movs	r3, #2
 80010ae:	2194      	movs	r1, #148	@ 0x94
 80010b0:	480f      	ldr	r0, [pc, #60]	@ (80010f0 <configAudio+0x1dc>)
 80010b2:	f003 fc27 	bl	8004904 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x21;
 80010b6:	2321      	movs	r3, #33	@ 0x21
 80010b8:	713b      	strb	r3, [r7, #4]
    bytes[1] = 24;
 80010ba:	2318      	movs	r3, #24
 80010bc:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80010be:	1d3a      	adds	r2, r7, #4
 80010c0:	2364      	movs	r3, #100	@ 0x64
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	2302      	movs	r3, #2
 80010c6:	2194      	movs	r1, #148	@ 0x94
 80010c8:	4809      	ldr	r0, [pc, #36]	@ (80010f0 <configAudio+0x1dc>)
 80010ca:	f003 fc1b 	bl	8004904 <HAL_I2C_Master_Transmit>

    /* Power up */
    bytes[0] = 0x02;
 80010ce:	2302      	movs	r3, #2
 80010d0:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x9E;
 80010d2:	239e      	movs	r3, #158	@ 0x9e
 80010d4:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80010d6:	1d3a      	adds	r2, r7, #4
 80010d8:	2364      	movs	r3, #100	@ 0x64
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	2302      	movs	r3, #2
 80010de:	2194      	movs	r1, #148	@ 0x94
 80010e0:	4803      	ldr	r0, [pc, #12]	@ (80010f0 <configAudio+0x1dc>)
 80010e2:	f003 fc0f 	bl	8004904 <HAL_I2C_Master_Transmit>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200000a4 	.word	0x200000a4

080010f4 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08c      	sub	sp, #48	@ 0x30
 80010f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fa:	f107 031c 	add.w	r3, r7, #28
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
 8001108:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	61bb      	str	r3, [r7, #24]
 800110e:	4b72      	ldr	r3, [pc, #456]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	4a71      	ldr	r2, [pc, #452]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 8001114:	f043 0310 	orr.w	r3, r3, #16
 8001118:	6313      	str	r3, [r2, #48]	@ 0x30
 800111a:	4b6f      	ldr	r3, [pc, #444]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111e:	f003 0310 	and.w	r3, r3, #16
 8001122:	61bb      	str	r3, [r7, #24]
 8001124:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	4b6b      	ldr	r3, [pc, #428]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	4a6a      	ldr	r2, [pc, #424]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 8001130:	f043 0304 	orr.w	r3, r3, #4
 8001134:	6313      	str	r3, [r2, #48]	@ 0x30
 8001136:	4b68      	ldr	r3, [pc, #416]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113a:	f003 0304 	and.w	r3, r3, #4
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
 8001146:	4b64      	ldr	r3, [pc, #400]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114a:	4a63      	ldr	r2, [pc, #396]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 800114c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001150:	6313      	str	r3, [r2, #48]	@ 0x30
 8001152:	4b61      	ldr	r3, [pc, #388]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	4b5d      	ldr	r3, [pc, #372]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	4a5c      	ldr	r2, [pc, #368]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6313      	str	r3, [r2, #48]	@ 0x30
 800116e:	4b5a      	ldr	r3, [pc, #360]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	4b56      	ldr	r3, [pc, #344]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	4a55      	ldr	r2, [pc, #340]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 8001184:	f043 0302 	orr.w	r3, r3, #2
 8001188:	6313      	str	r3, [r2, #48]	@ 0x30
 800118a:	4b53      	ldr	r3, [pc, #332]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	4b4f      	ldr	r3, [pc, #316]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	4a4e      	ldr	r2, [pc, #312]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 80011a0:	f043 0308 	orr.w	r3, r3, #8
 80011a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a6:	4b4c      	ldr	r3, [pc, #304]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	f003 0308 	and.w	r3, r3, #8
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2108      	movs	r1, #8
 80011b6:	4849      	ldr	r0, [pc, #292]	@ (80012dc <MX_GPIO_Init+0x1e8>)
 80011b8:	f001 f8f8 	bl	80023ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80011bc:	2201      	movs	r2, #1
 80011be:	2101      	movs	r1, #1
 80011c0:	4847      	ldr	r0, [pc, #284]	@ (80012e0 <MX_GPIO_Init+0x1ec>)
 80011c2:	f001 f8f3 	bl	80023ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80011c6:	2200      	movs	r2, #0
 80011c8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80011cc:	4845      	ldr	r0, [pc, #276]	@ (80012e4 <MX_GPIO_Init+0x1f0>)
 80011ce:	f001 f8ed 	bl	80023ac <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80011d2:	2308      	movs	r3, #8
 80011d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d6:	2301      	movs	r3, #1
 80011d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011de:	2300      	movs	r3, #0
 80011e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80011e2:	f107 031c 	add.w	r3, r7, #28
 80011e6:	4619      	mov	r1, r3
 80011e8:	483c      	ldr	r0, [pc, #240]	@ (80012dc <MX_GPIO_Init+0x1e8>)
 80011ea:	f000 ff43 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80011ee:	2301      	movs	r3, #1
 80011f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f2:	2301      	movs	r3, #1
 80011f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fa:	2300      	movs	r3, #0
 80011fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80011fe:	f107 031c 	add.w	r3, r7, #28
 8001202:	4619      	mov	r1, r3
 8001204:	4836      	ldr	r0, [pc, #216]	@ (80012e0 <MX_GPIO_Init+0x1ec>)
 8001206:	f000 ff35 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800120a:	2308      	movs	r3, #8
 800120c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120e:	2302      	movs	r3, #2
 8001210:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001216:	2300      	movs	r3, #0
 8001218:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800121a:	2305      	movs	r3, #5
 800121c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800121e:	f107 031c 	add.w	r3, r7, #28
 8001222:	4619      	mov	r1, r3
 8001224:	482e      	ldr	r0, [pc, #184]	@ (80012e0 <MX_GPIO_Init+0x1ec>)
 8001226:	f000 ff25 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800122a:	2301      	movs	r3, #1
 800122c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800122e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001232:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001238:	f107 031c 	add.w	r3, r7, #28
 800123c:	4619      	mov	r1, r3
 800123e:	482a      	ldr	r0, [pc, #168]	@ (80012e8 <MX_GPIO_Init+0x1f4>)
 8001240:	f000 ff18 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001244:	2304      	movs	r3, #4
 8001246:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001248:	2300      	movs	r3, #0
 800124a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001250:	f107 031c 	add.w	r3, r7, #28
 8001254:	4619      	mov	r1, r3
 8001256:	4825      	ldr	r0, [pc, #148]	@ (80012ec <MX_GPIO_Init+0x1f8>)
 8001258:	f000 ff0c 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800125c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001260:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001262:	2302      	movs	r3, #2
 8001264:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126a:	2300      	movs	r3, #0
 800126c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800126e:	2305      	movs	r3, #5
 8001270:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001272:	f107 031c 	add.w	r3, r7, #28
 8001276:	4619      	mov	r1, r3
 8001278:	481c      	ldr	r0, [pc, #112]	@ (80012ec <MX_GPIO_Init+0x1f8>)
 800127a:	f000 fefb 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800127e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001282:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001284:	2301      	movs	r3, #1
 8001286:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128c:	2300      	movs	r3, #0
 800128e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001290:	f107 031c 	add.w	r3, r7, #28
 8001294:	4619      	mov	r1, r3
 8001296:	4813      	ldr	r0, [pc, #76]	@ (80012e4 <MX_GPIO_Init+0x1f0>)
 8001298:	f000 feec 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800129c:	2320      	movs	r3, #32
 800129e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a0:	2300      	movs	r3, #0
 80012a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80012a8:	f107 031c 	add.w	r3, r7, #28
 80012ac:	4619      	mov	r1, r3
 80012ae:	480d      	ldr	r0, [pc, #52]	@ (80012e4 <MX_GPIO_Init+0x1f0>)
 80012b0:	f000 fee0 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80012b4:	2302      	movs	r3, #2
 80012b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012b8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80012bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80012c2:	f107 031c 	add.w	r3, r7, #28
 80012c6:	4619      	mov	r1, r3
 80012c8:	4804      	ldr	r0, [pc, #16]	@ (80012dc <MX_GPIO_Init+0x1e8>)
 80012ca:	f000 fed3 	bl	8002074 <HAL_GPIO_Init>

}
 80012ce:	bf00      	nop
 80012d0:	3730      	adds	r7, #48	@ 0x30
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40020800 	.word	0x40020800
 80012e4:	40020c00 	.word	0x40020c00
 80012e8:	40020000 	.word	0x40020000
 80012ec:	40020400 	.word	0x40020400

080012f0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012f4:	4b12      	ldr	r3, [pc, #72]	@ (8001340 <MX_I2C1_Init+0x50>)
 80012f6:	4a13      	ldr	r2, [pc, #76]	@ (8001344 <MX_I2C1_Init+0x54>)
 80012f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012fa:	4b11      	ldr	r3, [pc, #68]	@ (8001340 <MX_I2C1_Init+0x50>)
 80012fc:	4a12      	ldr	r2, [pc, #72]	@ (8001348 <MX_I2C1_Init+0x58>)
 80012fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001300:	4b0f      	ldr	r3, [pc, #60]	@ (8001340 <MX_I2C1_Init+0x50>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001306:	4b0e      	ldr	r3, [pc, #56]	@ (8001340 <MX_I2C1_Init+0x50>)
 8001308:	2200      	movs	r2, #0
 800130a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800130c:	4b0c      	ldr	r3, [pc, #48]	@ (8001340 <MX_I2C1_Init+0x50>)
 800130e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001312:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001314:	4b0a      	ldr	r3, [pc, #40]	@ (8001340 <MX_I2C1_Init+0x50>)
 8001316:	2200      	movs	r2, #0
 8001318:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800131a:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <MX_I2C1_Init+0x50>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001320:	4b07      	ldr	r3, [pc, #28]	@ (8001340 <MX_I2C1_Init+0x50>)
 8001322:	2200      	movs	r2, #0
 8001324:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001326:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <MX_I2C1_Init+0x50>)
 8001328:	2200      	movs	r2, #0
 800132a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800132c:	4804      	ldr	r0, [pc, #16]	@ (8001340 <MX_I2C1_Init+0x50>)
 800132e:	f003 f9a5 	bl	800467c <HAL_I2C_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001338:	f000 fa90 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}
 8001340:	200000a4 	.word	0x200000a4
 8001344:	40005400 	.word	0x40005400
 8001348:	000186a0 	.word	0x000186a0

0800134c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	@ 0x28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a19      	ldr	r2, [pc, #100]	@ (80013d0 <HAL_I2C_MspInit+0x84>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d12c      	bne.n	80013c8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	4b18      	ldr	r3, [pc, #96]	@ (80013d4 <HAL_I2C_MspInit+0x88>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	4a17      	ldr	r2, [pc, #92]	@ (80013d4 <HAL_I2C_MspInit+0x88>)
 8001378:	f043 0302 	orr.w	r3, r3, #2
 800137c:	6313      	str	r3, [r2, #48]	@ 0x30
 800137e:	4b15      	ldr	r3, [pc, #84]	@ (80013d4 <HAL_I2C_MspInit+0x88>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800138a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800138e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001390:	2312      	movs	r3, #18
 8001392:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001394:	2301      	movs	r3, #1
 8001396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2300      	movs	r3, #0
 800139a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800139c:	2304      	movs	r3, #4
 800139e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	4619      	mov	r1, r3
 80013a6:	480c      	ldr	r0, [pc, #48]	@ (80013d8 <HAL_I2C_MspInit+0x8c>)
 80013a8:	f000 fe64 	bl	8002074 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	4b08      	ldr	r3, [pc, #32]	@ (80013d4 <HAL_I2C_MspInit+0x88>)
 80013b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b4:	4a07      	ldr	r2, [pc, #28]	@ (80013d4 <HAL_I2C_MspInit+0x88>)
 80013b6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80013bc:	4b05      	ldr	r3, [pc, #20]	@ (80013d4 <HAL_I2C_MspInit+0x88>)
 80013be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80013c8:	bf00      	nop
 80013ca:	3728      	adds	r7, #40	@ 0x28
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40005400 	.word	0x40005400
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40020400 	.word	0x40020400

080013dc <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80013e0:	4b13      	ldr	r3, [pc, #76]	@ (8001430 <MX_I2S3_Init+0x54>)
 80013e2:	4a14      	ldr	r2, [pc, #80]	@ (8001434 <MX_I2S3_Init+0x58>)
 80013e4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80013e6:	4b12      	ldr	r3, [pc, #72]	@ (8001430 <MX_I2S3_Init+0x54>)
 80013e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013ec:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80013ee:	4b10      	ldr	r3, [pc, #64]	@ (8001430 <MX_I2S3_Init+0x54>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80013f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001430 <MX_I2S3_Init+0x54>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80013fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001430 <MX_I2S3_Init+0x54>)
 80013fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001400:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001402:	4b0b      	ldr	r3, [pc, #44]	@ (8001430 <MX_I2S3_Init+0x54>)
 8001404:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8001408:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800140a:	4b09      	ldr	r3, [pc, #36]	@ (8001430 <MX_I2S3_Init+0x54>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001410:	4b07      	ldr	r3, [pc, #28]	@ (8001430 <MX_I2S3_Init+0x54>)
 8001412:	2200      	movs	r2, #0
 8001414:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001416:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <MX_I2S3_Init+0x54>)
 8001418:	2200      	movs	r2, #0
 800141a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800141c:	4804      	ldr	r0, [pc, #16]	@ (8001430 <MX_I2S3_Init+0x54>)
 800141e:	f003 fdcb 	bl	8004fb8 <HAL_I2S_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8001428:	f000 fa18 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	200000f8 	.word	0x200000f8
 8001434:	40003c00 	.word	0x40003c00

08001438 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08e      	sub	sp, #56	@ 0x38
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a31      	ldr	r2, [pc, #196]	@ (8001528 <HAL_I2S_MspInit+0xf0>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d15a      	bne.n	800151e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001468:	2301      	movs	r3, #1
 800146a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800146c:	23c0      	movs	r3, #192	@ 0xc0
 800146e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001470:	2302      	movs	r3, #2
 8001472:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	4618      	mov	r0, r3
 800147a:	f004 ffe7 	bl	800644c <HAL_RCCEx_PeriphCLKConfig>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001484:	f000 f9ea 	bl	800185c <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001488:	2300      	movs	r3, #0
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	4b27      	ldr	r3, [pc, #156]	@ (800152c <HAL_I2S_MspInit+0xf4>)
 800148e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001490:	4a26      	ldr	r2, [pc, #152]	@ (800152c <HAL_I2S_MspInit+0xf4>)
 8001492:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001496:	6413      	str	r3, [r2, #64]	@ 0x40
 8001498:	4b24      	ldr	r3, [pc, #144]	@ (800152c <HAL_I2S_MspInit+0xf4>)
 800149a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	4b20      	ldr	r3, [pc, #128]	@ (800152c <HAL_I2S_MspInit+0xf4>)
 80014aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ac:	4a1f      	ldr	r2, [pc, #124]	@ (800152c <HAL_I2S_MspInit+0xf4>)
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b4:	4b1d      	ldr	r3, [pc, #116]	@ (800152c <HAL_I2S_MspInit+0xf4>)
 80014b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c0:	2300      	movs	r3, #0
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	4b19      	ldr	r3, [pc, #100]	@ (800152c <HAL_I2S_MspInit+0xf4>)
 80014c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c8:	4a18      	ldr	r2, [pc, #96]	@ (800152c <HAL_I2S_MspInit+0xf4>)
 80014ca:	f043 0304 	orr.w	r3, r3, #4
 80014ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d0:	4b16      	ldr	r3, [pc, #88]	@ (800152c <HAL_I2S_MspInit+0xf4>)
 80014d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80014dc:	2310      	movs	r3, #16
 80014de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e0:	2302      	movs	r3, #2
 80014e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e8:	2300      	movs	r3, #0
 80014ea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014ec:	2306      	movs	r3, #6
 80014ee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80014f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014f4:	4619      	mov	r1, r3
 80014f6:	480e      	ldr	r0, [pc, #56]	@ (8001530 <HAL_I2S_MspInit+0xf8>)
 80014f8:	f000 fdbc 	bl	8002074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80014fc:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001500:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	2302      	movs	r3, #2
 8001504:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150a:	2300      	movs	r3, #0
 800150c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800150e:	2306      	movs	r3, #6
 8001510:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001512:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001516:	4619      	mov	r1, r3
 8001518:	4806      	ldr	r0, [pc, #24]	@ (8001534 <HAL_I2S_MspInit+0xfc>)
 800151a:	f000 fdab 	bl	8002074 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800151e:	bf00      	nop
 8001520:	3738      	adds	r7, #56	@ 0x38
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40003c00 	.word	0x40003c00
 800152c:	40023800 	.word	0x40023800
 8001530:	40020000 	.word	0x40020000
 8001534:	40020800 	.word	0x40020800

08001538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800153c:	f000 fbf2 	bl	8001d24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001540:	f000 f816 	bl	8001570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001544:	f7ff fdd6 	bl	80010f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001548:	f7ff fed2 	bl	80012f0 <MX_I2C1_Init>
  MX_I2S3_Init();
 800154c:	f7ff ff46 	bl	80013dc <MX_I2S3_Init>
  MX_SPI1_Init();
 8001550:	f000 f98a 	bl	8001868 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8001554:	f008 ffa8 	bl	800a4a8 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 8001558:	f000 fb48 	bl	8001bec <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800155c:	4803      	ldr	r0, [pc, #12]	@ (800156c <main+0x34>)
 800155e:	f005 f98f 	bl	8006880 <HAL_TIM_Base_Start_IT>
  configAudio();
 8001562:	f7ff fcd7 	bl	8000f14 <configAudio>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001566:	f008 ffc5 	bl	800a4f4 <MX_USB_HOST_Process>
 800156a:	e7fc      	b.n	8001566 <main+0x2e>
 800156c:	200002a4 	.word	0x200002a4

08001570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b094      	sub	sp, #80	@ 0x50
 8001574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001576:	f107 0320 	add.w	r3, r7, #32
 800157a:	2230      	movs	r2, #48	@ 0x30
 800157c:	2100      	movs	r1, #0
 800157e:	4618      	mov	r0, r3
 8001580:	f009 fc9d 	bl	800aebe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001584:	f107 030c 	add.w	r3, r7, #12
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001594:	2300      	movs	r3, #0
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	4b28      	ldr	r3, [pc, #160]	@ (800163c <SystemClock_Config+0xcc>)
 800159a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159c:	4a27      	ldr	r2, [pc, #156]	@ (800163c <SystemClock_Config+0xcc>)
 800159e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80015a4:	4b25      	ldr	r3, [pc, #148]	@ (800163c <SystemClock_Config+0xcc>)
 80015a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015b0:	2300      	movs	r3, #0
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	4b22      	ldr	r3, [pc, #136]	@ (8001640 <SystemClock_Config+0xd0>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a21      	ldr	r2, [pc, #132]	@ (8001640 <SystemClock_Config+0xd0>)
 80015ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015be:	6013      	str	r3, [r2, #0]
 80015c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001640 <SystemClock_Config+0xd0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015c8:	607b      	str	r3, [r7, #4]
 80015ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015cc:	2301      	movs	r3, #1
 80015ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015d4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015d6:	2302      	movs	r3, #2
 80015d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80015de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015e0:	2304      	movs	r3, #4
 80015e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80015e4:	23a8      	movs	r3, #168	@ 0xa8
 80015e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015e8:	2302      	movs	r3, #2
 80015ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015ec:	2307      	movs	r3, #7
 80015ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015f0:	f107 0320 	add.w	r3, r7, #32
 80015f4:	4618      	mov	r0, r3
 80015f6:	f004 faa5 	bl	8005b44 <HAL_RCC_OscConfig>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001600:	f000 f92c 	bl	800185c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001604:	230f      	movs	r3, #15
 8001606:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001608:	2302      	movs	r3, #2
 800160a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001610:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001614:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001616:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800161a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800161c:	f107 030c 	add.w	r3, r7, #12
 8001620:	2105      	movs	r1, #5
 8001622:	4618      	mov	r0, r3
 8001624:	f004 fd06 	bl	8006034 <HAL_RCC_ClockConfig>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800162e:	f000 f915 	bl	800185c <Error_Handler>
  }
}
 8001632:	bf00      	nop
 8001634:	3750      	adds	r7, #80	@ 0x50
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40023800 	.word	0x40023800
 8001640:	40007000 	.word	0x40007000
 8001644:	00000000 	.word	0x00000000

08001648 <generate_fake_signal>:

/* USER CODE BEGIN 4 */
void generate_fake_signal() {
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
    for (int i = 0; i < BUFFER_SIZE; i++) {
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	e060      	b.n	8001716 <generate_fake_signal+0xce>
        float sine_wave = sin(2 * M_PI * SIGNAL_FREQ * i / SAMPLE_FREQ);
 8001654:	68f8      	ldr	r0, [r7, #12]
 8001656:	f7fe ff5d 	bl	8000514 <__aeabi_i2d>
 800165a:	a33b      	add	r3, pc, #236	@ (adr r3, 8001748 <generate_fake_signal+0x100>)
 800165c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001660:	f7fe ffc2 	bl	80005e8 <__aeabi_dmul>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4610      	mov	r0, r2
 800166a:	4619      	mov	r1, r3
 800166c:	a338      	add	r3, pc, #224	@ (adr r3, 8001750 <generate_fake_signal+0x108>)
 800166e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001672:	f7ff f8e3 	bl	800083c <__aeabi_ddiv>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	ec43 2b17 	vmov	d7, r2, r3
 800167e:	eeb0 0a47 	vmov.f32	s0, s14
 8001682:	eef0 0a67 	vmov.f32	s1, s15
 8001686:	f00a f9ff 	bl	800ba88 <sin>
 800168a:	ec53 2b10 	vmov	r2, r3, d0
 800168e:	4610      	mov	r0, r2
 8001690:	4619      	mov	r1, r3
 8001692:	f7ff fa6b 	bl	8000b6c <__aeabi_d2f>
 8001696:	4603      	mov	r3, r0
 8001698:	60bb      	str	r3, [r7, #8]
        float noise = ((float)rand() / RAND_MAX) * 0.1 - 0.05; // Šum
 800169a:	f009 facd 	bl	800ac38 <rand>
 800169e:	ee07 0a90 	vmov	s15, r0
 80016a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016a6:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001738 <generate_fake_signal+0xf0>
 80016aa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80016ae:	ee16 0a90 	vmov	r0, s13
 80016b2:	f7fe ff41 	bl	8000538 <__aeabi_f2d>
 80016b6:	a31c      	add	r3, pc, #112	@ (adr r3, 8001728 <generate_fake_signal+0xe0>)
 80016b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016bc:	f7fe ff94 	bl	80005e8 <__aeabi_dmul>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	4610      	mov	r0, r2
 80016c6:	4619      	mov	r1, r3
 80016c8:	a319      	add	r3, pc, #100	@ (adr r3, 8001730 <generate_fake_signal+0xe8>)
 80016ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ce:	f7fe fdd3 	bl	8000278 <__aeabi_dsub>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4610      	mov	r0, r2
 80016d8:	4619      	mov	r1, r3
 80016da:	f7ff fa47 	bl	8000b6c <__aeabi_d2f>
 80016de:	4603      	mov	r3, r0
 80016e0:	607b      	str	r3, [r7, #4]
        fake_signal[i] = (uint16_t)((sine_wave + noise) * 32767 + 32768);
 80016e2:	ed97 7a02 	vldr	s14, [r7, #8]
 80016e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80016ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ee:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800173c <generate_fake_signal+0xf4>
 80016f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016f6:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001740 <generate_fake_signal+0xf8>
 80016fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001702:	ee17 3a90 	vmov	r3, s15
 8001706:	b299      	uxth	r1, r3
 8001708:	4a0e      	ldr	r2, [pc, #56]	@ (8001744 <generate_fake_signal+0xfc>)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < BUFFER_SIZE; i++) {
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	3301      	adds	r3, #1
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2b2b      	cmp	r3, #43	@ 0x2b
 800171a:	dd9b      	ble.n	8001654 <generate_fake_signal+0xc>
    }
}
 800171c:	bf00      	nop
 800171e:	bf00      	nop
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	9999999a 	.word	0x9999999a
 800172c:	3fb99999 	.word	0x3fb99999
 8001730:	9999999a 	.word	0x9999999a
 8001734:	3fa99999 	.word	0x3fa99999
 8001738:	4f000000 	.word	0x4f000000
 800173c:	46fffe00 	.word	0x46fffe00
 8001740:	47000000 	.word	0x47000000
 8001744:	20000140 	.word	0x20000140
 8001748:	fc6a96c1 	.word	0xfc6a96c1
 800174c:	40a59933 	.word	0x40a59933
 8001750:	00000000 	.word	0x00000000
 8001754:	40e57c00 	.word	0x40e57c00

08001758 <echo_effect>:

void echo_effect(uint16_t *buffer, int size, float echo_strength, int delay) {
 8001758:	b480      	push	{r7}
 800175a:	b087      	sub	sp, #28
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	ed87 0a01 	vstr	s0, [r7, #4]
 8001766:	603a      	str	r2, [r7, #0]
    static uint16_t echo_buffer[BUFFER_SIZE * 2] = {0}; // Povećan buffer za "delay"
    for (int i = 0; i < size; i++) {
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	e02f      	b.n	80017ce <echo_effect+0x76>
        int delayed_index = i - delay;
 800176e:	697a      	ldr	r2, [r7, #20]
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	613b      	str	r3, [r7, #16]
        if (delayed_index >= 0) {
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	2b00      	cmp	r3, #0
 800177a:	db1c      	blt.n	80017b6 <echo_effect+0x5e>
            buffer[i] += (uint16_t)(echo_strength * echo_buffer[delayed_index]);
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	4413      	add	r3, r2
 8001784:	8819      	ldrh	r1, [r3, #0]
 8001786:	4a17      	ldr	r2, [pc, #92]	@ (80017e4 <echo_effect+0x8c>)
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800178e:	ee07 3a90 	vmov	s15, r3
 8001792:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001796:	edd7 7a01 	vldr	s15, [r7, #4]
 800179a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800179e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017a2:	ee17 3a90 	vmov	r3, s15
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	68f8      	ldr	r0, [r7, #12]
 80017ae:	4403      	add	r3, r0
 80017b0:	440a      	add	r2, r1
 80017b2:	b292      	uxth	r2, r2
 80017b4:	801a      	strh	r2, [r3, #0]
        }
        echo_buffer[i] = buffer[i];
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	4413      	add	r3, r2
 80017be:	8819      	ldrh	r1, [r3, #0]
 80017c0:	4a08      	ldr	r2, [pc, #32]	@ (80017e4 <echo_effect+0x8c>)
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < size; i++) {
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	3301      	adds	r3, #1
 80017cc:	617b      	str	r3, [r7, #20]
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	dbcb      	blt.n	800176e <echo_effect+0x16>
    }
}
 80017d6:	bf00      	nop
 80017d8:	bf00      	nop
 80017da:	371c      	adds	r7, #28
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	20000198 	.word	0x20000198

080017e8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017f8:	d10c      	bne.n	8001814 <HAL_TIM_PeriodElapsedCallback+0x2c>
        // Generiraj dummy signal i simuliraj DMA prijenos - sada je generate fake signal napunio
        generate_fake_signal(fake_signal, BUFFER_SIZE);
 80017fa:	212c      	movs	r1, #44	@ 0x2c
 80017fc:	4807      	ldr	r0, [pc, #28]	@ (800181c <HAL_TIM_PeriodElapsedCallback+0x34>)
 80017fe:	f7ff ff23 	bl	8001648 <generate_fake_signal>
        HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8001802:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001806:	4806      	ldr	r0, [pc, #24]	@ (8001820 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001808:	f000 fde9 	bl	80023de <HAL_GPIO_TogglePin>
        dma_callback_simulation(fake_signal, BUFFER_SIZE);
 800180c:	212c      	movs	r1, #44	@ 0x2c
 800180e:	4803      	ldr	r0, [pc, #12]	@ (800181c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001810:	f000 f808 	bl	8001824 <dma_callback_simulation>
        //echo_effect(fake_signal, BUFFER_SIZE, 20, 3);

        // Simuliraj DMA callback
    }
}
 8001814:	bf00      	nop
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20000140 	.word	0x20000140
 8001820:	40020c00 	.word	0x40020c00

08001824 <dma_callback_simulation>:

void dma_callback_simulation(uint16_t *buffer, uint16_t size) {
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	807b      	strh	r3, [r7, #2]
    // Obradi signal (npr. dodaj efekte ili manipuliraj signalom)
    echo_effect(buffer, size, 0.5, 3); // Dodaj echo efekt
 8001830:	887b      	ldrh	r3, [r7, #2]
 8001832:	2203      	movs	r2, #3
 8001834:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8001838:	4619      	mov	r1, r3
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f7ff ff8c 	bl	8001758 <echo_effect>

    // Simuliraj slanje signala (DAC, I2S, ili ispis na UART za testiranje)
    HAL_I2S_Transmit(&hi2s3, buffer, size, HAL_MAX_DELAY); // Slanje signala
 8001840:	887a      	ldrh	r2, [r7, #2]
 8001842:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	4803      	ldr	r0, [pc, #12]	@ (8001858 <dma_callback_simulation+0x34>)
 800184a:	f003 fcf5 	bl	8005238 <HAL_I2S_Transmit>

}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	200000f8 	.word	0x200000f8

0800185c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001860:	b672      	cpsid	i
}
 8001862:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001864:	bf00      	nop
 8001866:	e7fd      	b.n	8001864 <Error_Handler+0x8>

08001868 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800186c:	4b17      	ldr	r3, [pc, #92]	@ (80018cc <MX_SPI1_Init+0x64>)
 800186e:	4a18      	ldr	r2, [pc, #96]	@ (80018d0 <MX_SPI1_Init+0x68>)
 8001870:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001872:	4b16      	ldr	r3, [pc, #88]	@ (80018cc <MX_SPI1_Init+0x64>)
 8001874:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001878:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800187a:	4b14      	ldr	r3, [pc, #80]	@ (80018cc <MX_SPI1_Init+0x64>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001880:	4b12      	ldr	r3, [pc, #72]	@ (80018cc <MX_SPI1_Init+0x64>)
 8001882:	2200      	movs	r2, #0
 8001884:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001886:	4b11      	ldr	r3, [pc, #68]	@ (80018cc <MX_SPI1_Init+0x64>)
 8001888:	2200      	movs	r2, #0
 800188a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800188c:	4b0f      	ldr	r3, [pc, #60]	@ (80018cc <MX_SPI1_Init+0x64>)
 800188e:	2200      	movs	r2, #0
 8001890:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001892:	4b0e      	ldr	r3, [pc, #56]	@ (80018cc <MX_SPI1_Init+0x64>)
 8001894:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001898:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800189a:	4b0c      	ldr	r3, [pc, #48]	@ (80018cc <MX_SPI1_Init+0x64>)
 800189c:	2200      	movs	r2, #0
 800189e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018a0:	4b0a      	ldr	r3, [pc, #40]	@ (80018cc <MX_SPI1_Init+0x64>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018a6:	4b09      	ldr	r3, [pc, #36]	@ (80018cc <MX_SPI1_Init+0x64>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018ac:	4b07      	ldr	r3, [pc, #28]	@ (80018cc <MX_SPI1_Init+0x64>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018b2:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <MX_SPI1_Init+0x64>)
 80018b4:	220a      	movs	r2, #10
 80018b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018b8:	4804      	ldr	r0, [pc, #16]	@ (80018cc <MX_SPI1_Init+0x64>)
 80018ba:	f004 ff09 	bl	80066d0 <HAL_SPI_Init>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80018c4:	f7ff ffca 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000248 	.word	0x20000248
 80018d0:	40013000 	.word	0x40013000

080018d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08a      	sub	sp, #40	@ 0x28
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018dc:	f107 0314 	add.w	r3, r7, #20
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a19      	ldr	r2, [pc, #100]	@ (8001958 <HAL_SPI_MspInit+0x84>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d12b      	bne.n	800194e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	613b      	str	r3, [r7, #16]
 80018fa:	4b18      	ldr	r3, [pc, #96]	@ (800195c <HAL_SPI_MspInit+0x88>)
 80018fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fe:	4a17      	ldr	r2, [pc, #92]	@ (800195c <HAL_SPI_MspInit+0x88>)
 8001900:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001904:	6453      	str	r3, [r2, #68]	@ 0x44
 8001906:	4b15      	ldr	r3, [pc, #84]	@ (800195c <HAL_SPI_MspInit+0x88>)
 8001908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800190a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800190e:	613b      	str	r3, [r7, #16]
 8001910:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	4b11      	ldr	r3, [pc, #68]	@ (800195c <HAL_SPI_MspInit+0x88>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	4a10      	ldr	r2, [pc, #64]	@ (800195c <HAL_SPI_MspInit+0x88>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	6313      	str	r3, [r2, #48]	@ 0x30
 8001922:	4b0e      	ldr	r3, [pc, #56]	@ (800195c <HAL_SPI_MspInit+0x88>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800192e:	23e0      	movs	r3, #224	@ 0xe0
 8001930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001932:	2302      	movs	r3, #2
 8001934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193a:	2300      	movs	r3, #0
 800193c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800193e:	2305      	movs	r3, #5
 8001940:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	4619      	mov	r1, r3
 8001948:	4805      	ldr	r0, [pc, #20]	@ (8001960 <HAL_SPI_MspInit+0x8c>)
 800194a:	f000 fb93 	bl	8002074 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800194e:	bf00      	nop
 8001950:	3728      	adds	r7, #40	@ 0x28
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40013000 	.word	0x40013000
 800195c:	40023800 	.word	0x40023800
 8001960:	40020000 	.word	0x40020000

08001964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	607b      	str	r3, [r7, #4]
 800196e:	4b10      	ldr	r3, [pc, #64]	@ (80019b0 <HAL_MspInit+0x4c>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001972:	4a0f      	ldr	r2, [pc, #60]	@ (80019b0 <HAL_MspInit+0x4c>)
 8001974:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001978:	6453      	str	r3, [r2, #68]	@ 0x44
 800197a:	4b0d      	ldr	r3, [pc, #52]	@ (80019b0 <HAL_MspInit+0x4c>)
 800197c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001982:	607b      	str	r3, [r7, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	603b      	str	r3, [r7, #0]
 800198a:	4b09      	ldr	r3, [pc, #36]	@ (80019b0 <HAL_MspInit+0x4c>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198e:	4a08      	ldr	r2, [pc, #32]	@ (80019b0 <HAL_MspInit+0x4c>)
 8001990:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001994:	6413      	str	r3, [r2, #64]	@ 0x40
 8001996:	4b06      	ldr	r3, [pc, #24]	@ (80019b0 <HAL_MspInit+0x4c>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800199e:	603b      	str	r3, [r7, #0]
 80019a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019a2:	2007      	movs	r0, #7
 80019a4:	f000 fb24 	bl	8001ff0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019a8:	bf00      	nop
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40023800 	.word	0x40023800

080019b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019b8:	bf00      	nop
 80019ba:	e7fd      	b.n	80019b8 <NMI_Handler+0x4>

080019bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019c0:	bf00      	nop
 80019c2:	e7fd      	b.n	80019c0 <HardFault_Handler+0x4>

080019c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c8:	bf00      	nop
 80019ca:	e7fd      	b.n	80019c8 <MemManage_Handler+0x4>

080019cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019d0:	bf00      	nop
 80019d2:	e7fd      	b.n	80019d0 <BusFault_Handler+0x4>

080019d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019d8:	bf00      	nop
 80019da:	e7fd      	b.n	80019d8 <UsageFault_Handler+0x4>

080019dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a0a:	f000 f9dd 	bl	8001dc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a18:	4802      	ldr	r0, [pc, #8]	@ (8001a24 <TIM2_IRQHandler+0x10>)
 8001a1a:	f004 ffa1 	bl	8006960 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	200002a4 	.word	0x200002a4

08001a28 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001a2c:	4802      	ldr	r0, [pc, #8]	@ (8001a38 <OTG_FS_IRQHandler+0x10>)
 8001a2e:	f000 ffd1 	bl	80029d4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	200006cc 	.word	0x200006cc

08001a3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return 1;
 8001a40:	2301      	movs	r3, #1
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <_kill>:

int _kill(int pid, int sig)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a56:	f009 fa91 	bl	800af7c <__errno>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2216      	movs	r2, #22
 8001a5e:	601a      	str	r2, [r3, #0]
  return -1;
 8001a60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <_exit>:

void _exit (int status)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a74:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f7ff ffe7 	bl	8001a4c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a7e:	bf00      	nop
 8001a80:	e7fd      	b.n	8001a7e <_exit+0x12>

08001a82 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b086      	sub	sp, #24
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	60f8      	str	r0, [r7, #12]
 8001a8a:	60b9      	str	r1, [r7, #8]
 8001a8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
 8001a92:	e00a      	b.n	8001aaa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a94:	f3af 8000 	nop.w
 8001a98:	4601      	mov	r1, r0
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	1c5a      	adds	r2, r3, #1
 8001a9e:	60ba      	str	r2, [r7, #8]
 8001aa0:	b2ca      	uxtb	r2, r1
 8001aa2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	dbf0      	blt.n	8001a94 <_read+0x12>
  }

  return len;
 8001ab2:	687b      	ldr	r3, [r7, #4]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
 8001acc:	e009      	b.n	8001ae2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	1c5a      	adds	r2, r3, #1
 8001ad2:	60ba      	str	r2, [r7, #8]
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	dbf1      	blt.n	8001ace <_write+0x12>
  }
  return len;
 8001aea:	687b      	ldr	r3, [r7, #4]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <_close>:

int _close(int file)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001afc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b1c:	605a      	str	r2, [r3, #4]
  return 0;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <_isatty>:

int _isatty(int file)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b34:	2301      	movs	r3, #1
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b085      	sub	sp, #20
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	60f8      	str	r0, [r7, #12]
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b64:	4a14      	ldr	r2, [pc, #80]	@ (8001bb8 <_sbrk+0x5c>)
 8001b66:	4b15      	ldr	r3, [pc, #84]	@ (8001bbc <_sbrk+0x60>)
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b70:	4b13      	ldr	r3, [pc, #76]	@ (8001bc0 <_sbrk+0x64>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d102      	bne.n	8001b7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b78:	4b11      	ldr	r3, [pc, #68]	@ (8001bc0 <_sbrk+0x64>)
 8001b7a:	4a12      	ldr	r2, [pc, #72]	@ (8001bc4 <_sbrk+0x68>)
 8001b7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b7e:	4b10      	ldr	r3, [pc, #64]	@ (8001bc0 <_sbrk+0x64>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4413      	add	r3, r2
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d207      	bcs.n	8001b9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b8c:	f009 f9f6 	bl	800af7c <__errno>
 8001b90:	4603      	mov	r3, r0
 8001b92:	220c      	movs	r2, #12
 8001b94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b9a:	e009      	b.n	8001bb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b9c:	4b08      	ldr	r3, [pc, #32]	@ (8001bc0 <_sbrk+0x64>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ba2:	4b07      	ldr	r3, [pc, #28]	@ (8001bc0 <_sbrk+0x64>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4413      	add	r3, r2
 8001baa:	4a05      	ldr	r2, [pc, #20]	@ (8001bc0 <_sbrk+0x64>)
 8001bac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bae:	68fb      	ldr	r3, [r7, #12]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3718      	adds	r7, #24
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	20020000 	.word	0x20020000
 8001bbc:	00000400 	.word	0x00000400
 8001bc0:	200002a0 	.word	0x200002a0
 8001bc4:	20000bf8 	.word	0x20000bf8

08001bc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bcc:	4b06      	ldr	r3, [pc, #24]	@ (8001be8 <SystemInit+0x20>)
 8001bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bd2:	4a05      	ldr	r2, [pc, #20]	@ (8001be8 <SystemInit+0x20>)
 8001bd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bf2:	f107 0308 	add.w	r3, r7, #8
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	609a      	str	r2, [r3, #8]
 8001bfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c00:	463b      	mov	r3, r7
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c08:	4b1d      	ldr	r3, [pc, #116]	@ (8001c80 <MX_TIM2_Init+0x94>)
 8001c0a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c0e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20-1;
 8001c10:	4b1b      	ldr	r3, [pc, #108]	@ (8001c80 <MX_TIM2_Init+0x94>)
 8001c12:	2213      	movs	r2, #19
 8001c14:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c16:	4b1a      	ldr	r3, [pc, #104]	@ (8001c80 <MX_TIM2_Init+0x94>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 95-1;
 8001c1c:	4b18      	ldr	r3, [pc, #96]	@ (8001c80 <MX_TIM2_Init+0x94>)
 8001c1e:	225e      	movs	r2, #94	@ 0x5e
 8001c20:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c22:	4b17      	ldr	r3, [pc, #92]	@ (8001c80 <MX_TIM2_Init+0x94>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c28:	4b15      	ldr	r3, [pc, #84]	@ (8001c80 <MX_TIM2_Init+0x94>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c2e:	4814      	ldr	r0, [pc, #80]	@ (8001c80 <MX_TIM2_Init+0x94>)
 8001c30:	f004 fdd7 	bl	80067e2 <HAL_TIM_Base_Init>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001c3a:	f7ff fe0f 	bl	800185c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c44:	f107 0308 	add.w	r3, r7, #8
 8001c48:	4619      	mov	r1, r3
 8001c4a:	480d      	ldr	r0, [pc, #52]	@ (8001c80 <MX_TIM2_Init+0x94>)
 8001c4c:	f004 ff78 	bl	8006b40 <HAL_TIM_ConfigClockSource>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001c56:	f7ff fe01 	bl	800185c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c62:	463b      	mov	r3, r7
 8001c64:	4619      	mov	r1, r3
 8001c66:	4806      	ldr	r0, [pc, #24]	@ (8001c80 <MX_TIM2_Init+0x94>)
 8001c68:	f005 f9a0 	bl	8006fac <HAL_TIMEx_MasterConfigSynchronization>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001c72:	f7ff fdf3 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c76:	bf00      	nop
 8001c78:	3718      	adds	r7, #24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	200002a4 	.word	0x200002a4

08001c84 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c94:	d115      	bne.n	8001cc2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001ccc <HAL_TIM_Base_MspInit+0x48>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9e:	4a0b      	ldr	r2, [pc, #44]	@ (8001ccc <HAL_TIM_Base_MspInit+0x48>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ca6:	4b09      	ldr	r3, [pc, #36]	@ (8001ccc <HAL_TIM_Base_MspInit+0x48>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	201c      	movs	r0, #28
 8001cb8:	f000 f9a5 	bl	8002006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001cbc:	201c      	movs	r0, #28
 8001cbe:	f000 f9be 	bl	800203e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001cc2:	bf00      	nop
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40023800 	.word	0x40023800

08001cd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001cd0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d08 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001cd4:	f7ff ff78 	bl	8001bc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cd8:	480c      	ldr	r0, [pc, #48]	@ (8001d0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cda:	490d      	ldr	r1, [pc, #52]	@ (8001d10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8001d14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ce0:	e002      	b.n	8001ce8 <LoopCopyDataInit>

08001ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ce6:	3304      	adds	r3, #4

08001ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cec:	d3f9      	bcc.n	8001ce2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cee:	4a0a      	ldr	r2, [pc, #40]	@ (8001d18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cf0:	4c0a      	ldr	r4, [pc, #40]	@ (8001d1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cf4:	e001      	b.n	8001cfa <LoopFillZerobss>

08001cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cf8:	3204      	adds	r2, #4

08001cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cfc:	d3fb      	bcc.n	8001cf6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cfe:	f009 f943 	bl	800af88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d02:	f7ff fc19 	bl	8001538 <main>
  bx  lr    
 8001d06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d10:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001d14:	0800cde8 	.word	0x0800cde8
  ldr r2, =_sbss
 8001d18:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001d1c:	20000bf8 	.word	0x20000bf8

08001d20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d20:	e7fe      	b.n	8001d20 <ADC_IRQHandler>
	...

08001d24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d28:	4b0e      	ldr	r3, [pc, #56]	@ (8001d64 <HAL_Init+0x40>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001d64 <HAL_Init+0x40>)
 8001d2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d34:	4b0b      	ldr	r3, [pc, #44]	@ (8001d64 <HAL_Init+0x40>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a0a      	ldr	r2, [pc, #40]	@ (8001d64 <HAL_Init+0x40>)
 8001d3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d40:	4b08      	ldr	r3, [pc, #32]	@ (8001d64 <HAL_Init+0x40>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a07      	ldr	r2, [pc, #28]	@ (8001d64 <HAL_Init+0x40>)
 8001d46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d4c:	2003      	movs	r0, #3
 8001d4e:	f000 f94f 	bl	8001ff0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d52:	2000      	movs	r0, #0
 8001d54:	f000 f808 	bl	8001d68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d58:	f7ff fe04 	bl	8001964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40023c00 	.word	0x40023c00

08001d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d70:	4b12      	ldr	r3, [pc, #72]	@ (8001dbc <HAL_InitTick+0x54>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	4b12      	ldr	r3, [pc, #72]	@ (8001dc0 <HAL_InitTick+0x58>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	4619      	mov	r1, r3
 8001d7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d86:	4618      	mov	r0, r3
 8001d88:	f000 f967 	bl	800205a <HAL_SYSTICK_Config>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e00e      	b.n	8001db4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b0f      	cmp	r3, #15
 8001d9a:	d80a      	bhi.n	8001db2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001da4:	f000 f92f 	bl	8002006 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001da8:	4a06      	ldr	r2, [pc, #24]	@ (8001dc4 <HAL_InitTick+0x5c>)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
 8001db0:	e000      	b.n	8001db4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20000000 	.word	0x20000000
 8001dc0:	20000008 	.word	0x20000008
 8001dc4:	20000004 	.word	0x20000004

08001dc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dcc:	4b06      	ldr	r3, [pc, #24]	@ (8001de8 <HAL_IncTick+0x20>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4b06      	ldr	r3, [pc, #24]	@ (8001dec <HAL_IncTick+0x24>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	4a04      	ldr	r2, [pc, #16]	@ (8001dec <HAL_IncTick+0x24>)
 8001dda:	6013      	str	r3, [r2, #0]
}
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	20000008 	.word	0x20000008
 8001dec:	200002ec 	.word	0x200002ec

08001df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  return uwTick;
 8001df4:	4b03      	ldr	r3, [pc, #12]	@ (8001e04 <HAL_GetTick+0x14>)
 8001df6:	681b      	ldr	r3, [r3, #0]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	200002ec 	.word	0x200002ec

08001e08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e10:	f7ff ffee 	bl	8001df0 <HAL_GetTick>
 8001e14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e20:	d005      	beq.n	8001e2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e22:	4b0a      	ldr	r3, [pc, #40]	@ (8001e4c <HAL_Delay+0x44>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	461a      	mov	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e2e:	bf00      	nop
 8001e30:	f7ff ffde 	bl	8001df0 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d8f7      	bhi.n	8001e30 <HAL_Delay+0x28>
  {
  }
}
 8001e40:	bf00      	nop
 8001e42:	bf00      	nop
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000008 	.word	0x20000008

08001e50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e60:	4b0c      	ldr	r3, [pc, #48]	@ (8001e94 <__NVIC_SetPriorityGrouping+0x44>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e66:	68ba      	ldr	r2, [r7, #8]
 8001e68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e82:	4a04      	ldr	r2, [pc, #16]	@ (8001e94 <__NVIC_SetPriorityGrouping+0x44>)
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	60d3      	str	r3, [r2, #12]
}
 8001e88:	bf00      	nop
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	e000ed00 	.word	0xe000ed00

08001e98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e9c:	4b04      	ldr	r3, [pc, #16]	@ (8001eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	0a1b      	lsrs	r3, r3, #8
 8001ea2:	f003 0307 	and.w	r3, r3, #7
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4603      	mov	r3, r0
 8001ebc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	db0b      	blt.n	8001ede <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ec6:	79fb      	ldrb	r3, [r7, #7]
 8001ec8:	f003 021f 	and.w	r2, r3, #31
 8001ecc:	4907      	ldr	r1, [pc, #28]	@ (8001eec <__NVIC_EnableIRQ+0x38>)
 8001ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed2:	095b      	lsrs	r3, r3, #5
 8001ed4:	2001      	movs	r0, #1
 8001ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	e000e100 	.word	0xe000e100

08001ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	6039      	str	r1, [r7, #0]
 8001efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	db0a      	blt.n	8001f1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	b2da      	uxtb	r2, r3
 8001f08:	490c      	ldr	r1, [pc, #48]	@ (8001f3c <__NVIC_SetPriority+0x4c>)
 8001f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0e:	0112      	lsls	r2, r2, #4
 8001f10:	b2d2      	uxtb	r2, r2
 8001f12:	440b      	add	r3, r1
 8001f14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f18:	e00a      	b.n	8001f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	4908      	ldr	r1, [pc, #32]	@ (8001f40 <__NVIC_SetPriority+0x50>)
 8001f20:	79fb      	ldrb	r3, [r7, #7]
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	3b04      	subs	r3, #4
 8001f28:	0112      	lsls	r2, r2, #4
 8001f2a:	b2d2      	uxtb	r2, r2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	761a      	strb	r2, [r3, #24]
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	e000e100 	.word	0xe000e100
 8001f40:	e000ed00 	.word	0xe000ed00

08001f44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b089      	sub	sp, #36	@ 0x24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	f1c3 0307 	rsb	r3, r3, #7
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	bf28      	it	cs
 8001f62:	2304      	movcs	r3, #4
 8001f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	3304      	adds	r3, #4
 8001f6a:	2b06      	cmp	r3, #6
 8001f6c:	d902      	bls.n	8001f74 <NVIC_EncodePriority+0x30>
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	3b03      	subs	r3, #3
 8001f72:	e000      	b.n	8001f76 <NVIC_EncodePriority+0x32>
 8001f74:	2300      	movs	r3, #0
 8001f76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	43da      	mvns	r2, r3
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	401a      	ands	r2, r3
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f8c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	fa01 f303 	lsl.w	r3, r1, r3
 8001f96:	43d9      	mvns	r1, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f9c:	4313      	orrs	r3, r2
         );
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3724      	adds	r7, #36	@ 0x24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
	...

08001fac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fbc:	d301      	bcc.n	8001fc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e00f      	b.n	8001fe2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001fec <SysTick_Config+0x40>)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fca:	210f      	movs	r1, #15
 8001fcc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001fd0:	f7ff ff8e 	bl	8001ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fd4:	4b05      	ldr	r3, [pc, #20]	@ (8001fec <SysTick_Config+0x40>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fda:	4b04      	ldr	r3, [pc, #16]	@ (8001fec <SysTick_Config+0x40>)
 8001fdc:	2207      	movs	r2, #7
 8001fde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	e000e010 	.word	0xe000e010

08001ff0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7ff ff29 	bl	8001e50 <__NVIC_SetPriorityGrouping>
}
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002006:	b580      	push	{r7, lr}
 8002008:	b086      	sub	sp, #24
 800200a:	af00      	add	r7, sp, #0
 800200c:	4603      	mov	r3, r0
 800200e:	60b9      	str	r1, [r7, #8]
 8002010:	607a      	str	r2, [r7, #4]
 8002012:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002018:	f7ff ff3e 	bl	8001e98 <__NVIC_GetPriorityGrouping>
 800201c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	68b9      	ldr	r1, [r7, #8]
 8002022:	6978      	ldr	r0, [r7, #20]
 8002024:	f7ff ff8e 	bl	8001f44 <NVIC_EncodePriority>
 8002028:	4602      	mov	r2, r0
 800202a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800202e:	4611      	mov	r1, r2
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff ff5d 	bl	8001ef0 <__NVIC_SetPriority>
}
 8002036:	bf00      	nop
 8002038:	3718      	adds	r7, #24
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0
 8002044:	4603      	mov	r3, r0
 8002046:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff ff31 	bl	8001eb4 <__NVIC_EnableIRQ>
}
 8002052:	bf00      	nop
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b082      	sub	sp, #8
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7ff ffa2 	bl	8001fac <SysTick_Config>
 8002068:	4603      	mov	r3, r0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
	...

08002074 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002074:	b480      	push	{r7}
 8002076:	b089      	sub	sp, #36	@ 0x24
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002082:	2300      	movs	r3, #0
 8002084:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002086:	2300      	movs	r3, #0
 8002088:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
 800208e:	e16b      	b.n	8002368 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002090:	2201      	movs	r2, #1
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	4013      	ands	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	f040 815a 	bne.w	8002362 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d005      	beq.n	80020c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d130      	bne.n	8002128 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	2203      	movs	r2, #3
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43db      	mvns	r3, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4013      	ands	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020fc:	2201      	movs	r2, #1
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	091b      	lsrs	r3, r3, #4
 8002112:	f003 0201 	and.w	r2, r3, #1
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 0303 	and.w	r3, r3, #3
 8002130:	2b03      	cmp	r3, #3
 8002132:	d017      	beq.n	8002164 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	2203      	movs	r2, #3
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 0303 	and.w	r3, r3, #3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d123      	bne.n	80021b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	08da      	lsrs	r2, r3, #3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3208      	adds	r2, #8
 8002178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800217c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	220f      	movs	r2, #15
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	691a      	ldr	r2, [r3, #16]
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	08da      	lsrs	r2, r3, #3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3208      	adds	r2, #8
 80021b2:	69b9      	ldr	r1, [r7, #24]
 80021b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	2203      	movs	r2, #3
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 0203 	and.w	r2, r3, #3
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 80b4 	beq.w	8002362 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	4b60      	ldr	r3, [pc, #384]	@ (8002380 <HAL_GPIO_Init+0x30c>)
 8002200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002202:	4a5f      	ldr	r2, [pc, #380]	@ (8002380 <HAL_GPIO_Init+0x30c>)
 8002204:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002208:	6453      	str	r3, [r2, #68]	@ 0x44
 800220a:	4b5d      	ldr	r3, [pc, #372]	@ (8002380 <HAL_GPIO_Init+0x30c>)
 800220c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800220e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002216:	4a5b      	ldr	r2, [pc, #364]	@ (8002384 <HAL_GPIO_Init+0x310>)
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	089b      	lsrs	r3, r3, #2
 800221c:	3302      	adds	r3, #2
 800221e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002222:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	f003 0303 	and.w	r3, r3, #3
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	220f      	movs	r2, #15
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43db      	mvns	r3, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4013      	ands	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a52      	ldr	r2, [pc, #328]	@ (8002388 <HAL_GPIO_Init+0x314>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d02b      	beq.n	800229a <HAL_GPIO_Init+0x226>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a51      	ldr	r2, [pc, #324]	@ (800238c <HAL_GPIO_Init+0x318>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d025      	beq.n	8002296 <HAL_GPIO_Init+0x222>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a50      	ldr	r2, [pc, #320]	@ (8002390 <HAL_GPIO_Init+0x31c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d01f      	beq.n	8002292 <HAL_GPIO_Init+0x21e>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a4f      	ldr	r2, [pc, #316]	@ (8002394 <HAL_GPIO_Init+0x320>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d019      	beq.n	800228e <HAL_GPIO_Init+0x21a>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a4e      	ldr	r2, [pc, #312]	@ (8002398 <HAL_GPIO_Init+0x324>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d013      	beq.n	800228a <HAL_GPIO_Init+0x216>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a4d      	ldr	r2, [pc, #308]	@ (800239c <HAL_GPIO_Init+0x328>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d00d      	beq.n	8002286 <HAL_GPIO_Init+0x212>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a4c      	ldr	r2, [pc, #304]	@ (80023a0 <HAL_GPIO_Init+0x32c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d007      	beq.n	8002282 <HAL_GPIO_Init+0x20e>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a4b      	ldr	r2, [pc, #300]	@ (80023a4 <HAL_GPIO_Init+0x330>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d101      	bne.n	800227e <HAL_GPIO_Init+0x20a>
 800227a:	2307      	movs	r3, #7
 800227c:	e00e      	b.n	800229c <HAL_GPIO_Init+0x228>
 800227e:	2308      	movs	r3, #8
 8002280:	e00c      	b.n	800229c <HAL_GPIO_Init+0x228>
 8002282:	2306      	movs	r3, #6
 8002284:	e00a      	b.n	800229c <HAL_GPIO_Init+0x228>
 8002286:	2305      	movs	r3, #5
 8002288:	e008      	b.n	800229c <HAL_GPIO_Init+0x228>
 800228a:	2304      	movs	r3, #4
 800228c:	e006      	b.n	800229c <HAL_GPIO_Init+0x228>
 800228e:	2303      	movs	r3, #3
 8002290:	e004      	b.n	800229c <HAL_GPIO_Init+0x228>
 8002292:	2302      	movs	r3, #2
 8002294:	e002      	b.n	800229c <HAL_GPIO_Init+0x228>
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <HAL_GPIO_Init+0x228>
 800229a:	2300      	movs	r3, #0
 800229c:	69fa      	ldr	r2, [r7, #28]
 800229e:	f002 0203 	and.w	r2, r2, #3
 80022a2:	0092      	lsls	r2, r2, #2
 80022a4:	4093      	lsls	r3, r2
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022ac:	4935      	ldr	r1, [pc, #212]	@ (8002384 <HAL_GPIO_Init+0x310>)
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	089b      	lsrs	r3, r3, #2
 80022b2:	3302      	adds	r3, #2
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022ba:	4b3b      	ldr	r3, [pc, #236]	@ (80023a8 <HAL_GPIO_Init+0x334>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	43db      	mvns	r3, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4013      	ands	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022de:	4a32      	ldr	r2, [pc, #200]	@ (80023a8 <HAL_GPIO_Init+0x334>)
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022e4:	4b30      	ldr	r3, [pc, #192]	@ (80023a8 <HAL_GPIO_Init+0x334>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002308:	4a27      	ldr	r2, [pc, #156]	@ (80023a8 <HAL_GPIO_Init+0x334>)
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800230e:	4b26      	ldr	r3, [pc, #152]	@ (80023a8 <HAL_GPIO_Init+0x334>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	43db      	mvns	r3, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4013      	ands	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	4313      	orrs	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002332:	4a1d      	ldr	r2, [pc, #116]	@ (80023a8 <HAL_GPIO_Init+0x334>)
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002338:	4b1b      	ldr	r3, [pc, #108]	@ (80023a8 <HAL_GPIO_Init+0x334>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	43db      	mvns	r3, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4013      	ands	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d003      	beq.n	800235c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	4313      	orrs	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800235c:	4a12      	ldr	r2, [pc, #72]	@ (80023a8 <HAL_GPIO_Init+0x334>)
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3301      	adds	r3, #1
 8002366:	61fb      	str	r3, [r7, #28]
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	2b0f      	cmp	r3, #15
 800236c:	f67f ae90 	bls.w	8002090 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002370:	bf00      	nop
 8002372:	bf00      	nop
 8002374:	3724      	adds	r7, #36	@ 0x24
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	40023800 	.word	0x40023800
 8002384:	40013800 	.word	0x40013800
 8002388:	40020000 	.word	0x40020000
 800238c:	40020400 	.word	0x40020400
 8002390:	40020800 	.word	0x40020800
 8002394:	40020c00 	.word	0x40020c00
 8002398:	40021000 	.word	0x40021000
 800239c:	40021400 	.word	0x40021400
 80023a0:	40021800 	.word	0x40021800
 80023a4:	40021c00 	.word	0x40021c00
 80023a8:	40013c00 	.word	0x40013c00

080023ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	460b      	mov	r3, r1
 80023b6:	807b      	strh	r3, [r7, #2]
 80023b8:	4613      	mov	r3, r2
 80023ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023bc:	787b      	ldrb	r3, [r7, #1]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023c2:	887a      	ldrh	r2, [r7, #2]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023c8:	e003      	b.n	80023d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023ca:	887b      	ldrh	r3, [r7, #2]
 80023cc:	041a      	lsls	r2, r3, #16
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	619a      	str	r2, [r3, #24]
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023de:	b480      	push	{r7}
 80023e0:	b085      	sub	sp, #20
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
 80023e6:	460b      	mov	r3, r1
 80023e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023f0:	887a      	ldrh	r2, [r7, #2]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	4013      	ands	r3, r2
 80023f6:	041a      	lsls	r2, r3, #16
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	43d9      	mvns	r1, r3
 80023fc:	887b      	ldrh	r3, [r7, #2]
 80023fe:	400b      	ands	r3, r1
 8002400:	431a      	orrs	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	619a      	str	r2, [r3, #24]
}
 8002406:	bf00      	nop
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b086      	sub	sp, #24
 8002416:	af02      	add	r7, sp, #8
 8002418:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e059      	b.n	80024d8 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d106      	bne.n	8002444 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f008 f890 	bl	800a564 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2203      	movs	r2, #3
 8002448:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002452:	d102      	bne.n	800245a <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f004 fea9 	bl	80071b6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6818      	ldr	r0, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	7c1a      	ldrb	r2, [r3, #16]
 800246c:	f88d 2000 	strb.w	r2, [sp]
 8002470:	3304      	adds	r3, #4
 8002472:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002474:	f004 fe2a 	bl	80070cc <USB_CoreInit>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d005      	beq.n	800248a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2202      	movs	r2, #2
 8002482:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e026      	b.n	80024d8 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2101      	movs	r1, #1
 8002490:	4618      	mov	r0, r3
 8002492:	f004 fea1 	bl	80071d8 <USB_SetCurrentMode>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d005      	beq.n	80024a8 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2202      	movs	r2, #2
 80024a0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e017      	b.n	80024d8 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6818      	ldr	r0, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	7c1a      	ldrb	r2, [r3, #16]
 80024b0:	f88d 2000 	strb.w	r2, [sp]
 80024b4:	3304      	adds	r3, #4
 80024b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024b8:	f005 f844 	bl	8007544 <USB_HostInit>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d005      	beq.n	80024ce <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2202      	movs	r2, #2
 80024c6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e004      	b.n	80024d8 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80024e0:	b590      	push	{r4, r7, lr}
 80024e2:	b08b      	sub	sp, #44	@ 0x2c
 80024e4:	af04      	add	r7, sp, #16
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	4608      	mov	r0, r1
 80024ea:	4611      	mov	r1, r2
 80024ec:	461a      	mov	r2, r3
 80024ee:	4603      	mov	r3, r0
 80024f0:	70fb      	strb	r3, [r7, #3]
 80024f2:	460b      	mov	r3, r1
 80024f4:	70bb      	strb	r3, [r7, #2]
 80024f6:	4613      	mov	r3, r2
 80024f8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80024fa:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80024fc:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002504:	2b01      	cmp	r3, #1
 8002506:	d101      	bne.n	800250c <HAL_HCD_HC_Init+0x2c>
 8002508:	2302      	movs	r3, #2
 800250a:	e09d      	b.n	8002648 <HAL_HCD_HC_Init+0x168>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002514:	78fa      	ldrb	r2, [r7, #3]
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	4613      	mov	r3, r2
 800251a:	011b      	lsls	r3, r3, #4
 800251c:	1a9b      	subs	r3, r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	440b      	add	r3, r1
 8002522:	3319      	adds	r3, #25
 8002524:	2200      	movs	r2, #0
 8002526:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002528:	78fa      	ldrb	r2, [r7, #3]
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	1a9b      	subs	r3, r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	3314      	adds	r3, #20
 8002538:	787a      	ldrb	r2, [r7, #1]
 800253a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800253c:	78fa      	ldrb	r2, [r7, #3]
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	4613      	mov	r3, r2
 8002542:	011b      	lsls	r3, r3, #4
 8002544:	1a9b      	subs	r3, r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	440b      	add	r3, r1
 800254a:	3315      	adds	r3, #21
 800254c:	78fa      	ldrb	r2, [r7, #3]
 800254e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002550:	78fa      	ldrb	r2, [r7, #3]
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	011b      	lsls	r3, r3, #4
 8002558:	1a9b      	subs	r3, r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	3326      	adds	r3, #38	@ 0x26
 8002560:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002564:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002566:	78fa      	ldrb	r2, [r7, #3]
 8002568:	78bb      	ldrb	r3, [r7, #2]
 800256a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800256e:	b2d8      	uxtb	r0, r3
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	4613      	mov	r3, r2
 8002574:	011b      	lsls	r3, r3, #4
 8002576:	1a9b      	subs	r3, r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	440b      	add	r3, r1
 800257c:	3316      	adds	r3, #22
 800257e:	4602      	mov	r2, r0
 8002580:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002582:	78fb      	ldrb	r3, [r7, #3]
 8002584:	4619      	mov	r1, r3
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 fbc8 	bl	8002d1c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800258c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002590:	2b00      	cmp	r3, #0
 8002592:	da0a      	bge.n	80025aa <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002594:	78fa      	ldrb	r2, [r7, #3]
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	4613      	mov	r3, r2
 800259a:	011b      	lsls	r3, r3, #4
 800259c:	1a9b      	subs	r3, r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	440b      	add	r3, r1
 80025a2:	3317      	adds	r3, #23
 80025a4:	2201      	movs	r2, #1
 80025a6:	701a      	strb	r2, [r3, #0]
 80025a8:	e009      	b.n	80025be <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80025aa:	78fa      	ldrb	r2, [r7, #3]
 80025ac:	6879      	ldr	r1, [r7, #4]
 80025ae:	4613      	mov	r3, r2
 80025b0:	011b      	lsls	r3, r3, #4
 80025b2:	1a9b      	subs	r3, r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	440b      	add	r3, r1
 80025b8:	3317      	adds	r3, #23
 80025ba:	2200      	movs	r2, #0
 80025bc:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f005 f922 	bl	800780c <USB_GetHostSpeed>
 80025c8:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80025ca:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d10b      	bne.n	80025ea <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80025d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d107      	bne.n	80025ea <HAL_HCD_HC_Init+0x10a>
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d104      	bne.n	80025ea <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	2bbc      	cmp	r3, #188	@ 0xbc
 80025e4:	d901      	bls.n	80025ea <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80025e6:	23bc      	movs	r3, #188	@ 0xbc
 80025e8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80025ea:	78fa      	ldrb	r2, [r7, #3]
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	4613      	mov	r3, r2
 80025f0:	011b      	lsls	r3, r3, #4
 80025f2:	1a9b      	subs	r3, r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	440b      	add	r3, r1
 80025f8:	3318      	adds	r3, #24
 80025fa:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80025fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002600:	78fa      	ldrb	r2, [r7, #3]
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	b298      	uxth	r0, r3
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	4613      	mov	r3, r2
 800260a:	011b      	lsls	r3, r3, #4
 800260c:	1a9b      	subs	r3, r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	3328      	adds	r3, #40	@ 0x28
 8002614:	4602      	mov	r2, r0
 8002616:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6818      	ldr	r0, [r3, #0]
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	b29b      	uxth	r3, r3
 8002620:	787c      	ldrb	r4, [r7, #1]
 8002622:	78ba      	ldrb	r2, [r7, #2]
 8002624:	78f9      	ldrb	r1, [r7, #3]
 8002626:	9302      	str	r3, [sp, #8]
 8002628:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800262c:	9301      	str	r3, [sp, #4]
 800262e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002632:	9300      	str	r3, [sp, #0]
 8002634:	4623      	mov	r3, r4
 8002636:	f005 f911 	bl	800785c <USB_HC_Init>
 800263a:	4603      	mov	r3, r0
 800263c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002646:	7bfb      	ldrb	r3, [r7, #15]
}
 8002648:	4618      	mov	r0, r3
 800264a:	371c      	adds	r7, #28
 800264c:	46bd      	mov	sp, r7
 800264e:	bd90      	pop	{r4, r7, pc}

08002650 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	460b      	mov	r3, r1
 800265a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800265c:	2300      	movs	r3, #0
 800265e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <HAL_HCD_HC_Halt+0x1e>
 800266a:	2302      	movs	r3, #2
 800266c:	e00f      	b.n	800268e <HAL_HCD_HC_Halt+0x3e>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	78fa      	ldrb	r2, [r7, #3]
 800267c:	4611      	mov	r1, r2
 800267e:	4618      	mov	r0, r3
 8002680:	f005 fca3 	bl	8007fca <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800268c:	7bfb      	ldrb	r3, [r7, #15]
}
 800268e:	4618      	mov	r0, r3
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
	...

08002698 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	4608      	mov	r0, r1
 80026a2:	4611      	mov	r1, r2
 80026a4:	461a      	mov	r2, r3
 80026a6:	4603      	mov	r3, r0
 80026a8:	70fb      	strb	r3, [r7, #3]
 80026aa:	460b      	mov	r3, r1
 80026ac:	70bb      	strb	r3, [r7, #2]
 80026ae:	4613      	mov	r3, r2
 80026b0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80026b2:	78fa      	ldrb	r2, [r7, #3]
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	4613      	mov	r3, r2
 80026b8:	011b      	lsls	r3, r3, #4
 80026ba:	1a9b      	subs	r3, r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	440b      	add	r3, r1
 80026c0:	3317      	adds	r3, #23
 80026c2:	78ba      	ldrb	r2, [r7, #2]
 80026c4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80026c6:	78fa      	ldrb	r2, [r7, #3]
 80026c8:	6879      	ldr	r1, [r7, #4]
 80026ca:	4613      	mov	r3, r2
 80026cc:	011b      	lsls	r3, r3, #4
 80026ce:	1a9b      	subs	r3, r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	440b      	add	r3, r1
 80026d4:	3326      	adds	r3, #38	@ 0x26
 80026d6:	787a      	ldrb	r2, [r7, #1]
 80026d8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80026da:	7c3b      	ldrb	r3, [r7, #16]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d114      	bne.n	800270a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80026e0:	78fa      	ldrb	r2, [r7, #3]
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	4613      	mov	r3, r2
 80026e6:	011b      	lsls	r3, r3, #4
 80026e8:	1a9b      	subs	r3, r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	332a      	adds	r3, #42	@ 0x2a
 80026f0:	2203      	movs	r2, #3
 80026f2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80026f4:	78fa      	ldrb	r2, [r7, #3]
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	4613      	mov	r3, r2
 80026fa:	011b      	lsls	r3, r3, #4
 80026fc:	1a9b      	subs	r3, r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	3319      	adds	r3, #25
 8002704:	7f3a      	ldrb	r2, [r7, #28]
 8002706:	701a      	strb	r2, [r3, #0]
 8002708:	e009      	b.n	800271e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800270a:	78fa      	ldrb	r2, [r7, #3]
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	4613      	mov	r3, r2
 8002710:	011b      	lsls	r3, r3, #4
 8002712:	1a9b      	subs	r3, r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	440b      	add	r3, r1
 8002718:	332a      	adds	r3, #42	@ 0x2a
 800271a:	2202      	movs	r2, #2
 800271c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800271e:	787b      	ldrb	r3, [r7, #1]
 8002720:	2b03      	cmp	r3, #3
 8002722:	f200 8102 	bhi.w	800292a <HAL_HCD_HC_SubmitRequest+0x292>
 8002726:	a201      	add	r2, pc, #4	@ (adr r2, 800272c <HAL_HCD_HC_SubmitRequest+0x94>)
 8002728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800272c:	0800273d 	.word	0x0800273d
 8002730:	08002915 	.word	0x08002915
 8002734:	08002801 	.word	0x08002801
 8002738:	0800288b 	.word	0x0800288b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800273c:	7c3b      	ldrb	r3, [r7, #16]
 800273e:	2b01      	cmp	r3, #1
 8002740:	f040 80f5 	bne.w	800292e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002744:	78bb      	ldrb	r3, [r7, #2]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d12d      	bne.n	80027a6 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800274a:	8b3b      	ldrh	r3, [r7, #24]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d109      	bne.n	8002764 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002750:	78fa      	ldrb	r2, [r7, #3]
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	4613      	mov	r3, r2
 8002756:	011b      	lsls	r3, r3, #4
 8002758:	1a9b      	subs	r3, r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	440b      	add	r3, r1
 800275e:	333d      	adds	r3, #61	@ 0x3d
 8002760:	2201      	movs	r2, #1
 8002762:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002764:	78fa      	ldrb	r2, [r7, #3]
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	4613      	mov	r3, r2
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	1a9b      	subs	r3, r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	333d      	adds	r3, #61	@ 0x3d
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10a      	bne.n	8002790 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800277a:	78fa      	ldrb	r2, [r7, #3]
 800277c:	6879      	ldr	r1, [r7, #4]
 800277e:	4613      	mov	r3, r2
 8002780:	011b      	lsls	r3, r3, #4
 8002782:	1a9b      	subs	r3, r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	440b      	add	r3, r1
 8002788:	332a      	adds	r3, #42	@ 0x2a
 800278a:	2200      	movs	r2, #0
 800278c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800278e:	e0ce      	b.n	800292e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002790:	78fa      	ldrb	r2, [r7, #3]
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	4613      	mov	r3, r2
 8002796:	011b      	lsls	r3, r3, #4
 8002798:	1a9b      	subs	r3, r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	440b      	add	r3, r1
 800279e:	332a      	adds	r3, #42	@ 0x2a
 80027a0:	2202      	movs	r2, #2
 80027a2:	701a      	strb	r2, [r3, #0]
      break;
 80027a4:	e0c3      	b.n	800292e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80027a6:	78fa      	ldrb	r2, [r7, #3]
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	4613      	mov	r3, r2
 80027ac:	011b      	lsls	r3, r3, #4
 80027ae:	1a9b      	subs	r3, r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	440b      	add	r3, r1
 80027b4:	331a      	adds	r3, #26
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	f040 80b8 	bne.w	800292e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80027be:	78fa      	ldrb	r2, [r7, #3]
 80027c0:	6879      	ldr	r1, [r7, #4]
 80027c2:	4613      	mov	r3, r2
 80027c4:	011b      	lsls	r3, r3, #4
 80027c6:	1a9b      	subs	r3, r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	440b      	add	r3, r1
 80027cc:	333c      	adds	r3, #60	@ 0x3c
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10a      	bne.n	80027ea <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027d4:	78fa      	ldrb	r2, [r7, #3]
 80027d6:	6879      	ldr	r1, [r7, #4]
 80027d8:	4613      	mov	r3, r2
 80027da:	011b      	lsls	r3, r3, #4
 80027dc:	1a9b      	subs	r3, r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	440b      	add	r3, r1
 80027e2:	332a      	adds	r3, #42	@ 0x2a
 80027e4:	2200      	movs	r2, #0
 80027e6:	701a      	strb	r2, [r3, #0]
      break;
 80027e8:	e0a1      	b.n	800292e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027ea:	78fa      	ldrb	r2, [r7, #3]
 80027ec:	6879      	ldr	r1, [r7, #4]
 80027ee:	4613      	mov	r3, r2
 80027f0:	011b      	lsls	r3, r3, #4
 80027f2:	1a9b      	subs	r3, r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	440b      	add	r3, r1
 80027f8:	332a      	adds	r3, #42	@ 0x2a
 80027fa:	2202      	movs	r2, #2
 80027fc:	701a      	strb	r2, [r3, #0]
      break;
 80027fe:	e096      	b.n	800292e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002800:	78bb      	ldrb	r3, [r7, #2]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d120      	bne.n	8002848 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002806:	78fa      	ldrb	r2, [r7, #3]
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	4613      	mov	r3, r2
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	1a9b      	subs	r3, r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	440b      	add	r3, r1
 8002814:	333d      	adds	r3, #61	@ 0x3d
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d10a      	bne.n	8002832 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800281c:	78fa      	ldrb	r2, [r7, #3]
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	4613      	mov	r3, r2
 8002822:	011b      	lsls	r3, r3, #4
 8002824:	1a9b      	subs	r3, r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	440b      	add	r3, r1
 800282a:	332a      	adds	r3, #42	@ 0x2a
 800282c:	2200      	movs	r2, #0
 800282e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002830:	e07e      	b.n	8002930 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002832:	78fa      	ldrb	r2, [r7, #3]
 8002834:	6879      	ldr	r1, [r7, #4]
 8002836:	4613      	mov	r3, r2
 8002838:	011b      	lsls	r3, r3, #4
 800283a:	1a9b      	subs	r3, r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	440b      	add	r3, r1
 8002840:	332a      	adds	r3, #42	@ 0x2a
 8002842:	2202      	movs	r2, #2
 8002844:	701a      	strb	r2, [r3, #0]
      break;
 8002846:	e073      	b.n	8002930 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002848:	78fa      	ldrb	r2, [r7, #3]
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	4613      	mov	r3, r2
 800284e:	011b      	lsls	r3, r3, #4
 8002850:	1a9b      	subs	r3, r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	440b      	add	r3, r1
 8002856:	333c      	adds	r3, #60	@ 0x3c
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10a      	bne.n	8002874 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800285e:	78fa      	ldrb	r2, [r7, #3]
 8002860:	6879      	ldr	r1, [r7, #4]
 8002862:	4613      	mov	r3, r2
 8002864:	011b      	lsls	r3, r3, #4
 8002866:	1a9b      	subs	r3, r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	440b      	add	r3, r1
 800286c:	332a      	adds	r3, #42	@ 0x2a
 800286e:	2200      	movs	r2, #0
 8002870:	701a      	strb	r2, [r3, #0]
      break;
 8002872:	e05d      	b.n	8002930 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002874:	78fa      	ldrb	r2, [r7, #3]
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	4613      	mov	r3, r2
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	1a9b      	subs	r3, r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	332a      	adds	r3, #42	@ 0x2a
 8002884:	2202      	movs	r2, #2
 8002886:	701a      	strb	r2, [r3, #0]
      break;
 8002888:	e052      	b.n	8002930 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800288a:	78bb      	ldrb	r3, [r7, #2]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d120      	bne.n	80028d2 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002890:	78fa      	ldrb	r2, [r7, #3]
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	4613      	mov	r3, r2
 8002896:	011b      	lsls	r3, r3, #4
 8002898:	1a9b      	subs	r3, r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	440b      	add	r3, r1
 800289e:	333d      	adds	r3, #61	@ 0x3d
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10a      	bne.n	80028bc <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028a6:	78fa      	ldrb	r2, [r7, #3]
 80028a8:	6879      	ldr	r1, [r7, #4]
 80028aa:	4613      	mov	r3, r2
 80028ac:	011b      	lsls	r3, r3, #4
 80028ae:	1a9b      	subs	r3, r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	440b      	add	r3, r1
 80028b4:	332a      	adds	r3, #42	@ 0x2a
 80028b6:	2200      	movs	r2, #0
 80028b8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80028ba:	e039      	b.n	8002930 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028bc:	78fa      	ldrb	r2, [r7, #3]
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	011b      	lsls	r3, r3, #4
 80028c4:	1a9b      	subs	r3, r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	332a      	adds	r3, #42	@ 0x2a
 80028cc:	2202      	movs	r2, #2
 80028ce:	701a      	strb	r2, [r3, #0]
      break;
 80028d0:	e02e      	b.n	8002930 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80028d2:	78fa      	ldrb	r2, [r7, #3]
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	4613      	mov	r3, r2
 80028d8:	011b      	lsls	r3, r3, #4
 80028da:	1a9b      	subs	r3, r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	440b      	add	r3, r1
 80028e0:	333c      	adds	r3, #60	@ 0x3c
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d10a      	bne.n	80028fe <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028e8:	78fa      	ldrb	r2, [r7, #3]
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	1a9b      	subs	r3, r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	332a      	adds	r3, #42	@ 0x2a
 80028f8:	2200      	movs	r2, #0
 80028fa:	701a      	strb	r2, [r3, #0]
      break;
 80028fc:	e018      	b.n	8002930 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028fe:	78fa      	ldrb	r2, [r7, #3]
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	4613      	mov	r3, r2
 8002904:	011b      	lsls	r3, r3, #4
 8002906:	1a9b      	subs	r3, r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	440b      	add	r3, r1
 800290c:	332a      	adds	r3, #42	@ 0x2a
 800290e:	2202      	movs	r2, #2
 8002910:	701a      	strb	r2, [r3, #0]
      break;
 8002912:	e00d      	b.n	8002930 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002914:	78fa      	ldrb	r2, [r7, #3]
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	1a9b      	subs	r3, r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	332a      	adds	r3, #42	@ 0x2a
 8002924:	2200      	movs	r2, #0
 8002926:	701a      	strb	r2, [r3, #0]
      break;
 8002928:	e002      	b.n	8002930 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800292a:	bf00      	nop
 800292c:	e000      	b.n	8002930 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800292e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002930:	78fa      	ldrb	r2, [r7, #3]
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	4613      	mov	r3, r2
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	1a9b      	subs	r3, r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	332c      	adds	r3, #44	@ 0x2c
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002944:	78fa      	ldrb	r2, [r7, #3]
 8002946:	8b39      	ldrh	r1, [r7, #24]
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	011b      	lsls	r3, r3, #4
 800294e:	1a9b      	subs	r3, r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4403      	add	r3, r0
 8002954:	3334      	adds	r3, #52	@ 0x34
 8002956:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002958:	78fa      	ldrb	r2, [r7, #3]
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	4613      	mov	r3, r2
 800295e:	011b      	lsls	r3, r3, #4
 8002960:	1a9b      	subs	r3, r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	440b      	add	r3, r1
 8002966:	334c      	adds	r3, #76	@ 0x4c
 8002968:	2200      	movs	r2, #0
 800296a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800296c:	78fa      	ldrb	r2, [r7, #3]
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	4613      	mov	r3, r2
 8002972:	011b      	lsls	r3, r3, #4
 8002974:	1a9b      	subs	r3, r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	3338      	adds	r3, #56	@ 0x38
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002980:	78fa      	ldrb	r2, [r7, #3]
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	4613      	mov	r3, r2
 8002986:	011b      	lsls	r3, r3, #4
 8002988:	1a9b      	subs	r3, r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	440b      	add	r3, r1
 800298e:	3315      	adds	r3, #21
 8002990:	78fa      	ldrb	r2, [r7, #3]
 8002992:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002994:	78fa      	ldrb	r2, [r7, #3]
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	4613      	mov	r3, r2
 800299a:	011b      	lsls	r3, r3, #4
 800299c:	1a9b      	subs	r3, r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	440b      	add	r3, r1
 80029a2:	334d      	adds	r3, #77	@ 0x4d
 80029a4:	2200      	movs	r2, #0
 80029a6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6818      	ldr	r0, [r3, #0]
 80029ac:	78fa      	ldrb	r2, [r7, #3]
 80029ae:	4613      	mov	r3, r2
 80029b0:	011b      	lsls	r3, r3, #4
 80029b2:	1a9b      	subs	r3, r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	3310      	adds	r3, #16
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	4413      	add	r3, r2
 80029bc:	1d19      	adds	r1, r3, #4
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	799b      	ldrb	r3, [r3, #6]
 80029c2:	461a      	mov	r2, r3
 80029c4:	f005 f876 	bl	8007ab4 <USB_HC_StartXfer>
 80029c8:	4603      	mov	r3, r0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop

080029d4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f004 fd6a 	bl	80074c4 <USB_GetMode>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	f040 80fb 	bne.w	8002bee <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f004 fd2d 	bl	800745c <USB_ReadInterrupts>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 80f1 	beq.w	8002bec <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f004 fd24 	bl	800745c <USB_ReadInterrupts>
 8002a14:	4603      	mov	r3, r0
 8002a16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a1a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a1e:	d104      	bne.n	8002a2a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002a28:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f004 fd14 	bl	800745c <USB_ReadInterrupts>
 8002a34:	4603      	mov	r3, r0
 8002a36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a3e:	d104      	bne.n	8002a4a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002a48:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f004 fd04 	bl	800745c <USB_ReadInterrupts>
 8002a54:	4603      	mov	r3, r0
 8002a56:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a5a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a5e:	d104      	bne.n	8002a6a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002a68:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f004 fcf4 	bl	800745c <USB_ReadInterrupts>
 8002a74:	4603      	mov	r3, r0
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d103      	bne.n	8002a86 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2202      	movs	r2, #2
 8002a84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f004 fce6 	bl	800745c <USB_ReadInterrupts>
 8002a90:	4603      	mov	r3, r0
 8002a92:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a9a:	d120      	bne.n	8002ade <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002aa4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d113      	bne.n	8002ade <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002ab6:	2110      	movs	r1, #16
 8002ab8:	6938      	ldr	r0, [r7, #16]
 8002aba:	f004 fbd9 	bl	8007270 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002abe:	6938      	ldr	r0, [r7, #16]
 8002ac0:	f004 fc08 	bl	80072d4 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	7a5b      	ldrb	r3, [r3, #9]
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d105      	bne.n	8002ad8 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f004 fdfa 	bl	80076cc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f007 fdc1 	bl	800a660 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f004 fcba 	bl	800745c <USB_ReadInterrupts>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002aee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002af2:	d102      	bne.n	8002afa <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f001 fd4d 	bl	8004594 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f004 fcac 	bl	800745c <USB_ReadInterrupts>
 8002b04:	4603      	mov	r3, r0
 8002b06:	f003 0308 	and.w	r3, r3, #8
 8002b0a:	2b08      	cmp	r3, #8
 8002b0c:	d106      	bne.n	8002b1c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f007 fd8a 	bl	800a628 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2208      	movs	r2, #8
 8002b1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f004 fc9b 	bl	800745c <USB_ReadInterrupts>
 8002b26:	4603      	mov	r3, r0
 8002b28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b30:	d139      	bne.n	8002ba6 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f005 fa36 	bl	8007fa8 <USB_HC_ReadInterrupt>
 8002b3c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b3e:	2300      	movs	r3, #0
 8002b40:	617b      	str	r3, [r7, #20]
 8002b42:	e025      	b.n	8002b90 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	f003 030f 	and.w	r3, r3, #15
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d018      	beq.n	8002b8a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	015a      	lsls	r2, r3, #5
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	4413      	add	r3, r2
 8002b60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b6e:	d106      	bne.n	8002b7e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	4619      	mov	r1, r3
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f905 	bl	8002d86 <HCD_HC_IN_IRQHandler>
 8002b7c:	e005      	b.n	8002b8a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	4619      	mov	r1, r3
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 ff67 	bl	8003a58 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	617b      	str	r3, [r7, #20]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	795b      	ldrb	r3, [r3, #5]
 8002b94:	461a      	mov	r2, r3
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d3d3      	bcc.n	8002b44 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ba4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f004 fc56 	bl	800745c <USB_ReadInterrupts>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	f003 0310 	and.w	r3, r3, #16
 8002bb6:	2b10      	cmp	r3, #16
 8002bb8:	d101      	bne.n	8002bbe <HAL_HCD_IRQHandler+0x1ea>
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e000      	b.n	8002bc0 <HAL_HCD_IRQHandler+0x1ec>
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d014      	beq.n	8002bee <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	699a      	ldr	r2, [r3, #24]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0210 	bic.w	r2, r2, #16
 8002bd2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f001 fbfe 	bl	80043d6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	699a      	ldr	r2, [r3, #24]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f042 0210 	orr.w	r2, r2, #16
 8002be8:	619a      	str	r2, [r3, #24]
 8002bea:	e000      	b.n	8002bee <HAL_HCD_IRQHandler+0x21a>
      return;
 8002bec:	bf00      	nop
    }
  }
}
 8002bee:	3718      	adds	r7, #24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d101      	bne.n	8002c0a <HAL_HCD_Start+0x16>
 8002c06:	2302      	movs	r3, #2
 8002c08:	e013      	b.n	8002c32 <HAL_HCD_Start+0x3e>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2101      	movs	r1, #1
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f004 fdbe 	bl	800779a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f004 fab6 	bl	8007194 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b082      	sub	sp, #8
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d101      	bne.n	8002c50 <HAL_HCD_Stop+0x16>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e00d      	b.n	8002c6c <HAL_HCD_Stop+0x32>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f005 fb11 	bl	8008284 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3708      	adds	r7, #8
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f004 fd60 	bl	8007746 <USB_ResetPort>
 8002c86:	4603      	mov	r3, r0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	460b      	mov	r3, r1
 8002c9a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002c9c:	78fa      	ldrb	r2, [r7, #3]
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	011b      	lsls	r3, r3, #4
 8002ca4:	1a9b      	subs	r3, r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	440b      	add	r3, r1
 8002caa:	334c      	adds	r3, #76	@ 0x4c
 8002cac:	781b      	ldrb	r3, [r3, #0]
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002cc6:	78fa      	ldrb	r2, [r7, #3]
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	011b      	lsls	r3, r3, #4
 8002cce:	1a9b      	subs	r3, r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	440b      	add	r3, r1
 8002cd4:	3338      	adds	r3, #56	@ 0x38
 8002cd6:	681b      	ldr	r3, [r3, #0]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f004 fda2 	bl	800783a <USB_GetCurrentFrame>
 8002cf6:	4603      	mov	r3, r0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f004 fd7d 	bl	800780c <USB_GetHostSpeed>
 8002d12:	4603      	mov	r3, r0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	460b      	mov	r3, r1
 8002d26:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002d28:	78fa      	ldrb	r2, [r7, #3]
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	011b      	lsls	r3, r3, #4
 8002d30:	1a9b      	subs	r3, r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	440b      	add	r3, r1
 8002d36:	331a      	adds	r3, #26
 8002d38:	2200      	movs	r2, #0
 8002d3a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002d3c:	78fa      	ldrb	r2, [r7, #3]
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	4613      	mov	r3, r2
 8002d42:	011b      	lsls	r3, r3, #4
 8002d44:	1a9b      	subs	r3, r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	440b      	add	r3, r1
 8002d4a:	331b      	adds	r3, #27
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002d50:	78fa      	ldrb	r2, [r7, #3]
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	4613      	mov	r3, r2
 8002d56:	011b      	lsls	r3, r3, #4
 8002d58:	1a9b      	subs	r3, r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	3325      	adds	r3, #37	@ 0x25
 8002d60:	2200      	movs	r2, #0
 8002d62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002d64:	78fa      	ldrb	r2, [r7, #3]
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	011b      	lsls	r3, r3, #4
 8002d6c:	1a9b      	subs	r3, r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	3324      	adds	r3, #36	@ 0x24
 8002d74:	2200      	movs	r2, #0
 8002d76:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b086      	sub	sp, #24
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
 8002d8e:	460b      	mov	r3, r1
 8002d90:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	78fa      	ldrb	r2, [r7, #3]
 8002da2:	4611      	mov	r1, r2
 8002da4:	4618      	mov	r0, r3
 8002da6:	f004 fb6c 	bl	8007482 <USB_ReadChInterrupts>
 8002daa:	4603      	mov	r3, r0
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	2b04      	cmp	r3, #4
 8002db2:	d11a      	bne.n	8002dea <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002db4:	78fb      	ldrb	r3, [r7, #3]
 8002db6:	015a      	lsls	r2, r3, #5
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	4413      	add	r3, r2
 8002dbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	2304      	movs	r3, #4
 8002dc4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002dc6:	78fa      	ldrb	r2, [r7, #3]
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	011b      	lsls	r3, r3, #4
 8002dce:	1a9b      	subs	r3, r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	440b      	add	r3, r1
 8002dd4:	334d      	adds	r3, #77	@ 0x4d
 8002dd6:	2207      	movs	r2, #7
 8002dd8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	78fa      	ldrb	r2, [r7, #3]
 8002de0:	4611      	mov	r1, r2
 8002de2:	4618      	mov	r0, r3
 8002de4:	f005 f8f1 	bl	8007fca <USB_HC_Halt>
 8002de8:	e09e      	b.n	8002f28 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	78fa      	ldrb	r2, [r7, #3]
 8002df0:	4611      	mov	r1, r2
 8002df2:	4618      	mov	r0, r3
 8002df4:	f004 fb45 	bl	8007482 <USB_ReadChInterrupts>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e02:	d11b      	bne.n	8002e3c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002e04:	78fb      	ldrb	r3, [r7, #3]
 8002e06:	015a      	lsls	r2, r3, #5
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e10:	461a      	mov	r2, r3
 8002e12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e16:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002e18:	78fa      	ldrb	r2, [r7, #3]
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	011b      	lsls	r3, r3, #4
 8002e20:	1a9b      	subs	r3, r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	334d      	adds	r3, #77	@ 0x4d
 8002e28:	2208      	movs	r2, #8
 8002e2a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	78fa      	ldrb	r2, [r7, #3]
 8002e32:	4611      	mov	r1, r2
 8002e34:	4618      	mov	r0, r3
 8002e36:	f005 f8c8 	bl	8007fca <USB_HC_Halt>
 8002e3a:	e075      	b.n	8002f28 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	78fa      	ldrb	r2, [r7, #3]
 8002e42:	4611      	mov	r1, r2
 8002e44:	4618      	mov	r0, r3
 8002e46:	f004 fb1c 	bl	8007482 <USB_ReadChInterrupts>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	f003 0308 	and.w	r3, r3, #8
 8002e50:	2b08      	cmp	r3, #8
 8002e52:	d11a      	bne.n	8002e8a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002e54:	78fb      	ldrb	r3, [r7, #3]
 8002e56:	015a      	lsls	r2, r3, #5
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e60:	461a      	mov	r2, r3
 8002e62:	2308      	movs	r3, #8
 8002e64:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002e66:	78fa      	ldrb	r2, [r7, #3]
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	1a9b      	subs	r3, r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	440b      	add	r3, r1
 8002e74:	334d      	adds	r3, #77	@ 0x4d
 8002e76:	2206      	movs	r2, #6
 8002e78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	78fa      	ldrb	r2, [r7, #3]
 8002e80:	4611      	mov	r1, r2
 8002e82:	4618      	mov	r0, r3
 8002e84:	f005 f8a1 	bl	8007fca <USB_HC_Halt>
 8002e88:	e04e      	b.n	8002f28 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	78fa      	ldrb	r2, [r7, #3]
 8002e90:	4611      	mov	r1, r2
 8002e92:	4618      	mov	r0, r3
 8002e94:	f004 faf5 	bl	8007482 <USB_ReadChInterrupts>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ea2:	d11b      	bne.n	8002edc <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002ea4:	78fb      	ldrb	r3, [r7, #3]
 8002ea6:	015a      	lsls	r2, r3, #5
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	4413      	add	r3, r2
 8002eac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002eb6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002eb8:	78fa      	ldrb	r2, [r7, #3]
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	011b      	lsls	r3, r3, #4
 8002ec0:	1a9b      	subs	r3, r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	334d      	adds	r3, #77	@ 0x4d
 8002ec8:	2209      	movs	r2, #9
 8002eca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	78fa      	ldrb	r2, [r7, #3]
 8002ed2:	4611      	mov	r1, r2
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f005 f878 	bl	8007fca <USB_HC_Halt>
 8002eda:	e025      	b.n	8002f28 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	78fa      	ldrb	r2, [r7, #3]
 8002ee2:	4611      	mov	r1, r2
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f004 facc 	bl	8007482 <USB_ReadChInterrupts>
 8002eea:	4603      	mov	r3, r0
 8002eec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ef0:	2b80      	cmp	r3, #128	@ 0x80
 8002ef2:	d119      	bne.n	8002f28 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002ef4:	78fb      	ldrb	r3, [r7, #3]
 8002ef6:	015a      	lsls	r2, r3, #5
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	4413      	add	r3, r2
 8002efc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f00:	461a      	mov	r2, r3
 8002f02:	2380      	movs	r3, #128	@ 0x80
 8002f04:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002f06:	78fa      	ldrb	r2, [r7, #3]
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	011b      	lsls	r3, r3, #4
 8002f0e:	1a9b      	subs	r3, r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	440b      	add	r3, r1
 8002f14:	334d      	adds	r3, #77	@ 0x4d
 8002f16:	2207      	movs	r2, #7
 8002f18:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	78fa      	ldrb	r2, [r7, #3]
 8002f20:	4611      	mov	r1, r2
 8002f22:	4618      	mov	r0, r3
 8002f24:	f005 f851 	bl	8007fca <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	78fa      	ldrb	r2, [r7, #3]
 8002f2e:	4611      	mov	r1, r2
 8002f30:	4618      	mov	r0, r3
 8002f32:	f004 faa6 	bl	8007482 <USB_ReadChInterrupts>
 8002f36:	4603      	mov	r3, r0
 8002f38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f40:	d112      	bne.n	8002f68 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	78fa      	ldrb	r2, [r7, #3]
 8002f48:	4611      	mov	r1, r2
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f005 f83d 	bl	8007fca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002f50:	78fb      	ldrb	r3, [r7, #3]
 8002f52:	015a      	lsls	r2, r3, #5
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	4413      	add	r3, r2
 8002f58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f62:	6093      	str	r3, [r2, #8]
 8002f64:	f000 bd75 	b.w	8003a52 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	78fa      	ldrb	r2, [r7, #3]
 8002f6e:	4611      	mov	r1, r2
 8002f70:	4618      	mov	r0, r3
 8002f72:	f004 fa86 	bl	8007482 <USB_ReadChInterrupts>
 8002f76:	4603      	mov	r3, r0
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	f040 8128 	bne.w	80031d2 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002f82:	78fb      	ldrb	r3, [r7, #3]
 8002f84:	015a      	lsls	r2, r3, #5
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	4413      	add	r3, r2
 8002f8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f8e:	461a      	mov	r2, r3
 8002f90:	2320      	movs	r3, #32
 8002f92:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002f94:	78fa      	ldrb	r2, [r7, #3]
 8002f96:	6879      	ldr	r1, [r7, #4]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	011b      	lsls	r3, r3, #4
 8002f9c:	1a9b      	subs	r3, r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	331b      	adds	r3, #27
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d119      	bne.n	8002fde <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002faa:	78fa      	ldrb	r2, [r7, #3]
 8002fac:	6879      	ldr	r1, [r7, #4]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	011b      	lsls	r3, r3, #4
 8002fb2:	1a9b      	subs	r3, r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	440b      	add	r3, r1
 8002fb8:	331b      	adds	r3, #27
 8002fba:	2200      	movs	r2, #0
 8002fbc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002fbe:	78fb      	ldrb	r3, [r7, #3]
 8002fc0:	015a      	lsls	r2, r3, #5
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	78fa      	ldrb	r2, [r7, #3]
 8002fce:	0151      	lsls	r1, r2, #5
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	440a      	add	r2, r1
 8002fd4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002fd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fdc:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	799b      	ldrb	r3, [r3, #6]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d01b      	beq.n	800301e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002fe6:	78fa      	ldrb	r2, [r7, #3]
 8002fe8:	6879      	ldr	r1, [r7, #4]
 8002fea:	4613      	mov	r3, r2
 8002fec:	011b      	lsls	r3, r3, #4
 8002fee:	1a9b      	subs	r3, r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	440b      	add	r3, r1
 8002ff4:	3330      	adds	r3, #48	@ 0x30
 8002ff6:	6819      	ldr	r1, [r3, #0]
 8002ff8:	78fb      	ldrb	r3, [r7, #3]
 8002ffa:	015a      	lsls	r2, r3, #5
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	4413      	add	r3, r2
 8003000:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800300a:	78fa      	ldrb	r2, [r7, #3]
 800300c:	1ac9      	subs	r1, r1, r3
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	1a9b      	subs	r3, r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4403      	add	r3, r0
 800301a:	3338      	adds	r3, #56	@ 0x38
 800301c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800301e:	78fa      	ldrb	r2, [r7, #3]
 8003020:	6879      	ldr	r1, [r7, #4]
 8003022:	4613      	mov	r3, r2
 8003024:	011b      	lsls	r3, r3, #4
 8003026:	1a9b      	subs	r3, r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	440b      	add	r3, r1
 800302c:	334d      	adds	r3, #77	@ 0x4d
 800302e:	2201      	movs	r2, #1
 8003030:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003032:	78fa      	ldrb	r2, [r7, #3]
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	4613      	mov	r3, r2
 8003038:	011b      	lsls	r3, r3, #4
 800303a:	1a9b      	subs	r3, r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	440b      	add	r3, r1
 8003040:	3344      	adds	r3, #68	@ 0x44
 8003042:	2200      	movs	r2, #0
 8003044:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003046:	78fb      	ldrb	r3, [r7, #3]
 8003048:	015a      	lsls	r2, r3, #5
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	4413      	add	r3, r2
 800304e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003052:	461a      	mov	r2, r3
 8003054:	2301      	movs	r3, #1
 8003056:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003058:	78fa      	ldrb	r2, [r7, #3]
 800305a:	6879      	ldr	r1, [r7, #4]
 800305c:	4613      	mov	r3, r2
 800305e:	011b      	lsls	r3, r3, #4
 8003060:	1a9b      	subs	r3, r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	440b      	add	r3, r1
 8003066:	3326      	adds	r3, #38	@ 0x26
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00a      	beq.n	8003084 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800306e:	78fa      	ldrb	r2, [r7, #3]
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	4613      	mov	r3, r2
 8003074:	011b      	lsls	r3, r3, #4
 8003076:	1a9b      	subs	r3, r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	440b      	add	r3, r1
 800307c:	3326      	adds	r3, #38	@ 0x26
 800307e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003080:	2b02      	cmp	r3, #2
 8003082:	d110      	bne.n	80030a6 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	78fa      	ldrb	r2, [r7, #3]
 800308a:	4611      	mov	r1, r2
 800308c:	4618      	mov	r0, r3
 800308e:	f004 ff9c 	bl	8007fca <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003092:	78fb      	ldrb	r3, [r7, #3]
 8003094:	015a      	lsls	r2, r3, #5
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	4413      	add	r3, r2
 800309a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800309e:	461a      	mov	r2, r3
 80030a0:	2310      	movs	r3, #16
 80030a2:	6093      	str	r3, [r2, #8]
 80030a4:	e03d      	b.n	8003122 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80030a6:	78fa      	ldrb	r2, [r7, #3]
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	011b      	lsls	r3, r3, #4
 80030ae:	1a9b      	subs	r3, r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	440b      	add	r3, r1
 80030b4:	3326      	adds	r3, #38	@ 0x26
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	2b03      	cmp	r3, #3
 80030ba:	d00a      	beq.n	80030d2 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80030bc:	78fa      	ldrb	r2, [r7, #3]
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	011b      	lsls	r3, r3, #4
 80030c4:	1a9b      	subs	r3, r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	3326      	adds	r3, #38	@ 0x26
 80030cc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d127      	bne.n	8003122 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80030d2:	78fb      	ldrb	r3, [r7, #3]
 80030d4:	015a      	lsls	r2, r3, #5
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	4413      	add	r3, r2
 80030da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	78fa      	ldrb	r2, [r7, #3]
 80030e2:	0151      	lsls	r1, r2, #5
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	440a      	add	r2, r1
 80030e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80030ec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80030f0:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80030f2:	78fa      	ldrb	r2, [r7, #3]
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	4613      	mov	r3, r2
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	1a9b      	subs	r3, r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	440b      	add	r3, r1
 8003100:	334c      	adds	r3, #76	@ 0x4c
 8003102:	2201      	movs	r2, #1
 8003104:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003106:	78fa      	ldrb	r2, [r7, #3]
 8003108:	6879      	ldr	r1, [r7, #4]
 800310a:	4613      	mov	r3, r2
 800310c:	011b      	lsls	r3, r3, #4
 800310e:	1a9b      	subs	r3, r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	440b      	add	r3, r1
 8003114:	334c      	adds	r3, #76	@ 0x4c
 8003116:	781a      	ldrb	r2, [r3, #0]
 8003118:	78fb      	ldrb	r3, [r7, #3]
 800311a:	4619      	mov	r1, r3
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f007 faad 	bl	800a67c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	799b      	ldrb	r3, [r3, #6]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d13b      	bne.n	80031a2 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800312a:	78fa      	ldrb	r2, [r7, #3]
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	4613      	mov	r3, r2
 8003130:	011b      	lsls	r3, r3, #4
 8003132:	1a9b      	subs	r3, r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	440b      	add	r3, r1
 8003138:	3338      	adds	r3, #56	@ 0x38
 800313a:	6819      	ldr	r1, [r3, #0]
 800313c:	78fa      	ldrb	r2, [r7, #3]
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	4613      	mov	r3, r2
 8003142:	011b      	lsls	r3, r3, #4
 8003144:	1a9b      	subs	r3, r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4403      	add	r3, r0
 800314a:	3328      	adds	r3, #40	@ 0x28
 800314c:	881b      	ldrh	r3, [r3, #0]
 800314e:	440b      	add	r3, r1
 8003150:	1e59      	subs	r1, r3, #1
 8003152:	78fa      	ldrb	r2, [r7, #3]
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	4613      	mov	r3, r2
 8003158:	011b      	lsls	r3, r3, #4
 800315a:	1a9b      	subs	r3, r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4403      	add	r3, r0
 8003160:	3328      	adds	r3, #40	@ 0x28
 8003162:	881b      	ldrh	r3, [r3, #0]
 8003164:	fbb1 f3f3 	udiv	r3, r1, r3
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 8470 	beq.w	8003a52 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003172:	78fa      	ldrb	r2, [r7, #3]
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	4613      	mov	r3, r2
 8003178:	011b      	lsls	r3, r3, #4
 800317a:	1a9b      	subs	r3, r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	440b      	add	r3, r1
 8003180:	333c      	adds	r3, #60	@ 0x3c
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	78fa      	ldrb	r2, [r7, #3]
 8003186:	f083 0301 	eor.w	r3, r3, #1
 800318a:	b2d8      	uxtb	r0, r3
 800318c:	6879      	ldr	r1, [r7, #4]
 800318e:	4613      	mov	r3, r2
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	1a9b      	subs	r3, r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	440b      	add	r3, r1
 8003198:	333c      	adds	r3, #60	@ 0x3c
 800319a:	4602      	mov	r2, r0
 800319c:	701a      	strb	r2, [r3, #0]
 800319e:	f000 bc58 	b.w	8003a52 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80031a2:	78fa      	ldrb	r2, [r7, #3]
 80031a4:	6879      	ldr	r1, [r7, #4]
 80031a6:	4613      	mov	r3, r2
 80031a8:	011b      	lsls	r3, r3, #4
 80031aa:	1a9b      	subs	r3, r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	440b      	add	r3, r1
 80031b0:	333c      	adds	r3, #60	@ 0x3c
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	78fa      	ldrb	r2, [r7, #3]
 80031b6:	f083 0301 	eor.w	r3, r3, #1
 80031ba:	b2d8      	uxtb	r0, r3
 80031bc:	6879      	ldr	r1, [r7, #4]
 80031be:	4613      	mov	r3, r2
 80031c0:	011b      	lsls	r3, r3, #4
 80031c2:	1a9b      	subs	r3, r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	440b      	add	r3, r1
 80031c8:	333c      	adds	r3, #60	@ 0x3c
 80031ca:	4602      	mov	r2, r0
 80031cc:	701a      	strb	r2, [r3, #0]
 80031ce:	f000 bc40 	b.w	8003a52 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	78fa      	ldrb	r2, [r7, #3]
 80031d8:	4611      	mov	r1, r2
 80031da:	4618      	mov	r0, r3
 80031dc:	f004 f951 	bl	8007482 <USB_ReadChInterrupts>
 80031e0:	4603      	mov	r3, r0
 80031e2:	f003 0320 	and.w	r3, r3, #32
 80031e6:	2b20      	cmp	r3, #32
 80031e8:	d131      	bne.n	800324e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80031ea:	78fb      	ldrb	r3, [r7, #3]
 80031ec:	015a      	lsls	r2, r3, #5
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	4413      	add	r3, r2
 80031f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031f6:	461a      	mov	r2, r3
 80031f8:	2320      	movs	r3, #32
 80031fa:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80031fc:	78fa      	ldrb	r2, [r7, #3]
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	4613      	mov	r3, r2
 8003202:	011b      	lsls	r3, r3, #4
 8003204:	1a9b      	subs	r3, r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	331a      	adds	r3, #26
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	2b01      	cmp	r3, #1
 8003210:	f040 841f 	bne.w	8003a52 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003214:	78fa      	ldrb	r2, [r7, #3]
 8003216:	6879      	ldr	r1, [r7, #4]
 8003218:	4613      	mov	r3, r2
 800321a:	011b      	lsls	r3, r3, #4
 800321c:	1a9b      	subs	r3, r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	440b      	add	r3, r1
 8003222:	331b      	adds	r3, #27
 8003224:	2201      	movs	r2, #1
 8003226:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003228:	78fa      	ldrb	r2, [r7, #3]
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	4613      	mov	r3, r2
 800322e:	011b      	lsls	r3, r3, #4
 8003230:	1a9b      	subs	r3, r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	440b      	add	r3, r1
 8003236:	334d      	adds	r3, #77	@ 0x4d
 8003238:	2203      	movs	r2, #3
 800323a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	78fa      	ldrb	r2, [r7, #3]
 8003242:	4611      	mov	r1, r2
 8003244:	4618      	mov	r0, r3
 8003246:	f004 fec0 	bl	8007fca <USB_HC_Halt>
 800324a:	f000 bc02 	b.w	8003a52 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	78fa      	ldrb	r2, [r7, #3]
 8003254:	4611      	mov	r1, r2
 8003256:	4618      	mov	r0, r3
 8003258:	f004 f913 	bl	8007482 <USB_ReadChInterrupts>
 800325c:	4603      	mov	r3, r0
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b02      	cmp	r3, #2
 8003264:	f040 8305 	bne.w	8003872 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003268:	78fb      	ldrb	r3, [r7, #3]
 800326a:	015a      	lsls	r2, r3, #5
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	4413      	add	r3, r2
 8003270:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003274:	461a      	mov	r2, r3
 8003276:	2302      	movs	r3, #2
 8003278:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800327a:	78fa      	ldrb	r2, [r7, #3]
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	4613      	mov	r3, r2
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	1a9b      	subs	r3, r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	440b      	add	r3, r1
 8003288:	334d      	adds	r3, #77	@ 0x4d
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d114      	bne.n	80032ba <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003290:	78fa      	ldrb	r2, [r7, #3]
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	4613      	mov	r3, r2
 8003296:	011b      	lsls	r3, r3, #4
 8003298:	1a9b      	subs	r3, r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	334d      	adds	r3, #77	@ 0x4d
 80032a0:	2202      	movs	r2, #2
 80032a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80032a4:	78fa      	ldrb	r2, [r7, #3]
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	4613      	mov	r3, r2
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	1a9b      	subs	r3, r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	440b      	add	r3, r1
 80032b2:	334c      	adds	r3, #76	@ 0x4c
 80032b4:	2201      	movs	r2, #1
 80032b6:	701a      	strb	r2, [r3, #0]
 80032b8:	e2cc      	b.n	8003854 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80032ba:	78fa      	ldrb	r2, [r7, #3]
 80032bc:	6879      	ldr	r1, [r7, #4]
 80032be:	4613      	mov	r3, r2
 80032c0:	011b      	lsls	r3, r3, #4
 80032c2:	1a9b      	subs	r3, r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	440b      	add	r3, r1
 80032c8:	334d      	adds	r3, #77	@ 0x4d
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b06      	cmp	r3, #6
 80032ce:	d114      	bne.n	80032fa <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032d0:	78fa      	ldrb	r2, [r7, #3]
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	4613      	mov	r3, r2
 80032d6:	011b      	lsls	r3, r3, #4
 80032d8:	1a9b      	subs	r3, r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	440b      	add	r3, r1
 80032de:	334d      	adds	r3, #77	@ 0x4d
 80032e0:	2202      	movs	r2, #2
 80032e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80032e4:	78fa      	ldrb	r2, [r7, #3]
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	4613      	mov	r3, r2
 80032ea:	011b      	lsls	r3, r3, #4
 80032ec:	1a9b      	subs	r3, r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	440b      	add	r3, r1
 80032f2:	334c      	adds	r3, #76	@ 0x4c
 80032f4:	2205      	movs	r2, #5
 80032f6:	701a      	strb	r2, [r3, #0]
 80032f8:	e2ac      	b.n	8003854 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80032fa:	78fa      	ldrb	r2, [r7, #3]
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	4613      	mov	r3, r2
 8003300:	011b      	lsls	r3, r3, #4
 8003302:	1a9b      	subs	r3, r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	440b      	add	r3, r1
 8003308:	334d      	adds	r3, #77	@ 0x4d
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	2b07      	cmp	r3, #7
 800330e:	d00b      	beq.n	8003328 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003310:	78fa      	ldrb	r2, [r7, #3]
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	4613      	mov	r3, r2
 8003316:	011b      	lsls	r3, r3, #4
 8003318:	1a9b      	subs	r3, r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	334d      	adds	r3, #77	@ 0x4d
 8003320:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003322:	2b09      	cmp	r3, #9
 8003324:	f040 80a6 	bne.w	8003474 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003328:	78fa      	ldrb	r2, [r7, #3]
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	4613      	mov	r3, r2
 800332e:	011b      	lsls	r3, r3, #4
 8003330:	1a9b      	subs	r3, r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	440b      	add	r3, r1
 8003336:	334d      	adds	r3, #77	@ 0x4d
 8003338:	2202      	movs	r2, #2
 800333a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800333c:	78fa      	ldrb	r2, [r7, #3]
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	4613      	mov	r3, r2
 8003342:	011b      	lsls	r3, r3, #4
 8003344:	1a9b      	subs	r3, r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	440b      	add	r3, r1
 800334a:	3344      	adds	r3, #68	@ 0x44
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	1c59      	adds	r1, r3, #1
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	1a9b      	subs	r3, r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4403      	add	r3, r0
 800335c:	3344      	adds	r3, #68	@ 0x44
 800335e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003360:	78fa      	ldrb	r2, [r7, #3]
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	4613      	mov	r3, r2
 8003366:	011b      	lsls	r3, r3, #4
 8003368:	1a9b      	subs	r3, r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	440b      	add	r3, r1
 800336e:	3344      	adds	r3, #68	@ 0x44
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2b02      	cmp	r3, #2
 8003374:	d943      	bls.n	80033fe <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003376:	78fa      	ldrb	r2, [r7, #3]
 8003378:	6879      	ldr	r1, [r7, #4]
 800337a:	4613      	mov	r3, r2
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	1a9b      	subs	r3, r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	440b      	add	r3, r1
 8003384:	3344      	adds	r3, #68	@ 0x44
 8003386:	2200      	movs	r2, #0
 8003388:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800338a:	78fa      	ldrb	r2, [r7, #3]
 800338c:	6879      	ldr	r1, [r7, #4]
 800338e:	4613      	mov	r3, r2
 8003390:	011b      	lsls	r3, r3, #4
 8003392:	1a9b      	subs	r3, r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	440b      	add	r3, r1
 8003398:	331a      	adds	r3, #26
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d123      	bne.n	80033e8 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80033a0:	78fa      	ldrb	r2, [r7, #3]
 80033a2:	6879      	ldr	r1, [r7, #4]
 80033a4:	4613      	mov	r3, r2
 80033a6:	011b      	lsls	r3, r3, #4
 80033a8:	1a9b      	subs	r3, r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	440b      	add	r3, r1
 80033ae:	331b      	adds	r3, #27
 80033b0:	2200      	movs	r2, #0
 80033b2:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80033b4:	78fa      	ldrb	r2, [r7, #3]
 80033b6:	6879      	ldr	r1, [r7, #4]
 80033b8:	4613      	mov	r3, r2
 80033ba:	011b      	lsls	r3, r3, #4
 80033bc:	1a9b      	subs	r3, r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	440b      	add	r3, r1
 80033c2:	331c      	adds	r3, #28
 80033c4:	2200      	movs	r2, #0
 80033c6:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80033c8:	78fb      	ldrb	r3, [r7, #3]
 80033ca:	015a      	lsls	r2, r3, #5
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	4413      	add	r3, r2
 80033d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	78fa      	ldrb	r2, [r7, #3]
 80033d8:	0151      	lsls	r1, r2, #5
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	440a      	add	r2, r1
 80033de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80033e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033e6:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80033e8:	78fa      	ldrb	r2, [r7, #3]
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	1a9b      	subs	r3, r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	334c      	adds	r3, #76	@ 0x4c
 80033f8:	2204      	movs	r2, #4
 80033fa:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033fc:	e229      	b.n	8003852 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80033fe:	78fa      	ldrb	r2, [r7, #3]
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	4613      	mov	r3, r2
 8003404:	011b      	lsls	r3, r3, #4
 8003406:	1a9b      	subs	r3, r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	440b      	add	r3, r1
 800340c:	334c      	adds	r3, #76	@ 0x4c
 800340e:	2202      	movs	r2, #2
 8003410:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003412:	78fa      	ldrb	r2, [r7, #3]
 8003414:	6879      	ldr	r1, [r7, #4]
 8003416:	4613      	mov	r3, r2
 8003418:	011b      	lsls	r3, r3, #4
 800341a:	1a9b      	subs	r3, r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	440b      	add	r3, r1
 8003420:	3326      	adds	r3, #38	@ 0x26
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00b      	beq.n	8003440 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003428:	78fa      	ldrb	r2, [r7, #3]
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	4613      	mov	r3, r2
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	1a9b      	subs	r3, r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	3326      	adds	r3, #38	@ 0x26
 8003438:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800343a:	2b02      	cmp	r3, #2
 800343c:	f040 8209 	bne.w	8003852 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003440:	78fb      	ldrb	r3, [r7, #3]
 8003442:	015a      	lsls	r2, r3, #5
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	4413      	add	r3, r2
 8003448:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003456:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800345e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003460:	78fb      	ldrb	r3, [r7, #3]
 8003462:	015a      	lsls	r2, r3, #5
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	4413      	add	r3, r2
 8003468:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800346c:	461a      	mov	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003472:	e1ee      	b.n	8003852 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003474:	78fa      	ldrb	r2, [r7, #3]
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	4613      	mov	r3, r2
 800347a:	011b      	lsls	r3, r3, #4
 800347c:	1a9b      	subs	r3, r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	334d      	adds	r3, #77	@ 0x4d
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	2b05      	cmp	r3, #5
 8003488:	f040 80c8 	bne.w	800361c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800348c:	78fa      	ldrb	r2, [r7, #3]
 800348e:	6879      	ldr	r1, [r7, #4]
 8003490:	4613      	mov	r3, r2
 8003492:	011b      	lsls	r3, r3, #4
 8003494:	1a9b      	subs	r3, r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	440b      	add	r3, r1
 800349a:	334d      	adds	r3, #77	@ 0x4d
 800349c:	2202      	movs	r2, #2
 800349e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80034a0:	78fa      	ldrb	r2, [r7, #3]
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	4613      	mov	r3, r2
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	1a9b      	subs	r3, r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	331b      	adds	r3, #27
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	f040 81ce 	bne.w	8003854 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80034b8:	78fa      	ldrb	r2, [r7, #3]
 80034ba:	6879      	ldr	r1, [r7, #4]
 80034bc:	4613      	mov	r3, r2
 80034be:	011b      	lsls	r3, r3, #4
 80034c0:	1a9b      	subs	r3, r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	3326      	adds	r3, #38	@ 0x26
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	2b03      	cmp	r3, #3
 80034cc:	d16b      	bne.n	80035a6 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80034ce:	78fa      	ldrb	r2, [r7, #3]
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	4613      	mov	r3, r2
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	1a9b      	subs	r3, r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	440b      	add	r3, r1
 80034dc:	3348      	adds	r3, #72	@ 0x48
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	1c59      	adds	r1, r3, #1
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	4613      	mov	r3, r2
 80034e6:	011b      	lsls	r3, r3, #4
 80034e8:	1a9b      	subs	r3, r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4403      	add	r3, r0
 80034ee:	3348      	adds	r3, #72	@ 0x48
 80034f0:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80034f2:	78fa      	ldrb	r2, [r7, #3]
 80034f4:	6879      	ldr	r1, [r7, #4]
 80034f6:	4613      	mov	r3, r2
 80034f8:	011b      	lsls	r3, r3, #4
 80034fa:	1a9b      	subs	r3, r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	440b      	add	r3, r1
 8003500:	3348      	adds	r3, #72	@ 0x48
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2b02      	cmp	r3, #2
 8003506:	d943      	bls.n	8003590 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003508:	78fa      	ldrb	r2, [r7, #3]
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	4613      	mov	r3, r2
 800350e:	011b      	lsls	r3, r3, #4
 8003510:	1a9b      	subs	r3, r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	3348      	adds	r3, #72	@ 0x48
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800351c:	78fa      	ldrb	r2, [r7, #3]
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	4613      	mov	r3, r2
 8003522:	011b      	lsls	r3, r3, #4
 8003524:	1a9b      	subs	r3, r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	440b      	add	r3, r1
 800352a:	331b      	adds	r3, #27
 800352c:	2200      	movs	r2, #0
 800352e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003530:	78fa      	ldrb	r2, [r7, #3]
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	4613      	mov	r3, r2
 8003536:	011b      	lsls	r3, r3, #4
 8003538:	1a9b      	subs	r3, r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	440b      	add	r3, r1
 800353e:	3344      	adds	r3, #68	@ 0x44
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2b02      	cmp	r3, #2
 8003544:	d809      	bhi.n	800355a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003546:	78fa      	ldrb	r2, [r7, #3]
 8003548:	6879      	ldr	r1, [r7, #4]
 800354a:	4613      	mov	r3, r2
 800354c:	011b      	lsls	r3, r3, #4
 800354e:	1a9b      	subs	r3, r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	440b      	add	r3, r1
 8003554:	331c      	adds	r3, #28
 8003556:	2201      	movs	r2, #1
 8003558:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800355a:	78fb      	ldrb	r3, [r7, #3]
 800355c:	015a      	lsls	r2, r3, #5
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	4413      	add	r3, r2
 8003562:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	78fa      	ldrb	r2, [r7, #3]
 800356a:	0151      	lsls	r1, r2, #5
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	440a      	add	r2, r1
 8003570:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003574:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003578:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800357a:	78fa      	ldrb	r2, [r7, #3]
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	4613      	mov	r3, r2
 8003580:	011b      	lsls	r3, r3, #4
 8003582:	1a9b      	subs	r3, r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	440b      	add	r3, r1
 8003588:	334c      	adds	r3, #76	@ 0x4c
 800358a:	2204      	movs	r2, #4
 800358c:	701a      	strb	r2, [r3, #0]
 800358e:	e014      	b.n	80035ba <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003590:	78fa      	ldrb	r2, [r7, #3]
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	4613      	mov	r3, r2
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	1a9b      	subs	r3, r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	334c      	adds	r3, #76	@ 0x4c
 80035a0:	2202      	movs	r2, #2
 80035a2:	701a      	strb	r2, [r3, #0]
 80035a4:	e009      	b.n	80035ba <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035a6:	78fa      	ldrb	r2, [r7, #3]
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	4613      	mov	r3, r2
 80035ac:	011b      	lsls	r3, r3, #4
 80035ae:	1a9b      	subs	r3, r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	334c      	adds	r3, #76	@ 0x4c
 80035b6:	2202      	movs	r2, #2
 80035b8:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80035ba:	78fa      	ldrb	r2, [r7, #3]
 80035bc:	6879      	ldr	r1, [r7, #4]
 80035be:	4613      	mov	r3, r2
 80035c0:	011b      	lsls	r3, r3, #4
 80035c2:	1a9b      	subs	r3, r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	440b      	add	r3, r1
 80035c8:	3326      	adds	r3, #38	@ 0x26
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00b      	beq.n	80035e8 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80035d0:	78fa      	ldrb	r2, [r7, #3]
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	4613      	mov	r3, r2
 80035d6:	011b      	lsls	r3, r3, #4
 80035d8:	1a9b      	subs	r3, r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	3326      	adds	r3, #38	@ 0x26
 80035e0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	f040 8136 	bne.w	8003854 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80035e8:	78fb      	ldrb	r3, [r7, #3]
 80035ea:	015a      	lsls	r2, r3, #5
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	4413      	add	r3, r2
 80035f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80035fe:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003606:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003608:	78fb      	ldrb	r3, [r7, #3]
 800360a:	015a      	lsls	r2, r3, #5
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	4413      	add	r3, r2
 8003610:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003614:	461a      	mov	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	e11b      	b.n	8003854 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800361c:	78fa      	ldrb	r2, [r7, #3]
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	4613      	mov	r3, r2
 8003622:	011b      	lsls	r3, r3, #4
 8003624:	1a9b      	subs	r3, r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	440b      	add	r3, r1
 800362a:	334d      	adds	r3, #77	@ 0x4d
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2b03      	cmp	r3, #3
 8003630:	f040 8081 	bne.w	8003736 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003634:	78fa      	ldrb	r2, [r7, #3]
 8003636:	6879      	ldr	r1, [r7, #4]
 8003638:	4613      	mov	r3, r2
 800363a:	011b      	lsls	r3, r3, #4
 800363c:	1a9b      	subs	r3, r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	334d      	adds	r3, #77	@ 0x4d
 8003644:	2202      	movs	r2, #2
 8003646:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003648:	78fa      	ldrb	r2, [r7, #3]
 800364a:	6879      	ldr	r1, [r7, #4]
 800364c:	4613      	mov	r3, r2
 800364e:	011b      	lsls	r3, r3, #4
 8003650:	1a9b      	subs	r3, r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	440b      	add	r3, r1
 8003656:	331b      	adds	r3, #27
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	2b01      	cmp	r3, #1
 800365c:	f040 80fa 	bne.w	8003854 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003660:	78fa      	ldrb	r2, [r7, #3]
 8003662:	6879      	ldr	r1, [r7, #4]
 8003664:	4613      	mov	r3, r2
 8003666:	011b      	lsls	r3, r3, #4
 8003668:	1a9b      	subs	r3, r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	440b      	add	r3, r1
 800366e:	334c      	adds	r3, #76	@ 0x4c
 8003670:	2202      	movs	r2, #2
 8003672:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003674:	78fb      	ldrb	r3, [r7, #3]
 8003676:	015a      	lsls	r2, r3, #5
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	4413      	add	r3, r2
 800367c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	78fa      	ldrb	r2, [r7, #3]
 8003684:	0151      	lsls	r1, r2, #5
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	440a      	add	r2, r1
 800368a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800368e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003692:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003694:	78fb      	ldrb	r3, [r7, #3]
 8003696:	015a      	lsls	r2, r3, #5
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	4413      	add	r3, r2
 800369c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	78fa      	ldrb	r2, [r7, #3]
 80036a4:	0151      	lsls	r1, r2, #5
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	440a      	add	r2, r1
 80036aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80036ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036b2:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80036b4:	78fb      	ldrb	r3, [r7, #3]
 80036b6:	015a      	lsls	r2, r3, #5
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	4413      	add	r3, r2
 80036bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	78fa      	ldrb	r2, [r7, #3]
 80036c4:	0151      	lsls	r1, r2, #5
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	440a      	add	r2, r1
 80036ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80036ce:	f023 0320 	bic.w	r3, r3, #32
 80036d2:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80036d4:	78fa      	ldrb	r2, [r7, #3]
 80036d6:	6879      	ldr	r1, [r7, #4]
 80036d8:	4613      	mov	r3, r2
 80036da:	011b      	lsls	r3, r3, #4
 80036dc:	1a9b      	subs	r3, r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	3326      	adds	r3, #38	@ 0x26
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00b      	beq.n	8003702 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80036ea:	78fa      	ldrb	r2, [r7, #3]
 80036ec:	6879      	ldr	r1, [r7, #4]
 80036ee:	4613      	mov	r3, r2
 80036f0:	011b      	lsls	r3, r3, #4
 80036f2:	1a9b      	subs	r3, r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	440b      	add	r3, r1
 80036f8:	3326      	adds	r3, #38	@ 0x26
 80036fa:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	f040 80a9 	bne.w	8003854 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003702:	78fb      	ldrb	r3, [r7, #3]
 8003704:	015a      	lsls	r2, r3, #5
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	4413      	add	r3, r2
 800370a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003718:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003720:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003722:	78fb      	ldrb	r3, [r7, #3]
 8003724:	015a      	lsls	r2, r3, #5
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	4413      	add	r3, r2
 800372a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800372e:	461a      	mov	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6013      	str	r3, [r2, #0]
 8003734:	e08e      	b.n	8003854 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003736:	78fa      	ldrb	r2, [r7, #3]
 8003738:	6879      	ldr	r1, [r7, #4]
 800373a:	4613      	mov	r3, r2
 800373c:	011b      	lsls	r3, r3, #4
 800373e:	1a9b      	subs	r3, r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	440b      	add	r3, r1
 8003744:	334d      	adds	r3, #77	@ 0x4d
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	2b04      	cmp	r3, #4
 800374a:	d143      	bne.n	80037d4 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800374c:	78fa      	ldrb	r2, [r7, #3]
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	4613      	mov	r3, r2
 8003752:	011b      	lsls	r3, r3, #4
 8003754:	1a9b      	subs	r3, r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	440b      	add	r3, r1
 800375a:	334d      	adds	r3, #77	@ 0x4d
 800375c:	2202      	movs	r2, #2
 800375e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003760:	78fa      	ldrb	r2, [r7, #3]
 8003762:	6879      	ldr	r1, [r7, #4]
 8003764:	4613      	mov	r3, r2
 8003766:	011b      	lsls	r3, r3, #4
 8003768:	1a9b      	subs	r3, r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	440b      	add	r3, r1
 800376e:	334c      	adds	r3, #76	@ 0x4c
 8003770:	2202      	movs	r2, #2
 8003772:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003774:	78fa      	ldrb	r2, [r7, #3]
 8003776:	6879      	ldr	r1, [r7, #4]
 8003778:	4613      	mov	r3, r2
 800377a:	011b      	lsls	r3, r3, #4
 800377c:	1a9b      	subs	r3, r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	440b      	add	r3, r1
 8003782:	3326      	adds	r3, #38	@ 0x26
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00a      	beq.n	80037a0 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800378a:	78fa      	ldrb	r2, [r7, #3]
 800378c:	6879      	ldr	r1, [r7, #4]
 800378e:	4613      	mov	r3, r2
 8003790:	011b      	lsls	r3, r3, #4
 8003792:	1a9b      	subs	r3, r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	440b      	add	r3, r1
 8003798:	3326      	adds	r3, #38	@ 0x26
 800379a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800379c:	2b02      	cmp	r3, #2
 800379e:	d159      	bne.n	8003854 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80037a0:	78fb      	ldrb	r3, [r7, #3]
 80037a2:	015a      	lsls	r2, r3, #5
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	4413      	add	r3, r2
 80037a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80037b6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80037be:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80037c0:	78fb      	ldrb	r3, [r7, #3]
 80037c2:	015a      	lsls	r2, r3, #5
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	4413      	add	r3, r2
 80037c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037cc:	461a      	mov	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6013      	str	r3, [r2, #0]
 80037d2:	e03f      	b.n	8003854 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80037d4:	78fa      	ldrb	r2, [r7, #3]
 80037d6:	6879      	ldr	r1, [r7, #4]
 80037d8:	4613      	mov	r3, r2
 80037da:	011b      	lsls	r3, r3, #4
 80037dc:	1a9b      	subs	r3, r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	440b      	add	r3, r1
 80037e2:	334d      	adds	r3, #77	@ 0x4d
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	2b08      	cmp	r3, #8
 80037e8:	d126      	bne.n	8003838 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80037ea:	78fa      	ldrb	r2, [r7, #3]
 80037ec:	6879      	ldr	r1, [r7, #4]
 80037ee:	4613      	mov	r3, r2
 80037f0:	011b      	lsls	r3, r3, #4
 80037f2:	1a9b      	subs	r3, r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	440b      	add	r3, r1
 80037f8:	334d      	adds	r3, #77	@ 0x4d
 80037fa:	2202      	movs	r2, #2
 80037fc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80037fe:	78fa      	ldrb	r2, [r7, #3]
 8003800:	6879      	ldr	r1, [r7, #4]
 8003802:	4613      	mov	r3, r2
 8003804:	011b      	lsls	r3, r3, #4
 8003806:	1a9b      	subs	r3, r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	440b      	add	r3, r1
 800380c:	3344      	adds	r3, #68	@ 0x44
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	1c59      	adds	r1, r3, #1
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	4613      	mov	r3, r2
 8003816:	011b      	lsls	r3, r3, #4
 8003818:	1a9b      	subs	r3, r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4403      	add	r3, r0
 800381e:	3344      	adds	r3, #68	@ 0x44
 8003820:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003822:	78fa      	ldrb	r2, [r7, #3]
 8003824:	6879      	ldr	r1, [r7, #4]
 8003826:	4613      	mov	r3, r2
 8003828:	011b      	lsls	r3, r3, #4
 800382a:	1a9b      	subs	r3, r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	440b      	add	r3, r1
 8003830:	334c      	adds	r3, #76	@ 0x4c
 8003832:	2204      	movs	r2, #4
 8003834:	701a      	strb	r2, [r3, #0]
 8003836:	e00d      	b.n	8003854 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003838:	78fa      	ldrb	r2, [r7, #3]
 800383a:	6879      	ldr	r1, [r7, #4]
 800383c:	4613      	mov	r3, r2
 800383e:	011b      	lsls	r3, r3, #4
 8003840:	1a9b      	subs	r3, r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	440b      	add	r3, r1
 8003846:	334d      	adds	r3, #77	@ 0x4d
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	2b02      	cmp	r3, #2
 800384c:	f000 8100 	beq.w	8003a50 <HCD_HC_IN_IRQHandler+0xcca>
 8003850:	e000      	b.n	8003854 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003852:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003854:	78fa      	ldrb	r2, [r7, #3]
 8003856:	6879      	ldr	r1, [r7, #4]
 8003858:	4613      	mov	r3, r2
 800385a:	011b      	lsls	r3, r3, #4
 800385c:	1a9b      	subs	r3, r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	440b      	add	r3, r1
 8003862:	334c      	adds	r3, #76	@ 0x4c
 8003864:	781a      	ldrb	r2, [r3, #0]
 8003866:	78fb      	ldrb	r3, [r7, #3]
 8003868:	4619      	mov	r1, r3
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f006 ff06 	bl	800a67c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003870:	e0ef      	b.n	8003a52 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	78fa      	ldrb	r2, [r7, #3]
 8003878:	4611      	mov	r1, r2
 800387a:	4618      	mov	r0, r3
 800387c:	f003 fe01 	bl	8007482 <USB_ReadChInterrupts>
 8003880:	4603      	mov	r3, r0
 8003882:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003886:	2b40      	cmp	r3, #64	@ 0x40
 8003888:	d12f      	bne.n	80038ea <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800388a:	78fb      	ldrb	r3, [r7, #3]
 800388c:	015a      	lsls	r2, r3, #5
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	4413      	add	r3, r2
 8003892:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003896:	461a      	mov	r2, r3
 8003898:	2340      	movs	r3, #64	@ 0x40
 800389a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800389c:	78fa      	ldrb	r2, [r7, #3]
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	4613      	mov	r3, r2
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	1a9b      	subs	r3, r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	334d      	adds	r3, #77	@ 0x4d
 80038ac:	2205      	movs	r2, #5
 80038ae:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80038b0:	78fa      	ldrb	r2, [r7, #3]
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	4613      	mov	r3, r2
 80038b6:	011b      	lsls	r3, r3, #4
 80038b8:	1a9b      	subs	r3, r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	331a      	adds	r3, #26
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d109      	bne.n	80038da <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80038c6:	78fa      	ldrb	r2, [r7, #3]
 80038c8:	6879      	ldr	r1, [r7, #4]
 80038ca:	4613      	mov	r3, r2
 80038cc:	011b      	lsls	r3, r3, #4
 80038ce:	1a9b      	subs	r3, r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	440b      	add	r3, r1
 80038d4:	3344      	adds	r3, #68	@ 0x44
 80038d6:	2200      	movs	r2, #0
 80038d8:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	78fa      	ldrb	r2, [r7, #3]
 80038e0:	4611      	mov	r1, r2
 80038e2:	4618      	mov	r0, r3
 80038e4:	f004 fb71 	bl	8007fca <USB_HC_Halt>
 80038e8:	e0b3      	b.n	8003a52 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	78fa      	ldrb	r2, [r7, #3]
 80038f0:	4611      	mov	r1, r2
 80038f2:	4618      	mov	r0, r3
 80038f4:	f003 fdc5 	bl	8007482 <USB_ReadChInterrupts>
 80038f8:	4603      	mov	r3, r0
 80038fa:	f003 0310 	and.w	r3, r3, #16
 80038fe:	2b10      	cmp	r3, #16
 8003900:	f040 80a7 	bne.w	8003a52 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003904:	78fa      	ldrb	r2, [r7, #3]
 8003906:	6879      	ldr	r1, [r7, #4]
 8003908:	4613      	mov	r3, r2
 800390a:	011b      	lsls	r3, r3, #4
 800390c:	1a9b      	subs	r3, r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	440b      	add	r3, r1
 8003912:	3326      	adds	r3, #38	@ 0x26
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	2b03      	cmp	r3, #3
 8003918:	d11b      	bne.n	8003952 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800391a:	78fa      	ldrb	r2, [r7, #3]
 800391c:	6879      	ldr	r1, [r7, #4]
 800391e:	4613      	mov	r3, r2
 8003920:	011b      	lsls	r3, r3, #4
 8003922:	1a9b      	subs	r3, r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	440b      	add	r3, r1
 8003928:	3344      	adds	r3, #68	@ 0x44
 800392a:	2200      	movs	r2, #0
 800392c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800392e:	78fa      	ldrb	r2, [r7, #3]
 8003930:	6879      	ldr	r1, [r7, #4]
 8003932:	4613      	mov	r3, r2
 8003934:	011b      	lsls	r3, r3, #4
 8003936:	1a9b      	subs	r3, r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	440b      	add	r3, r1
 800393c:	334d      	adds	r3, #77	@ 0x4d
 800393e:	2204      	movs	r2, #4
 8003940:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	78fa      	ldrb	r2, [r7, #3]
 8003948:	4611      	mov	r1, r2
 800394a:	4618      	mov	r0, r3
 800394c:	f004 fb3d 	bl	8007fca <USB_HC_Halt>
 8003950:	e03f      	b.n	80039d2 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003952:	78fa      	ldrb	r2, [r7, #3]
 8003954:	6879      	ldr	r1, [r7, #4]
 8003956:	4613      	mov	r3, r2
 8003958:	011b      	lsls	r3, r3, #4
 800395a:	1a9b      	subs	r3, r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	440b      	add	r3, r1
 8003960:	3326      	adds	r3, #38	@ 0x26
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00a      	beq.n	800397e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003968:	78fa      	ldrb	r2, [r7, #3]
 800396a:	6879      	ldr	r1, [r7, #4]
 800396c:	4613      	mov	r3, r2
 800396e:	011b      	lsls	r3, r3, #4
 8003970:	1a9b      	subs	r3, r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	440b      	add	r3, r1
 8003976:	3326      	adds	r3, #38	@ 0x26
 8003978:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800397a:	2b02      	cmp	r3, #2
 800397c:	d129      	bne.n	80039d2 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800397e:	78fa      	ldrb	r2, [r7, #3]
 8003980:	6879      	ldr	r1, [r7, #4]
 8003982:	4613      	mov	r3, r2
 8003984:	011b      	lsls	r3, r3, #4
 8003986:	1a9b      	subs	r3, r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	440b      	add	r3, r1
 800398c:	3344      	adds	r3, #68	@ 0x44
 800398e:	2200      	movs	r2, #0
 8003990:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	799b      	ldrb	r3, [r3, #6]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00a      	beq.n	80039b0 <HCD_HC_IN_IRQHandler+0xc2a>
 800399a:	78fa      	ldrb	r2, [r7, #3]
 800399c:	6879      	ldr	r1, [r7, #4]
 800399e:	4613      	mov	r3, r2
 80039a0:	011b      	lsls	r3, r3, #4
 80039a2:	1a9b      	subs	r3, r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	440b      	add	r3, r1
 80039a8:	331b      	adds	r3, #27
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d110      	bne.n	80039d2 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80039b0:	78fa      	ldrb	r2, [r7, #3]
 80039b2:	6879      	ldr	r1, [r7, #4]
 80039b4:	4613      	mov	r3, r2
 80039b6:	011b      	lsls	r3, r3, #4
 80039b8:	1a9b      	subs	r3, r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	334d      	adds	r3, #77	@ 0x4d
 80039c0:	2204      	movs	r2, #4
 80039c2:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	78fa      	ldrb	r2, [r7, #3]
 80039ca:	4611      	mov	r1, r2
 80039cc:	4618      	mov	r0, r3
 80039ce:	f004 fafc 	bl	8007fca <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80039d2:	78fa      	ldrb	r2, [r7, #3]
 80039d4:	6879      	ldr	r1, [r7, #4]
 80039d6:	4613      	mov	r3, r2
 80039d8:	011b      	lsls	r3, r3, #4
 80039da:	1a9b      	subs	r3, r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	440b      	add	r3, r1
 80039e0:	331b      	adds	r3, #27
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d129      	bne.n	8003a3c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80039e8:	78fa      	ldrb	r2, [r7, #3]
 80039ea:	6879      	ldr	r1, [r7, #4]
 80039ec:	4613      	mov	r3, r2
 80039ee:	011b      	lsls	r3, r3, #4
 80039f0:	1a9b      	subs	r3, r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	331b      	adds	r3, #27
 80039f8:	2200      	movs	r2, #0
 80039fa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80039fc:	78fb      	ldrb	r3, [r7, #3]
 80039fe:	015a      	lsls	r2, r3, #5
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	4413      	add	r3, r2
 8003a04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	78fa      	ldrb	r2, [r7, #3]
 8003a0c:	0151      	lsls	r1, r2, #5
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	440a      	add	r2, r1
 8003a12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a1a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003a1c:	78fb      	ldrb	r3, [r7, #3]
 8003a1e:	015a      	lsls	r2, r3, #5
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	4413      	add	r3, r2
 8003a24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	78fa      	ldrb	r2, [r7, #3]
 8003a2c:	0151      	lsls	r1, r2, #5
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	440a      	add	r2, r1
 8003a32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a36:	f043 0320 	orr.w	r3, r3, #32
 8003a3a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003a3c:	78fb      	ldrb	r3, [r7, #3]
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a48:	461a      	mov	r2, r3
 8003a4a:	2310      	movs	r3, #16
 8003a4c:	6093      	str	r3, [r2, #8]
 8003a4e:	e000      	b.n	8003a52 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003a50:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003a52:	3718      	adds	r7, #24
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	460b      	mov	r3, r1
 8003a62:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	78fa      	ldrb	r2, [r7, #3]
 8003a74:	4611      	mov	r1, r2
 8003a76:	4618      	mov	r0, r3
 8003a78:	f003 fd03 	bl	8007482 <USB_ReadChInterrupts>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	f003 0304 	and.w	r3, r3, #4
 8003a82:	2b04      	cmp	r3, #4
 8003a84:	d11b      	bne.n	8003abe <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003a86:	78fb      	ldrb	r3, [r7, #3]
 8003a88:	015a      	lsls	r2, r3, #5
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a92:	461a      	mov	r2, r3
 8003a94:	2304      	movs	r3, #4
 8003a96:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003a98:	78fa      	ldrb	r2, [r7, #3]
 8003a9a:	6879      	ldr	r1, [r7, #4]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	011b      	lsls	r3, r3, #4
 8003aa0:	1a9b      	subs	r3, r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	440b      	add	r3, r1
 8003aa6:	334d      	adds	r3, #77	@ 0x4d
 8003aa8:	2207      	movs	r2, #7
 8003aaa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	78fa      	ldrb	r2, [r7, #3]
 8003ab2:	4611      	mov	r1, r2
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f004 fa88 	bl	8007fca <USB_HC_Halt>
 8003aba:	f000 bc89 	b.w	80043d0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	78fa      	ldrb	r2, [r7, #3]
 8003ac4:	4611      	mov	r1, r2
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f003 fcdb 	bl	8007482 <USB_ReadChInterrupts>
 8003acc:	4603      	mov	r3, r0
 8003ace:	f003 0320 	and.w	r3, r3, #32
 8003ad2:	2b20      	cmp	r3, #32
 8003ad4:	f040 8082 	bne.w	8003bdc <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003ad8:	78fb      	ldrb	r3, [r7, #3]
 8003ada:	015a      	lsls	r2, r3, #5
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	4413      	add	r3, r2
 8003ae0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	2320      	movs	r3, #32
 8003ae8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003aea:	78fa      	ldrb	r2, [r7, #3]
 8003aec:	6879      	ldr	r1, [r7, #4]
 8003aee:	4613      	mov	r3, r2
 8003af0:	011b      	lsls	r3, r3, #4
 8003af2:	1a9b      	subs	r3, r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	440b      	add	r3, r1
 8003af8:	3319      	adds	r3, #25
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d124      	bne.n	8003b4a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003b00:	78fa      	ldrb	r2, [r7, #3]
 8003b02:	6879      	ldr	r1, [r7, #4]
 8003b04:	4613      	mov	r3, r2
 8003b06:	011b      	lsls	r3, r3, #4
 8003b08:	1a9b      	subs	r3, r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	440b      	add	r3, r1
 8003b0e:	3319      	adds	r3, #25
 8003b10:	2200      	movs	r2, #0
 8003b12:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b14:	78fa      	ldrb	r2, [r7, #3]
 8003b16:	6879      	ldr	r1, [r7, #4]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	011b      	lsls	r3, r3, #4
 8003b1c:	1a9b      	subs	r3, r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	440b      	add	r3, r1
 8003b22:	334c      	adds	r3, #76	@ 0x4c
 8003b24:	2202      	movs	r2, #2
 8003b26:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003b28:	78fa      	ldrb	r2, [r7, #3]
 8003b2a:	6879      	ldr	r1, [r7, #4]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	011b      	lsls	r3, r3, #4
 8003b30:	1a9b      	subs	r3, r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	440b      	add	r3, r1
 8003b36:	334d      	adds	r3, #77	@ 0x4d
 8003b38:	2203      	movs	r2, #3
 8003b3a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	78fa      	ldrb	r2, [r7, #3]
 8003b42:	4611      	mov	r1, r2
 8003b44:	4618      	mov	r0, r3
 8003b46:	f004 fa40 	bl	8007fca <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003b4a:	78fa      	ldrb	r2, [r7, #3]
 8003b4c:	6879      	ldr	r1, [r7, #4]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	011b      	lsls	r3, r3, #4
 8003b52:	1a9b      	subs	r3, r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	440b      	add	r3, r1
 8003b58:	331a      	adds	r3, #26
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	f040 8437 	bne.w	80043d0 <HCD_HC_OUT_IRQHandler+0x978>
 8003b62:	78fa      	ldrb	r2, [r7, #3]
 8003b64:	6879      	ldr	r1, [r7, #4]
 8003b66:	4613      	mov	r3, r2
 8003b68:	011b      	lsls	r3, r3, #4
 8003b6a:	1a9b      	subs	r3, r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	440b      	add	r3, r1
 8003b70:	331b      	adds	r3, #27
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f040 842b 	bne.w	80043d0 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003b7a:	78fa      	ldrb	r2, [r7, #3]
 8003b7c:	6879      	ldr	r1, [r7, #4]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	011b      	lsls	r3, r3, #4
 8003b82:	1a9b      	subs	r3, r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	440b      	add	r3, r1
 8003b88:	3326      	adds	r3, #38	@ 0x26
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d009      	beq.n	8003ba4 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003b90:	78fa      	ldrb	r2, [r7, #3]
 8003b92:	6879      	ldr	r1, [r7, #4]
 8003b94:	4613      	mov	r3, r2
 8003b96:	011b      	lsls	r3, r3, #4
 8003b98:	1a9b      	subs	r3, r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	440b      	add	r3, r1
 8003b9e:	331b      	adds	r3, #27
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003ba4:	78fa      	ldrb	r2, [r7, #3]
 8003ba6:	6879      	ldr	r1, [r7, #4]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	011b      	lsls	r3, r3, #4
 8003bac:	1a9b      	subs	r3, r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	440b      	add	r3, r1
 8003bb2:	334d      	adds	r3, #77	@ 0x4d
 8003bb4:	2203      	movs	r2, #3
 8003bb6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	78fa      	ldrb	r2, [r7, #3]
 8003bbe:	4611      	mov	r1, r2
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f004 fa02 	bl	8007fca <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003bc6:	78fa      	ldrb	r2, [r7, #3]
 8003bc8:	6879      	ldr	r1, [r7, #4]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	011b      	lsls	r3, r3, #4
 8003bce:	1a9b      	subs	r3, r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	440b      	add	r3, r1
 8003bd4:	3344      	adds	r3, #68	@ 0x44
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	601a      	str	r2, [r3, #0]
 8003bda:	e3f9      	b.n	80043d0 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	78fa      	ldrb	r2, [r7, #3]
 8003be2:	4611      	mov	r1, r2
 8003be4:	4618      	mov	r0, r3
 8003be6:	f003 fc4c 	bl	8007482 <USB_ReadChInterrupts>
 8003bea:	4603      	mov	r3, r0
 8003bec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bf4:	d111      	bne.n	8003c1a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003bf6:	78fb      	ldrb	r3, [r7, #3]
 8003bf8:	015a      	lsls	r2, r3, #5
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c02:	461a      	mov	r2, r3
 8003c04:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c08:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	78fa      	ldrb	r2, [r7, #3]
 8003c10:	4611      	mov	r1, r2
 8003c12:	4618      	mov	r0, r3
 8003c14:	f004 f9d9 	bl	8007fca <USB_HC_Halt>
 8003c18:	e3da      	b.n	80043d0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	78fa      	ldrb	r2, [r7, #3]
 8003c20:	4611      	mov	r1, r2
 8003c22:	4618      	mov	r0, r3
 8003c24:	f003 fc2d 	bl	8007482 <USB_ReadChInterrupts>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d168      	bne.n	8003d04 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003c32:	78fa      	ldrb	r2, [r7, #3]
 8003c34:	6879      	ldr	r1, [r7, #4]
 8003c36:	4613      	mov	r3, r2
 8003c38:	011b      	lsls	r3, r3, #4
 8003c3a:	1a9b      	subs	r3, r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	440b      	add	r3, r1
 8003c40:	3344      	adds	r3, #68	@ 0x44
 8003c42:	2200      	movs	r2, #0
 8003c44:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	78fa      	ldrb	r2, [r7, #3]
 8003c4c:	4611      	mov	r1, r2
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f003 fc17 	bl	8007482 <USB_ReadChInterrupts>
 8003c54:	4603      	mov	r3, r0
 8003c56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c5a:	2b40      	cmp	r3, #64	@ 0x40
 8003c5c:	d112      	bne.n	8003c84 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003c5e:	78fa      	ldrb	r2, [r7, #3]
 8003c60:	6879      	ldr	r1, [r7, #4]
 8003c62:	4613      	mov	r3, r2
 8003c64:	011b      	lsls	r3, r3, #4
 8003c66:	1a9b      	subs	r3, r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	440b      	add	r3, r1
 8003c6c:	3319      	adds	r3, #25
 8003c6e:	2201      	movs	r2, #1
 8003c70:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003c72:	78fb      	ldrb	r3, [r7, #3]
 8003c74:	015a      	lsls	r2, r3, #5
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	4413      	add	r3, r2
 8003c7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c7e:	461a      	mov	r2, r3
 8003c80:	2340      	movs	r3, #64	@ 0x40
 8003c82:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003c84:	78fa      	ldrb	r2, [r7, #3]
 8003c86:	6879      	ldr	r1, [r7, #4]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	011b      	lsls	r3, r3, #4
 8003c8c:	1a9b      	subs	r3, r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	440b      	add	r3, r1
 8003c92:	331b      	adds	r3, #27
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d019      	beq.n	8003cce <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003c9a:	78fa      	ldrb	r2, [r7, #3]
 8003c9c:	6879      	ldr	r1, [r7, #4]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	011b      	lsls	r3, r3, #4
 8003ca2:	1a9b      	subs	r3, r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	440b      	add	r3, r1
 8003ca8:	331b      	adds	r3, #27
 8003caa:	2200      	movs	r2, #0
 8003cac:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003cae:	78fb      	ldrb	r3, [r7, #3]
 8003cb0:	015a      	lsls	r2, r3, #5
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	78fa      	ldrb	r2, [r7, #3]
 8003cbe:	0151      	lsls	r1, r2, #5
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	440a      	add	r2, r1
 8003cc4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003cc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ccc:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003cce:	78fb      	ldrb	r3, [r7, #3]
 8003cd0:	015a      	lsls	r2, r3, #5
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cda:	461a      	mov	r2, r3
 8003cdc:	2301      	movs	r3, #1
 8003cde:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003ce0:	78fa      	ldrb	r2, [r7, #3]
 8003ce2:	6879      	ldr	r1, [r7, #4]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	011b      	lsls	r3, r3, #4
 8003ce8:	1a9b      	subs	r3, r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	440b      	add	r3, r1
 8003cee:	334d      	adds	r3, #77	@ 0x4d
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	78fa      	ldrb	r2, [r7, #3]
 8003cfa:	4611      	mov	r1, r2
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f004 f964 	bl	8007fca <USB_HC_Halt>
 8003d02:	e365      	b.n	80043d0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	78fa      	ldrb	r2, [r7, #3]
 8003d0a:	4611      	mov	r1, r2
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f003 fbb8 	bl	8007482 <USB_ReadChInterrupts>
 8003d12:	4603      	mov	r3, r0
 8003d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d18:	2b40      	cmp	r3, #64	@ 0x40
 8003d1a:	d139      	bne.n	8003d90 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003d1c:	78fa      	ldrb	r2, [r7, #3]
 8003d1e:	6879      	ldr	r1, [r7, #4]
 8003d20:	4613      	mov	r3, r2
 8003d22:	011b      	lsls	r3, r3, #4
 8003d24:	1a9b      	subs	r3, r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	440b      	add	r3, r1
 8003d2a:	334d      	adds	r3, #77	@ 0x4d
 8003d2c:	2205      	movs	r2, #5
 8003d2e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003d30:	78fa      	ldrb	r2, [r7, #3]
 8003d32:	6879      	ldr	r1, [r7, #4]
 8003d34:	4613      	mov	r3, r2
 8003d36:	011b      	lsls	r3, r3, #4
 8003d38:	1a9b      	subs	r3, r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	440b      	add	r3, r1
 8003d3e:	331a      	adds	r3, #26
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d109      	bne.n	8003d5a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003d46:	78fa      	ldrb	r2, [r7, #3]
 8003d48:	6879      	ldr	r1, [r7, #4]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	011b      	lsls	r3, r3, #4
 8003d4e:	1a9b      	subs	r3, r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	440b      	add	r3, r1
 8003d54:	3319      	adds	r3, #25
 8003d56:	2201      	movs	r2, #1
 8003d58:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003d5a:	78fa      	ldrb	r2, [r7, #3]
 8003d5c:	6879      	ldr	r1, [r7, #4]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	011b      	lsls	r3, r3, #4
 8003d62:	1a9b      	subs	r3, r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	440b      	add	r3, r1
 8003d68:	3344      	adds	r3, #68	@ 0x44
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	78fa      	ldrb	r2, [r7, #3]
 8003d74:	4611      	mov	r1, r2
 8003d76:	4618      	mov	r0, r3
 8003d78:	f004 f927 	bl	8007fca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003d7c:	78fb      	ldrb	r3, [r7, #3]
 8003d7e:	015a      	lsls	r2, r3, #5
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	4413      	add	r3, r2
 8003d84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d88:	461a      	mov	r2, r3
 8003d8a:	2340      	movs	r3, #64	@ 0x40
 8003d8c:	6093      	str	r3, [r2, #8]
 8003d8e:	e31f      	b.n	80043d0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	78fa      	ldrb	r2, [r7, #3]
 8003d96:	4611      	mov	r1, r2
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f003 fb72 	bl	8007482 <USB_ReadChInterrupts>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	f003 0308 	and.w	r3, r3, #8
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	d11a      	bne.n	8003dde <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003da8:	78fb      	ldrb	r3, [r7, #3]
 8003daa:	015a      	lsls	r2, r3, #5
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	4413      	add	r3, r2
 8003db0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003db4:	461a      	mov	r2, r3
 8003db6:	2308      	movs	r3, #8
 8003db8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003dba:	78fa      	ldrb	r2, [r7, #3]
 8003dbc:	6879      	ldr	r1, [r7, #4]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	011b      	lsls	r3, r3, #4
 8003dc2:	1a9b      	subs	r3, r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	440b      	add	r3, r1
 8003dc8:	334d      	adds	r3, #77	@ 0x4d
 8003dca:	2206      	movs	r2, #6
 8003dcc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	78fa      	ldrb	r2, [r7, #3]
 8003dd4:	4611      	mov	r1, r2
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f004 f8f7 	bl	8007fca <USB_HC_Halt>
 8003ddc:	e2f8      	b.n	80043d0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	78fa      	ldrb	r2, [r7, #3]
 8003de4:	4611      	mov	r1, r2
 8003de6:	4618      	mov	r0, r3
 8003de8:	f003 fb4b 	bl	8007482 <USB_ReadChInterrupts>
 8003dec:	4603      	mov	r3, r0
 8003dee:	f003 0310 	and.w	r3, r3, #16
 8003df2:	2b10      	cmp	r3, #16
 8003df4:	d144      	bne.n	8003e80 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003df6:	78fa      	ldrb	r2, [r7, #3]
 8003df8:	6879      	ldr	r1, [r7, #4]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	011b      	lsls	r3, r3, #4
 8003dfe:	1a9b      	subs	r3, r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	440b      	add	r3, r1
 8003e04:	3344      	adds	r3, #68	@ 0x44
 8003e06:	2200      	movs	r2, #0
 8003e08:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003e0a:	78fa      	ldrb	r2, [r7, #3]
 8003e0c:	6879      	ldr	r1, [r7, #4]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	011b      	lsls	r3, r3, #4
 8003e12:	1a9b      	subs	r3, r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	440b      	add	r3, r1
 8003e18:	334d      	adds	r3, #77	@ 0x4d
 8003e1a:	2204      	movs	r2, #4
 8003e1c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003e1e:	78fa      	ldrb	r2, [r7, #3]
 8003e20:	6879      	ldr	r1, [r7, #4]
 8003e22:	4613      	mov	r3, r2
 8003e24:	011b      	lsls	r3, r3, #4
 8003e26:	1a9b      	subs	r3, r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	440b      	add	r3, r1
 8003e2c:	3319      	adds	r3, #25
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d114      	bne.n	8003e5e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003e34:	78fa      	ldrb	r2, [r7, #3]
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	011b      	lsls	r3, r3, #4
 8003e3c:	1a9b      	subs	r3, r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	440b      	add	r3, r1
 8003e42:	3318      	adds	r3, #24
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d109      	bne.n	8003e5e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003e4a:	78fa      	ldrb	r2, [r7, #3]
 8003e4c:	6879      	ldr	r1, [r7, #4]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	011b      	lsls	r3, r3, #4
 8003e52:	1a9b      	subs	r3, r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	440b      	add	r3, r1
 8003e58:	3319      	adds	r3, #25
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	78fa      	ldrb	r2, [r7, #3]
 8003e64:	4611      	mov	r1, r2
 8003e66:	4618      	mov	r0, r3
 8003e68:	f004 f8af 	bl	8007fca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003e6c:	78fb      	ldrb	r3, [r7, #3]
 8003e6e:	015a      	lsls	r2, r3, #5
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	4413      	add	r3, r2
 8003e74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e78:	461a      	mov	r2, r3
 8003e7a:	2310      	movs	r3, #16
 8003e7c:	6093      	str	r3, [r2, #8]
 8003e7e:	e2a7      	b.n	80043d0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	78fa      	ldrb	r2, [r7, #3]
 8003e86:	4611      	mov	r1, r2
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f003 fafa 	bl	8007482 <USB_ReadChInterrupts>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e94:	2b80      	cmp	r3, #128	@ 0x80
 8003e96:	f040 8083 	bne.w	8003fa0 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	799b      	ldrb	r3, [r3, #6]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d111      	bne.n	8003ec6 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003ea2:	78fa      	ldrb	r2, [r7, #3]
 8003ea4:	6879      	ldr	r1, [r7, #4]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	011b      	lsls	r3, r3, #4
 8003eaa:	1a9b      	subs	r3, r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	440b      	add	r3, r1
 8003eb0:	334d      	adds	r3, #77	@ 0x4d
 8003eb2:	2207      	movs	r2, #7
 8003eb4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	78fa      	ldrb	r2, [r7, #3]
 8003ebc:	4611      	mov	r1, r2
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f004 f883 	bl	8007fca <USB_HC_Halt>
 8003ec4:	e062      	b.n	8003f8c <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003ec6:	78fa      	ldrb	r2, [r7, #3]
 8003ec8:	6879      	ldr	r1, [r7, #4]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	011b      	lsls	r3, r3, #4
 8003ece:	1a9b      	subs	r3, r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	440b      	add	r3, r1
 8003ed4:	3344      	adds	r3, #68	@ 0x44
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	1c59      	adds	r1, r3, #1
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	4613      	mov	r3, r2
 8003ede:	011b      	lsls	r3, r3, #4
 8003ee0:	1a9b      	subs	r3, r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4403      	add	r3, r0
 8003ee6:	3344      	adds	r3, #68	@ 0x44
 8003ee8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003eea:	78fa      	ldrb	r2, [r7, #3]
 8003eec:	6879      	ldr	r1, [r7, #4]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	011b      	lsls	r3, r3, #4
 8003ef2:	1a9b      	subs	r3, r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	440b      	add	r3, r1
 8003ef8:	3344      	adds	r3, #68	@ 0x44
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d922      	bls.n	8003f46 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003f00:	78fa      	ldrb	r2, [r7, #3]
 8003f02:	6879      	ldr	r1, [r7, #4]
 8003f04:	4613      	mov	r3, r2
 8003f06:	011b      	lsls	r3, r3, #4
 8003f08:	1a9b      	subs	r3, r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	440b      	add	r3, r1
 8003f0e:	3344      	adds	r3, #68	@ 0x44
 8003f10:	2200      	movs	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003f14:	78fa      	ldrb	r2, [r7, #3]
 8003f16:	6879      	ldr	r1, [r7, #4]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	011b      	lsls	r3, r3, #4
 8003f1c:	1a9b      	subs	r3, r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	440b      	add	r3, r1
 8003f22:	334c      	adds	r3, #76	@ 0x4c
 8003f24:	2204      	movs	r2, #4
 8003f26:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003f28:	78fa      	ldrb	r2, [r7, #3]
 8003f2a:	6879      	ldr	r1, [r7, #4]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	011b      	lsls	r3, r3, #4
 8003f30:	1a9b      	subs	r3, r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	440b      	add	r3, r1
 8003f36:	334c      	adds	r3, #76	@ 0x4c
 8003f38:	781a      	ldrb	r2, [r3, #0]
 8003f3a:	78fb      	ldrb	r3, [r7, #3]
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f006 fb9c 	bl	800a67c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003f44:	e022      	b.n	8003f8c <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003f46:	78fa      	ldrb	r2, [r7, #3]
 8003f48:	6879      	ldr	r1, [r7, #4]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	011b      	lsls	r3, r3, #4
 8003f4e:	1a9b      	subs	r3, r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	440b      	add	r3, r1
 8003f54:	334c      	adds	r3, #76	@ 0x4c
 8003f56:	2202      	movs	r2, #2
 8003f58:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003f5a:	78fb      	ldrb	r3, [r7, #3]
 8003f5c:	015a      	lsls	r2, r3, #5
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	4413      	add	r3, r2
 8003f62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003f70:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003f78:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003f7a:	78fb      	ldrb	r3, [r7, #3]
 8003f7c:	015a      	lsls	r2, r3, #5
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	4413      	add	r3, r2
 8003f82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f86:	461a      	mov	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003f8c:	78fb      	ldrb	r3, [r7, #3]
 8003f8e:	015a      	lsls	r2, r3, #5
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	4413      	add	r3, r2
 8003f94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f98:	461a      	mov	r2, r3
 8003f9a:	2380      	movs	r3, #128	@ 0x80
 8003f9c:	6093      	str	r3, [r2, #8]
 8003f9e:	e217      	b.n	80043d0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	78fa      	ldrb	r2, [r7, #3]
 8003fa6:	4611      	mov	r1, r2
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f003 fa6a 	bl	8007482 <USB_ReadChInterrupts>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fb8:	d11b      	bne.n	8003ff2 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003fba:	78fa      	ldrb	r2, [r7, #3]
 8003fbc:	6879      	ldr	r1, [r7, #4]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	011b      	lsls	r3, r3, #4
 8003fc2:	1a9b      	subs	r3, r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	440b      	add	r3, r1
 8003fc8:	334d      	adds	r3, #77	@ 0x4d
 8003fca:	2209      	movs	r2, #9
 8003fcc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	78fa      	ldrb	r2, [r7, #3]
 8003fd4:	4611      	mov	r1, r2
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f003 fff7 	bl	8007fca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003fdc:	78fb      	ldrb	r3, [r7, #3]
 8003fde:	015a      	lsls	r2, r3, #5
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fe8:	461a      	mov	r2, r3
 8003fea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003fee:	6093      	str	r3, [r2, #8]
 8003ff0:	e1ee      	b.n	80043d0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	78fa      	ldrb	r2, [r7, #3]
 8003ff8:	4611      	mov	r1, r2
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f003 fa41 	bl	8007482 <USB_ReadChInterrupts>
 8004000:	4603      	mov	r3, r0
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b02      	cmp	r3, #2
 8004008:	f040 81df 	bne.w	80043ca <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800400c:	78fb      	ldrb	r3, [r7, #3]
 800400e:	015a      	lsls	r2, r3, #5
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	4413      	add	r3, r2
 8004014:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004018:	461a      	mov	r2, r3
 800401a:	2302      	movs	r3, #2
 800401c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800401e:	78fa      	ldrb	r2, [r7, #3]
 8004020:	6879      	ldr	r1, [r7, #4]
 8004022:	4613      	mov	r3, r2
 8004024:	011b      	lsls	r3, r3, #4
 8004026:	1a9b      	subs	r3, r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	440b      	add	r3, r1
 800402c:	334d      	adds	r3, #77	@ 0x4d
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	2b01      	cmp	r3, #1
 8004032:	f040 8093 	bne.w	800415c <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004036:	78fa      	ldrb	r2, [r7, #3]
 8004038:	6879      	ldr	r1, [r7, #4]
 800403a:	4613      	mov	r3, r2
 800403c:	011b      	lsls	r3, r3, #4
 800403e:	1a9b      	subs	r3, r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	440b      	add	r3, r1
 8004044:	334d      	adds	r3, #77	@ 0x4d
 8004046:	2202      	movs	r2, #2
 8004048:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800404a:	78fa      	ldrb	r2, [r7, #3]
 800404c:	6879      	ldr	r1, [r7, #4]
 800404e:	4613      	mov	r3, r2
 8004050:	011b      	lsls	r3, r3, #4
 8004052:	1a9b      	subs	r3, r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	440b      	add	r3, r1
 8004058:	334c      	adds	r3, #76	@ 0x4c
 800405a:	2201      	movs	r2, #1
 800405c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800405e:	78fa      	ldrb	r2, [r7, #3]
 8004060:	6879      	ldr	r1, [r7, #4]
 8004062:	4613      	mov	r3, r2
 8004064:	011b      	lsls	r3, r3, #4
 8004066:	1a9b      	subs	r3, r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	440b      	add	r3, r1
 800406c:	3326      	adds	r3, #38	@ 0x26
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	2b02      	cmp	r3, #2
 8004072:	d00b      	beq.n	800408c <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004074:	78fa      	ldrb	r2, [r7, #3]
 8004076:	6879      	ldr	r1, [r7, #4]
 8004078:	4613      	mov	r3, r2
 800407a:	011b      	lsls	r3, r3, #4
 800407c:	1a9b      	subs	r3, r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	440b      	add	r3, r1
 8004082:	3326      	adds	r3, #38	@ 0x26
 8004084:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004086:	2b03      	cmp	r3, #3
 8004088:	f040 8190 	bne.w	80043ac <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	799b      	ldrb	r3, [r3, #6]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d115      	bne.n	80040c0 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004094:	78fa      	ldrb	r2, [r7, #3]
 8004096:	6879      	ldr	r1, [r7, #4]
 8004098:	4613      	mov	r3, r2
 800409a:	011b      	lsls	r3, r3, #4
 800409c:	1a9b      	subs	r3, r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	440b      	add	r3, r1
 80040a2:	333d      	adds	r3, #61	@ 0x3d
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	78fa      	ldrb	r2, [r7, #3]
 80040a8:	f083 0301 	eor.w	r3, r3, #1
 80040ac:	b2d8      	uxtb	r0, r3
 80040ae:	6879      	ldr	r1, [r7, #4]
 80040b0:	4613      	mov	r3, r2
 80040b2:	011b      	lsls	r3, r3, #4
 80040b4:	1a9b      	subs	r3, r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	440b      	add	r3, r1
 80040ba:	333d      	adds	r3, #61	@ 0x3d
 80040bc:	4602      	mov	r2, r0
 80040be:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	799b      	ldrb	r3, [r3, #6]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	f040 8171 	bne.w	80043ac <HCD_HC_OUT_IRQHandler+0x954>
 80040ca:	78fa      	ldrb	r2, [r7, #3]
 80040cc:	6879      	ldr	r1, [r7, #4]
 80040ce:	4613      	mov	r3, r2
 80040d0:	011b      	lsls	r3, r3, #4
 80040d2:	1a9b      	subs	r3, r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	440b      	add	r3, r1
 80040d8:	3334      	adds	r3, #52	@ 0x34
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f000 8165 	beq.w	80043ac <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80040e2:	78fa      	ldrb	r2, [r7, #3]
 80040e4:	6879      	ldr	r1, [r7, #4]
 80040e6:	4613      	mov	r3, r2
 80040e8:	011b      	lsls	r3, r3, #4
 80040ea:	1a9b      	subs	r3, r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	440b      	add	r3, r1
 80040f0:	3334      	adds	r3, #52	@ 0x34
 80040f2:	6819      	ldr	r1, [r3, #0]
 80040f4:	78fa      	ldrb	r2, [r7, #3]
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	4613      	mov	r3, r2
 80040fa:	011b      	lsls	r3, r3, #4
 80040fc:	1a9b      	subs	r3, r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4403      	add	r3, r0
 8004102:	3328      	adds	r3, #40	@ 0x28
 8004104:	881b      	ldrh	r3, [r3, #0]
 8004106:	440b      	add	r3, r1
 8004108:	1e59      	subs	r1, r3, #1
 800410a:	78fa      	ldrb	r2, [r7, #3]
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	4613      	mov	r3, r2
 8004110:	011b      	lsls	r3, r3, #4
 8004112:	1a9b      	subs	r3, r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	4403      	add	r3, r0
 8004118:	3328      	adds	r3, #40	@ 0x28
 800411a:	881b      	ldrh	r3, [r3, #0]
 800411c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004120:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	f003 0301 	and.w	r3, r3, #1
 8004128:	2b00      	cmp	r3, #0
 800412a:	f000 813f 	beq.w	80043ac <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800412e:	78fa      	ldrb	r2, [r7, #3]
 8004130:	6879      	ldr	r1, [r7, #4]
 8004132:	4613      	mov	r3, r2
 8004134:	011b      	lsls	r3, r3, #4
 8004136:	1a9b      	subs	r3, r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	440b      	add	r3, r1
 800413c:	333d      	adds	r3, #61	@ 0x3d
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	78fa      	ldrb	r2, [r7, #3]
 8004142:	f083 0301 	eor.w	r3, r3, #1
 8004146:	b2d8      	uxtb	r0, r3
 8004148:	6879      	ldr	r1, [r7, #4]
 800414a:	4613      	mov	r3, r2
 800414c:	011b      	lsls	r3, r3, #4
 800414e:	1a9b      	subs	r3, r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	440b      	add	r3, r1
 8004154:	333d      	adds	r3, #61	@ 0x3d
 8004156:	4602      	mov	r2, r0
 8004158:	701a      	strb	r2, [r3, #0]
 800415a:	e127      	b.n	80043ac <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800415c:	78fa      	ldrb	r2, [r7, #3]
 800415e:	6879      	ldr	r1, [r7, #4]
 8004160:	4613      	mov	r3, r2
 8004162:	011b      	lsls	r3, r3, #4
 8004164:	1a9b      	subs	r3, r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	440b      	add	r3, r1
 800416a:	334d      	adds	r3, #77	@ 0x4d
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	2b03      	cmp	r3, #3
 8004170:	d120      	bne.n	80041b4 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004172:	78fa      	ldrb	r2, [r7, #3]
 8004174:	6879      	ldr	r1, [r7, #4]
 8004176:	4613      	mov	r3, r2
 8004178:	011b      	lsls	r3, r3, #4
 800417a:	1a9b      	subs	r3, r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	440b      	add	r3, r1
 8004180:	334d      	adds	r3, #77	@ 0x4d
 8004182:	2202      	movs	r2, #2
 8004184:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004186:	78fa      	ldrb	r2, [r7, #3]
 8004188:	6879      	ldr	r1, [r7, #4]
 800418a:	4613      	mov	r3, r2
 800418c:	011b      	lsls	r3, r3, #4
 800418e:	1a9b      	subs	r3, r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	440b      	add	r3, r1
 8004194:	331b      	adds	r3, #27
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	2b01      	cmp	r3, #1
 800419a:	f040 8107 	bne.w	80043ac <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800419e:	78fa      	ldrb	r2, [r7, #3]
 80041a0:	6879      	ldr	r1, [r7, #4]
 80041a2:	4613      	mov	r3, r2
 80041a4:	011b      	lsls	r3, r3, #4
 80041a6:	1a9b      	subs	r3, r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	440b      	add	r3, r1
 80041ac:	334c      	adds	r3, #76	@ 0x4c
 80041ae:	2202      	movs	r2, #2
 80041b0:	701a      	strb	r2, [r3, #0]
 80041b2:	e0fb      	b.n	80043ac <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80041b4:	78fa      	ldrb	r2, [r7, #3]
 80041b6:	6879      	ldr	r1, [r7, #4]
 80041b8:	4613      	mov	r3, r2
 80041ba:	011b      	lsls	r3, r3, #4
 80041bc:	1a9b      	subs	r3, r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	440b      	add	r3, r1
 80041c2:	334d      	adds	r3, #77	@ 0x4d
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	2b04      	cmp	r3, #4
 80041c8:	d13a      	bne.n	8004240 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80041ca:	78fa      	ldrb	r2, [r7, #3]
 80041cc:	6879      	ldr	r1, [r7, #4]
 80041ce:	4613      	mov	r3, r2
 80041d0:	011b      	lsls	r3, r3, #4
 80041d2:	1a9b      	subs	r3, r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	440b      	add	r3, r1
 80041d8:	334d      	adds	r3, #77	@ 0x4d
 80041da:	2202      	movs	r2, #2
 80041dc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80041de:	78fa      	ldrb	r2, [r7, #3]
 80041e0:	6879      	ldr	r1, [r7, #4]
 80041e2:	4613      	mov	r3, r2
 80041e4:	011b      	lsls	r3, r3, #4
 80041e6:	1a9b      	subs	r3, r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	440b      	add	r3, r1
 80041ec:	334c      	adds	r3, #76	@ 0x4c
 80041ee:	2202      	movs	r2, #2
 80041f0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80041f2:	78fa      	ldrb	r2, [r7, #3]
 80041f4:	6879      	ldr	r1, [r7, #4]
 80041f6:	4613      	mov	r3, r2
 80041f8:	011b      	lsls	r3, r3, #4
 80041fa:	1a9b      	subs	r3, r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	440b      	add	r3, r1
 8004200:	331b      	adds	r3, #27
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	2b01      	cmp	r3, #1
 8004206:	f040 80d1 	bne.w	80043ac <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800420a:	78fa      	ldrb	r2, [r7, #3]
 800420c:	6879      	ldr	r1, [r7, #4]
 800420e:	4613      	mov	r3, r2
 8004210:	011b      	lsls	r3, r3, #4
 8004212:	1a9b      	subs	r3, r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	440b      	add	r3, r1
 8004218:	331b      	adds	r3, #27
 800421a:	2200      	movs	r2, #0
 800421c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800421e:	78fb      	ldrb	r3, [r7, #3]
 8004220:	015a      	lsls	r2, r3, #5
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	4413      	add	r3, r2
 8004226:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	78fa      	ldrb	r2, [r7, #3]
 800422e:	0151      	lsls	r1, r2, #5
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	440a      	add	r2, r1
 8004234:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004238:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800423c:	6053      	str	r3, [r2, #4]
 800423e:	e0b5      	b.n	80043ac <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004240:	78fa      	ldrb	r2, [r7, #3]
 8004242:	6879      	ldr	r1, [r7, #4]
 8004244:	4613      	mov	r3, r2
 8004246:	011b      	lsls	r3, r3, #4
 8004248:	1a9b      	subs	r3, r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	440b      	add	r3, r1
 800424e:	334d      	adds	r3, #77	@ 0x4d
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	2b05      	cmp	r3, #5
 8004254:	d114      	bne.n	8004280 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004256:	78fa      	ldrb	r2, [r7, #3]
 8004258:	6879      	ldr	r1, [r7, #4]
 800425a:	4613      	mov	r3, r2
 800425c:	011b      	lsls	r3, r3, #4
 800425e:	1a9b      	subs	r3, r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	440b      	add	r3, r1
 8004264:	334d      	adds	r3, #77	@ 0x4d
 8004266:	2202      	movs	r2, #2
 8004268:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800426a:	78fa      	ldrb	r2, [r7, #3]
 800426c:	6879      	ldr	r1, [r7, #4]
 800426e:	4613      	mov	r3, r2
 8004270:	011b      	lsls	r3, r3, #4
 8004272:	1a9b      	subs	r3, r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	440b      	add	r3, r1
 8004278:	334c      	adds	r3, #76	@ 0x4c
 800427a:	2202      	movs	r2, #2
 800427c:	701a      	strb	r2, [r3, #0]
 800427e:	e095      	b.n	80043ac <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004280:	78fa      	ldrb	r2, [r7, #3]
 8004282:	6879      	ldr	r1, [r7, #4]
 8004284:	4613      	mov	r3, r2
 8004286:	011b      	lsls	r3, r3, #4
 8004288:	1a9b      	subs	r3, r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	440b      	add	r3, r1
 800428e:	334d      	adds	r3, #77	@ 0x4d
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	2b06      	cmp	r3, #6
 8004294:	d114      	bne.n	80042c0 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004296:	78fa      	ldrb	r2, [r7, #3]
 8004298:	6879      	ldr	r1, [r7, #4]
 800429a:	4613      	mov	r3, r2
 800429c:	011b      	lsls	r3, r3, #4
 800429e:	1a9b      	subs	r3, r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	440b      	add	r3, r1
 80042a4:	334d      	adds	r3, #77	@ 0x4d
 80042a6:	2202      	movs	r2, #2
 80042a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80042aa:	78fa      	ldrb	r2, [r7, #3]
 80042ac:	6879      	ldr	r1, [r7, #4]
 80042ae:	4613      	mov	r3, r2
 80042b0:	011b      	lsls	r3, r3, #4
 80042b2:	1a9b      	subs	r3, r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	440b      	add	r3, r1
 80042b8:	334c      	adds	r3, #76	@ 0x4c
 80042ba:	2205      	movs	r2, #5
 80042bc:	701a      	strb	r2, [r3, #0]
 80042be:	e075      	b.n	80043ac <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80042c0:	78fa      	ldrb	r2, [r7, #3]
 80042c2:	6879      	ldr	r1, [r7, #4]
 80042c4:	4613      	mov	r3, r2
 80042c6:	011b      	lsls	r3, r3, #4
 80042c8:	1a9b      	subs	r3, r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	440b      	add	r3, r1
 80042ce:	334d      	adds	r3, #77	@ 0x4d
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	2b07      	cmp	r3, #7
 80042d4:	d00a      	beq.n	80042ec <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80042d6:	78fa      	ldrb	r2, [r7, #3]
 80042d8:	6879      	ldr	r1, [r7, #4]
 80042da:	4613      	mov	r3, r2
 80042dc:	011b      	lsls	r3, r3, #4
 80042de:	1a9b      	subs	r3, r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	440b      	add	r3, r1
 80042e4:	334d      	adds	r3, #77	@ 0x4d
 80042e6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80042e8:	2b09      	cmp	r3, #9
 80042ea:	d170      	bne.n	80043ce <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80042ec:	78fa      	ldrb	r2, [r7, #3]
 80042ee:	6879      	ldr	r1, [r7, #4]
 80042f0:	4613      	mov	r3, r2
 80042f2:	011b      	lsls	r3, r3, #4
 80042f4:	1a9b      	subs	r3, r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	440b      	add	r3, r1
 80042fa:	334d      	adds	r3, #77	@ 0x4d
 80042fc:	2202      	movs	r2, #2
 80042fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004300:	78fa      	ldrb	r2, [r7, #3]
 8004302:	6879      	ldr	r1, [r7, #4]
 8004304:	4613      	mov	r3, r2
 8004306:	011b      	lsls	r3, r3, #4
 8004308:	1a9b      	subs	r3, r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	440b      	add	r3, r1
 800430e:	3344      	adds	r3, #68	@ 0x44
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	1c59      	adds	r1, r3, #1
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	4613      	mov	r3, r2
 8004318:	011b      	lsls	r3, r3, #4
 800431a:	1a9b      	subs	r3, r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	4403      	add	r3, r0
 8004320:	3344      	adds	r3, #68	@ 0x44
 8004322:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004324:	78fa      	ldrb	r2, [r7, #3]
 8004326:	6879      	ldr	r1, [r7, #4]
 8004328:	4613      	mov	r3, r2
 800432a:	011b      	lsls	r3, r3, #4
 800432c:	1a9b      	subs	r3, r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	440b      	add	r3, r1
 8004332:	3344      	adds	r3, #68	@ 0x44
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b02      	cmp	r3, #2
 8004338:	d914      	bls.n	8004364 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800433a:	78fa      	ldrb	r2, [r7, #3]
 800433c:	6879      	ldr	r1, [r7, #4]
 800433e:	4613      	mov	r3, r2
 8004340:	011b      	lsls	r3, r3, #4
 8004342:	1a9b      	subs	r3, r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	440b      	add	r3, r1
 8004348:	3344      	adds	r3, #68	@ 0x44
 800434a:	2200      	movs	r2, #0
 800434c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800434e:	78fa      	ldrb	r2, [r7, #3]
 8004350:	6879      	ldr	r1, [r7, #4]
 8004352:	4613      	mov	r3, r2
 8004354:	011b      	lsls	r3, r3, #4
 8004356:	1a9b      	subs	r3, r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	440b      	add	r3, r1
 800435c:	334c      	adds	r3, #76	@ 0x4c
 800435e:	2204      	movs	r2, #4
 8004360:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004362:	e022      	b.n	80043aa <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004364:	78fa      	ldrb	r2, [r7, #3]
 8004366:	6879      	ldr	r1, [r7, #4]
 8004368:	4613      	mov	r3, r2
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	1a9b      	subs	r3, r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	440b      	add	r3, r1
 8004372:	334c      	adds	r3, #76	@ 0x4c
 8004374:	2202      	movs	r2, #2
 8004376:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004378:	78fb      	ldrb	r3, [r7, #3]
 800437a:	015a      	lsls	r2, r3, #5
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	4413      	add	r3, r2
 8004380:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800438e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004396:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004398:	78fb      	ldrb	r3, [r7, #3]
 800439a:	015a      	lsls	r2, r3, #5
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	4413      	add	r3, r2
 80043a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043a4:	461a      	mov	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80043aa:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80043ac:	78fa      	ldrb	r2, [r7, #3]
 80043ae:	6879      	ldr	r1, [r7, #4]
 80043b0:	4613      	mov	r3, r2
 80043b2:	011b      	lsls	r3, r3, #4
 80043b4:	1a9b      	subs	r3, r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	440b      	add	r3, r1
 80043ba:	334c      	adds	r3, #76	@ 0x4c
 80043bc:	781a      	ldrb	r2, [r3, #0]
 80043be:	78fb      	ldrb	r3, [r7, #3]
 80043c0:	4619      	mov	r1, r3
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f006 f95a 	bl	800a67c <HAL_HCD_HC_NotifyURBChange_Callback>
 80043c8:	e002      	b.n	80043d0 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80043ca:	bf00      	nop
 80043cc:	e000      	b.n	80043d0 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80043ce:	bf00      	nop
  }
}
 80043d0:	3718      	adds	r7, #24
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b08a      	sub	sp, #40	@ 0x28
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	f003 030f 	and.w	r3, r3, #15
 80043f6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	0c5b      	lsrs	r3, r3, #17
 80043fc:	f003 030f 	and.w	r3, r3, #15
 8004400:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	091b      	lsrs	r3, r3, #4
 8004406:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800440a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	2b02      	cmp	r3, #2
 8004410:	d004      	beq.n	800441c <HCD_RXQLVL_IRQHandler+0x46>
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	2b05      	cmp	r3, #5
 8004416:	f000 80b6 	beq.w	8004586 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800441a:	e0b7      	b.n	800458c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	2b00      	cmp	r3, #0
 8004420:	f000 80b3 	beq.w	800458a <HCD_RXQLVL_IRQHandler+0x1b4>
 8004424:	6879      	ldr	r1, [r7, #4]
 8004426:	69ba      	ldr	r2, [r7, #24]
 8004428:	4613      	mov	r3, r2
 800442a:	011b      	lsls	r3, r3, #4
 800442c:	1a9b      	subs	r3, r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	440b      	add	r3, r1
 8004432:	332c      	adds	r3, #44	@ 0x2c
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	f000 80a7 	beq.w	800458a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800443c:	6879      	ldr	r1, [r7, #4]
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	4613      	mov	r3, r2
 8004442:	011b      	lsls	r3, r3, #4
 8004444:	1a9b      	subs	r3, r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	440b      	add	r3, r1
 800444a:	3338      	adds	r3, #56	@ 0x38
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	18d1      	adds	r1, r2, r3
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	4613      	mov	r3, r2
 8004458:	011b      	lsls	r3, r3, #4
 800445a:	1a9b      	subs	r3, r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4403      	add	r3, r0
 8004460:	3334      	adds	r3, #52	@ 0x34
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4299      	cmp	r1, r3
 8004466:	f200 8083 	bhi.w	8004570 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6818      	ldr	r0, [r3, #0]
 800446e:	6879      	ldr	r1, [r7, #4]
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	4613      	mov	r3, r2
 8004474:	011b      	lsls	r3, r3, #4
 8004476:	1a9b      	subs	r3, r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	440b      	add	r3, r1
 800447c:	332c      	adds	r3, #44	@ 0x2c
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	b292      	uxth	r2, r2
 8004484:	4619      	mov	r1, r3
 8004486:	f002 ff91 	bl	80073ac <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800448a:	6879      	ldr	r1, [r7, #4]
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	4613      	mov	r3, r2
 8004490:	011b      	lsls	r3, r3, #4
 8004492:	1a9b      	subs	r3, r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	440b      	add	r3, r1
 8004498:	332c      	adds	r3, #44	@ 0x2c
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	18d1      	adds	r1, r2, r3
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	4613      	mov	r3, r2
 80044a6:	011b      	lsls	r3, r3, #4
 80044a8:	1a9b      	subs	r3, r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	4403      	add	r3, r0
 80044ae:	332c      	adds	r3, #44	@ 0x2c
 80044b0:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80044b2:	6879      	ldr	r1, [r7, #4]
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	4613      	mov	r3, r2
 80044b8:	011b      	lsls	r3, r3, #4
 80044ba:	1a9b      	subs	r3, r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	440b      	add	r3, r1
 80044c0:	3338      	adds	r3, #56	@ 0x38
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	18d1      	adds	r1, r2, r3
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	4613      	mov	r3, r2
 80044ce:	011b      	lsls	r3, r3, #4
 80044d0:	1a9b      	subs	r3, r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4403      	add	r3, r0
 80044d6:	3338      	adds	r3, #56	@ 0x38
 80044d8:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	015a      	lsls	r2, r3, #5
 80044de:	6a3b      	ldr	r3, [r7, #32]
 80044e0:	4413      	add	r3, r2
 80044e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	0cdb      	lsrs	r3, r3, #19
 80044ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044ee:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80044f0:	6879      	ldr	r1, [r7, #4]
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	4613      	mov	r3, r2
 80044f6:	011b      	lsls	r3, r3, #4
 80044f8:	1a9b      	subs	r3, r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	440b      	add	r3, r1
 80044fe:	3328      	adds	r3, #40	@ 0x28
 8004500:	881b      	ldrh	r3, [r3, #0]
 8004502:	461a      	mov	r2, r3
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	4293      	cmp	r3, r2
 8004508:	d13f      	bne.n	800458a <HCD_RXQLVL_IRQHandler+0x1b4>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d03c      	beq.n	800458a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	015a      	lsls	r2, r3, #5
 8004514:	6a3b      	ldr	r3, [r7, #32]
 8004516:	4413      	add	r3, r2
 8004518:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004526:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800452e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	015a      	lsls	r2, r3, #5
 8004534:	6a3b      	ldr	r3, [r7, #32]
 8004536:	4413      	add	r3, r2
 8004538:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800453c:	461a      	mov	r2, r3
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004542:	6879      	ldr	r1, [r7, #4]
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	4613      	mov	r3, r2
 8004548:	011b      	lsls	r3, r3, #4
 800454a:	1a9b      	subs	r3, r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	440b      	add	r3, r1
 8004550:	333c      	adds	r3, #60	@ 0x3c
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	f083 0301 	eor.w	r3, r3, #1
 8004558:	b2d8      	uxtb	r0, r3
 800455a:	6879      	ldr	r1, [r7, #4]
 800455c:	69ba      	ldr	r2, [r7, #24]
 800455e:	4613      	mov	r3, r2
 8004560:	011b      	lsls	r3, r3, #4
 8004562:	1a9b      	subs	r3, r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	440b      	add	r3, r1
 8004568:	333c      	adds	r3, #60	@ 0x3c
 800456a:	4602      	mov	r2, r0
 800456c:	701a      	strb	r2, [r3, #0]
      break;
 800456e:	e00c      	b.n	800458a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004570:	6879      	ldr	r1, [r7, #4]
 8004572:	69ba      	ldr	r2, [r7, #24]
 8004574:	4613      	mov	r3, r2
 8004576:	011b      	lsls	r3, r3, #4
 8004578:	1a9b      	subs	r3, r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	440b      	add	r3, r1
 800457e:	334c      	adds	r3, #76	@ 0x4c
 8004580:	2204      	movs	r2, #4
 8004582:	701a      	strb	r2, [r3, #0]
      break;
 8004584:	e001      	b.n	800458a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004586:	bf00      	nop
 8004588:	e000      	b.n	800458c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800458a:	bf00      	nop
  }
}
 800458c:	bf00      	nop
 800458e:	3728      	adds	r7, #40	@ 0x28
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80045c0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d10b      	bne.n	80045e4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d102      	bne.n	80045dc <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f006 f834 	bl	800a644 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	f043 0302 	orr.w	r3, r3, #2
 80045e2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f003 0308 	and.w	r3, r3, #8
 80045ea:	2b08      	cmp	r3, #8
 80045ec:	d132      	bne.n	8004654 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	f043 0308 	orr.w	r3, r3, #8
 80045f4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f003 0304 	and.w	r3, r3, #4
 80045fc:	2b04      	cmp	r3, #4
 80045fe:	d126      	bne.n	800464e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	7a5b      	ldrb	r3, [r3, #9]
 8004604:	2b02      	cmp	r3, #2
 8004606:	d113      	bne.n	8004630 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800460e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004612:	d106      	bne.n	8004622 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2102      	movs	r1, #2
 800461a:	4618      	mov	r0, r3
 800461c:	f003 f856 	bl	80076cc <USB_InitFSLSPClkSel>
 8004620:	e011      	b.n	8004646 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2101      	movs	r1, #1
 8004628:	4618      	mov	r0, r3
 800462a:	f003 f84f 	bl	80076cc <USB_InitFSLSPClkSel>
 800462e:	e00a      	b.n	8004646 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	79db      	ldrb	r3, [r3, #7]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d106      	bne.n	8004646 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800463e:	461a      	mov	r2, r3
 8004640:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004644:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f006 f826 	bl	800a698 <HAL_HCD_PortEnabled_Callback>
 800464c:	e002      	b.n	8004654 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f006 f830 	bl	800a6b4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f003 0320 	and.w	r3, r3, #32
 800465a:	2b20      	cmp	r3, #32
 800465c:	d103      	bne.n	8004666 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	f043 0320 	orr.w	r3, r3, #32
 8004664:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800466c:	461a      	mov	r2, r3
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	6013      	str	r3, [r2, #0]
}
 8004672:	bf00      	nop
 8004674:	3718      	adds	r7, #24
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
	...

0800467c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e12b      	b.n	80048e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d106      	bne.n	80046a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7fc fe52 	bl	800134c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2224      	movs	r2, #36	@ 0x24
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f022 0201 	bic.w	r2, r2, #1
 80046be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80046ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80046de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80046e0:	f001 fea0 	bl	8006424 <HAL_RCC_GetPCLK1Freq>
 80046e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	4a81      	ldr	r2, [pc, #516]	@ (80048f0 <HAL_I2C_Init+0x274>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d807      	bhi.n	8004700 <HAL_I2C_Init+0x84>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	4a80      	ldr	r2, [pc, #512]	@ (80048f4 <HAL_I2C_Init+0x278>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	bf94      	ite	ls
 80046f8:	2301      	movls	r3, #1
 80046fa:	2300      	movhi	r3, #0
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	e006      	b.n	800470e <HAL_I2C_Init+0x92>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	4a7d      	ldr	r2, [pc, #500]	@ (80048f8 <HAL_I2C_Init+0x27c>)
 8004704:	4293      	cmp	r3, r2
 8004706:	bf94      	ite	ls
 8004708:	2301      	movls	r3, #1
 800470a:	2300      	movhi	r3, #0
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d001      	beq.n	8004716 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e0e7      	b.n	80048e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4a78      	ldr	r2, [pc, #480]	@ (80048fc <HAL_I2C_Init+0x280>)
 800471a:	fba2 2303 	umull	r2, r3, r2, r3
 800471e:	0c9b      	lsrs	r3, r3, #18
 8004720:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	430a      	orrs	r2, r1
 8004734:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	4a6a      	ldr	r2, [pc, #424]	@ (80048f0 <HAL_I2C_Init+0x274>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d802      	bhi.n	8004750 <HAL_I2C_Init+0xd4>
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	3301      	adds	r3, #1
 800474e:	e009      	b.n	8004764 <HAL_I2C_Init+0xe8>
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004756:	fb02 f303 	mul.w	r3, r2, r3
 800475a:	4a69      	ldr	r2, [pc, #420]	@ (8004900 <HAL_I2C_Init+0x284>)
 800475c:	fba2 2303 	umull	r2, r3, r2, r3
 8004760:	099b      	lsrs	r3, r3, #6
 8004762:	3301      	adds	r3, #1
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6812      	ldr	r2, [r2, #0]
 8004768:	430b      	orrs	r3, r1
 800476a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004776:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	495c      	ldr	r1, [pc, #368]	@ (80048f0 <HAL_I2C_Init+0x274>)
 8004780:	428b      	cmp	r3, r1
 8004782:	d819      	bhi.n	80047b8 <HAL_I2C_Init+0x13c>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	1e59      	subs	r1, r3, #1
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	005b      	lsls	r3, r3, #1
 800478e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004792:	1c59      	adds	r1, r3, #1
 8004794:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004798:	400b      	ands	r3, r1
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00a      	beq.n	80047b4 <HAL_I2C_Init+0x138>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	1e59      	subs	r1, r3, #1
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	005b      	lsls	r3, r3, #1
 80047a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80047ac:	3301      	adds	r3, #1
 80047ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047b2:	e051      	b.n	8004858 <HAL_I2C_Init+0x1dc>
 80047b4:	2304      	movs	r3, #4
 80047b6:	e04f      	b.n	8004858 <HAL_I2C_Init+0x1dc>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d111      	bne.n	80047e4 <HAL_I2C_Init+0x168>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	1e58      	subs	r0, r3, #1
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6859      	ldr	r1, [r3, #4]
 80047c8:	460b      	mov	r3, r1
 80047ca:	005b      	lsls	r3, r3, #1
 80047cc:	440b      	add	r3, r1
 80047ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80047d2:	3301      	adds	r3, #1
 80047d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047d8:	2b00      	cmp	r3, #0
 80047da:	bf0c      	ite	eq
 80047dc:	2301      	moveq	r3, #1
 80047de:	2300      	movne	r3, #0
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	e012      	b.n	800480a <HAL_I2C_Init+0x18e>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	1e58      	subs	r0, r3, #1
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6859      	ldr	r1, [r3, #4]
 80047ec:	460b      	mov	r3, r1
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	440b      	add	r3, r1
 80047f2:	0099      	lsls	r1, r3, #2
 80047f4:	440b      	add	r3, r1
 80047f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80047fa:	3301      	adds	r3, #1
 80047fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004800:	2b00      	cmp	r3, #0
 8004802:	bf0c      	ite	eq
 8004804:	2301      	moveq	r3, #1
 8004806:	2300      	movne	r3, #0
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <HAL_I2C_Init+0x196>
 800480e:	2301      	movs	r3, #1
 8004810:	e022      	b.n	8004858 <HAL_I2C_Init+0x1dc>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10e      	bne.n	8004838 <HAL_I2C_Init+0x1bc>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	1e58      	subs	r0, r3, #1
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6859      	ldr	r1, [r3, #4]
 8004822:	460b      	mov	r3, r1
 8004824:	005b      	lsls	r3, r3, #1
 8004826:	440b      	add	r3, r1
 8004828:	fbb0 f3f3 	udiv	r3, r0, r3
 800482c:	3301      	adds	r3, #1
 800482e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004832:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004836:	e00f      	b.n	8004858 <HAL_I2C_Init+0x1dc>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	1e58      	subs	r0, r3, #1
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6859      	ldr	r1, [r3, #4]
 8004840:	460b      	mov	r3, r1
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	440b      	add	r3, r1
 8004846:	0099      	lsls	r1, r3, #2
 8004848:	440b      	add	r3, r1
 800484a:	fbb0 f3f3 	udiv	r3, r0, r3
 800484e:	3301      	adds	r3, #1
 8004850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004854:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004858:	6879      	ldr	r1, [r7, #4]
 800485a:	6809      	ldr	r1, [r1, #0]
 800485c:	4313      	orrs	r3, r2
 800485e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	69da      	ldr	r2, [r3, #28]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	431a      	orrs	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	430a      	orrs	r2, r1
 800487a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004886:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	6911      	ldr	r1, [r2, #16]
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	68d2      	ldr	r2, [r2, #12]
 8004892:	4311      	orrs	r1, r2
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	6812      	ldr	r2, [r2, #0]
 8004898:	430b      	orrs	r3, r1
 800489a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	695a      	ldr	r2, [r3, #20]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	431a      	orrs	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	430a      	orrs	r2, r1
 80048b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f042 0201 	orr.w	r2, r2, #1
 80048c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2220      	movs	r2, #32
 80048d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	000186a0 	.word	0x000186a0
 80048f4:	001e847f 	.word	0x001e847f
 80048f8:	003d08ff 	.word	0x003d08ff
 80048fc:	431bde83 	.word	0x431bde83
 8004900:	10624dd3 	.word	0x10624dd3

08004904 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b088      	sub	sp, #32
 8004908:	af02      	add	r7, sp, #8
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	607a      	str	r2, [r7, #4]
 800490e:	461a      	mov	r2, r3
 8004910:	460b      	mov	r3, r1
 8004912:	817b      	strh	r3, [r7, #10]
 8004914:	4613      	mov	r3, r2
 8004916:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004918:	f7fd fa6a 	bl	8001df0 <HAL_GetTick>
 800491c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b20      	cmp	r3, #32
 8004928:	f040 80e0 	bne.w	8004aec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	2319      	movs	r3, #25
 8004932:	2201      	movs	r2, #1
 8004934:	4970      	ldr	r1, [pc, #448]	@ (8004af8 <HAL_I2C_Master_Transmit+0x1f4>)
 8004936:	68f8      	ldr	r0, [r7, #12]
 8004938:	f000 f964 	bl	8004c04 <I2C_WaitOnFlagUntilTimeout>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004942:	2302      	movs	r3, #2
 8004944:	e0d3      	b.n	8004aee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800494c:	2b01      	cmp	r3, #1
 800494e:	d101      	bne.n	8004954 <HAL_I2C_Master_Transmit+0x50>
 8004950:	2302      	movs	r3, #2
 8004952:	e0cc      	b.n	8004aee <HAL_I2C_Master_Transmit+0x1ea>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b01      	cmp	r3, #1
 8004968:	d007      	beq.n	800497a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f042 0201 	orr.w	r2, r2, #1
 8004978:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004988:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2221      	movs	r2, #33	@ 0x21
 800498e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2210      	movs	r2, #16
 8004996:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	893a      	ldrh	r2, [r7, #8]
 80049aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	4a50      	ldr	r2, [pc, #320]	@ (8004afc <HAL_I2C_Master_Transmit+0x1f8>)
 80049ba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80049bc:	8979      	ldrh	r1, [r7, #10]
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	6a3a      	ldr	r2, [r7, #32]
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f000 f89c 	bl	8004b00 <I2C_MasterRequestWrite>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d001      	beq.n	80049d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e08d      	b.n	8004aee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049d2:	2300      	movs	r3, #0
 80049d4:	613b      	str	r3, [r7, #16]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	695b      	ldr	r3, [r3, #20]
 80049dc:	613b      	str	r3, [r7, #16]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	613b      	str	r3, [r7, #16]
 80049e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80049e8:	e066      	b.n	8004ab8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	6a39      	ldr	r1, [r7, #32]
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f000 fa22 	bl	8004e38 <I2C_WaitOnTXEFlagUntilTimeout>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00d      	beq.n	8004a16 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049fe:	2b04      	cmp	r3, #4
 8004a00:	d107      	bne.n	8004a12 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e06b      	b.n	8004aee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a1a:	781a      	ldrb	r2, [r3, #0]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a26:	1c5a      	adds	r2, r3, #1
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	3b01      	subs	r3, #1
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	695b      	ldr	r3, [r3, #20]
 8004a4c:	f003 0304 	and.w	r3, r3, #4
 8004a50:	2b04      	cmp	r3, #4
 8004a52:	d11b      	bne.n	8004a8c <HAL_I2C_Master_Transmit+0x188>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d017      	beq.n	8004a8c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a60:	781a      	ldrb	r2, [r3, #0]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6c:	1c5a      	adds	r2, r3, #1
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a84:	3b01      	subs	r3, #1
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	6a39      	ldr	r1, [r7, #32]
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f000 fa19 	bl	8004ec8 <I2C_WaitOnBTFFlagUntilTimeout>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00d      	beq.n	8004ab8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa0:	2b04      	cmp	r3, #4
 8004aa2:	d107      	bne.n	8004ab4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ab2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e01a      	b.n	8004aee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d194      	bne.n	80049ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ace:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	e000      	b.n	8004aee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004aec:	2302      	movs	r3, #2
  }
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3718      	adds	r7, #24
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	00100002 	.word	0x00100002
 8004afc:	ffff0000 	.word	0xffff0000

08004b00 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b088      	sub	sp, #32
 8004b04:	af02      	add	r7, sp, #8
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	607a      	str	r2, [r7, #4]
 8004b0a:	603b      	str	r3, [r7, #0]
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b14:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	2b08      	cmp	r3, #8
 8004b1a:	d006      	beq.n	8004b2a <I2C_MasterRequestWrite+0x2a>
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d003      	beq.n	8004b2a <I2C_MasterRequestWrite+0x2a>
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b28:	d108      	bne.n	8004b3c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b38:	601a      	str	r2, [r3, #0]
 8004b3a:	e00b      	b.n	8004b54 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b40:	2b12      	cmp	r3, #18
 8004b42:	d107      	bne.n	8004b54 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b52:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f000 f84f 	bl	8004c04 <I2C_WaitOnFlagUntilTimeout>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00d      	beq.n	8004b88 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b7a:	d103      	bne.n	8004b84 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b82:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e035      	b.n	8004bf4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b90:	d108      	bne.n	8004ba4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b92:	897b      	ldrh	r3, [r7, #10]
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	461a      	mov	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004ba0:	611a      	str	r2, [r3, #16]
 8004ba2:	e01b      	b.n	8004bdc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004ba4:	897b      	ldrh	r3, [r7, #10]
 8004ba6:	11db      	asrs	r3, r3, #7
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	f003 0306 	and.w	r3, r3, #6
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	f063 030f 	orn	r3, r3, #15
 8004bb4:	b2da      	uxtb	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	490e      	ldr	r1, [pc, #56]	@ (8004bfc <I2C_MasterRequestWrite+0xfc>)
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	f000 f898 	bl	8004cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d001      	beq.n	8004bd2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e010      	b.n	8004bf4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004bd2:	897b      	ldrh	r3, [r7, #10]
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	4907      	ldr	r1, [pc, #28]	@ (8004c00 <I2C_MasterRequestWrite+0x100>)
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 f888 	bl	8004cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e000      	b.n	8004bf4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3718      	adds	r7, #24
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	00010008 	.word	0x00010008
 8004c00:	00010002 	.word	0x00010002

08004c04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	603b      	str	r3, [r7, #0]
 8004c10:	4613      	mov	r3, r2
 8004c12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c14:	e048      	b.n	8004ca8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c1c:	d044      	beq.n	8004ca8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c1e:	f7fd f8e7 	bl	8001df0 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	683a      	ldr	r2, [r7, #0]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d302      	bcc.n	8004c34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d139      	bne.n	8004ca8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	0c1b      	lsrs	r3, r3, #16
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d10d      	bne.n	8004c5a <I2C_WaitOnFlagUntilTimeout+0x56>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	43da      	mvns	r2, r3
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	4013      	ands	r3, r2
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	bf0c      	ite	eq
 8004c50:	2301      	moveq	r3, #1
 8004c52:	2300      	movne	r3, #0
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	461a      	mov	r2, r3
 8004c58:	e00c      	b.n	8004c74 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	43da      	mvns	r2, r3
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	4013      	ands	r3, r2
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	bf0c      	ite	eq
 8004c6c:	2301      	moveq	r3, #1
 8004c6e:	2300      	movne	r3, #0
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	461a      	mov	r2, r3
 8004c74:	79fb      	ldrb	r3, [r7, #7]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d116      	bne.n	8004ca8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2220      	movs	r2, #32
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c94:	f043 0220 	orr.w	r2, r3, #32
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e023      	b.n	8004cf0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	0c1b      	lsrs	r3, r3, #16
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d10d      	bne.n	8004cce <I2C_WaitOnFlagUntilTimeout+0xca>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	695b      	ldr	r3, [r3, #20]
 8004cb8:	43da      	mvns	r2, r3
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	bf0c      	ite	eq
 8004cc4:	2301      	moveq	r3, #1
 8004cc6:	2300      	movne	r3, #0
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	461a      	mov	r2, r3
 8004ccc:	e00c      	b.n	8004ce8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	43da      	mvns	r2, r3
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	4013      	ands	r3, r2
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	bf0c      	ite	eq
 8004ce0:	2301      	moveq	r3, #1
 8004ce2:	2300      	movne	r3, #0
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	79fb      	ldrb	r3, [r7, #7]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d093      	beq.n	8004c16 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
 8004d04:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d06:	e071      	b.n	8004dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d16:	d123      	bne.n	8004d60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d26:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d4c:	f043 0204 	orr.w	r2, r3, #4
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e067      	b.n	8004e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d66:	d041      	beq.n	8004dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d68:	f7fd f842 	bl	8001df0 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d302      	bcc.n	8004d7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d136      	bne.n	8004dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	0c1b      	lsrs	r3, r3, #16
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d10c      	bne.n	8004da2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	43da      	mvns	r2, r3
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	4013      	ands	r3, r2
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	bf14      	ite	ne
 8004d9a:	2301      	movne	r3, #1
 8004d9c:	2300      	moveq	r3, #0
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	e00b      	b.n	8004dba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	43da      	mvns	r2, r3
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	4013      	ands	r3, r2
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	bf14      	ite	ne
 8004db4:	2301      	movne	r3, #1
 8004db6:	2300      	moveq	r3, #0
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d016      	beq.n	8004dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2220      	movs	r2, #32
 8004dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd8:	f043 0220 	orr.w	r2, r3, #32
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e021      	b.n	8004e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	0c1b      	lsrs	r3, r3, #16
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d10c      	bne.n	8004e10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	43da      	mvns	r2, r3
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	4013      	ands	r3, r2
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	bf14      	ite	ne
 8004e08:	2301      	movne	r3, #1
 8004e0a:	2300      	moveq	r3, #0
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	e00b      	b.n	8004e28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	43da      	mvns	r2, r3
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	bf14      	ite	ne
 8004e22:	2301      	movne	r3, #1
 8004e24:	2300      	moveq	r3, #0
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f47f af6d 	bne.w	8004d08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e44:	e034      	b.n	8004eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f000 f886 	bl	8004f58 <I2C_IsAcknowledgeFailed>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e034      	b.n	8004ec0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e5c:	d028      	beq.n	8004eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e5e:	f7fc ffc7 	bl	8001df0 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	68ba      	ldr	r2, [r7, #8]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d302      	bcc.n	8004e74 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d11d      	bne.n	8004eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e7e:	2b80      	cmp	r3, #128	@ 0x80
 8004e80:	d016      	beq.n	8004eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9c:	f043 0220 	orr.w	r2, r3, #32
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e007      	b.n	8004ec0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eba:	2b80      	cmp	r3, #128	@ 0x80
 8004ebc:	d1c3      	bne.n	8004e46 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ed4:	e034      	b.n	8004f40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f000 f83e 	bl	8004f58 <I2C_IsAcknowledgeFailed>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d001      	beq.n	8004ee6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e034      	b.n	8004f50 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004eec:	d028      	beq.n	8004f40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eee:	f7fc ff7f 	bl	8001df0 <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	68ba      	ldr	r2, [r7, #8]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d302      	bcc.n	8004f04 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d11d      	bne.n	8004f40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	f003 0304 	and.w	r3, r3, #4
 8004f0e:	2b04      	cmp	r3, #4
 8004f10:	d016      	beq.n	8004f40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f2c:	f043 0220 	orr.w	r2, r3, #32
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e007      	b.n	8004f50 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	f003 0304 	and.w	r3, r3, #4
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	d1c3      	bne.n	8004ed6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f6e:	d11b      	bne.n	8004fa8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004f78:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2220      	movs	r2, #32
 8004f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f94:	f043 0204 	orr.w	r2, r3, #4
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e000      	b.n	8004faa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
	...

08004fb8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b088      	sub	sp, #32
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e128      	b.n	800521c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d109      	bne.n	8004fea <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a90      	ldr	r2, [pc, #576]	@ (8005224 <HAL_I2S_Init+0x26c>)
 8004fe2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f7fc fa27 	bl	8001438 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2202      	movs	r2, #2
 8004fee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	69db      	ldr	r3, [r3, #28]
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	6812      	ldr	r2, [r2, #0]
 8004ffc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005000:	f023 030f 	bic.w	r3, r3, #15
 8005004:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2202      	movs	r2, #2
 800500c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	2b02      	cmp	r3, #2
 8005014:	d060      	beq.n	80050d8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d102      	bne.n	8005024 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800501e:	2310      	movs	r3, #16
 8005020:	617b      	str	r3, [r7, #20]
 8005022:	e001      	b.n	8005028 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005024:	2320      	movs	r3, #32
 8005026:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	2b20      	cmp	r3, #32
 800502e:	d802      	bhi.n	8005036 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	005b      	lsls	r3, r3, #1
 8005034:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005036:	2001      	movs	r0, #1
 8005038:	f001 faea 	bl	8006610 <HAL_RCCEx_GetPeriphCLKFreq>
 800503c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005046:	d125      	bne.n	8005094 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d010      	beq.n	8005072 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	fbb2 f2f3 	udiv	r2, r2, r3
 800505a:	4613      	mov	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4413      	add	r3, r2
 8005060:	005b      	lsls	r3, r3, #1
 8005062:	461a      	mov	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	fbb2 f3f3 	udiv	r3, r2, r3
 800506c:	3305      	adds	r3, #5
 800506e:	613b      	str	r3, [r7, #16]
 8005070:	e01f      	b.n	80050b2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	00db      	lsls	r3, r3, #3
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	fbb2 f2f3 	udiv	r2, r2, r3
 800507c:	4613      	mov	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4413      	add	r3, r2
 8005082:	005b      	lsls	r3, r3, #1
 8005084:	461a      	mov	r2, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	fbb2 f3f3 	udiv	r3, r2, r3
 800508e:	3305      	adds	r3, #5
 8005090:	613b      	str	r3, [r7, #16]
 8005092:	e00e      	b.n	80050b2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	fbb2 f2f3 	udiv	r2, r2, r3
 800509c:	4613      	mov	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4413      	add	r3, r2
 80050a2:	005b      	lsls	r3, r3, #1
 80050a4:	461a      	mov	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ae:	3305      	adds	r3, #5
 80050b0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	4a5c      	ldr	r2, [pc, #368]	@ (8005228 <HAL_I2S_Init+0x270>)
 80050b6:	fba2 2303 	umull	r2, r3, r2, r3
 80050ba:	08db      	lsrs	r3, r3, #3
 80050bc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	f003 0301 	and.w	r3, r3, #1
 80050c4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	085b      	lsrs	r3, r3, #1
 80050ce:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	021b      	lsls	r3, r3, #8
 80050d4:	61bb      	str	r3, [r7, #24]
 80050d6:	e003      	b.n	80050e0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80050d8:	2302      	movs	r3, #2
 80050da:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80050dc:	2300      	movs	r3, #0
 80050de:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d902      	bls.n	80050ec <HAL_I2S_Init+0x134>
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	2bff      	cmp	r3, #255	@ 0xff
 80050ea:	d907      	bls.n	80050fc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050f0:	f043 0210 	orr.w	r2, r3, #16
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e08f      	b.n	800521c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	691a      	ldr	r2, [r3, #16]
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	ea42 0103 	orr.w	r1, r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	69fa      	ldr	r2, [r7, #28]
 800510c:	430a      	orrs	r2, r1
 800510e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800511a:	f023 030f 	bic.w	r3, r3, #15
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	6851      	ldr	r1, [r2, #4]
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	6892      	ldr	r2, [r2, #8]
 8005126:	4311      	orrs	r1, r2
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	68d2      	ldr	r2, [r2, #12]
 800512c:	4311      	orrs	r1, r2
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	6992      	ldr	r2, [r2, #24]
 8005132:	430a      	orrs	r2, r1
 8005134:	431a      	orrs	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800513e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a1b      	ldr	r3, [r3, #32]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d161      	bne.n	800520c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a38      	ldr	r2, [pc, #224]	@ (800522c <HAL_I2S_Init+0x274>)
 800514c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a37      	ldr	r2, [pc, #220]	@ (8005230 <HAL_I2S_Init+0x278>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d101      	bne.n	800515c <HAL_I2S_Init+0x1a4>
 8005158:	4b36      	ldr	r3, [pc, #216]	@ (8005234 <HAL_I2S_Init+0x27c>)
 800515a:	e001      	b.n	8005160 <HAL_I2S_Init+0x1a8>
 800515c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005160:	69db      	ldr	r3, [r3, #28]
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	6812      	ldr	r2, [r2, #0]
 8005166:	4932      	ldr	r1, [pc, #200]	@ (8005230 <HAL_I2S_Init+0x278>)
 8005168:	428a      	cmp	r2, r1
 800516a:	d101      	bne.n	8005170 <HAL_I2S_Init+0x1b8>
 800516c:	4a31      	ldr	r2, [pc, #196]	@ (8005234 <HAL_I2S_Init+0x27c>)
 800516e:	e001      	b.n	8005174 <HAL_I2S_Init+0x1bc>
 8005170:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005174:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005178:	f023 030f 	bic.w	r3, r3, #15
 800517c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a2b      	ldr	r2, [pc, #172]	@ (8005230 <HAL_I2S_Init+0x278>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d101      	bne.n	800518c <HAL_I2S_Init+0x1d4>
 8005188:	4b2a      	ldr	r3, [pc, #168]	@ (8005234 <HAL_I2S_Init+0x27c>)
 800518a:	e001      	b.n	8005190 <HAL_I2S_Init+0x1d8>
 800518c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005190:	2202      	movs	r2, #2
 8005192:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a25      	ldr	r2, [pc, #148]	@ (8005230 <HAL_I2S_Init+0x278>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d101      	bne.n	80051a2 <HAL_I2S_Init+0x1ea>
 800519e:	4b25      	ldr	r3, [pc, #148]	@ (8005234 <HAL_I2S_Init+0x27c>)
 80051a0:	e001      	b.n	80051a6 <HAL_I2S_Init+0x1ee>
 80051a2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80051a6:	69db      	ldr	r3, [r3, #28]
 80051a8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051b2:	d003      	beq.n	80051bc <HAL_I2S_Init+0x204>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d103      	bne.n	80051c4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80051bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80051c0:	613b      	str	r3, [r7, #16]
 80051c2:	e001      	b.n	80051c8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80051c4:	2300      	movs	r3, #0
 80051c6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80051d2:	4313      	orrs	r3, r2
 80051d4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80051dc:	4313      	orrs	r3, r2
 80051de:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80051e6:	4313      	orrs	r3, r2
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	897b      	ldrh	r3, [r7, #10]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80051f4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a0d      	ldr	r2, [pc, #52]	@ (8005230 <HAL_I2S_Init+0x278>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d101      	bne.n	8005204 <HAL_I2S_Init+0x24c>
 8005200:	4b0c      	ldr	r3, [pc, #48]	@ (8005234 <HAL_I2S_Init+0x27c>)
 8005202:	e001      	b.n	8005208 <HAL_I2S_Init+0x250>
 8005204:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005208:	897a      	ldrh	r2, [r7, #10]
 800520a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3720      	adds	r7, #32
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	08005509 	.word	0x08005509
 8005228:	cccccccd 	.word	0xcccccccd
 800522c:	08005691 	.word	0x08005691
 8005230:	40003800 	.word	0x40003800
 8005234:	40003400 	.word	0x40003400

08005238 <HAL_I2S_Transmit>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b086      	sub	sp, #24
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	603b      	str	r3, [r7, #0]
 8005244:	4613      	mov	r3, r2
 8005246:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d002      	beq.n	8005254 <HAL_I2S_Transmit+0x1c>
 800524e:	88fb      	ldrh	r3, [r7, #6]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d101      	bne.n	8005258 <HAL_I2S_Transmit+0x20>
  {
    return  HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e0d8      	b.n	800540a <HAL_I2S_Transmit+0x1d2>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800525e:	b2db      	uxtb	r3, r3
 8005260:	2b01      	cmp	r3, #1
 8005262:	d001      	beq.n	8005268 <HAL_I2S_Transmit+0x30>
  {
    return HAL_BUSY;
 8005264:	2302      	movs	r3, #2
 8005266:	e0d0      	b.n	800540a <HAL_I2S_Transmit+0x1d2>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2b01      	cmp	r3, #1
 8005272:	d101      	bne.n	8005278 <HAL_I2S_Transmit+0x40>
 8005274:	2302      	movs	r3, #2
 8005276:	e0c8      	b.n	800540a <HAL_I2S_Transmit+0x1d2>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2203      	movs	r2, #3
 8005284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2200      	movs	r2, #0
 800528c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	f003 0307 	and.w	r3, r3, #7
 800529e:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	2b03      	cmp	r3, #3
 80052a4:	d002      	beq.n	80052ac <HAL_I2S_Transmit+0x74>
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	2b05      	cmp	r3, #5
 80052aa:	d10a      	bne.n	80052c2 <HAL_I2S_Transmit+0x8a>
  {
    hi2s->TxXferSize = (Size << 1U);
 80052ac:	88fb      	ldrh	r3, [r7, #6]
 80052ae:	005b      	lsls	r3, r3, #1
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 80052b6:	88fb      	ldrh	r3, [r7, #6]
 80052b8:	005b      	lsls	r3, r3, #1
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80052c0:	e005      	b.n	80052ce <HAL_I2S_Transmit+0x96>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	88fa      	ldrh	r2, [r7, #6]
 80052c6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	88fa      	ldrh	r2, [r7, #6]
 80052cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  tmpreg_cfgr = hi2s->Instance->I2SCFGR;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	69db      	ldr	r3, [r3, #28]
 80052d4:	617b      	str	r3, [r7, #20]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	69db      	ldr	r3, [r3, #28]
 80052dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052e4:	d007      	beq.n	80052f6 <HAL_I2S_Transmit+0xbe>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	69da      	ldr	r2, [r3, #28]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80052f4:	61da      	str	r2, [r3, #28]
  }

  /* Wait until TXE flag is set */
  if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	2201      	movs	r2, #1
 80052fa:	2102      	movs	r1, #2
 80052fc:	68f8      	ldr	r0, [r7, #12]
 80052fe:	f000 f98d 	bl	800561c <I2S_WaitFlagStateUntilTimeout>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d04e      	beq.n	80053a6 <HAL_I2S_Transmit+0x16e>
  {
    /* Set the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800530c:	f043 0201 	orr.w	r2, r3, #1
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2s);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e070      	b.n	800540a <HAL_I2S_Transmit+0x1d2>
  }

  while (hi2s->TxXferCount > 0U)
  {
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800532c:	881a      	ldrh	r2, [r3, #0]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	60da      	str	r2, [r3, #12]
    hi2s->pTxBuffPtr++;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005338:	1c9a      	adds	r2, r3, #2
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2s->TxXferCount--;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005342:	b29b      	uxth	r3, r3
 8005344:	3b01      	subs	r3, #1
 8005346:	b29a      	uxth	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	2201      	movs	r2, #1
 8005350:	2102      	movs	r1, #2
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	f000 f962 	bl	800561c <I2S_WaitFlagStateUntilTimeout>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00f      	beq.n	800537e <HAL_I2S_Transmit+0x146>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005362:	f043 0201 	orr.w	r2, r3, #1
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2201      	movs	r2, #1
 800536e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      __HAL_UNLOCK(hi2s);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e045      	b.n	800540a <HAL_I2S_Transmit+0x1d2>
    }

    /* Check if an underrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f003 0308 	and.w	r3, r3, #8
 8005388:	2b08      	cmp	r3, #8
 800538a:	d10c      	bne.n	80053a6 <HAL_I2S_Transmit+0x16e>
    {
      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800538c:	2300      	movs	r3, #0
 800538e:	613b      	str	r3, [r7, #16]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	613b      	str	r3, [r7, #16]
 8005398:	693b      	ldr	r3, [r7, #16]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800539e:	f043 0204 	orr.w	r2, r3, #4
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	645a      	str	r2, [r3, #68]	@ 0x44
  while (hi2s->TxXferCount > 0U)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1bb      	bne.n	8005328 <HAL_I2S_Transmit+0xf0>
    }
  }

  /* Check if Slave mode is selected */
  if (((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX)
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d005      	beq.n	80053c6 <HAL_I2S_Transmit+0x18e>
      || ((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_RX))
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053c4:	d118      	bne.n	80053f8 <HAL_I2S_Transmit+0x1c0>
  {
    /* Wait until Busy flag is reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, Timeout) != HAL_OK)
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	2200      	movs	r2, #0
 80053ca:	2180      	movs	r1, #128	@ 0x80
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f000 f925 	bl	800561c <I2S_WaitFlagStateUntilTimeout>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00f      	beq.n	80053f8 <HAL_I2S_Transmit+0x1c0>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053dc:	f043 0201 	orr.w	r2, r3, #1
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      __HAL_UNLOCK(hi2s);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e008      	b.n	800540a <HAL_I2S_Transmit+0x1d2>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  __HAL_UNLOCK(hi2s);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3718      	adds	r7, #24
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005412:	b480      	push	{r7}
 8005414:	b083      	sub	sp, #12
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800541a:	bf00      	nop
 800541c:	370c      	adds	r7, #12
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr

08005426 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005426:	b480      	push	{r7}
 8005428:	b083      	sub	sp, #12
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800542e:	bf00      	nop
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr

0800543a <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800543a:	b480      	push	{r7}
 800543c:	b083      	sub	sp, #12
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005442:	bf00      	nop
 8005444:	370c      	adds	r7, #12
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr

0800544e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b082      	sub	sp, #8
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800545a:	881a      	ldrh	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005466:	1c9a      	adds	r2, r3, #2
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005470:	b29b      	uxth	r3, r3
 8005472:	3b01      	subs	r3, #1
 8005474:	b29a      	uxth	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800547e:	b29b      	uxth	r3, r3
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10e      	bne.n	80054a2 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005492:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f7ff ffb8 	bl	8005412 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80054a2:	bf00      	nop
 80054a4:	3708      	adds	r7, #8
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b082      	sub	sp, #8
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68da      	ldr	r2, [r3, #12]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054bc:	b292      	uxth	r2, r2
 80054be:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c4:	1c9a      	adds	r2, r3, #2
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	3b01      	subs	r3, #1
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80054dc:	b29b      	uxth	r3, r3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10e      	bne.n	8005500 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	685a      	ldr	r2, [r3, #4]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80054f0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f7ff ff93 	bl	8005426 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005500:	bf00      	nop
 8005502:	3708      	adds	r7, #8
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800551e:	b2db      	uxtb	r3, r3
 8005520:	2b04      	cmp	r3, #4
 8005522:	d13a      	bne.n	800559a <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b01      	cmp	r3, #1
 800552c:	d109      	bne.n	8005542 <I2S_IRQHandler+0x3a>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005538:	2b40      	cmp	r3, #64	@ 0x40
 800553a:	d102      	bne.n	8005542 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f7ff ffb4 	bl	80054aa <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005548:	2b40      	cmp	r3, #64	@ 0x40
 800554a:	d126      	bne.n	800559a <I2S_IRQHandler+0x92>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f003 0320 	and.w	r3, r3, #32
 8005556:	2b20      	cmp	r3, #32
 8005558:	d11f      	bne.n	800559a <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005568:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800556a:	2300      	movs	r3, #0
 800556c:	613b      	str	r3, [r7, #16]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	613b      	str	r3, [r7, #16]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	613b      	str	r3, [r7, #16]
 800557e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800558c:	f043 0202 	orr.w	r2, r3, #2
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f7ff ff50 	bl	800543a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b03      	cmp	r3, #3
 80055a4:	d136      	bne.n	8005614 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f003 0302 	and.w	r3, r3, #2
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d109      	bne.n	80055c4 <I2S_IRQHandler+0xbc>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055ba:	2b80      	cmp	r3, #128	@ 0x80
 80055bc:	d102      	bne.n	80055c4 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f7ff ff45 	bl	800544e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	f003 0308 	and.w	r3, r3, #8
 80055ca:	2b08      	cmp	r3, #8
 80055cc:	d122      	bne.n	8005614 <I2S_IRQHandler+0x10c>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f003 0320 	and.w	r3, r3, #32
 80055d8:	2b20      	cmp	r3, #32
 80055da:	d11b      	bne.n	8005614 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	685a      	ldr	r2, [r3, #4]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80055ea:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80055ec:	2300      	movs	r3, #0
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	60fb      	str	r3, [r7, #12]
 80055f8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005606:	f043 0204 	orr.w	r2, r3, #4
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f7ff ff13 	bl	800543a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005614:	bf00      	nop
 8005616:	3718      	adds	r7, #24
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b086      	sub	sp, #24
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	603b      	str	r3, [r7, #0]
 8005628:	4613      	mov	r3, r2
 800562a:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800562c:	f7fc fbe0 	bl	8001df0 <HAL_GetTick>
 8005630:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8005632:	e018      	b.n	8005666 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800563a:	d014      	beq.n	8005666 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800563c:	f7fc fbd8 	bl	8001df0 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	683a      	ldr	r2, [r7, #0]
 8005648:	429a      	cmp	r2, r3
 800564a:	d902      	bls.n	8005652 <I2S_WaitFlagStateUntilTimeout+0x36>
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d109      	bne.n	8005666 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e00f      	b.n	8005686 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	689a      	ldr	r2, [r3, #8]
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	4013      	ands	r3, r2
 8005670:	68ba      	ldr	r2, [r7, #8]
 8005672:	429a      	cmp	r2, r3
 8005674:	bf0c      	ite	eq
 8005676:	2301      	moveq	r3, #1
 8005678:	2300      	movne	r3, #0
 800567a:	b2db      	uxtb	r3, r3
 800567c:	461a      	mov	r2, r3
 800567e:	79fb      	ldrb	r3, [r7, #7]
 8005680:	429a      	cmp	r2, r3
 8005682:	d1d7      	bne.n	8005634 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3718      	adds	r7, #24
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
	...

08005690 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b088      	sub	sp, #32
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a92      	ldr	r2, [pc, #584]	@ (80058f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d101      	bne.n	80056ae <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80056aa:	4b92      	ldr	r3, [pc, #584]	@ (80058f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80056ac:	e001      	b.n	80056b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80056ae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a8b      	ldr	r2, [pc, #556]	@ (80058f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d101      	bne.n	80056cc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80056c8:	4b8a      	ldr	r3, [pc, #552]	@ (80058f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80056ca:	e001      	b.n	80056d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80056cc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056dc:	d004      	beq.n	80056e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f040 8099 	bne.w	800581a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	f003 0302 	and.w	r3, r3, #2
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d107      	bne.n	8005702 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d002      	beq.n	8005702 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 f925 	bl	800594c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	f003 0301 	and.w	r3, r3, #1
 8005708:	2b01      	cmp	r3, #1
 800570a:	d107      	bne.n	800571c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005712:	2b00      	cmp	r3, #0
 8005714:	d002      	beq.n	800571c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 f9c8 	bl	8005aac <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005722:	2b40      	cmp	r3, #64	@ 0x40
 8005724:	d13a      	bne.n	800579c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	f003 0320 	and.w	r3, r3, #32
 800572c:	2b00      	cmp	r3, #0
 800572e:	d035      	beq.n	800579c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a6e      	ldr	r2, [pc, #440]	@ (80058f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d101      	bne.n	800573e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800573a:	4b6e      	ldr	r3, [pc, #440]	@ (80058f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800573c:	e001      	b.n	8005742 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800573e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4969      	ldr	r1, [pc, #420]	@ (80058f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800574a:	428b      	cmp	r3, r1
 800574c:	d101      	bne.n	8005752 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800574e:	4b69      	ldr	r3, [pc, #420]	@ (80058f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005750:	e001      	b.n	8005756 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005752:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005756:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800575a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800576a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800576c:	2300      	movs	r3, #0
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	60fb      	str	r3, [r7, #12]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	60fb      	str	r3, [r7, #12]
 8005780:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800578e:	f043 0202 	orr.w	r2, r3, #2
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f7ff fe4f 	bl	800543a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	f003 0308 	and.w	r3, r3, #8
 80057a2:	2b08      	cmp	r3, #8
 80057a4:	f040 80c3 	bne.w	800592e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	f003 0320 	and.w	r3, r3, #32
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f000 80bd 	beq.w	800592e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	685a      	ldr	r2, [r3, #4]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80057c2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a49      	ldr	r2, [pc, #292]	@ (80058f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d101      	bne.n	80057d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80057ce:	4b49      	ldr	r3, [pc, #292]	@ (80058f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80057d0:	e001      	b.n	80057d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80057d2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4944      	ldr	r1, [pc, #272]	@ (80058f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80057de:	428b      	cmp	r3, r1
 80057e0:	d101      	bne.n	80057e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80057e2:	4b44      	ldr	r3, [pc, #272]	@ (80058f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80057e4:	e001      	b.n	80057ea <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80057e6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80057ea:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80057ee:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80057f0:	2300      	movs	r3, #0
 80057f2:	60bb      	str	r3, [r7, #8]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	60bb      	str	r3, [r7, #8]
 80057fc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800580a:	f043 0204 	orr.w	r2, r3, #4
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f7ff fe11 	bl	800543a <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005818:	e089      	b.n	800592e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	f003 0302 	and.w	r3, r3, #2
 8005820:	2b02      	cmp	r3, #2
 8005822:	d107      	bne.n	8005834 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800582a:	2b00      	cmp	r3, #0
 800582c:	d002      	beq.n	8005834 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f8be 	bl	80059b0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	f003 0301 	and.w	r3, r3, #1
 800583a:	2b01      	cmp	r3, #1
 800583c:	d107      	bne.n	800584e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005844:	2b00      	cmp	r3, #0
 8005846:	d002      	beq.n	800584e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 f8fd 	bl	8005a48 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005854:	2b40      	cmp	r3, #64	@ 0x40
 8005856:	d12f      	bne.n	80058b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	f003 0320 	and.w	r3, r3, #32
 800585e:	2b00      	cmp	r3, #0
 8005860:	d02a      	beq.n	80058b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005870:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a1e      	ldr	r2, [pc, #120]	@ (80058f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d101      	bne.n	8005880 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800587c:	4b1d      	ldr	r3, [pc, #116]	@ (80058f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800587e:	e001      	b.n	8005884 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005880:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005884:	685a      	ldr	r2, [r3, #4]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4919      	ldr	r1, [pc, #100]	@ (80058f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800588c:	428b      	cmp	r3, r1
 800588e:	d101      	bne.n	8005894 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005890:	4b18      	ldr	r3, [pc, #96]	@ (80058f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005892:	e001      	b.n	8005898 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005894:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005898:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800589c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058aa:	f043 0202 	orr.w	r2, r3, #2
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f7ff fdc1 	bl	800543a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	f003 0308 	and.w	r3, r3, #8
 80058be:	2b08      	cmp	r3, #8
 80058c0:	d136      	bne.n	8005930 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	f003 0320 	and.w	r3, r3, #32
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d031      	beq.n	8005930 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a07      	ldr	r2, [pc, #28]	@ (80058f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d101      	bne.n	80058da <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80058d6:	4b07      	ldr	r3, [pc, #28]	@ (80058f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80058d8:	e001      	b.n	80058de <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80058da:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058de:	685a      	ldr	r2, [r3, #4]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4902      	ldr	r1, [pc, #8]	@ (80058f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80058e6:	428b      	cmp	r3, r1
 80058e8:	d106      	bne.n	80058f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80058ea:	4b02      	ldr	r3, [pc, #8]	@ (80058f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80058ec:	e006      	b.n	80058fc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80058ee:	bf00      	nop
 80058f0:	40003800 	.word	0x40003800
 80058f4:	40003400 	.word	0x40003400
 80058f8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058fc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005900:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	685a      	ldr	r2, [r3, #4]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005910:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800591e:	f043 0204 	orr.w	r2, r3, #4
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f7ff fd87 	bl	800543a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800592c:	e000      	b.n	8005930 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800592e:	bf00      	nop
}
 8005930:	bf00      	nop
 8005932:	3720      	adds	r7, #32
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005940:	bf00      	nop
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005958:	1c99      	adds	r1, r3, #2
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	6251      	str	r1, [r2, #36]	@ 0x24
 800595e:	881a      	ldrh	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800596a:	b29b      	uxth	r3, r3
 800596c:	3b01      	subs	r3, #1
 800596e:	b29a      	uxth	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005978:	b29b      	uxth	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d113      	bne.n	80059a6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	685a      	ldr	r2, [r3, #4]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800598c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005992:	b29b      	uxth	r3, r3
 8005994:	2b00      	cmp	r3, #0
 8005996:	d106      	bne.n	80059a6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f7ff ffc9 	bl	8005938 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80059a6:	bf00      	nop
 80059a8:	3708      	adds	r7, #8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
	...

080059b0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059bc:	1c99      	adds	r1, r3, #2
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	6251      	str	r1, [r2, #36]	@ 0x24
 80059c2:	8819      	ldrh	r1, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a1d      	ldr	r2, [pc, #116]	@ (8005a40 <I2SEx_TxISR_I2SExt+0x90>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d101      	bne.n	80059d2 <I2SEx_TxISR_I2SExt+0x22>
 80059ce:	4b1d      	ldr	r3, [pc, #116]	@ (8005a44 <I2SEx_TxISR_I2SExt+0x94>)
 80059d0:	e001      	b.n	80059d6 <I2SEx_TxISR_I2SExt+0x26>
 80059d2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80059d6:	460a      	mov	r2, r1
 80059d8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059de:	b29b      	uxth	r3, r3
 80059e0:	3b01      	subs	r3, #1
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d121      	bne.n	8005a36 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a12      	ldr	r2, [pc, #72]	@ (8005a40 <I2SEx_TxISR_I2SExt+0x90>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d101      	bne.n	8005a00 <I2SEx_TxISR_I2SExt+0x50>
 80059fc:	4b11      	ldr	r3, [pc, #68]	@ (8005a44 <I2SEx_TxISR_I2SExt+0x94>)
 80059fe:	e001      	b.n	8005a04 <I2SEx_TxISR_I2SExt+0x54>
 8005a00:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a04:	685a      	ldr	r2, [r3, #4]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	490d      	ldr	r1, [pc, #52]	@ (8005a40 <I2SEx_TxISR_I2SExt+0x90>)
 8005a0c:	428b      	cmp	r3, r1
 8005a0e:	d101      	bne.n	8005a14 <I2SEx_TxISR_I2SExt+0x64>
 8005a10:	4b0c      	ldr	r3, [pc, #48]	@ (8005a44 <I2SEx_TxISR_I2SExt+0x94>)
 8005a12:	e001      	b.n	8005a18 <I2SEx_TxISR_I2SExt+0x68>
 8005a14:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a18:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005a1c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d106      	bne.n	8005a36 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f7ff ff81 	bl	8005938 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005a36:	bf00      	nop
 8005a38:	3708      	adds	r7, #8
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	40003800 	.word	0x40003800
 8005a44:	40003400 	.word	0x40003400

08005a48 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68d8      	ldr	r0, [r3, #12]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a5a:	1c99      	adds	r1, r3, #2
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005a60:	b282      	uxth	r2, r0
 8005a62:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d113      	bne.n	8005aa4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	685a      	ldr	r2, [r3, #4]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005a8a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d106      	bne.n	8005aa4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7ff ff4a 	bl	8005938 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005aa4:	bf00      	nop
 8005aa6:	3708      	adds	r7, #8
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a20      	ldr	r2, [pc, #128]	@ (8005b3c <I2SEx_RxISR_I2SExt+0x90>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d101      	bne.n	8005ac2 <I2SEx_RxISR_I2SExt+0x16>
 8005abe:	4b20      	ldr	r3, [pc, #128]	@ (8005b40 <I2SEx_RxISR_I2SExt+0x94>)
 8005ac0:	e001      	b.n	8005ac6 <I2SEx_RxISR_I2SExt+0x1a>
 8005ac2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ac6:	68d8      	ldr	r0, [r3, #12]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005acc:	1c99      	adds	r1, r3, #2
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005ad2:	b282      	uxth	r2, r0
 8005ad4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	3b01      	subs	r3, #1
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d121      	bne.n	8005b32 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a12      	ldr	r2, [pc, #72]	@ (8005b3c <I2SEx_RxISR_I2SExt+0x90>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d101      	bne.n	8005afc <I2SEx_RxISR_I2SExt+0x50>
 8005af8:	4b11      	ldr	r3, [pc, #68]	@ (8005b40 <I2SEx_RxISR_I2SExt+0x94>)
 8005afa:	e001      	b.n	8005b00 <I2SEx_RxISR_I2SExt+0x54>
 8005afc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b00:	685a      	ldr	r2, [r3, #4]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	490d      	ldr	r1, [pc, #52]	@ (8005b3c <I2SEx_RxISR_I2SExt+0x90>)
 8005b08:	428b      	cmp	r3, r1
 8005b0a:	d101      	bne.n	8005b10 <I2SEx_RxISR_I2SExt+0x64>
 8005b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8005b40 <I2SEx_RxISR_I2SExt+0x94>)
 8005b0e:	e001      	b.n	8005b14 <I2SEx_RxISR_I2SExt+0x68>
 8005b10:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b14:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005b18:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d106      	bne.n	8005b32 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f7ff ff03 	bl	8005938 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005b32:	bf00      	nop
 8005b34:	3708      	adds	r7, #8
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	40003800 	.word	0x40003800
 8005b40:	40003400 	.word	0x40003400

08005b44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b086      	sub	sp, #24
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d101      	bne.n	8005b56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e267      	b.n	8006026 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0301 	and.w	r3, r3, #1
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d075      	beq.n	8005c4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005b62:	4b88      	ldr	r3, [pc, #544]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	f003 030c 	and.w	r3, r3, #12
 8005b6a:	2b04      	cmp	r3, #4
 8005b6c:	d00c      	beq.n	8005b88 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b6e:	4b85      	ldr	r3, [pc, #532]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005b76:	2b08      	cmp	r3, #8
 8005b78:	d112      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b7a:	4b82      	ldr	r3, [pc, #520]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b86:	d10b      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b88:	4b7e      	ldr	r3, [pc, #504]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d05b      	beq.n	8005c4c <HAL_RCC_OscConfig+0x108>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d157      	bne.n	8005c4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e242      	b.n	8006026 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ba8:	d106      	bne.n	8005bb8 <HAL_RCC_OscConfig+0x74>
 8005baa:	4b76      	ldr	r3, [pc, #472]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a75      	ldr	r2, [pc, #468]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005bb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bb4:	6013      	str	r3, [r2, #0]
 8005bb6:	e01d      	b.n	8005bf4 <HAL_RCC_OscConfig+0xb0>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005bc0:	d10c      	bne.n	8005bdc <HAL_RCC_OscConfig+0x98>
 8005bc2:	4b70      	ldr	r3, [pc, #448]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a6f      	ldr	r2, [pc, #444]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005bc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005bcc:	6013      	str	r3, [r2, #0]
 8005bce:	4b6d      	ldr	r3, [pc, #436]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a6c      	ldr	r2, [pc, #432]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005bd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bd8:	6013      	str	r3, [r2, #0]
 8005bda:	e00b      	b.n	8005bf4 <HAL_RCC_OscConfig+0xb0>
 8005bdc:	4b69      	ldr	r3, [pc, #420]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a68      	ldr	r2, [pc, #416]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005be2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005be6:	6013      	str	r3, [r2, #0]
 8005be8:	4b66      	ldr	r3, [pc, #408]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a65      	ldr	r2, [pc, #404]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005bee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005bf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d013      	beq.n	8005c24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bfc:	f7fc f8f8 	bl	8001df0 <HAL_GetTick>
 8005c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c02:	e008      	b.n	8005c16 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c04:	f7fc f8f4 	bl	8001df0 <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	2b64      	cmp	r3, #100	@ 0x64
 8005c10:	d901      	bls.n	8005c16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e207      	b.n	8006026 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c16:	4b5b      	ldr	r3, [pc, #364]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d0f0      	beq.n	8005c04 <HAL_RCC_OscConfig+0xc0>
 8005c22:	e014      	b.n	8005c4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c24:	f7fc f8e4 	bl	8001df0 <HAL_GetTick>
 8005c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c2a:	e008      	b.n	8005c3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c2c:	f7fc f8e0 	bl	8001df0 <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	2b64      	cmp	r3, #100	@ 0x64
 8005c38:	d901      	bls.n	8005c3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e1f3      	b.n	8006026 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c3e:	4b51      	ldr	r3, [pc, #324]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1f0      	bne.n	8005c2c <HAL_RCC_OscConfig+0xe8>
 8005c4a:	e000      	b.n	8005c4e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0302 	and.w	r3, r3, #2
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d063      	beq.n	8005d22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005c5a:	4b4a      	ldr	r3, [pc, #296]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f003 030c 	and.w	r3, r3, #12
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00b      	beq.n	8005c7e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c66:	4b47      	ldr	r3, [pc, #284]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005c6e:	2b08      	cmp	r3, #8
 8005c70:	d11c      	bne.n	8005cac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c72:	4b44      	ldr	r3, [pc, #272]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d116      	bne.n	8005cac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c7e:	4b41      	ldr	r3, [pc, #260]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0302 	and.w	r3, r3, #2
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d005      	beq.n	8005c96 <HAL_RCC_OscConfig+0x152>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d001      	beq.n	8005c96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e1c7      	b.n	8006026 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c96:	4b3b      	ldr	r3, [pc, #236]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	00db      	lsls	r3, r3, #3
 8005ca4:	4937      	ldr	r1, [pc, #220]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005caa:	e03a      	b.n	8005d22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d020      	beq.n	8005cf6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005cb4:	4b34      	ldr	r3, [pc, #208]	@ (8005d88 <HAL_RCC_OscConfig+0x244>)
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cba:	f7fc f899 	bl	8001df0 <HAL_GetTick>
 8005cbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cc0:	e008      	b.n	8005cd4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cc2:	f7fc f895 	bl	8001df0 <HAL_GetTick>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d901      	bls.n	8005cd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e1a8      	b.n	8006026 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cd4:	4b2b      	ldr	r3, [pc, #172]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0302 	and.w	r3, r3, #2
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d0f0      	beq.n	8005cc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ce0:	4b28      	ldr	r3, [pc, #160]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	00db      	lsls	r3, r3, #3
 8005cee:	4925      	ldr	r1, [pc, #148]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	600b      	str	r3, [r1, #0]
 8005cf4:	e015      	b.n	8005d22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cf6:	4b24      	ldr	r3, [pc, #144]	@ (8005d88 <HAL_RCC_OscConfig+0x244>)
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cfc:	f7fc f878 	bl	8001df0 <HAL_GetTick>
 8005d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d02:	e008      	b.n	8005d16 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d04:	f7fc f874 	bl	8001df0 <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d901      	bls.n	8005d16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e187      	b.n	8006026 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d16:	4b1b      	ldr	r3, [pc, #108]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0302 	and.w	r3, r3, #2
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1f0      	bne.n	8005d04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0308 	and.w	r3, r3, #8
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d036      	beq.n	8005d9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	695b      	ldr	r3, [r3, #20]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d016      	beq.n	8005d64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d36:	4b15      	ldr	r3, [pc, #84]	@ (8005d8c <HAL_RCC_OscConfig+0x248>)
 8005d38:	2201      	movs	r2, #1
 8005d3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d3c:	f7fc f858 	bl	8001df0 <HAL_GetTick>
 8005d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d42:	e008      	b.n	8005d56 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d44:	f7fc f854 	bl	8001df0 <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d901      	bls.n	8005d56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e167      	b.n	8006026 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d56:	4b0b      	ldr	r3, [pc, #44]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005d58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d5a:	f003 0302 	and.w	r3, r3, #2
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d0f0      	beq.n	8005d44 <HAL_RCC_OscConfig+0x200>
 8005d62:	e01b      	b.n	8005d9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d64:	4b09      	ldr	r3, [pc, #36]	@ (8005d8c <HAL_RCC_OscConfig+0x248>)
 8005d66:	2200      	movs	r2, #0
 8005d68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d6a:	f7fc f841 	bl	8001df0 <HAL_GetTick>
 8005d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d70:	e00e      	b.n	8005d90 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d72:	f7fc f83d 	bl	8001df0 <HAL_GetTick>
 8005d76:	4602      	mov	r2, r0
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d907      	bls.n	8005d90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e150      	b.n	8006026 <HAL_RCC_OscConfig+0x4e2>
 8005d84:	40023800 	.word	0x40023800
 8005d88:	42470000 	.word	0x42470000
 8005d8c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d90:	4b88      	ldr	r3, [pc, #544]	@ (8005fb4 <HAL_RCC_OscConfig+0x470>)
 8005d92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d94:	f003 0302 	and.w	r3, r3, #2
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d1ea      	bne.n	8005d72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 0304 	and.w	r3, r3, #4
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f000 8097 	beq.w	8005ed8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005daa:	2300      	movs	r3, #0
 8005dac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dae:	4b81      	ldr	r3, [pc, #516]	@ (8005fb4 <HAL_RCC_OscConfig+0x470>)
 8005db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d10f      	bne.n	8005dda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dba:	2300      	movs	r3, #0
 8005dbc:	60bb      	str	r3, [r7, #8]
 8005dbe:	4b7d      	ldr	r3, [pc, #500]	@ (8005fb4 <HAL_RCC_OscConfig+0x470>)
 8005dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc2:	4a7c      	ldr	r2, [pc, #496]	@ (8005fb4 <HAL_RCC_OscConfig+0x470>)
 8005dc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005dc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8005dca:	4b7a      	ldr	r3, [pc, #488]	@ (8005fb4 <HAL_RCC_OscConfig+0x470>)
 8005dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005dd2:	60bb      	str	r3, [r7, #8]
 8005dd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dda:	4b77      	ldr	r3, [pc, #476]	@ (8005fb8 <HAL_RCC_OscConfig+0x474>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d118      	bne.n	8005e18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005de6:	4b74      	ldr	r3, [pc, #464]	@ (8005fb8 <HAL_RCC_OscConfig+0x474>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a73      	ldr	r2, [pc, #460]	@ (8005fb8 <HAL_RCC_OscConfig+0x474>)
 8005dec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005df0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005df2:	f7fb fffd 	bl	8001df0 <HAL_GetTick>
 8005df6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005df8:	e008      	b.n	8005e0c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dfa:	f7fb fff9 	bl	8001df0 <HAL_GetTick>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	d901      	bls.n	8005e0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005e08:	2303      	movs	r3, #3
 8005e0a:	e10c      	b.n	8006026 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e0c:	4b6a      	ldr	r3, [pc, #424]	@ (8005fb8 <HAL_RCC_OscConfig+0x474>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d0f0      	beq.n	8005dfa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d106      	bne.n	8005e2e <HAL_RCC_OscConfig+0x2ea>
 8005e20:	4b64      	ldr	r3, [pc, #400]	@ (8005fb4 <HAL_RCC_OscConfig+0x470>)
 8005e22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e24:	4a63      	ldr	r2, [pc, #396]	@ (8005fb4 <HAL_RCC_OscConfig+0x470>)
 8005e26:	f043 0301 	orr.w	r3, r3, #1
 8005e2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e2c:	e01c      	b.n	8005e68 <HAL_RCC_OscConfig+0x324>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	2b05      	cmp	r3, #5
 8005e34:	d10c      	bne.n	8005e50 <HAL_RCC_OscConfig+0x30c>
 8005e36:	4b5f      	ldr	r3, [pc, #380]	@ (8005fb4 <HAL_RCC_OscConfig+0x470>)
 8005e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e3a:	4a5e      	ldr	r2, [pc, #376]	@ (8005fb4 <HAL_RCC_OscConfig+0x470>)
 8005e3c:	f043 0304 	orr.w	r3, r3, #4
 8005e40:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e42:	4b5c      	ldr	r3, [pc, #368]	@ (8005fb4 <HAL_RCC_OscConfig+0x470>)
 8005e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e46:	4a5b      	ldr	r2, [pc, #364]	@ (8005fb4 <HAL_RCC_OscConfig+0x470>)
 8005e48:	f043 0301 	orr.w	r3, r3, #1
 8005e4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e4e:	e00b      	b.n	8005e68 <HAL_RCC_OscConfig+0x324>
 8005e50:	4b58      	ldr	r3, [pc, #352]	@ (8005fb4 <HAL_RCC_OscConfig+0x470>)
 8005e52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e54:	4a57      	ldr	r2, [pc, #348]	@ (8005fb4 <HAL_RCC_OscConfig+0x470>)
 8005e56:	f023 0301 	bic.w	r3, r3, #1
 8005e5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e5c:	4b55      	ldr	r3, [pc, #340]	@ (8005fb4 <HAL_RCC_OscConfig+0x470>)
 8005e5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e60:	4a54      	ldr	r2, [pc, #336]	@ (8005fb4 <HAL_RCC_OscConfig+0x470>)
 8005e62:	f023 0304 	bic.w	r3, r3, #4
 8005e66:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d015      	beq.n	8005e9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e70:	f7fb ffbe 	bl	8001df0 <HAL_GetTick>
 8005e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e76:	e00a      	b.n	8005e8e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e78:	f7fb ffba 	bl	8001df0 <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d901      	bls.n	8005e8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e0cb      	b.n	8006026 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e8e:	4b49      	ldr	r3, [pc, #292]	@ (8005fb4 <HAL_RCC_OscConfig+0x470>)
 8005e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e92:	f003 0302 	and.w	r3, r3, #2
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d0ee      	beq.n	8005e78 <HAL_RCC_OscConfig+0x334>
 8005e9a:	e014      	b.n	8005ec6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e9c:	f7fb ffa8 	bl	8001df0 <HAL_GetTick>
 8005ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ea2:	e00a      	b.n	8005eba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ea4:	f7fb ffa4 	bl	8001df0 <HAL_GetTick>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d901      	bls.n	8005eba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e0b5      	b.n	8006026 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005eba:	4b3e      	ldr	r3, [pc, #248]	@ (8005fb4 <HAL_RCC_OscConfig+0x470>)
 8005ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ebe:	f003 0302 	and.w	r3, r3, #2
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d1ee      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005ec6:	7dfb      	ldrb	r3, [r7, #23]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d105      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ecc:	4b39      	ldr	r3, [pc, #228]	@ (8005fb4 <HAL_RCC_OscConfig+0x470>)
 8005ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed0:	4a38      	ldr	r2, [pc, #224]	@ (8005fb4 <HAL_RCC_OscConfig+0x470>)
 8005ed2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ed6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f000 80a1 	beq.w	8006024 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ee2:	4b34      	ldr	r3, [pc, #208]	@ (8005fb4 <HAL_RCC_OscConfig+0x470>)
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	f003 030c 	and.w	r3, r3, #12
 8005eea:	2b08      	cmp	r3, #8
 8005eec:	d05c      	beq.n	8005fa8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d141      	bne.n	8005f7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ef6:	4b31      	ldr	r3, [pc, #196]	@ (8005fbc <HAL_RCC_OscConfig+0x478>)
 8005ef8:	2200      	movs	r2, #0
 8005efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005efc:	f7fb ff78 	bl	8001df0 <HAL_GetTick>
 8005f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f02:	e008      	b.n	8005f16 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f04:	f7fb ff74 	bl	8001df0 <HAL_GetTick>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d901      	bls.n	8005f16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e087      	b.n	8006026 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f16:	4b27      	ldr	r3, [pc, #156]	@ (8005fb4 <HAL_RCC_OscConfig+0x470>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1f0      	bne.n	8005f04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	69da      	ldr	r2, [r3, #28]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a1b      	ldr	r3, [r3, #32]
 8005f2a:	431a      	orrs	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f30:	019b      	lsls	r3, r3, #6
 8005f32:	431a      	orrs	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f38:	085b      	lsrs	r3, r3, #1
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	041b      	lsls	r3, r3, #16
 8005f3e:	431a      	orrs	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f44:	061b      	lsls	r3, r3, #24
 8005f46:	491b      	ldr	r1, [pc, #108]	@ (8005fb4 <HAL_RCC_OscConfig+0x470>)
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8005fbc <HAL_RCC_OscConfig+0x478>)
 8005f4e:	2201      	movs	r2, #1
 8005f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f52:	f7fb ff4d 	bl	8001df0 <HAL_GetTick>
 8005f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f58:	e008      	b.n	8005f6c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f5a:	f7fb ff49 	bl	8001df0 <HAL_GetTick>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d901      	bls.n	8005f6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	e05c      	b.n	8006026 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f6c:	4b11      	ldr	r3, [pc, #68]	@ (8005fb4 <HAL_RCC_OscConfig+0x470>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d0f0      	beq.n	8005f5a <HAL_RCC_OscConfig+0x416>
 8005f78:	e054      	b.n	8006024 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f7a:	4b10      	ldr	r3, [pc, #64]	@ (8005fbc <HAL_RCC_OscConfig+0x478>)
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f80:	f7fb ff36 	bl	8001df0 <HAL_GetTick>
 8005f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f86:	e008      	b.n	8005f9a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f88:	f7fb ff32 	bl	8001df0 <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	2b02      	cmp	r3, #2
 8005f94:	d901      	bls.n	8005f9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e045      	b.n	8006026 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f9a:	4b06      	ldr	r3, [pc, #24]	@ (8005fb4 <HAL_RCC_OscConfig+0x470>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1f0      	bne.n	8005f88 <HAL_RCC_OscConfig+0x444>
 8005fa6:	e03d      	b.n	8006024 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	699b      	ldr	r3, [r3, #24]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d107      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e038      	b.n	8006026 <HAL_RCC_OscConfig+0x4e2>
 8005fb4:	40023800 	.word	0x40023800
 8005fb8:	40007000 	.word	0x40007000
 8005fbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8006030 <HAL_RCC_OscConfig+0x4ec>)
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d028      	beq.n	8006020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d121      	bne.n	8006020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d11a      	bne.n	8006020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005ff6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d111      	bne.n	8006020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006006:	085b      	lsrs	r3, r3, #1
 8006008:	3b01      	subs	r3, #1
 800600a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800600c:	429a      	cmp	r2, r3
 800600e:	d107      	bne.n	8006020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800601a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800601c:	429a      	cmp	r2, r3
 800601e:	d001      	beq.n	8006024 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e000      	b.n	8006026 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3718      	adds	r7, #24
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	40023800 	.word	0x40023800

08006034 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d101      	bne.n	8006048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e0cc      	b.n	80061e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006048:	4b68      	ldr	r3, [pc, #416]	@ (80061ec <HAL_RCC_ClockConfig+0x1b8>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0307 	and.w	r3, r3, #7
 8006050:	683a      	ldr	r2, [r7, #0]
 8006052:	429a      	cmp	r2, r3
 8006054:	d90c      	bls.n	8006070 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006056:	4b65      	ldr	r3, [pc, #404]	@ (80061ec <HAL_RCC_ClockConfig+0x1b8>)
 8006058:	683a      	ldr	r2, [r7, #0]
 800605a:	b2d2      	uxtb	r2, r2
 800605c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800605e:	4b63      	ldr	r3, [pc, #396]	@ (80061ec <HAL_RCC_ClockConfig+0x1b8>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0307 	and.w	r3, r3, #7
 8006066:	683a      	ldr	r2, [r7, #0]
 8006068:	429a      	cmp	r2, r3
 800606a:	d001      	beq.n	8006070 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e0b8      	b.n	80061e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0302 	and.w	r3, r3, #2
 8006078:	2b00      	cmp	r3, #0
 800607a:	d020      	beq.n	80060be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0304 	and.w	r3, r3, #4
 8006084:	2b00      	cmp	r3, #0
 8006086:	d005      	beq.n	8006094 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006088:	4b59      	ldr	r3, [pc, #356]	@ (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	4a58      	ldr	r2, [pc, #352]	@ (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 800608e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006092:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0308 	and.w	r3, r3, #8
 800609c:	2b00      	cmp	r3, #0
 800609e:	d005      	beq.n	80060ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80060a0:	4b53      	ldr	r3, [pc, #332]	@ (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	4a52      	ldr	r2, [pc, #328]	@ (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 80060a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80060aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060ac:	4b50      	ldr	r3, [pc, #320]	@ (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	494d      	ldr	r1, [pc, #308]	@ (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 80060ba:	4313      	orrs	r3, r2
 80060bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0301 	and.w	r3, r3, #1
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d044      	beq.n	8006154 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d107      	bne.n	80060e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060d2:	4b47      	ldr	r3, [pc, #284]	@ (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d119      	bne.n	8006112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e07f      	b.n	80061e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d003      	beq.n	80060f2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060ee:	2b03      	cmp	r3, #3
 80060f0:	d107      	bne.n	8006102 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060f2:	4b3f      	ldr	r3, [pc, #252]	@ (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d109      	bne.n	8006112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e06f      	b.n	80061e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006102:	4b3b      	ldr	r3, [pc, #236]	@ (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 0302 	and.w	r3, r3, #2
 800610a:	2b00      	cmp	r3, #0
 800610c:	d101      	bne.n	8006112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e067      	b.n	80061e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006112:	4b37      	ldr	r3, [pc, #220]	@ (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	f023 0203 	bic.w	r2, r3, #3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	4934      	ldr	r1, [pc, #208]	@ (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006120:	4313      	orrs	r3, r2
 8006122:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006124:	f7fb fe64 	bl	8001df0 <HAL_GetTick>
 8006128:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800612a:	e00a      	b.n	8006142 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800612c:	f7fb fe60 	bl	8001df0 <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	f241 3288 	movw	r2, #5000	@ 0x1388
 800613a:	4293      	cmp	r3, r2
 800613c:	d901      	bls.n	8006142 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e04f      	b.n	80061e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006142:	4b2b      	ldr	r3, [pc, #172]	@ (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	f003 020c 	and.w	r2, r3, #12
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	429a      	cmp	r2, r3
 8006152:	d1eb      	bne.n	800612c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006154:	4b25      	ldr	r3, [pc, #148]	@ (80061ec <HAL_RCC_ClockConfig+0x1b8>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 0307 	and.w	r3, r3, #7
 800615c:	683a      	ldr	r2, [r7, #0]
 800615e:	429a      	cmp	r2, r3
 8006160:	d20c      	bcs.n	800617c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006162:	4b22      	ldr	r3, [pc, #136]	@ (80061ec <HAL_RCC_ClockConfig+0x1b8>)
 8006164:	683a      	ldr	r2, [r7, #0]
 8006166:	b2d2      	uxtb	r2, r2
 8006168:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800616a:	4b20      	ldr	r3, [pc, #128]	@ (80061ec <HAL_RCC_ClockConfig+0x1b8>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0307 	and.w	r3, r3, #7
 8006172:	683a      	ldr	r2, [r7, #0]
 8006174:	429a      	cmp	r2, r3
 8006176:	d001      	beq.n	800617c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e032      	b.n	80061e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0304 	and.w	r3, r3, #4
 8006184:	2b00      	cmp	r3, #0
 8006186:	d008      	beq.n	800619a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006188:	4b19      	ldr	r3, [pc, #100]	@ (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	4916      	ldr	r1, [pc, #88]	@ (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006196:	4313      	orrs	r3, r2
 8006198:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 0308 	and.w	r3, r3, #8
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d009      	beq.n	80061ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061a6:	4b12      	ldr	r3, [pc, #72]	@ (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	00db      	lsls	r3, r3, #3
 80061b4:	490e      	ldr	r1, [pc, #56]	@ (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80061ba:	f000 f821 	bl	8006200 <HAL_RCC_GetSysClockFreq>
 80061be:	4602      	mov	r2, r0
 80061c0:	4b0b      	ldr	r3, [pc, #44]	@ (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	091b      	lsrs	r3, r3, #4
 80061c6:	f003 030f 	and.w	r3, r3, #15
 80061ca:	490a      	ldr	r1, [pc, #40]	@ (80061f4 <HAL_RCC_ClockConfig+0x1c0>)
 80061cc:	5ccb      	ldrb	r3, [r1, r3]
 80061ce:	fa22 f303 	lsr.w	r3, r2, r3
 80061d2:	4a09      	ldr	r2, [pc, #36]	@ (80061f8 <HAL_RCC_ClockConfig+0x1c4>)
 80061d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80061d6:	4b09      	ldr	r3, [pc, #36]	@ (80061fc <HAL_RCC_ClockConfig+0x1c8>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4618      	mov	r0, r3
 80061dc:	f7fb fdc4 	bl	8001d68 <HAL_InitTick>

  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	40023c00 	.word	0x40023c00
 80061f0:	40023800 	.word	0x40023800
 80061f4:	0800cb04 	.word	0x0800cb04
 80061f8:	20000000 	.word	0x20000000
 80061fc:	20000004 	.word	0x20000004

08006200 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006204:	b094      	sub	sp, #80	@ 0x50
 8006206:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006208:	2300      	movs	r3, #0
 800620a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800620c:	2300      	movs	r3, #0
 800620e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006210:	2300      	movs	r3, #0
 8006212:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006214:	2300      	movs	r3, #0
 8006216:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006218:	4b79      	ldr	r3, [pc, #484]	@ (8006400 <HAL_RCC_GetSysClockFreq+0x200>)
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	f003 030c 	and.w	r3, r3, #12
 8006220:	2b08      	cmp	r3, #8
 8006222:	d00d      	beq.n	8006240 <HAL_RCC_GetSysClockFreq+0x40>
 8006224:	2b08      	cmp	r3, #8
 8006226:	f200 80e1 	bhi.w	80063ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800622a:	2b00      	cmp	r3, #0
 800622c:	d002      	beq.n	8006234 <HAL_RCC_GetSysClockFreq+0x34>
 800622e:	2b04      	cmp	r3, #4
 8006230:	d003      	beq.n	800623a <HAL_RCC_GetSysClockFreq+0x3a>
 8006232:	e0db      	b.n	80063ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006234:	4b73      	ldr	r3, [pc, #460]	@ (8006404 <HAL_RCC_GetSysClockFreq+0x204>)
 8006236:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006238:	e0db      	b.n	80063f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800623a:	4b73      	ldr	r3, [pc, #460]	@ (8006408 <HAL_RCC_GetSysClockFreq+0x208>)
 800623c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800623e:	e0d8      	b.n	80063f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006240:	4b6f      	ldr	r3, [pc, #444]	@ (8006400 <HAL_RCC_GetSysClockFreq+0x200>)
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006248:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800624a:	4b6d      	ldr	r3, [pc, #436]	@ (8006400 <HAL_RCC_GetSysClockFreq+0x200>)
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d063      	beq.n	800631e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006256:	4b6a      	ldr	r3, [pc, #424]	@ (8006400 <HAL_RCC_GetSysClockFreq+0x200>)
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	099b      	lsrs	r3, r3, #6
 800625c:	2200      	movs	r2, #0
 800625e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006260:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006264:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006268:	633b      	str	r3, [r7, #48]	@ 0x30
 800626a:	2300      	movs	r3, #0
 800626c:	637b      	str	r3, [r7, #52]	@ 0x34
 800626e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006272:	4622      	mov	r2, r4
 8006274:	462b      	mov	r3, r5
 8006276:	f04f 0000 	mov.w	r0, #0
 800627a:	f04f 0100 	mov.w	r1, #0
 800627e:	0159      	lsls	r1, r3, #5
 8006280:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006284:	0150      	lsls	r0, r2, #5
 8006286:	4602      	mov	r2, r0
 8006288:	460b      	mov	r3, r1
 800628a:	4621      	mov	r1, r4
 800628c:	1a51      	subs	r1, r2, r1
 800628e:	6139      	str	r1, [r7, #16]
 8006290:	4629      	mov	r1, r5
 8006292:	eb63 0301 	sbc.w	r3, r3, r1
 8006296:	617b      	str	r3, [r7, #20]
 8006298:	f04f 0200 	mov.w	r2, #0
 800629c:	f04f 0300 	mov.w	r3, #0
 80062a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80062a4:	4659      	mov	r1, fp
 80062a6:	018b      	lsls	r3, r1, #6
 80062a8:	4651      	mov	r1, sl
 80062aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80062ae:	4651      	mov	r1, sl
 80062b0:	018a      	lsls	r2, r1, #6
 80062b2:	4651      	mov	r1, sl
 80062b4:	ebb2 0801 	subs.w	r8, r2, r1
 80062b8:	4659      	mov	r1, fp
 80062ba:	eb63 0901 	sbc.w	r9, r3, r1
 80062be:	f04f 0200 	mov.w	r2, #0
 80062c2:	f04f 0300 	mov.w	r3, #0
 80062c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80062ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80062ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80062d2:	4690      	mov	r8, r2
 80062d4:	4699      	mov	r9, r3
 80062d6:	4623      	mov	r3, r4
 80062d8:	eb18 0303 	adds.w	r3, r8, r3
 80062dc:	60bb      	str	r3, [r7, #8]
 80062de:	462b      	mov	r3, r5
 80062e0:	eb49 0303 	adc.w	r3, r9, r3
 80062e4:	60fb      	str	r3, [r7, #12]
 80062e6:	f04f 0200 	mov.w	r2, #0
 80062ea:	f04f 0300 	mov.w	r3, #0
 80062ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80062f2:	4629      	mov	r1, r5
 80062f4:	024b      	lsls	r3, r1, #9
 80062f6:	4621      	mov	r1, r4
 80062f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80062fc:	4621      	mov	r1, r4
 80062fe:	024a      	lsls	r2, r1, #9
 8006300:	4610      	mov	r0, r2
 8006302:	4619      	mov	r1, r3
 8006304:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006306:	2200      	movs	r2, #0
 8006308:	62bb      	str	r3, [r7, #40]	@ 0x28
 800630a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800630c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006310:	f7fa fc7c 	bl	8000c0c <__aeabi_uldivmod>
 8006314:	4602      	mov	r2, r0
 8006316:	460b      	mov	r3, r1
 8006318:	4613      	mov	r3, r2
 800631a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800631c:	e058      	b.n	80063d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800631e:	4b38      	ldr	r3, [pc, #224]	@ (8006400 <HAL_RCC_GetSysClockFreq+0x200>)
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	099b      	lsrs	r3, r3, #6
 8006324:	2200      	movs	r2, #0
 8006326:	4618      	mov	r0, r3
 8006328:	4611      	mov	r1, r2
 800632a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800632e:	623b      	str	r3, [r7, #32]
 8006330:	2300      	movs	r3, #0
 8006332:	627b      	str	r3, [r7, #36]	@ 0x24
 8006334:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006338:	4642      	mov	r2, r8
 800633a:	464b      	mov	r3, r9
 800633c:	f04f 0000 	mov.w	r0, #0
 8006340:	f04f 0100 	mov.w	r1, #0
 8006344:	0159      	lsls	r1, r3, #5
 8006346:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800634a:	0150      	lsls	r0, r2, #5
 800634c:	4602      	mov	r2, r0
 800634e:	460b      	mov	r3, r1
 8006350:	4641      	mov	r1, r8
 8006352:	ebb2 0a01 	subs.w	sl, r2, r1
 8006356:	4649      	mov	r1, r9
 8006358:	eb63 0b01 	sbc.w	fp, r3, r1
 800635c:	f04f 0200 	mov.w	r2, #0
 8006360:	f04f 0300 	mov.w	r3, #0
 8006364:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006368:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800636c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006370:	ebb2 040a 	subs.w	r4, r2, sl
 8006374:	eb63 050b 	sbc.w	r5, r3, fp
 8006378:	f04f 0200 	mov.w	r2, #0
 800637c:	f04f 0300 	mov.w	r3, #0
 8006380:	00eb      	lsls	r3, r5, #3
 8006382:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006386:	00e2      	lsls	r2, r4, #3
 8006388:	4614      	mov	r4, r2
 800638a:	461d      	mov	r5, r3
 800638c:	4643      	mov	r3, r8
 800638e:	18e3      	adds	r3, r4, r3
 8006390:	603b      	str	r3, [r7, #0]
 8006392:	464b      	mov	r3, r9
 8006394:	eb45 0303 	adc.w	r3, r5, r3
 8006398:	607b      	str	r3, [r7, #4]
 800639a:	f04f 0200 	mov.w	r2, #0
 800639e:	f04f 0300 	mov.w	r3, #0
 80063a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80063a6:	4629      	mov	r1, r5
 80063a8:	028b      	lsls	r3, r1, #10
 80063aa:	4621      	mov	r1, r4
 80063ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80063b0:	4621      	mov	r1, r4
 80063b2:	028a      	lsls	r2, r1, #10
 80063b4:	4610      	mov	r0, r2
 80063b6:	4619      	mov	r1, r3
 80063b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063ba:	2200      	movs	r2, #0
 80063bc:	61bb      	str	r3, [r7, #24]
 80063be:	61fa      	str	r2, [r7, #28]
 80063c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063c4:	f7fa fc22 	bl	8000c0c <__aeabi_uldivmod>
 80063c8:	4602      	mov	r2, r0
 80063ca:	460b      	mov	r3, r1
 80063cc:	4613      	mov	r3, r2
 80063ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80063d0:	4b0b      	ldr	r3, [pc, #44]	@ (8006400 <HAL_RCC_GetSysClockFreq+0x200>)
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	0c1b      	lsrs	r3, r3, #16
 80063d6:	f003 0303 	and.w	r3, r3, #3
 80063da:	3301      	adds	r3, #1
 80063dc:	005b      	lsls	r3, r3, #1
 80063de:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80063e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80063e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80063ea:	e002      	b.n	80063f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80063ec:	4b05      	ldr	r3, [pc, #20]	@ (8006404 <HAL_RCC_GetSysClockFreq+0x204>)
 80063ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80063f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3750      	adds	r7, #80	@ 0x50
 80063f8:	46bd      	mov	sp, r7
 80063fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063fe:	bf00      	nop
 8006400:	40023800 	.word	0x40023800
 8006404:	00f42400 	.word	0x00f42400
 8006408:	007a1200 	.word	0x007a1200

0800640c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800640c:	b480      	push	{r7}
 800640e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006410:	4b03      	ldr	r3, [pc, #12]	@ (8006420 <HAL_RCC_GetHCLKFreq+0x14>)
 8006412:	681b      	ldr	r3, [r3, #0]
}
 8006414:	4618      	mov	r0, r3
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	20000000 	.word	0x20000000

08006424 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006428:	f7ff fff0 	bl	800640c <HAL_RCC_GetHCLKFreq>
 800642c:	4602      	mov	r2, r0
 800642e:	4b05      	ldr	r3, [pc, #20]	@ (8006444 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	0a9b      	lsrs	r3, r3, #10
 8006434:	f003 0307 	and.w	r3, r3, #7
 8006438:	4903      	ldr	r1, [pc, #12]	@ (8006448 <HAL_RCC_GetPCLK1Freq+0x24>)
 800643a:	5ccb      	ldrb	r3, [r1, r3]
 800643c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006440:	4618      	mov	r0, r3
 8006442:	bd80      	pop	{r7, pc}
 8006444:	40023800 	.word	0x40023800
 8006448:	0800cb14 	.word	0x0800cb14

0800644c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b086      	sub	sp, #24
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006454:	2300      	movs	r3, #0
 8006456:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006458:	2300      	movs	r3, #0
 800645a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0301 	and.w	r3, r3, #1
 8006464:	2b00      	cmp	r3, #0
 8006466:	d105      	bne.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006470:	2b00      	cmp	r3, #0
 8006472:	d035      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006474:	4b62      	ldr	r3, [pc, #392]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006476:	2200      	movs	r2, #0
 8006478:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800647a:	f7fb fcb9 	bl	8001df0 <HAL_GetTick>
 800647e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006480:	e008      	b.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006482:	f7fb fcb5 	bl	8001df0 <HAL_GetTick>
 8006486:	4602      	mov	r2, r0
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	1ad3      	subs	r3, r2, r3
 800648c:	2b02      	cmp	r3, #2
 800648e:	d901      	bls.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006490:	2303      	movs	r3, #3
 8006492:	e0b0      	b.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006494:	4b5b      	ldr	r3, [pc, #364]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800649c:	2b00      	cmp	r3, #0
 800649e:	d1f0      	bne.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	019a      	lsls	r2, r3, #6
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	071b      	lsls	r3, r3, #28
 80064ac:	4955      	ldr	r1, [pc, #340]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064ae:	4313      	orrs	r3, r2
 80064b0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80064b4:	4b52      	ldr	r3, [pc, #328]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80064b6:	2201      	movs	r2, #1
 80064b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80064ba:	f7fb fc99 	bl	8001df0 <HAL_GetTick>
 80064be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80064c0:	e008      	b.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80064c2:	f7fb fc95 	bl	8001df0 <HAL_GetTick>
 80064c6:	4602      	mov	r2, r0
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d901      	bls.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	e090      	b.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80064d4:	4b4b      	ldr	r3, [pc, #300]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d0f0      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 0302 	and.w	r3, r3, #2
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	f000 8083 	beq.w	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80064ee:	2300      	movs	r3, #0
 80064f0:	60fb      	str	r3, [r7, #12]
 80064f2:	4b44      	ldr	r3, [pc, #272]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f6:	4a43      	ldr	r2, [pc, #268]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80064fe:	4b41      	ldr	r3, [pc, #260]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006506:	60fb      	str	r3, [r7, #12]
 8006508:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800650a:	4b3f      	ldr	r3, [pc, #252]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a3e      	ldr	r2, [pc, #248]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006510:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006514:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006516:	f7fb fc6b 	bl	8001df0 <HAL_GetTick>
 800651a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800651c:	e008      	b.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800651e:	f7fb fc67 	bl	8001df0 <HAL_GetTick>
 8006522:	4602      	mov	r2, r0
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	2b02      	cmp	r3, #2
 800652a:	d901      	bls.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e062      	b.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006530:	4b35      	ldr	r3, [pc, #212]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006538:	2b00      	cmp	r3, #0
 800653a:	d0f0      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800653c:	4b31      	ldr	r3, [pc, #196]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800653e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006540:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006544:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d02f      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x160>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006554:	693a      	ldr	r2, [r7, #16]
 8006556:	429a      	cmp	r2, r3
 8006558:	d028      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800655a:	4b2a      	ldr	r3, [pc, #168]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800655c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800655e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006562:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006564:	4b29      	ldr	r3, [pc, #164]	@ (800660c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006566:	2201      	movs	r2, #1
 8006568:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800656a:	4b28      	ldr	r3, [pc, #160]	@ (800660c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800656c:	2200      	movs	r2, #0
 800656e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006570:	4a24      	ldr	r2, [pc, #144]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006576:	4b23      	ldr	r3, [pc, #140]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800657a:	f003 0301 	and.w	r3, r3, #1
 800657e:	2b01      	cmp	r3, #1
 8006580:	d114      	bne.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006582:	f7fb fc35 	bl	8001df0 <HAL_GetTick>
 8006586:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006588:	e00a      	b.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800658a:	f7fb fc31 	bl	8001df0 <HAL_GetTick>
 800658e:	4602      	mov	r2, r0
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006598:	4293      	cmp	r3, r2
 800659a:	d901      	bls.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	e02a      	b.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065a0:	4b18      	ldr	r3, [pc, #96]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065a4:	f003 0302 	and.w	r3, r3, #2
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d0ee      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065b8:	d10d      	bne.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80065ba:	4b12      	ldr	r3, [pc, #72]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80065ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065ce:	490d      	ldr	r1, [pc, #52]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065d0:	4313      	orrs	r3, r2
 80065d2:	608b      	str	r3, [r1, #8]
 80065d4:	e005      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80065d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	4a0a      	ldr	r2, [pc, #40]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065dc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80065e0:	6093      	str	r3, [r2, #8]
 80065e2:	4b08      	ldr	r3, [pc, #32]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065e4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065ee:	4905      	ldr	r1, [pc, #20]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065f0:	4313      	orrs	r3, r2
 80065f2:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3718      	adds	r7, #24
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	42470068 	.word	0x42470068
 8006604:	40023800 	.word	0x40023800
 8006608:	40007000 	.word	0x40007000
 800660c:	42470e40 	.word	0x42470e40

08006610 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006610:	b480      	push	{r7}
 8006612:	b087      	sub	sp, #28
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006618:	2300      	movs	r3, #0
 800661a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800661c:	2300      	movs	r3, #0
 800661e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006620:	2300      	movs	r3, #0
 8006622:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006624:	2300      	movs	r3, #0
 8006626:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2b01      	cmp	r3, #1
 800662c:	d13f      	bne.n	80066ae <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800662e:	4b24      	ldr	r3, [pc, #144]	@ (80066c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006636:	60fb      	str	r3, [r7, #12]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d006      	beq.n	800664c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006644:	d12f      	bne.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006646:	4b1f      	ldr	r3, [pc, #124]	@ (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006648:	617b      	str	r3, [r7, #20]
          break;
 800664a:	e02f      	b.n	80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800664c:	4b1c      	ldr	r3, [pc, #112]	@ (80066c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006654:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006658:	d108      	bne.n	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800665a:	4b19      	ldr	r3, [pc, #100]	@ (80066c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006662:	4a19      	ldr	r2, [pc, #100]	@ (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006664:	fbb2 f3f3 	udiv	r3, r2, r3
 8006668:	613b      	str	r3, [r7, #16]
 800666a:	e007      	b.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800666c:	4b14      	ldr	r3, [pc, #80]	@ (80066c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006674:	4a15      	ldr	r2, [pc, #84]	@ (80066cc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006676:	fbb2 f3f3 	udiv	r3, r2, r3
 800667a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800667c:	4b10      	ldr	r3, [pc, #64]	@ (80066c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800667e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006682:	099b      	lsrs	r3, r3, #6
 8006684:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	fb02 f303 	mul.w	r3, r2, r3
 800668e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006690:	4b0b      	ldr	r3, [pc, #44]	@ (80066c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006692:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006696:	0f1b      	lsrs	r3, r3, #28
 8006698:	f003 0307 	and.w	r3, r3, #7
 800669c:	68ba      	ldr	r2, [r7, #8]
 800669e:	fbb2 f3f3 	udiv	r3, r2, r3
 80066a2:	617b      	str	r3, [r7, #20]
          break;
 80066a4:	e002      	b.n	80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80066a6:	2300      	movs	r3, #0
 80066a8:	617b      	str	r3, [r7, #20]
          break;
 80066aa:	bf00      	nop
        }
      }
      break;
 80066ac:	e000      	b.n	80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 80066ae:	bf00      	nop
    }
  }
  return frequency;
 80066b0:	697b      	ldr	r3, [r7, #20]
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	371c      	adds	r7, #28
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	40023800 	.word	0x40023800
 80066c4:	00bb8000 	.word	0x00bb8000
 80066c8:	007a1200 	.word	0x007a1200
 80066cc:	00f42400 	.word	0x00f42400

080066d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d101      	bne.n	80066e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e07b      	b.n	80067da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d108      	bne.n	80066fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066f2:	d009      	beq.n	8006708 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	61da      	str	r2, [r3, #28]
 80066fa:	e005      	b.n	8006708 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006714:	b2db      	uxtb	r3, r3
 8006716:	2b00      	cmp	r3, #0
 8006718:	d106      	bne.n	8006728 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f7fb f8d6 	bl	80018d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2202      	movs	r2, #2
 800672c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800673e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006750:	431a      	orrs	r2, r3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800675a:	431a      	orrs	r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	f003 0302 	and.w	r3, r3, #2
 8006764:	431a      	orrs	r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	695b      	ldr	r3, [r3, #20]
 800676a:	f003 0301 	and.w	r3, r3, #1
 800676e:	431a      	orrs	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006778:	431a      	orrs	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	69db      	ldr	r3, [r3, #28]
 800677e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006782:	431a      	orrs	r2, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a1b      	ldr	r3, [r3, #32]
 8006788:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800678c:	ea42 0103 	orr.w	r1, r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006794:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	430a      	orrs	r2, r1
 800679e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	0c1b      	lsrs	r3, r3, #16
 80067a6:	f003 0104 	and.w	r1, r3, #4
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ae:	f003 0210 	and.w	r2, r3, #16
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	430a      	orrs	r2, r1
 80067b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	69da      	ldr	r2, [r3, #28]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80067c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3708      	adds	r7, #8
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b082      	sub	sp, #8
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d101      	bne.n	80067f4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	e041      	b.n	8006878 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d106      	bne.n	800680e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f7fb fa3b 	bl	8001c84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2202      	movs	r2, #2
 8006812:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	3304      	adds	r3, #4
 800681e:	4619      	mov	r1, r3
 8006820:	4610      	mov	r0, r2
 8006822:	f000 fa7d 	bl	8006d20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2201      	movs	r2, #1
 800682a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2201      	movs	r2, #1
 800683a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2201      	movs	r2, #1
 8006842:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2201      	movs	r2, #1
 800684a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2201      	movs	r2, #1
 8006852:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2201      	movs	r2, #1
 800685a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2201      	movs	r2, #1
 800686a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2201      	movs	r2, #1
 8006872:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	3708      	adds	r7, #8
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006880:	b480      	push	{r7}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800688e:	b2db      	uxtb	r3, r3
 8006890:	2b01      	cmp	r3, #1
 8006892:	d001      	beq.n	8006898 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e04e      	b.n	8006936 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2202      	movs	r2, #2
 800689c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	68da      	ldr	r2, [r3, #12]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f042 0201 	orr.w	r2, r2, #1
 80068ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a23      	ldr	r2, [pc, #140]	@ (8006944 <HAL_TIM_Base_Start_IT+0xc4>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d022      	beq.n	8006900 <HAL_TIM_Base_Start_IT+0x80>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068c2:	d01d      	beq.n	8006900 <HAL_TIM_Base_Start_IT+0x80>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a1f      	ldr	r2, [pc, #124]	@ (8006948 <HAL_TIM_Base_Start_IT+0xc8>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d018      	beq.n	8006900 <HAL_TIM_Base_Start_IT+0x80>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a1e      	ldr	r2, [pc, #120]	@ (800694c <HAL_TIM_Base_Start_IT+0xcc>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d013      	beq.n	8006900 <HAL_TIM_Base_Start_IT+0x80>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a1c      	ldr	r2, [pc, #112]	@ (8006950 <HAL_TIM_Base_Start_IT+0xd0>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d00e      	beq.n	8006900 <HAL_TIM_Base_Start_IT+0x80>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a1b      	ldr	r2, [pc, #108]	@ (8006954 <HAL_TIM_Base_Start_IT+0xd4>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d009      	beq.n	8006900 <HAL_TIM_Base_Start_IT+0x80>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a19      	ldr	r2, [pc, #100]	@ (8006958 <HAL_TIM_Base_Start_IT+0xd8>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d004      	beq.n	8006900 <HAL_TIM_Base_Start_IT+0x80>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a18      	ldr	r2, [pc, #96]	@ (800695c <HAL_TIM_Base_Start_IT+0xdc>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d111      	bne.n	8006924 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f003 0307 	and.w	r3, r3, #7
 800690a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2b06      	cmp	r3, #6
 8006910:	d010      	beq.n	8006934 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f042 0201 	orr.w	r2, r2, #1
 8006920:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006922:	e007      	b.n	8006934 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f042 0201 	orr.w	r2, r2, #1
 8006932:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3714      	adds	r7, #20
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	40010000 	.word	0x40010000
 8006948:	40000400 	.word	0x40000400
 800694c:	40000800 	.word	0x40000800
 8006950:	40000c00 	.word	0x40000c00
 8006954:	40010400 	.word	0x40010400
 8006958:	40014000 	.word	0x40014000
 800695c:	40001800 	.word	0x40001800

08006960 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	f003 0302 	and.w	r3, r3, #2
 800697e:	2b00      	cmp	r3, #0
 8006980:	d020      	beq.n	80069c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f003 0302 	and.w	r3, r3, #2
 8006988:	2b00      	cmp	r3, #0
 800698a:	d01b      	beq.n	80069c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f06f 0202 	mvn.w	r2, #2
 8006994:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2201      	movs	r2, #1
 800699a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	699b      	ldr	r3, [r3, #24]
 80069a2:	f003 0303 	and.w	r3, r3, #3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d003      	beq.n	80069b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 f999 	bl	8006ce2 <HAL_TIM_IC_CaptureCallback>
 80069b0:	e005      	b.n	80069be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f98b 	bl	8006cce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 f99c 	bl	8006cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	f003 0304 	and.w	r3, r3, #4
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d020      	beq.n	8006a10 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f003 0304 	and.w	r3, r3, #4
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d01b      	beq.n	8006a10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f06f 0204 	mvn.w	r2, #4
 80069e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2202      	movs	r2, #2
 80069e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	699b      	ldr	r3, [r3, #24]
 80069ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d003      	beq.n	80069fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 f973 	bl	8006ce2 <HAL_TIM_IC_CaptureCallback>
 80069fc:	e005      	b.n	8006a0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f965 	bl	8006cce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 f976 	bl	8006cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	f003 0308 	and.w	r3, r3, #8
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d020      	beq.n	8006a5c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f003 0308 	and.w	r3, r3, #8
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d01b      	beq.n	8006a5c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f06f 0208 	mvn.w	r2, #8
 8006a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2204      	movs	r2, #4
 8006a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	69db      	ldr	r3, [r3, #28]
 8006a3a:	f003 0303 	and.w	r3, r3, #3
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d003      	beq.n	8006a4a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 f94d 	bl	8006ce2 <HAL_TIM_IC_CaptureCallback>
 8006a48:	e005      	b.n	8006a56 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 f93f 	bl	8006cce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 f950 	bl	8006cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	f003 0310 	and.w	r3, r3, #16
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d020      	beq.n	8006aa8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f003 0310 	and.w	r3, r3, #16
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d01b      	beq.n	8006aa8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f06f 0210 	mvn.w	r2, #16
 8006a78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2208      	movs	r2, #8
 8006a7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	69db      	ldr	r3, [r3, #28]
 8006a86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d003      	beq.n	8006a96 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 f927 	bl	8006ce2 <HAL_TIM_IC_CaptureCallback>
 8006a94:	e005      	b.n	8006aa2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 f919 	bl	8006cce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 f92a 	bl	8006cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	f003 0301 	and.w	r3, r3, #1
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d00c      	beq.n	8006acc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f003 0301 	and.w	r3, r3, #1
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d007      	beq.n	8006acc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f06f 0201 	mvn.w	r2, #1
 8006ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f7fa fe8e 	bl	80017e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00c      	beq.n	8006af0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d007      	beq.n	8006af0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 fae4 	bl	80070b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00c      	beq.n	8006b14 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d007      	beq.n	8006b14 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 f8fb 	bl	8006d0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	f003 0320 	and.w	r3, r3, #32
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d00c      	beq.n	8006b38 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f003 0320 	and.w	r3, r3, #32
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d007      	beq.n	8006b38 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f06f 0220 	mvn.w	r2, #32
 8006b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 fab6 	bl	80070a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b38:	bf00      	nop
 8006b3a:	3710      	adds	r7, #16
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d101      	bne.n	8006b5c <HAL_TIM_ConfigClockSource+0x1c>
 8006b58:	2302      	movs	r3, #2
 8006b5a:	e0b4      	b.n	8006cc6 <HAL_TIM_ConfigClockSource+0x186>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2202      	movs	r2, #2
 8006b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006b7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	68ba      	ldr	r2, [r7, #8]
 8006b8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b94:	d03e      	beq.n	8006c14 <HAL_TIM_ConfigClockSource+0xd4>
 8006b96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b9a:	f200 8087 	bhi.w	8006cac <HAL_TIM_ConfigClockSource+0x16c>
 8006b9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ba2:	f000 8086 	beq.w	8006cb2 <HAL_TIM_ConfigClockSource+0x172>
 8006ba6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006baa:	d87f      	bhi.n	8006cac <HAL_TIM_ConfigClockSource+0x16c>
 8006bac:	2b70      	cmp	r3, #112	@ 0x70
 8006bae:	d01a      	beq.n	8006be6 <HAL_TIM_ConfigClockSource+0xa6>
 8006bb0:	2b70      	cmp	r3, #112	@ 0x70
 8006bb2:	d87b      	bhi.n	8006cac <HAL_TIM_ConfigClockSource+0x16c>
 8006bb4:	2b60      	cmp	r3, #96	@ 0x60
 8006bb6:	d050      	beq.n	8006c5a <HAL_TIM_ConfigClockSource+0x11a>
 8006bb8:	2b60      	cmp	r3, #96	@ 0x60
 8006bba:	d877      	bhi.n	8006cac <HAL_TIM_ConfigClockSource+0x16c>
 8006bbc:	2b50      	cmp	r3, #80	@ 0x50
 8006bbe:	d03c      	beq.n	8006c3a <HAL_TIM_ConfigClockSource+0xfa>
 8006bc0:	2b50      	cmp	r3, #80	@ 0x50
 8006bc2:	d873      	bhi.n	8006cac <HAL_TIM_ConfigClockSource+0x16c>
 8006bc4:	2b40      	cmp	r3, #64	@ 0x40
 8006bc6:	d058      	beq.n	8006c7a <HAL_TIM_ConfigClockSource+0x13a>
 8006bc8:	2b40      	cmp	r3, #64	@ 0x40
 8006bca:	d86f      	bhi.n	8006cac <HAL_TIM_ConfigClockSource+0x16c>
 8006bcc:	2b30      	cmp	r3, #48	@ 0x30
 8006bce:	d064      	beq.n	8006c9a <HAL_TIM_ConfigClockSource+0x15a>
 8006bd0:	2b30      	cmp	r3, #48	@ 0x30
 8006bd2:	d86b      	bhi.n	8006cac <HAL_TIM_ConfigClockSource+0x16c>
 8006bd4:	2b20      	cmp	r3, #32
 8006bd6:	d060      	beq.n	8006c9a <HAL_TIM_ConfigClockSource+0x15a>
 8006bd8:	2b20      	cmp	r3, #32
 8006bda:	d867      	bhi.n	8006cac <HAL_TIM_ConfigClockSource+0x16c>
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d05c      	beq.n	8006c9a <HAL_TIM_ConfigClockSource+0x15a>
 8006be0:	2b10      	cmp	r3, #16
 8006be2:	d05a      	beq.n	8006c9a <HAL_TIM_ConfigClockSource+0x15a>
 8006be4:	e062      	b.n	8006cac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006bf6:	f000 f9b9 	bl	8006f6c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006c08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68ba      	ldr	r2, [r7, #8]
 8006c10:	609a      	str	r2, [r3, #8]
      break;
 8006c12:	e04f      	b.n	8006cb4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c24:	f000 f9a2 	bl	8006f6c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	689a      	ldr	r2, [r3, #8]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006c36:	609a      	str	r2, [r3, #8]
      break;
 8006c38:	e03c      	b.n	8006cb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c46:	461a      	mov	r2, r3
 8006c48:	f000 f916 	bl	8006e78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2150      	movs	r1, #80	@ 0x50
 8006c52:	4618      	mov	r0, r3
 8006c54:	f000 f96f 	bl	8006f36 <TIM_ITRx_SetConfig>
      break;
 8006c58:	e02c      	b.n	8006cb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c66:	461a      	mov	r2, r3
 8006c68:	f000 f935 	bl	8006ed6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2160      	movs	r1, #96	@ 0x60
 8006c72:	4618      	mov	r0, r3
 8006c74:	f000 f95f 	bl	8006f36 <TIM_ITRx_SetConfig>
      break;
 8006c78:	e01c      	b.n	8006cb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c86:	461a      	mov	r2, r3
 8006c88:	f000 f8f6 	bl	8006e78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2140      	movs	r1, #64	@ 0x40
 8006c92:	4618      	mov	r0, r3
 8006c94:	f000 f94f 	bl	8006f36 <TIM_ITRx_SetConfig>
      break;
 8006c98:	e00c      	b.n	8006cb4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	4610      	mov	r0, r2
 8006ca6:	f000 f946 	bl	8006f36 <TIM_ITRx_SetConfig>
      break;
 8006caa:	e003      	b.n	8006cb4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	73fb      	strb	r3, [r7, #15]
      break;
 8006cb0:	e000      	b.n	8006cb4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006cb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cce:	b480      	push	{r7}
 8006cd0:	b083      	sub	sp, #12
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cd6:	bf00      	nop
 8006cd8:	370c      	adds	r7, #12
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr

08006ce2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ce2:	b480      	push	{r7}
 8006ce4:	b083      	sub	sp, #12
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006cea:	bf00      	nop
 8006cec:	370c      	adds	r7, #12
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr

08006cf6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006cf6:	b480      	push	{r7}
 8006cf8:	b083      	sub	sp, #12
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006cfe:	bf00      	nop
 8006d00:	370c      	adds	r7, #12
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr

08006d0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d0a:	b480      	push	{r7}
 8006d0c:	b083      	sub	sp, #12
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d12:	bf00      	nop
 8006d14:	370c      	adds	r7, #12
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr
	...

08006d20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b085      	sub	sp, #20
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a46      	ldr	r2, [pc, #280]	@ (8006e4c <TIM_Base_SetConfig+0x12c>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d013      	beq.n	8006d60 <TIM_Base_SetConfig+0x40>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d3e:	d00f      	beq.n	8006d60 <TIM_Base_SetConfig+0x40>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4a43      	ldr	r2, [pc, #268]	@ (8006e50 <TIM_Base_SetConfig+0x130>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d00b      	beq.n	8006d60 <TIM_Base_SetConfig+0x40>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a42      	ldr	r2, [pc, #264]	@ (8006e54 <TIM_Base_SetConfig+0x134>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d007      	beq.n	8006d60 <TIM_Base_SetConfig+0x40>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4a41      	ldr	r2, [pc, #260]	@ (8006e58 <TIM_Base_SetConfig+0x138>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d003      	beq.n	8006d60 <TIM_Base_SetConfig+0x40>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a40      	ldr	r2, [pc, #256]	@ (8006e5c <TIM_Base_SetConfig+0x13c>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d108      	bne.n	8006d72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a35      	ldr	r2, [pc, #212]	@ (8006e4c <TIM_Base_SetConfig+0x12c>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d02b      	beq.n	8006dd2 <TIM_Base_SetConfig+0xb2>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d80:	d027      	beq.n	8006dd2 <TIM_Base_SetConfig+0xb2>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4a32      	ldr	r2, [pc, #200]	@ (8006e50 <TIM_Base_SetConfig+0x130>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d023      	beq.n	8006dd2 <TIM_Base_SetConfig+0xb2>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a31      	ldr	r2, [pc, #196]	@ (8006e54 <TIM_Base_SetConfig+0x134>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d01f      	beq.n	8006dd2 <TIM_Base_SetConfig+0xb2>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a30      	ldr	r2, [pc, #192]	@ (8006e58 <TIM_Base_SetConfig+0x138>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d01b      	beq.n	8006dd2 <TIM_Base_SetConfig+0xb2>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4a2f      	ldr	r2, [pc, #188]	@ (8006e5c <TIM_Base_SetConfig+0x13c>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d017      	beq.n	8006dd2 <TIM_Base_SetConfig+0xb2>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a2e      	ldr	r2, [pc, #184]	@ (8006e60 <TIM_Base_SetConfig+0x140>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d013      	beq.n	8006dd2 <TIM_Base_SetConfig+0xb2>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a2d      	ldr	r2, [pc, #180]	@ (8006e64 <TIM_Base_SetConfig+0x144>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d00f      	beq.n	8006dd2 <TIM_Base_SetConfig+0xb2>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a2c      	ldr	r2, [pc, #176]	@ (8006e68 <TIM_Base_SetConfig+0x148>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d00b      	beq.n	8006dd2 <TIM_Base_SetConfig+0xb2>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a2b      	ldr	r2, [pc, #172]	@ (8006e6c <TIM_Base_SetConfig+0x14c>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d007      	beq.n	8006dd2 <TIM_Base_SetConfig+0xb2>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a2a      	ldr	r2, [pc, #168]	@ (8006e70 <TIM_Base_SetConfig+0x150>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d003      	beq.n	8006dd2 <TIM_Base_SetConfig+0xb2>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a29      	ldr	r2, [pc, #164]	@ (8006e74 <TIM_Base_SetConfig+0x154>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d108      	bne.n	8006de4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	68fa      	ldr	r2, [r7, #12]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	695b      	ldr	r3, [r3, #20]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	68fa      	ldr	r2, [r7, #12]
 8006df6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	689a      	ldr	r2, [r3, #8]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a10      	ldr	r2, [pc, #64]	@ (8006e4c <TIM_Base_SetConfig+0x12c>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d003      	beq.n	8006e18 <TIM_Base_SetConfig+0xf8>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a12      	ldr	r2, [pc, #72]	@ (8006e5c <TIM_Base_SetConfig+0x13c>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d103      	bne.n	8006e20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	691a      	ldr	r2, [r3, #16]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	f003 0301 	and.w	r3, r3, #1
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d105      	bne.n	8006e3e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	f023 0201 	bic.w	r2, r3, #1
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	611a      	str	r2, [r3, #16]
  }
}
 8006e3e:	bf00      	nop
 8006e40:	3714      	adds	r7, #20
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	40010000 	.word	0x40010000
 8006e50:	40000400 	.word	0x40000400
 8006e54:	40000800 	.word	0x40000800
 8006e58:	40000c00 	.word	0x40000c00
 8006e5c:	40010400 	.word	0x40010400
 8006e60:	40014000 	.word	0x40014000
 8006e64:	40014400 	.word	0x40014400
 8006e68:	40014800 	.word	0x40014800
 8006e6c:	40001800 	.word	0x40001800
 8006e70:	40001c00 	.word	0x40001c00
 8006e74:	40002000 	.word	0x40002000

08006e78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b087      	sub	sp, #28
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6a1b      	ldr	r3, [r3, #32]
 8006e88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6a1b      	ldr	r3, [r3, #32]
 8006e8e:	f023 0201 	bic.w	r2, r3, #1
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	699b      	ldr	r3, [r3, #24]
 8006e9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ea2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	011b      	lsls	r3, r3, #4
 8006ea8:	693a      	ldr	r2, [r7, #16]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	f023 030a 	bic.w	r3, r3, #10
 8006eb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006eb6:	697a      	ldr	r2, [r7, #20]
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	693a      	ldr	r2, [r7, #16]
 8006ec2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	697a      	ldr	r2, [r7, #20]
 8006ec8:	621a      	str	r2, [r3, #32]
}
 8006eca:	bf00      	nop
 8006ecc:	371c      	adds	r7, #28
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr

08006ed6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	b087      	sub	sp, #28
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	60f8      	str	r0, [r7, #12]
 8006ede:	60b9      	str	r1, [r7, #8]
 8006ee0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6a1b      	ldr	r3, [r3, #32]
 8006eec:	f023 0210 	bic.w	r2, r3, #16
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	699b      	ldr	r3, [r3, #24]
 8006ef8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006f00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	031b      	lsls	r3, r3, #12
 8006f06:	693a      	ldr	r2, [r7, #16]
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006f12:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	011b      	lsls	r3, r3, #4
 8006f18:	697a      	ldr	r2, [r7, #20]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	693a      	ldr	r2, [r7, #16]
 8006f22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	697a      	ldr	r2, [r7, #20]
 8006f28:	621a      	str	r2, [r3, #32]
}
 8006f2a:	bf00      	nop
 8006f2c:	371c      	adds	r7, #28
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr

08006f36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f36:	b480      	push	{r7}
 8006f38:	b085      	sub	sp, #20
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
 8006f3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f4e:	683a      	ldr	r2, [r7, #0]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	f043 0307 	orr.w	r3, r3, #7
 8006f58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	68fa      	ldr	r2, [r7, #12]
 8006f5e:	609a      	str	r2, [r3, #8]
}
 8006f60:	bf00      	nop
 8006f62:	3714      	adds	r7, #20
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b087      	sub	sp, #28
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	607a      	str	r2, [r7, #4]
 8006f78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006f86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	021a      	lsls	r2, r3, #8
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	431a      	orrs	r2, r3
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	697a      	ldr	r2, [r7, #20]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	697a      	ldr	r2, [r7, #20]
 8006f9e:	609a      	str	r2, [r3, #8]
}
 8006fa0:	bf00      	nop
 8006fa2:	371c      	adds	r7, #28
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b085      	sub	sp, #20
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d101      	bne.n	8006fc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	e05a      	b.n	800707a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2202      	movs	r2, #2
 8006fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	68fa      	ldr	r2, [r7, #12]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a21      	ldr	r2, [pc, #132]	@ (8007088 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d022      	beq.n	800704e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007010:	d01d      	beq.n	800704e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a1d      	ldr	r2, [pc, #116]	@ (800708c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d018      	beq.n	800704e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a1b      	ldr	r2, [pc, #108]	@ (8007090 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d013      	beq.n	800704e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a1a      	ldr	r2, [pc, #104]	@ (8007094 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d00e      	beq.n	800704e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a18      	ldr	r2, [pc, #96]	@ (8007098 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d009      	beq.n	800704e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a17      	ldr	r2, [pc, #92]	@ (800709c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d004      	beq.n	800704e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a15      	ldr	r2, [pc, #84]	@ (80070a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d10c      	bne.n	8007068 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007054:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	68ba      	ldr	r2, [r7, #8]
 800705c:	4313      	orrs	r3, r2
 800705e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	68ba      	ldr	r2, [r7, #8]
 8007066:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	3714      	adds	r7, #20
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr
 8007086:	bf00      	nop
 8007088:	40010000 	.word	0x40010000
 800708c:	40000400 	.word	0x40000400
 8007090:	40000800 	.word	0x40000800
 8007094:	40000c00 	.word	0x40000c00
 8007098:	40010400 	.word	0x40010400
 800709c:	40014000 	.word	0x40014000
 80070a0:	40001800 	.word	0x40001800

080070a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80070ac:	bf00      	nop
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80070c0:	bf00      	nop
 80070c2:	370c      	adds	r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80070cc:	b084      	sub	sp, #16
 80070ce:	b580      	push	{r7, lr}
 80070d0:	b084      	sub	sp, #16
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
 80070d6:	f107 001c 	add.w	r0, r7, #28
 80070da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80070de:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d123      	bne.n	800712e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80070fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800710e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007112:	2b01      	cmp	r3, #1
 8007114:	d105      	bne.n	8007122 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 f9dc 	bl	80074e0 <USB_CoreReset>
 8007128:	4603      	mov	r3, r0
 800712a:	73fb      	strb	r3, [r7, #15]
 800712c:	e01b      	b.n	8007166 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 f9d0 	bl	80074e0 <USB_CoreReset>
 8007140:	4603      	mov	r3, r0
 8007142:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007144:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007148:	2b00      	cmp	r3, #0
 800714a:	d106      	bne.n	800715a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007150:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	639a      	str	r2, [r3, #56]	@ 0x38
 8007158:	e005      	b.n	8007166 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800715e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007166:	7fbb      	ldrb	r3, [r7, #30]
 8007168:	2b01      	cmp	r3, #1
 800716a:	d10b      	bne.n	8007184 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	f043 0206 	orr.w	r2, r3, #6
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	f043 0220 	orr.w	r2, r3, #32
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007184:	7bfb      	ldrb	r3, [r7, #15]
}
 8007186:	4618      	mov	r0, r3
 8007188:	3710      	adds	r7, #16
 800718a:	46bd      	mov	sp, r7
 800718c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007190:	b004      	add	sp, #16
 8007192:	4770      	bx	lr

08007194 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	f043 0201 	orr.w	r2, r3, #1
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	370c      	adds	r7, #12
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr

080071b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80071b6:	b480      	push	{r7}
 80071b8:	b083      	sub	sp, #12
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	f023 0201 	bic.w	r2, r3, #1
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	460b      	mov	r3, r1
 80071e2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80071e4:	2300      	movs	r3, #0
 80071e6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80071f4:	78fb      	ldrb	r3, [r7, #3]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d115      	bne.n	8007226 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007206:	200a      	movs	r0, #10
 8007208:	f7fa fdfe 	bl	8001e08 <HAL_Delay>
      ms += 10U;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	330a      	adds	r3, #10
 8007210:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f956 	bl	80074c4 <USB_GetMode>
 8007218:	4603      	mov	r3, r0
 800721a:	2b01      	cmp	r3, #1
 800721c:	d01e      	beq.n	800725c <USB_SetCurrentMode+0x84>
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2bc7      	cmp	r3, #199	@ 0xc7
 8007222:	d9f0      	bls.n	8007206 <USB_SetCurrentMode+0x2e>
 8007224:	e01a      	b.n	800725c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007226:	78fb      	ldrb	r3, [r7, #3]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d115      	bne.n	8007258 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007238:	200a      	movs	r0, #10
 800723a:	f7fa fde5 	bl	8001e08 <HAL_Delay>
      ms += 10U;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	330a      	adds	r3, #10
 8007242:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 f93d 	bl	80074c4 <USB_GetMode>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d005      	beq.n	800725c <USB_SetCurrentMode+0x84>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2bc7      	cmp	r3, #199	@ 0xc7
 8007254:	d9f0      	bls.n	8007238 <USB_SetCurrentMode+0x60>
 8007256:	e001      	b.n	800725c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	e005      	b.n	8007268 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2bc8      	cmp	r3, #200	@ 0xc8
 8007260:	d101      	bne.n	8007266 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e000      	b.n	8007268 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	3710      	adds	r7, #16
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007270:	b480      	push	{r7}
 8007272:	b085      	sub	sp, #20
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800727a:	2300      	movs	r3, #0
 800727c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	3301      	adds	r3, #1
 8007282:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800728a:	d901      	bls.n	8007290 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800728c:	2303      	movs	r3, #3
 800728e:	e01b      	b.n	80072c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	2b00      	cmp	r3, #0
 8007296:	daf2      	bge.n	800727e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007298:	2300      	movs	r3, #0
 800729a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	019b      	lsls	r3, r3, #6
 80072a0:	f043 0220 	orr.w	r2, r3, #32
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	3301      	adds	r3, #1
 80072ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80072b4:	d901      	bls.n	80072ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80072b6:	2303      	movs	r3, #3
 80072b8:	e006      	b.n	80072c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	f003 0320 	and.w	r3, r3, #32
 80072c2:	2b20      	cmp	r3, #32
 80072c4:	d0f0      	beq.n	80072a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3714      	adds	r7, #20
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b085      	sub	sp, #20
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80072dc:	2300      	movs	r3, #0
 80072de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	3301      	adds	r3, #1
 80072e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80072ec:	d901      	bls.n	80072f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e018      	b.n	8007324 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	691b      	ldr	r3, [r3, #16]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	daf2      	bge.n	80072e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80072fa:	2300      	movs	r3, #0
 80072fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2210      	movs	r2, #16
 8007302:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	3301      	adds	r3, #1
 8007308:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007310:	d901      	bls.n	8007316 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007312:	2303      	movs	r3, #3
 8007314:	e006      	b.n	8007324 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	f003 0310 	and.w	r3, r3, #16
 800731e:	2b10      	cmp	r3, #16
 8007320:	d0f0      	beq.n	8007304 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007322:	2300      	movs	r3, #0
}
 8007324:	4618      	mov	r0, r3
 8007326:	3714      	adds	r7, #20
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007330:	b480      	push	{r7}
 8007332:	b089      	sub	sp, #36	@ 0x24
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	4611      	mov	r1, r2
 800733c:	461a      	mov	r2, r3
 800733e:	460b      	mov	r3, r1
 8007340:	71fb      	strb	r3, [r7, #7]
 8007342:	4613      	mov	r3, r2
 8007344:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800734e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007352:	2b00      	cmp	r3, #0
 8007354:	d123      	bne.n	800739e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007356:	88bb      	ldrh	r3, [r7, #4]
 8007358:	3303      	adds	r3, #3
 800735a:	089b      	lsrs	r3, r3, #2
 800735c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800735e:	2300      	movs	r3, #0
 8007360:	61bb      	str	r3, [r7, #24]
 8007362:	e018      	b.n	8007396 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007364:	79fb      	ldrb	r3, [r7, #7]
 8007366:	031a      	lsls	r2, r3, #12
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	4413      	add	r3, r2
 800736c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007370:	461a      	mov	r2, r3
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	3301      	adds	r3, #1
 800737c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800737e:	69fb      	ldr	r3, [r7, #28]
 8007380:	3301      	adds	r3, #1
 8007382:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	3301      	adds	r3, #1
 8007388:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	3301      	adds	r3, #1
 800738e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007390:	69bb      	ldr	r3, [r7, #24]
 8007392:	3301      	adds	r3, #1
 8007394:	61bb      	str	r3, [r7, #24]
 8007396:	69ba      	ldr	r2, [r7, #24]
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	429a      	cmp	r2, r3
 800739c:	d3e2      	bcc.n	8007364 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800739e:	2300      	movs	r3, #0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3724      	adds	r7, #36	@ 0x24
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b08b      	sub	sp, #44	@ 0x2c
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	4613      	mov	r3, r2
 80073b8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80073c2:	88fb      	ldrh	r3, [r7, #6]
 80073c4:	089b      	lsrs	r3, r3, #2
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80073ca:	88fb      	ldrh	r3, [r7, #6]
 80073cc:	f003 0303 	and.w	r3, r3, #3
 80073d0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80073d2:	2300      	movs	r3, #0
 80073d4:	623b      	str	r3, [r7, #32]
 80073d6:	e014      	b.n	8007402 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e2:	601a      	str	r2, [r3, #0]
    pDest++;
 80073e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e6:	3301      	adds	r3, #1
 80073e8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80073ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ec:	3301      	adds	r3, #1
 80073ee:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80073f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f2:	3301      	adds	r3, #1
 80073f4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80073f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f8:	3301      	adds	r3, #1
 80073fa:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80073fc:	6a3b      	ldr	r3, [r7, #32]
 80073fe:	3301      	adds	r3, #1
 8007400:	623b      	str	r3, [r7, #32]
 8007402:	6a3a      	ldr	r2, [r7, #32]
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	429a      	cmp	r2, r3
 8007408:	d3e6      	bcc.n	80073d8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800740a:	8bfb      	ldrh	r3, [r7, #30]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d01e      	beq.n	800744e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007410:	2300      	movs	r3, #0
 8007412:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800741a:	461a      	mov	r2, r3
 800741c:	f107 0310 	add.w	r3, r7, #16
 8007420:	6812      	ldr	r2, [r2, #0]
 8007422:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007424:	693a      	ldr	r2, [r7, #16]
 8007426:	6a3b      	ldr	r3, [r7, #32]
 8007428:	b2db      	uxtb	r3, r3
 800742a:	00db      	lsls	r3, r3, #3
 800742c:	fa22 f303 	lsr.w	r3, r2, r3
 8007430:	b2da      	uxtb	r2, r3
 8007432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007434:	701a      	strb	r2, [r3, #0]
      i++;
 8007436:	6a3b      	ldr	r3, [r7, #32]
 8007438:	3301      	adds	r3, #1
 800743a:	623b      	str	r3, [r7, #32]
      pDest++;
 800743c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800743e:	3301      	adds	r3, #1
 8007440:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007442:	8bfb      	ldrh	r3, [r7, #30]
 8007444:	3b01      	subs	r3, #1
 8007446:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007448:	8bfb      	ldrh	r3, [r7, #30]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1ea      	bne.n	8007424 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800744e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007450:	4618      	mov	r0, r3
 8007452:	372c      	adds	r7, #44	@ 0x2c
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800745c:	b480      	push	{r7}
 800745e:	b085      	sub	sp, #20
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	695b      	ldr	r3, [r3, #20]
 8007468:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	699b      	ldr	r3, [r3, #24]
 800746e:	68fa      	ldr	r2, [r7, #12]
 8007470:	4013      	ands	r3, r2
 8007472:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007474:	68fb      	ldr	r3, [r7, #12]
}
 8007476:	4618      	mov	r0, r3
 8007478:	3714      	adds	r7, #20
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr

08007482 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007482:	b480      	push	{r7}
 8007484:	b085      	sub	sp, #20
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
 800748a:	460b      	mov	r3, r1
 800748c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007492:	78fb      	ldrb	r3, [r7, #3]
 8007494:	015a      	lsls	r2, r3, #5
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	4413      	add	r3, r2
 800749a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80074a2:	78fb      	ldrb	r3, [r7, #3]
 80074a4:	015a      	lsls	r2, r3, #5
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	4413      	add	r3, r2
 80074aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	68ba      	ldr	r2, [r7, #8]
 80074b2:	4013      	ands	r3, r2
 80074b4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80074b6:	68bb      	ldr	r3, [r7, #8]
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3714      	adds	r7, #20
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	695b      	ldr	r3, [r3, #20]
 80074d0:	f003 0301 	and.w	r3, r3, #1
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	370c      	adds	r7, #12
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b085      	sub	sp, #20
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074e8:	2300      	movs	r3, #0
 80074ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	3301      	adds	r3, #1
 80074f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074f8:	d901      	bls.n	80074fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80074fa:	2303      	movs	r3, #3
 80074fc:	e01b      	b.n	8007536 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	2b00      	cmp	r3, #0
 8007504:	daf2      	bge.n	80074ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007506:	2300      	movs	r3, #0
 8007508:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	f043 0201 	orr.w	r2, r3, #1
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	3301      	adds	r3, #1
 800751a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007522:	d901      	bls.n	8007528 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007524:	2303      	movs	r3, #3
 8007526:	e006      	b.n	8007536 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	f003 0301 	and.w	r3, r3, #1
 8007530:	2b01      	cmp	r3, #1
 8007532:	d0f0      	beq.n	8007516 <USB_CoreReset+0x36>

  return HAL_OK;
 8007534:	2300      	movs	r3, #0
}
 8007536:	4618      	mov	r0, r3
 8007538:	3714      	adds	r7, #20
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr
	...

08007544 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007544:	b084      	sub	sp, #16
 8007546:	b580      	push	{r7, lr}
 8007548:	b086      	sub	sp, #24
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
 800754e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007552:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007556:	2300      	movs	r3, #0
 8007558:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007564:	461a      	mov	r2, r3
 8007566:	2300      	movs	r3, #0
 8007568:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800756e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800757a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007586:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007596:	2b00      	cmp	r3, #0
 8007598:	d119      	bne.n	80075ce <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800759a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d10a      	bne.n	80075b8 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	68fa      	ldr	r2, [r7, #12]
 80075ac:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80075b0:	f043 0304 	orr.w	r3, r3, #4
 80075b4:	6013      	str	r3, [r2, #0]
 80075b6:	e014      	b.n	80075e2 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	68fa      	ldr	r2, [r7, #12]
 80075c2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80075c6:	f023 0304 	bic.w	r3, r3, #4
 80075ca:	6013      	str	r3, [r2, #0]
 80075cc:	e009      	b.n	80075e2 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	68fa      	ldr	r2, [r7, #12]
 80075d8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80075dc:	f023 0304 	bic.w	r3, r3, #4
 80075e0:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80075e2:	2110      	movs	r1, #16
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f7ff fe43 	bl	8007270 <USB_FlushTxFifo>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d001      	beq.n	80075f4 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f7ff fe6d 	bl	80072d4 <USB_FlushRxFifo>
 80075fa:	4603      	mov	r3, r0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d001      	beq.n	8007604 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007604:	2300      	movs	r3, #0
 8007606:	613b      	str	r3, [r7, #16]
 8007608:	e015      	b.n	8007636 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	015a      	lsls	r2, r3, #5
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	4413      	add	r3, r2
 8007612:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007616:	461a      	mov	r2, r3
 8007618:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800761c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	015a      	lsls	r2, r3, #5
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	4413      	add	r3, r2
 8007626:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800762a:	461a      	mov	r2, r3
 800762c:	2300      	movs	r3, #0
 800762e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	3301      	adds	r3, #1
 8007634:	613b      	str	r3, [r7, #16]
 8007636:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800763a:	461a      	mov	r2, r3
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	4293      	cmp	r3, r2
 8007640:	d3e3      	bcc.n	800760a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800764e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a18      	ldr	r2, [pc, #96]	@ (80076b4 <USB_HostInit+0x170>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d10b      	bne.n	8007670 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800765e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4a15      	ldr	r2, [pc, #84]	@ (80076b8 <USB_HostInit+0x174>)
 8007664:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	4a14      	ldr	r2, [pc, #80]	@ (80076bc <USB_HostInit+0x178>)
 800766a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800766e:	e009      	b.n	8007684 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2280      	movs	r2, #128	@ 0x80
 8007674:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4a11      	ldr	r2, [pc, #68]	@ (80076c0 <USB_HostInit+0x17c>)
 800767a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4a11      	ldr	r2, [pc, #68]	@ (80076c4 <USB_HostInit+0x180>)
 8007680:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007684:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007688:	2b00      	cmp	r3, #0
 800768a:	d105      	bne.n	8007698 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	699b      	ldr	r3, [r3, #24]
 8007690:	f043 0210 	orr.w	r2, r3, #16
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	699a      	ldr	r2, [r3, #24]
 800769c:	4b0a      	ldr	r3, [pc, #40]	@ (80076c8 <USB_HostInit+0x184>)
 800769e:	4313      	orrs	r3, r2
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80076a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3718      	adds	r7, #24
 80076aa:	46bd      	mov	sp, r7
 80076ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076b0:	b004      	add	sp, #16
 80076b2:	4770      	bx	lr
 80076b4:	40040000 	.word	0x40040000
 80076b8:	01000200 	.word	0x01000200
 80076bc:	00e00300 	.word	0x00e00300
 80076c0:	00600080 	.word	0x00600080
 80076c4:	004000e0 	.word	0x004000e0
 80076c8:	a3200008 	.word	0xa3200008

080076cc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b085      	sub	sp, #20
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	460b      	mov	r3, r1
 80076d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	68fa      	ldr	r2, [r7, #12]
 80076e6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80076ea:	f023 0303 	bic.w	r3, r3, #3
 80076ee:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	78fb      	ldrb	r3, [r7, #3]
 80076fa:	f003 0303 	and.w	r3, r3, #3
 80076fe:	68f9      	ldr	r1, [r7, #12]
 8007700:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007704:	4313      	orrs	r3, r2
 8007706:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007708:	78fb      	ldrb	r3, [r7, #3]
 800770a:	2b01      	cmp	r3, #1
 800770c:	d107      	bne.n	800771e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007714:	461a      	mov	r2, r3
 8007716:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800771a:	6053      	str	r3, [r2, #4]
 800771c:	e00c      	b.n	8007738 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800771e:	78fb      	ldrb	r3, [r7, #3]
 8007720:	2b02      	cmp	r3, #2
 8007722:	d107      	bne.n	8007734 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800772a:	461a      	mov	r2, r3
 800772c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8007730:	6053      	str	r3, [r2, #4]
 8007732:	e001      	b.n	8007738 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	e000      	b.n	800773a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3714      	adds	r7, #20
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr

08007746 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b084      	sub	sp, #16
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007752:	2300      	movs	r3, #0
 8007754:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007766:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	68fa      	ldr	r2, [r7, #12]
 800776c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007770:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007774:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007776:	2064      	movs	r0, #100	@ 0x64
 8007778:	f7fa fb46 	bl	8001e08 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007784:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007788:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800778a:	200a      	movs	r0, #10
 800778c:	f7fa fb3c 	bl	8001e08 <HAL_Delay>

  return HAL_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3710      	adds	r7, #16
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800779a:	b480      	push	{r7}
 800779c:	b085      	sub	sp, #20
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
 80077a2:	460b      	mov	r3, r1
 80077a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80077aa:	2300      	movs	r3, #0
 80077ac:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80077be:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d109      	bne.n	80077de <USB_DriveVbus+0x44>
 80077ca:	78fb      	ldrb	r3, [r7, #3]
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d106      	bne.n	80077de <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80077d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80077dc:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80077e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077e8:	d109      	bne.n	80077fe <USB_DriveVbus+0x64>
 80077ea:	78fb      	ldrb	r3, [r7, #3]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d106      	bne.n	80077fe <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	68fa      	ldr	r2, [r7, #12]
 80077f4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80077f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80077fc:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3714      	adds	r7, #20
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007818:	2300      	movs	r3, #0
 800781a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	0c5b      	lsrs	r3, r3, #17
 800782a:	f003 0303 	and.w	r3, r3, #3
}
 800782e:	4618      	mov	r0, r3
 8007830:	3714      	adds	r7, #20
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr

0800783a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800783a:	b480      	push	{r7}
 800783c:	b085      	sub	sp, #20
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	b29b      	uxth	r3, r3
}
 8007850:	4618      	mov	r0, r3
 8007852:	3714      	adds	r7, #20
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b088      	sub	sp, #32
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	4608      	mov	r0, r1
 8007866:	4611      	mov	r1, r2
 8007868:	461a      	mov	r2, r3
 800786a:	4603      	mov	r3, r0
 800786c:	70fb      	strb	r3, [r7, #3]
 800786e:	460b      	mov	r3, r1
 8007870:	70bb      	strb	r3, [r7, #2]
 8007872:	4613      	mov	r3, r2
 8007874:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007876:	2300      	movs	r3, #0
 8007878:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800787e:	78fb      	ldrb	r3, [r7, #3]
 8007880:	015a      	lsls	r2, r3, #5
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	4413      	add	r3, r2
 8007886:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800788a:	461a      	mov	r2, r3
 800788c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007890:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007892:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007896:	2b03      	cmp	r3, #3
 8007898:	d87c      	bhi.n	8007994 <USB_HC_Init+0x138>
 800789a:	a201      	add	r2, pc, #4	@ (adr r2, 80078a0 <USB_HC_Init+0x44>)
 800789c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a0:	080078b1 	.word	0x080078b1
 80078a4:	08007957 	.word	0x08007957
 80078a8:	080078b1 	.word	0x080078b1
 80078ac:	08007919 	.word	0x08007919
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80078b0:	78fb      	ldrb	r3, [r7, #3]
 80078b2:	015a      	lsls	r2, r3, #5
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	4413      	add	r3, r2
 80078b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078bc:	461a      	mov	r2, r3
 80078be:	f240 439d 	movw	r3, #1181	@ 0x49d
 80078c2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80078c4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	da10      	bge.n	80078ee <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80078cc:	78fb      	ldrb	r3, [r7, #3]
 80078ce:	015a      	lsls	r2, r3, #5
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	4413      	add	r3, r2
 80078d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078d8:	68db      	ldr	r3, [r3, #12]
 80078da:	78fa      	ldrb	r2, [r7, #3]
 80078dc:	0151      	lsls	r1, r2, #5
 80078de:	693a      	ldr	r2, [r7, #16]
 80078e0:	440a      	add	r2, r1
 80078e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80078ea:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80078ec:	e055      	b.n	800799a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4a6f      	ldr	r2, [pc, #444]	@ (8007ab0 <USB_HC_Init+0x254>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d151      	bne.n	800799a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80078f6:	78fb      	ldrb	r3, [r7, #3]
 80078f8:	015a      	lsls	r2, r3, #5
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	4413      	add	r3, r2
 80078fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	78fa      	ldrb	r2, [r7, #3]
 8007906:	0151      	lsls	r1, r2, #5
 8007908:	693a      	ldr	r2, [r7, #16]
 800790a:	440a      	add	r2, r1
 800790c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007910:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007914:	60d3      	str	r3, [r2, #12]
      break;
 8007916:	e040      	b.n	800799a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007918:	78fb      	ldrb	r3, [r7, #3]
 800791a:	015a      	lsls	r2, r3, #5
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	4413      	add	r3, r2
 8007920:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007924:	461a      	mov	r2, r3
 8007926:	f240 639d 	movw	r3, #1693	@ 0x69d
 800792a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800792c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007930:	2b00      	cmp	r3, #0
 8007932:	da34      	bge.n	800799e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007934:	78fb      	ldrb	r3, [r7, #3]
 8007936:	015a      	lsls	r2, r3, #5
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	4413      	add	r3, r2
 800793c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	78fa      	ldrb	r2, [r7, #3]
 8007944:	0151      	lsls	r1, r2, #5
 8007946:	693a      	ldr	r2, [r7, #16]
 8007948:	440a      	add	r2, r1
 800794a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800794e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007952:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007954:	e023      	b.n	800799e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007956:	78fb      	ldrb	r3, [r7, #3]
 8007958:	015a      	lsls	r2, r3, #5
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	4413      	add	r3, r2
 800795e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007962:	461a      	mov	r2, r3
 8007964:	f240 2325 	movw	r3, #549	@ 0x225
 8007968:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800796a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800796e:	2b00      	cmp	r3, #0
 8007970:	da17      	bge.n	80079a2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007972:	78fb      	ldrb	r3, [r7, #3]
 8007974:	015a      	lsls	r2, r3, #5
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	4413      	add	r3, r2
 800797a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	78fa      	ldrb	r2, [r7, #3]
 8007982:	0151      	lsls	r1, r2, #5
 8007984:	693a      	ldr	r2, [r7, #16]
 8007986:	440a      	add	r2, r1
 8007988:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800798c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8007990:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007992:	e006      	b.n	80079a2 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8007994:	2301      	movs	r3, #1
 8007996:	77fb      	strb	r3, [r7, #31]
      break;
 8007998:	e004      	b.n	80079a4 <USB_HC_Init+0x148>
      break;
 800799a:	bf00      	nop
 800799c:	e002      	b.n	80079a4 <USB_HC_Init+0x148>
      break;
 800799e:	bf00      	nop
 80079a0:	e000      	b.n	80079a4 <USB_HC_Init+0x148>
      break;
 80079a2:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80079a4:	78fb      	ldrb	r3, [r7, #3]
 80079a6:	015a      	lsls	r2, r3, #5
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	4413      	add	r3, r2
 80079ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079b0:	461a      	mov	r2, r3
 80079b2:	2300      	movs	r3, #0
 80079b4:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80079b6:	78fb      	ldrb	r3, [r7, #3]
 80079b8:	015a      	lsls	r2, r3, #5
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	4413      	add	r3, r2
 80079be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	78fa      	ldrb	r2, [r7, #3]
 80079c6:	0151      	lsls	r1, r2, #5
 80079c8:	693a      	ldr	r2, [r7, #16]
 80079ca:	440a      	add	r2, r1
 80079cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80079d0:	f043 0302 	orr.w	r3, r3, #2
 80079d4:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079dc:	699a      	ldr	r2, [r3, #24]
 80079de:	78fb      	ldrb	r3, [r7, #3]
 80079e0:	f003 030f 	and.w	r3, r3, #15
 80079e4:	2101      	movs	r1, #1
 80079e6:	fa01 f303 	lsl.w	r3, r1, r3
 80079ea:	6939      	ldr	r1, [r7, #16]
 80079ec:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80079f0:	4313      	orrs	r3, r2
 80079f2:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	699b      	ldr	r3, [r3, #24]
 80079f8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007a00:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	da03      	bge.n	8007a10 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007a08:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a0c:	61bb      	str	r3, [r7, #24]
 8007a0e:	e001      	b.n	8007a14 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8007a10:	2300      	movs	r3, #0
 8007a12:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f7ff fef9 	bl	800780c <USB_GetHostSpeed>
 8007a1a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007a1c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d106      	bne.n	8007a32 <USB_HC_Init+0x1d6>
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2b02      	cmp	r3, #2
 8007a28:	d003      	beq.n	8007a32 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007a2a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007a2e:	617b      	str	r3, [r7, #20]
 8007a30:	e001      	b.n	8007a36 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007a32:	2300      	movs	r3, #0
 8007a34:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a36:	787b      	ldrb	r3, [r7, #1]
 8007a38:	059b      	lsls	r3, r3, #22
 8007a3a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007a3e:	78bb      	ldrb	r3, [r7, #2]
 8007a40:	02db      	lsls	r3, r3, #11
 8007a42:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a46:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007a48:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007a4c:	049b      	lsls	r3, r3, #18
 8007a4e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007a52:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8007a54:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007a56:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007a5a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007a5c:	69bb      	ldr	r3, [r7, #24]
 8007a5e:	431a      	orrs	r2, r3
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a64:	78fa      	ldrb	r2, [r7, #3]
 8007a66:	0151      	lsls	r1, r2, #5
 8007a68:	693a      	ldr	r2, [r7, #16]
 8007a6a:	440a      	add	r2, r1
 8007a6c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007a70:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a74:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007a76:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007a7a:	2b03      	cmp	r3, #3
 8007a7c:	d003      	beq.n	8007a86 <USB_HC_Init+0x22a>
 8007a7e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d10f      	bne.n	8007aa6 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007a86:	78fb      	ldrb	r3, [r7, #3]
 8007a88:	015a      	lsls	r2, r3, #5
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	78fa      	ldrb	r2, [r7, #3]
 8007a96:	0151      	lsls	r1, r2, #5
 8007a98:	693a      	ldr	r2, [r7, #16]
 8007a9a:	440a      	add	r2, r1
 8007a9c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007aa0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007aa4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007aa6:	7ffb      	ldrb	r3, [r7, #31]
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3720      	adds	r7, #32
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	40040000 	.word	0x40040000

08007ab4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b08c      	sub	sp, #48	@ 0x30
 8007ab8:	af02      	add	r7, sp, #8
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	4613      	mov	r3, r2
 8007ac0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	785b      	ldrb	r3, [r3, #1]
 8007aca:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8007acc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007ad0:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	4a5d      	ldr	r2, [pc, #372]	@ (8007c4c <USB_HC_StartXfer+0x198>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d12f      	bne.n	8007b3a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8007ada:	79fb      	ldrb	r3, [r7, #7]
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d11c      	bne.n	8007b1a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	7c9b      	ldrb	r3, [r3, #18]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d003      	beq.n	8007af0 <USB_HC_StartXfer+0x3c>
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	7c9b      	ldrb	r3, [r3, #18]
 8007aec:	2b02      	cmp	r3, #2
 8007aee:	d124      	bne.n	8007b3a <USB_HC_StartXfer+0x86>
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	799b      	ldrb	r3, [r3, #6]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d120      	bne.n	8007b3a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	015a      	lsls	r2, r3, #5
 8007afc:	6a3b      	ldr	r3, [r7, #32]
 8007afe:	4413      	add	r3, r2
 8007b00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b04:	68db      	ldr	r3, [r3, #12]
 8007b06:	69fa      	ldr	r2, [r7, #28]
 8007b08:	0151      	lsls	r1, r2, #5
 8007b0a:	6a3a      	ldr	r2, [r7, #32]
 8007b0c:	440a      	add	r2, r1
 8007b0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b16:	60d3      	str	r3, [r2, #12]
 8007b18:	e00f      	b.n	8007b3a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	791b      	ldrb	r3, [r3, #4]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d10b      	bne.n	8007b3a <USB_HC_StartXfer+0x86>
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	795b      	ldrb	r3, [r3, #5]
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d107      	bne.n	8007b3a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	785b      	ldrb	r3, [r3, #1]
 8007b2e:	4619      	mov	r1, r3
 8007b30:	68f8      	ldr	r0, [r7, #12]
 8007b32:	f000 fb6b 	bl	800820c <USB_DoPing>
        return HAL_OK;
 8007b36:	2300      	movs	r3, #0
 8007b38:	e232      	b.n	8007fa0 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	799b      	ldrb	r3, [r3, #6]
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d158      	bne.n	8007bf4 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8007b42:	2301      	movs	r3, #1
 8007b44:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	78db      	ldrb	r3, [r3, #3]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d007      	beq.n	8007b5e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007b4e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007b50:	68ba      	ldr	r2, [r7, #8]
 8007b52:	8a92      	ldrh	r2, [r2, #20]
 8007b54:	fb03 f202 	mul.w	r2, r3, r2
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	61da      	str	r2, [r3, #28]
 8007b5c:	e07c      	b.n	8007c58 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	7c9b      	ldrb	r3, [r3, #18]
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d130      	bne.n	8007bc8 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	6a1b      	ldr	r3, [r3, #32]
 8007b6a:	2bbc      	cmp	r3, #188	@ 0xbc
 8007b6c:	d918      	bls.n	8007ba0 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	8a9b      	ldrh	r3, [r3, #20]
 8007b72:	461a      	mov	r2, r3
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	69da      	ldr	r2, [r3, #28]
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d003      	beq.n	8007b90 <USB_HC_StartXfer+0xdc>
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	2b02      	cmp	r3, #2
 8007b8e:	d103      	bne.n	8007b98 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	2202      	movs	r2, #2
 8007b94:	60da      	str	r2, [r3, #12]
 8007b96:	e05f      	b.n	8007c58 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	60da      	str	r2, [r3, #12]
 8007b9e:	e05b      	b.n	8007c58 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	6a1a      	ldr	r2, [r3, #32]
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d007      	beq.n	8007bc0 <USB_HC_StartXfer+0x10c>
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	2b02      	cmp	r3, #2
 8007bb6:	d003      	beq.n	8007bc0 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	2204      	movs	r2, #4
 8007bbc:	60da      	str	r2, [r3, #12]
 8007bbe:	e04b      	b.n	8007c58 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	2203      	movs	r2, #3
 8007bc4:	60da      	str	r2, [r3, #12]
 8007bc6:	e047      	b.n	8007c58 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007bc8:	79fb      	ldrb	r3, [r7, #7]
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d10d      	bne.n	8007bea <USB_HC_StartXfer+0x136>
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	6a1b      	ldr	r3, [r3, #32]
 8007bd2:	68ba      	ldr	r2, [r7, #8]
 8007bd4:	8a92      	ldrh	r2, [r2, #20]
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d907      	bls.n	8007bea <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007bda:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007bdc:	68ba      	ldr	r2, [r7, #8]
 8007bde:	8a92      	ldrh	r2, [r2, #20]
 8007be0:	fb03 f202 	mul.w	r2, r3, r2
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	61da      	str	r2, [r3, #28]
 8007be8:	e036      	b.n	8007c58 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	6a1a      	ldr	r2, [r3, #32]
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	61da      	str	r2, [r3, #28]
 8007bf2:	e031      	b.n	8007c58 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	6a1b      	ldr	r3, [r3, #32]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d018      	beq.n	8007c2e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	6a1b      	ldr	r3, [r3, #32]
 8007c00:	68ba      	ldr	r2, [r7, #8]
 8007c02:	8a92      	ldrh	r2, [r2, #20]
 8007c04:	4413      	add	r3, r2
 8007c06:	3b01      	subs	r3, #1
 8007c08:	68ba      	ldr	r2, [r7, #8]
 8007c0a:	8a92      	ldrh	r2, [r2, #20]
 8007c0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c10:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8007c12:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007c14:	8b7b      	ldrh	r3, [r7, #26]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d90b      	bls.n	8007c32 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8007c1a:	8b7b      	ldrh	r3, [r7, #26]
 8007c1c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007c1e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007c20:	68ba      	ldr	r2, [r7, #8]
 8007c22:	8a92      	ldrh	r2, [r2, #20]
 8007c24:	fb03 f202 	mul.w	r2, r3, r2
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	61da      	str	r2, [r3, #28]
 8007c2c:	e001      	b.n	8007c32 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	78db      	ldrb	r3, [r3, #3]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00a      	beq.n	8007c50 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007c3a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007c3c:	68ba      	ldr	r2, [r7, #8]
 8007c3e:	8a92      	ldrh	r2, [r2, #20]
 8007c40:	fb03 f202 	mul.w	r2, r3, r2
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	61da      	str	r2, [r3, #28]
 8007c48:	e006      	b.n	8007c58 <USB_HC_StartXfer+0x1a4>
 8007c4a:	bf00      	nop
 8007c4c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	6a1a      	ldr	r2, [r3, #32]
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	69db      	ldr	r3, [r3, #28]
 8007c5c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007c60:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007c62:	04d9      	lsls	r1, r3, #19
 8007c64:	4ba3      	ldr	r3, [pc, #652]	@ (8007ef4 <USB_HC_StartXfer+0x440>)
 8007c66:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007c68:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	7d9b      	ldrb	r3, [r3, #22]
 8007c6e:	075b      	lsls	r3, r3, #29
 8007c70:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007c74:	69f9      	ldr	r1, [r7, #28]
 8007c76:	0148      	lsls	r0, r1, #5
 8007c78:	6a39      	ldr	r1, [r7, #32]
 8007c7a:	4401      	add	r1, r0
 8007c7c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007c80:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007c82:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007c84:	79fb      	ldrb	r3, [r7, #7]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d009      	beq.n	8007c9e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	6999      	ldr	r1, [r3, #24]
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	015a      	lsls	r2, r3, #5
 8007c92:	6a3b      	ldr	r3, [r7, #32]
 8007c94:	4413      	add	r3, r2
 8007c96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c9a:	460a      	mov	r2, r1
 8007c9c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007c9e:	6a3b      	ldr	r3, [r7, #32]
 8007ca0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	f003 0301 	and.w	r3, r3, #1
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	bf0c      	ite	eq
 8007cae:	2301      	moveq	r3, #1
 8007cb0:	2300      	movne	r3, #0
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	015a      	lsls	r2, r3, #5
 8007cba:	6a3b      	ldr	r3, [r7, #32]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	69fa      	ldr	r2, [r7, #28]
 8007cc6:	0151      	lsls	r1, r2, #5
 8007cc8:	6a3a      	ldr	r2, [r7, #32]
 8007cca:	440a      	add	r2, r1
 8007ccc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007cd0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007cd4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007cd6:	69fb      	ldr	r3, [r7, #28]
 8007cd8:	015a      	lsls	r2, r3, #5
 8007cda:	6a3b      	ldr	r3, [r7, #32]
 8007cdc:	4413      	add	r3, r2
 8007cde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	7e7b      	ldrb	r3, [r7, #25]
 8007ce6:	075b      	lsls	r3, r3, #29
 8007ce8:	69f9      	ldr	r1, [r7, #28]
 8007cea:	0148      	lsls	r0, r1, #5
 8007cec:	6a39      	ldr	r1, [r7, #32]
 8007cee:	4401      	add	r1, r0
 8007cf0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	799b      	ldrb	r3, [r3, #6]
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	f040 80c3 	bne.w	8007e88 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	7c5b      	ldrb	r3, [r3, #17]
 8007d06:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007d08:	68ba      	ldr	r2, [r7, #8]
 8007d0a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	69fa      	ldr	r2, [r7, #28]
 8007d10:	0151      	lsls	r1, r2, #5
 8007d12:	6a3a      	ldr	r2, [r7, #32]
 8007d14:	440a      	add	r2, r1
 8007d16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007d1a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007d1e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8007d20:	69fb      	ldr	r3, [r7, #28]
 8007d22:	015a      	lsls	r2, r3, #5
 8007d24:	6a3b      	ldr	r3, [r7, #32]
 8007d26:	4413      	add	r3, r2
 8007d28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d2c:	68db      	ldr	r3, [r3, #12]
 8007d2e:	69fa      	ldr	r2, [r7, #28]
 8007d30:	0151      	lsls	r1, r2, #5
 8007d32:	6a3a      	ldr	r2, [r7, #32]
 8007d34:	440a      	add	r2, r1
 8007d36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d3a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007d3e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	79db      	ldrb	r3, [r3, #7]
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d123      	bne.n	8007d90 <USB_HC_StartXfer+0x2dc>
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	78db      	ldrb	r3, [r3, #3]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d11f      	bne.n	8007d90 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	015a      	lsls	r2, r3, #5
 8007d54:	6a3b      	ldr	r3, [r7, #32]
 8007d56:	4413      	add	r3, r2
 8007d58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	69fa      	ldr	r2, [r7, #28]
 8007d60:	0151      	lsls	r1, r2, #5
 8007d62:	6a3a      	ldr	r2, [r7, #32]
 8007d64:	440a      	add	r2, r1
 8007d66:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d6e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	015a      	lsls	r2, r3, #5
 8007d74:	6a3b      	ldr	r3, [r7, #32]
 8007d76:	4413      	add	r3, r2
 8007d78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	69fa      	ldr	r2, [r7, #28]
 8007d80:	0151      	lsls	r1, r2, #5
 8007d82:	6a3a      	ldr	r2, [r7, #32]
 8007d84:	440a      	add	r2, r1
 8007d86:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d8e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	7c9b      	ldrb	r3, [r3, #18]
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d003      	beq.n	8007da0 <USB_HC_StartXfer+0x2ec>
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	7c9b      	ldrb	r3, [r3, #18]
 8007d9c:	2b03      	cmp	r3, #3
 8007d9e:	d117      	bne.n	8007dd0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d113      	bne.n	8007dd0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	78db      	ldrb	r3, [r3, #3]
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d10f      	bne.n	8007dd0 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007db0:	69fb      	ldr	r3, [r7, #28]
 8007db2:	015a      	lsls	r2, r3, #5
 8007db4:	6a3b      	ldr	r3, [r7, #32]
 8007db6:	4413      	add	r3, r2
 8007db8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	69fa      	ldr	r2, [r7, #28]
 8007dc0:	0151      	lsls	r1, r2, #5
 8007dc2:	6a3a      	ldr	r2, [r7, #32]
 8007dc4:	440a      	add	r2, r1
 8007dc6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007dca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007dce:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	7c9b      	ldrb	r3, [r3, #18]
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d162      	bne.n	8007e9e <USB_HC_StartXfer+0x3ea>
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	78db      	ldrb	r3, [r3, #3]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d15e      	bne.n	8007e9e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	3b01      	subs	r3, #1
 8007de6:	2b03      	cmp	r3, #3
 8007de8:	d858      	bhi.n	8007e9c <USB_HC_StartXfer+0x3e8>
 8007dea:	a201      	add	r2, pc, #4	@ (adr r2, 8007df0 <USB_HC_StartXfer+0x33c>)
 8007dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df0:	08007e01 	.word	0x08007e01
 8007df4:	08007e23 	.word	0x08007e23
 8007df8:	08007e45 	.word	0x08007e45
 8007dfc:	08007e67 	.word	0x08007e67
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	015a      	lsls	r2, r3, #5
 8007e04:	6a3b      	ldr	r3, [r7, #32]
 8007e06:	4413      	add	r3, r2
 8007e08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	69fa      	ldr	r2, [r7, #28]
 8007e10:	0151      	lsls	r1, r2, #5
 8007e12:	6a3a      	ldr	r2, [r7, #32]
 8007e14:	440a      	add	r2, r1
 8007e16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e1e:	6053      	str	r3, [r2, #4]
          break;
 8007e20:	e03d      	b.n	8007e9e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8007e22:	69fb      	ldr	r3, [r7, #28]
 8007e24:	015a      	lsls	r2, r3, #5
 8007e26:	6a3b      	ldr	r3, [r7, #32]
 8007e28:	4413      	add	r3, r2
 8007e2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	69fa      	ldr	r2, [r7, #28]
 8007e32:	0151      	lsls	r1, r2, #5
 8007e34:	6a3a      	ldr	r2, [r7, #32]
 8007e36:	440a      	add	r2, r1
 8007e38:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e3c:	f043 030e 	orr.w	r3, r3, #14
 8007e40:	6053      	str	r3, [r2, #4]
          break;
 8007e42:	e02c      	b.n	8007e9e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8007e44:	69fb      	ldr	r3, [r7, #28]
 8007e46:	015a      	lsls	r2, r3, #5
 8007e48:	6a3b      	ldr	r3, [r7, #32]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	69fa      	ldr	r2, [r7, #28]
 8007e54:	0151      	lsls	r1, r2, #5
 8007e56:	6a3a      	ldr	r2, [r7, #32]
 8007e58:	440a      	add	r2, r1
 8007e5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007e62:	6053      	str	r3, [r2, #4]
          break;
 8007e64:	e01b      	b.n	8007e9e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	015a      	lsls	r2, r3, #5
 8007e6a:	6a3b      	ldr	r3, [r7, #32]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	69fa      	ldr	r2, [r7, #28]
 8007e76:	0151      	lsls	r1, r2, #5
 8007e78:	6a3a      	ldr	r2, [r7, #32]
 8007e7a:	440a      	add	r2, r1
 8007e7c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e80:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007e84:	6053      	str	r3, [r2, #4]
          break;
 8007e86:	e00a      	b.n	8007e9e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	015a      	lsls	r2, r3, #5
 8007e8c:	6a3b      	ldr	r3, [r7, #32]
 8007e8e:	4413      	add	r3, r2
 8007e90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e94:	461a      	mov	r2, r3
 8007e96:	2300      	movs	r3, #0
 8007e98:	6053      	str	r3, [r2, #4]
 8007e9a:	e000      	b.n	8007e9e <USB_HC_StartXfer+0x3ea>
          break;
 8007e9c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	015a      	lsls	r2, r3, #5
 8007ea2:	6a3b      	ldr	r3, [r7, #32]
 8007ea4:	4413      	add	r3, r2
 8007ea6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007eb4:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	78db      	ldrb	r3, [r3, #3]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d004      	beq.n	8007ec8 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ec4:	613b      	str	r3, [r7, #16]
 8007ec6:	e003      	b.n	8007ed0 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007ece:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007ed6:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	015a      	lsls	r2, r3, #5
 8007edc:	6a3b      	ldr	r3, [r7, #32]
 8007ede:	4413      	add	r3, r2
 8007ee0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007eea:	79fb      	ldrb	r3, [r7, #7]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d003      	beq.n	8007ef8 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	e055      	b.n	8007fa0 <USB_HC_StartXfer+0x4ec>
 8007ef4:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	78db      	ldrb	r3, [r3, #3]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d14e      	bne.n	8007f9e <USB_HC_StartXfer+0x4ea>
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	6a1b      	ldr	r3, [r3, #32]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d04a      	beq.n	8007f9e <USB_HC_StartXfer+0x4ea>
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	79db      	ldrb	r3, [r3, #7]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d146      	bne.n	8007f9e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	7c9b      	ldrb	r3, [r3, #18]
 8007f14:	2b03      	cmp	r3, #3
 8007f16:	d831      	bhi.n	8007f7c <USB_HC_StartXfer+0x4c8>
 8007f18:	a201      	add	r2, pc, #4	@ (adr r2, 8007f20 <USB_HC_StartXfer+0x46c>)
 8007f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f1e:	bf00      	nop
 8007f20:	08007f31 	.word	0x08007f31
 8007f24:	08007f55 	.word	0x08007f55
 8007f28:	08007f31 	.word	0x08007f31
 8007f2c:	08007f55 	.word	0x08007f55
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	6a1b      	ldr	r3, [r3, #32]
 8007f34:	3303      	adds	r3, #3
 8007f36:	089b      	lsrs	r3, r3, #2
 8007f38:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007f3a:	8afa      	ldrh	r2, [r7, #22]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d91c      	bls.n	8007f80 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	699b      	ldr	r3, [r3, #24]
 8007f4a:	f043 0220 	orr.w	r2, r3, #32
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	619a      	str	r2, [r3, #24]
        }
        break;
 8007f52:	e015      	b.n	8007f80 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	6a1b      	ldr	r3, [r3, #32]
 8007f58:	3303      	adds	r3, #3
 8007f5a:	089b      	lsrs	r3, r3, #2
 8007f5c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007f5e:	8afa      	ldrh	r2, [r7, #22]
 8007f60:	6a3b      	ldr	r3, [r7, #32]
 8007f62:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007f66:	691b      	ldr	r3, [r3, #16]
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d90a      	bls.n	8007f84 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	699b      	ldr	r3, [r3, #24]
 8007f72:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	619a      	str	r2, [r3, #24]
        }
        break;
 8007f7a:	e003      	b.n	8007f84 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8007f7c:	bf00      	nop
 8007f7e:	e002      	b.n	8007f86 <USB_HC_StartXfer+0x4d2>
        break;
 8007f80:	bf00      	nop
 8007f82:	e000      	b.n	8007f86 <USB_HC_StartXfer+0x4d2>
        break;
 8007f84:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	6999      	ldr	r1, [r3, #24]
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	785a      	ldrb	r2, [r3, #1]
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	6a1b      	ldr	r3, [r3, #32]
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	2000      	movs	r0, #0
 8007f96:	9000      	str	r0, [sp, #0]
 8007f98:	68f8      	ldr	r0, [r7, #12]
 8007f9a:	f7ff f9c9 	bl	8007330 <USB_WritePacket>
  }

  return HAL_OK;
 8007f9e:	2300      	movs	r3, #0
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3728      	adds	r7, #40	@ 0x28
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b085      	sub	sp, #20
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007fba:	695b      	ldr	r3, [r3, #20]
 8007fbc:	b29b      	uxth	r3, r3
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3714      	adds	r7, #20
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr

08007fca <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007fca:	b480      	push	{r7}
 8007fcc:	b089      	sub	sp, #36	@ 0x24
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007fda:	78fb      	ldrb	r3, [r7, #3]
 8007fdc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	015a      	lsls	r2, r3, #5
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	4413      	add	r3, r2
 8007fea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	0c9b      	lsrs	r3, r3, #18
 8007ff2:	f003 0303 	and.w	r3, r3, #3
 8007ff6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	015a      	lsls	r2, r3, #5
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	4413      	add	r3, r2
 8008000:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	0fdb      	lsrs	r3, r3, #31
 8008008:	f003 0301 	and.w	r3, r3, #1
 800800c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800800e:	69bb      	ldr	r3, [r7, #24]
 8008010:	015a      	lsls	r2, r3, #5
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	4413      	add	r3, r2
 8008016:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	0fdb      	lsrs	r3, r3, #31
 800801e:	f003 0301 	and.w	r3, r3, #1
 8008022:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	f003 0320 	and.w	r3, r3, #32
 800802c:	2b20      	cmp	r3, #32
 800802e:	d10d      	bne.n	800804c <USB_HC_Halt+0x82>
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d10a      	bne.n	800804c <USB_HC_Halt+0x82>
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d005      	beq.n	8008048 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	2b01      	cmp	r3, #1
 8008040:	d002      	beq.n	8008048 <USB_HC_Halt+0x7e>
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	2b03      	cmp	r3, #3
 8008046:	d101      	bne.n	800804c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8008048:	2300      	movs	r3, #0
 800804a:	e0d8      	b.n	80081fe <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d002      	beq.n	8008058 <USB_HC_Halt+0x8e>
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	2b02      	cmp	r3, #2
 8008056:	d173      	bne.n	8008140 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	015a      	lsls	r2, r3, #5
 800805c:	69fb      	ldr	r3, [r7, #28]
 800805e:	4413      	add	r3, r2
 8008060:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	69ba      	ldr	r2, [r7, #24]
 8008068:	0151      	lsls	r1, r2, #5
 800806a:	69fa      	ldr	r2, [r7, #28]
 800806c:	440a      	add	r2, r1
 800806e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008072:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008076:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	689b      	ldr	r3, [r3, #8]
 800807c:	f003 0320 	and.w	r3, r3, #32
 8008080:	2b00      	cmp	r3, #0
 8008082:	d14a      	bne.n	800811a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008088:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800808c:	2b00      	cmp	r3, #0
 800808e:	d133      	bne.n	80080f8 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008090:	69bb      	ldr	r3, [r7, #24]
 8008092:	015a      	lsls	r2, r3, #5
 8008094:	69fb      	ldr	r3, [r7, #28]
 8008096:	4413      	add	r3, r2
 8008098:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	69ba      	ldr	r2, [r7, #24]
 80080a0:	0151      	lsls	r1, r2, #5
 80080a2:	69fa      	ldr	r2, [r7, #28]
 80080a4:	440a      	add	r2, r1
 80080a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80080ae:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80080b0:	69bb      	ldr	r3, [r7, #24]
 80080b2:	015a      	lsls	r2, r3, #5
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	4413      	add	r3, r2
 80080b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	69ba      	ldr	r2, [r7, #24]
 80080c0:	0151      	lsls	r1, r2, #5
 80080c2:	69fa      	ldr	r2, [r7, #28]
 80080c4:	440a      	add	r2, r1
 80080c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80080ce:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	3301      	adds	r3, #1
 80080d4:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80080dc:	d82e      	bhi.n	800813c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80080de:	69bb      	ldr	r3, [r7, #24]
 80080e0:	015a      	lsls	r2, r3, #5
 80080e2:	69fb      	ldr	r3, [r7, #28]
 80080e4:	4413      	add	r3, r2
 80080e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80080f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080f4:	d0ec      	beq.n	80080d0 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80080f6:	e081      	b.n	80081fc <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	015a      	lsls	r2, r3, #5
 80080fc:	69fb      	ldr	r3, [r7, #28]
 80080fe:	4413      	add	r3, r2
 8008100:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	69ba      	ldr	r2, [r7, #24]
 8008108:	0151      	lsls	r1, r2, #5
 800810a:	69fa      	ldr	r2, [r7, #28]
 800810c:	440a      	add	r2, r1
 800810e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008112:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008116:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008118:	e070      	b.n	80081fc <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800811a:	69bb      	ldr	r3, [r7, #24]
 800811c:	015a      	lsls	r2, r3, #5
 800811e:	69fb      	ldr	r3, [r7, #28]
 8008120:	4413      	add	r3, r2
 8008122:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	69ba      	ldr	r2, [r7, #24]
 800812a:	0151      	lsls	r1, r2, #5
 800812c:	69fa      	ldr	r2, [r7, #28]
 800812e:	440a      	add	r2, r1
 8008130:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008134:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008138:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800813a:	e05f      	b.n	80081fc <USB_HC_Halt+0x232>
            break;
 800813c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800813e:	e05d      	b.n	80081fc <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008140:	69bb      	ldr	r3, [r7, #24]
 8008142:	015a      	lsls	r2, r3, #5
 8008144:	69fb      	ldr	r3, [r7, #28]
 8008146:	4413      	add	r3, r2
 8008148:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	69ba      	ldr	r2, [r7, #24]
 8008150:	0151      	lsls	r1, r2, #5
 8008152:	69fa      	ldr	r2, [r7, #28]
 8008154:	440a      	add	r2, r1
 8008156:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800815a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800815e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008166:	691b      	ldr	r3, [r3, #16]
 8008168:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800816c:	2b00      	cmp	r3, #0
 800816e:	d133      	bne.n	80081d8 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008170:	69bb      	ldr	r3, [r7, #24]
 8008172:	015a      	lsls	r2, r3, #5
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	4413      	add	r3, r2
 8008178:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	69ba      	ldr	r2, [r7, #24]
 8008180:	0151      	lsls	r1, r2, #5
 8008182:	69fa      	ldr	r2, [r7, #28]
 8008184:	440a      	add	r2, r1
 8008186:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800818a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800818e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008190:	69bb      	ldr	r3, [r7, #24]
 8008192:	015a      	lsls	r2, r3, #5
 8008194:	69fb      	ldr	r3, [r7, #28]
 8008196:	4413      	add	r3, r2
 8008198:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	69ba      	ldr	r2, [r7, #24]
 80081a0:	0151      	lsls	r1, r2, #5
 80081a2:	69fa      	ldr	r2, [r7, #28]
 80081a4:	440a      	add	r2, r1
 80081a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80081aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80081ae:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	3301      	adds	r3, #1
 80081b4:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80081bc:	d81d      	bhi.n	80081fa <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80081be:	69bb      	ldr	r3, [r7, #24]
 80081c0:	015a      	lsls	r2, r3, #5
 80081c2:	69fb      	ldr	r3, [r7, #28]
 80081c4:	4413      	add	r3, r2
 80081c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80081d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80081d4:	d0ec      	beq.n	80081b0 <USB_HC_Halt+0x1e6>
 80081d6:	e011      	b.n	80081fc <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80081d8:	69bb      	ldr	r3, [r7, #24]
 80081da:	015a      	lsls	r2, r3, #5
 80081dc:	69fb      	ldr	r3, [r7, #28]
 80081de:	4413      	add	r3, r2
 80081e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	69ba      	ldr	r2, [r7, #24]
 80081e8:	0151      	lsls	r1, r2, #5
 80081ea:	69fa      	ldr	r2, [r7, #28]
 80081ec:	440a      	add	r2, r1
 80081ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80081f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80081f6:	6013      	str	r3, [r2, #0]
 80081f8:	e000      	b.n	80081fc <USB_HC_Halt+0x232>
          break;
 80081fa:	bf00      	nop
    }
  }

  return HAL_OK;
 80081fc:	2300      	movs	r3, #0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3724      	adds	r7, #36	@ 0x24
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr
	...

0800820c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800820c:	b480      	push	{r7}
 800820e:	b087      	sub	sp, #28
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	460b      	mov	r3, r1
 8008216:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800821c:	78fb      	ldrb	r3, [r7, #3]
 800821e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008220:	2301      	movs	r3, #1
 8008222:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	04da      	lsls	r2, r3, #19
 8008228:	4b15      	ldr	r3, [pc, #84]	@ (8008280 <USB_DoPing+0x74>)
 800822a:	4013      	ands	r3, r2
 800822c:	693a      	ldr	r2, [r7, #16]
 800822e:	0151      	lsls	r1, r2, #5
 8008230:	697a      	ldr	r2, [r7, #20]
 8008232:	440a      	add	r2, r1
 8008234:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008238:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800823c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	015a      	lsls	r2, r3, #5
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	4413      	add	r3, r2
 8008246:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008254:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800825c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	015a      	lsls	r2, r3, #5
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	4413      	add	r3, r2
 8008266:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800826a:	461a      	mov	r2, r3
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008270:	2300      	movs	r3, #0
}
 8008272:	4618      	mov	r0, r3
 8008274:	371c      	adds	r7, #28
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop
 8008280:	1ff80000 	.word	0x1ff80000

08008284 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b088      	sub	sp, #32
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800828c:	2300      	movs	r3, #0
 800828e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008294:	2300      	movs	r3, #0
 8008296:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f7fe ff8c 	bl	80071b6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800829e:	2110      	movs	r1, #16
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f7fe ffe5 	bl	8007270 <USB_FlushTxFifo>
 80082a6:	4603      	mov	r3, r0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d001      	beq.n	80082b0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f7ff f80f 	bl	80072d4 <USB_FlushRxFifo>
 80082b6:	4603      	mov	r3, r0
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d001      	beq.n	80082c0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80082c0:	2300      	movs	r3, #0
 80082c2:	61bb      	str	r3, [r7, #24]
 80082c4:	e01f      	b.n	8008306 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80082c6:	69bb      	ldr	r3, [r7, #24]
 80082c8:	015a      	lsls	r2, r3, #5
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	4413      	add	r3, r2
 80082ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80082dc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80082e4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80082ec:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	015a      	lsls	r2, r3, #5
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	4413      	add	r3, r2
 80082f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082fa:	461a      	mov	r2, r3
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	3301      	adds	r3, #1
 8008304:	61bb      	str	r3, [r7, #24]
 8008306:	69bb      	ldr	r3, [r7, #24]
 8008308:	2b0f      	cmp	r3, #15
 800830a:	d9dc      	bls.n	80082c6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800830c:	2300      	movs	r3, #0
 800830e:	61bb      	str	r3, [r7, #24]
 8008310:	e034      	b.n	800837c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008312:	69bb      	ldr	r3, [r7, #24]
 8008314:	015a      	lsls	r2, r3, #5
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	4413      	add	r3, r2
 800831a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008328:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008330:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008338:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800833a:	69bb      	ldr	r3, [r7, #24]
 800833c:	015a      	lsls	r2, r3, #5
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	4413      	add	r3, r2
 8008342:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008346:	461a      	mov	r2, r3
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	3301      	adds	r3, #1
 8008350:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008358:	d80c      	bhi.n	8008374 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800835a:	69bb      	ldr	r3, [r7, #24]
 800835c:	015a      	lsls	r2, r3, #5
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	4413      	add	r3, r2
 8008362:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800836c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008370:	d0ec      	beq.n	800834c <USB_StopHost+0xc8>
 8008372:	e000      	b.n	8008376 <USB_StopHost+0xf2>
        break;
 8008374:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008376:	69bb      	ldr	r3, [r7, #24]
 8008378:	3301      	adds	r3, #1
 800837a:	61bb      	str	r3, [r7, #24]
 800837c:	69bb      	ldr	r3, [r7, #24]
 800837e:	2b0f      	cmp	r3, #15
 8008380:	d9c7      	bls.n	8008312 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008388:	461a      	mov	r2, r3
 800838a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800838e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008396:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f7fe fefb 	bl	8007194 <USB_EnableGlobalInt>

  return ret;
 800839e:	7ffb      	ldrb	r3, [r7, #31]
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3720      	adds	r7, #32
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80083a8:	b590      	push	{r4, r7, lr}
 80083aa:	b089      	sub	sp, #36	@ 0x24
 80083ac:	af04      	add	r7, sp, #16
 80083ae:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80083b0:	2301      	movs	r3, #1
 80083b2:	2202      	movs	r2, #2
 80083b4:	2102      	movs	r1, #2
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 fc85 	bl	8008cc6 <USBH_FindInterface>
 80083bc:	4603      	mov	r3, r0
 80083be:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80083c0:	7bfb      	ldrb	r3, [r7, #15]
 80083c2:	2bff      	cmp	r3, #255	@ 0xff
 80083c4:	d002      	beq.n	80083cc <USBH_CDC_InterfaceInit+0x24>
 80083c6:	7bfb      	ldrb	r3, [r7, #15]
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d901      	bls.n	80083d0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80083cc:	2302      	movs	r3, #2
 80083ce:	e13d      	b.n	800864c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80083d0:	7bfb      	ldrb	r3, [r7, #15]
 80083d2:	4619      	mov	r1, r3
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 fc5a 	bl	8008c8e <USBH_SelectInterface>
 80083da:	4603      	mov	r3, r0
 80083dc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80083de:	7bbb      	ldrb	r3, [r7, #14]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d001      	beq.n	80083e8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80083e4:	2302      	movs	r3, #2
 80083e6:	e131      	b.n	800864c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80083ee:	2050      	movs	r0, #80	@ 0x50
 80083f0:	f002 fb64 	bl	800aabc <malloc>
 80083f4:	4603      	mov	r3, r0
 80083f6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80083fe:	69db      	ldr	r3, [r3, #28]
 8008400:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d101      	bne.n	800840c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008408:	2302      	movs	r3, #2
 800840a:	e11f      	b.n	800864c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800840c:	2250      	movs	r2, #80	@ 0x50
 800840e:	2100      	movs	r1, #0
 8008410:	68b8      	ldr	r0, [r7, #8]
 8008412:	f002 fd54 	bl	800aebe <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008416:	7bfb      	ldrb	r3, [r7, #15]
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	211a      	movs	r1, #26
 800841c:	fb01 f303 	mul.w	r3, r1, r3
 8008420:	4413      	add	r3, r2
 8008422:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	b25b      	sxtb	r3, r3
 800842a:	2b00      	cmp	r3, #0
 800842c:	da15      	bge.n	800845a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800842e:	7bfb      	ldrb	r3, [r7, #15]
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	211a      	movs	r1, #26
 8008434:	fb01 f303 	mul.w	r3, r1, r3
 8008438:	4413      	add	r3, r2
 800843a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800843e:	781a      	ldrb	r2, [r3, #0]
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008444:	7bfb      	ldrb	r3, [r7, #15]
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	211a      	movs	r1, #26
 800844a:	fb01 f303 	mul.w	r3, r1, r3
 800844e:	4413      	add	r3, r2
 8008450:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008454:	881a      	ldrh	r2, [r3, #0]
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	785b      	ldrb	r3, [r3, #1]
 800845e:	4619      	mov	r1, r3
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f001 ffbe 	bl	800a3e2 <USBH_AllocPipe>
 8008466:	4603      	mov	r3, r0
 8008468:	461a      	mov	r2, r3
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	7819      	ldrb	r1, [r3, #0]
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	7858      	ldrb	r0, [r3, #1]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008482:	68ba      	ldr	r2, [r7, #8]
 8008484:	8952      	ldrh	r2, [r2, #10]
 8008486:	9202      	str	r2, [sp, #8]
 8008488:	2203      	movs	r2, #3
 800848a:	9201      	str	r2, [sp, #4]
 800848c:	9300      	str	r3, [sp, #0]
 800848e:	4623      	mov	r3, r4
 8008490:	4602      	mov	r2, r0
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f001 ff76 	bl	800a384 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	2200      	movs	r2, #0
 800849e:	4619      	mov	r1, r3
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f002 fa85 	bl	800a9b0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80084a6:	2300      	movs	r3, #0
 80084a8:	2200      	movs	r2, #0
 80084aa:	210a      	movs	r1, #10
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 fc0a 	bl	8008cc6 <USBH_FindInterface>
 80084b2:	4603      	mov	r3, r0
 80084b4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80084b6:	7bfb      	ldrb	r3, [r7, #15]
 80084b8:	2bff      	cmp	r3, #255	@ 0xff
 80084ba:	d002      	beq.n	80084c2 <USBH_CDC_InterfaceInit+0x11a>
 80084bc:	7bfb      	ldrb	r3, [r7, #15]
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d901      	bls.n	80084c6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80084c2:	2302      	movs	r3, #2
 80084c4:	e0c2      	b.n	800864c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80084c6:	7bfb      	ldrb	r3, [r7, #15]
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	211a      	movs	r1, #26
 80084cc:	fb01 f303 	mul.w	r3, r1, r3
 80084d0:	4413      	add	r3, r2
 80084d2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	b25b      	sxtb	r3, r3
 80084da:	2b00      	cmp	r3, #0
 80084dc:	da16      	bge.n	800850c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80084de:	7bfb      	ldrb	r3, [r7, #15]
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	211a      	movs	r1, #26
 80084e4:	fb01 f303 	mul.w	r3, r1, r3
 80084e8:	4413      	add	r3, r2
 80084ea:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80084ee:	781a      	ldrb	r2, [r3, #0]
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80084f4:	7bfb      	ldrb	r3, [r7, #15]
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	211a      	movs	r1, #26
 80084fa:	fb01 f303 	mul.w	r3, r1, r3
 80084fe:	4413      	add	r3, r2
 8008500:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008504:	881a      	ldrh	r2, [r3, #0]
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	835a      	strh	r2, [r3, #26]
 800850a:	e015      	b.n	8008538 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800850c:	7bfb      	ldrb	r3, [r7, #15]
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	211a      	movs	r1, #26
 8008512:	fb01 f303 	mul.w	r3, r1, r3
 8008516:	4413      	add	r3, r2
 8008518:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800851c:	781a      	ldrb	r2, [r3, #0]
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008522:	7bfb      	ldrb	r3, [r7, #15]
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	211a      	movs	r1, #26
 8008528:	fb01 f303 	mul.w	r3, r1, r3
 800852c:	4413      	add	r3, r2
 800852e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008532:	881a      	ldrh	r2, [r3, #0]
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008538:	7bfb      	ldrb	r3, [r7, #15]
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	211a      	movs	r1, #26
 800853e:	fb01 f303 	mul.w	r3, r1, r3
 8008542:	4413      	add	r3, r2
 8008544:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	b25b      	sxtb	r3, r3
 800854c:	2b00      	cmp	r3, #0
 800854e:	da16      	bge.n	800857e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008550:	7bfb      	ldrb	r3, [r7, #15]
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	211a      	movs	r1, #26
 8008556:	fb01 f303 	mul.w	r3, r1, r3
 800855a:	4413      	add	r3, r2
 800855c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008560:	781a      	ldrb	r2, [r3, #0]
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008566:	7bfb      	ldrb	r3, [r7, #15]
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	211a      	movs	r1, #26
 800856c:	fb01 f303 	mul.w	r3, r1, r3
 8008570:	4413      	add	r3, r2
 8008572:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008576:	881a      	ldrh	r2, [r3, #0]
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	835a      	strh	r2, [r3, #26]
 800857c:	e015      	b.n	80085aa <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800857e:	7bfb      	ldrb	r3, [r7, #15]
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	211a      	movs	r1, #26
 8008584:	fb01 f303 	mul.w	r3, r1, r3
 8008588:	4413      	add	r3, r2
 800858a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800858e:	781a      	ldrb	r2, [r3, #0]
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008594:	7bfb      	ldrb	r3, [r7, #15]
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	211a      	movs	r1, #26
 800859a:	fb01 f303 	mul.w	r3, r1, r3
 800859e:	4413      	add	r3, r2
 80085a0:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80085a4:	881a      	ldrh	r2, [r3, #0]
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	7b9b      	ldrb	r3, [r3, #14]
 80085ae:	4619      	mov	r1, r3
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f001 ff16 	bl	800a3e2 <USBH_AllocPipe>
 80085b6:	4603      	mov	r3, r0
 80085b8:	461a      	mov	r2, r3
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	7bdb      	ldrb	r3, [r3, #15]
 80085c2:	4619      	mov	r1, r3
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f001 ff0c 	bl	800a3e2 <USBH_AllocPipe>
 80085ca:	4603      	mov	r3, r0
 80085cc:	461a      	mov	r2, r3
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	7b59      	ldrb	r1, [r3, #13]
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	7b98      	ldrb	r0, [r3, #14]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80085e6:	68ba      	ldr	r2, [r7, #8]
 80085e8:	8b12      	ldrh	r2, [r2, #24]
 80085ea:	9202      	str	r2, [sp, #8]
 80085ec:	2202      	movs	r2, #2
 80085ee:	9201      	str	r2, [sp, #4]
 80085f0:	9300      	str	r3, [sp, #0]
 80085f2:	4623      	mov	r3, r4
 80085f4:	4602      	mov	r2, r0
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f001 fec4 	bl	800a384 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	7b19      	ldrb	r1, [r3, #12]
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	7bd8      	ldrb	r0, [r3, #15]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008610:	68ba      	ldr	r2, [r7, #8]
 8008612:	8b52      	ldrh	r2, [r2, #26]
 8008614:	9202      	str	r2, [sp, #8]
 8008616:	2202      	movs	r2, #2
 8008618:	9201      	str	r2, [sp, #4]
 800861a:	9300      	str	r3, [sp, #0]
 800861c:	4623      	mov	r3, r4
 800861e:	4602      	mov	r2, r0
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f001 feaf 	bl	800a384 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	2200      	movs	r2, #0
 800862a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	7b5b      	ldrb	r3, [r3, #13]
 8008632:	2200      	movs	r2, #0
 8008634:	4619      	mov	r1, r3
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f002 f9ba 	bl	800a9b0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	7b1b      	ldrb	r3, [r3, #12]
 8008640:	2200      	movs	r2, #0
 8008642:	4619      	mov	r1, r3
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f002 f9b3 	bl	800a9b0 <USBH_LL_SetToggle>

  return USBH_OK;
 800864a:	2300      	movs	r3, #0
}
 800864c:	4618      	mov	r0, r3
 800864e:	3714      	adds	r7, #20
 8008650:	46bd      	mov	sp, r7
 8008652:	bd90      	pop	{r4, r7, pc}

08008654 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008662:	69db      	ldr	r3, [r3, #28]
 8008664:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d00e      	beq.n	800868c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	4619      	mov	r1, r3
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f001 fea4 	bl	800a3c2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	4619      	mov	r1, r3
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f001 fecf 	bl	800a424 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2200      	movs	r2, #0
 800868a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	7b1b      	ldrb	r3, [r3, #12]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00e      	beq.n	80086b2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	7b1b      	ldrb	r3, [r3, #12]
 8008698:	4619      	mov	r1, r3
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f001 fe91 	bl	800a3c2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	7b1b      	ldrb	r3, [r3, #12]
 80086a4:	4619      	mov	r1, r3
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f001 febc 	bl	800a424 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2200      	movs	r2, #0
 80086b0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	7b5b      	ldrb	r3, [r3, #13]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d00e      	beq.n	80086d8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	7b5b      	ldrb	r3, [r3, #13]
 80086be:	4619      	mov	r1, r3
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f001 fe7e 	bl	800a3c2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	7b5b      	ldrb	r3, [r3, #13]
 80086ca:	4619      	mov	r1, r3
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f001 fea9 	bl	800a424 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2200      	movs	r2, #0
 80086d6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80086de:	69db      	ldr	r3, [r3, #28]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d00b      	beq.n	80086fc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80086ea:	69db      	ldr	r3, [r3, #28]
 80086ec:	4618      	mov	r0, r3
 80086ee:	f002 f9ed 	bl	800aacc <free>
    phost->pActiveClass->pData = 0U;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80086f8:	2200      	movs	r2, #0
 80086fa:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3710      	adds	r7, #16
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b084      	sub	sp, #16
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008714:	69db      	ldr	r3, [r3, #28]
 8008716:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	3340      	adds	r3, #64	@ 0x40
 800871c:	4619      	mov	r1, r3
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 f8b1 	bl	8008886 <GetLineCoding>
 8008724:	4603      	mov	r3, r0
 8008726:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008728:	7afb      	ldrb	r3, [r7, #11]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d105      	bne.n	800873a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008734:	2102      	movs	r1, #2
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800873a:	7afb      	ldrb	r3, [r7, #11]
}
 800873c:	4618      	mov	r0, r3
 800873e:	3710      	adds	r7, #16
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b084      	sub	sp, #16
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800874c:	2301      	movs	r3, #1
 800874e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008750:	2300      	movs	r3, #0
 8008752:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800875a:	69db      	ldr	r3, [r3, #28]
 800875c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008764:	2b04      	cmp	r3, #4
 8008766:	d877      	bhi.n	8008858 <USBH_CDC_Process+0x114>
 8008768:	a201      	add	r2, pc, #4	@ (adr r2, 8008770 <USBH_CDC_Process+0x2c>)
 800876a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800876e:	bf00      	nop
 8008770:	08008785 	.word	0x08008785
 8008774:	0800878b 	.word	0x0800878b
 8008778:	080087bb 	.word	0x080087bb
 800877c:	0800882f 	.word	0x0800882f
 8008780:	0800883d 	.word	0x0800883d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008784:	2300      	movs	r3, #0
 8008786:	73fb      	strb	r3, [r7, #15]
      break;
 8008788:	e06d      	b.n	8008866 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800878e:	4619      	mov	r1, r3
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 f897 	bl	80088c4 <SetLineCoding>
 8008796:	4603      	mov	r3, r0
 8008798:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800879a:	7bbb      	ldrb	r3, [r7, #14]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d104      	bne.n	80087aa <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	2202      	movs	r2, #2
 80087a4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80087a8:	e058      	b.n	800885c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80087aa:	7bbb      	ldrb	r3, [r7, #14]
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d055      	beq.n	800885c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	2204      	movs	r2, #4
 80087b4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80087b8:	e050      	b.n	800885c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	3340      	adds	r3, #64	@ 0x40
 80087be:	4619      	mov	r1, r3
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 f860 	bl	8008886 <GetLineCoding>
 80087c6:	4603      	mov	r3, r0
 80087c8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80087ca:	7bbb      	ldrb	r3, [r7, #14]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d126      	bne.n	800881e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80087e2:	791b      	ldrb	r3, [r3, #4]
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d13b      	bne.n	8008860 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80087f2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d133      	bne.n	8008860 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008802:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008804:	429a      	cmp	r2, r3
 8008806:	d12b      	bne.n	8008860 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008810:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008812:	429a      	cmp	r2, r3
 8008814:	d124      	bne.n	8008860 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 f958 	bl	8008acc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800881c:	e020      	b.n	8008860 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800881e:	7bbb      	ldrb	r3, [r7, #14]
 8008820:	2b01      	cmp	r3, #1
 8008822:	d01d      	beq.n	8008860 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	2204      	movs	r2, #4
 8008828:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800882c:	e018      	b.n	8008860 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 f867 	bl	8008902 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f000 f8da 	bl	80089ee <CDC_ProcessReception>
      break;
 800883a:	e014      	b.n	8008866 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800883c:	2100      	movs	r1, #0
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f001 f81a 	bl	8009878 <USBH_ClrFeature>
 8008844:	4603      	mov	r3, r0
 8008846:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008848:	7bbb      	ldrb	r3, [r7, #14]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d10a      	bne.n	8008864 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	2200      	movs	r2, #0
 8008852:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8008856:	e005      	b.n	8008864 <USBH_CDC_Process+0x120>

    default:
      break;
 8008858:	bf00      	nop
 800885a:	e004      	b.n	8008866 <USBH_CDC_Process+0x122>
      break;
 800885c:	bf00      	nop
 800885e:	e002      	b.n	8008866 <USBH_CDC_Process+0x122>
      break;
 8008860:	bf00      	nop
 8008862:	e000      	b.n	8008866 <USBH_CDC_Process+0x122>
      break;
 8008864:	bf00      	nop

  }

  return status;
 8008866:	7bfb      	ldrb	r3, [r7, #15]
}
 8008868:	4618      	mov	r0, r3
 800886a:	3710      	adds	r7, #16
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008870:	b480      	push	{r7}
 8008872:	b083      	sub	sp, #12
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	370c      	adds	r7, #12
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr

08008886 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008886:	b580      	push	{r7, lr}
 8008888:	b082      	sub	sp, #8
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
 800888e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	22a1      	movs	r2, #161	@ 0xa1
 8008894:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2221      	movs	r2, #33	@ 0x21
 800889a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2200      	movs	r2, #0
 80088a0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2207      	movs	r2, #7
 80088ac:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	2207      	movs	r2, #7
 80088b2:	4619      	mov	r1, r3
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f001 fb14 	bl	8009ee2 <USBH_CtlReq>
 80088ba:	4603      	mov	r3, r0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3708      	adds	r7, #8
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b082      	sub	sp, #8
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2221      	movs	r2, #33	@ 0x21
 80088d2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2220      	movs	r2, #32
 80088d8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2200      	movs	r2, #0
 80088e4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2207      	movs	r2, #7
 80088ea:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	2207      	movs	r2, #7
 80088f0:	4619      	mov	r1, r3
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f001 faf5 	bl	8009ee2 <USBH_CtlReq>
 80088f8:	4603      	mov	r3, r0
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3708      	adds	r7, #8
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b086      	sub	sp, #24
 8008906:	af02      	add	r7, sp, #8
 8008908:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008910:	69db      	ldr	r3, [r3, #28]
 8008912:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008914:	2300      	movs	r3, #0
 8008916:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800891e:	2b01      	cmp	r3, #1
 8008920:	d002      	beq.n	8008928 <CDC_ProcessTransmission+0x26>
 8008922:	2b02      	cmp	r3, #2
 8008924:	d023      	beq.n	800896e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008926:	e05e      	b.n	80089e6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800892c:	68fa      	ldr	r2, [r7, #12]
 800892e:	8b12      	ldrh	r2, [r2, #24]
 8008930:	4293      	cmp	r3, r2
 8008932:	d90b      	bls.n	800894c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	69d9      	ldr	r1, [r3, #28]
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	8b1a      	ldrh	r2, [r3, #24]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	7b5b      	ldrb	r3, [r3, #13]
 8008940:	2001      	movs	r0, #1
 8008942:	9000      	str	r0, [sp, #0]
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f001 fcda 	bl	800a2fe <USBH_BulkSendData>
 800894a:	e00b      	b.n	8008964 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8008954:	b29a      	uxth	r2, r3
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	7b5b      	ldrb	r3, [r3, #13]
 800895a:	2001      	movs	r0, #1
 800895c:	9000      	str	r0, [sp, #0]
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f001 fccd 	bl	800a2fe <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2202      	movs	r2, #2
 8008968:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800896c:	e03b      	b.n	80089e6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	7b5b      	ldrb	r3, [r3, #13]
 8008972:	4619      	mov	r1, r3
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f001 fff1 	bl	800a95c <USBH_LL_GetURBState>
 800897a:	4603      	mov	r3, r0
 800897c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800897e:	7afb      	ldrb	r3, [r7, #11]
 8008980:	2b01      	cmp	r3, #1
 8008982:	d128      	bne.n	80089d6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008988:	68fa      	ldr	r2, [r7, #12]
 800898a:	8b12      	ldrh	r2, [r2, #24]
 800898c:	4293      	cmp	r3, r2
 800898e:	d90e      	bls.n	80089ae <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008994:	68fa      	ldr	r2, [r7, #12]
 8008996:	8b12      	ldrh	r2, [r2, #24]
 8008998:	1a9a      	subs	r2, r3, r2
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	69db      	ldr	r3, [r3, #28]
 80089a2:	68fa      	ldr	r2, [r7, #12]
 80089a4:	8b12      	ldrh	r2, [r2, #24]
 80089a6:	441a      	add	r2, r3
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	61da      	str	r2, [r3, #28]
 80089ac:	e002      	b.n	80089b4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2200      	movs	r2, #0
 80089b2:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d004      	beq.n	80089c6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2201      	movs	r2, #1
 80089c0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80089c4:	e00e      	b.n	80089e4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2200      	movs	r2, #0
 80089ca:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 f868 	bl	8008aa4 <USBH_CDC_TransmitCallback>
      break;
 80089d4:	e006      	b.n	80089e4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80089d6:	7afb      	ldrb	r3, [r7, #11]
 80089d8:	2b02      	cmp	r3, #2
 80089da:	d103      	bne.n	80089e4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2201      	movs	r2, #1
 80089e0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80089e4:	bf00      	nop
  }
}
 80089e6:	bf00      	nop
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b086      	sub	sp, #24
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80089fc:	69db      	ldr	r3, [r3, #28]
 80089fe:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008a00:	2300      	movs	r3, #0
 8008a02:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8008a0a:	2b03      	cmp	r3, #3
 8008a0c:	d002      	beq.n	8008a14 <CDC_ProcessReception+0x26>
 8008a0e:	2b04      	cmp	r3, #4
 8008a10:	d00e      	beq.n	8008a30 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008a12:	e043      	b.n	8008a9c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	6a19      	ldr	r1, [r3, #32]
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	8b5a      	ldrh	r2, [r3, #26]
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	7b1b      	ldrb	r3, [r3, #12]
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f001 fc91 	bl	800a348 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	2204      	movs	r2, #4
 8008a2a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008a2e:	e035      	b.n	8008a9c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	7b1b      	ldrb	r3, [r3, #12]
 8008a34:	4619      	mov	r1, r3
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f001 ff90 	bl	800a95c <USBH_LL_GetURBState>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008a40:	7cfb      	ldrb	r3, [r7, #19]
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d129      	bne.n	8008a9a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	7b1b      	ldrb	r3, [r3, #12]
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f001 fef3 	bl	800a838 <USBH_LL_GetLastXferSize>
 8008a52:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a58:	68fa      	ldr	r2, [r7, #12]
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d016      	beq.n	8008a8c <CDC_ProcessReception+0x9e>
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	8b5b      	ldrh	r3, [r3, #26]
 8008a62:	461a      	mov	r2, r3
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d110      	bne.n	8008a8c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	1ad2      	subs	r2, r2, r3
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	6a1a      	ldr	r2, [r3, #32]
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	441a      	add	r2, r3
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	2203      	movs	r2, #3
 8008a86:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008a8a:	e006      	b.n	8008a9a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 f80f 	bl	8008ab8 <USBH_CDC_ReceiveCallback>
      break;
 8008a9a:	bf00      	nop
  }
}
 8008a9c:	bf00      	nop
 8008a9e:	3718      	adds	r7, #24
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008aac:	bf00      	nop
 8008aae:	370c      	adds	r7, #12
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b083      	sub	sp, #12
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008ac0:	bf00      	nop
 8008ac2:	370c      	adds	r7, #12
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr

08008acc <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008ad4:	bf00      	nop
 8008ad6:	370c      	adds	r7, #12
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	60b9      	str	r1, [r7, #8]
 8008aea:	4613      	mov	r3, r2
 8008aec:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d101      	bne.n	8008af8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008af4:	2302      	movs	r3, #2
 8008af6:	e029      	b.n	8008b4c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	79fa      	ldrb	r2, [r7, #7]
 8008afc:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2200      	movs	r2, #0
 8008b04:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008b10:	68f8      	ldr	r0, [r7, #12]
 8008b12:	f000 f81f 	bl	8008b54 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2200      	movs	r2, #0
 8008b22:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2200      	movs	r2, #0
 8008b32:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d003      	beq.n	8008b44 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	68ba      	ldr	r2, [r7, #8]
 8008b40:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008b44:	68f8      	ldr	r0, [r7, #12]
 8008b46:	f001 fdc3 	bl	800a6d0 <USBH_LL_Init>

  return USBH_OK;
 8008b4a:	2300      	movs	r3, #0
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3710      	adds	r7, #16
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b084      	sub	sp, #16
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008b60:	2300      	movs	r3, #0
 8008b62:	60fb      	str	r3, [r7, #12]
 8008b64:	e009      	b.n	8008b7a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	33e0      	adds	r3, #224	@ 0xe0
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	4413      	add	r3, r2
 8008b70:	2200      	movs	r2, #0
 8008b72:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	3301      	adds	r3, #1
 8008b78:	60fb      	str	r3, [r7, #12]
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2b0f      	cmp	r3, #15
 8008b7e:	d9f2      	bls.n	8008b66 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008b80:	2300      	movs	r3, #0
 8008b82:	60fb      	str	r3, [r7, #12]
 8008b84:	e009      	b.n	8008b9a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	4413      	add	r3, r2
 8008b8c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008b90:	2200      	movs	r2, #0
 8008b92:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	3301      	adds	r3, #1
 8008b98:	60fb      	str	r3, [r7, #12]
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ba0:	d3f1      	bcc.n	8008b86 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2200      	movs	r2, #0
 8008bac:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2240      	movs	r2, #64	@ 0x40
 8008bc6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2201      	movs	r2, #1
 8008bda:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2200      	movs	r2, #0
 8008be2:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	331c      	adds	r3, #28
 8008bf2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008bf6:	2100      	movs	r1, #0
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f002 f960 	bl	800aebe <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008c04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008c08:	2100      	movs	r1, #0
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f002 f957 	bl	800aebe <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008c16:	2212      	movs	r2, #18
 8008c18:	2100      	movs	r1, #0
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f002 f94f 	bl	800aebe <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008c26:	223e      	movs	r2, #62	@ 0x3e
 8008c28:	2100      	movs	r1, #0
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f002 f947 	bl	800aebe <memset>

  return USBH_OK;
 8008c30:	2300      	movs	r3, #0
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3710      	adds	r7, #16
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}

08008c3a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008c3a:	b480      	push	{r7}
 8008c3c:	b085      	sub	sp, #20
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
 8008c42:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008c44:	2300      	movs	r3, #0
 8008c46:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d016      	beq.n	8008c7c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d10e      	bne.n	8008c76 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008c5e:	1c59      	adds	r1, r3, #1
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	33de      	adds	r3, #222	@ 0xde
 8008c6a:	6839      	ldr	r1, [r7, #0]
 8008c6c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008c70:	2300      	movs	r3, #0
 8008c72:	73fb      	strb	r3, [r7, #15]
 8008c74:	e004      	b.n	8008c80 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008c76:	2302      	movs	r3, #2
 8008c78:	73fb      	strb	r3, [r7, #15]
 8008c7a:	e001      	b.n	8008c80 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008c7c:	2302      	movs	r3, #2
 8008c7e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3714      	adds	r7, #20
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr

08008c8e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008c8e:	b480      	push	{r7}
 8008c90:	b085      	sub	sp, #20
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
 8008c96:	460b      	mov	r3, r1
 8008c98:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8008ca4:	78fa      	ldrb	r2, [r7, #3]
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d204      	bcs.n	8008cb4 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	78fa      	ldrb	r2, [r7, #3]
 8008cae:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8008cb2:	e001      	b.n	8008cb8 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008cb4:	2302      	movs	r3, #2
 8008cb6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3714      	adds	r7, #20
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr

08008cc6 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008cc6:	b480      	push	{r7}
 8008cc8:	b087      	sub	sp, #28
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6078      	str	r0, [r7, #4]
 8008cce:	4608      	mov	r0, r1
 8008cd0:	4611      	mov	r1, r2
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	70fb      	strb	r3, [r7, #3]
 8008cd8:	460b      	mov	r3, r1
 8008cda:	70bb      	strb	r3, [r7, #2]
 8008cdc:	4613      	mov	r3, r2
 8008cde:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008cee:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008cf0:	e025      	b.n	8008d3e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008cf2:	7dfb      	ldrb	r3, [r7, #23]
 8008cf4:	221a      	movs	r2, #26
 8008cf6:	fb02 f303 	mul.w	r3, r2, r3
 8008cfa:	3308      	adds	r3, #8
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	4413      	add	r3, r2
 8008d00:	3302      	adds	r3, #2
 8008d02:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	795b      	ldrb	r3, [r3, #5]
 8008d08:	78fa      	ldrb	r2, [r7, #3]
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d002      	beq.n	8008d14 <USBH_FindInterface+0x4e>
 8008d0e:	78fb      	ldrb	r3, [r7, #3]
 8008d10:	2bff      	cmp	r3, #255	@ 0xff
 8008d12:	d111      	bne.n	8008d38 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008d18:	78ba      	ldrb	r2, [r7, #2]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d002      	beq.n	8008d24 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008d1e:	78bb      	ldrb	r3, [r7, #2]
 8008d20:	2bff      	cmp	r3, #255	@ 0xff
 8008d22:	d109      	bne.n	8008d38 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008d28:	787a      	ldrb	r2, [r7, #1]
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d002      	beq.n	8008d34 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008d2e:	787b      	ldrb	r3, [r7, #1]
 8008d30:	2bff      	cmp	r3, #255	@ 0xff
 8008d32:	d101      	bne.n	8008d38 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008d34:	7dfb      	ldrb	r3, [r7, #23]
 8008d36:	e006      	b.n	8008d46 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008d38:	7dfb      	ldrb	r3, [r7, #23]
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008d3e:	7dfb      	ldrb	r3, [r7, #23]
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d9d6      	bls.n	8008cf2 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008d44:	23ff      	movs	r3, #255	@ 0xff
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	371c      	adds	r7, #28
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr

08008d52 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b082      	sub	sp, #8
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f001 fcf4 	bl	800a748 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008d60:	2101      	movs	r1, #1
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f001 fe0d 	bl	800a982 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008d68:	2300      	movs	r3, #0
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3708      	adds	r7, #8
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
	...

08008d74 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b088      	sub	sp, #32
 8008d78:	af04      	add	r7, sp, #16
 8008d7a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008d7c:	2302      	movs	r3, #2
 8008d7e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008d80:	2300      	movs	r3, #0
 8008d82:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d102      	bne.n	8008d96 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2203      	movs	r2, #3
 8008d94:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	2b0b      	cmp	r3, #11
 8008d9e:	f200 81bb 	bhi.w	8009118 <USBH_Process+0x3a4>
 8008da2:	a201      	add	r2, pc, #4	@ (adr r2, 8008da8 <USBH_Process+0x34>)
 8008da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008da8:	08008dd9 	.word	0x08008dd9
 8008dac:	08008e0b 	.word	0x08008e0b
 8008db0:	08008e73 	.word	0x08008e73
 8008db4:	080090b3 	.word	0x080090b3
 8008db8:	08009119 	.word	0x08009119
 8008dbc:	08008f13 	.word	0x08008f13
 8008dc0:	08009059 	.word	0x08009059
 8008dc4:	08008f49 	.word	0x08008f49
 8008dc8:	08008f69 	.word	0x08008f69
 8008dcc:	08008f87 	.word	0x08008f87
 8008dd0:	08008fcb 	.word	0x08008fcb
 8008dd4:	0800909b 	.word	0x0800909b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	f000 819b 	beq.w	800911c <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2201      	movs	r2, #1
 8008dea:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008dec:	20c8      	movs	r0, #200	@ 0xc8
 8008dee:	f001 fe12 	bl	800aa16 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f001 fd05 	bl	800a802 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2200      	movs	r2, #0
 8008e04:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008e08:	e188      	b.n	800911c <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d107      	bne.n	8008e24 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2202      	movs	r2, #2
 8008e20:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008e22:	e18a      	b.n	800913a <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008e2a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008e2e:	d914      	bls.n	8008e5a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008e36:	3301      	adds	r3, #1
 8008e38:	b2da      	uxtb	r2, r3
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008e46:	2b03      	cmp	r3, #3
 8008e48:	d903      	bls.n	8008e52 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	220d      	movs	r2, #13
 8008e4e:	701a      	strb	r2, [r3, #0]
      break;
 8008e50:	e173      	b.n	800913a <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2200      	movs	r2, #0
 8008e56:	701a      	strb	r2, [r3, #0]
      break;
 8008e58:	e16f      	b.n	800913a <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008e60:	f103 020a 	add.w	r2, r3, #10
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8008e6a:	200a      	movs	r0, #10
 8008e6c:	f001 fdd3 	bl	800aa16 <USBH_Delay>
      break;
 8008e70:	e163      	b.n	800913a <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d005      	beq.n	8008e88 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008e82:	2104      	movs	r1, #4
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008e88:	2064      	movs	r0, #100	@ 0x64
 8008e8a:	f001 fdc4 	bl	800aa16 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f001 fc90 	bl	800a7b4 <USBH_LL_GetSpeed>
 8008e94:	4603      	mov	r3, r0
 8008e96:	461a      	mov	r2, r3
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2205      	movs	r2, #5
 8008ea2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008ea4:	2100      	movs	r1, #0
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f001 fa9b 	bl	800a3e2 <USBH_AllocPipe>
 8008eac:	4603      	mov	r3, r0
 8008eae:	461a      	mov	r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008eb4:	2180      	movs	r1, #128	@ 0x80
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f001 fa93 	bl	800a3e2 <USBH_AllocPipe>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	7919      	ldrb	r1, [r3, #4]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008ed4:	687a      	ldr	r2, [r7, #4]
 8008ed6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008ed8:	9202      	str	r2, [sp, #8]
 8008eda:	2200      	movs	r2, #0
 8008edc:	9201      	str	r2, [sp, #4]
 8008ede:	9300      	str	r3, [sp, #0]
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	2280      	movs	r2, #128	@ 0x80
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f001 fa4d 	bl	800a384 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	7959      	ldrb	r1, [r3, #5]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008efe:	9202      	str	r2, [sp, #8]
 8008f00:	2200      	movs	r2, #0
 8008f02:	9201      	str	r2, [sp, #4]
 8008f04:	9300      	str	r3, [sp, #0]
 8008f06:	4603      	mov	r3, r0
 8008f08:	2200      	movs	r2, #0
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f001 fa3a 	bl	800a384 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008f10:	e113      	b.n	800913a <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f000 f916 	bl	8009144 <USBH_HandleEnum>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008f1c:	7bbb      	ldrb	r3, [r7, #14]
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	f040 80fd 	bne.w	8009120 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d103      	bne.n	8008f40 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2208      	movs	r2, #8
 8008f3c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008f3e:	e0ef      	b.n	8009120 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2207      	movs	r2, #7
 8008f44:	701a      	strb	r2, [r3, #0]
      break;
 8008f46:	e0eb      	b.n	8009120 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	f000 80e8 	beq.w	8009124 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008f5a:	2101      	movs	r1, #1
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2208      	movs	r2, #8
 8008f64:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008f66:	e0dd      	b.n	8009124 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8008f6e:	4619      	mov	r1, r3
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f000 fc3a 	bl	80097ea <USBH_SetCfg>
 8008f76:	4603      	mov	r3, r0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	f040 80d5 	bne.w	8009128 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2209      	movs	r2, #9
 8008f82:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008f84:	e0d0      	b.n	8009128 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8008f8c:	f003 0320 	and.w	r3, r3, #32
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d016      	beq.n	8008fc2 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008f94:	2101      	movs	r1, #1
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 fc4a 	bl	8009830 <USBH_SetFeature>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008fa0:	7bbb      	ldrb	r3, [r7, #14]
 8008fa2:	b2db      	uxtb	r3, r3
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d103      	bne.n	8008fb0 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	220a      	movs	r2, #10
 8008fac:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008fae:	e0bd      	b.n	800912c <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8008fb0:	7bbb      	ldrb	r3, [r7, #14]
 8008fb2:	b2db      	uxtb	r3, r3
 8008fb4:	2b03      	cmp	r3, #3
 8008fb6:	f040 80b9 	bne.w	800912c <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	220a      	movs	r2, #10
 8008fbe:	701a      	strb	r2, [r3, #0]
      break;
 8008fc0:	e0b4      	b.n	800912c <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	220a      	movs	r2, #10
 8008fc6:	701a      	strb	r2, [r3, #0]
      break;
 8008fc8:	e0b0      	b.n	800912c <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	f000 80ad 	beq.w	8009130 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008fde:	2300      	movs	r3, #0
 8008fe0:	73fb      	strb	r3, [r7, #15]
 8008fe2:	e016      	b.n	8009012 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008fe4:	7bfa      	ldrb	r2, [r7, #15]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	32de      	adds	r2, #222	@ 0xde
 8008fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fee:	791a      	ldrb	r2, [r3, #4]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d108      	bne.n	800900c <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008ffa:	7bfa      	ldrb	r2, [r7, #15]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	32de      	adds	r2, #222	@ 0xde
 8009000:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800900a:	e005      	b.n	8009018 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800900c:	7bfb      	ldrb	r3, [r7, #15]
 800900e:	3301      	adds	r3, #1
 8009010:	73fb      	strb	r3, [r7, #15]
 8009012:	7bfb      	ldrb	r3, [r7, #15]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d0e5      	beq.n	8008fe4 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800901e:	2b00      	cmp	r3, #0
 8009020:	d016      	beq.n	8009050 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	4798      	blx	r3
 800902e:	4603      	mov	r3, r0
 8009030:	2b00      	cmp	r3, #0
 8009032:	d109      	bne.n	8009048 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2206      	movs	r2, #6
 8009038:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009040:	2103      	movs	r1, #3
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009046:	e073      	b.n	8009130 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	220d      	movs	r2, #13
 800904c:	701a      	strb	r2, [r3, #0]
      break;
 800904e:	e06f      	b.n	8009130 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	220d      	movs	r2, #13
 8009054:	701a      	strb	r2, [r3, #0]
      break;
 8009056:	e06b      	b.n	8009130 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800905e:	2b00      	cmp	r3, #0
 8009060:	d017      	beq.n	8009092 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009068:	691b      	ldr	r3, [r3, #16]
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	4798      	blx	r3
 800906e:	4603      	mov	r3, r0
 8009070:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009072:	7bbb      	ldrb	r3, [r7, #14]
 8009074:	b2db      	uxtb	r3, r3
 8009076:	2b00      	cmp	r3, #0
 8009078:	d103      	bne.n	8009082 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	220b      	movs	r2, #11
 800907e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009080:	e058      	b.n	8009134 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8009082:	7bbb      	ldrb	r3, [r7, #14]
 8009084:	b2db      	uxtb	r3, r3
 8009086:	2b02      	cmp	r3, #2
 8009088:	d154      	bne.n	8009134 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	220d      	movs	r2, #13
 800908e:	701a      	strb	r2, [r3, #0]
      break;
 8009090:	e050      	b.n	8009134 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	220d      	movs	r2, #13
 8009096:	701a      	strb	r2, [r3, #0]
      break;
 8009098:	e04c      	b.n	8009134 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d049      	beq.n	8009138 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80090aa:	695b      	ldr	r3, [r3, #20]
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	4798      	blx	r3
      }
      break;
 80090b0:	e042      	b.n	8009138 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2200      	movs	r2, #0
 80090b6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f7ff fd4a 	bl	8008b54 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d009      	beq.n	80090de <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2200      	movs	r2, #0
 80090da:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d005      	beq.n	80090f4 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80090ee:	2105      	movs	r1, #5
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d107      	bne.n	8009110 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f7ff fe22 	bl	8008d52 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800910e:	e014      	b.n	800913a <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f001 fb19 	bl	800a748 <USBH_LL_Start>
      break;
 8009116:	e010      	b.n	800913a <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009118:	bf00      	nop
 800911a:	e00e      	b.n	800913a <USBH_Process+0x3c6>
      break;
 800911c:	bf00      	nop
 800911e:	e00c      	b.n	800913a <USBH_Process+0x3c6>
      break;
 8009120:	bf00      	nop
 8009122:	e00a      	b.n	800913a <USBH_Process+0x3c6>
    break;
 8009124:	bf00      	nop
 8009126:	e008      	b.n	800913a <USBH_Process+0x3c6>
      break;
 8009128:	bf00      	nop
 800912a:	e006      	b.n	800913a <USBH_Process+0x3c6>
      break;
 800912c:	bf00      	nop
 800912e:	e004      	b.n	800913a <USBH_Process+0x3c6>
      break;
 8009130:	bf00      	nop
 8009132:	e002      	b.n	800913a <USBH_Process+0x3c6>
      break;
 8009134:	bf00      	nop
 8009136:	e000      	b.n	800913a <USBH_Process+0x3c6>
      break;
 8009138:	bf00      	nop
  }
  return USBH_OK;
 800913a:	2300      	movs	r3, #0
}
 800913c:	4618      	mov	r0, r3
 800913e:	3710      	adds	r7, #16
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b088      	sub	sp, #32
 8009148:	af04      	add	r7, sp, #16
 800914a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800914c:	2301      	movs	r3, #1
 800914e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009150:	2301      	movs	r3, #1
 8009152:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	785b      	ldrb	r3, [r3, #1]
 8009158:	2b07      	cmp	r3, #7
 800915a:	f200 81bd 	bhi.w	80094d8 <USBH_HandleEnum+0x394>
 800915e:	a201      	add	r2, pc, #4	@ (adr r2, 8009164 <USBH_HandleEnum+0x20>)
 8009160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009164:	08009185 	.word	0x08009185
 8009168:	0800923f 	.word	0x0800923f
 800916c:	080092a9 	.word	0x080092a9
 8009170:	08009333 	.word	0x08009333
 8009174:	0800939d 	.word	0x0800939d
 8009178:	0800940d 	.word	0x0800940d
 800917c:	08009453 	.word	0x08009453
 8009180:	08009499 	.word	0x08009499
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009184:	2108      	movs	r1, #8
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 fa4c 	bl	8009624 <USBH_Get_DevDesc>
 800918c:	4603      	mov	r3, r0
 800918e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009190:	7bbb      	ldrb	r3, [r7, #14]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d12e      	bne.n	80091f4 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	7919      	ldrb	r1, [r3, #4]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80091ba:	9202      	str	r2, [sp, #8]
 80091bc:	2200      	movs	r2, #0
 80091be:	9201      	str	r2, [sp, #4]
 80091c0:	9300      	str	r3, [sp, #0]
 80091c2:	4603      	mov	r3, r0
 80091c4:	2280      	movs	r2, #128	@ 0x80
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f001 f8dc 	bl	800a384 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	7959      	ldrb	r1, [r3, #5]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80091e0:	9202      	str	r2, [sp, #8]
 80091e2:	2200      	movs	r2, #0
 80091e4:	9201      	str	r2, [sp, #4]
 80091e6:	9300      	str	r3, [sp, #0]
 80091e8:	4603      	mov	r3, r0
 80091ea:	2200      	movs	r2, #0
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f001 f8c9 	bl	800a384 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80091f2:	e173      	b.n	80094dc <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80091f4:	7bbb      	ldrb	r3, [r7, #14]
 80091f6:	2b03      	cmp	r3, #3
 80091f8:	f040 8170 	bne.w	80094dc <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009202:	3301      	adds	r3, #1
 8009204:	b2da      	uxtb	r2, r3
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009212:	2b03      	cmp	r3, #3
 8009214:	d903      	bls.n	800921e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	220d      	movs	r2, #13
 800921a:	701a      	strb	r2, [r3, #0]
      break;
 800921c:	e15e      	b.n	80094dc <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	795b      	ldrb	r3, [r3, #5]
 8009222:	4619      	mov	r1, r3
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f001 f8fd 	bl	800a424 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	791b      	ldrb	r3, [r3, #4]
 800922e:	4619      	mov	r1, r3
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f001 f8f7 	bl	800a424 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2200      	movs	r2, #0
 800923a:	701a      	strb	r2, [r3, #0]
      break;
 800923c:	e14e      	b.n	80094dc <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800923e:	2112      	movs	r1, #18
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f000 f9ef 	bl	8009624 <USBH_Get_DevDesc>
 8009246:	4603      	mov	r3, r0
 8009248:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800924a:	7bbb      	ldrb	r3, [r7, #14]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d103      	bne.n	8009258 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2202      	movs	r2, #2
 8009254:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009256:	e143      	b.n	80094e0 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009258:	7bbb      	ldrb	r3, [r7, #14]
 800925a:	2b03      	cmp	r3, #3
 800925c:	f040 8140 	bne.w	80094e0 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009266:	3301      	adds	r3, #1
 8009268:	b2da      	uxtb	r2, r3
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009276:	2b03      	cmp	r3, #3
 8009278:	d903      	bls.n	8009282 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	220d      	movs	r2, #13
 800927e:	701a      	strb	r2, [r3, #0]
      break;
 8009280:	e12e      	b.n	80094e0 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	795b      	ldrb	r3, [r3, #5]
 8009286:	4619      	mov	r1, r3
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f001 f8cb 	bl	800a424 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	791b      	ldrb	r3, [r3, #4]
 8009292:	4619      	mov	r1, r3
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f001 f8c5 	bl	800a424 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2200      	movs	r2, #0
 800929e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	701a      	strb	r2, [r3, #0]
      break;
 80092a6:	e11b      	b.n	80094e0 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80092a8:	2101      	movs	r1, #1
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 fa79 	bl	80097a2 <USBH_SetAddress>
 80092b0:	4603      	mov	r3, r0
 80092b2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80092b4:	7bbb      	ldrb	r3, [r7, #14]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d130      	bne.n	800931c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80092ba:	2002      	movs	r0, #2
 80092bc:	f001 fbab 	bl	800aa16 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2203      	movs	r2, #3
 80092cc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	7919      	ldrb	r1, [r3, #4]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80092e2:	9202      	str	r2, [sp, #8]
 80092e4:	2200      	movs	r2, #0
 80092e6:	9201      	str	r2, [sp, #4]
 80092e8:	9300      	str	r3, [sp, #0]
 80092ea:	4603      	mov	r3, r0
 80092ec:	2280      	movs	r2, #128	@ 0x80
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f001 f848 	bl	800a384 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	7959      	ldrb	r1, [r3, #5]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009308:	9202      	str	r2, [sp, #8]
 800930a:	2200      	movs	r2, #0
 800930c:	9201      	str	r2, [sp, #4]
 800930e:	9300      	str	r3, [sp, #0]
 8009310:	4603      	mov	r3, r0
 8009312:	2200      	movs	r2, #0
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f001 f835 	bl	800a384 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800931a:	e0e3      	b.n	80094e4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800931c:	7bbb      	ldrb	r3, [r7, #14]
 800931e:	2b03      	cmp	r3, #3
 8009320:	f040 80e0 	bne.w	80094e4 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	220d      	movs	r2, #13
 8009328:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	705a      	strb	r2, [r3, #1]
      break;
 8009330:	e0d8      	b.n	80094e4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009332:	2109      	movs	r1, #9
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 f9a1 	bl	800967c <USBH_Get_CfgDesc>
 800933a:	4603      	mov	r3, r0
 800933c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800933e:	7bbb      	ldrb	r3, [r7, #14]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d103      	bne.n	800934c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2204      	movs	r2, #4
 8009348:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800934a:	e0cd      	b.n	80094e8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800934c:	7bbb      	ldrb	r3, [r7, #14]
 800934e:	2b03      	cmp	r3, #3
 8009350:	f040 80ca 	bne.w	80094e8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800935a:	3301      	adds	r3, #1
 800935c:	b2da      	uxtb	r2, r3
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800936a:	2b03      	cmp	r3, #3
 800936c:	d903      	bls.n	8009376 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	220d      	movs	r2, #13
 8009372:	701a      	strb	r2, [r3, #0]
      break;
 8009374:	e0b8      	b.n	80094e8 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	795b      	ldrb	r3, [r3, #5]
 800937a:	4619      	mov	r1, r3
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f001 f851 	bl	800a424 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	791b      	ldrb	r3, [r3, #4]
 8009386:	4619      	mov	r1, r3
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f001 f84b 	bl	800a424 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2200      	movs	r2, #0
 8009392:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2200      	movs	r2, #0
 8009398:	701a      	strb	r2, [r3, #0]
      break;
 800939a:	e0a5      	b.n	80094e8 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80093a2:	4619      	mov	r1, r3
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 f969 	bl	800967c <USBH_Get_CfgDesc>
 80093aa:	4603      	mov	r3, r0
 80093ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80093ae:	7bbb      	ldrb	r3, [r7, #14]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d103      	bne.n	80093bc <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2205      	movs	r2, #5
 80093b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80093ba:	e097      	b.n	80094ec <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80093bc:	7bbb      	ldrb	r3, [r7, #14]
 80093be:	2b03      	cmp	r3, #3
 80093c0:	f040 8094 	bne.w	80094ec <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80093ca:	3301      	adds	r3, #1
 80093cc:	b2da      	uxtb	r2, r3
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80093da:	2b03      	cmp	r3, #3
 80093dc:	d903      	bls.n	80093e6 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	220d      	movs	r2, #13
 80093e2:	701a      	strb	r2, [r3, #0]
      break;
 80093e4:	e082      	b.n	80094ec <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	795b      	ldrb	r3, [r3, #5]
 80093ea:	4619      	mov	r1, r3
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f001 f819 	bl	800a424 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	791b      	ldrb	r3, [r3, #4]
 80093f6:	4619      	mov	r1, r3
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f001 f813 	bl	800a424 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2200      	movs	r2, #0
 8009402:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2200      	movs	r2, #0
 8009408:	701a      	strb	r2, [r3, #0]
      break;
 800940a:	e06f      	b.n	80094ec <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8009412:	2b00      	cmp	r3, #0
 8009414:	d019      	beq.n	800944a <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009422:	23ff      	movs	r3, #255	@ 0xff
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f000 f953 	bl	80096d0 <USBH_Get_StringDesc>
 800942a:	4603      	mov	r3, r0
 800942c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800942e:	7bbb      	ldrb	r3, [r7, #14]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d103      	bne.n	800943c <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2206      	movs	r2, #6
 8009438:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800943a:	e059      	b.n	80094f0 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800943c:	7bbb      	ldrb	r3, [r7, #14]
 800943e:	2b03      	cmp	r3, #3
 8009440:	d156      	bne.n	80094f0 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2206      	movs	r2, #6
 8009446:	705a      	strb	r2, [r3, #1]
      break;
 8009448:	e052      	b.n	80094f0 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2206      	movs	r2, #6
 800944e:	705a      	strb	r2, [r3, #1]
      break;
 8009450:	e04e      	b.n	80094f0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8009458:	2b00      	cmp	r3, #0
 800945a:	d019      	beq.n	8009490 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009468:	23ff      	movs	r3, #255	@ 0xff
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 f930 	bl	80096d0 <USBH_Get_StringDesc>
 8009470:	4603      	mov	r3, r0
 8009472:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009474:	7bbb      	ldrb	r3, [r7, #14]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d103      	bne.n	8009482 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2207      	movs	r2, #7
 800947e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009480:	e038      	b.n	80094f4 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009482:	7bbb      	ldrb	r3, [r7, #14]
 8009484:	2b03      	cmp	r3, #3
 8009486:	d135      	bne.n	80094f4 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2207      	movs	r2, #7
 800948c:	705a      	strb	r2, [r3, #1]
      break;
 800948e:	e031      	b.n	80094f4 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2207      	movs	r2, #7
 8009494:	705a      	strb	r2, [r3, #1]
      break;
 8009496:	e02d      	b.n	80094f4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d017      	beq.n	80094d2 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80094ae:	23ff      	movs	r3, #255	@ 0xff
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f000 f90d 	bl	80096d0 <USBH_Get_StringDesc>
 80094b6:	4603      	mov	r3, r0
 80094b8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80094ba:	7bbb      	ldrb	r3, [r7, #14]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d102      	bne.n	80094c6 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80094c0:	2300      	movs	r3, #0
 80094c2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80094c4:	e018      	b.n	80094f8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80094c6:	7bbb      	ldrb	r3, [r7, #14]
 80094c8:	2b03      	cmp	r3, #3
 80094ca:	d115      	bne.n	80094f8 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 80094cc:	2300      	movs	r3, #0
 80094ce:	73fb      	strb	r3, [r7, #15]
      break;
 80094d0:	e012      	b.n	80094f8 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 80094d2:	2300      	movs	r3, #0
 80094d4:	73fb      	strb	r3, [r7, #15]
      break;
 80094d6:	e00f      	b.n	80094f8 <USBH_HandleEnum+0x3b4>

    default:
      break;
 80094d8:	bf00      	nop
 80094da:	e00e      	b.n	80094fa <USBH_HandleEnum+0x3b6>
      break;
 80094dc:	bf00      	nop
 80094de:	e00c      	b.n	80094fa <USBH_HandleEnum+0x3b6>
      break;
 80094e0:	bf00      	nop
 80094e2:	e00a      	b.n	80094fa <USBH_HandleEnum+0x3b6>
      break;
 80094e4:	bf00      	nop
 80094e6:	e008      	b.n	80094fa <USBH_HandleEnum+0x3b6>
      break;
 80094e8:	bf00      	nop
 80094ea:	e006      	b.n	80094fa <USBH_HandleEnum+0x3b6>
      break;
 80094ec:	bf00      	nop
 80094ee:	e004      	b.n	80094fa <USBH_HandleEnum+0x3b6>
      break;
 80094f0:	bf00      	nop
 80094f2:	e002      	b.n	80094fa <USBH_HandleEnum+0x3b6>
      break;
 80094f4:	bf00      	nop
 80094f6:	e000      	b.n	80094fa <USBH_HandleEnum+0x3b6>
      break;
 80094f8:	bf00      	nop
  }
  return Status;
 80094fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3710      	adds	r7, #16
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009504:	b480      	push	{r7}
 8009506:	b083      	sub	sp, #12
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	683a      	ldr	r2, [r7, #0]
 8009512:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8009516:	bf00      	nop
 8009518:	370c      	adds	r7, #12
 800951a:	46bd      	mov	sp, r7
 800951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009520:	4770      	bx	lr

08009522 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009522:	b580      	push	{r7, lr}
 8009524:	b082      	sub	sp, #8
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009530:	1c5a      	adds	r2, r3, #1
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 f804 	bl	8009546 <USBH_HandleSof>
}
 800953e:	bf00      	nop
 8009540:	3708      	adds	r7, #8
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009546:	b580      	push	{r7, lr}
 8009548:	b082      	sub	sp, #8
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	b2db      	uxtb	r3, r3
 8009554:	2b0b      	cmp	r3, #11
 8009556:	d10a      	bne.n	800956e <USBH_HandleSof+0x28>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800955e:	2b00      	cmp	r3, #0
 8009560:	d005      	beq.n	800956e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009568:	699b      	ldr	r3, [r3, #24]
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	4798      	blx	r3
  }
}
 800956e:	bf00      	nop
 8009570:	3708      	adds	r7, #8
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}

08009576 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009576:	b480      	push	{r7}
 8009578:	b083      	sub	sp, #12
 800957a:	af00      	add	r7, sp, #0
 800957c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2201      	movs	r2, #1
 8009582:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009586:	bf00      	nop
}
 8009588:	370c      	adds	r7, #12
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr

08009592 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009592:	b480      	push	{r7}
 8009594:	b083      	sub	sp, #12
 8009596:	af00      	add	r7, sp, #0
 8009598:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2200      	movs	r2, #0
 800959e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80095a2:	bf00      	nop
}
 80095a4:	370c      	adds	r7, #12
 80095a6:	46bd      	mov	sp, r7
 80095a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ac:	4770      	bx	lr

080095ae <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80095ae:	b480      	push	{r7}
 80095b0:	b083      	sub	sp, #12
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2201      	movs	r2, #1
 80095ba:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2200      	movs	r2, #0
 80095c2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80095ce:	2300      	movs	r3, #0
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	370c      	adds	r7, #12
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr

080095dc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2201      	movs	r2, #1
 80095e8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2200      	movs	r2, #0
 80095f0:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f001 f8be 	bl	800a77e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	791b      	ldrb	r3, [r3, #4]
 8009606:	4619      	mov	r1, r3
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 ff0b 	bl	800a424 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	795b      	ldrb	r3, [r3, #5]
 8009612:	4619      	mov	r1, r3
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 ff05 	bl	800a424 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800961a:	2300      	movs	r3, #0
}
 800961c:	4618      	mov	r0, r3
 800961e:	3708      	adds	r7, #8
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b086      	sub	sp, #24
 8009628:	af02      	add	r7, sp, #8
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	460b      	mov	r3, r1
 800962e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8009630:	887b      	ldrh	r3, [r7, #2]
 8009632:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009636:	d901      	bls.n	800963c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009638:	2303      	movs	r3, #3
 800963a:	e01b      	b.n	8009674 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009642:	887b      	ldrh	r3, [r7, #2]
 8009644:	9300      	str	r3, [sp, #0]
 8009646:	4613      	mov	r3, r2
 8009648:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800964c:	2100      	movs	r1, #0
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 f872 	bl	8009738 <USBH_GetDescriptor>
 8009654:	4603      	mov	r3, r0
 8009656:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8009658:	7bfb      	ldrb	r3, [r7, #15]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d109      	bne.n	8009672 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009664:	887a      	ldrh	r2, [r7, #2]
 8009666:	4619      	mov	r1, r3
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f000 f929 	bl	80098c0 <USBH_ParseDevDesc>
 800966e:	4603      	mov	r3, r0
 8009670:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009672:	7bfb      	ldrb	r3, [r7, #15]
}
 8009674:	4618      	mov	r0, r3
 8009676:	3710      	adds	r7, #16
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b086      	sub	sp, #24
 8009680:	af02      	add	r7, sp, #8
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	460b      	mov	r3, r1
 8009686:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	331c      	adds	r3, #28
 800968c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800968e:	887b      	ldrh	r3, [r7, #2]
 8009690:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009694:	d901      	bls.n	800969a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009696:	2303      	movs	r3, #3
 8009698:	e016      	b.n	80096c8 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800969a:	887b      	ldrh	r3, [r7, #2]
 800969c:	9300      	str	r3, [sp, #0]
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80096a4:	2100      	movs	r1, #0
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f000 f846 	bl	8009738 <USBH_GetDescriptor>
 80096ac:	4603      	mov	r3, r0
 80096ae:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80096b0:	7bfb      	ldrb	r3, [r7, #15]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d107      	bne.n	80096c6 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80096b6:	887b      	ldrh	r3, [r7, #2]
 80096b8:	461a      	mov	r2, r3
 80096ba:	68b9      	ldr	r1, [r7, #8]
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f000 f9af 	bl	8009a20 <USBH_ParseCfgDesc>
 80096c2:	4603      	mov	r3, r0
 80096c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80096c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3710      	adds	r7, #16
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b088      	sub	sp, #32
 80096d4:	af02      	add	r7, sp, #8
 80096d6:	60f8      	str	r0, [r7, #12]
 80096d8:	607a      	str	r2, [r7, #4]
 80096da:	461a      	mov	r2, r3
 80096dc:	460b      	mov	r3, r1
 80096de:	72fb      	strb	r3, [r7, #11]
 80096e0:	4613      	mov	r3, r2
 80096e2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80096e4:	893b      	ldrh	r3, [r7, #8]
 80096e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096ea:	d802      	bhi.n	80096f2 <USBH_Get_StringDesc+0x22>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d101      	bne.n	80096f6 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80096f2:	2303      	movs	r3, #3
 80096f4:	e01c      	b.n	8009730 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80096f6:	7afb      	ldrb	r3, [r7, #11]
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80096fe:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009706:	893b      	ldrh	r3, [r7, #8]
 8009708:	9300      	str	r3, [sp, #0]
 800970a:	460b      	mov	r3, r1
 800970c:	2100      	movs	r1, #0
 800970e:	68f8      	ldr	r0, [r7, #12]
 8009710:	f000 f812 	bl	8009738 <USBH_GetDescriptor>
 8009714:	4603      	mov	r3, r0
 8009716:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009718:	7dfb      	ldrb	r3, [r7, #23]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d107      	bne.n	800972e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009724:	893a      	ldrh	r2, [r7, #8]
 8009726:	6879      	ldr	r1, [r7, #4]
 8009728:	4618      	mov	r0, r3
 800972a:	f000 fb8d 	bl	8009e48 <USBH_ParseStringDesc>
  }

  return status;
 800972e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009730:	4618      	mov	r0, r3
 8009732:	3718      	adds	r7, #24
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b084      	sub	sp, #16
 800973c:	af00      	add	r7, sp, #0
 800973e:	60f8      	str	r0, [r7, #12]
 8009740:	607b      	str	r3, [r7, #4]
 8009742:	460b      	mov	r3, r1
 8009744:	72fb      	strb	r3, [r7, #11]
 8009746:	4613      	mov	r3, r2
 8009748:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	789b      	ldrb	r3, [r3, #2]
 800974e:	2b01      	cmp	r3, #1
 8009750:	d11c      	bne.n	800978c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009752:	7afb      	ldrb	r3, [r7, #11]
 8009754:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009758:	b2da      	uxtb	r2, r3
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2206      	movs	r2, #6
 8009762:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	893a      	ldrh	r2, [r7, #8]
 8009768:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800976a:	893b      	ldrh	r3, [r7, #8]
 800976c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009770:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009774:	d104      	bne.n	8009780 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	f240 4209 	movw	r2, #1033	@ 0x409
 800977c:	829a      	strh	r2, [r3, #20]
 800977e:	e002      	b.n	8009786 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2200      	movs	r2, #0
 8009784:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	8b3a      	ldrh	r2, [r7, #24]
 800978a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800978c:	8b3b      	ldrh	r3, [r7, #24]
 800978e:	461a      	mov	r2, r3
 8009790:	6879      	ldr	r1, [r7, #4]
 8009792:	68f8      	ldr	r0, [r7, #12]
 8009794:	f000 fba5 	bl	8009ee2 <USBH_CtlReq>
 8009798:	4603      	mov	r3, r0
}
 800979a:	4618      	mov	r0, r3
 800979c:	3710      	adds	r7, #16
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}

080097a2 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80097a2:	b580      	push	{r7, lr}
 80097a4:	b082      	sub	sp, #8
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
 80097aa:	460b      	mov	r3, r1
 80097ac:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	789b      	ldrb	r3, [r3, #2]
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d10f      	bne.n	80097d6 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2200      	movs	r2, #0
 80097ba:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2205      	movs	r2, #5
 80097c0:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80097c2:	78fb      	ldrb	r3, [r7, #3]
 80097c4:	b29a      	uxth	r2, r3
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2200      	movs	r2, #0
 80097ce:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2200      	movs	r2, #0
 80097d4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80097d6:	2200      	movs	r2, #0
 80097d8:	2100      	movs	r1, #0
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 fb81 	bl	8009ee2 <USBH_CtlReq>
 80097e0:	4603      	mov	r3, r0
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3708      	adds	r7, #8
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}

080097ea <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80097ea:	b580      	push	{r7, lr}
 80097ec:	b082      	sub	sp, #8
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
 80097f2:	460b      	mov	r3, r1
 80097f4:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	789b      	ldrb	r3, [r3, #2]
 80097fa:	2b01      	cmp	r3, #1
 80097fc:	d10e      	bne.n	800981c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2200      	movs	r2, #0
 8009802:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2209      	movs	r2, #9
 8009808:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	887a      	ldrh	r2, [r7, #2]
 800980e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2200      	movs	r2, #0
 8009814:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2200      	movs	r2, #0
 800981a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800981c:	2200      	movs	r2, #0
 800981e:	2100      	movs	r1, #0
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f000 fb5e 	bl	8009ee2 <USBH_CtlReq>
 8009826:	4603      	mov	r3, r0
}
 8009828:	4618      	mov	r0, r3
 800982a:	3708      	adds	r7, #8
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b082      	sub	sp, #8
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	460b      	mov	r3, r1
 800983a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	789b      	ldrb	r3, [r3, #2]
 8009840:	2b01      	cmp	r3, #1
 8009842:	d10f      	bne.n	8009864 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2200      	movs	r2, #0
 8009848:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2203      	movs	r2, #3
 800984e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009850:	78fb      	ldrb	r3, [r7, #3]
 8009852:	b29a      	uxth	r2, r3
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2200      	movs	r2, #0
 800985c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2200      	movs	r2, #0
 8009862:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009864:	2200      	movs	r2, #0
 8009866:	2100      	movs	r1, #0
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f000 fb3a 	bl	8009ee2 <USBH_CtlReq>
 800986e:	4603      	mov	r3, r0
}
 8009870:	4618      	mov	r0, r3
 8009872:	3708      	adds	r7, #8
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	460b      	mov	r3, r1
 8009882:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	789b      	ldrb	r3, [r3, #2]
 8009888:	2b01      	cmp	r3, #1
 800988a:	d10f      	bne.n	80098ac <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2202      	movs	r2, #2
 8009890:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2201      	movs	r2, #1
 8009896:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2200      	movs	r2, #0
 800989c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800989e:	78fb      	ldrb	r3, [r7, #3]
 80098a0:	b29a      	uxth	r2, r3
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2200      	movs	r2, #0
 80098aa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80098ac:	2200      	movs	r2, #0
 80098ae:	2100      	movs	r1, #0
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f000 fb16 	bl	8009ee2 <USBH_CtlReq>
 80098b6:	4603      	mov	r3, r0
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3708      	adds	r7, #8
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}

080098c0 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b087      	sub	sp, #28
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	60f8      	str	r0, [r7, #12]
 80098c8:	60b9      	str	r1, [r7, #8]
 80098ca:	4613      	mov	r3, r2
 80098cc:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80098d4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80098d6:	2300      	movs	r3, #0
 80098d8:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d101      	bne.n	80098e4 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80098e0:	2302      	movs	r3, #2
 80098e2:	e094      	b.n	8009a0e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	781a      	ldrb	r2, [r3, #0]
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	785a      	ldrb	r2, [r3, #1]
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	3302      	adds	r3, #2
 80098f8:	781b      	ldrb	r3, [r3, #0]
 80098fa:	461a      	mov	r2, r3
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	3303      	adds	r3, #3
 8009900:	781b      	ldrb	r3, [r3, #0]
 8009902:	021b      	lsls	r3, r3, #8
 8009904:	b29b      	uxth	r3, r3
 8009906:	4313      	orrs	r3, r2
 8009908:	b29a      	uxth	r2, r3
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	791a      	ldrb	r2, [r3, #4]
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	795a      	ldrb	r2, [r3, #5]
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	799a      	ldrb	r2, [r3, #6]
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	79da      	ldrb	r2, [r3, #7]
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009934:	2b00      	cmp	r3, #0
 8009936:	d004      	beq.n	8009942 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800993e:	2b01      	cmp	r3, #1
 8009940:	d11b      	bne.n	800997a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	79db      	ldrb	r3, [r3, #7]
 8009946:	2b20      	cmp	r3, #32
 8009948:	dc0f      	bgt.n	800996a <USBH_ParseDevDesc+0xaa>
 800994a:	2b08      	cmp	r3, #8
 800994c:	db0f      	blt.n	800996e <USBH_ParseDevDesc+0xae>
 800994e:	3b08      	subs	r3, #8
 8009950:	4a32      	ldr	r2, [pc, #200]	@ (8009a1c <USBH_ParseDevDesc+0x15c>)
 8009952:	fa22 f303 	lsr.w	r3, r2, r3
 8009956:	f003 0301 	and.w	r3, r3, #1
 800995a:	2b00      	cmp	r3, #0
 800995c:	bf14      	ite	ne
 800995e:	2301      	movne	r3, #1
 8009960:	2300      	moveq	r3, #0
 8009962:	b2db      	uxtb	r3, r3
 8009964:	2b00      	cmp	r3, #0
 8009966:	d106      	bne.n	8009976 <USBH_ParseDevDesc+0xb6>
 8009968:	e001      	b.n	800996e <USBH_ParseDevDesc+0xae>
 800996a:	2b40      	cmp	r3, #64	@ 0x40
 800996c:	d003      	beq.n	8009976 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	2208      	movs	r2, #8
 8009972:	71da      	strb	r2, [r3, #7]
        break;
 8009974:	e000      	b.n	8009978 <USBH_ParseDevDesc+0xb8>
        break;
 8009976:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8009978:	e00e      	b.n	8009998 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009980:	2b02      	cmp	r3, #2
 8009982:	d107      	bne.n	8009994 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	79db      	ldrb	r3, [r3, #7]
 8009988:	2b08      	cmp	r3, #8
 800998a:	d005      	beq.n	8009998 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	2208      	movs	r2, #8
 8009990:	71da      	strb	r2, [r3, #7]
 8009992:	e001      	b.n	8009998 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009994:	2303      	movs	r3, #3
 8009996:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009998:	88fb      	ldrh	r3, [r7, #6]
 800999a:	2b08      	cmp	r3, #8
 800999c:	d936      	bls.n	8009a0c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	3308      	adds	r3, #8
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	461a      	mov	r2, r3
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	3309      	adds	r3, #9
 80099aa:	781b      	ldrb	r3, [r3, #0]
 80099ac:	021b      	lsls	r3, r3, #8
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	4313      	orrs	r3, r2
 80099b2:	b29a      	uxth	r2, r3
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	330a      	adds	r3, #10
 80099bc:	781b      	ldrb	r3, [r3, #0]
 80099be:	461a      	mov	r2, r3
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	330b      	adds	r3, #11
 80099c4:	781b      	ldrb	r3, [r3, #0]
 80099c6:	021b      	lsls	r3, r3, #8
 80099c8:	b29b      	uxth	r3, r3
 80099ca:	4313      	orrs	r3, r2
 80099cc:	b29a      	uxth	r2, r3
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	330c      	adds	r3, #12
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	461a      	mov	r2, r3
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	330d      	adds	r3, #13
 80099de:	781b      	ldrb	r3, [r3, #0]
 80099e0:	021b      	lsls	r3, r3, #8
 80099e2:	b29b      	uxth	r3, r3
 80099e4:	4313      	orrs	r3, r2
 80099e6:	b29a      	uxth	r2, r3
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	7b9a      	ldrb	r2, [r3, #14]
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	7bda      	ldrb	r2, [r3, #15]
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	7c1a      	ldrb	r2, [r3, #16]
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	7c5a      	ldrb	r2, [r3, #17]
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8009a0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	371c      	adds	r7, #28
 8009a12:	46bd      	mov	sp, r7
 8009a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a18:	4770      	bx	lr
 8009a1a:	bf00      	nop
 8009a1c:	01000101 	.word	0x01000101

08009a20 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b08c      	sub	sp, #48	@ 0x30
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	60b9      	str	r1, [r7, #8]
 8009a2a:	4613      	mov	r3, r2
 8009a2c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009a34:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009a36:	2300      	movs	r3, #0
 8009a38:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8009a42:	2300      	movs	r3, #0
 8009a44:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d101      	bne.n	8009a52 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8009a4e:	2302      	movs	r3, #2
 8009a50:	e0da      	b.n	8009c08 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8009a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a58:	781b      	ldrb	r3, [r3, #0]
 8009a5a:	2b09      	cmp	r3, #9
 8009a5c:	d002      	beq.n	8009a64 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a60:	2209      	movs	r2, #9
 8009a62:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	781a      	ldrb	r2, [r3, #0]
 8009a68:	6a3b      	ldr	r3, [r7, #32]
 8009a6a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	785a      	ldrb	r2, [r3, #1]
 8009a70:	6a3b      	ldr	r3, [r7, #32]
 8009a72:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	3302      	adds	r3, #2
 8009a78:	781b      	ldrb	r3, [r3, #0]
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	3303      	adds	r3, #3
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	021b      	lsls	r3, r3, #8
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	4313      	orrs	r3, r2
 8009a88:	b29b      	uxth	r3, r3
 8009a8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a8e:	bf28      	it	cs
 8009a90:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8009a94:	b29a      	uxth	r2, r3
 8009a96:	6a3b      	ldr	r3, [r7, #32]
 8009a98:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	791a      	ldrb	r2, [r3, #4]
 8009a9e:	6a3b      	ldr	r3, [r7, #32]
 8009aa0:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	795a      	ldrb	r2, [r3, #5]
 8009aa6:	6a3b      	ldr	r3, [r7, #32]
 8009aa8:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	799a      	ldrb	r2, [r3, #6]
 8009aae:	6a3b      	ldr	r3, [r7, #32]
 8009ab0:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	79da      	ldrb	r2, [r3, #7]
 8009ab6:	6a3b      	ldr	r3, [r7, #32]
 8009ab8:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	7a1a      	ldrb	r2, [r3, #8]
 8009abe:	6a3b      	ldr	r3, [r7, #32]
 8009ac0:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009ac2:	88fb      	ldrh	r3, [r7, #6]
 8009ac4:	2b09      	cmp	r3, #9
 8009ac6:	f240 809d 	bls.w	8009c04 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8009aca:	2309      	movs	r3, #9
 8009acc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009ad2:	e081      	b.n	8009bd8 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009ad4:	f107 0316 	add.w	r3, r7, #22
 8009ad8:	4619      	mov	r1, r3
 8009ada:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009adc:	f000 f9e7 	bl	8009eae <USBH_GetNextDesc>
 8009ae0:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ae4:	785b      	ldrb	r3, [r3, #1]
 8009ae6:	2b04      	cmp	r3, #4
 8009ae8:	d176      	bne.n	8009bd8 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	2b09      	cmp	r3, #9
 8009af0:	d002      	beq.n	8009af8 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009af4:	2209      	movs	r2, #9
 8009af6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009af8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009afc:	221a      	movs	r2, #26
 8009afe:	fb02 f303 	mul.w	r3, r2, r3
 8009b02:	3308      	adds	r3, #8
 8009b04:	6a3a      	ldr	r2, [r7, #32]
 8009b06:	4413      	add	r3, r2
 8009b08:	3302      	adds	r3, #2
 8009b0a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009b0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009b0e:	69f8      	ldr	r0, [r7, #28]
 8009b10:	f000 f87e 	bl	8009c10 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009b14:	2300      	movs	r3, #0
 8009b16:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009b1e:	e043      	b.n	8009ba8 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009b20:	f107 0316 	add.w	r3, r7, #22
 8009b24:	4619      	mov	r1, r3
 8009b26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b28:	f000 f9c1 	bl	8009eae <USBH_GetNextDesc>
 8009b2c:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b30:	785b      	ldrb	r3, [r3, #1]
 8009b32:	2b05      	cmp	r3, #5
 8009b34:	d138      	bne.n	8009ba8 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8009b36:	69fb      	ldr	r3, [r7, #28]
 8009b38:	795b      	ldrb	r3, [r3, #5]
 8009b3a:	2b01      	cmp	r3, #1
 8009b3c:	d113      	bne.n	8009b66 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009b3e:	69fb      	ldr	r3, [r7, #28]
 8009b40:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8009b42:	2b02      	cmp	r3, #2
 8009b44:	d003      	beq.n	8009b4e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009b46:	69fb      	ldr	r3, [r7, #28]
 8009b48:	799b      	ldrb	r3, [r3, #6]
 8009b4a:	2b03      	cmp	r3, #3
 8009b4c:	d10b      	bne.n	8009b66 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009b4e:	69fb      	ldr	r3, [r7, #28]
 8009b50:	79db      	ldrb	r3, [r3, #7]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d10b      	bne.n	8009b6e <USBH_ParseCfgDesc+0x14e>
 8009b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	2b09      	cmp	r3, #9
 8009b5c:	d007      	beq.n	8009b6e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8009b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b60:	2209      	movs	r2, #9
 8009b62:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009b64:	e003      	b.n	8009b6e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b68:	2207      	movs	r2, #7
 8009b6a:	701a      	strb	r2, [r3, #0]
 8009b6c:	e000      	b.n	8009b70 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009b6e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009b70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b74:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009b78:	3201      	adds	r2, #1
 8009b7a:	00d2      	lsls	r2, r2, #3
 8009b7c:	211a      	movs	r1, #26
 8009b7e:	fb01 f303 	mul.w	r3, r1, r3
 8009b82:	4413      	add	r3, r2
 8009b84:	3308      	adds	r3, #8
 8009b86:	6a3a      	ldr	r2, [r7, #32]
 8009b88:	4413      	add	r3, r2
 8009b8a:	3304      	adds	r3, #4
 8009b8c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009b8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009b90:	69b9      	ldr	r1, [r7, #24]
 8009b92:	68f8      	ldr	r0, [r7, #12]
 8009b94:	f000 f870 	bl	8009c78 <USBH_ParseEPDesc>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8009b9e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009ba2:	3301      	adds	r3, #1
 8009ba4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009ba8:	69fb      	ldr	r3, [r7, #28]
 8009baa:	791b      	ldrb	r3, [r3, #4]
 8009bac:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	d204      	bcs.n	8009bbe <USBH_ParseCfgDesc+0x19e>
 8009bb4:	6a3b      	ldr	r3, [r7, #32]
 8009bb6:	885a      	ldrh	r2, [r3, #2]
 8009bb8:	8afb      	ldrh	r3, [r7, #22]
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d8b0      	bhi.n	8009b20 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009bbe:	69fb      	ldr	r3, [r7, #28]
 8009bc0:	791b      	ldrb	r3, [r3, #4]
 8009bc2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d201      	bcs.n	8009bce <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8009bca:	2303      	movs	r3, #3
 8009bcc:	e01c      	b.n	8009c08 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8009bce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009bd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	d805      	bhi.n	8009bec <USBH_ParseCfgDesc+0x1cc>
 8009be0:	6a3b      	ldr	r3, [r7, #32]
 8009be2:	885a      	ldrh	r2, [r3, #2]
 8009be4:	8afb      	ldrh	r3, [r7, #22]
 8009be6:	429a      	cmp	r2, r3
 8009be8:	f63f af74 	bhi.w	8009ad4 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009bec:	6a3b      	ldr	r3, [r7, #32]
 8009bee:	791b      	ldrb	r3, [r3, #4]
 8009bf0:	2b02      	cmp	r3, #2
 8009bf2:	bf28      	it	cs
 8009bf4:	2302      	movcs	r3, #2
 8009bf6:	b2db      	uxtb	r3, r3
 8009bf8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d201      	bcs.n	8009c04 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8009c00:	2303      	movs	r3, #3
 8009c02:	e001      	b.n	8009c08 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8009c04:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3730      	adds	r7, #48	@ 0x30
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}

08009c10 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b083      	sub	sp, #12
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	781a      	ldrb	r2, [r3, #0]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	785a      	ldrb	r2, [r3, #1]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	789a      	ldrb	r2, [r3, #2]
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	78da      	ldrb	r2, [r3, #3]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	3304      	adds	r3, #4
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	2b02      	cmp	r3, #2
 8009c42:	bf28      	it	cs
 8009c44:	2302      	movcs	r3, #2
 8009c46:	b2da      	uxtb	r2, r3
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	795a      	ldrb	r2, [r3, #5]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	799a      	ldrb	r2, [r3, #6]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	79da      	ldrb	r2, [r3, #7]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	7a1a      	ldrb	r2, [r3, #8]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	721a      	strb	r2, [r3, #8]
}
 8009c6c:	bf00      	nop
 8009c6e:	370c      	adds	r7, #12
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr

08009c78 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b087      	sub	sp, #28
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	60f8      	str	r0, [r7, #12]
 8009c80:	60b9      	str	r1, [r7, #8]
 8009c82:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009c84:	2300      	movs	r3, #0
 8009c86:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	781a      	ldrb	r2, [r3, #0]
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	785a      	ldrb	r2, [r3, #1]
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	789a      	ldrb	r2, [r3, #2]
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	78da      	ldrb	r2, [r3, #3]
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	3304      	adds	r3, #4
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	461a      	mov	r2, r3
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	3305      	adds	r3, #5
 8009cb4:	781b      	ldrb	r3, [r3, #0]
 8009cb6:	021b      	lsls	r3, r3, #8
 8009cb8:	b29b      	uxth	r3, r3
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	b29a      	uxth	r2, r3
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	799a      	ldrb	r2, [r3, #6]
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	889b      	ldrh	r3, [r3, #4]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d009      	beq.n	8009ce6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009cd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009cda:	d804      	bhi.n	8009ce6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009ce0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ce4:	d901      	bls.n	8009cea <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8009ce6:	2303      	movs	r3, #3
 8009ce8:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d136      	bne.n	8009d62 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	78db      	ldrb	r3, [r3, #3]
 8009cf8:	f003 0303 	and.w	r3, r3, #3
 8009cfc:	2b02      	cmp	r3, #2
 8009cfe:	d108      	bne.n	8009d12 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	889b      	ldrh	r3, [r3, #4]
 8009d04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d08:	f240 8097 	bls.w	8009e3a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009d0c:	2303      	movs	r3, #3
 8009d0e:	75fb      	strb	r3, [r7, #23]
 8009d10:	e093      	b.n	8009e3a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	78db      	ldrb	r3, [r3, #3]
 8009d16:	f003 0303 	and.w	r3, r3, #3
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d107      	bne.n	8009d2e <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	889b      	ldrh	r3, [r3, #4]
 8009d22:	2b40      	cmp	r3, #64	@ 0x40
 8009d24:	f240 8089 	bls.w	8009e3a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009d28:	2303      	movs	r3, #3
 8009d2a:	75fb      	strb	r3, [r7, #23]
 8009d2c:	e085      	b.n	8009e3a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	78db      	ldrb	r3, [r3, #3]
 8009d32:	f003 0303 	and.w	r3, r3, #3
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	d005      	beq.n	8009d46 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	78db      	ldrb	r3, [r3, #3]
 8009d3e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009d42:	2b03      	cmp	r3, #3
 8009d44:	d10a      	bne.n	8009d5c <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	799b      	ldrb	r3, [r3, #6]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d003      	beq.n	8009d56 <USBH_ParseEPDesc+0xde>
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	799b      	ldrb	r3, [r3, #6]
 8009d52:	2b10      	cmp	r3, #16
 8009d54:	d970      	bls.n	8009e38 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8009d56:	2303      	movs	r3, #3
 8009d58:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009d5a:	e06d      	b.n	8009e38 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009d5c:	2303      	movs	r3, #3
 8009d5e:	75fb      	strb	r3, [r7, #23]
 8009d60:	e06b      	b.n	8009e3a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009d68:	2b01      	cmp	r3, #1
 8009d6a:	d13c      	bne.n	8009de6 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	78db      	ldrb	r3, [r3, #3]
 8009d70:	f003 0303 	and.w	r3, r3, #3
 8009d74:	2b02      	cmp	r3, #2
 8009d76:	d005      	beq.n	8009d84 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	78db      	ldrb	r3, [r3, #3]
 8009d7c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d106      	bne.n	8009d92 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	889b      	ldrh	r3, [r3, #4]
 8009d88:	2b40      	cmp	r3, #64	@ 0x40
 8009d8a:	d956      	bls.n	8009e3a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009d8c:	2303      	movs	r3, #3
 8009d8e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009d90:	e053      	b.n	8009e3a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	78db      	ldrb	r3, [r3, #3]
 8009d96:	f003 0303 	and.w	r3, r3, #3
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d10e      	bne.n	8009dbc <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	799b      	ldrb	r3, [r3, #6]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d007      	beq.n	8009db6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009daa:	2b10      	cmp	r3, #16
 8009dac:	d803      	bhi.n	8009db6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8009db2:	2b40      	cmp	r3, #64	@ 0x40
 8009db4:	d941      	bls.n	8009e3a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009db6:	2303      	movs	r3, #3
 8009db8:	75fb      	strb	r3, [r7, #23]
 8009dba:	e03e      	b.n	8009e3a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	78db      	ldrb	r3, [r3, #3]
 8009dc0:	f003 0303 	and.w	r3, r3, #3
 8009dc4:	2b03      	cmp	r3, #3
 8009dc6:	d10b      	bne.n	8009de0 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	799b      	ldrb	r3, [r3, #6]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d004      	beq.n	8009dda <USBH_ParseEPDesc+0x162>
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	889b      	ldrh	r3, [r3, #4]
 8009dd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009dd8:	d32f      	bcc.n	8009e3a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009dda:	2303      	movs	r3, #3
 8009ddc:	75fb      	strb	r3, [r7, #23]
 8009dde:	e02c      	b.n	8009e3a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009de0:	2303      	movs	r3, #3
 8009de2:	75fb      	strb	r3, [r7, #23]
 8009de4:	e029      	b.n	8009e3a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009dec:	2b02      	cmp	r3, #2
 8009dee:	d120      	bne.n	8009e32 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	78db      	ldrb	r3, [r3, #3]
 8009df4:	f003 0303 	and.w	r3, r3, #3
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d106      	bne.n	8009e0a <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	889b      	ldrh	r3, [r3, #4]
 8009e00:	2b08      	cmp	r3, #8
 8009e02:	d01a      	beq.n	8009e3a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009e04:	2303      	movs	r3, #3
 8009e06:	75fb      	strb	r3, [r7, #23]
 8009e08:	e017      	b.n	8009e3a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	78db      	ldrb	r3, [r3, #3]
 8009e0e:	f003 0303 	and.w	r3, r3, #3
 8009e12:	2b03      	cmp	r3, #3
 8009e14:	d10a      	bne.n	8009e2c <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	799b      	ldrb	r3, [r3, #6]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d003      	beq.n	8009e26 <USBH_ParseEPDesc+0x1ae>
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	889b      	ldrh	r3, [r3, #4]
 8009e22:	2b08      	cmp	r3, #8
 8009e24:	d909      	bls.n	8009e3a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009e26:	2303      	movs	r3, #3
 8009e28:	75fb      	strb	r3, [r7, #23]
 8009e2a:	e006      	b.n	8009e3a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009e2c:	2303      	movs	r3, #3
 8009e2e:	75fb      	strb	r3, [r7, #23]
 8009e30:	e003      	b.n	8009e3a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009e32:	2303      	movs	r3, #3
 8009e34:	75fb      	strb	r3, [r7, #23]
 8009e36:	e000      	b.n	8009e3a <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009e38:	bf00      	nop
  }

  return status;
 8009e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	371c      	adds	r7, #28
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr

08009e48 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b087      	sub	sp, #28
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	60f8      	str	r0, [r7, #12]
 8009e50:	60b9      	str	r1, [r7, #8]
 8009e52:	4613      	mov	r3, r2
 8009e54:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	3301      	adds	r3, #1
 8009e5a:	781b      	ldrb	r3, [r3, #0]
 8009e5c:	2b03      	cmp	r3, #3
 8009e5e:	d120      	bne.n	8009ea2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	1e9a      	subs	r2, r3, #2
 8009e66:	88fb      	ldrh	r3, [r7, #6]
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	bf28      	it	cs
 8009e6c:	4613      	movcs	r3, r2
 8009e6e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	3302      	adds	r3, #2
 8009e74:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009e76:	2300      	movs	r3, #0
 8009e78:	82fb      	strh	r3, [r7, #22]
 8009e7a:	e00b      	b.n	8009e94 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009e7c:	8afb      	ldrh	r3, [r7, #22]
 8009e7e:	68fa      	ldr	r2, [r7, #12]
 8009e80:	4413      	add	r3, r2
 8009e82:	781a      	ldrb	r2, [r3, #0]
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	3301      	adds	r3, #1
 8009e8c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009e8e:	8afb      	ldrh	r3, [r7, #22]
 8009e90:	3302      	adds	r3, #2
 8009e92:	82fb      	strh	r3, [r7, #22]
 8009e94:	8afa      	ldrh	r2, [r7, #22]
 8009e96:	8abb      	ldrh	r3, [r7, #20]
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d3ef      	bcc.n	8009e7c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	701a      	strb	r2, [r3, #0]
  }
}
 8009ea2:	bf00      	nop
 8009ea4:	371c      	adds	r7, #28
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr

08009eae <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009eae:	b480      	push	{r7}
 8009eb0:	b085      	sub	sp, #20
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]
 8009eb6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	881b      	ldrh	r3, [r3, #0]
 8009ebc:	687a      	ldr	r2, [r7, #4]
 8009ebe:	7812      	ldrb	r2, [r2, #0]
 8009ec0:	4413      	add	r3, r2
 8009ec2:	b29a      	uxth	r2, r3
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	781b      	ldrb	r3, [r3, #0]
 8009ecc:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	4413      	add	r3, r2
 8009ed2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3714      	adds	r7, #20
 8009eda:	46bd      	mov	sp, r7
 8009edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee0:	4770      	bx	lr

08009ee2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009ee2:	b580      	push	{r7, lr}
 8009ee4:	b086      	sub	sp, #24
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	60f8      	str	r0, [r7, #12]
 8009eea:	60b9      	str	r1, [r7, #8]
 8009eec:	4613      	mov	r3, r2
 8009eee:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	789b      	ldrb	r3, [r3, #2]
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	d002      	beq.n	8009f02 <USBH_CtlReq+0x20>
 8009efc:	2b02      	cmp	r3, #2
 8009efe:	d00f      	beq.n	8009f20 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009f00:	e027      	b.n	8009f52 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	68ba      	ldr	r2, [r7, #8]
 8009f06:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	88fa      	ldrh	r2, [r7, #6]
 8009f0c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2201      	movs	r2, #1
 8009f12:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	2202      	movs	r2, #2
 8009f18:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	75fb      	strb	r3, [r7, #23]
      break;
 8009f1e:	e018      	b.n	8009f52 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009f20:	68f8      	ldr	r0, [r7, #12]
 8009f22:	f000 f81b 	bl	8009f5c <USBH_HandleControl>
 8009f26:	4603      	mov	r3, r0
 8009f28:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009f2a:	7dfb      	ldrb	r3, [r7, #23]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d002      	beq.n	8009f36 <USBH_CtlReq+0x54>
 8009f30:	7dfb      	ldrb	r3, [r7, #23]
 8009f32:	2b03      	cmp	r3, #3
 8009f34:	d106      	bne.n	8009f44 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	2201      	movs	r2, #1
 8009f3a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	761a      	strb	r2, [r3, #24]
      break;
 8009f42:	e005      	b.n	8009f50 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009f44:	7dfb      	ldrb	r3, [r7, #23]
 8009f46:	2b02      	cmp	r3, #2
 8009f48:	d102      	bne.n	8009f50 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	709a      	strb	r2, [r3, #2]
      break;
 8009f50:	bf00      	nop
  }
  return status;
 8009f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3718      	adds	r7, #24
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b086      	sub	sp, #24
 8009f60:	af02      	add	r7, sp, #8
 8009f62:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009f64:	2301      	movs	r3, #1
 8009f66:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	7e1b      	ldrb	r3, [r3, #24]
 8009f70:	3b01      	subs	r3, #1
 8009f72:	2b0a      	cmp	r3, #10
 8009f74:	f200 8156 	bhi.w	800a224 <USBH_HandleControl+0x2c8>
 8009f78:	a201      	add	r2, pc, #4	@ (adr r2, 8009f80 <USBH_HandleControl+0x24>)
 8009f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f7e:	bf00      	nop
 8009f80:	08009fad 	.word	0x08009fad
 8009f84:	08009fc7 	.word	0x08009fc7
 8009f88:	0800a031 	.word	0x0800a031
 8009f8c:	0800a057 	.word	0x0800a057
 8009f90:	0800a08f 	.word	0x0800a08f
 8009f94:	0800a0b9 	.word	0x0800a0b9
 8009f98:	0800a10b 	.word	0x0800a10b
 8009f9c:	0800a12d 	.word	0x0800a12d
 8009fa0:	0800a169 	.word	0x0800a169
 8009fa4:	0800a18f 	.word	0x0800a18f
 8009fa8:	0800a1cd 	.word	0x0800a1cd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f103 0110 	add.w	r1, r3, #16
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	795b      	ldrb	r3, [r3, #5]
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f000 f943 	bl	800a244 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2202      	movs	r2, #2
 8009fc2:	761a      	strb	r2, [r3, #24]
      break;
 8009fc4:	e139      	b.n	800a23a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	795b      	ldrb	r3, [r3, #5]
 8009fca:	4619      	mov	r1, r3
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f000 fcc5 	bl	800a95c <USBH_LL_GetURBState>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009fd6:	7bbb      	ldrb	r3, [r7, #14]
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	d11e      	bne.n	800a01a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	7c1b      	ldrb	r3, [r3, #16]
 8009fe0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009fe4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	8adb      	ldrh	r3, [r3, #22]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d00a      	beq.n	800a004 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009fee:	7b7b      	ldrb	r3, [r7, #13]
 8009ff0:	2b80      	cmp	r3, #128	@ 0x80
 8009ff2:	d103      	bne.n	8009ffc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2203      	movs	r2, #3
 8009ff8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009ffa:	e115      	b.n	800a228 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2205      	movs	r2, #5
 800a000:	761a      	strb	r2, [r3, #24]
      break;
 800a002:	e111      	b.n	800a228 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a004:	7b7b      	ldrb	r3, [r7, #13]
 800a006:	2b80      	cmp	r3, #128	@ 0x80
 800a008:	d103      	bne.n	800a012 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2209      	movs	r2, #9
 800a00e:	761a      	strb	r2, [r3, #24]
      break;
 800a010:	e10a      	b.n	800a228 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2207      	movs	r2, #7
 800a016:	761a      	strb	r2, [r3, #24]
      break;
 800a018:	e106      	b.n	800a228 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a01a:	7bbb      	ldrb	r3, [r7, #14]
 800a01c:	2b04      	cmp	r3, #4
 800a01e:	d003      	beq.n	800a028 <USBH_HandleControl+0xcc>
 800a020:	7bbb      	ldrb	r3, [r7, #14]
 800a022:	2b02      	cmp	r3, #2
 800a024:	f040 8100 	bne.w	800a228 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	220b      	movs	r2, #11
 800a02c:	761a      	strb	r2, [r3, #24]
      break;
 800a02e:	e0fb      	b.n	800a228 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a036:	b29a      	uxth	r2, r3
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6899      	ldr	r1, [r3, #8]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	899a      	ldrh	r2, [r3, #12]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	791b      	ldrb	r3, [r3, #4]
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f000 f93a 	bl	800a2c2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2204      	movs	r2, #4
 800a052:	761a      	strb	r2, [r3, #24]
      break;
 800a054:	e0f1      	b.n	800a23a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	791b      	ldrb	r3, [r3, #4]
 800a05a:	4619      	mov	r1, r3
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f000 fc7d 	bl	800a95c <USBH_LL_GetURBState>
 800a062:	4603      	mov	r3, r0
 800a064:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a066:	7bbb      	ldrb	r3, [r7, #14]
 800a068:	2b01      	cmp	r3, #1
 800a06a:	d102      	bne.n	800a072 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2209      	movs	r2, #9
 800a070:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a072:	7bbb      	ldrb	r3, [r7, #14]
 800a074:	2b05      	cmp	r3, #5
 800a076:	d102      	bne.n	800a07e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a078:	2303      	movs	r3, #3
 800a07a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a07c:	e0d6      	b.n	800a22c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a07e:	7bbb      	ldrb	r3, [r7, #14]
 800a080:	2b04      	cmp	r3, #4
 800a082:	f040 80d3 	bne.w	800a22c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	220b      	movs	r2, #11
 800a08a:	761a      	strb	r2, [r3, #24]
      break;
 800a08c:	e0ce      	b.n	800a22c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6899      	ldr	r1, [r3, #8]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	899a      	ldrh	r2, [r3, #12]
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	795b      	ldrb	r3, [r3, #5]
 800a09a:	2001      	movs	r0, #1
 800a09c:	9000      	str	r0, [sp, #0]
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f000 f8ea 	bl	800a278 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a0aa:	b29a      	uxth	r2, r3
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2206      	movs	r2, #6
 800a0b4:	761a      	strb	r2, [r3, #24]
      break;
 800a0b6:	e0c0      	b.n	800a23a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	795b      	ldrb	r3, [r3, #5]
 800a0bc:	4619      	mov	r1, r3
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f000 fc4c 	bl	800a95c <USBH_LL_GetURBState>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a0c8:	7bbb      	ldrb	r3, [r7, #14]
 800a0ca:	2b01      	cmp	r3, #1
 800a0cc:	d103      	bne.n	800a0d6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2207      	movs	r2, #7
 800a0d2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a0d4:	e0ac      	b.n	800a230 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a0d6:	7bbb      	ldrb	r3, [r7, #14]
 800a0d8:	2b05      	cmp	r3, #5
 800a0da:	d105      	bne.n	800a0e8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	220c      	movs	r2, #12
 800a0e0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a0e2:	2303      	movs	r3, #3
 800a0e4:	73fb      	strb	r3, [r7, #15]
      break;
 800a0e6:	e0a3      	b.n	800a230 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a0e8:	7bbb      	ldrb	r3, [r7, #14]
 800a0ea:	2b02      	cmp	r3, #2
 800a0ec:	d103      	bne.n	800a0f6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2205      	movs	r2, #5
 800a0f2:	761a      	strb	r2, [r3, #24]
      break;
 800a0f4:	e09c      	b.n	800a230 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a0f6:	7bbb      	ldrb	r3, [r7, #14]
 800a0f8:	2b04      	cmp	r3, #4
 800a0fa:	f040 8099 	bne.w	800a230 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	220b      	movs	r2, #11
 800a102:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a104:	2302      	movs	r3, #2
 800a106:	73fb      	strb	r3, [r7, #15]
      break;
 800a108:	e092      	b.n	800a230 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	791b      	ldrb	r3, [r3, #4]
 800a10e:	2200      	movs	r2, #0
 800a110:	2100      	movs	r1, #0
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f000 f8d5 	bl	800a2c2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a11e:	b29a      	uxth	r2, r3
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2208      	movs	r2, #8
 800a128:	761a      	strb	r2, [r3, #24]

      break;
 800a12a:	e086      	b.n	800a23a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	791b      	ldrb	r3, [r3, #4]
 800a130:	4619      	mov	r1, r3
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f000 fc12 	bl	800a95c <USBH_LL_GetURBState>
 800a138:	4603      	mov	r3, r0
 800a13a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a13c:	7bbb      	ldrb	r3, [r7, #14]
 800a13e:	2b01      	cmp	r3, #1
 800a140:	d105      	bne.n	800a14e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	220d      	movs	r2, #13
 800a146:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a148:	2300      	movs	r3, #0
 800a14a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a14c:	e072      	b.n	800a234 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a14e:	7bbb      	ldrb	r3, [r7, #14]
 800a150:	2b04      	cmp	r3, #4
 800a152:	d103      	bne.n	800a15c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	220b      	movs	r2, #11
 800a158:	761a      	strb	r2, [r3, #24]
      break;
 800a15a:	e06b      	b.n	800a234 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a15c:	7bbb      	ldrb	r3, [r7, #14]
 800a15e:	2b05      	cmp	r3, #5
 800a160:	d168      	bne.n	800a234 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a162:	2303      	movs	r3, #3
 800a164:	73fb      	strb	r3, [r7, #15]
      break;
 800a166:	e065      	b.n	800a234 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	795b      	ldrb	r3, [r3, #5]
 800a16c:	2201      	movs	r2, #1
 800a16e:	9200      	str	r2, [sp, #0]
 800a170:	2200      	movs	r2, #0
 800a172:	2100      	movs	r1, #0
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f000 f87f 	bl	800a278 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a180:	b29a      	uxth	r2, r3
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	220a      	movs	r2, #10
 800a18a:	761a      	strb	r2, [r3, #24]
      break;
 800a18c:	e055      	b.n	800a23a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	795b      	ldrb	r3, [r3, #5]
 800a192:	4619      	mov	r1, r3
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f000 fbe1 	bl	800a95c <USBH_LL_GetURBState>
 800a19a:	4603      	mov	r3, r0
 800a19c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a19e:	7bbb      	ldrb	r3, [r7, #14]
 800a1a0:	2b01      	cmp	r3, #1
 800a1a2:	d105      	bne.n	800a1b0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	220d      	movs	r2, #13
 800a1ac:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a1ae:	e043      	b.n	800a238 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a1b0:	7bbb      	ldrb	r3, [r7, #14]
 800a1b2:	2b02      	cmp	r3, #2
 800a1b4:	d103      	bne.n	800a1be <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2209      	movs	r2, #9
 800a1ba:	761a      	strb	r2, [r3, #24]
      break;
 800a1bc:	e03c      	b.n	800a238 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a1be:	7bbb      	ldrb	r3, [r7, #14]
 800a1c0:	2b04      	cmp	r3, #4
 800a1c2:	d139      	bne.n	800a238 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	220b      	movs	r2, #11
 800a1c8:	761a      	strb	r2, [r3, #24]
      break;
 800a1ca:	e035      	b.n	800a238 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	7e5b      	ldrb	r3, [r3, #25]
 800a1d0:	3301      	adds	r3, #1
 800a1d2:	b2da      	uxtb	r2, r3
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	765a      	strb	r2, [r3, #25]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	7e5b      	ldrb	r3, [r3, #25]
 800a1dc:	2b02      	cmp	r3, #2
 800a1de:	d806      	bhi.n	800a1ee <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a1ec:	e025      	b.n	800a23a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a1f4:	2106      	movs	r1, #6
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	795b      	ldrb	r3, [r3, #5]
 800a204:	4619      	mov	r1, r3
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f000 f90c 	bl	800a424 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	791b      	ldrb	r3, [r3, #4]
 800a210:	4619      	mov	r1, r3
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f000 f906 	bl	800a424 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2200      	movs	r2, #0
 800a21c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a21e:	2302      	movs	r3, #2
 800a220:	73fb      	strb	r3, [r7, #15]
      break;
 800a222:	e00a      	b.n	800a23a <USBH_HandleControl+0x2de>

    default:
      break;
 800a224:	bf00      	nop
 800a226:	e008      	b.n	800a23a <USBH_HandleControl+0x2de>
      break;
 800a228:	bf00      	nop
 800a22a:	e006      	b.n	800a23a <USBH_HandleControl+0x2de>
      break;
 800a22c:	bf00      	nop
 800a22e:	e004      	b.n	800a23a <USBH_HandleControl+0x2de>
      break;
 800a230:	bf00      	nop
 800a232:	e002      	b.n	800a23a <USBH_HandleControl+0x2de>
      break;
 800a234:	bf00      	nop
 800a236:	e000      	b.n	800a23a <USBH_HandleControl+0x2de>
      break;
 800a238:	bf00      	nop
  }

  return status;
 800a23a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3710      	adds	r7, #16
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}

0800a244 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b088      	sub	sp, #32
 800a248:	af04      	add	r7, sp, #16
 800a24a:	60f8      	str	r0, [r7, #12]
 800a24c:	60b9      	str	r1, [r7, #8]
 800a24e:	4613      	mov	r3, r2
 800a250:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a252:	79f9      	ldrb	r1, [r7, #7]
 800a254:	2300      	movs	r3, #0
 800a256:	9303      	str	r3, [sp, #12]
 800a258:	2308      	movs	r3, #8
 800a25a:	9302      	str	r3, [sp, #8]
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	9301      	str	r3, [sp, #4]
 800a260:	2300      	movs	r3, #0
 800a262:	9300      	str	r3, [sp, #0]
 800a264:	2300      	movs	r3, #0
 800a266:	2200      	movs	r2, #0
 800a268:	68f8      	ldr	r0, [r7, #12]
 800a26a:	f000 fb46 	bl	800a8fa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a26e:	2300      	movs	r3, #0
}
 800a270:	4618      	mov	r0, r3
 800a272:	3710      	adds	r7, #16
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b088      	sub	sp, #32
 800a27c:	af04      	add	r7, sp, #16
 800a27e:	60f8      	str	r0, [r7, #12]
 800a280:	60b9      	str	r1, [r7, #8]
 800a282:	4611      	mov	r1, r2
 800a284:	461a      	mov	r2, r3
 800a286:	460b      	mov	r3, r1
 800a288:	80fb      	strh	r3, [r7, #6]
 800a28a:	4613      	mov	r3, r2
 800a28c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a294:	2b00      	cmp	r3, #0
 800a296:	d001      	beq.n	800a29c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a298:	2300      	movs	r3, #0
 800a29a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a29c:	7979      	ldrb	r1, [r7, #5]
 800a29e:	7e3b      	ldrb	r3, [r7, #24]
 800a2a0:	9303      	str	r3, [sp, #12]
 800a2a2:	88fb      	ldrh	r3, [r7, #6]
 800a2a4:	9302      	str	r3, [sp, #8]
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	9301      	str	r3, [sp, #4]
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	9300      	str	r3, [sp, #0]
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	68f8      	ldr	r0, [r7, #12]
 800a2b4:	f000 fb21 	bl	800a8fa <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a2b8:	2300      	movs	r3, #0
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3710      	adds	r7, #16
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}

0800a2c2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a2c2:	b580      	push	{r7, lr}
 800a2c4:	b088      	sub	sp, #32
 800a2c6:	af04      	add	r7, sp, #16
 800a2c8:	60f8      	str	r0, [r7, #12]
 800a2ca:	60b9      	str	r1, [r7, #8]
 800a2cc:	4611      	mov	r1, r2
 800a2ce:	461a      	mov	r2, r3
 800a2d0:	460b      	mov	r3, r1
 800a2d2:	80fb      	strh	r3, [r7, #6]
 800a2d4:	4613      	mov	r3, r2
 800a2d6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a2d8:	7979      	ldrb	r1, [r7, #5]
 800a2da:	2300      	movs	r3, #0
 800a2dc:	9303      	str	r3, [sp, #12]
 800a2de:	88fb      	ldrh	r3, [r7, #6]
 800a2e0:	9302      	str	r3, [sp, #8]
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	9301      	str	r3, [sp, #4]
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	9300      	str	r3, [sp, #0]
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	68f8      	ldr	r0, [r7, #12]
 800a2f0:	f000 fb03 	bl	800a8fa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a2f4:	2300      	movs	r3, #0

}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3710      	adds	r7, #16
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}

0800a2fe <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a2fe:	b580      	push	{r7, lr}
 800a300:	b088      	sub	sp, #32
 800a302:	af04      	add	r7, sp, #16
 800a304:	60f8      	str	r0, [r7, #12]
 800a306:	60b9      	str	r1, [r7, #8]
 800a308:	4611      	mov	r1, r2
 800a30a:	461a      	mov	r2, r3
 800a30c:	460b      	mov	r3, r1
 800a30e:	80fb      	strh	r3, [r7, #6]
 800a310:	4613      	mov	r3, r2
 800a312:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d001      	beq.n	800a322 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a31e:	2300      	movs	r3, #0
 800a320:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a322:	7979      	ldrb	r1, [r7, #5]
 800a324:	7e3b      	ldrb	r3, [r7, #24]
 800a326:	9303      	str	r3, [sp, #12]
 800a328:	88fb      	ldrh	r3, [r7, #6]
 800a32a:	9302      	str	r3, [sp, #8]
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	9301      	str	r3, [sp, #4]
 800a330:	2301      	movs	r3, #1
 800a332:	9300      	str	r3, [sp, #0]
 800a334:	2302      	movs	r3, #2
 800a336:	2200      	movs	r2, #0
 800a338:	68f8      	ldr	r0, [r7, #12]
 800a33a:	f000 fade 	bl	800a8fa <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a33e:	2300      	movs	r3, #0
}
 800a340:	4618      	mov	r0, r3
 800a342:	3710      	adds	r7, #16
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}

0800a348 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b088      	sub	sp, #32
 800a34c:	af04      	add	r7, sp, #16
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	60b9      	str	r1, [r7, #8]
 800a352:	4611      	mov	r1, r2
 800a354:	461a      	mov	r2, r3
 800a356:	460b      	mov	r3, r1
 800a358:	80fb      	strh	r3, [r7, #6]
 800a35a:	4613      	mov	r3, r2
 800a35c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a35e:	7979      	ldrb	r1, [r7, #5]
 800a360:	2300      	movs	r3, #0
 800a362:	9303      	str	r3, [sp, #12]
 800a364:	88fb      	ldrh	r3, [r7, #6]
 800a366:	9302      	str	r3, [sp, #8]
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	9301      	str	r3, [sp, #4]
 800a36c:	2301      	movs	r3, #1
 800a36e:	9300      	str	r3, [sp, #0]
 800a370:	2302      	movs	r3, #2
 800a372:	2201      	movs	r2, #1
 800a374:	68f8      	ldr	r0, [r7, #12]
 800a376:	f000 fac0 	bl	800a8fa <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a37a:	2300      	movs	r3, #0
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3710      	adds	r7, #16
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}

0800a384 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b086      	sub	sp, #24
 800a388:	af04      	add	r7, sp, #16
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	4608      	mov	r0, r1
 800a38e:	4611      	mov	r1, r2
 800a390:	461a      	mov	r2, r3
 800a392:	4603      	mov	r3, r0
 800a394:	70fb      	strb	r3, [r7, #3]
 800a396:	460b      	mov	r3, r1
 800a398:	70bb      	strb	r3, [r7, #2]
 800a39a:	4613      	mov	r3, r2
 800a39c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a39e:	7878      	ldrb	r0, [r7, #1]
 800a3a0:	78ba      	ldrb	r2, [r7, #2]
 800a3a2:	78f9      	ldrb	r1, [r7, #3]
 800a3a4:	8b3b      	ldrh	r3, [r7, #24]
 800a3a6:	9302      	str	r3, [sp, #8]
 800a3a8:	7d3b      	ldrb	r3, [r7, #20]
 800a3aa:	9301      	str	r3, [sp, #4]
 800a3ac:	7c3b      	ldrb	r3, [r7, #16]
 800a3ae:	9300      	str	r3, [sp, #0]
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f000 fa53 	bl	800a85e <USBH_LL_OpenPipe>

  return USBH_OK;
 800a3b8:	2300      	movs	r3, #0
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3708      	adds	r7, #8
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}

0800a3c2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a3c2:	b580      	push	{r7, lr}
 800a3c4:	b082      	sub	sp, #8
 800a3c6:	af00      	add	r7, sp, #0
 800a3c8:	6078      	str	r0, [r7, #4]
 800a3ca:	460b      	mov	r3, r1
 800a3cc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a3ce:	78fb      	ldrb	r3, [r7, #3]
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f000 fa72 	bl	800a8bc <USBH_LL_ClosePipe>

  return USBH_OK;
 800a3d8:	2300      	movs	r3, #0
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3708      	adds	r7, #8
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}

0800a3e2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a3e2:	b580      	push	{r7, lr}
 800a3e4:	b084      	sub	sp, #16
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	6078      	str	r0, [r7, #4]
 800a3ea:	460b      	mov	r3, r1
 800a3ec:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f000 f836 	bl	800a460 <USBH_GetFreePipe>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a3f8:	89fb      	ldrh	r3, [r7, #14]
 800a3fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d00a      	beq.n	800a418 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a402:	78fa      	ldrb	r2, [r7, #3]
 800a404:	89fb      	ldrh	r3, [r7, #14]
 800a406:	f003 030f 	and.w	r3, r3, #15
 800a40a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a40e:	6879      	ldr	r1, [r7, #4]
 800a410:	33e0      	adds	r3, #224	@ 0xe0
 800a412:	009b      	lsls	r3, r3, #2
 800a414:	440b      	add	r3, r1
 800a416:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a418:	89fb      	ldrh	r3, [r7, #14]
 800a41a:	b2db      	uxtb	r3, r3
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3710      	adds	r7, #16
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}

0800a424 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a424:	b480      	push	{r7}
 800a426:	b083      	sub	sp, #12
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	460b      	mov	r3, r1
 800a42e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a430:	78fb      	ldrb	r3, [r7, #3]
 800a432:	2b0f      	cmp	r3, #15
 800a434:	d80d      	bhi.n	800a452 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a436:	78fb      	ldrb	r3, [r7, #3]
 800a438:	687a      	ldr	r2, [r7, #4]
 800a43a:	33e0      	adds	r3, #224	@ 0xe0
 800a43c:	009b      	lsls	r3, r3, #2
 800a43e:	4413      	add	r3, r2
 800a440:	685a      	ldr	r2, [r3, #4]
 800a442:	78fb      	ldrb	r3, [r7, #3]
 800a444:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a448:	6879      	ldr	r1, [r7, #4]
 800a44a:	33e0      	adds	r3, #224	@ 0xe0
 800a44c:	009b      	lsls	r3, r3, #2
 800a44e:	440b      	add	r3, r1
 800a450:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a452:	2300      	movs	r3, #0
}
 800a454:	4618      	mov	r0, r3
 800a456:	370c      	adds	r7, #12
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr

0800a460 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a460:	b480      	push	{r7}
 800a462:	b085      	sub	sp, #20
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a468:	2300      	movs	r3, #0
 800a46a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a46c:	2300      	movs	r3, #0
 800a46e:	73fb      	strb	r3, [r7, #15]
 800a470:	e00f      	b.n	800a492 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a472:	7bfb      	ldrb	r3, [r7, #15]
 800a474:	687a      	ldr	r2, [r7, #4]
 800a476:	33e0      	adds	r3, #224	@ 0xe0
 800a478:	009b      	lsls	r3, r3, #2
 800a47a:	4413      	add	r3, r2
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a482:	2b00      	cmp	r3, #0
 800a484:	d102      	bne.n	800a48c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a486:	7bfb      	ldrb	r3, [r7, #15]
 800a488:	b29b      	uxth	r3, r3
 800a48a:	e007      	b.n	800a49c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a48c:	7bfb      	ldrb	r3, [r7, #15]
 800a48e:	3301      	adds	r3, #1
 800a490:	73fb      	strb	r3, [r7, #15]
 800a492:	7bfb      	ldrb	r3, [r7, #15]
 800a494:	2b0f      	cmp	r3, #15
 800a496:	d9ec      	bls.n	800a472 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a498:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3714      	adds	r7, #20
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a6:	4770      	bx	lr

0800a4a8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	490e      	ldr	r1, [pc, #56]	@ (800a4e8 <MX_USB_HOST_Init+0x40>)
 800a4b0:	480e      	ldr	r0, [pc, #56]	@ (800a4ec <MX_USB_HOST_Init+0x44>)
 800a4b2:	f7fe fb15 	bl	8008ae0 <USBH_Init>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d001      	beq.n	800a4c0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a4bc:	f7f7 f9ce 	bl	800185c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a4c0:	490b      	ldr	r1, [pc, #44]	@ (800a4f0 <MX_USB_HOST_Init+0x48>)
 800a4c2:	480a      	ldr	r0, [pc, #40]	@ (800a4ec <MX_USB_HOST_Init+0x44>)
 800a4c4:	f7fe fbb9 	bl	8008c3a <USBH_RegisterClass>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d001      	beq.n	800a4d2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a4ce:	f7f7 f9c5 	bl	800185c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a4d2:	4806      	ldr	r0, [pc, #24]	@ (800a4ec <MX_USB_HOST_Init+0x44>)
 800a4d4:	f7fe fc3d 	bl	8008d52 <USBH_Start>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d001      	beq.n	800a4e2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a4de:	f7f7 f9bd 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a4e2:	bf00      	nop
 800a4e4:	bd80      	pop	{r7, pc}
 800a4e6:	bf00      	nop
 800a4e8:	0800a509 	.word	0x0800a509
 800a4ec:	200002f0 	.word	0x200002f0
 800a4f0:	2000000c 	.word	0x2000000c

0800a4f4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a4f8:	4802      	ldr	r0, [pc, #8]	@ (800a504 <MX_USB_HOST_Process+0x10>)
 800a4fa:	f7fe fc3b 	bl	8008d74 <USBH_Process>
}
 800a4fe:	bf00      	nop
 800a500:	bd80      	pop	{r7, pc}
 800a502:	bf00      	nop
 800a504:	200002f0 	.word	0x200002f0

0800a508 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a508:	b480      	push	{r7}
 800a50a:	b083      	sub	sp, #12
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	460b      	mov	r3, r1
 800a512:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a514:	78fb      	ldrb	r3, [r7, #3]
 800a516:	3b01      	subs	r3, #1
 800a518:	2b04      	cmp	r3, #4
 800a51a:	d819      	bhi.n	800a550 <USBH_UserProcess+0x48>
 800a51c:	a201      	add	r2, pc, #4	@ (adr r2, 800a524 <USBH_UserProcess+0x1c>)
 800a51e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a522:	bf00      	nop
 800a524:	0800a551 	.word	0x0800a551
 800a528:	0800a541 	.word	0x0800a541
 800a52c:	0800a551 	.word	0x0800a551
 800a530:	0800a549 	.word	0x0800a549
 800a534:	0800a539 	.word	0x0800a539
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a538:	4b09      	ldr	r3, [pc, #36]	@ (800a560 <USBH_UserProcess+0x58>)
 800a53a:	2203      	movs	r2, #3
 800a53c:	701a      	strb	r2, [r3, #0]
  break;
 800a53e:	e008      	b.n	800a552 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a540:	4b07      	ldr	r3, [pc, #28]	@ (800a560 <USBH_UserProcess+0x58>)
 800a542:	2202      	movs	r2, #2
 800a544:	701a      	strb	r2, [r3, #0]
  break;
 800a546:	e004      	b.n	800a552 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a548:	4b05      	ldr	r3, [pc, #20]	@ (800a560 <USBH_UserProcess+0x58>)
 800a54a:	2201      	movs	r2, #1
 800a54c:	701a      	strb	r2, [r3, #0]
  break;
 800a54e:	e000      	b.n	800a552 <USBH_UserProcess+0x4a>

  default:
  break;
 800a550:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a552:	bf00      	nop
 800a554:	370c      	adds	r7, #12
 800a556:	46bd      	mov	sp, r7
 800a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55c:	4770      	bx	lr
 800a55e:	bf00      	nop
 800a560:	200006c8 	.word	0x200006c8

0800a564 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b08a      	sub	sp, #40	@ 0x28
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a56c:	f107 0314 	add.w	r3, r7, #20
 800a570:	2200      	movs	r2, #0
 800a572:	601a      	str	r2, [r3, #0]
 800a574:	605a      	str	r2, [r3, #4]
 800a576:	609a      	str	r2, [r3, #8]
 800a578:	60da      	str	r2, [r3, #12]
 800a57a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a584:	d147      	bne.n	800a616 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a586:	2300      	movs	r3, #0
 800a588:	613b      	str	r3, [r7, #16]
 800a58a:	4b25      	ldr	r3, [pc, #148]	@ (800a620 <HAL_HCD_MspInit+0xbc>)
 800a58c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a58e:	4a24      	ldr	r2, [pc, #144]	@ (800a620 <HAL_HCD_MspInit+0xbc>)
 800a590:	f043 0301 	orr.w	r3, r3, #1
 800a594:	6313      	str	r3, [r2, #48]	@ 0x30
 800a596:	4b22      	ldr	r3, [pc, #136]	@ (800a620 <HAL_HCD_MspInit+0xbc>)
 800a598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a59a:	f003 0301 	and.w	r3, r3, #1
 800a59e:	613b      	str	r3, [r7, #16]
 800a5a0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a5a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a5a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a5b0:	f107 0314 	add.w	r3, r7, #20
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	481b      	ldr	r0, [pc, #108]	@ (800a624 <HAL_HCD_MspInit+0xc0>)
 800a5b8:	f7f7 fd5c 	bl	8002074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a5bc:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800a5c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5c2:	2302      	movs	r3, #2
 800a5c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a5ce:	230a      	movs	r3, #10
 800a5d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a5d2:	f107 0314 	add.w	r3, r7, #20
 800a5d6:	4619      	mov	r1, r3
 800a5d8:	4812      	ldr	r0, [pc, #72]	@ (800a624 <HAL_HCD_MspInit+0xc0>)
 800a5da:	f7f7 fd4b 	bl	8002074 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a5de:	4b10      	ldr	r3, [pc, #64]	@ (800a620 <HAL_HCD_MspInit+0xbc>)
 800a5e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5e2:	4a0f      	ldr	r2, [pc, #60]	@ (800a620 <HAL_HCD_MspInit+0xbc>)
 800a5e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5e8:	6353      	str	r3, [r2, #52]	@ 0x34
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	60fb      	str	r3, [r7, #12]
 800a5ee:	4b0c      	ldr	r3, [pc, #48]	@ (800a620 <HAL_HCD_MspInit+0xbc>)
 800a5f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5f2:	4a0b      	ldr	r2, [pc, #44]	@ (800a620 <HAL_HCD_MspInit+0xbc>)
 800a5f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a5f8:	6453      	str	r3, [r2, #68]	@ 0x44
 800a5fa:	4b09      	ldr	r3, [pc, #36]	@ (800a620 <HAL_HCD_MspInit+0xbc>)
 800a5fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a602:	60fb      	str	r3, [r7, #12]
 800a604:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a606:	2200      	movs	r2, #0
 800a608:	2100      	movs	r1, #0
 800a60a:	2043      	movs	r0, #67	@ 0x43
 800a60c:	f7f7 fcfb 	bl	8002006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a610:	2043      	movs	r0, #67	@ 0x43
 800a612:	f7f7 fd14 	bl	800203e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a616:	bf00      	nop
 800a618:	3728      	adds	r7, #40	@ 0x28
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}
 800a61e:	bf00      	nop
 800a620:	40023800 	.word	0x40023800
 800a624:	40020000 	.word	0x40020000

0800a628 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b082      	sub	sp, #8
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a636:	4618      	mov	r0, r3
 800a638:	f7fe ff73 	bl	8009522 <USBH_LL_IncTimer>
}
 800a63c:	bf00      	nop
 800a63e:	3708      	adds	r7, #8
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b082      	sub	sp, #8
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a652:	4618      	mov	r0, r3
 800a654:	f7fe ffab 	bl	80095ae <USBH_LL_Connect>
}
 800a658:	bf00      	nop
 800a65a:	3708      	adds	r7, #8
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}

0800a660 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b082      	sub	sp, #8
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a66e:	4618      	mov	r0, r3
 800a670:	f7fe ffb4 	bl	80095dc <USBH_LL_Disconnect>
}
 800a674:	bf00      	nop
 800a676:	3708      	adds	r7, #8
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}

0800a67c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a67c:	b480      	push	{r7}
 800a67e:	b083      	sub	sp, #12
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
 800a684:	460b      	mov	r3, r1
 800a686:	70fb      	strb	r3, [r7, #3]
 800a688:	4613      	mov	r3, r2
 800a68a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a68c:	bf00      	nop
 800a68e:	370c      	adds	r7, #12
 800a690:	46bd      	mov	sp, r7
 800a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a696:	4770      	bx	lr

0800a698 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f7fe ff65 	bl	8009576 <USBH_LL_PortEnabled>
}
 800a6ac:	bf00      	nop
 800a6ae:	3708      	adds	r7, #8
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}

0800a6b4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b082      	sub	sp, #8
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f7fe ff65 	bl	8009592 <USBH_LL_PortDisabled>
}
 800a6c8:	bf00      	nop
 800a6ca:	3708      	adds	r7, #8
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}

0800a6d0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b082      	sub	sp, #8
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a6de:	2b01      	cmp	r3, #1
 800a6e0:	d12a      	bne.n	800a738 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a6e2:	4a18      	ldr	r2, [pc, #96]	@ (800a744 <USBH_LL_Init+0x74>)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	4a15      	ldr	r2, [pc, #84]	@ (800a744 <USBH_LL_Init+0x74>)
 800a6ee:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a6f2:	4b14      	ldr	r3, [pc, #80]	@ (800a744 <USBH_LL_Init+0x74>)
 800a6f4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a6f8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a6fa:	4b12      	ldr	r3, [pc, #72]	@ (800a744 <USBH_LL_Init+0x74>)
 800a6fc:	2208      	movs	r2, #8
 800a6fe:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a700:	4b10      	ldr	r3, [pc, #64]	@ (800a744 <USBH_LL_Init+0x74>)
 800a702:	2201      	movs	r2, #1
 800a704:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a706:	4b0f      	ldr	r3, [pc, #60]	@ (800a744 <USBH_LL_Init+0x74>)
 800a708:	2200      	movs	r2, #0
 800a70a:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a70c:	4b0d      	ldr	r3, [pc, #52]	@ (800a744 <USBH_LL_Init+0x74>)
 800a70e:	2202      	movs	r2, #2
 800a710:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a712:	4b0c      	ldr	r3, [pc, #48]	@ (800a744 <USBH_LL_Init+0x74>)
 800a714:	2200      	movs	r2, #0
 800a716:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a718:	480a      	ldr	r0, [pc, #40]	@ (800a744 <USBH_LL_Init+0x74>)
 800a71a:	f7f7 fe7a 	bl	8002412 <HAL_HCD_Init>
 800a71e:	4603      	mov	r3, r0
 800a720:	2b00      	cmp	r3, #0
 800a722:	d001      	beq.n	800a728 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a724:	f7f7 f89a 	bl	800185c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a728:	4806      	ldr	r0, [pc, #24]	@ (800a744 <USBH_LL_Init+0x74>)
 800a72a:	f7f8 fadb 	bl	8002ce4 <HAL_HCD_GetCurrentFrame>
 800a72e:	4603      	mov	r3, r0
 800a730:	4619      	mov	r1, r3
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f7fe fee6 	bl	8009504 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a738:	2300      	movs	r3, #0
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3708      	adds	r7, #8
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}
 800a742:	bf00      	nop
 800a744:	200006cc 	.word	0x200006cc

0800a748 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a750:	2300      	movs	r3, #0
 800a752:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a754:	2300      	movs	r3, #0
 800a756:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a75e:	4618      	mov	r0, r3
 800a760:	f7f8 fa48 	bl	8002bf4 <HAL_HCD_Start>
 800a764:	4603      	mov	r3, r0
 800a766:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a768:	7bfb      	ldrb	r3, [r7, #15]
 800a76a:	4618      	mov	r0, r3
 800a76c:	f000 f95e 	bl	800aa2c <USBH_Get_USB_Status>
 800a770:	4603      	mov	r3, r0
 800a772:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a774:	7bbb      	ldrb	r3, [r7, #14]
}
 800a776:	4618      	mov	r0, r3
 800a778:	3710      	adds	r7, #16
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}

0800a77e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a77e:	b580      	push	{r7, lr}
 800a780:	b084      	sub	sp, #16
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a786:	2300      	movs	r3, #0
 800a788:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a78a:	2300      	movs	r3, #0
 800a78c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a794:	4618      	mov	r0, r3
 800a796:	f7f8 fa50 	bl	8002c3a <HAL_HCD_Stop>
 800a79a:	4603      	mov	r3, r0
 800a79c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a79e:	7bfb      	ldrb	r3, [r7, #15]
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f000 f943 	bl	800aa2c <USBH_Get_USB_Status>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3710      	adds	r7, #16
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a7bc:	2301      	movs	r3, #1
 800a7be:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f7f8 fa9a 	bl	8002d00 <HAL_HCD_GetCurrentSpeed>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	2b02      	cmp	r3, #2
 800a7d0:	d00c      	beq.n	800a7ec <USBH_LL_GetSpeed+0x38>
 800a7d2:	2b02      	cmp	r3, #2
 800a7d4:	d80d      	bhi.n	800a7f2 <USBH_LL_GetSpeed+0x3e>
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d002      	beq.n	800a7e0 <USBH_LL_GetSpeed+0x2c>
 800a7da:	2b01      	cmp	r3, #1
 800a7dc:	d003      	beq.n	800a7e6 <USBH_LL_GetSpeed+0x32>
 800a7de:	e008      	b.n	800a7f2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	73fb      	strb	r3, [r7, #15]
    break;
 800a7e4:	e008      	b.n	800a7f8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	73fb      	strb	r3, [r7, #15]
    break;
 800a7ea:	e005      	b.n	800a7f8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a7ec:	2302      	movs	r3, #2
 800a7ee:	73fb      	strb	r3, [r7, #15]
    break;
 800a7f0:	e002      	b.n	800a7f8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	73fb      	strb	r3, [r7, #15]
    break;
 800a7f6:	bf00      	nop
  }
  return  speed;
 800a7f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	3710      	adds	r7, #16
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}

0800a802 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a802:	b580      	push	{r7, lr}
 800a804:	b084      	sub	sp, #16
 800a806:	af00      	add	r7, sp, #0
 800a808:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a80a:	2300      	movs	r3, #0
 800a80c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a80e:	2300      	movs	r3, #0
 800a810:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a818:	4618      	mov	r0, r3
 800a81a:	f7f8 fa2b 	bl	8002c74 <HAL_HCD_ResetPort>
 800a81e:	4603      	mov	r3, r0
 800a820:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a822:	7bfb      	ldrb	r3, [r7, #15]
 800a824:	4618      	mov	r0, r3
 800a826:	f000 f901 	bl	800aa2c <USBH_Get_USB_Status>
 800a82a:	4603      	mov	r3, r0
 800a82c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a82e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a830:	4618      	mov	r0, r3
 800a832:	3710      	adds	r7, #16
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}

0800a838 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b082      	sub	sp, #8
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	460b      	mov	r3, r1
 800a842:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a84a:	78fa      	ldrb	r2, [r7, #3]
 800a84c:	4611      	mov	r1, r2
 800a84e:	4618      	mov	r0, r3
 800a850:	f7f8 fa33 	bl	8002cba <HAL_HCD_HC_GetXferCount>
 800a854:	4603      	mov	r3, r0
}
 800a856:	4618      	mov	r0, r3
 800a858:	3708      	adds	r7, #8
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}

0800a85e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a85e:	b590      	push	{r4, r7, lr}
 800a860:	b089      	sub	sp, #36	@ 0x24
 800a862:	af04      	add	r7, sp, #16
 800a864:	6078      	str	r0, [r7, #4]
 800a866:	4608      	mov	r0, r1
 800a868:	4611      	mov	r1, r2
 800a86a:	461a      	mov	r2, r3
 800a86c:	4603      	mov	r3, r0
 800a86e:	70fb      	strb	r3, [r7, #3]
 800a870:	460b      	mov	r3, r1
 800a872:	70bb      	strb	r3, [r7, #2]
 800a874:	4613      	mov	r3, r2
 800a876:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a878:	2300      	movs	r3, #0
 800a87a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a87c:	2300      	movs	r3, #0
 800a87e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a886:	787c      	ldrb	r4, [r7, #1]
 800a888:	78ba      	ldrb	r2, [r7, #2]
 800a88a:	78f9      	ldrb	r1, [r7, #3]
 800a88c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a88e:	9302      	str	r3, [sp, #8]
 800a890:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a894:	9301      	str	r3, [sp, #4]
 800a896:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a89a:	9300      	str	r3, [sp, #0]
 800a89c:	4623      	mov	r3, r4
 800a89e:	f7f7 fe1f 	bl	80024e0 <HAL_HCD_HC_Init>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a8a6:	7bfb      	ldrb	r3, [r7, #15]
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f000 f8bf 	bl	800aa2c <USBH_Get_USB_Status>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3714      	adds	r7, #20
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd90      	pop	{r4, r7, pc}

0800a8bc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b084      	sub	sp, #16
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	460b      	mov	r3, r1
 800a8c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a8d6:	78fa      	ldrb	r2, [r7, #3]
 800a8d8:	4611      	mov	r1, r2
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f7f7 feb8 	bl	8002650 <HAL_HCD_HC_Halt>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a8e4:	7bfb      	ldrb	r3, [r7, #15]
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f000 f8a0 	bl	800aa2c <USBH_Get_USB_Status>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3710      	adds	r7, #16
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}

0800a8fa <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a8fa:	b590      	push	{r4, r7, lr}
 800a8fc:	b089      	sub	sp, #36	@ 0x24
 800a8fe:	af04      	add	r7, sp, #16
 800a900:	6078      	str	r0, [r7, #4]
 800a902:	4608      	mov	r0, r1
 800a904:	4611      	mov	r1, r2
 800a906:	461a      	mov	r2, r3
 800a908:	4603      	mov	r3, r0
 800a90a:	70fb      	strb	r3, [r7, #3]
 800a90c:	460b      	mov	r3, r1
 800a90e:	70bb      	strb	r3, [r7, #2]
 800a910:	4613      	mov	r3, r2
 800a912:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a914:	2300      	movs	r3, #0
 800a916:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a918:	2300      	movs	r3, #0
 800a91a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a922:	787c      	ldrb	r4, [r7, #1]
 800a924:	78ba      	ldrb	r2, [r7, #2]
 800a926:	78f9      	ldrb	r1, [r7, #3]
 800a928:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a92c:	9303      	str	r3, [sp, #12]
 800a92e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a930:	9302      	str	r3, [sp, #8]
 800a932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a934:	9301      	str	r3, [sp, #4]
 800a936:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a93a:	9300      	str	r3, [sp, #0]
 800a93c:	4623      	mov	r3, r4
 800a93e:	f7f7 feab 	bl	8002698 <HAL_HCD_HC_SubmitRequest>
 800a942:	4603      	mov	r3, r0
 800a944:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a946:	7bfb      	ldrb	r3, [r7, #15]
 800a948:	4618      	mov	r0, r3
 800a94a:	f000 f86f 	bl	800aa2c <USBH_Get_USB_Status>
 800a94e:	4603      	mov	r3, r0
 800a950:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a952:	7bbb      	ldrb	r3, [r7, #14]
}
 800a954:	4618      	mov	r0, r3
 800a956:	3714      	adds	r7, #20
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd90      	pop	{r4, r7, pc}

0800a95c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b082      	sub	sp, #8
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	460b      	mov	r3, r1
 800a966:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a96e:	78fa      	ldrb	r2, [r7, #3]
 800a970:	4611      	mov	r1, r2
 800a972:	4618      	mov	r0, r3
 800a974:	f7f8 f98c 	bl	8002c90 <HAL_HCD_HC_GetURBState>
 800a978:	4603      	mov	r3, r0
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3708      	adds	r7, #8
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}

0800a982 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a982:	b580      	push	{r7, lr}
 800a984:	b082      	sub	sp, #8
 800a986:	af00      	add	r7, sp, #0
 800a988:	6078      	str	r0, [r7, #4]
 800a98a:	460b      	mov	r3, r1
 800a98c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a994:	2b01      	cmp	r3, #1
 800a996:	d103      	bne.n	800a9a0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a998:	78fb      	ldrb	r3, [r7, #3]
 800a99a:	4618      	mov	r0, r3
 800a99c:	f000 f872 	bl	800aa84 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a9a0:	20c8      	movs	r0, #200	@ 0xc8
 800a9a2:	f7f7 fa31 	bl	8001e08 <HAL_Delay>
  return USBH_OK;
 800a9a6:	2300      	movs	r3, #0
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3708      	adds	r7, #8
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}

0800a9b0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b085      	sub	sp, #20
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
 800a9b8:	460b      	mov	r3, r1
 800a9ba:	70fb      	strb	r3, [r7, #3]
 800a9bc:	4613      	mov	r3, r2
 800a9be:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a9c6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a9c8:	78fa      	ldrb	r2, [r7, #3]
 800a9ca:	68f9      	ldr	r1, [r7, #12]
 800a9cc:	4613      	mov	r3, r2
 800a9ce:	011b      	lsls	r3, r3, #4
 800a9d0:	1a9b      	subs	r3, r3, r2
 800a9d2:	009b      	lsls	r3, r3, #2
 800a9d4:	440b      	add	r3, r1
 800a9d6:	3317      	adds	r3, #23
 800a9d8:	781b      	ldrb	r3, [r3, #0]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d00a      	beq.n	800a9f4 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a9de:	78fa      	ldrb	r2, [r7, #3]
 800a9e0:	68f9      	ldr	r1, [r7, #12]
 800a9e2:	4613      	mov	r3, r2
 800a9e4:	011b      	lsls	r3, r3, #4
 800a9e6:	1a9b      	subs	r3, r3, r2
 800a9e8:	009b      	lsls	r3, r3, #2
 800a9ea:	440b      	add	r3, r1
 800a9ec:	333c      	adds	r3, #60	@ 0x3c
 800a9ee:	78ba      	ldrb	r2, [r7, #2]
 800a9f0:	701a      	strb	r2, [r3, #0]
 800a9f2:	e009      	b.n	800aa08 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a9f4:	78fa      	ldrb	r2, [r7, #3]
 800a9f6:	68f9      	ldr	r1, [r7, #12]
 800a9f8:	4613      	mov	r3, r2
 800a9fa:	011b      	lsls	r3, r3, #4
 800a9fc:	1a9b      	subs	r3, r3, r2
 800a9fe:	009b      	lsls	r3, r3, #2
 800aa00:	440b      	add	r3, r1
 800aa02:	333d      	adds	r3, #61	@ 0x3d
 800aa04:	78ba      	ldrb	r2, [r7, #2]
 800aa06:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800aa08:	2300      	movs	r3, #0
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3714      	adds	r7, #20
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa14:	4770      	bx	lr

0800aa16 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800aa16:	b580      	push	{r7, lr}
 800aa18:	b082      	sub	sp, #8
 800aa1a:	af00      	add	r7, sp, #0
 800aa1c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f7f7 f9f2 	bl	8001e08 <HAL_Delay>
}
 800aa24:	bf00      	nop
 800aa26:	3708      	adds	r7, #8
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}

0800aa2c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b085      	sub	sp, #20
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	4603      	mov	r3, r0
 800aa34:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aa36:	2300      	movs	r3, #0
 800aa38:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aa3a:	79fb      	ldrb	r3, [r7, #7]
 800aa3c:	2b03      	cmp	r3, #3
 800aa3e:	d817      	bhi.n	800aa70 <USBH_Get_USB_Status+0x44>
 800aa40:	a201      	add	r2, pc, #4	@ (adr r2, 800aa48 <USBH_Get_USB_Status+0x1c>)
 800aa42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa46:	bf00      	nop
 800aa48:	0800aa59 	.word	0x0800aa59
 800aa4c:	0800aa5f 	.word	0x0800aa5f
 800aa50:	0800aa65 	.word	0x0800aa65
 800aa54:	0800aa6b 	.word	0x0800aa6b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	73fb      	strb	r3, [r7, #15]
    break;
 800aa5c:	e00b      	b.n	800aa76 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800aa5e:	2302      	movs	r3, #2
 800aa60:	73fb      	strb	r3, [r7, #15]
    break;
 800aa62:	e008      	b.n	800aa76 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800aa64:	2301      	movs	r3, #1
 800aa66:	73fb      	strb	r3, [r7, #15]
    break;
 800aa68:	e005      	b.n	800aa76 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800aa6a:	2302      	movs	r3, #2
 800aa6c:	73fb      	strb	r3, [r7, #15]
    break;
 800aa6e:	e002      	b.n	800aa76 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800aa70:	2302      	movs	r3, #2
 800aa72:	73fb      	strb	r3, [r7, #15]
    break;
 800aa74:	bf00      	nop
  }
  return usb_status;
 800aa76:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	3714      	adds	r7, #20
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa82:	4770      	bx	lr

0800aa84 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b084      	sub	sp, #16
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800aa8e:	79fb      	ldrb	r3, [r7, #7]
 800aa90:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800aa92:	79fb      	ldrb	r3, [r7, #7]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d102      	bne.n	800aa9e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	73fb      	strb	r3, [r7, #15]
 800aa9c:	e001      	b.n	800aaa2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800aaa2:	7bfb      	ldrb	r3, [r7, #15]
 800aaa4:	461a      	mov	r2, r3
 800aaa6:	2101      	movs	r1, #1
 800aaa8:	4803      	ldr	r0, [pc, #12]	@ (800aab8 <MX_DriverVbusFS+0x34>)
 800aaaa:	f7f7 fc7f 	bl	80023ac <HAL_GPIO_WritePin>
}
 800aaae:	bf00      	nop
 800aab0:	3710      	adds	r7, #16
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}
 800aab6:	bf00      	nop
 800aab8:	40020800 	.word	0x40020800

0800aabc <malloc>:
 800aabc:	4b02      	ldr	r3, [pc, #8]	@ (800aac8 <malloc+0xc>)
 800aabe:	4601      	mov	r1, r0
 800aac0:	6818      	ldr	r0, [r3, #0]
 800aac2:	f000 b82d 	b.w	800ab20 <_malloc_r>
 800aac6:	bf00      	nop
 800aac8:	20000038 	.word	0x20000038

0800aacc <free>:
 800aacc:	4b02      	ldr	r3, [pc, #8]	@ (800aad8 <free+0xc>)
 800aace:	4601      	mov	r1, r0
 800aad0:	6818      	ldr	r0, [r3, #0]
 800aad2:	f000 ba9f 	b.w	800b014 <_free_r>
 800aad6:	bf00      	nop
 800aad8:	20000038 	.word	0x20000038

0800aadc <sbrk_aligned>:
 800aadc:	b570      	push	{r4, r5, r6, lr}
 800aade:	4e0f      	ldr	r6, [pc, #60]	@ (800ab1c <sbrk_aligned+0x40>)
 800aae0:	460c      	mov	r4, r1
 800aae2:	6831      	ldr	r1, [r6, #0]
 800aae4:	4605      	mov	r5, r0
 800aae6:	b911      	cbnz	r1, 800aaee <sbrk_aligned+0x12>
 800aae8:	f000 fa26 	bl	800af38 <_sbrk_r>
 800aaec:	6030      	str	r0, [r6, #0]
 800aaee:	4621      	mov	r1, r4
 800aaf0:	4628      	mov	r0, r5
 800aaf2:	f000 fa21 	bl	800af38 <_sbrk_r>
 800aaf6:	1c43      	adds	r3, r0, #1
 800aaf8:	d103      	bne.n	800ab02 <sbrk_aligned+0x26>
 800aafa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800aafe:	4620      	mov	r0, r4
 800ab00:	bd70      	pop	{r4, r5, r6, pc}
 800ab02:	1cc4      	adds	r4, r0, #3
 800ab04:	f024 0403 	bic.w	r4, r4, #3
 800ab08:	42a0      	cmp	r0, r4
 800ab0a:	d0f8      	beq.n	800aafe <sbrk_aligned+0x22>
 800ab0c:	1a21      	subs	r1, r4, r0
 800ab0e:	4628      	mov	r0, r5
 800ab10:	f000 fa12 	bl	800af38 <_sbrk_r>
 800ab14:	3001      	adds	r0, #1
 800ab16:	d1f2      	bne.n	800aafe <sbrk_aligned+0x22>
 800ab18:	e7ef      	b.n	800aafa <sbrk_aligned+0x1e>
 800ab1a:	bf00      	nop
 800ab1c:	20000aac 	.word	0x20000aac

0800ab20 <_malloc_r>:
 800ab20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab24:	1ccd      	adds	r5, r1, #3
 800ab26:	f025 0503 	bic.w	r5, r5, #3
 800ab2a:	3508      	adds	r5, #8
 800ab2c:	2d0c      	cmp	r5, #12
 800ab2e:	bf38      	it	cc
 800ab30:	250c      	movcc	r5, #12
 800ab32:	2d00      	cmp	r5, #0
 800ab34:	4606      	mov	r6, r0
 800ab36:	db01      	blt.n	800ab3c <_malloc_r+0x1c>
 800ab38:	42a9      	cmp	r1, r5
 800ab3a:	d904      	bls.n	800ab46 <_malloc_r+0x26>
 800ab3c:	230c      	movs	r3, #12
 800ab3e:	6033      	str	r3, [r6, #0]
 800ab40:	2000      	movs	r0, #0
 800ab42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ac1c <_malloc_r+0xfc>
 800ab4a:	f000 f869 	bl	800ac20 <__malloc_lock>
 800ab4e:	f8d8 3000 	ldr.w	r3, [r8]
 800ab52:	461c      	mov	r4, r3
 800ab54:	bb44      	cbnz	r4, 800aba8 <_malloc_r+0x88>
 800ab56:	4629      	mov	r1, r5
 800ab58:	4630      	mov	r0, r6
 800ab5a:	f7ff ffbf 	bl	800aadc <sbrk_aligned>
 800ab5e:	1c43      	adds	r3, r0, #1
 800ab60:	4604      	mov	r4, r0
 800ab62:	d158      	bne.n	800ac16 <_malloc_r+0xf6>
 800ab64:	f8d8 4000 	ldr.w	r4, [r8]
 800ab68:	4627      	mov	r7, r4
 800ab6a:	2f00      	cmp	r7, #0
 800ab6c:	d143      	bne.n	800abf6 <_malloc_r+0xd6>
 800ab6e:	2c00      	cmp	r4, #0
 800ab70:	d04b      	beq.n	800ac0a <_malloc_r+0xea>
 800ab72:	6823      	ldr	r3, [r4, #0]
 800ab74:	4639      	mov	r1, r7
 800ab76:	4630      	mov	r0, r6
 800ab78:	eb04 0903 	add.w	r9, r4, r3
 800ab7c:	f000 f9dc 	bl	800af38 <_sbrk_r>
 800ab80:	4581      	cmp	r9, r0
 800ab82:	d142      	bne.n	800ac0a <_malloc_r+0xea>
 800ab84:	6821      	ldr	r1, [r4, #0]
 800ab86:	1a6d      	subs	r5, r5, r1
 800ab88:	4629      	mov	r1, r5
 800ab8a:	4630      	mov	r0, r6
 800ab8c:	f7ff ffa6 	bl	800aadc <sbrk_aligned>
 800ab90:	3001      	adds	r0, #1
 800ab92:	d03a      	beq.n	800ac0a <_malloc_r+0xea>
 800ab94:	6823      	ldr	r3, [r4, #0]
 800ab96:	442b      	add	r3, r5
 800ab98:	6023      	str	r3, [r4, #0]
 800ab9a:	f8d8 3000 	ldr.w	r3, [r8]
 800ab9e:	685a      	ldr	r2, [r3, #4]
 800aba0:	bb62      	cbnz	r2, 800abfc <_malloc_r+0xdc>
 800aba2:	f8c8 7000 	str.w	r7, [r8]
 800aba6:	e00f      	b.n	800abc8 <_malloc_r+0xa8>
 800aba8:	6822      	ldr	r2, [r4, #0]
 800abaa:	1b52      	subs	r2, r2, r5
 800abac:	d420      	bmi.n	800abf0 <_malloc_r+0xd0>
 800abae:	2a0b      	cmp	r2, #11
 800abb0:	d917      	bls.n	800abe2 <_malloc_r+0xc2>
 800abb2:	1961      	adds	r1, r4, r5
 800abb4:	42a3      	cmp	r3, r4
 800abb6:	6025      	str	r5, [r4, #0]
 800abb8:	bf18      	it	ne
 800abba:	6059      	strne	r1, [r3, #4]
 800abbc:	6863      	ldr	r3, [r4, #4]
 800abbe:	bf08      	it	eq
 800abc0:	f8c8 1000 	streq.w	r1, [r8]
 800abc4:	5162      	str	r2, [r4, r5]
 800abc6:	604b      	str	r3, [r1, #4]
 800abc8:	4630      	mov	r0, r6
 800abca:	f000 f82f 	bl	800ac2c <__malloc_unlock>
 800abce:	f104 000b 	add.w	r0, r4, #11
 800abd2:	1d23      	adds	r3, r4, #4
 800abd4:	f020 0007 	bic.w	r0, r0, #7
 800abd8:	1ac2      	subs	r2, r0, r3
 800abda:	bf1c      	itt	ne
 800abdc:	1a1b      	subne	r3, r3, r0
 800abde:	50a3      	strne	r3, [r4, r2]
 800abe0:	e7af      	b.n	800ab42 <_malloc_r+0x22>
 800abe2:	6862      	ldr	r2, [r4, #4]
 800abe4:	42a3      	cmp	r3, r4
 800abe6:	bf0c      	ite	eq
 800abe8:	f8c8 2000 	streq.w	r2, [r8]
 800abec:	605a      	strne	r2, [r3, #4]
 800abee:	e7eb      	b.n	800abc8 <_malloc_r+0xa8>
 800abf0:	4623      	mov	r3, r4
 800abf2:	6864      	ldr	r4, [r4, #4]
 800abf4:	e7ae      	b.n	800ab54 <_malloc_r+0x34>
 800abf6:	463c      	mov	r4, r7
 800abf8:	687f      	ldr	r7, [r7, #4]
 800abfa:	e7b6      	b.n	800ab6a <_malloc_r+0x4a>
 800abfc:	461a      	mov	r2, r3
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	42a3      	cmp	r3, r4
 800ac02:	d1fb      	bne.n	800abfc <_malloc_r+0xdc>
 800ac04:	2300      	movs	r3, #0
 800ac06:	6053      	str	r3, [r2, #4]
 800ac08:	e7de      	b.n	800abc8 <_malloc_r+0xa8>
 800ac0a:	230c      	movs	r3, #12
 800ac0c:	6033      	str	r3, [r6, #0]
 800ac0e:	4630      	mov	r0, r6
 800ac10:	f000 f80c 	bl	800ac2c <__malloc_unlock>
 800ac14:	e794      	b.n	800ab40 <_malloc_r+0x20>
 800ac16:	6005      	str	r5, [r0, #0]
 800ac18:	e7d6      	b.n	800abc8 <_malloc_r+0xa8>
 800ac1a:	bf00      	nop
 800ac1c:	20000ab0 	.word	0x20000ab0

0800ac20 <__malloc_lock>:
 800ac20:	4801      	ldr	r0, [pc, #4]	@ (800ac28 <__malloc_lock+0x8>)
 800ac22:	f000 b9d6 	b.w	800afd2 <__retarget_lock_acquire_recursive>
 800ac26:	bf00      	nop
 800ac28:	20000bf4 	.word	0x20000bf4

0800ac2c <__malloc_unlock>:
 800ac2c:	4801      	ldr	r0, [pc, #4]	@ (800ac34 <__malloc_unlock+0x8>)
 800ac2e:	f000 b9d1 	b.w	800afd4 <__retarget_lock_release_recursive>
 800ac32:	bf00      	nop
 800ac34:	20000bf4 	.word	0x20000bf4

0800ac38 <rand>:
 800ac38:	4b16      	ldr	r3, [pc, #88]	@ (800ac94 <rand+0x5c>)
 800ac3a:	b510      	push	{r4, lr}
 800ac3c:	681c      	ldr	r4, [r3, #0]
 800ac3e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ac40:	b9b3      	cbnz	r3, 800ac70 <rand+0x38>
 800ac42:	2018      	movs	r0, #24
 800ac44:	f7ff ff3a 	bl	800aabc <malloc>
 800ac48:	4602      	mov	r2, r0
 800ac4a:	6320      	str	r0, [r4, #48]	@ 0x30
 800ac4c:	b920      	cbnz	r0, 800ac58 <rand+0x20>
 800ac4e:	4b12      	ldr	r3, [pc, #72]	@ (800ac98 <rand+0x60>)
 800ac50:	4812      	ldr	r0, [pc, #72]	@ (800ac9c <rand+0x64>)
 800ac52:	2152      	movs	r1, #82	@ 0x52
 800ac54:	f000 f9c0 	bl	800afd8 <__assert_func>
 800ac58:	4911      	ldr	r1, [pc, #68]	@ (800aca0 <rand+0x68>)
 800ac5a:	4b12      	ldr	r3, [pc, #72]	@ (800aca4 <rand+0x6c>)
 800ac5c:	e9c0 1300 	strd	r1, r3, [r0]
 800ac60:	4b11      	ldr	r3, [pc, #68]	@ (800aca8 <rand+0x70>)
 800ac62:	6083      	str	r3, [r0, #8]
 800ac64:	230b      	movs	r3, #11
 800ac66:	8183      	strh	r3, [r0, #12]
 800ac68:	2100      	movs	r1, #0
 800ac6a:	2001      	movs	r0, #1
 800ac6c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800ac70:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ac72:	480e      	ldr	r0, [pc, #56]	@ (800acac <rand+0x74>)
 800ac74:	690b      	ldr	r3, [r1, #16]
 800ac76:	694c      	ldr	r4, [r1, #20]
 800ac78:	4a0d      	ldr	r2, [pc, #52]	@ (800acb0 <rand+0x78>)
 800ac7a:	4358      	muls	r0, r3
 800ac7c:	fb02 0004 	mla	r0, r2, r4, r0
 800ac80:	fba3 3202 	umull	r3, r2, r3, r2
 800ac84:	3301      	adds	r3, #1
 800ac86:	eb40 0002 	adc.w	r0, r0, r2
 800ac8a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800ac8e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800ac92:	bd10      	pop	{r4, pc}
 800ac94:	20000038 	.word	0x20000038
 800ac98:	0800cb1c 	.word	0x0800cb1c
 800ac9c:	0800cb33 	.word	0x0800cb33
 800aca0:	abcd330e 	.word	0xabcd330e
 800aca4:	e66d1234 	.word	0xe66d1234
 800aca8:	0005deec 	.word	0x0005deec
 800acac:	5851f42d 	.word	0x5851f42d
 800acb0:	4c957f2d 	.word	0x4c957f2d

0800acb4 <std>:
 800acb4:	2300      	movs	r3, #0
 800acb6:	b510      	push	{r4, lr}
 800acb8:	4604      	mov	r4, r0
 800acba:	e9c0 3300 	strd	r3, r3, [r0]
 800acbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800acc2:	6083      	str	r3, [r0, #8]
 800acc4:	8181      	strh	r1, [r0, #12]
 800acc6:	6643      	str	r3, [r0, #100]	@ 0x64
 800acc8:	81c2      	strh	r2, [r0, #14]
 800acca:	6183      	str	r3, [r0, #24]
 800accc:	4619      	mov	r1, r3
 800acce:	2208      	movs	r2, #8
 800acd0:	305c      	adds	r0, #92	@ 0x5c
 800acd2:	f000 f8f4 	bl	800aebe <memset>
 800acd6:	4b0d      	ldr	r3, [pc, #52]	@ (800ad0c <std+0x58>)
 800acd8:	6263      	str	r3, [r4, #36]	@ 0x24
 800acda:	4b0d      	ldr	r3, [pc, #52]	@ (800ad10 <std+0x5c>)
 800acdc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800acde:	4b0d      	ldr	r3, [pc, #52]	@ (800ad14 <std+0x60>)
 800ace0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ace2:	4b0d      	ldr	r3, [pc, #52]	@ (800ad18 <std+0x64>)
 800ace4:	6323      	str	r3, [r4, #48]	@ 0x30
 800ace6:	4b0d      	ldr	r3, [pc, #52]	@ (800ad1c <std+0x68>)
 800ace8:	6224      	str	r4, [r4, #32]
 800acea:	429c      	cmp	r4, r3
 800acec:	d006      	beq.n	800acfc <std+0x48>
 800acee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800acf2:	4294      	cmp	r4, r2
 800acf4:	d002      	beq.n	800acfc <std+0x48>
 800acf6:	33d0      	adds	r3, #208	@ 0xd0
 800acf8:	429c      	cmp	r4, r3
 800acfa:	d105      	bne.n	800ad08 <std+0x54>
 800acfc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ad00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad04:	f000 b964 	b.w	800afd0 <__retarget_lock_init_recursive>
 800ad08:	bd10      	pop	{r4, pc}
 800ad0a:	bf00      	nop
 800ad0c:	0800ae39 	.word	0x0800ae39
 800ad10:	0800ae5b 	.word	0x0800ae5b
 800ad14:	0800ae93 	.word	0x0800ae93
 800ad18:	0800aeb7 	.word	0x0800aeb7
 800ad1c:	20000ab4 	.word	0x20000ab4

0800ad20 <stdio_exit_handler>:
 800ad20:	4a02      	ldr	r2, [pc, #8]	@ (800ad2c <stdio_exit_handler+0xc>)
 800ad22:	4903      	ldr	r1, [pc, #12]	@ (800ad30 <stdio_exit_handler+0x10>)
 800ad24:	4803      	ldr	r0, [pc, #12]	@ (800ad34 <stdio_exit_handler+0x14>)
 800ad26:	f000 b869 	b.w	800adfc <_fwalk_sglue>
 800ad2a:	bf00      	nop
 800ad2c:	2000002c 	.word	0x2000002c
 800ad30:	0800b1b1 	.word	0x0800b1b1
 800ad34:	2000003c 	.word	0x2000003c

0800ad38 <cleanup_stdio>:
 800ad38:	6841      	ldr	r1, [r0, #4]
 800ad3a:	4b0c      	ldr	r3, [pc, #48]	@ (800ad6c <cleanup_stdio+0x34>)
 800ad3c:	4299      	cmp	r1, r3
 800ad3e:	b510      	push	{r4, lr}
 800ad40:	4604      	mov	r4, r0
 800ad42:	d001      	beq.n	800ad48 <cleanup_stdio+0x10>
 800ad44:	f000 fa34 	bl	800b1b0 <_fflush_r>
 800ad48:	68a1      	ldr	r1, [r4, #8]
 800ad4a:	4b09      	ldr	r3, [pc, #36]	@ (800ad70 <cleanup_stdio+0x38>)
 800ad4c:	4299      	cmp	r1, r3
 800ad4e:	d002      	beq.n	800ad56 <cleanup_stdio+0x1e>
 800ad50:	4620      	mov	r0, r4
 800ad52:	f000 fa2d 	bl	800b1b0 <_fflush_r>
 800ad56:	68e1      	ldr	r1, [r4, #12]
 800ad58:	4b06      	ldr	r3, [pc, #24]	@ (800ad74 <cleanup_stdio+0x3c>)
 800ad5a:	4299      	cmp	r1, r3
 800ad5c:	d004      	beq.n	800ad68 <cleanup_stdio+0x30>
 800ad5e:	4620      	mov	r0, r4
 800ad60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad64:	f000 ba24 	b.w	800b1b0 <_fflush_r>
 800ad68:	bd10      	pop	{r4, pc}
 800ad6a:	bf00      	nop
 800ad6c:	20000ab4 	.word	0x20000ab4
 800ad70:	20000b1c 	.word	0x20000b1c
 800ad74:	20000b84 	.word	0x20000b84

0800ad78 <global_stdio_init.part.0>:
 800ad78:	b510      	push	{r4, lr}
 800ad7a:	4b0b      	ldr	r3, [pc, #44]	@ (800ada8 <global_stdio_init.part.0+0x30>)
 800ad7c:	4c0b      	ldr	r4, [pc, #44]	@ (800adac <global_stdio_init.part.0+0x34>)
 800ad7e:	4a0c      	ldr	r2, [pc, #48]	@ (800adb0 <global_stdio_init.part.0+0x38>)
 800ad80:	601a      	str	r2, [r3, #0]
 800ad82:	4620      	mov	r0, r4
 800ad84:	2200      	movs	r2, #0
 800ad86:	2104      	movs	r1, #4
 800ad88:	f7ff ff94 	bl	800acb4 <std>
 800ad8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ad90:	2201      	movs	r2, #1
 800ad92:	2109      	movs	r1, #9
 800ad94:	f7ff ff8e 	bl	800acb4 <std>
 800ad98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ad9c:	2202      	movs	r2, #2
 800ad9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ada2:	2112      	movs	r1, #18
 800ada4:	f7ff bf86 	b.w	800acb4 <std>
 800ada8:	20000bec 	.word	0x20000bec
 800adac:	20000ab4 	.word	0x20000ab4
 800adb0:	0800ad21 	.word	0x0800ad21

0800adb4 <__sfp_lock_acquire>:
 800adb4:	4801      	ldr	r0, [pc, #4]	@ (800adbc <__sfp_lock_acquire+0x8>)
 800adb6:	f000 b90c 	b.w	800afd2 <__retarget_lock_acquire_recursive>
 800adba:	bf00      	nop
 800adbc:	20000bf5 	.word	0x20000bf5

0800adc0 <__sfp_lock_release>:
 800adc0:	4801      	ldr	r0, [pc, #4]	@ (800adc8 <__sfp_lock_release+0x8>)
 800adc2:	f000 b907 	b.w	800afd4 <__retarget_lock_release_recursive>
 800adc6:	bf00      	nop
 800adc8:	20000bf5 	.word	0x20000bf5

0800adcc <__sinit>:
 800adcc:	b510      	push	{r4, lr}
 800adce:	4604      	mov	r4, r0
 800add0:	f7ff fff0 	bl	800adb4 <__sfp_lock_acquire>
 800add4:	6a23      	ldr	r3, [r4, #32]
 800add6:	b11b      	cbz	r3, 800ade0 <__sinit+0x14>
 800add8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800addc:	f7ff bff0 	b.w	800adc0 <__sfp_lock_release>
 800ade0:	4b04      	ldr	r3, [pc, #16]	@ (800adf4 <__sinit+0x28>)
 800ade2:	6223      	str	r3, [r4, #32]
 800ade4:	4b04      	ldr	r3, [pc, #16]	@ (800adf8 <__sinit+0x2c>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d1f5      	bne.n	800add8 <__sinit+0xc>
 800adec:	f7ff ffc4 	bl	800ad78 <global_stdio_init.part.0>
 800adf0:	e7f2      	b.n	800add8 <__sinit+0xc>
 800adf2:	bf00      	nop
 800adf4:	0800ad39 	.word	0x0800ad39
 800adf8:	20000bec 	.word	0x20000bec

0800adfc <_fwalk_sglue>:
 800adfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae00:	4607      	mov	r7, r0
 800ae02:	4688      	mov	r8, r1
 800ae04:	4614      	mov	r4, r2
 800ae06:	2600      	movs	r6, #0
 800ae08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae0c:	f1b9 0901 	subs.w	r9, r9, #1
 800ae10:	d505      	bpl.n	800ae1e <_fwalk_sglue+0x22>
 800ae12:	6824      	ldr	r4, [r4, #0]
 800ae14:	2c00      	cmp	r4, #0
 800ae16:	d1f7      	bne.n	800ae08 <_fwalk_sglue+0xc>
 800ae18:	4630      	mov	r0, r6
 800ae1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae1e:	89ab      	ldrh	r3, [r5, #12]
 800ae20:	2b01      	cmp	r3, #1
 800ae22:	d907      	bls.n	800ae34 <_fwalk_sglue+0x38>
 800ae24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae28:	3301      	adds	r3, #1
 800ae2a:	d003      	beq.n	800ae34 <_fwalk_sglue+0x38>
 800ae2c:	4629      	mov	r1, r5
 800ae2e:	4638      	mov	r0, r7
 800ae30:	47c0      	blx	r8
 800ae32:	4306      	orrs	r6, r0
 800ae34:	3568      	adds	r5, #104	@ 0x68
 800ae36:	e7e9      	b.n	800ae0c <_fwalk_sglue+0x10>

0800ae38 <__sread>:
 800ae38:	b510      	push	{r4, lr}
 800ae3a:	460c      	mov	r4, r1
 800ae3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae40:	f000 f868 	bl	800af14 <_read_r>
 800ae44:	2800      	cmp	r0, #0
 800ae46:	bfab      	itete	ge
 800ae48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ae4a:	89a3      	ldrhlt	r3, [r4, #12]
 800ae4c:	181b      	addge	r3, r3, r0
 800ae4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ae52:	bfac      	ite	ge
 800ae54:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ae56:	81a3      	strhlt	r3, [r4, #12]
 800ae58:	bd10      	pop	{r4, pc}

0800ae5a <__swrite>:
 800ae5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae5e:	461f      	mov	r7, r3
 800ae60:	898b      	ldrh	r3, [r1, #12]
 800ae62:	05db      	lsls	r3, r3, #23
 800ae64:	4605      	mov	r5, r0
 800ae66:	460c      	mov	r4, r1
 800ae68:	4616      	mov	r6, r2
 800ae6a:	d505      	bpl.n	800ae78 <__swrite+0x1e>
 800ae6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae70:	2302      	movs	r3, #2
 800ae72:	2200      	movs	r2, #0
 800ae74:	f000 f83c 	bl	800aef0 <_lseek_r>
 800ae78:	89a3      	ldrh	r3, [r4, #12]
 800ae7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ae82:	81a3      	strh	r3, [r4, #12]
 800ae84:	4632      	mov	r2, r6
 800ae86:	463b      	mov	r3, r7
 800ae88:	4628      	mov	r0, r5
 800ae8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae8e:	f000 b863 	b.w	800af58 <_write_r>

0800ae92 <__sseek>:
 800ae92:	b510      	push	{r4, lr}
 800ae94:	460c      	mov	r4, r1
 800ae96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae9a:	f000 f829 	bl	800aef0 <_lseek_r>
 800ae9e:	1c43      	adds	r3, r0, #1
 800aea0:	89a3      	ldrh	r3, [r4, #12]
 800aea2:	bf15      	itete	ne
 800aea4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800aea6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800aeaa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800aeae:	81a3      	strheq	r3, [r4, #12]
 800aeb0:	bf18      	it	ne
 800aeb2:	81a3      	strhne	r3, [r4, #12]
 800aeb4:	bd10      	pop	{r4, pc}

0800aeb6 <__sclose>:
 800aeb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeba:	f000 b809 	b.w	800aed0 <_close_r>

0800aebe <memset>:
 800aebe:	4402      	add	r2, r0
 800aec0:	4603      	mov	r3, r0
 800aec2:	4293      	cmp	r3, r2
 800aec4:	d100      	bne.n	800aec8 <memset+0xa>
 800aec6:	4770      	bx	lr
 800aec8:	f803 1b01 	strb.w	r1, [r3], #1
 800aecc:	e7f9      	b.n	800aec2 <memset+0x4>
	...

0800aed0 <_close_r>:
 800aed0:	b538      	push	{r3, r4, r5, lr}
 800aed2:	4d06      	ldr	r5, [pc, #24]	@ (800aeec <_close_r+0x1c>)
 800aed4:	2300      	movs	r3, #0
 800aed6:	4604      	mov	r4, r0
 800aed8:	4608      	mov	r0, r1
 800aeda:	602b      	str	r3, [r5, #0]
 800aedc:	f7f6 fe0a 	bl	8001af4 <_close>
 800aee0:	1c43      	adds	r3, r0, #1
 800aee2:	d102      	bne.n	800aeea <_close_r+0x1a>
 800aee4:	682b      	ldr	r3, [r5, #0]
 800aee6:	b103      	cbz	r3, 800aeea <_close_r+0x1a>
 800aee8:	6023      	str	r3, [r4, #0]
 800aeea:	bd38      	pop	{r3, r4, r5, pc}
 800aeec:	20000bf0 	.word	0x20000bf0

0800aef0 <_lseek_r>:
 800aef0:	b538      	push	{r3, r4, r5, lr}
 800aef2:	4d07      	ldr	r5, [pc, #28]	@ (800af10 <_lseek_r+0x20>)
 800aef4:	4604      	mov	r4, r0
 800aef6:	4608      	mov	r0, r1
 800aef8:	4611      	mov	r1, r2
 800aefa:	2200      	movs	r2, #0
 800aefc:	602a      	str	r2, [r5, #0]
 800aefe:	461a      	mov	r2, r3
 800af00:	f7f6 fe1f 	bl	8001b42 <_lseek>
 800af04:	1c43      	adds	r3, r0, #1
 800af06:	d102      	bne.n	800af0e <_lseek_r+0x1e>
 800af08:	682b      	ldr	r3, [r5, #0]
 800af0a:	b103      	cbz	r3, 800af0e <_lseek_r+0x1e>
 800af0c:	6023      	str	r3, [r4, #0]
 800af0e:	bd38      	pop	{r3, r4, r5, pc}
 800af10:	20000bf0 	.word	0x20000bf0

0800af14 <_read_r>:
 800af14:	b538      	push	{r3, r4, r5, lr}
 800af16:	4d07      	ldr	r5, [pc, #28]	@ (800af34 <_read_r+0x20>)
 800af18:	4604      	mov	r4, r0
 800af1a:	4608      	mov	r0, r1
 800af1c:	4611      	mov	r1, r2
 800af1e:	2200      	movs	r2, #0
 800af20:	602a      	str	r2, [r5, #0]
 800af22:	461a      	mov	r2, r3
 800af24:	f7f6 fdad 	bl	8001a82 <_read>
 800af28:	1c43      	adds	r3, r0, #1
 800af2a:	d102      	bne.n	800af32 <_read_r+0x1e>
 800af2c:	682b      	ldr	r3, [r5, #0]
 800af2e:	b103      	cbz	r3, 800af32 <_read_r+0x1e>
 800af30:	6023      	str	r3, [r4, #0]
 800af32:	bd38      	pop	{r3, r4, r5, pc}
 800af34:	20000bf0 	.word	0x20000bf0

0800af38 <_sbrk_r>:
 800af38:	b538      	push	{r3, r4, r5, lr}
 800af3a:	4d06      	ldr	r5, [pc, #24]	@ (800af54 <_sbrk_r+0x1c>)
 800af3c:	2300      	movs	r3, #0
 800af3e:	4604      	mov	r4, r0
 800af40:	4608      	mov	r0, r1
 800af42:	602b      	str	r3, [r5, #0]
 800af44:	f7f6 fe0a 	bl	8001b5c <_sbrk>
 800af48:	1c43      	adds	r3, r0, #1
 800af4a:	d102      	bne.n	800af52 <_sbrk_r+0x1a>
 800af4c:	682b      	ldr	r3, [r5, #0]
 800af4e:	b103      	cbz	r3, 800af52 <_sbrk_r+0x1a>
 800af50:	6023      	str	r3, [r4, #0]
 800af52:	bd38      	pop	{r3, r4, r5, pc}
 800af54:	20000bf0 	.word	0x20000bf0

0800af58 <_write_r>:
 800af58:	b538      	push	{r3, r4, r5, lr}
 800af5a:	4d07      	ldr	r5, [pc, #28]	@ (800af78 <_write_r+0x20>)
 800af5c:	4604      	mov	r4, r0
 800af5e:	4608      	mov	r0, r1
 800af60:	4611      	mov	r1, r2
 800af62:	2200      	movs	r2, #0
 800af64:	602a      	str	r2, [r5, #0]
 800af66:	461a      	mov	r2, r3
 800af68:	f7f6 fda8 	bl	8001abc <_write>
 800af6c:	1c43      	adds	r3, r0, #1
 800af6e:	d102      	bne.n	800af76 <_write_r+0x1e>
 800af70:	682b      	ldr	r3, [r5, #0]
 800af72:	b103      	cbz	r3, 800af76 <_write_r+0x1e>
 800af74:	6023      	str	r3, [r4, #0]
 800af76:	bd38      	pop	{r3, r4, r5, pc}
 800af78:	20000bf0 	.word	0x20000bf0

0800af7c <__errno>:
 800af7c:	4b01      	ldr	r3, [pc, #4]	@ (800af84 <__errno+0x8>)
 800af7e:	6818      	ldr	r0, [r3, #0]
 800af80:	4770      	bx	lr
 800af82:	bf00      	nop
 800af84:	20000038 	.word	0x20000038

0800af88 <__libc_init_array>:
 800af88:	b570      	push	{r4, r5, r6, lr}
 800af8a:	4d0d      	ldr	r5, [pc, #52]	@ (800afc0 <__libc_init_array+0x38>)
 800af8c:	4c0d      	ldr	r4, [pc, #52]	@ (800afc4 <__libc_init_array+0x3c>)
 800af8e:	1b64      	subs	r4, r4, r5
 800af90:	10a4      	asrs	r4, r4, #2
 800af92:	2600      	movs	r6, #0
 800af94:	42a6      	cmp	r6, r4
 800af96:	d109      	bne.n	800afac <__libc_init_array+0x24>
 800af98:	4d0b      	ldr	r5, [pc, #44]	@ (800afc8 <__libc_init_array+0x40>)
 800af9a:	4c0c      	ldr	r4, [pc, #48]	@ (800afcc <__libc_init_array+0x44>)
 800af9c:	f001 fda4 	bl	800cae8 <_init>
 800afa0:	1b64      	subs	r4, r4, r5
 800afa2:	10a4      	asrs	r4, r4, #2
 800afa4:	2600      	movs	r6, #0
 800afa6:	42a6      	cmp	r6, r4
 800afa8:	d105      	bne.n	800afb6 <__libc_init_array+0x2e>
 800afaa:	bd70      	pop	{r4, r5, r6, pc}
 800afac:	f855 3b04 	ldr.w	r3, [r5], #4
 800afb0:	4798      	blx	r3
 800afb2:	3601      	adds	r6, #1
 800afb4:	e7ee      	b.n	800af94 <__libc_init_array+0xc>
 800afb6:	f855 3b04 	ldr.w	r3, [r5], #4
 800afba:	4798      	blx	r3
 800afbc:	3601      	adds	r6, #1
 800afbe:	e7f2      	b.n	800afa6 <__libc_init_array+0x1e>
 800afc0:	0800cde0 	.word	0x0800cde0
 800afc4:	0800cde0 	.word	0x0800cde0
 800afc8:	0800cde0 	.word	0x0800cde0
 800afcc:	0800cde4 	.word	0x0800cde4

0800afd0 <__retarget_lock_init_recursive>:
 800afd0:	4770      	bx	lr

0800afd2 <__retarget_lock_acquire_recursive>:
 800afd2:	4770      	bx	lr

0800afd4 <__retarget_lock_release_recursive>:
 800afd4:	4770      	bx	lr
	...

0800afd8 <__assert_func>:
 800afd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800afda:	4614      	mov	r4, r2
 800afdc:	461a      	mov	r2, r3
 800afde:	4b09      	ldr	r3, [pc, #36]	@ (800b004 <__assert_func+0x2c>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	4605      	mov	r5, r0
 800afe4:	68d8      	ldr	r0, [r3, #12]
 800afe6:	b954      	cbnz	r4, 800affe <__assert_func+0x26>
 800afe8:	4b07      	ldr	r3, [pc, #28]	@ (800b008 <__assert_func+0x30>)
 800afea:	461c      	mov	r4, r3
 800afec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aff0:	9100      	str	r1, [sp, #0]
 800aff2:	462b      	mov	r3, r5
 800aff4:	4905      	ldr	r1, [pc, #20]	@ (800b00c <__assert_func+0x34>)
 800aff6:	f000 f903 	bl	800b200 <fiprintf>
 800affa:	f000 f913 	bl	800b224 <abort>
 800affe:	4b04      	ldr	r3, [pc, #16]	@ (800b010 <__assert_func+0x38>)
 800b000:	e7f4      	b.n	800afec <__assert_func+0x14>
 800b002:	bf00      	nop
 800b004:	20000038 	.word	0x20000038
 800b008:	0800cbc6 	.word	0x0800cbc6
 800b00c:	0800cb98 	.word	0x0800cb98
 800b010:	0800cb8b 	.word	0x0800cb8b

0800b014 <_free_r>:
 800b014:	b538      	push	{r3, r4, r5, lr}
 800b016:	4605      	mov	r5, r0
 800b018:	2900      	cmp	r1, #0
 800b01a:	d041      	beq.n	800b0a0 <_free_r+0x8c>
 800b01c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b020:	1f0c      	subs	r4, r1, #4
 800b022:	2b00      	cmp	r3, #0
 800b024:	bfb8      	it	lt
 800b026:	18e4      	addlt	r4, r4, r3
 800b028:	f7ff fdfa 	bl	800ac20 <__malloc_lock>
 800b02c:	4a1d      	ldr	r2, [pc, #116]	@ (800b0a4 <_free_r+0x90>)
 800b02e:	6813      	ldr	r3, [r2, #0]
 800b030:	b933      	cbnz	r3, 800b040 <_free_r+0x2c>
 800b032:	6063      	str	r3, [r4, #4]
 800b034:	6014      	str	r4, [r2, #0]
 800b036:	4628      	mov	r0, r5
 800b038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b03c:	f7ff bdf6 	b.w	800ac2c <__malloc_unlock>
 800b040:	42a3      	cmp	r3, r4
 800b042:	d908      	bls.n	800b056 <_free_r+0x42>
 800b044:	6820      	ldr	r0, [r4, #0]
 800b046:	1821      	adds	r1, r4, r0
 800b048:	428b      	cmp	r3, r1
 800b04a:	bf01      	itttt	eq
 800b04c:	6819      	ldreq	r1, [r3, #0]
 800b04e:	685b      	ldreq	r3, [r3, #4]
 800b050:	1809      	addeq	r1, r1, r0
 800b052:	6021      	streq	r1, [r4, #0]
 800b054:	e7ed      	b.n	800b032 <_free_r+0x1e>
 800b056:	461a      	mov	r2, r3
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	b10b      	cbz	r3, 800b060 <_free_r+0x4c>
 800b05c:	42a3      	cmp	r3, r4
 800b05e:	d9fa      	bls.n	800b056 <_free_r+0x42>
 800b060:	6811      	ldr	r1, [r2, #0]
 800b062:	1850      	adds	r0, r2, r1
 800b064:	42a0      	cmp	r0, r4
 800b066:	d10b      	bne.n	800b080 <_free_r+0x6c>
 800b068:	6820      	ldr	r0, [r4, #0]
 800b06a:	4401      	add	r1, r0
 800b06c:	1850      	adds	r0, r2, r1
 800b06e:	4283      	cmp	r3, r0
 800b070:	6011      	str	r1, [r2, #0]
 800b072:	d1e0      	bne.n	800b036 <_free_r+0x22>
 800b074:	6818      	ldr	r0, [r3, #0]
 800b076:	685b      	ldr	r3, [r3, #4]
 800b078:	6053      	str	r3, [r2, #4]
 800b07a:	4408      	add	r0, r1
 800b07c:	6010      	str	r0, [r2, #0]
 800b07e:	e7da      	b.n	800b036 <_free_r+0x22>
 800b080:	d902      	bls.n	800b088 <_free_r+0x74>
 800b082:	230c      	movs	r3, #12
 800b084:	602b      	str	r3, [r5, #0]
 800b086:	e7d6      	b.n	800b036 <_free_r+0x22>
 800b088:	6820      	ldr	r0, [r4, #0]
 800b08a:	1821      	adds	r1, r4, r0
 800b08c:	428b      	cmp	r3, r1
 800b08e:	bf04      	itt	eq
 800b090:	6819      	ldreq	r1, [r3, #0]
 800b092:	685b      	ldreq	r3, [r3, #4]
 800b094:	6063      	str	r3, [r4, #4]
 800b096:	bf04      	itt	eq
 800b098:	1809      	addeq	r1, r1, r0
 800b09a:	6021      	streq	r1, [r4, #0]
 800b09c:	6054      	str	r4, [r2, #4]
 800b09e:	e7ca      	b.n	800b036 <_free_r+0x22>
 800b0a0:	bd38      	pop	{r3, r4, r5, pc}
 800b0a2:	bf00      	nop
 800b0a4:	20000ab0 	.word	0x20000ab0

0800b0a8 <__sflush_r>:
 800b0a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b0ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0b0:	0716      	lsls	r6, r2, #28
 800b0b2:	4605      	mov	r5, r0
 800b0b4:	460c      	mov	r4, r1
 800b0b6:	d454      	bmi.n	800b162 <__sflush_r+0xba>
 800b0b8:	684b      	ldr	r3, [r1, #4]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	dc02      	bgt.n	800b0c4 <__sflush_r+0x1c>
 800b0be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	dd48      	ble.n	800b156 <__sflush_r+0xae>
 800b0c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b0c6:	2e00      	cmp	r6, #0
 800b0c8:	d045      	beq.n	800b156 <__sflush_r+0xae>
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b0d0:	682f      	ldr	r7, [r5, #0]
 800b0d2:	6a21      	ldr	r1, [r4, #32]
 800b0d4:	602b      	str	r3, [r5, #0]
 800b0d6:	d030      	beq.n	800b13a <__sflush_r+0x92>
 800b0d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b0da:	89a3      	ldrh	r3, [r4, #12]
 800b0dc:	0759      	lsls	r1, r3, #29
 800b0de:	d505      	bpl.n	800b0ec <__sflush_r+0x44>
 800b0e0:	6863      	ldr	r3, [r4, #4]
 800b0e2:	1ad2      	subs	r2, r2, r3
 800b0e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b0e6:	b10b      	cbz	r3, 800b0ec <__sflush_r+0x44>
 800b0e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b0ea:	1ad2      	subs	r2, r2, r3
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b0f0:	6a21      	ldr	r1, [r4, #32]
 800b0f2:	4628      	mov	r0, r5
 800b0f4:	47b0      	blx	r6
 800b0f6:	1c43      	adds	r3, r0, #1
 800b0f8:	89a3      	ldrh	r3, [r4, #12]
 800b0fa:	d106      	bne.n	800b10a <__sflush_r+0x62>
 800b0fc:	6829      	ldr	r1, [r5, #0]
 800b0fe:	291d      	cmp	r1, #29
 800b100:	d82b      	bhi.n	800b15a <__sflush_r+0xb2>
 800b102:	4a2a      	ldr	r2, [pc, #168]	@ (800b1ac <__sflush_r+0x104>)
 800b104:	410a      	asrs	r2, r1
 800b106:	07d6      	lsls	r6, r2, #31
 800b108:	d427      	bmi.n	800b15a <__sflush_r+0xb2>
 800b10a:	2200      	movs	r2, #0
 800b10c:	6062      	str	r2, [r4, #4]
 800b10e:	04d9      	lsls	r1, r3, #19
 800b110:	6922      	ldr	r2, [r4, #16]
 800b112:	6022      	str	r2, [r4, #0]
 800b114:	d504      	bpl.n	800b120 <__sflush_r+0x78>
 800b116:	1c42      	adds	r2, r0, #1
 800b118:	d101      	bne.n	800b11e <__sflush_r+0x76>
 800b11a:	682b      	ldr	r3, [r5, #0]
 800b11c:	b903      	cbnz	r3, 800b120 <__sflush_r+0x78>
 800b11e:	6560      	str	r0, [r4, #84]	@ 0x54
 800b120:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b122:	602f      	str	r7, [r5, #0]
 800b124:	b1b9      	cbz	r1, 800b156 <__sflush_r+0xae>
 800b126:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b12a:	4299      	cmp	r1, r3
 800b12c:	d002      	beq.n	800b134 <__sflush_r+0x8c>
 800b12e:	4628      	mov	r0, r5
 800b130:	f7ff ff70 	bl	800b014 <_free_r>
 800b134:	2300      	movs	r3, #0
 800b136:	6363      	str	r3, [r4, #52]	@ 0x34
 800b138:	e00d      	b.n	800b156 <__sflush_r+0xae>
 800b13a:	2301      	movs	r3, #1
 800b13c:	4628      	mov	r0, r5
 800b13e:	47b0      	blx	r6
 800b140:	4602      	mov	r2, r0
 800b142:	1c50      	adds	r0, r2, #1
 800b144:	d1c9      	bne.n	800b0da <__sflush_r+0x32>
 800b146:	682b      	ldr	r3, [r5, #0]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d0c6      	beq.n	800b0da <__sflush_r+0x32>
 800b14c:	2b1d      	cmp	r3, #29
 800b14e:	d001      	beq.n	800b154 <__sflush_r+0xac>
 800b150:	2b16      	cmp	r3, #22
 800b152:	d11e      	bne.n	800b192 <__sflush_r+0xea>
 800b154:	602f      	str	r7, [r5, #0]
 800b156:	2000      	movs	r0, #0
 800b158:	e022      	b.n	800b1a0 <__sflush_r+0xf8>
 800b15a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b15e:	b21b      	sxth	r3, r3
 800b160:	e01b      	b.n	800b19a <__sflush_r+0xf2>
 800b162:	690f      	ldr	r7, [r1, #16]
 800b164:	2f00      	cmp	r7, #0
 800b166:	d0f6      	beq.n	800b156 <__sflush_r+0xae>
 800b168:	0793      	lsls	r3, r2, #30
 800b16a:	680e      	ldr	r6, [r1, #0]
 800b16c:	bf08      	it	eq
 800b16e:	694b      	ldreq	r3, [r1, #20]
 800b170:	600f      	str	r7, [r1, #0]
 800b172:	bf18      	it	ne
 800b174:	2300      	movne	r3, #0
 800b176:	eba6 0807 	sub.w	r8, r6, r7
 800b17a:	608b      	str	r3, [r1, #8]
 800b17c:	f1b8 0f00 	cmp.w	r8, #0
 800b180:	dde9      	ble.n	800b156 <__sflush_r+0xae>
 800b182:	6a21      	ldr	r1, [r4, #32]
 800b184:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b186:	4643      	mov	r3, r8
 800b188:	463a      	mov	r2, r7
 800b18a:	4628      	mov	r0, r5
 800b18c:	47b0      	blx	r6
 800b18e:	2800      	cmp	r0, #0
 800b190:	dc08      	bgt.n	800b1a4 <__sflush_r+0xfc>
 800b192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b196:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b19a:	81a3      	strh	r3, [r4, #12]
 800b19c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b1a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1a4:	4407      	add	r7, r0
 800b1a6:	eba8 0800 	sub.w	r8, r8, r0
 800b1aa:	e7e7      	b.n	800b17c <__sflush_r+0xd4>
 800b1ac:	dfbffffe 	.word	0xdfbffffe

0800b1b0 <_fflush_r>:
 800b1b0:	b538      	push	{r3, r4, r5, lr}
 800b1b2:	690b      	ldr	r3, [r1, #16]
 800b1b4:	4605      	mov	r5, r0
 800b1b6:	460c      	mov	r4, r1
 800b1b8:	b913      	cbnz	r3, 800b1c0 <_fflush_r+0x10>
 800b1ba:	2500      	movs	r5, #0
 800b1bc:	4628      	mov	r0, r5
 800b1be:	bd38      	pop	{r3, r4, r5, pc}
 800b1c0:	b118      	cbz	r0, 800b1ca <_fflush_r+0x1a>
 800b1c2:	6a03      	ldr	r3, [r0, #32]
 800b1c4:	b90b      	cbnz	r3, 800b1ca <_fflush_r+0x1a>
 800b1c6:	f7ff fe01 	bl	800adcc <__sinit>
 800b1ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d0f3      	beq.n	800b1ba <_fflush_r+0xa>
 800b1d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b1d4:	07d0      	lsls	r0, r2, #31
 800b1d6:	d404      	bmi.n	800b1e2 <_fflush_r+0x32>
 800b1d8:	0599      	lsls	r1, r3, #22
 800b1da:	d402      	bmi.n	800b1e2 <_fflush_r+0x32>
 800b1dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b1de:	f7ff fef8 	bl	800afd2 <__retarget_lock_acquire_recursive>
 800b1e2:	4628      	mov	r0, r5
 800b1e4:	4621      	mov	r1, r4
 800b1e6:	f7ff ff5f 	bl	800b0a8 <__sflush_r>
 800b1ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b1ec:	07da      	lsls	r2, r3, #31
 800b1ee:	4605      	mov	r5, r0
 800b1f0:	d4e4      	bmi.n	800b1bc <_fflush_r+0xc>
 800b1f2:	89a3      	ldrh	r3, [r4, #12]
 800b1f4:	059b      	lsls	r3, r3, #22
 800b1f6:	d4e1      	bmi.n	800b1bc <_fflush_r+0xc>
 800b1f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b1fa:	f7ff feeb 	bl	800afd4 <__retarget_lock_release_recursive>
 800b1fe:	e7dd      	b.n	800b1bc <_fflush_r+0xc>

0800b200 <fiprintf>:
 800b200:	b40e      	push	{r1, r2, r3}
 800b202:	b503      	push	{r0, r1, lr}
 800b204:	4601      	mov	r1, r0
 800b206:	ab03      	add	r3, sp, #12
 800b208:	4805      	ldr	r0, [pc, #20]	@ (800b220 <fiprintf+0x20>)
 800b20a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b20e:	6800      	ldr	r0, [r0, #0]
 800b210:	9301      	str	r3, [sp, #4]
 800b212:	f000 f837 	bl	800b284 <_vfiprintf_r>
 800b216:	b002      	add	sp, #8
 800b218:	f85d eb04 	ldr.w	lr, [sp], #4
 800b21c:	b003      	add	sp, #12
 800b21e:	4770      	bx	lr
 800b220:	20000038 	.word	0x20000038

0800b224 <abort>:
 800b224:	b508      	push	{r3, lr}
 800b226:	2006      	movs	r0, #6
 800b228:	f000 fb8e 	bl	800b948 <raise>
 800b22c:	2001      	movs	r0, #1
 800b22e:	f7f6 fc1d 	bl	8001a6c <_exit>

0800b232 <__sfputc_r>:
 800b232:	6893      	ldr	r3, [r2, #8]
 800b234:	3b01      	subs	r3, #1
 800b236:	2b00      	cmp	r3, #0
 800b238:	b410      	push	{r4}
 800b23a:	6093      	str	r3, [r2, #8]
 800b23c:	da08      	bge.n	800b250 <__sfputc_r+0x1e>
 800b23e:	6994      	ldr	r4, [r2, #24]
 800b240:	42a3      	cmp	r3, r4
 800b242:	db01      	blt.n	800b248 <__sfputc_r+0x16>
 800b244:	290a      	cmp	r1, #10
 800b246:	d103      	bne.n	800b250 <__sfputc_r+0x1e>
 800b248:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b24c:	f000 bac0 	b.w	800b7d0 <__swbuf_r>
 800b250:	6813      	ldr	r3, [r2, #0]
 800b252:	1c58      	adds	r0, r3, #1
 800b254:	6010      	str	r0, [r2, #0]
 800b256:	7019      	strb	r1, [r3, #0]
 800b258:	4608      	mov	r0, r1
 800b25a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b25e:	4770      	bx	lr

0800b260 <__sfputs_r>:
 800b260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b262:	4606      	mov	r6, r0
 800b264:	460f      	mov	r7, r1
 800b266:	4614      	mov	r4, r2
 800b268:	18d5      	adds	r5, r2, r3
 800b26a:	42ac      	cmp	r4, r5
 800b26c:	d101      	bne.n	800b272 <__sfputs_r+0x12>
 800b26e:	2000      	movs	r0, #0
 800b270:	e007      	b.n	800b282 <__sfputs_r+0x22>
 800b272:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b276:	463a      	mov	r2, r7
 800b278:	4630      	mov	r0, r6
 800b27a:	f7ff ffda 	bl	800b232 <__sfputc_r>
 800b27e:	1c43      	adds	r3, r0, #1
 800b280:	d1f3      	bne.n	800b26a <__sfputs_r+0xa>
 800b282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b284 <_vfiprintf_r>:
 800b284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b288:	460d      	mov	r5, r1
 800b28a:	b09d      	sub	sp, #116	@ 0x74
 800b28c:	4614      	mov	r4, r2
 800b28e:	4698      	mov	r8, r3
 800b290:	4606      	mov	r6, r0
 800b292:	b118      	cbz	r0, 800b29c <_vfiprintf_r+0x18>
 800b294:	6a03      	ldr	r3, [r0, #32]
 800b296:	b90b      	cbnz	r3, 800b29c <_vfiprintf_r+0x18>
 800b298:	f7ff fd98 	bl	800adcc <__sinit>
 800b29c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b29e:	07d9      	lsls	r1, r3, #31
 800b2a0:	d405      	bmi.n	800b2ae <_vfiprintf_r+0x2a>
 800b2a2:	89ab      	ldrh	r3, [r5, #12]
 800b2a4:	059a      	lsls	r2, r3, #22
 800b2a6:	d402      	bmi.n	800b2ae <_vfiprintf_r+0x2a>
 800b2a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b2aa:	f7ff fe92 	bl	800afd2 <__retarget_lock_acquire_recursive>
 800b2ae:	89ab      	ldrh	r3, [r5, #12]
 800b2b0:	071b      	lsls	r3, r3, #28
 800b2b2:	d501      	bpl.n	800b2b8 <_vfiprintf_r+0x34>
 800b2b4:	692b      	ldr	r3, [r5, #16]
 800b2b6:	b99b      	cbnz	r3, 800b2e0 <_vfiprintf_r+0x5c>
 800b2b8:	4629      	mov	r1, r5
 800b2ba:	4630      	mov	r0, r6
 800b2bc:	f000 fac6 	bl	800b84c <__swsetup_r>
 800b2c0:	b170      	cbz	r0, 800b2e0 <_vfiprintf_r+0x5c>
 800b2c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b2c4:	07dc      	lsls	r4, r3, #31
 800b2c6:	d504      	bpl.n	800b2d2 <_vfiprintf_r+0x4e>
 800b2c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b2cc:	b01d      	add	sp, #116	@ 0x74
 800b2ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2d2:	89ab      	ldrh	r3, [r5, #12]
 800b2d4:	0598      	lsls	r0, r3, #22
 800b2d6:	d4f7      	bmi.n	800b2c8 <_vfiprintf_r+0x44>
 800b2d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b2da:	f7ff fe7b 	bl	800afd4 <__retarget_lock_release_recursive>
 800b2de:	e7f3      	b.n	800b2c8 <_vfiprintf_r+0x44>
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2e4:	2320      	movs	r3, #32
 800b2e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b2ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2ee:	2330      	movs	r3, #48	@ 0x30
 800b2f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b4a0 <_vfiprintf_r+0x21c>
 800b2f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b2f8:	f04f 0901 	mov.w	r9, #1
 800b2fc:	4623      	mov	r3, r4
 800b2fe:	469a      	mov	sl, r3
 800b300:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b304:	b10a      	cbz	r2, 800b30a <_vfiprintf_r+0x86>
 800b306:	2a25      	cmp	r2, #37	@ 0x25
 800b308:	d1f9      	bne.n	800b2fe <_vfiprintf_r+0x7a>
 800b30a:	ebba 0b04 	subs.w	fp, sl, r4
 800b30e:	d00b      	beq.n	800b328 <_vfiprintf_r+0xa4>
 800b310:	465b      	mov	r3, fp
 800b312:	4622      	mov	r2, r4
 800b314:	4629      	mov	r1, r5
 800b316:	4630      	mov	r0, r6
 800b318:	f7ff ffa2 	bl	800b260 <__sfputs_r>
 800b31c:	3001      	adds	r0, #1
 800b31e:	f000 80a7 	beq.w	800b470 <_vfiprintf_r+0x1ec>
 800b322:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b324:	445a      	add	r2, fp
 800b326:	9209      	str	r2, [sp, #36]	@ 0x24
 800b328:	f89a 3000 	ldrb.w	r3, [sl]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	f000 809f 	beq.w	800b470 <_vfiprintf_r+0x1ec>
 800b332:	2300      	movs	r3, #0
 800b334:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b338:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b33c:	f10a 0a01 	add.w	sl, sl, #1
 800b340:	9304      	str	r3, [sp, #16]
 800b342:	9307      	str	r3, [sp, #28]
 800b344:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b348:	931a      	str	r3, [sp, #104]	@ 0x68
 800b34a:	4654      	mov	r4, sl
 800b34c:	2205      	movs	r2, #5
 800b34e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b352:	4853      	ldr	r0, [pc, #332]	@ (800b4a0 <_vfiprintf_r+0x21c>)
 800b354:	f7f4 ff3c 	bl	80001d0 <memchr>
 800b358:	9a04      	ldr	r2, [sp, #16]
 800b35a:	b9d8      	cbnz	r0, 800b394 <_vfiprintf_r+0x110>
 800b35c:	06d1      	lsls	r1, r2, #27
 800b35e:	bf44      	itt	mi
 800b360:	2320      	movmi	r3, #32
 800b362:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b366:	0713      	lsls	r3, r2, #28
 800b368:	bf44      	itt	mi
 800b36a:	232b      	movmi	r3, #43	@ 0x2b
 800b36c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b370:	f89a 3000 	ldrb.w	r3, [sl]
 800b374:	2b2a      	cmp	r3, #42	@ 0x2a
 800b376:	d015      	beq.n	800b3a4 <_vfiprintf_r+0x120>
 800b378:	9a07      	ldr	r2, [sp, #28]
 800b37a:	4654      	mov	r4, sl
 800b37c:	2000      	movs	r0, #0
 800b37e:	f04f 0c0a 	mov.w	ip, #10
 800b382:	4621      	mov	r1, r4
 800b384:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b388:	3b30      	subs	r3, #48	@ 0x30
 800b38a:	2b09      	cmp	r3, #9
 800b38c:	d94b      	bls.n	800b426 <_vfiprintf_r+0x1a2>
 800b38e:	b1b0      	cbz	r0, 800b3be <_vfiprintf_r+0x13a>
 800b390:	9207      	str	r2, [sp, #28]
 800b392:	e014      	b.n	800b3be <_vfiprintf_r+0x13a>
 800b394:	eba0 0308 	sub.w	r3, r0, r8
 800b398:	fa09 f303 	lsl.w	r3, r9, r3
 800b39c:	4313      	orrs	r3, r2
 800b39e:	9304      	str	r3, [sp, #16]
 800b3a0:	46a2      	mov	sl, r4
 800b3a2:	e7d2      	b.n	800b34a <_vfiprintf_r+0xc6>
 800b3a4:	9b03      	ldr	r3, [sp, #12]
 800b3a6:	1d19      	adds	r1, r3, #4
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	9103      	str	r1, [sp, #12]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	bfbb      	ittet	lt
 800b3b0:	425b      	neglt	r3, r3
 800b3b2:	f042 0202 	orrlt.w	r2, r2, #2
 800b3b6:	9307      	strge	r3, [sp, #28]
 800b3b8:	9307      	strlt	r3, [sp, #28]
 800b3ba:	bfb8      	it	lt
 800b3bc:	9204      	strlt	r2, [sp, #16]
 800b3be:	7823      	ldrb	r3, [r4, #0]
 800b3c0:	2b2e      	cmp	r3, #46	@ 0x2e
 800b3c2:	d10a      	bne.n	800b3da <_vfiprintf_r+0x156>
 800b3c4:	7863      	ldrb	r3, [r4, #1]
 800b3c6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b3c8:	d132      	bne.n	800b430 <_vfiprintf_r+0x1ac>
 800b3ca:	9b03      	ldr	r3, [sp, #12]
 800b3cc:	1d1a      	adds	r2, r3, #4
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	9203      	str	r2, [sp, #12]
 800b3d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b3d6:	3402      	adds	r4, #2
 800b3d8:	9305      	str	r3, [sp, #20]
 800b3da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b4b0 <_vfiprintf_r+0x22c>
 800b3de:	7821      	ldrb	r1, [r4, #0]
 800b3e0:	2203      	movs	r2, #3
 800b3e2:	4650      	mov	r0, sl
 800b3e4:	f7f4 fef4 	bl	80001d0 <memchr>
 800b3e8:	b138      	cbz	r0, 800b3fa <_vfiprintf_r+0x176>
 800b3ea:	9b04      	ldr	r3, [sp, #16]
 800b3ec:	eba0 000a 	sub.w	r0, r0, sl
 800b3f0:	2240      	movs	r2, #64	@ 0x40
 800b3f2:	4082      	lsls	r2, r0
 800b3f4:	4313      	orrs	r3, r2
 800b3f6:	3401      	adds	r4, #1
 800b3f8:	9304      	str	r3, [sp, #16]
 800b3fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3fe:	4829      	ldr	r0, [pc, #164]	@ (800b4a4 <_vfiprintf_r+0x220>)
 800b400:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b404:	2206      	movs	r2, #6
 800b406:	f7f4 fee3 	bl	80001d0 <memchr>
 800b40a:	2800      	cmp	r0, #0
 800b40c:	d03f      	beq.n	800b48e <_vfiprintf_r+0x20a>
 800b40e:	4b26      	ldr	r3, [pc, #152]	@ (800b4a8 <_vfiprintf_r+0x224>)
 800b410:	bb1b      	cbnz	r3, 800b45a <_vfiprintf_r+0x1d6>
 800b412:	9b03      	ldr	r3, [sp, #12]
 800b414:	3307      	adds	r3, #7
 800b416:	f023 0307 	bic.w	r3, r3, #7
 800b41a:	3308      	adds	r3, #8
 800b41c:	9303      	str	r3, [sp, #12]
 800b41e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b420:	443b      	add	r3, r7
 800b422:	9309      	str	r3, [sp, #36]	@ 0x24
 800b424:	e76a      	b.n	800b2fc <_vfiprintf_r+0x78>
 800b426:	fb0c 3202 	mla	r2, ip, r2, r3
 800b42a:	460c      	mov	r4, r1
 800b42c:	2001      	movs	r0, #1
 800b42e:	e7a8      	b.n	800b382 <_vfiprintf_r+0xfe>
 800b430:	2300      	movs	r3, #0
 800b432:	3401      	adds	r4, #1
 800b434:	9305      	str	r3, [sp, #20]
 800b436:	4619      	mov	r1, r3
 800b438:	f04f 0c0a 	mov.w	ip, #10
 800b43c:	4620      	mov	r0, r4
 800b43e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b442:	3a30      	subs	r2, #48	@ 0x30
 800b444:	2a09      	cmp	r2, #9
 800b446:	d903      	bls.n	800b450 <_vfiprintf_r+0x1cc>
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d0c6      	beq.n	800b3da <_vfiprintf_r+0x156>
 800b44c:	9105      	str	r1, [sp, #20]
 800b44e:	e7c4      	b.n	800b3da <_vfiprintf_r+0x156>
 800b450:	fb0c 2101 	mla	r1, ip, r1, r2
 800b454:	4604      	mov	r4, r0
 800b456:	2301      	movs	r3, #1
 800b458:	e7f0      	b.n	800b43c <_vfiprintf_r+0x1b8>
 800b45a:	ab03      	add	r3, sp, #12
 800b45c:	9300      	str	r3, [sp, #0]
 800b45e:	462a      	mov	r2, r5
 800b460:	4b12      	ldr	r3, [pc, #72]	@ (800b4ac <_vfiprintf_r+0x228>)
 800b462:	a904      	add	r1, sp, #16
 800b464:	4630      	mov	r0, r6
 800b466:	f3af 8000 	nop.w
 800b46a:	4607      	mov	r7, r0
 800b46c:	1c78      	adds	r0, r7, #1
 800b46e:	d1d6      	bne.n	800b41e <_vfiprintf_r+0x19a>
 800b470:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b472:	07d9      	lsls	r1, r3, #31
 800b474:	d405      	bmi.n	800b482 <_vfiprintf_r+0x1fe>
 800b476:	89ab      	ldrh	r3, [r5, #12]
 800b478:	059a      	lsls	r2, r3, #22
 800b47a:	d402      	bmi.n	800b482 <_vfiprintf_r+0x1fe>
 800b47c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b47e:	f7ff fda9 	bl	800afd4 <__retarget_lock_release_recursive>
 800b482:	89ab      	ldrh	r3, [r5, #12]
 800b484:	065b      	lsls	r3, r3, #25
 800b486:	f53f af1f 	bmi.w	800b2c8 <_vfiprintf_r+0x44>
 800b48a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b48c:	e71e      	b.n	800b2cc <_vfiprintf_r+0x48>
 800b48e:	ab03      	add	r3, sp, #12
 800b490:	9300      	str	r3, [sp, #0]
 800b492:	462a      	mov	r2, r5
 800b494:	4b05      	ldr	r3, [pc, #20]	@ (800b4ac <_vfiprintf_r+0x228>)
 800b496:	a904      	add	r1, sp, #16
 800b498:	4630      	mov	r0, r6
 800b49a:	f000 f879 	bl	800b590 <_printf_i>
 800b49e:	e7e4      	b.n	800b46a <_vfiprintf_r+0x1e6>
 800b4a0:	0800cbc7 	.word	0x0800cbc7
 800b4a4:	0800cbd1 	.word	0x0800cbd1
 800b4a8:	00000000 	.word	0x00000000
 800b4ac:	0800b261 	.word	0x0800b261
 800b4b0:	0800cbcd 	.word	0x0800cbcd

0800b4b4 <_printf_common>:
 800b4b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4b8:	4616      	mov	r6, r2
 800b4ba:	4698      	mov	r8, r3
 800b4bc:	688a      	ldr	r2, [r1, #8]
 800b4be:	690b      	ldr	r3, [r1, #16]
 800b4c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	bfb8      	it	lt
 800b4c8:	4613      	movlt	r3, r2
 800b4ca:	6033      	str	r3, [r6, #0]
 800b4cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b4d0:	4607      	mov	r7, r0
 800b4d2:	460c      	mov	r4, r1
 800b4d4:	b10a      	cbz	r2, 800b4da <_printf_common+0x26>
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	6033      	str	r3, [r6, #0]
 800b4da:	6823      	ldr	r3, [r4, #0]
 800b4dc:	0699      	lsls	r1, r3, #26
 800b4de:	bf42      	ittt	mi
 800b4e0:	6833      	ldrmi	r3, [r6, #0]
 800b4e2:	3302      	addmi	r3, #2
 800b4e4:	6033      	strmi	r3, [r6, #0]
 800b4e6:	6825      	ldr	r5, [r4, #0]
 800b4e8:	f015 0506 	ands.w	r5, r5, #6
 800b4ec:	d106      	bne.n	800b4fc <_printf_common+0x48>
 800b4ee:	f104 0a19 	add.w	sl, r4, #25
 800b4f2:	68e3      	ldr	r3, [r4, #12]
 800b4f4:	6832      	ldr	r2, [r6, #0]
 800b4f6:	1a9b      	subs	r3, r3, r2
 800b4f8:	42ab      	cmp	r3, r5
 800b4fa:	dc26      	bgt.n	800b54a <_printf_common+0x96>
 800b4fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b500:	6822      	ldr	r2, [r4, #0]
 800b502:	3b00      	subs	r3, #0
 800b504:	bf18      	it	ne
 800b506:	2301      	movne	r3, #1
 800b508:	0692      	lsls	r2, r2, #26
 800b50a:	d42b      	bmi.n	800b564 <_printf_common+0xb0>
 800b50c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b510:	4641      	mov	r1, r8
 800b512:	4638      	mov	r0, r7
 800b514:	47c8      	blx	r9
 800b516:	3001      	adds	r0, #1
 800b518:	d01e      	beq.n	800b558 <_printf_common+0xa4>
 800b51a:	6823      	ldr	r3, [r4, #0]
 800b51c:	6922      	ldr	r2, [r4, #16]
 800b51e:	f003 0306 	and.w	r3, r3, #6
 800b522:	2b04      	cmp	r3, #4
 800b524:	bf02      	ittt	eq
 800b526:	68e5      	ldreq	r5, [r4, #12]
 800b528:	6833      	ldreq	r3, [r6, #0]
 800b52a:	1aed      	subeq	r5, r5, r3
 800b52c:	68a3      	ldr	r3, [r4, #8]
 800b52e:	bf0c      	ite	eq
 800b530:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b534:	2500      	movne	r5, #0
 800b536:	4293      	cmp	r3, r2
 800b538:	bfc4      	itt	gt
 800b53a:	1a9b      	subgt	r3, r3, r2
 800b53c:	18ed      	addgt	r5, r5, r3
 800b53e:	2600      	movs	r6, #0
 800b540:	341a      	adds	r4, #26
 800b542:	42b5      	cmp	r5, r6
 800b544:	d11a      	bne.n	800b57c <_printf_common+0xc8>
 800b546:	2000      	movs	r0, #0
 800b548:	e008      	b.n	800b55c <_printf_common+0xa8>
 800b54a:	2301      	movs	r3, #1
 800b54c:	4652      	mov	r2, sl
 800b54e:	4641      	mov	r1, r8
 800b550:	4638      	mov	r0, r7
 800b552:	47c8      	blx	r9
 800b554:	3001      	adds	r0, #1
 800b556:	d103      	bne.n	800b560 <_printf_common+0xac>
 800b558:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b55c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b560:	3501      	adds	r5, #1
 800b562:	e7c6      	b.n	800b4f2 <_printf_common+0x3e>
 800b564:	18e1      	adds	r1, r4, r3
 800b566:	1c5a      	adds	r2, r3, #1
 800b568:	2030      	movs	r0, #48	@ 0x30
 800b56a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b56e:	4422      	add	r2, r4
 800b570:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b574:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b578:	3302      	adds	r3, #2
 800b57a:	e7c7      	b.n	800b50c <_printf_common+0x58>
 800b57c:	2301      	movs	r3, #1
 800b57e:	4622      	mov	r2, r4
 800b580:	4641      	mov	r1, r8
 800b582:	4638      	mov	r0, r7
 800b584:	47c8      	blx	r9
 800b586:	3001      	adds	r0, #1
 800b588:	d0e6      	beq.n	800b558 <_printf_common+0xa4>
 800b58a:	3601      	adds	r6, #1
 800b58c:	e7d9      	b.n	800b542 <_printf_common+0x8e>
	...

0800b590 <_printf_i>:
 800b590:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b594:	7e0f      	ldrb	r7, [r1, #24]
 800b596:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b598:	2f78      	cmp	r7, #120	@ 0x78
 800b59a:	4691      	mov	r9, r2
 800b59c:	4680      	mov	r8, r0
 800b59e:	460c      	mov	r4, r1
 800b5a0:	469a      	mov	sl, r3
 800b5a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b5a6:	d807      	bhi.n	800b5b8 <_printf_i+0x28>
 800b5a8:	2f62      	cmp	r7, #98	@ 0x62
 800b5aa:	d80a      	bhi.n	800b5c2 <_printf_i+0x32>
 800b5ac:	2f00      	cmp	r7, #0
 800b5ae:	f000 80d2 	beq.w	800b756 <_printf_i+0x1c6>
 800b5b2:	2f58      	cmp	r7, #88	@ 0x58
 800b5b4:	f000 80b9 	beq.w	800b72a <_printf_i+0x19a>
 800b5b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b5bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b5c0:	e03a      	b.n	800b638 <_printf_i+0xa8>
 800b5c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b5c6:	2b15      	cmp	r3, #21
 800b5c8:	d8f6      	bhi.n	800b5b8 <_printf_i+0x28>
 800b5ca:	a101      	add	r1, pc, #4	@ (adr r1, 800b5d0 <_printf_i+0x40>)
 800b5cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b5d0:	0800b629 	.word	0x0800b629
 800b5d4:	0800b63d 	.word	0x0800b63d
 800b5d8:	0800b5b9 	.word	0x0800b5b9
 800b5dc:	0800b5b9 	.word	0x0800b5b9
 800b5e0:	0800b5b9 	.word	0x0800b5b9
 800b5e4:	0800b5b9 	.word	0x0800b5b9
 800b5e8:	0800b63d 	.word	0x0800b63d
 800b5ec:	0800b5b9 	.word	0x0800b5b9
 800b5f0:	0800b5b9 	.word	0x0800b5b9
 800b5f4:	0800b5b9 	.word	0x0800b5b9
 800b5f8:	0800b5b9 	.word	0x0800b5b9
 800b5fc:	0800b73d 	.word	0x0800b73d
 800b600:	0800b667 	.word	0x0800b667
 800b604:	0800b6f7 	.word	0x0800b6f7
 800b608:	0800b5b9 	.word	0x0800b5b9
 800b60c:	0800b5b9 	.word	0x0800b5b9
 800b610:	0800b75f 	.word	0x0800b75f
 800b614:	0800b5b9 	.word	0x0800b5b9
 800b618:	0800b667 	.word	0x0800b667
 800b61c:	0800b5b9 	.word	0x0800b5b9
 800b620:	0800b5b9 	.word	0x0800b5b9
 800b624:	0800b6ff 	.word	0x0800b6ff
 800b628:	6833      	ldr	r3, [r6, #0]
 800b62a:	1d1a      	adds	r2, r3, #4
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	6032      	str	r2, [r6, #0]
 800b630:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b634:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b638:	2301      	movs	r3, #1
 800b63a:	e09d      	b.n	800b778 <_printf_i+0x1e8>
 800b63c:	6833      	ldr	r3, [r6, #0]
 800b63e:	6820      	ldr	r0, [r4, #0]
 800b640:	1d19      	adds	r1, r3, #4
 800b642:	6031      	str	r1, [r6, #0]
 800b644:	0606      	lsls	r6, r0, #24
 800b646:	d501      	bpl.n	800b64c <_printf_i+0xbc>
 800b648:	681d      	ldr	r5, [r3, #0]
 800b64a:	e003      	b.n	800b654 <_printf_i+0xc4>
 800b64c:	0645      	lsls	r5, r0, #25
 800b64e:	d5fb      	bpl.n	800b648 <_printf_i+0xb8>
 800b650:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b654:	2d00      	cmp	r5, #0
 800b656:	da03      	bge.n	800b660 <_printf_i+0xd0>
 800b658:	232d      	movs	r3, #45	@ 0x2d
 800b65a:	426d      	negs	r5, r5
 800b65c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b660:	4859      	ldr	r0, [pc, #356]	@ (800b7c8 <_printf_i+0x238>)
 800b662:	230a      	movs	r3, #10
 800b664:	e011      	b.n	800b68a <_printf_i+0xfa>
 800b666:	6821      	ldr	r1, [r4, #0]
 800b668:	6833      	ldr	r3, [r6, #0]
 800b66a:	0608      	lsls	r0, r1, #24
 800b66c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b670:	d402      	bmi.n	800b678 <_printf_i+0xe8>
 800b672:	0649      	lsls	r1, r1, #25
 800b674:	bf48      	it	mi
 800b676:	b2ad      	uxthmi	r5, r5
 800b678:	2f6f      	cmp	r7, #111	@ 0x6f
 800b67a:	4853      	ldr	r0, [pc, #332]	@ (800b7c8 <_printf_i+0x238>)
 800b67c:	6033      	str	r3, [r6, #0]
 800b67e:	bf14      	ite	ne
 800b680:	230a      	movne	r3, #10
 800b682:	2308      	moveq	r3, #8
 800b684:	2100      	movs	r1, #0
 800b686:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b68a:	6866      	ldr	r6, [r4, #4]
 800b68c:	60a6      	str	r6, [r4, #8]
 800b68e:	2e00      	cmp	r6, #0
 800b690:	bfa2      	ittt	ge
 800b692:	6821      	ldrge	r1, [r4, #0]
 800b694:	f021 0104 	bicge.w	r1, r1, #4
 800b698:	6021      	strge	r1, [r4, #0]
 800b69a:	b90d      	cbnz	r5, 800b6a0 <_printf_i+0x110>
 800b69c:	2e00      	cmp	r6, #0
 800b69e:	d04b      	beq.n	800b738 <_printf_i+0x1a8>
 800b6a0:	4616      	mov	r6, r2
 800b6a2:	fbb5 f1f3 	udiv	r1, r5, r3
 800b6a6:	fb03 5711 	mls	r7, r3, r1, r5
 800b6aa:	5dc7      	ldrb	r7, [r0, r7]
 800b6ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b6b0:	462f      	mov	r7, r5
 800b6b2:	42bb      	cmp	r3, r7
 800b6b4:	460d      	mov	r5, r1
 800b6b6:	d9f4      	bls.n	800b6a2 <_printf_i+0x112>
 800b6b8:	2b08      	cmp	r3, #8
 800b6ba:	d10b      	bne.n	800b6d4 <_printf_i+0x144>
 800b6bc:	6823      	ldr	r3, [r4, #0]
 800b6be:	07df      	lsls	r7, r3, #31
 800b6c0:	d508      	bpl.n	800b6d4 <_printf_i+0x144>
 800b6c2:	6923      	ldr	r3, [r4, #16]
 800b6c4:	6861      	ldr	r1, [r4, #4]
 800b6c6:	4299      	cmp	r1, r3
 800b6c8:	bfde      	ittt	le
 800b6ca:	2330      	movle	r3, #48	@ 0x30
 800b6cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b6d0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b6d4:	1b92      	subs	r2, r2, r6
 800b6d6:	6122      	str	r2, [r4, #16]
 800b6d8:	f8cd a000 	str.w	sl, [sp]
 800b6dc:	464b      	mov	r3, r9
 800b6de:	aa03      	add	r2, sp, #12
 800b6e0:	4621      	mov	r1, r4
 800b6e2:	4640      	mov	r0, r8
 800b6e4:	f7ff fee6 	bl	800b4b4 <_printf_common>
 800b6e8:	3001      	adds	r0, #1
 800b6ea:	d14a      	bne.n	800b782 <_printf_i+0x1f2>
 800b6ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b6f0:	b004      	add	sp, #16
 800b6f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6f6:	6823      	ldr	r3, [r4, #0]
 800b6f8:	f043 0320 	orr.w	r3, r3, #32
 800b6fc:	6023      	str	r3, [r4, #0]
 800b6fe:	4833      	ldr	r0, [pc, #204]	@ (800b7cc <_printf_i+0x23c>)
 800b700:	2778      	movs	r7, #120	@ 0x78
 800b702:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b706:	6823      	ldr	r3, [r4, #0]
 800b708:	6831      	ldr	r1, [r6, #0]
 800b70a:	061f      	lsls	r7, r3, #24
 800b70c:	f851 5b04 	ldr.w	r5, [r1], #4
 800b710:	d402      	bmi.n	800b718 <_printf_i+0x188>
 800b712:	065f      	lsls	r7, r3, #25
 800b714:	bf48      	it	mi
 800b716:	b2ad      	uxthmi	r5, r5
 800b718:	6031      	str	r1, [r6, #0]
 800b71a:	07d9      	lsls	r1, r3, #31
 800b71c:	bf44      	itt	mi
 800b71e:	f043 0320 	orrmi.w	r3, r3, #32
 800b722:	6023      	strmi	r3, [r4, #0]
 800b724:	b11d      	cbz	r5, 800b72e <_printf_i+0x19e>
 800b726:	2310      	movs	r3, #16
 800b728:	e7ac      	b.n	800b684 <_printf_i+0xf4>
 800b72a:	4827      	ldr	r0, [pc, #156]	@ (800b7c8 <_printf_i+0x238>)
 800b72c:	e7e9      	b.n	800b702 <_printf_i+0x172>
 800b72e:	6823      	ldr	r3, [r4, #0]
 800b730:	f023 0320 	bic.w	r3, r3, #32
 800b734:	6023      	str	r3, [r4, #0]
 800b736:	e7f6      	b.n	800b726 <_printf_i+0x196>
 800b738:	4616      	mov	r6, r2
 800b73a:	e7bd      	b.n	800b6b8 <_printf_i+0x128>
 800b73c:	6833      	ldr	r3, [r6, #0]
 800b73e:	6825      	ldr	r5, [r4, #0]
 800b740:	6961      	ldr	r1, [r4, #20]
 800b742:	1d18      	adds	r0, r3, #4
 800b744:	6030      	str	r0, [r6, #0]
 800b746:	062e      	lsls	r6, r5, #24
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	d501      	bpl.n	800b750 <_printf_i+0x1c0>
 800b74c:	6019      	str	r1, [r3, #0]
 800b74e:	e002      	b.n	800b756 <_printf_i+0x1c6>
 800b750:	0668      	lsls	r0, r5, #25
 800b752:	d5fb      	bpl.n	800b74c <_printf_i+0x1bc>
 800b754:	8019      	strh	r1, [r3, #0]
 800b756:	2300      	movs	r3, #0
 800b758:	6123      	str	r3, [r4, #16]
 800b75a:	4616      	mov	r6, r2
 800b75c:	e7bc      	b.n	800b6d8 <_printf_i+0x148>
 800b75e:	6833      	ldr	r3, [r6, #0]
 800b760:	1d1a      	adds	r2, r3, #4
 800b762:	6032      	str	r2, [r6, #0]
 800b764:	681e      	ldr	r6, [r3, #0]
 800b766:	6862      	ldr	r2, [r4, #4]
 800b768:	2100      	movs	r1, #0
 800b76a:	4630      	mov	r0, r6
 800b76c:	f7f4 fd30 	bl	80001d0 <memchr>
 800b770:	b108      	cbz	r0, 800b776 <_printf_i+0x1e6>
 800b772:	1b80      	subs	r0, r0, r6
 800b774:	6060      	str	r0, [r4, #4]
 800b776:	6863      	ldr	r3, [r4, #4]
 800b778:	6123      	str	r3, [r4, #16]
 800b77a:	2300      	movs	r3, #0
 800b77c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b780:	e7aa      	b.n	800b6d8 <_printf_i+0x148>
 800b782:	6923      	ldr	r3, [r4, #16]
 800b784:	4632      	mov	r2, r6
 800b786:	4649      	mov	r1, r9
 800b788:	4640      	mov	r0, r8
 800b78a:	47d0      	blx	sl
 800b78c:	3001      	adds	r0, #1
 800b78e:	d0ad      	beq.n	800b6ec <_printf_i+0x15c>
 800b790:	6823      	ldr	r3, [r4, #0]
 800b792:	079b      	lsls	r3, r3, #30
 800b794:	d413      	bmi.n	800b7be <_printf_i+0x22e>
 800b796:	68e0      	ldr	r0, [r4, #12]
 800b798:	9b03      	ldr	r3, [sp, #12]
 800b79a:	4298      	cmp	r0, r3
 800b79c:	bfb8      	it	lt
 800b79e:	4618      	movlt	r0, r3
 800b7a0:	e7a6      	b.n	800b6f0 <_printf_i+0x160>
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	4632      	mov	r2, r6
 800b7a6:	4649      	mov	r1, r9
 800b7a8:	4640      	mov	r0, r8
 800b7aa:	47d0      	blx	sl
 800b7ac:	3001      	adds	r0, #1
 800b7ae:	d09d      	beq.n	800b6ec <_printf_i+0x15c>
 800b7b0:	3501      	adds	r5, #1
 800b7b2:	68e3      	ldr	r3, [r4, #12]
 800b7b4:	9903      	ldr	r1, [sp, #12]
 800b7b6:	1a5b      	subs	r3, r3, r1
 800b7b8:	42ab      	cmp	r3, r5
 800b7ba:	dcf2      	bgt.n	800b7a2 <_printf_i+0x212>
 800b7bc:	e7eb      	b.n	800b796 <_printf_i+0x206>
 800b7be:	2500      	movs	r5, #0
 800b7c0:	f104 0619 	add.w	r6, r4, #25
 800b7c4:	e7f5      	b.n	800b7b2 <_printf_i+0x222>
 800b7c6:	bf00      	nop
 800b7c8:	0800cbd8 	.word	0x0800cbd8
 800b7cc:	0800cbe9 	.word	0x0800cbe9

0800b7d0 <__swbuf_r>:
 800b7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7d2:	460e      	mov	r6, r1
 800b7d4:	4614      	mov	r4, r2
 800b7d6:	4605      	mov	r5, r0
 800b7d8:	b118      	cbz	r0, 800b7e2 <__swbuf_r+0x12>
 800b7da:	6a03      	ldr	r3, [r0, #32]
 800b7dc:	b90b      	cbnz	r3, 800b7e2 <__swbuf_r+0x12>
 800b7de:	f7ff faf5 	bl	800adcc <__sinit>
 800b7e2:	69a3      	ldr	r3, [r4, #24]
 800b7e4:	60a3      	str	r3, [r4, #8]
 800b7e6:	89a3      	ldrh	r3, [r4, #12]
 800b7e8:	071a      	lsls	r2, r3, #28
 800b7ea:	d501      	bpl.n	800b7f0 <__swbuf_r+0x20>
 800b7ec:	6923      	ldr	r3, [r4, #16]
 800b7ee:	b943      	cbnz	r3, 800b802 <__swbuf_r+0x32>
 800b7f0:	4621      	mov	r1, r4
 800b7f2:	4628      	mov	r0, r5
 800b7f4:	f000 f82a 	bl	800b84c <__swsetup_r>
 800b7f8:	b118      	cbz	r0, 800b802 <__swbuf_r+0x32>
 800b7fa:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b7fe:	4638      	mov	r0, r7
 800b800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b802:	6823      	ldr	r3, [r4, #0]
 800b804:	6922      	ldr	r2, [r4, #16]
 800b806:	1a98      	subs	r0, r3, r2
 800b808:	6963      	ldr	r3, [r4, #20]
 800b80a:	b2f6      	uxtb	r6, r6
 800b80c:	4283      	cmp	r3, r0
 800b80e:	4637      	mov	r7, r6
 800b810:	dc05      	bgt.n	800b81e <__swbuf_r+0x4e>
 800b812:	4621      	mov	r1, r4
 800b814:	4628      	mov	r0, r5
 800b816:	f7ff fccb 	bl	800b1b0 <_fflush_r>
 800b81a:	2800      	cmp	r0, #0
 800b81c:	d1ed      	bne.n	800b7fa <__swbuf_r+0x2a>
 800b81e:	68a3      	ldr	r3, [r4, #8]
 800b820:	3b01      	subs	r3, #1
 800b822:	60a3      	str	r3, [r4, #8]
 800b824:	6823      	ldr	r3, [r4, #0]
 800b826:	1c5a      	adds	r2, r3, #1
 800b828:	6022      	str	r2, [r4, #0]
 800b82a:	701e      	strb	r6, [r3, #0]
 800b82c:	6962      	ldr	r2, [r4, #20]
 800b82e:	1c43      	adds	r3, r0, #1
 800b830:	429a      	cmp	r2, r3
 800b832:	d004      	beq.n	800b83e <__swbuf_r+0x6e>
 800b834:	89a3      	ldrh	r3, [r4, #12]
 800b836:	07db      	lsls	r3, r3, #31
 800b838:	d5e1      	bpl.n	800b7fe <__swbuf_r+0x2e>
 800b83a:	2e0a      	cmp	r6, #10
 800b83c:	d1df      	bne.n	800b7fe <__swbuf_r+0x2e>
 800b83e:	4621      	mov	r1, r4
 800b840:	4628      	mov	r0, r5
 800b842:	f7ff fcb5 	bl	800b1b0 <_fflush_r>
 800b846:	2800      	cmp	r0, #0
 800b848:	d0d9      	beq.n	800b7fe <__swbuf_r+0x2e>
 800b84a:	e7d6      	b.n	800b7fa <__swbuf_r+0x2a>

0800b84c <__swsetup_r>:
 800b84c:	b538      	push	{r3, r4, r5, lr}
 800b84e:	4b29      	ldr	r3, [pc, #164]	@ (800b8f4 <__swsetup_r+0xa8>)
 800b850:	4605      	mov	r5, r0
 800b852:	6818      	ldr	r0, [r3, #0]
 800b854:	460c      	mov	r4, r1
 800b856:	b118      	cbz	r0, 800b860 <__swsetup_r+0x14>
 800b858:	6a03      	ldr	r3, [r0, #32]
 800b85a:	b90b      	cbnz	r3, 800b860 <__swsetup_r+0x14>
 800b85c:	f7ff fab6 	bl	800adcc <__sinit>
 800b860:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b864:	0719      	lsls	r1, r3, #28
 800b866:	d422      	bmi.n	800b8ae <__swsetup_r+0x62>
 800b868:	06da      	lsls	r2, r3, #27
 800b86a:	d407      	bmi.n	800b87c <__swsetup_r+0x30>
 800b86c:	2209      	movs	r2, #9
 800b86e:	602a      	str	r2, [r5, #0]
 800b870:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b874:	81a3      	strh	r3, [r4, #12]
 800b876:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b87a:	e033      	b.n	800b8e4 <__swsetup_r+0x98>
 800b87c:	0758      	lsls	r0, r3, #29
 800b87e:	d512      	bpl.n	800b8a6 <__swsetup_r+0x5a>
 800b880:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b882:	b141      	cbz	r1, 800b896 <__swsetup_r+0x4a>
 800b884:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b888:	4299      	cmp	r1, r3
 800b88a:	d002      	beq.n	800b892 <__swsetup_r+0x46>
 800b88c:	4628      	mov	r0, r5
 800b88e:	f7ff fbc1 	bl	800b014 <_free_r>
 800b892:	2300      	movs	r3, #0
 800b894:	6363      	str	r3, [r4, #52]	@ 0x34
 800b896:	89a3      	ldrh	r3, [r4, #12]
 800b898:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b89c:	81a3      	strh	r3, [r4, #12]
 800b89e:	2300      	movs	r3, #0
 800b8a0:	6063      	str	r3, [r4, #4]
 800b8a2:	6923      	ldr	r3, [r4, #16]
 800b8a4:	6023      	str	r3, [r4, #0]
 800b8a6:	89a3      	ldrh	r3, [r4, #12]
 800b8a8:	f043 0308 	orr.w	r3, r3, #8
 800b8ac:	81a3      	strh	r3, [r4, #12]
 800b8ae:	6923      	ldr	r3, [r4, #16]
 800b8b0:	b94b      	cbnz	r3, 800b8c6 <__swsetup_r+0x7a>
 800b8b2:	89a3      	ldrh	r3, [r4, #12]
 800b8b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b8b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b8bc:	d003      	beq.n	800b8c6 <__swsetup_r+0x7a>
 800b8be:	4621      	mov	r1, r4
 800b8c0:	4628      	mov	r0, r5
 800b8c2:	f000 f883 	bl	800b9cc <__smakebuf_r>
 800b8c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8ca:	f013 0201 	ands.w	r2, r3, #1
 800b8ce:	d00a      	beq.n	800b8e6 <__swsetup_r+0x9a>
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	60a2      	str	r2, [r4, #8]
 800b8d4:	6962      	ldr	r2, [r4, #20]
 800b8d6:	4252      	negs	r2, r2
 800b8d8:	61a2      	str	r2, [r4, #24]
 800b8da:	6922      	ldr	r2, [r4, #16]
 800b8dc:	b942      	cbnz	r2, 800b8f0 <__swsetup_r+0xa4>
 800b8de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b8e2:	d1c5      	bne.n	800b870 <__swsetup_r+0x24>
 800b8e4:	bd38      	pop	{r3, r4, r5, pc}
 800b8e6:	0799      	lsls	r1, r3, #30
 800b8e8:	bf58      	it	pl
 800b8ea:	6962      	ldrpl	r2, [r4, #20]
 800b8ec:	60a2      	str	r2, [r4, #8]
 800b8ee:	e7f4      	b.n	800b8da <__swsetup_r+0x8e>
 800b8f0:	2000      	movs	r0, #0
 800b8f2:	e7f7      	b.n	800b8e4 <__swsetup_r+0x98>
 800b8f4:	20000038 	.word	0x20000038

0800b8f8 <_raise_r>:
 800b8f8:	291f      	cmp	r1, #31
 800b8fa:	b538      	push	{r3, r4, r5, lr}
 800b8fc:	4605      	mov	r5, r0
 800b8fe:	460c      	mov	r4, r1
 800b900:	d904      	bls.n	800b90c <_raise_r+0x14>
 800b902:	2316      	movs	r3, #22
 800b904:	6003      	str	r3, [r0, #0]
 800b906:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b90a:	bd38      	pop	{r3, r4, r5, pc}
 800b90c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b90e:	b112      	cbz	r2, 800b916 <_raise_r+0x1e>
 800b910:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b914:	b94b      	cbnz	r3, 800b92a <_raise_r+0x32>
 800b916:	4628      	mov	r0, r5
 800b918:	f000 f830 	bl	800b97c <_getpid_r>
 800b91c:	4622      	mov	r2, r4
 800b91e:	4601      	mov	r1, r0
 800b920:	4628      	mov	r0, r5
 800b922:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b926:	f000 b817 	b.w	800b958 <_kill_r>
 800b92a:	2b01      	cmp	r3, #1
 800b92c:	d00a      	beq.n	800b944 <_raise_r+0x4c>
 800b92e:	1c59      	adds	r1, r3, #1
 800b930:	d103      	bne.n	800b93a <_raise_r+0x42>
 800b932:	2316      	movs	r3, #22
 800b934:	6003      	str	r3, [r0, #0]
 800b936:	2001      	movs	r0, #1
 800b938:	e7e7      	b.n	800b90a <_raise_r+0x12>
 800b93a:	2100      	movs	r1, #0
 800b93c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b940:	4620      	mov	r0, r4
 800b942:	4798      	blx	r3
 800b944:	2000      	movs	r0, #0
 800b946:	e7e0      	b.n	800b90a <_raise_r+0x12>

0800b948 <raise>:
 800b948:	4b02      	ldr	r3, [pc, #8]	@ (800b954 <raise+0xc>)
 800b94a:	4601      	mov	r1, r0
 800b94c:	6818      	ldr	r0, [r3, #0]
 800b94e:	f7ff bfd3 	b.w	800b8f8 <_raise_r>
 800b952:	bf00      	nop
 800b954:	20000038 	.word	0x20000038

0800b958 <_kill_r>:
 800b958:	b538      	push	{r3, r4, r5, lr}
 800b95a:	4d07      	ldr	r5, [pc, #28]	@ (800b978 <_kill_r+0x20>)
 800b95c:	2300      	movs	r3, #0
 800b95e:	4604      	mov	r4, r0
 800b960:	4608      	mov	r0, r1
 800b962:	4611      	mov	r1, r2
 800b964:	602b      	str	r3, [r5, #0]
 800b966:	f7f6 f871 	bl	8001a4c <_kill>
 800b96a:	1c43      	adds	r3, r0, #1
 800b96c:	d102      	bne.n	800b974 <_kill_r+0x1c>
 800b96e:	682b      	ldr	r3, [r5, #0]
 800b970:	b103      	cbz	r3, 800b974 <_kill_r+0x1c>
 800b972:	6023      	str	r3, [r4, #0]
 800b974:	bd38      	pop	{r3, r4, r5, pc}
 800b976:	bf00      	nop
 800b978:	20000bf0 	.word	0x20000bf0

0800b97c <_getpid_r>:
 800b97c:	f7f6 b85e 	b.w	8001a3c <_getpid>

0800b980 <__swhatbuf_r>:
 800b980:	b570      	push	{r4, r5, r6, lr}
 800b982:	460c      	mov	r4, r1
 800b984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b988:	2900      	cmp	r1, #0
 800b98a:	b096      	sub	sp, #88	@ 0x58
 800b98c:	4615      	mov	r5, r2
 800b98e:	461e      	mov	r6, r3
 800b990:	da0d      	bge.n	800b9ae <__swhatbuf_r+0x2e>
 800b992:	89a3      	ldrh	r3, [r4, #12]
 800b994:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b998:	f04f 0100 	mov.w	r1, #0
 800b99c:	bf14      	ite	ne
 800b99e:	2340      	movne	r3, #64	@ 0x40
 800b9a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b9a4:	2000      	movs	r0, #0
 800b9a6:	6031      	str	r1, [r6, #0]
 800b9a8:	602b      	str	r3, [r5, #0]
 800b9aa:	b016      	add	sp, #88	@ 0x58
 800b9ac:	bd70      	pop	{r4, r5, r6, pc}
 800b9ae:	466a      	mov	r2, sp
 800b9b0:	f000 f848 	bl	800ba44 <_fstat_r>
 800b9b4:	2800      	cmp	r0, #0
 800b9b6:	dbec      	blt.n	800b992 <__swhatbuf_r+0x12>
 800b9b8:	9901      	ldr	r1, [sp, #4]
 800b9ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b9be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b9c2:	4259      	negs	r1, r3
 800b9c4:	4159      	adcs	r1, r3
 800b9c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b9ca:	e7eb      	b.n	800b9a4 <__swhatbuf_r+0x24>

0800b9cc <__smakebuf_r>:
 800b9cc:	898b      	ldrh	r3, [r1, #12]
 800b9ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b9d0:	079d      	lsls	r5, r3, #30
 800b9d2:	4606      	mov	r6, r0
 800b9d4:	460c      	mov	r4, r1
 800b9d6:	d507      	bpl.n	800b9e8 <__smakebuf_r+0x1c>
 800b9d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b9dc:	6023      	str	r3, [r4, #0]
 800b9de:	6123      	str	r3, [r4, #16]
 800b9e0:	2301      	movs	r3, #1
 800b9e2:	6163      	str	r3, [r4, #20]
 800b9e4:	b003      	add	sp, #12
 800b9e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9e8:	ab01      	add	r3, sp, #4
 800b9ea:	466a      	mov	r2, sp
 800b9ec:	f7ff ffc8 	bl	800b980 <__swhatbuf_r>
 800b9f0:	9f00      	ldr	r7, [sp, #0]
 800b9f2:	4605      	mov	r5, r0
 800b9f4:	4639      	mov	r1, r7
 800b9f6:	4630      	mov	r0, r6
 800b9f8:	f7ff f892 	bl	800ab20 <_malloc_r>
 800b9fc:	b948      	cbnz	r0, 800ba12 <__smakebuf_r+0x46>
 800b9fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba02:	059a      	lsls	r2, r3, #22
 800ba04:	d4ee      	bmi.n	800b9e4 <__smakebuf_r+0x18>
 800ba06:	f023 0303 	bic.w	r3, r3, #3
 800ba0a:	f043 0302 	orr.w	r3, r3, #2
 800ba0e:	81a3      	strh	r3, [r4, #12]
 800ba10:	e7e2      	b.n	800b9d8 <__smakebuf_r+0xc>
 800ba12:	89a3      	ldrh	r3, [r4, #12]
 800ba14:	6020      	str	r0, [r4, #0]
 800ba16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba1a:	81a3      	strh	r3, [r4, #12]
 800ba1c:	9b01      	ldr	r3, [sp, #4]
 800ba1e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ba22:	b15b      	cbz	r3, 800ba3c <__smakebuf_r+0x70>
 800ba24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba28:	4630      	mov	r0, r6
 800ba2a:	f000 f81d 	bl	800ba68 <_isatty_r>
 800ba2e:	b128      	cbz	r0, 800ba3c <__smakebuf_r+0x70>
 800ba30:	89a3      	ldrh	r3, [r4, #12]
 800ba32:	f023 0303 	bic.w	r3, r3, #3
 800ba36:	f043 0301 	orr.w	r3, r3, #1
 800ba3a:	81a3      	strh	r3, [r4, #12]
 800ba3c:	89a3      	ldrh	r3, [r4, #12]
 800ba3e:	431d      	orrs	r5, r3
 800ba40:	81a5      	strh	r5, [r4, #12]
 800ba42:	e7cf      	b.n	800b9e4 <__smakebuf_r+0x18>

0800ba44 <_fstat_r>:
 800ba44:	b538      	push	{r3, r4, r5, lr}
 800ba46:	4d07      	ldr	r5, [pc, #28]	@ (800ba64 <_fstat_r+0x20>)
 800ba48:	2300      	movs	r3, #0
 800ba4a:	4604      	mov	r4, r0
 800ba4c:	4608      	mov	r0, r1
 800ba4e:	4611      	mov	r1, r2
 800ba50:	602b      	str	r3, [r5, #0]
 800ba52:	f7f6 f85b 	bl	8001b0c <_fstat>
 800ba56:	1c43      	adds	r3, r0, #1
 800ba58:	d102      	bne.n	800ba60 <_fstat_r+0x1c>
 800ba5a:	682b      	ldr	r3, [r5, #0]
 800ba5c:	b103      	cbz	r3, 800ba60 <_fstat_r+0x1c>
 800ba5e:	6023      	str	r3, [r4, #0]
 800ba60:	bd38      	pop	{r3, r4, r5, pc}
 800ba62:	bf00      	nop
 800ba64:	20000bf0 	.word	0x20000bf0

0800ba68 <_isatty_r>:
 800ba68:	b538      	push	{r3, r4, r5, lr}
 800ba6a:	4d06      	ldr	r5, [pc, #24]	@ (800ba84 <_isatty_r+0x1c>)
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	4604      	mov	r4, r0
 800ba70:	4608      	mov	r0, r1
 800ba72:	602b      	str	r3, [r5, #0]
 800ba74:	f7f6 f85a 	bl	8001b2c <_isatty>
 800ba78:	1c43      	adds	r3, r0, #1
 800ba7a:	d102      	bne.n	800ba82 <_isatty_r+0x1a>
 800ba7c:	682b      	ldr	r3, [r5, #0]
 800ba7e:	b103      	cbz	r3, 800ba82 <_isatty_r+0x1a>
 800ba80:	6023      	str	r3, [r4, #0]
 800ba82:	bd38      	pop	{r3, r4, r5, pc}
 800ba84:	20000bf0 	.word	0x20000bf0

0800ba88 <sin>:
 800ba88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba8a:	ec53 2b10 	vmov	r2, r3, d0
 800ba8e:	4826      	ldr	r0, [pc, #152]	@ (800bb28 <sin+0xa0>)
 800ba90:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ba94:	4281      	cmp	r1, r0
 800ba96:	d807      	bhi.n	800baa8 <sin+0x20>
 800ba98:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800bb20 <sin+0x98>
 800ba9c:	2000      	movs	r0, #0
 800ba9e:	b005      	add	sp, #20
 800baa0:	f85d eb04 	ldr.w	lr, [sp], #4
 800baa4:	f000 b90c 	b.w	800bcc0 <__kernel_sin>
 800baa8:	4820      	ldr	r0, [pc, #128]	@ (800bb2c <sin+0xa4>)
 800baaa:	4281      	cmp	r1, r0
 800baac:	d908      	bls.n	800bac0 <sin+0x38>
 800baae:	4610      	mov	r0, r2
 800bab0:	4619      	mov	r1, r3
 800bab2:	f7f4 fbe1 	bl	8000278 <__aeabi_dsub>
 800bab6:	ec41 0b10 	vmov	d0, r0, r1
 800baba:	b005      	add	sp, #20
 800babc:	f85d fb04 	ldr.w	pc, [sp], #4
 800bac0:	4668      	mov	r0, sp
 800bac2:	f000 f9b9 	bl	800be38 <__ieee754_rem_pio2>
 800bac6:	f000 0003 	and.w	r0, r0, #3
 800baca:	2801      	cmp	r0, #1
 800bacc:	d00c      	beq.n	800bae8 <sin+0x60>
 800bace:	2802      	cmp	r0, #2
 800bad0:	d011      	beq.n	800baf6 <sin+0x6e>
 800bad2:	b9e8      	cbnz	r0, 800bb10 <sin+0x88>
 800bad4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bad8:	ed9d 0b00 	vldr	d0, [sp]
 800badc:	2001      	movs	r0, #1
 800bade:	f000 f8ef 	bl	800bcc0 <__kernel_sin>
 800bae2:	ec51 0b10 	vmov	r0, r1, d0
 800bae6:	e7e6      	b.n	800bab6 <sin+0x2e>
 800bae8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800baec:	ed9d 0b00 	vldr	d0, [sp]
 800baf0:	f000 f81e 	bl	800bb30 <__kernel_cos>
 800baf4:	e7f5      	b.n	800bae2 <sin+0x5a>
 800baf6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bafa:	ed9d 0b00 	vldr	d0, [sp]
 800bafe:	2001      	movs	r0, #1
 800bb00:	f000 f8de 	bl	800bcc0 <__kernel_sin>
 800bb04:	ec53 2b10 	vmov	r2, r3, d0
 800bb08:	4610      	mov	r0, r2
 800bb0a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800bb0e:	e7d2      	b.n	800bab6 <sin+0x2e>
 800bb10:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bb14:	ed9d 0b00 	vldr	d0, [sp]
 800bb18:	f000 f80a 	bl	800bb30 <__kernel_cos>
 800bb1c:	e7f2      	b.n	800bb04 <sin+0x7c>
 800bb1e:	bf00      	nop
	...
 800bb28:	3fe921fb 	.word	0x3fe921fb
 800bb2c:	7fefffff 	.word	0x7fefffff

0800bb30 <__kernel_cos>:
 800bb30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb34:	ec57 6b10 	vmov	r6, r7, d0
 800bb38:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800bb3c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800bb40:	ed8d 1b00 	vstr	d1, [sp]
 800bb44:	d206      	bcs.n	800bb54 <__kernel_cos+0x24>
 800bb46:	4630      	mov	r0, r6
 800bb48:	4639      	mov	r1, r7
 800bb4a:	f7f4 ffe7 	bl	8000b1c <__aeabi_d2iz>
 800bb4e:	2800      	cmp	r0, #0
 800bb50:	f000 8088 	beq.w	800bc64 <__kernel_cos+0x134>
 800bb54:	4632      	mov	r2, r6
 800bb56:	463b      	mov	r3, r7
 800bb58:	4630      	mov	r0, r6
 800bb5a:	4639      	mov	r1, r7
 800bb5c:	f7f4 fd44 	bl	80005e8 <__aeabi_dmul>
 800bb60:	4b51      	ldr	r3, [pc, #324]	@ (800bca8 <__kernel_cos+0x178>)
 800bb62:	2200      	movs	r2, #0
 800bb64:	4604      	mov	r4, r0
 800bb66:	460d      	mov	r5, r1
 800bb68:	f7f4 fd3e 	bl	80005e8 <__aeabi_dmul>
 800bb6c:	a340      	add	r3, pc, #256	@ (adr r3, 800bc70 <__kernel_cos+0x140>)
 800bb6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb72:	4682      	mov	sl, r0
 800bb74:	468b      	mov	fp, r1
 800bb76:	4620      	mov	r0, r4
 800bb78:	4629      	mov	r1, r5
 800bb7a:	f7f4 fd35 	bl	80005e8 <__aeabi_dmul>
 800bb7e:	a33e      	add	r3, pc, #248	@ (adr r3, 800bc78 <__kernel_cos+0x148>)
 800bb80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb84:	f7f4 fb7a 	bl	800027c <__adddf3>
 800bb88:	4622      	mov	r2, r4
 800bb8a:	462b      	mov	r3, r5
 800bb8c:	f7f4 fd2c 	bl	80005e8 <__aeabi_dmul>
 800bb90:	a33b      	add	r3, pc, #236	@ (adr r3, 800bc80 <__kernel_cos+0x150>)
 800bb92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb96:	f7f4 fb6f 	bl	8000278 <__aeabi_dsub>
 800bb9a:	4622      	mov	r2, r4
 800bb9c:	462b      	mov	r3, r5
 800bb9e:	f7f4 fd23 	bl	80005e8 <__aeabi_dmul>
 800bba2:	a339      	add	r3, pc, #228	@ (adr r3, 800bc88 <__kernel_cos+0x158>)
 800bba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba8:	f7f4 fb68 	bl	800027c <__adddf3>
 800bbac:	4622      	mov	r2, r4
 800bbae:	462b      	mov	r3, r5
 800bbb0:	f7f4 fd1a 	bl	80005e8 <__aeabi_dmul>
 800bbb4:	a336      	add	r3, pc, #216	@ (adr r3, 800bc90 <__kernel_cos+0x160>)
 800bbb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbba:	f7f4 fb5d 	bl	8000278 <__aeabi_dsub>
 800bbbe:	4622      	mov	r2, r4
 800bbc0:	462b      	mov	r3, r5
 800bbc2:	f7f4 fd11 	bl	80005e8 <__aeabi_dmul>
 800bbc6:	a334      	add	r3, pc, #208	@ (adr r3, 800bc98 <__kernel_cos+0x168>)
 800bbc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbcc:	f7f4 fb56 	bl	800027c <__adddf3>
 800bbd0:	4622      	mov	r2, r4
 800bbd2:	462b      	mov	r3, r5
 800bbd4:	f7f4 fd08 	bl	80005e8 <__aeabi_dmul>
 800bbd8:	4622      	mov	r2, r4
 800bbda:	462b      	mov	r3, r5
 800bbdc:	f7f4 fd04 	bl	80005e8 <__aeabi_dmul>
 800bbe0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bbe4:	4604      	mov	r4, r0
 800bbe6:	460d      	mov	r5, r1
 800bbe8:	4630      	mov	r0, r6
 800bbea:	4639      	mov	r1, r7
 800bbec:	f7f4 fcfc 	bl	80005e8 <__aeabi_dmul>
 800bbf0:	460b      	mov	r3, r1
 800bbf2:	4602      	mov	r2, r0
 800bbf4:	4629      	mov	r1, r5
 800bbf6:	4620      	mov	r0, r4
 800bbf8:	f7f4 fb3e 	bl	8000278 <__aeabi_dsub>
 800bbfc:	4b2b      	ldr	r3, [pc, #172]	@ (800bcac <__kernel_cos+0x17c>)
 800bbfe:	4598      	cmp	r8, r3
 800bc00:	4606      	mov	r6, r0
 800bc02:	460f      	mov	r7, r1
 800bc04:	d810      	bhi.n	800bc28 <__kernel_cos+0xf8>
 800bc06:	4602      	mov	r2, r0
 800bc08:	460b      	mov	r3, r1
 800bc0a:	4650      	mov	r0, sl
 800bc0c:	4659      	mov	r1, fp
 800bc0e:	f7f4 fb33 	bl	8000278 <__aeabi_dsub>
 800bc12:	460b      	mov	r3, r1
 800bc14:	4926      	ldr	r1, [pc, #152]	@ (800bcb0 <__kernel_cos+0x180>)
 800bc16:	4602      	mov	r2, r0
 800bc18:	2000      	movs	r0, #0
 800bc1a:	f7f4 fb2d 	bl	8000278 <__aeabi_dsub>
 800bc1e:	ec41 0b10 	vmov	d0, r0, r1
 800bc22:	b003      	add	sp, #12
 800bc24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc28:	4b22      	ldr	r3, [pc, #136]	@ (800bcb4 <__kernel_cos+0x184>)
 800bc2a:	4921      	ldr	r1, [pc, #132]	@ (800bcb0 <__kernel_cos+0x180>)
 800bc2c:	4598      	cmp	r8, r3
 800bc2e:	bf8c      	ite	hi
 800bc30:	4d21      	ldrhi	r5, [pc, #132]	@ (800bcb8 <__kernel_cos+0x188>)
 800bc32:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800bc36:	2400      	movs	r4, #0
 800bc38:	4622      	mov	r2, r4
 800bc3a:	462b      	mov	r3, r5
 800bc3c:	2000      	movs	r0, #0
 800bc3e:	f7f4 fb1b 	bl	8000278 <__aeabi_dsub>
 800bc42:	4622      	mov	r2, r4
 800bc44:	4680      	mov	r8, r0
 800bc46:	4689      	mov	r9, r1
 800bc48:	462b      	mov	r3, r5
 800bc4a:	4650      	mov	r0, sl
 800bc4c:	4659      	mov	r1, fp
 800bc4e:	f7f4 fb13 	bl	8000278 <__aeabi_dsub>
 800bc52:	4632      	mov	r2, r6
 800bc54:	463b      	mov	r3, r7
 800bc56:	f7f4 fb0f 	bl	8000278 <__aeabi_dsub>
 800bc5a:	4602      	mov	r2, r0
 800bc5c:	460b      	mov	r3, r1
 800bc5e:	4640      	mov	r0, r8
 800bc60:	4649      	mov	r1, r9
 800bc62:	e7da      	b.n	800bc1a <__kernel_cos+0xea>
 800bc64:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800bca0 <__kernel_cos+0x170>
 800bc68:	e7db      	b.n	800bc22 <__kernel_cos+0xf2>
 800bc6a:	bf00      	nop
 800bc6c:	f3af 8000 	nop.w
 800bc70:	be8838d4 	.word	0xbe8838d4
 800bc74:	bda8fae9 	.word	0xbda8fae9
 800bc78:	bdb4b1c4 	.word	0xbdb4b1c4
 800bc7c:	3e21ee9e 	.word	0x3e21ee9e
 800bc80:	809c52ad 	.word	0x809c52ad
 800bc84:	3e927e4f 	.word	0x3e927e4f
 800bc88:	19cb1590 	.word	0x19cb1590
 800bc8c:	3efa01a0 	.word	0x3efa01a0
 800bc90:	16c15177 	.word	0x16c15177
 800bc94:	3f56c16c 	.word	0x3f56c16c
 800bc98:	5555554c 	.word	0x5555554c
 800bc9c:	3fa55555 	.word	0x3fa55555
 800bca0:	00000000 	.word	0x00000000
 800bca4:	3ff00000 	.word	0x3ff00000
 800bca8:	3fe00000 	.word	0x3fe00000
 800bcac:	3fd33332 	.word	0x3fd33332
 800bcb0:	3ff00000 	.word	0x3ff00000
 800bcb4:	3fe90000 	.word	0x3fe90000
 800bcb8:	3fd20000 	.word	0x3fd20000
 800bcbc:	00000000 	.word	0x00000000

0800bcc0 <__kernel_sin>:
 800bcc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcc4:	ec55 4b10 	vmov	r4, r5, d0
 800bcc8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800bccc:	b085      	sub	sp, #20
 800bcce:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800bcd2:	ed8d 1b02 	vstr	d1, [sp, #8]
 800bcd6:	4680      	mov	r8, r0
 800bcd8:	d205      	bcs.n	800bce6 <__kernel_sin+0x26>
 800bcda:	4620      	mov	r0, r4
 800bcdc:	4629      	mov	r1, r5
 800bcde:	f7f4 ff1d 	bl	8000b1c <__aeabi_d2iz>
 800bce2:	2800      	cmp	r0, #0
 800bce4:	d052      	beq.n	800bd8c <__kernel_sin+0xcc>
 800bce6:	4622      	mov	r2, r4
 800bce8:	462b      	mov	r3, r5
 800bcea:	4620      	mov	r0, r4
 800bcec:	4629      	mov	r1, r5
 800bcee:	f7f4 fc7b 	bl	80005e8 <__aeabi_dmul>
 800bcf2:	4682      	mov	sl, r0
 800bcf4:	468b      	mov	fp, r1
 800bcf6:	4602      	mov	r2, r0
 800bcf8:	460b      	mov	r3, r1
 800bcfa:	4620      	mov	r0, r4
 800bcfc:	4629      	mov	r1, r5
 800bcfe:	f7f4 fc73 	bl	80005e8 <__aeabi_dmul>
 800bd02:	a342      	add	r3, pc, #264	@ (adr r3, 800be0c <__kernel_sin+0x14c>)
 800bd04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd08:	e9cd 0100 	strd	r0, r1, [sp]
 800bd0c:	4650      	mov	r0, sl
 800bd0e:	4659      	mov	r1, fp
 800bd10:	f7f4 fc6a 	bl	80005e8 <__aeabi_dmul>
 800bd14:	a33f      	add	r3, pc, #252	@ (adr r3, 800be14 <__kernel_sin+0x154>)
 800bd16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd1a:	f7f4 faad 	bl	8000278 <__aeabi_dsub>
 800bd1e:	4652      	mov	r2, sl
 800bd20:	465b      	mov	r3, fp
 800bd22:	f7f4 fc61 	bl	80005e8 <__aeabi_dmul>
 800bd26:	a33d      	add	r3, pc, #244	@ (adr r3, 800be1c <__kernel_sin+0x15c>)
 800bd28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd2c:	f7f4 faa6 	bl	800027c <__adddf3>
 800bd30:	4652      	mov	r2, sl
 800bd32:	465b      	mov	r3, fp
 800bd34:	f7f4 fc58 	bl	80005e8 <__aeabi_dmul>
 800bd38:	a33a      	add	r3, pc, #232	@ (adr r3, 800be24 <__kernel_sin+0x164>)
 800bd3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd3e:	f7f4 fa9b 	bl	8000278 <__aeabi_dsub>
 800bd42:	4652      	mov	r2, sl
 800bd44:	465b      	mov	r3, fp
 800bd46:	f7f4 fc4f 	bl	80005e8 <__aeabi_dmul>
 800bd4a:	a338      	add	r3, pc, #224	@ (adr r3, 800be2c <__kernel_sin+0x16c>)
 800bd4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd50:	f7f4 fa94 	bl	800027c <__adddf3>
 800bd54:	4606      	mov	r6, r0
 800bd56:	460f      	mov	r7, r1
 800bd58:	f1b8 0f00 	cmp.w	r8, #0
 800bd5c:	d11b      	bne.n	800bd96 <__kernel_sin+0xd6>
 800bd5e:	4602      	mov	r2, r0
 800bd60:	460b      	mov	r3, r1
 800bd62:	4650      	mov	r0, sl
 800bd64:	4659      	mov	r1, fp
 800bd66:	f7f4 fc3f 	bl	80005e8 <__aeabi_dmul>
 800bd6a:	a325      	add	r3, pc, #148	@ (adr r3, 800be00 <__kernel_sin+0x140>)
 800bd6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd70:	f7f4 fa82 	bl	8000278 <__aeabi_dsub>
 800bd74:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd78:	f7f4 fc36 	bl	80005e8 <__aeabi_dmul>
 800bd7c:	4602      	mov	r2, r0
 800bd7e:	460b      	mov	r3, r1
 800bd80:	4620      	mov	r0, r4
 800bd82:	4629      	mov	r1, r5
 800bd84:	f7f4 fa7a 	bl	800027c <__adddf3>
 800bd88:	4604      	mov	r4, r0
 800bd8a:	460d      	mov	r5, r1
 800bd8c:	ec45 4b10 	vmov	d0, r4, r5
 800bd90:	b005      	add	sp, #20
 800bd92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd9a:	4b1b      	ldr	r3, [pc, #108]	@ (800be08 <__kernel_sin+0x148>)
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	f7f4 fc23 	bl	80005e8 <__aeabi_dmul>
 800bda2:	4632      	mov	r2, r6
 800bda4:	4680      	mov	r8, r0
 800bda6:	4689      	mov	r9, r1
 800bda8:	463b      	mov	r3, r7
 800bdaa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bdae:	f7f4 fc1b 	bl	80005e8 <__aeabi_dmul>
 800bdb2:	4602      	mov	r2, r0
 800bdb4:	460b      	mov	r3, r1
 800bdb6:	4640      	mov	r0, r8
 800bdb8:	4649      	mov	r1, r9
 800bdba:	f7f4 fa5d 	bl	8000278 <__aeabi_dsub>
 800bdbe:	4652      	mov	r2, sl
 800bdc0:	465b      	mov	r3, fp
 800bdc2:	f7f4 fc11 	bl	80005e8 <__aeabi_dmul>
 800bdc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bdca:	f7f4 fa55 	bl	8000278 <__aeabi_dsub>
 800bdce:	a30c      	add	r3, pc, #48	@ (adr r3, 800be00 <__kernel_sin+0x140>)
 800bdd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd4:	4606      	mov	r6, r0
 800bdd6:	460f      	mov	r7, r1
 800bdd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bddc:	f7f4 fc04 	bl	80005e8 <__aeabi_dmul>
 800bde0:	4602      	mov	r2, r0
 800bde2:	460b      	mov	r3, r1
 800bde4:	4630      	mov	r0, r6
 800bde6:	4639      	mov	r1, r7
 800bde8:	f7f4 fa48 	bl	800027c <__adddf3>
 800bdec:	4602      	mov	r2, r0
 800bdee:	460b      	mov	r3, r1
 800bdf0:	4620      	mov	r0, r4
 800bdf2:	4629      	mov	r1, r5
 800bdf4:	f7f4 fa40 	bl	8000278 <__aeabi_dsub>
 800bdf8:	e7c6      	b.n	800bd88 <__kernel_sin+0xc8>
 800bdfa:	bf00      	nop
 800bdfc:	f3af 8000 	nop.w
 800be00:	55555549 	.word	0x55555549
 800be04:	3fc55555 	.word	0x3fc55555
 800be08:	3fe00000 	.word	0x3fe00000
 800be0c:	5acfd57c 	.word	0x5acfd57c
 800be10:	3de5d93a 	.word	0x3de5d93a
 800be14:	8a2b9ceb 	.word	0x8a2b9ceb
 800be18:	3e5ae5e6 	.word	0x3e5ae5e6
 800be1c:	57b1fe7d 	.word	0x57b1fe7d
 800be20:	3ec71de3 	.word	0x3ec71de3
 800be24:	19c161d5 	.word	0x19c161d5
 800be28:	3f2a01a0 	.word	0x3f2a01a0
 800be2c:	1110f8a6 	.word	0x1110f8a6
 800be30:	3f811111 	.word	0x3f811111
 800be34:	00000000 	.word	0x00000000

0800be38 <__ieee754_rem_pio2>:
 800be38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be3c:	ec57 6b10 	vmov	r6, r7, d0
 800be40:	4bc5      	ldr	r3, [pc, #788]	@ (800c158 <__ieee754_rem_pio2+0x320>)
 800be42:	b08d      	sub	sp, #52	@ 0x34
 800be44:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800be48:	4598      	cmp	r8, r3
 800be4a:	4604      	mov	r4, r0
 800be4c:	9704      	str	r7, [sp, #16]
 800be4e:	d807      	bhi.n	800be60 <__ieee754_rem_pio2+0x28>
 800be50:	2200      	movs	r2, #0
 800be52:	2300      	movs	r3, #0
 800be54:	ed80 0b00 	vstr	d0, [r0]
 800be58:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800be5c:	2500      	movs	r5, #0
 800be5e:	e028      	b.n	800beb2 <__ieee754_rem_pio2+0x7a>
 800be60:	4bbe      	ldr	r3, [pc, #760]	@ (800c15c <__ieee754_rem_pio2+0x324>)
 800be62:	4598      	cmp	r8, r3
 800be64:	d878      	bhi.n	800bf58 <__ieee754_rem_pio2+0x120>
 800be66:	9b04      	ldr	r3, [sp, #16]
 800be68:	4dbd      	ldr	r5, [pc, #756]	@ (800c160 <__ieee754_rem_pio2+0x328>)
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	4630      	mov	r0, r6
 800be6e:	a3ac      	add	r3, pc, #688	@ (adr r3, 800c120 <__ieee754_rem_pio2+0x2e8>)
 800be70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be74:	4639      	mov	r1, r7
 800be76:	dd38      	ble.n	800beea <__ieee754_rem_pio2+0xb2>
 800be78:	f7f4 f9fe 	bl	8000278 <__aeabi_dsub>
 800be7c:	45a8      	cmp	r8, r5
 800be7e:	4606      	mov	r6, r0
 800be80:	460f      	mov	r7, r1
 800be82:	d01a      	beq.n	800beba <__ieee754_rem_pio2+0x82>
 800be84:	a3a8      	add	r3, pc, #672	@ (adr r3, 800c128 <__ieee754_rem_pio2+0x2f0>)
 800be86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be8a:	f7f4 f9f5 	bl	8000278 <__aeabi_dsub>
 800be8e:	4602      	mov	r2, r0
 800be90:	460b      	mov	r3, r1
 800be92:	4680      	mov	r8, r0
 800be94:	4689      	mov	r9, r1
 800be96:	4630      	mov	r0, r6
 800be98:	4639      	mov	r1, r7
 800be9a:	f7f4 f9ed 	bl	8000278 <__aeabi_dsub>
 800be9e:	a3a2      	add	r3, pc, #648	@ (adr r3, 800c128 <__ieee754_rem_pio2+0x2f0>)
 800bea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea4:	f7f4 f9e8 	bl	8000278 <__aeabi_dsub>
 800bea8:	e9c4 8900 	strd	r8, r9, [r4]
 800beac:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800beb0:	2501      	movs	r5, #1
 800beb2:	4628      	mov	r0, r5
 800beb4:	b00d      	add	sp, #52	@ 0x34
 800beb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beba:	a39d      	add	r3, pc, #628	@ (adr r3, 800c130 <__ieee754_rem_pio2+0x2f8>)
 800bebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec0:	f7f4 f9da 	bl	8000278 <__aeabi_dsub>
 800bec4:	a39c      	add	r3, pc, #624	@ (adr r3, 800c138 <__ieee754_rem_pio2+0x300>)
 800bec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beca:	4606      	mov	r6, r0
 800becc:	460f      	mov	r7, r1
 800bece:	f7f4 f9d3 	bl	8000278 <__aeabi_dsub>
 800bed2:	4602      	mov	r2, r0
 800bed4:	460b      	mov	r3, r1
 800bed6:	4680      	mov	r8, r0
 800bed8:	4689      	mov	r9, r1
 800beda:	4630      	mov	r0, r6
 800bedc:	4639      	mov	r1, r7
 800bede:	f7f4 f9cb 	bl	8000278 <__aeabi_dsub>
 800bee2:	a395      	add	r3, pc, #596	@ (adr r3, 800c138 <__ieee754_rem_pio2+0x300>)
 800bee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee8:	e7dc      	b.n	800bea4 <__ieee754_rem_pio2+0x6c>
 800beea:	f7f4 f9c7 	bl	800027c <__adddf3>
 800beee:	45a8      	cmp	r8, r5
 800bef0:	4606      	mov	r6, r0
 800bef2:	460f      	mov	r7, r1
 800bef4:	d018      	beq.n	800bf28 <__ieee754_rem_pio2+0xf0>
 800bef6:	a38c      	add	r3, pc, #560	@ (adr r3, 800c128 <__ieee754_rem_pio2+0x2f0>)
 800bef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800befc:	f7f4 f9be 	bl	800027c <__adddf3>
 800bf00:	4602      	mov	r2, r0
 800bf02:	460b      	mov	r3, r1
 800bf04:	4680      	mov	r8, r0
 800bf06:	4689      	mov	r9, r1
 800bf08:	4630      	mov	r0, r6
 800bf0a:	4639      	mov	r1, r7
 800bf0c:	f7f4 f9b4 	bl	8000278 <__aeabi_dsub>
 800bf10:	a385      	add	r3, pc, #532	@ (adr r3, 800c128 <__ieee754_rem_pio2+0x2f0>)
 800bf12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf16:	f7f4 f9b1 	bl	800027c <__adddf3>
 800bf1a:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800bf1e:	e9c4 8900 	strd	r8, r9, [r4]
 800bf22:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bf26:	e7c4      	b.n	800beb2 <__ieee754_rem_pio2+0x7a>
 800bf28:	a381      	add	r3, pc, #516	@ (adr r3, 800c130 <__ieee754_rem_pio2+0x2f8>)
 800bf2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf2e:	f7f4 f9a5 	bl	800027c <__adddf3>
 800bf32:	a381      	add	r3, pc, #516	@ (adr r3, 800c138 <__ieee754_rem_pio2+0x300>)
 800bf34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf38:	4606      	mov	r6, r0
 800bf3a:	460f      	mov	r7, r1
 800bf3c:	f7f4 f99e 	bl	800027c <__adddf3>
 800bf40:	4602      	mov	r2, r0
 800bf42:	460b      	mov	r3, r1
 800bf44:	4680      	mov	r8, r0
 800bf46:	4689      	mov	r9, r1
 800bf48:	4630      	mov	r0, r6
 800bf4a:	4639      	mov	r1, r7
 800bf4c:	f7f4 f994 	bl	8000278 <__aeabi_dsub>
 800bf50:	a379      	add	r3, pc, #484	@ (adr r3, 800c138 <__ieee754_rem_pio2+0x300>)
 800bf52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf56:	e7de      	b.n	800bf16 <__ieee754_rem_pio2+0xde>
 800bf58:	4b82      	ldr	r3, [pc, #520]	@ (800c164 <__ieee754_rem_pio2+0x32c>)
 800bf5a:	4598      	cmp	r8, r3
 800bf5c:	f200 80d1 	bhi.w	800c102 <__ieee754_rem_pio2+0x2ca>
 800bf60:	f000 f966 	bl	800c230 <fabs>
 800bf64:	ec57 6b10 	vmov	r6, r7, d0
 800bf68:	a375      	add	r3, pc, #468	@ (adr r3, 800c140 <__ieee754_rem_pio2+0x308>)
 800bf6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf6e:	4630      	mov	r0, r6
 800bf70:	4639      	mov	r1, r7
 800bf72:	f7f4 fb39 	bl	80005e8 <__aeabi_dmul>
 800bf76:	4b7c      	ldr	r3, [pc, #496]	@ (800c168 <__ieee754_rem_pio2+0x330>)
 800bf78:	2200      	movs	r2, #0
 800bf7a:	f7f4 f97f 	bl	800027c <__adddf3>
 800bf7e:	f7f4 fdcd 	bl	8000b1c <__aeabi_d2iz>
 800bf82:	4605      	mov	r5, r0
 800bf84:	f7f4 fac6 	bl	8000514 <__aeabi_i2d>
 800bf88:	4602      	mov	r2, r0
 800bf8a:	460b      	mov	r3, r1
 800bf8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bf90:	a363      	add	r3, pc, #396	@ (adr r3, 800c120 <__ieee754_rem_pio2+0x2e8>)
 800bf92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf96:	f7f4 fb27 	bl	80005e8 <__aeabi_dmul>
 800bf9a:	4602      	mov	r2, r0
 800bf9c:	460b      	mov	r3, r1
 800bf9e:	4630      	mov	r0, r6
 800bfa0:	4639      	mov	r1, r7
 800bfa2:	f7f4 f969 	bl	8000278 <__aeabi_dsub>
 800bfa6:	a360      	add	r3, pc, #384	@ (adr r3, 800c128 <__ieee754_rem_pio2+0x2f0>)
 800bfa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfac:	4682      	mov	sl, r0
 800bfae:	468b      	mov	fp, r1
 800bfb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfb4:	f7f4 fb18 	bl	80005e8 <__aeabi_dmul>
 800bfb8:	2d1f      	cmp	r5, #31
 800bfba:	4606      	mov	r6, r0
 800bfbc:	460f      	mov	r7, r1
 800bfbe:	dc0c      	bgt.n	800bfda <__ieee754_rem_pio2+0x1a2>
 800bfc0:	4b6a      	ldr	r3, [pc, #424]	@ (800c16c <__ieee754_rem_pio2+0x334>)
 800bfc2:	1e6a      	subs	r2, r5, #1
 800bfc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfc8:	4543      	cmp	r3, r8
 800bfca:	d006      	beq.n	800bfda <__ieee754_rem_pio2+0x1a2>
 800bfcc:	4632      	mov	r2, r6
 800bfce:	463b      	mov	r3, r7
 800bfd0:	4650      	mov	r0, sl
 800bfd2:	4659      	mov	r1, fp
 800bfd4:	f7f4 f950 	bl	8000278 <__aeabi_dsub>
 800bfd8:	e00e      	b.n	800bff8 <__ieee754_rem_pio2+0x1c0>
 800bfda:	463b      	mov	r3, r7
 800bfdc:	4632      	mov	r2, r6
 800bfde:	4650      	mov	r0, sl
 800bfe0:	4659      	mov	r1, fp
 800bfe2:	f7f4 f949 	bl	8000278 <__aeabi_dsub>
 800bfe6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bfea:	9305      	str	r3, [sp, #20]
 800bfec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bff0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800bff4:	2b10      	cmp	r3, #16
 800bff6:	dc02      	bgt.n	800bffe <__ieee754_rem_pio2+0x1c6>
 800bff8:	e9c4 0100 	strd	r0, r1, [r4]
 800bffc:	e039      	b.n	800c072 <__ieee754_rem_pio2+0x23a>
 800bffe:	a34c      	add	r3, pc, #304	@ (adr r3, 800c130 <__ieee754_rem_pio2+0x2f8>)
 800c000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c004:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c008:	f7f4 faee 	bl	80005e8 <__aeabi_dmul>
 800c00c:	4606      	mov	r6, r0
 800c00e:	460f      	mov	r7, r1
 800c010:	4602      	mov	r2, r0
 800c012:	460b      	mov	r3, r1
 800c014:	4650      	mov	r0, sl
 800c016:	4659      	mov	r1, fp
 800c018:	f7f4 f92e 	bl	8000278 <__aeabi_dsub>
 800c01c:	4602      	mov	r2, r0
 800c01e:	460b      	mov	r3, r1
 800c020:	4680      	mov	r8, r0
 800c022:	4689      	mov	r9, r1
 800c024:	4650      	mov	r0, sl
 800c026:	4659      	mov	r1, fp
 800c028:	f7f4 f926 	bl	8000278 <__aeabi_dsub>
 800c02c:	4632      	mov	r2, r6
 800c02e:	463b      	mov	r3, r7
 800c030:	f7f4 f922 	bl	8000278 <__aeabi_dsub>
 800c034:	a340      	add	r3, pc, #256	@ (adr r3, 800c138 <__ieee754_rem_pio2+0x300>)
 800c036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c03a:	4606      	mov	r6, r0
 800c03c:	460f      	mov	r7, r1
 800c03e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c042:	f7f4 fad1 	bl	80005e8 <__aeabi_dmul>
 800c046:	4632      	mov	r2, r6
 800c048:	463b      	mov	r3, r7
 800c04a:	f7f4 f915 	bl	8000278 <__aeabi_dsub>
 800c04e:	4602      	mov	r2, r0
 800c050:	460b      	mov	r3, r1
 800c052:	4606      	mov	r6, r0
 800c054:	460f      	mov	r7, r1
 800c056:	4640      	mov	r0, r8
 800c058:	4649      	mov	r1, r9
 800c05a:	f7f4 f90d 	bl	8000278 <__aeabi_dsub>
 800c05e:	9a05      	ldr	r2, [sp, #20]
 800c060:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c064:	1ad3      	subs	r3, r2, r3
 800c066:	2b31      	cmp	r3, #49	@ 0x31
 800c068:	dc20      	bgt.n	800c0ac <__ieee754_rem_pio2+0x274>
 800c06a:	e9c4 0100 	strd	r0, r1, [r4]
 800c06e:	46c2      	mov	sl, r8
 800c070:	46cb      	mov	fp, r9
 800c072:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c076:	4650      	mov	r0, sl
 800c078:	4642      	mov	r2, r8
 800c07a:	464b      	mov	r3, r9
 800c07c:	4659      	mov	r1, fp
 800c07e:	f7f4 f8fb 	bl	8000278 <__aeabi_dsub>
 800c082:	463b      	mov	r3, r7
 800c084:	4632      	mov	r2, r6
 800c086:	f7f4 f8f7 	bl	8000278 <__aeabi_dsub>
 800c08a:	9b04      	ldr	r3, [sp, #16]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c092:	f6bf af0e 	bge.w	800beb2 <__ieee754_rem_pio2+0x7a>
 800c096:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800c09a:	6063      	str	r3, [r4, #4]
 800c09c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c0a0:	f8c4 8000 	str.w	r8, [r4]
 800c0a4:	60a0      	str	r0, [r4, #8]
 800c0a6:	60e3      	str	r3, [r4, #12]
 800c0a8:	426d      	negs	r5, r5
 800c0aa:	e702      	b.n	800beb2 <__ieee754_rem_pio2+0x7a>
 800c0ac:	a326      	add	r3, pc, #152	@ (adr r3, 800c148 <__ieee754_rem_pio2+0x310>)
 800c0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0b6:	f7f4 fa97 	bl	80005e8 <__aeabi_dmul>
 800c0ba:	4606      	mov	r6, r0
 800c0bc:	460f      	mov	r7, r1
 800c0be:	4602      	mov	r2, r0
 800c0c0:	460b      	mov	r3, r1
 800c0c2:	4640      	mov	r0, r8
 800c0c4:	4649      	mov	r1, r9
 800c0c6:	f7f4 f8d7 	bl	8000278 <__aeabi_dsub>
 800c0ca:	4602      	mov	r2, r0
 800c0cc:	460b      	mov	r3, r1
 800c0ce:	4682      	mov	sl, r0
 800c0d0:	468b      	mov	fp, r1
 800c0d2:	4640      	mov	r0, r8
 800c0d4:	4649      	mov	r1, r9
 800c0d6:	f7f4 f8cf 	bl	8000278 <__aeabi_dsub>
 800c0da:	4632      	mov	r2, r6
 800c0dc:	463b      	mov	r3, r7
 800c0de:	f7f4 f8cb 	bl	8000278 <__aeabi_dsub>
 800c0e2:	a31b      	add	r3, pc, #108	@ (adr r3, 800c150 <__ieee754_rem_pio2+0x318>)
 800c0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e8:	4606      	mov	r6, r0
 800c0ea:	460f      	mov	r7, r1
 800c0ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0f0:	f7f4 fa7a 	bl	80005e8 <__aeabi_dmul>
 800c0f4:	4632      	mov	r2, r6
 800c0f6:	463b      	mov	r3, r7
 800c0f8:	f7f4 f8be 	bl	8000278 <__aeabi_dsub>
 800c0fc:	4606      	mov	r6, r0
 800c0fe:	460f      	mov	r7, r1
 800c100:	e764      	b.n	800bfcc <__ieee754_rem_pio2+0x194>
 800c102:	4b1b      	ldr	r3, [pc, #108]	@ (800c170 <__ieee754_rem_pio2+0x338>)
 800c104:	4598      	cmp	r8, r3
 800c106:	d935      	bls.n	800c174 <__ieee754_rem_pio2+0x33c>
 800c108:	4632      	mov	r2, r6
 800c10a:	463b      	mov	r3, r7
 800c10c:	4630      	mov	r0, r6
 800c10e:	4639      	mov	r1, r7
 800c110:	f7f4 f8b2 	bl	8000278 <__aeabi_dsub>
 800c114:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c118:	e9c4 0100 	strd	r0, r1, [r4]
 800c11c:	e69e      	b.n	800be5c <__ieee754_rem_pio2+0x24>
 800c11e:	bf00      	nop
 800c120:	54400000 	.word	0x54400000
 800c124:	3ff921fb 	.word	0x3ff921fb
 800c128:	1a626331 	.word	0x1a626331
 800c12c:	3dd0b461 	.word	0x3dd0b461
 800c130:	1a600000 	.word	0x1a600000
 800c134:	3dd0b461 	.word	0x3dd0b461
 800c138:	2e037073 	.word	0x2e037073
 800c13c:	3ba3198a 	.word	0x3ba3198a
 800c140:	6dc9c883 	.word	0x6dc9c883
 800c144:	3fe45f30 	.word	0x3fe45f30
 800c148:	2e000000 	.word	0x2e000000
 800c14c:	3ba3198a 	.word	0x3ba3198a
 800c150:	252049c1 	.word	0x252049c1
 800c154:	397b839a 	.word	0x397b839a
 800c158:	3fe921fb 	.word	0x3fe921fb
 800c15c:	4002d97b 	.word	0x4002d97b
 800c160:	3ff921fb 	.word	0x3ff921fb
 800c164:	413921fb 	.word	0x413921fb
 800c168:	3fe00000 	.word	0x3fe00000
 800c16c:	0800cbfc 	.word	0x0800cbfc
 800c170:	7fefffff 	.word	0x7fefffff
 800c174:	ea4f 5528 	mov.w	r5, r8, asr #20
 800c178:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800c17c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800c180:	4630      	mov	r0, r6
 800c182:	460f      	mov	r7, r1
 800c184:	f7f4 fcca 	bl	8000b1c <__aeabi_d2iz>
 800c188:	f7f4 f9c4 	bl	8000514 <__aeabi_i2d>
 800c18c:	4602      	mov	r2, r0
 800c18e:	460b      	mov	r3, r1
 800c190:	4630      	mov	r0, r6
 800c192:	4639      	mov	r1, r7
 800c194:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c198:	f7f4 f86e 	bl	8000278 <__aeabi_dsub>
 800c19c:	4b22      	ldr	r3, [pc, #136]	@ (800c228 <__ieee754_rem_pio2+0x3f0>)
 800c19e:	2200      	movs	r2, #0
 800c1a0:	f7f4 fa22 	bl	80005e8 <__aeabi_dmul>
 800c1a4:	460f      	mov	r7, r1
 800c1a6:	4606      	mov	r6, r0
 800c1a8:	f7f4 fcb8 	bl	8000b1c <__aeabi_d2iz>
 800c1ac:	f7f4 f9b2 	bl	8000514 <__aeabi_i2d>
 800c1b0:	4602      	mov	r2, r0
 800c1b2:	460b      	mov	r3, r1
 800c1b4:	4630      	mov	r0, r6
 800c1b6:	4639      	mov	r1, r7
 800c1b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c1bc:	f7f4 f85c 	bl	8000278 <__aeabi_dsub>
 800c1c0:	4b19      	ldr	r3, [pc, #100]	@ (800c228 <__ieee754_rem_pio2+0x3f0>)
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	f7f4 fa10 	bl	80005e8 <__aeabi_dmul>
 800c1c8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800c1cc:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800c1d0:	f04f 0803 	mov.w	r8, #3
 800c1d4:	2600      	movs	r6, #0
 800c1d6:	2700      	movs	r7, #0
 800c1d8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800c1dc:	4632      	mov	r2, r6
 800c1de:	463b      	mov	r3, r7
 800c1e0:	46c2      	mov	sl, r8
 800c1e2:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800c1e6:	f7f4 fc67 	bl	8000ab8 <__aeabi_dcmpeq>
 800c1ea:	2800      	cmp	r0, #0
 800c1ec:	d1f4      	bne.n	800c1d8 <__ieee754_rem_pio2+0x3a0>
 800c1ee:	4b0f      	ldr	r3, [pc, #60]	@ (800c22c <__ieee754_rem_pio2+0x3f4>)
 800c1f0:	9301      	str	r3, [sp, #4]
 800c1f2:	2302      	movs	r3, #2
 800c1f4:	9300      	str	r3, [sp, #0]
 800c1f6:	462a      	mov	r2, r5
 800c1f8:	4653      	mov	r3, sl
 800c1fa:	4621      	mov	r1, r4
 800c1fc:	a806      	add	r0, sp, #24
 800c1fe:	f000 f81f 	bl	800c240 <__kernel_rem_pio2>
 800c202:	9b04      	ldr	r3, [sp, #16]
 800c204:	2b00      	cmp	r3, #0
 800c206:	4605      	mov	r5, r0
 800c208:	f6bf ae53 	bge.w	800beb2 <__ieee754_rem_pio2+0x7a>
 800c20c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800c210:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c214:	e9c4 2300 	strd	r2, r3, [r4]
 800c218:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800c21c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c220:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800c224:	e740      	b.n	800c0a8 <__ieee754_rem_pio2+0x270>
 800c226:	bf00      	nop
 800c228:	41700000 	.word	0x41700000
 800c22c:	0800cc7c 	.word	0x0800cc7c

0800c230 <fabs>:
 800c230:	ec51 0b10 	vmov	r0, r1, d0
 800c234:	4602      	mov	r2, r0
 800c236:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c23a:	ec43 2b10 	vmov	d0, r2, r3
 800c23e:	4770      	bx	lr

0800c240 <__kernel_rem_pio2>:
 800c240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c244:	ed2d 8b02 	vpush	{d8}
 800c248:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800c24c:	f112 0f14 	cmn.w	r2, #20
 800c250:	9306      	str	r3, [sp, #24]
 800c252:	9104      	str	r1, [sp, #16]
 800c254:	4bbe      	ldr	r3, [pc, #760]	@ (800c550 <__kernel_rem_pio2+0x310>)
 800c256:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800c258:	9008      	str	r0, [sp, #32]
 800c25a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c25e:	9300      	str	r3, [sp, #0]
 800c260:	9b06      	ldr	r3, [sp, #24]
 800c262:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800c266:	bfa8      	it	ge
 800c268:	1ed4      	subge	r4, r2, #3
 800c26a:	9305      	str	r3, [sp, #20]
 800c26c:	bfb2      	itee	lt
 800c26e:	2400      	movlt	r4, #0
 800c270:	2318      	movge	r3, #24
 800c272:	fb94 f4f3 	sdivge	r4, r4, r3
 800c276:	f06f 0317 	mvn.w	r3, #23
 800c27a:	fb04 3303 	mla	r3, r4, r3, r3
 800c27e:	eb03 0b02 	add.w	fp, r3, r2
 800c282:	9b00      	ldr	r3, [sp, #0]
 800c284:	9a05      	ldr	r2, [sp, #20]
 800c286:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800c540 <__kernel_rem_pio2+0x300>
 800c28a:	eb03 0802 	add.w	r8, r3, r2
 800c28e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800c290:	1aa7      	subs	r7, r4, r2
 800c292:	ae20      	add	r6, sp, #128	@ 0x80
 800c294:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c298:	2500      	movs	r5, #0
 800c29a:	4545      	cmp	r5, r8
 800c29c:	dd13      	ble.n	800c2c6 <__kernel_rem_pio2+0x86>
 800c29e:	9b06      	ldr	r3, [sp, #24]
 800c2a0:	aa20      	add	r2, sp, #128	@ 0x80
 800c2a2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c2a6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800c2aa:	f04f 0800 	mov.w	r8, #0
 800c2ae:	9b00      	ldr	r3, [sp, #0]
 800c2b0:	4598      	cmp	r8, r3
 800c2b2:	dc31      	bgt.n	800c318 <__kernel_rem_pio2+0xd8>
 800c2b4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800c540 <__kernel_rem_pio2+0x300>
 800c2b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c2bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c2c0:	462f      	mov	r7, r5
 800c2c2:	2600      	movs	r6, #0
 800c2c4:	e01b      	b.n	800c2fe <__kernel_rem_pio2+0xbe>
 800c2c6:	42ef      	cmn	r7, r5
 800c2c8:	d407      	bmi.n	800c2da <__kernel_rem_pio2+0x9a>
 800c2ca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c2ce:	f7f4 f921 	bl	8000514 <__aeabi_i2d>
 800c2d2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c2d6:	3501      	adds	r5, #1
 800c2d8:	e7df      	b.n	800c29a <__kernel_rem_pio2+0x5a>
 800c2da:	ec51 0b18 	vmov	r0, r1, d8
 800c2de:	e7f8      	b.n	800c2d2 <__kernel_rem_pio2+0x92>
 800c2e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2e4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c2e8:	f7f4 f97e 	bl	80005e8 <__aeabi_dmul>
 800c2ec:	4602      	mov	r2, r0
 800c2ee:	460b      	mov	r3, r1
 800c2f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2f4:	f7f3 ffc2 	bl	800027c <__adddf3>
 800c2f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2fc:	3601      	adds	r6, #1
 800c2fe:	9b05      	ldr	r3, [sp, #20]
 800c300:	429e      	cmp	r6, r3
 800c302:	f1a7 0708 	sub.w	r7, r7, #8
 800c306:	ddeb      	ble.n	800c2e0 <__kernel_rem_pio2+0xa0>
 800c308:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c30c:	f108 0801 	add.w	r8, r8, #1
 800c310:	ecaa 7b02 	vstmia	sl!, {d7}
 800c314:	3508      	adds	r5, #8
 800c316:	e7ca      	b.n	800c2ae <__kernel_rem_pio2+0x6e>
 800c318:	9b00      	ldr	r3, [sp, #0]
 800c31a:	f8dd 8000 	ldr.w	r8, [sp]
 800c31e:	aa0c      	add	r2, sp, #48	@ 0x30
 800c320:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c324:	930a      	str	r3, [sp, #40]	@ 0x28
 800c326:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800c328:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c32c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c32e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800c332:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c334:	ab98      	add	r3, sp, #608	@ 0x260
 800c336:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c33a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800c33e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c342:	ac0c      	add	r4, sp, #48	@ 0x30
 800c344:	ab70      	add	r3, sp, #448	@ 0x1c0
 800c346:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800c34a:	46a1      	mov	r9, r4
 800c34c:	46c2      	mov	sl, r8
 800c34e:	f1ba 0f00 	cmp.w	sl, #0
 800c352:	f1a5 0508 	sub.w	r5, r5, #8
 800c356:	dc77      	bgt.n	800c448 <__kernel_rem_pio2+0x208>
 800c358:	4658      	mov	r0, fp
 800c35a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800c35e:	f000 fac7 	bl	800c8f0 <scalbn>
 800c362:	ec57 6b10 	vmov	r6, r7, d0
 800c366:	2200      	movs	r2, #0
 800c368:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800c36c:	4630      	mov	r0, r6
 800c36e:	4639      	mov	r1, r7
 800c370:	f7f4 f93a 	bl	80005e8 <__aeabi_dmul>
 800c374:	ec41 0b10 	vmov	d0, r0, r1
 800c378:	f000 fb3a 	bl	800c9f0 <floor>
 800c37c:	4b75      	ldr	r3, [pc, #468]	@ (800c554 <__kernel_rem_pio2+0x314>)
 800c37e:	ec51 0b10 	vmov	r0, r1, d0
 800c382:	2200      	movs	r2, #0
 800c384:	f7f4 f930 	bl	80005e8 <__aeabi_dmul>
 800c388:	4602      	mov	r2, r0
 800c38a:	460b      	mov	r3, r1
 800c38c:	4630      	mov	r0, r6
 800c38e:	4639      	mov	r1, r7
 800c390:	f7f3 ff72 	bl	8000278 <__aeabi_dsub>
 800c394:	460f      	mov	r7, r1
 800c396:	4606      	mov	r6, r0
 800c398:	f7f4 fbc0 	bl	8000b1c <__aeabi_d2iz>
 800c39c:	9002      	str	r0, [sp, #8]
 800c39e:	f7f4 f8b9 	bl	8000514 <__aeabi_i2d>
 800c3a2:	4602      	mov	r2, r0
 800c3a4:	460b      	mov	r3, r1
 800c3a6:	4630      	mov	r0, r6
 800c3a8:	4639      	mov	r1, r7
 800c3aa:	f7f3 ff65 	bl	8000278 <__aeabi_dsub>
 800c3ae:	f1bb 0f00 	cmp.w	fp, #0
 800c3b2:	4606      	mov	r6, r0
 800c3b4:	460f      	mov	r7, r1
 800c3b6:	dd6c      	ble.n	800c492 <__kernel_rem_pio2+0x252>
 800c3b8:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800c3bc:	ab0c      	add	r3, sp, #48	@ 0x30
 800c3be:	9d02      	ldr	r5, [sp, #8]
 800c3c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c3c4:	f1cb 0018 	rsb	r0, fp, #24
 800c3c8:	fa43 f200 	asr.w	r2, r3, r0
 800c3cc:	4415      	add	r5, r2
 800c3ce:	4082      	lsls	r2, r0
 800c3d0:	1a9b      	subs	r3, r3, r2
 800c3d2:	aa0c      	add	r2, sp, #48	@ 0x30
 800c3d4:	9502      	str	r5, [sp, #8]
 800c3d6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c3da:	f1cb 0217 	rsb	r2, fp, #23
 800c3de:	fa43 f902 	asr.w	r9, r3, r2
 800c3e2:	f1b9 0f00 	cmp.w	r9, #0
 800c3e6:	dd64      	ble.n	800c4b2 <__kernel_rem_pio2+0x272>
 800c3e8:	9b02      	ldr	r3, [sp, #8]
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	3301      	adds	r3, #1
 800c3ee:	9302      	str	r3, [sp, #8]
 800c3f0:	4615      	mov	r5, r2
 800c3f2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800c3f6:	4590      	cmp	r8, r2
 800c3f8:	f300 80b8 	bgt.w	800c56c <__kernel_rem_pio2+0x32c>
 800c3fc:	f1bb 0f00 	cmp.w	fp, #0
 800c400:	dd07      	ble.n	800c412 <__kernel_rem_pio2+0x1d2>
 800c402:	f1bb 0f01 	cmp.w	fp, #1
 800c406:	f000 80bf 	beq.w	800c588 <__kernel_rem_pio2+0x348>
 800c40a:	f1bb 0f02 	cmp.w	fp, #2
 800c40e:	f000 80c6 	beq.w	800c59e <__kernel_rem_pio2+0x35e>
 800c412:	f1b9 0f02 	cmp.w	r9, #2
 800c416:	d14c      	bne.n	800c4b2 <__kernel_rem_pio2+0x272>
 800c418:	4632      	mov	r2, r6
 800c41a:	463b      	mov	r3, r7
 800c41c:	494e      	ldr	r1, [pc, #312]	@ (800c558 <__kernel_rem_pio2+0x318>)
 800c41e:	2000      	movs	r0, #0
 800c420:	f7f3 ff2a 	bl	8000278 <__aeabi_dsub>
 800c424:	4606      	mov	r6, r0
 800c426:	460f      	mov	r7, r1
 800c428:	2d00      	cmp	r5, #0
 800c42a:	d042      	beq.n	800c4b2 <__kernel_rem_pio2+0x272>
 800c42c:	4658      	mov	r0, fp
 800c42e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800c548 <__kernel_rem_pio2+0x308>
 800c432:	f000 fa5d 	bl	800c8f0 <scalbn>
 800c436:	4630      	mov	r0, r6
 800c438:	4639      	mov	r1, r7
 800c43a:	ec53 2b10 	vmov	r2, r3, d0
 800c43e:	f7f3 ff1b 	bl	8000278 <__aeabi_dsub>
 800c442:	4606      	mov	r6, r0
 800c444:	460f      	mov	r7, r1
 800c446:	e034      	b.n	800c4b2 <__kernel_rem_pio2+0x272>
 800c448:	4b44      	ldr	r3, [pc, #272]	@ (800c55c <__kernel_rem_pio2+0x31c>)
 800c44a:	2200      	movs	r2, #0
 800c44c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c450:	f7f4 f8ca 	bl	80005e8 <__aeabi_dmul>
 800c454:	f7f4 fb62 	bl	8000b1c <__aeabi_d2iz>
 800c458:	f7f4 f85c 	bl	8000514 <__aeabi_i2d>
 800c45c:	4b40      	ldr	r3, [pc, #256]	@ (800c560 <__kernel_rem_pio2+0x320>)
 800c45e:	2200      	movs	r2, #0
 800c460:	4606      	mov	r6, r0
 800c462:	460f      	mov	r7, r1
 800c464:	f7f4 f8c0 	bl	80005e8 <__aeabi_dmul>
 800c468:	4602      	mov	r2, r0
 800c46a:	460b      	mov	r3, r1
 800c46c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c470:	f7f3 ff02 	bl	8000278 <__aeabi_dsub>
 800c474:	f7f4 fb52 	bl	8000b1c <__aeabi_d2iz>
 800c478:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c47c:	f849 0b04 	str.w	r0, [r9], #4
 800c480:	4639      	mov	r1, r7
 800c482:	4630      	mov	r0, r6
 800c484:	f7f3 fefa 	bl	800027c <__adddf3>
 800c488:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800c48c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c490:	e75d      	b.n	800c34e <__kernel_rem_pio2+0x10e>
 800c492:	d107      	bne.n	800c4a4 <__kernel_rem_pio2+0x264>
 800c494:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800c498:	aa0c      	add	r2, sp, #48	@ 0x30
 800c49a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c49e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800c4a2:	e79e      	b.n	800c3e2 <__kernel_rem_pio2+0x1a2>
 800c4a4:	4b2f      	ldr	r3, [pc, #188]	@ (800c564 <__kernel_rem_pio2+0x324>)
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	f7f4 fb24 	bl	8000af4 <__aeabi_dcmpge>
 800c4ac:	2800      	cmp	r0, #0
 800c4ae:	d143      	bne.n	800c538 <__kernel_rem_pio2+0x2f8>
 800c4b0:	4681      	mov	r9, r0
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	4630      	mov	r0, r6
 800c4b8:	4639      	mov	r1, r7
 800c4ba:	f7f4 fafd 	bl	8000ab8 <__aeabi_dcmpeq>
 800c4be:	2800      	cmp	r0, #0
 800c4c0:	f000 80bf 	beq.w	800c642 <__kernel_rem_pio2+0x402>
 800c4c4:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	9900      	ldr	r1, [sp, #0]
 800c4cc:	428b      	cmp	r3, r1
 800c4ce:	da6e      	bge.n	800c5ae <__kernel_rem_pio2+0x36e>
 800c4d0:	2a00      	cmp	r2, #0
 800c4d2:	f000 8089 	beq.w	800c5e8 <__kernel_rem_pio2+0x3a8>
 800c4d6:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800c4da:	ab0c      	add	r3, sp, #48	@ 0x30
 800c4dc:	f1ab 0b18 	sub.w	fp, fp, #24
 800c4e0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d0f6      	beq.n	800c4d6 <__kernel_rem_pio2+0x296>
 800c4e8:	4658      	mov	r0, fp
 800c4ea:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800c548 <__kernel_rem_pio2+0x308>
 800c4ee:	f000 f9ff 	bl	800c8f0 <scalbn>
 800c4f2:	f108 0301 	add.w	r3, r8, #1
 800c4f6:	00da      	lsls	r2, r3, #3
 800c4f8:	9205      	str	r2, [sp, #20]
 800c4fa:	ec55 4b10 	vmov	r4, r5, d0
 800c4fe:	aa70      	add	r2, sp, #448	@ 0x1c0
 800c500:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800c55c <__kernel_rem_pio2+0x31c>
 800c504:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800c508:	4646      	mov	r6, r8
 800c50a:	f04f 0a00 	mov.w	sl, #0
 800c50e:	2e00      	cmp	r6, #0
 800c510:	f280 80cf 	bge.w	800c6b2 <__kernel_rem_pio2+0x472>
 800c514:	4644      	mov	r4, r8
 800c516:	2c00      	cmp	r4, #0
 800c518:	f2c0 80fd 	blt.w	800c716 <__kernel_rem_pio2+0x4d6>
 800c51c:	4b12      	ldr	r3, [pc, #72]	@ (800c568 <__kernel_rem_pio2+0x328>)
 800c51e:	461f      	mov	r7, r3
 800c520:	ab70      	add	r3, sp, #448	@ 0x1c0
 800c522:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c526:	9306      	str	r3, [sp, #24]
 800c528:	f04f 0a00 	mov.w	sl, #0
 800c52c:	f04f 0b00 	mov.w	fp, #0
 800c530:	2600      	movs	r6, #0
 800c532:	eba8 0504 	sub.w	r5, r8, r4
 800c536:	e0e2      	b.n	800c6fe <__kernel_rem_pio2+0x4be>
 800c538:	f04f 0902 	mov.w	r9, #2
 800c53c:	e754      	b.n	800c3e8 <__kernel_rem_pio2+0x1a8>
 800c53e:	bf00      	nop
	...
 800c54c:	3ff00000 	.word	0x3ff00000
 800c550:	0800cdc8 	.word	0x0800cdc8
 800c554:	40200000 	.word	0x40200000
 800c558:	3ff00000 	.word	0x3ff00000
 800c55c:	3e700000 	.word	0x3e700000
 800c560:	41700000 	.word	0x41700000
 800c564:	3fe00000 	.word	0x3fe00000
 800c568:	0800cd88 	.word	0x0800cd88
 800c56c:	f854 3b04 	ldr.w	r3, [r4], #4
 800c570:	b945      	cbnz	r5, 800c584 <__kernel_rem_pio2+0x344>
 800c572:	b123      	cbz	r3, 800c57e <__kernel_rem_pio2+0x33e>
 800c574:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800c578:	f844 3c04 	str.w	r3, [r4, #-4]
 800c57c:	2301      	movs	r3, #1
 800c57e:	3201      	adds	r2, #1
 800c580:	461d      	mov	r5, r3
 800c582:	e738      	b.n	800c3f6 <__kernel_rem_pio2+0x1b6>
 800c584:	1acb      	subs	r3, r1, r3
 800c586:	e7f7      	b.n	800c578 <__kernel_rem_pio2+0x338>
 800c588:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800c58c:	ab0c      	add	r3, sp, #48	@ 0x30
 800c58e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c592:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c596:	a90c      	add	r1, sp, #48	@ 0x30
 800c598:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c59c:	e739      	b.n	800c412 <__kernel_rem_pio2+0x1d2>
 800c59e:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800c5a2:	ab0c      	add	r3, sp, #48	@ 0x30
 800c5a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5a8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c5ac:	e7f3      	b.n	800c596 <__kernel_rem_pio2+0x356>
 800c5ae:	a90c      	add	r1, sp, #48	@ 0x30
 800c5b0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c5b4:	3b01      	subs	r3, #1
 800c5b6:	430a      	orrs	r2, r1
 800c5b8:	e787      	b.n	800c4ca <__kernel_rem_pio2+0x28a>
 800c5ba:	3401      	adds	r4, #1
 800c5bc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c5c0:	2a00      	cmp	r2, #0
 800c5c2:	d0fa      	beq.n	800c5ba <__kernel_rem_pio2+0x37a>
 800c5c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c5c6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c5ca:	eb0d 0503 	add.w	r5, sp, r3
 800c5ce:	9b06      	ldr	r3, [sp, #24]
 800c5d0:	aa20      	add	r2, sp, #128	@ 0x80
 800c5d2:	4443      	add	r3, r8
 800c5d4:	f108 0701 	add.w	r7, r8, #1
 800c5d8:	3d98      	subs	r5, #152	@ 0x98
 800c5da:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800c5de:	4444      	add	r4, r8
 800c5e0:	42bc      	cmp	r4, r7
 800c5e2:	da04      	bge.n	800c5ee <__kernel_rem_pio2+0x3ae>
 800c5e4:	46a0      	mov	r8, r4
 800c5e6:	e6a2      	b.n	800c32e <__kernel_rem_pio2+0xee>
 800c5e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c5ea:	2401      	movs	r4, #1
 800c5ec:	e7e6      	b.n	800c5bc <__kernel_rem_pio2+0x37c>
 800c5ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5f0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800c5f4:	f7f3 ff8e 	bl	8000514 <__aeabi_i2d>
 800c5f8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800c8c0 <__kernel_rem_pio2+0x680>
 800c5fc:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c600:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c604:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c608:	46b2      	mov	sl, r6
 800c60a:	f04f 0800 	mov.w	r8, #0
 800c60e:	9b05      	ldr	r3, [sp, #20]
 800c610:	4598      	cmp	r8, r3
 800c612:	dd05      	ble.n	800c620 <__kernel_rem_pio2+0x3e0>
 800c614:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c618:	3701      	adds	r7, #1
 800c61a:	eca5 7b02 	vstmia	r5!, {d7}
 800c61e:	e7df      	b.n	800c5e0 <__kernel_rem_pio2+0x3a0>
 800c620:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800c624:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c628:	f7f3 ffde 	bl	80005e8 <__aeabi_dmul>
 800c62c:	4602      	mov	r2, r0
 800c62e:	460b      	mov	r3, r1
 800c630:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c634:	f7f3 fe22 	bl	800027c <__adddf3>
 800c638:	f108 0801 	add.w	r8, r8, #1
 800c63c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c640:	e7e5      	b.n	800c60e <__kernel_rem_pio2+0x3ce>
 800c642:	f1cb 0000 	rsb	r0, fp, #0
 800c646:	ec47 6b10 	vmov	d0, r6, r7
 800c64a:	f000 f951 	bl	800c8f0 <scalbn>
 800c64e:	ec55 4b10 	vmov	r4, r5, d0
 800c652:	4b9d      	ldr	r3, [pc, #628]	@ (800c8c8 <__kernel_rem_pio2+0x688>)
 800c654:	2200      	movs	r2, #0
 800c656:	4620      	mov	r0, r4
 800c658:	4629      	mov	r1, r5
 800c65a:	f7f4 fa4b 	bl	8000af4 <__aeabi_dcmpge>
 800c65e:	b300      	cbz	r0, 800c6a2 <__kernel_rem_pio2+0x462>
 800c660:	4b9a      	ldr	r3, [pc, #616]	@ (800c8cc <__kernel_rem_pio2+0x68c>)
 800c662:	2200      	movs	r2, #0
 800c664:	4620      	mov	r0, r4
 800c666:	4629      	mov	r1, r5
 800c668:	f7f3 ffbe 	bl	80005e8 <__aeabi_dmul>
 800c66c:	f7f4 fa56 	bl	8000b1c <__aeabi_d2iz>
 800c670:	4606      	mov	r6, r0
 800c672:	f7f3 ff4f 	bl	8000514 <__aeabi_i2d>
 800c676:	4b94      	ldr	r3, [pc, #592]	@ (800c8c8 <__kernel_rem_pio2+0x688>)
 800c678:	2200      	movs	r2, #0
 800c67a:	f7f3 ffb5 	bl	80005e8 <__aeabi_dmul>
 800c67e:	460b      	mov	r3, r1
 800c680:	4602      	mov	r2, r0
 800c682:	4629      	mov	r1, r5
 800c684:	4620      	mov	r0, r4
 800c686:	f7f3 fdf7 	bl	8000278 <__aeabi_dsub>
 800c68a:	f7f4 fa47 	bl	8000b1c <__aeabi_d2iz>
 800c68e:	ab0c      	add	r3, sp, #48	@ 0x30
 800c690:	f10b 0b18 	add.w	fp, fp, #24
 800c694:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800c698:	f108 0801 	add.w	r8, r8, #1
 800c69c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800c6a0:	e722      	b.n	800c4e8 <__kernel_rem_pio2+0x2a8>
 800c6a2:	4620      	mov	r0, r4
 800c6a4:	4629      	mov	r1, r5
 800c6a6:	f7f4 fa39 	bl	8000b1c <__aeabi_d2iz>
 800c6aa:	ab0c      	add	r3, sp, #48	@ 0x30
 800c6ac:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800c6b0:	e71a      	b.n	800c4e8 <__kernel_rem_pio2+0x2a8>
 800c6b2:	ab0c      	add	r3, sp, #48	@ 0x30
 800c6b4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c6b8:	f7f3 ff2c 	bl	8000514 <__aeabi_i2d>
 800c6bc:	4622      	mov	r2, r4
 800c6be:	462b      	mov	r3, r5
 800c6c0:	f7f3 ff92 	bl	80005e8 <__aeabi_dmul>
 800c6c4:	4652      	mov	r2, sl
 800c6c6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800c6ca:	465b      	mov	r3, fp
 800c6cc:	4620      	mov	r0, r4
 800c6ce:	4629      	mov	r1, r5
 800c6d0:	f7f3 ff8a 	bl	80005e8 <__aeabi_dmul>
 800c6d4:	3e01      	subs	r6, #1
 800c6d6:	4604      	mov	r4, r0
 800c6d8:	460d      	mov	r5, r1
 800c6da:	e718      	b.n	800c50e <__kernel_rem_pio2+0x2ce>
 800c6dc:	9906      	ldr	r1, [sp, #24]
 800c6de:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800c6e2:	9106      	str	r1, [sp, #24]
 800c6e4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800c6e8:	f7f3 ff7e 	bl	80005e8 <__aeabi_dmul>
 800c6ec:	4602      	mov	r2, r0
 800c6ee:	460b      	mov	r3, r1
 800c6f0:	4650      	mov	r0, sl
 800c6f2:	4659      	mov	r1, fp
 800c6f4:	f7f3 fdc2 	bl	800027c <__adddf3>
 800c6f8:	3601      	adds	r6, #1
 800c6fa:	4682      	mov	sl, r0
 800c6fc:	468b      	mov	fp, r1
 800c6fe:	9b00      	ldr	r3, [sp, #0]
 800c700:	429e      	cmp	r6, r3
 800c702:	dc01      	bgt.n	800c708 <__kernel_rem_pio2+0x4c8>
 800c704:	42b5      	cmp	r5, r6
 800c706:	dae9      	bge.n	800c6dc <__kernel_rem_pio2+0x49c>
 800c708:	ab48      	add	r3, sp, #288	@ 0x120
 800c70a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c70e:	e9c5 ab00 	strd	sl, fp, [r5]
 800c712:	3c01      	subs	r4, #1
 800c714:	e6ff      	b.n	800c516 <__kernel_rem_pio2+0x2d6>
 800c716:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800c718:	2b02      	cmp	r3, #2
 800c71a:	dc0b      	bgt.n	800c734 <__kernel_rem_pio2+0x4f4>
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	dc39      	bgt.n	800c794 <__kernel_rem_pio2+0x554>
 800c720:	d05d      	beq.n	800c7de <__kernel_rem_pio2+0x59e>
 800c722:	9b02      	ldr	r3, [sp, #8]
 800c724:	f003 0007 	and.w	r0, r3, #7
 800c728:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800c72c:	ecbd 8b02 	vpop	{d8}
 800c730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c734:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800c736:	2b03      	cmp	r3, #3
 800c738:	d1f3      	bne.n	800c722 <__kernel_rem_pio2+0x4e2>
 800c73a:	9b05      	ldr	r3, [sp, #20]
 800c73c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c740:	eb0d 0403 	add.w	r4, sp, r3
 800c744:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800c748:	4625      	mov	r5, r4
 800c74a:	46c2      	mov	sl, r8
 800c74c:	f1ba 0f00 	cmp.w	sl, #0
 800c750:	f1a5 0508 	sub.w	r5, r5, #8
 800c754:	dc6b      	bgt.n	800c82e <__kernel_rem_pio2+0x5ee>
 800c756:	4645      	mov	r5, r8
 800c758:	2d01      	cmp	r5, #1
 800c75a:	f1a4 0408 	sub.w	r4, r4, #8
 800c75e:	f300 8087 	bgt.w	800c870 <__kernel_rem_pio2+0x630>
 800c762:	9c05      	ldr	r4, [sp, #20]
 800c764:	ab48      	add	r3, sp, #288	@ 0x120
 800c766:	441c      	add	r4, r3
 800c768:	2000      	movs	r0, #0
 800c76a:	2100      	movs	r1, #0
 800c76c:	f1b8 0f01 	cmp.w	r8, #1
 800c770:	f300 809c 	bgt.w	800c8ac <__kernel_rem_pio2+0x66c>
 800c774:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800c778:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800c77c:	f1b9 0f00 	cmp.w	r9, #0
 800c780:	f040 80a6 	bne.w	800c8d0 <__kernel_rem_pio2+0x690>
 800c784:	9b04      	ldr	r3, [sp, #16]
 800c786:	e9c3 7800 	strd	r7, r8, [r3]
 800c78a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800c78e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c792:	e7c6      	b.n	800c722 <__kernel_rem_pio2+0x4e2>
 800c794:	9d05      	ldr	r5, [sp, #20]
 800c796:	ab48      	add	r3, sp, #288	@ 0x120
 800c798:	441d      	add	r5, r3
 800c79a:	4644      	mov	r4, r8
 800c79c:	2000      	movs	r0, #0
 800c79e:	2100      	movs	r1, #0
 800c7a0:	2c00      	cmp	r4, #0
 800c7a2:	da35      	bge.n	800c810 <__kernel_rem_pio2+0x5d0>
 800c7a4:	f1b9 0f00 	cmp.w	r9, #0
 800c7a8:	d038      	beq.n	800c81c <__kernel_rem_pio2+0x5dc>
 800c7aa:	4602      	mov	r2, r0
 800c7ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c7b0:	9c04      	ldr	r4, [sp, #16]
 800c7b2:	e9c4 2300 	strd	r2, r3, [r4]
 800c7b6:	4602      	mov	r2, r0
 800c7b8:	460b      	mov	r3, r1
 800c7ba:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800c7be:	f7f3 fd5b 	bl	8000278 <__aeabi_dsub>
 800c7c2:	ad4a      	add	r5, sp, #296	@ 0x128
 800c7c4:	2401      	movs	r4, #1
 800c7c6:	45a0      	cmp	r8, r4
 800c7c8:	da2b      	bge.n	800c822 <__kernel_rem_pio2+0x5e2>
 800c7ca:	f1b9 0f00 	cmp.w	r9, #0
 800c7ce:	d002      	beq.n	800c7d6 <__kernel_rem_pio2+0x596>
 800c7d0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c7d4:	4619      	mov	r1, r3
 800c7d6:	9b04      	ldr	r3, [sp, #16]
 800c7d8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c7dc:	e7a1      	b.n	800c722 <__kernel_rem_pio2+0x4e2>
 800c7de:	9c05      	ldr	r4, [sp, #20]
 800c7e0:	ab48      	add	r3, sp, #288	@ 0x120
 800c7e2:	441c      	add	r4, r3
 800c7e4:	2000      	movs	r0, #0
 800c7e6:	2100      	movs	r1, #0
 800c7e8:	f1b8 0f00 	cmp.w	r8, #0
 800c7ec:	da09      	bge.n	800c802 <__kernel_rem_pio2+0x5c2>
 800c7ee:	f1b9 0f00 	cmp.w	r9, #0
 800c7f2:	d002      	beq.n	800c7fa <__kernel_rem_pio2+0x5ba>
 800c7f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c7f8:	4619      	mov	r1, r3
 800c7fa:	9b04      	ldr	r3, [sp, #16]
 800c7fc:	e9c3 0100 	strd	r0, r1, [r3]
 800c800:	e78f      	b.n	800c722 <__kernel_rem_pio2+0x4e2>
 800c802:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c806:	f7f3 fd39 	bl	800027c <__adddf3>
 800c80a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800c80e:	e7eb      	b.n	800c7e8 <__kernel_rem_pio2+0x5a8>
 800c810:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800c814:	f7f3 fd32 	bl	800027c <__adddf3>
 800c818:	3c01      	subs	r4, #1
 800c81a:	e7c1      	b.n	800c7a0 <__kernel_rem_pio2+0x560>
 800c81c:	4602      	mov	r2, r0
 800c81e:	460b      	mov	r3, r1
 800c820:	e7c6      	b.n	800c7b0 <__kernel_rem_pio2+0x570>
 800c822:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800c826:	f7f3 fd29 	bl	800027c <__adddf3>
 800c82a:	3401      	adds	r4, #1
 800c82c:	e7cb      	b.n	800c7c6 <__kernel_rem_pio2+0x586>
 800c82e:	ed95 7b00 	vldr	d7, [r5]
 800c832:	ed8d 7b00 	vstr	d7, [sp]
 800c836:	ed95 7b02 	vldr	d7, [r5, #8]
 800c83a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c83e:	ec53 2b17 	vmov	r2, r3, d7
 800c842:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c846:	f7f3 fd19 	bl	800027c <__adddf3>
 800c84a:	4602      	mov	r2, r0
 800c84c:	460b      	mov	r3, r1
 800c84e:	4606      	mov	r6, r0
 800c850:	460f      	mov	r7, r1
 800c852:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c856:	f7f3 fd0f 	bl	8000278 <__aeabi_dsub>
 800c85a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c85e:	f7f3 fd0d 	bl	800027c <__adddf3>
 800c862:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800c866:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800c86a:	e9c5 6700 	strd	r6, r7, [r5]
 800c86e:	e76d      	b.n	800c74c <__kernel_rem_pio2+0x50c>
 800c870:	ed94 7b00 	vldr	d7, [r4]
 800c874:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800c878:	ec51 0b17 	vmov	r0, r1, d7
 800c87c:	4652      	mov	r2, sl
 800c87e:	465b      	mov	r3, fp
 800c880:	ed8d 7b00 	vstr	d7, [sp]
 800c884:	f7f3 fcfa 	bl	800027c <__adddf3>
 800c888:	4602      	mov	r2, r0
 800c88a:	460b      	mov	r3, r1
 800c88c:	4606      	mov	r6, r0
 800c88e:	460f      	mov	r7, r1
 800c890:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c894:	f7f3 fcf0 	bl	8000278 <__aeabi_dsub>
 800c898:	4652      	mov	r2, sl
 800c89a:	465b      	mov	r3, fp
 800c89c:	f7f3 fcee 	bl	800027c <__adddf3>
 800c8a0:	3d01      	subs	r5, #1
 800c8a2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c8a6:	e9c4 6700 	strd	r6, r7, [r4]
 800c8aa:	e755      	b.n	800c758 <__kernel_rem_pio2+0x518>
 800c8ac:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c8b0:	f7f3 fce4 	bl	800027c <__adddf3>
 800c8b4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800c8b8:	e758      	b.n	800c76c <__kernel_rem_pio2+0x52c>
 800c8ba:	bf00      	nop
 800c8bc:	f3af 8000 	nop.w
	...
 800c8c8:	41700000 	.word	0x41700000
 800c8cc:	3e700000 	.word	0x3e700000
 800c8d0:	9b04      	ldr	r3, [sp, #16]
 800c8d2:	9a04      	ldr	r2, [sp, #16]
 800c8d4:	601f      	str	r7, [r3, #0]
 800c8d6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800c8da:	605c      	str	r4, [r3, #4]
 800c8dc:	609d      	str	r5, [r3, #8]
 800c8de:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c8e2:	60d3      	str	r3, [r2, #12]
 800c8e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c8e8:	6110      	str	r0, [r2, #16]
 800c8ea:	6153      	str	r3, [r2, #20]
 800c8ec:	e719      	b.n	800c722 <__kernel_rem_pio2+0x4e2>
 800c8ee:	bf00      	nop

0800c8f0 <scalbn>:
 800c8f0:	b570      	push	{r4, r5, r6, lr}
 800c8f2:	ec55 4b10 	vmov	r4, r5, d0
 800c8f6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c8fa:	4606      	mov	r6, r0
 800c8fc:	462b      	mov	r3, r5
 800c8fe:	b991      	cbnz	r1, 800c926 <scalbn+0x36>
 800c900:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c904:	4323      	orrs	r3, r4
 800c906:	d03d      	beq.n	800c984 <scalbn+0x94>
 800c908:	4b35      	ldr	r3, [pc, #212]	@ (800c9e0 <scalbn+0xf0>)
 800c90a:	4620      	mov	r0, r4
 800c90c:	4629      	mov	r1, r5
 800c90e:	2200      	movs	r2, #0
 800c910:	f7f3 fe6a 	bl	80005e8 <__aeabi_dmul>
 800c914:	4b33      	ldr	r3, [pc, #204]	@ (800c9e4 <scalbn+0xf4>)
 800c916:	429e      	cmp	r6, r3
 800c918:	4604      	mov	r4, r0
 800c91a:	460d      	mov	r5, r1
 800c91c:	da0f      	bge.n	800c93e <scalbn+0x4e>
 800c91e:	a328      	add	r3, pc, #160	@ (adr r3, 800c9c0 <scalbn+0xd0>)
 800c920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c924:	e01e      	b.n	800c964 <scalbn+0x74>
 800c926:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800c92a:	4291      	cmp	r1, r2
 800c92c:	d10b      	bne.n	800c946 <scalbn+0x56>
 800c92e:	4622      	mov	r2, r4
 800c930:	4620      	mov	r0, r4
 800c932:	4629      	mov	r1, r5
 800c934:	f7f3 fca2 	bl	800027c <__adddf3>
 800c938:	4604      	mov	r4, r0
 800c93a:	460d      	mov	r5, r1
 800c93c:	e022      	b.n	800c984 <scalbn+0x94>
 800c93e:	460b      	mov	r3, r1
 800c940:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c944:	3936      	subs	r1, #54	@ 0x36
 800c946:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800c94a:	4296      	cmp	r6, r2
 800c94c:	dd0d      	ble.n	800c96a <scalbn+0x7a>
 800c94e:	2d00      	cmp	r5, #0
 800c950:	a11d      	add	r1, pc, #116	@ (adr r1, 800c9c8 <scalbn+0xd8>)
 800c952:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c956:	da02      	bge.n	800c95e <scalbn+0x6e>
 800c958:	a11d      	add	r1, pc, #116	@ (adr r1, 800c9d0 <scalbn+0xe0>)
 800c95a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c95e:	a31a      	add	r3, pc, #104	@ (adr r3, 800c9c8 <scalbn+0xd8>)
 800c960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c964:	f7f3 fe40 	bl	80005e8 <__aeabi_dmul>
 800c968:	e7e6      	b.n	800c938 <scalbn+0x48>
 800c96a:	1872      	adds	r2, r6, r1
 800c96c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800c970:	428a      	cmp	r2, r1
 800c972:	dcec      	bgt.n	800c94e <scalbn+0x5e>
 800c974:	2a00      	cmp	r2, #0
 800c976:	dd08      	ble.n	800c98a <scalbn+0x9a>
 800c978:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c97c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c980:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c984:	ec45 4b10 	vmov	d0, r4, r5
 800c988:	bd70      	pop	{r4, r5, r6, pc}
 800c98a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800c98e:	da08      	bge.n	800c9a2 <scalbn+0xb2>
 800c990:	2d00      	cmp	r5, #0
 800c992:	a10b      	add	r1, pc, #44	@ (adr r1, 800c9c0 <scalbn+0xd0>)
 800c994:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c998:	dac1      	bge.n	800c91e <scalbn+0x2e>
 800c99a:	a10f      	add	r1, pc, #60	@ (adr r1, 800c9d8 <scalbn+0xe8>)
 800c99c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9a0:	e7bd      	b.n	800c91e <scalbn+0x2e>
 800c9a2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c9a6:	3236      	adds	r2, #54	@ 0x36
 800c9a8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c9ac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c9b0:	4620      	mov	r0, r4
 800c9b2:	4b0d      	ldr	r3, [pc, #52]	@ (800c9e8 <scalbn+0xf8>)
 800c9b4:	4629      	mov	r1, r5
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	e7d4      	b.n	800c964 <scalbn+0x74>
 800c9ba:	bf00      	nop
 800c9bc:	f3af 8000 	nop.w
 800c9c0:	c2f8f359 	.word	0xc2f8f359
 800c9c4:	01a56e1f 	.word	0x01a56e1f
 800c9c8:	8800759c 	.word	0x8800759c
 800c9cc:	7e37e43c 	.word	0x7e37e43c
 800c9d0:	8800759c 	.word	0x8800759c
 800c9d4:	fe37e43c 	.word	0xfe37e43c
 800c9d8:	c2f8f359 	.word	0xc2f8f359
 800c9dc:	81a56e1f 	.word	0x81a56e1f
 800c9e0:	43500000 	.word	0x43500000
 800c9e4:	ffff3cb0 	.word	0xffff3cb0
 800c9e8:	3c900000 	.word	0x3c900000
 800c9ec:	00000000 	.word	0x00000000

0800c9f0 <floor>:
 800c9f0:	ec51 0b10 	vmov	r0, r1, d0
 800c9f4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c9f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9fc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800ca00:	2e13      	cmp	r6, #19
 800ca02:	460c      	mov	r4, r1
 800ca04:	4605      	mov	r5, r0
 800ca06:	4680      	mov	r8, r0
 800ca08:	dc34      	bgt.n	800ca74 <floor+0x84>
 800ca0a:	2e00      	cmp	r6, #0
 800ca0c:	da17      	bge.n	800ca3e <floor+0x4e>
 800ca0e:	a332      	add	r3, pc, #200	@ (adr r3, 800cad8 <floor+0xe8>)
 800ca10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca14:	f7f3 fc32 	bl	800027c <__adddf3>
 800ca18:	2200      	movs	r2, #0
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	f7f4 f874 	bl	8000b08 <__aeabi_dcmpgt>
 800ca20:	b150      	cbz	r0, 800ca38 <floor+0x48>
 800ca22:	2c00      	cmp	r4, #0
 800ca24:	da55      	bge.n	800cad2 <floor+0xe2>
 800ca26:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800ca2a:	432c      	orrs	r4, r5
 800ca2c:	2500      	movs	r5, #0
 800ca2e:	42ac      	cmp	r4, r5
 800ca30:	4c2b      	ldr	r4, [pc, #172]	@ (800cae0 <floor+0xf0>)
 800ca32:	bf08      	it	eq
 800ca34:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800ca38:	4621      	mov	r1, r4
 800ca3a:	4628      	mov	r0, r5
 800ca3c:	e023      	b.n	800ca86 <floor+0x96>
 800ca3e:	4f29      	ldr	r7, [pc, #164]	@ (800cae4 <floor+0xf4>)
 800ca40:	4137      	asrs	r7, r6
 800ca42:	ea01 0307 	and.w	r3, r1, r7
 800ca46:	4303      	orrs	r3, r0
 800ca48:	d01d      	beq.n	800ca86 <floor+0x96>
 800ca4a:	a323      	add	r3, pc, #140	@ (adr r3, 800cad8 <floor+0xe8>)
 800ca4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca50:	f7f3 fc14 	bl	800027c <__adddf3>
 800ca54:	2200      	movs	r2, #0
 800ca56:	2300      	movs	r3, #0
 800ca58:	f7f4 f856 	bl	8000b08 <__aeabi_dcmpgt>
 800ca5c:	2800      	cmp	r0, #0
 800ca5e:	d0eb      	beq.n	800ca38 <floor+0x48>
 800ca60:	2c00      	cmp	r4, #0
 800ca62:	bfbe      	ittt	lt
 800ca64:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800ca68:	4133      	asrlt	r3, r6
 800ca6a:	18e4      	addlt	r4, r4, r3
 800ca6c:	ea24 0407 	bic.w	r4, r4, r7
 800ca70:	2500      	movs	r5, #0
 800ca72:	e7e1      	b.n	800ca38 <floor+0x48>
 800ca74:	2e33      	cmp	r6, #51	@ 0x33
 800ca76:	dd0a      	ble.n	800ca8e <floor+0x9e>
 800ca78:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800ca7c:	d103      	bne.n	800ca86 <floor+0x96>
 800ca7e:	4602      	mov	r2, r0
 800ca80:	460b      	mov	r3, r1
 800ca82:	f7f3 fbfb 	bl	800027c <__adddf3>
 800ca86:	ec41 0b10 	vmov	d0, r0, r1
 800ca8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca8e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800ca92:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800ca96:	40df      	lsrs	r7, r3
 800ca98:	4207      	tst	r7, r0
 800ca9a:	d0f4      	beq.n	800ca86 <floor+0x96>
 800ca9c:	a30e      	add	r3, pc, #56	@ (adr r3, 800cad8 <floor+0xe8>)
 800ca9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa2:	f7f3 fbeb 	bl	800027c <__adddf3>
 800caa6:	2200      	movs	r2, #0
 800caa8:	2300      	movs	r3, #0
 800caaa:	f7f4 f82d 	bl	8000b08 <__aeabi_dcmpgt>
 800caae:	2800      	cmp	r0, #0
 800cab0:	d0c2      	beq.n	800ca38 <floor+0x48>
 800cab2:	2c00      	cmp	r4, #0
 800cab4:	da0a      	bge.n	800cacc <floor+0xdc>
 800cab6:	2e14      	cmp	r6, #20
 800cab8:	d101      	bne.n	800cabe <floor+0xce>
 800caba:	3401      	adds	r4, #1
 800cabc:	e006      	b.n	800cacc <floor+0xdc>
 800cabe:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800cac2:	2301      	movs	r3, #1
 800cac4:	40b3      	lsls	r3, r6
 800cac6:	441d      	add	r5, r3
 800cac8:	4545      	cmp	r5, r8
 800caca:	d3f6      	bcc.n	800caba <floor+0xca>
 800cacc:	ea25 0507 	bic.w	r5, r5, r7
 800cad0:	e7b2      	b.n	800ca38 <floor+0x48>
 800cad2:	2500      	movs	r5, #0
 800cad4:	462c      	mov	r4, r5
 800cad6:	e7af      	b.n	800ca38 <floor+0x48>
 800cad8:	8800759c 	.word	0x8800759c
 800cadc:	7e37e43c 	.word	0x7e37e43c
 800cae0:	bff00000 	.word	0xbff00000
 800cae4:	000fffff 	.word	0x000fffff

0800cae8 <_init>:
 800cae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caea:	bf00      	nop
 800caec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800caee:	bc08      	pop	{r3}
 800caf0:	469e      	mov	lr, r3
 800caf2:	4770      	bx	lr

0800caf4 <_fini>:
 800caf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caf6:	bf00      	nop
 800caf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cafa:	bc08      	pop	{r3}
 800cafc:	469e      	mov	lr, r3
 800cafe:	4770      	bx	lr
